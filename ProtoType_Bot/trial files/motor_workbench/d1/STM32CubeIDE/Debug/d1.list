
d1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009eb8  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  0800a090  0800a090  0000b090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4a8  0800a4a8  0000c4f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4a8  0800a4a8  0000b4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4b0  0800a4b0  0000c4f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4b0  0800a4b0  0000b4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a4b4  0800a4b4  0000b4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004f8  20000000  0800a4b8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017d8  200004f8  0800a9b0  0000c4f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cd0  0800a9b0  0000ccd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c4f8  2**0
                  CONTENTS, READONLY
 12 .debug_line   0004ebbd  00000000  00000000  0000c528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000006e  00000000  00000000  0005b0e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0004e92d  00000000  00000000  0005b153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009906  00000000  00000000  000a9a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002368  00000000  00000000  000b3388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0010e5b6  00000000  00000000  000b56f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000038e2  00000000  00000000  001c3ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 0001e2ac  00000000  00000000  001c7588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002f387  00000000  00000000  001e5834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00214bbb  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005c0c  00000000  00000000  00214c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200004f8 	.word	0x200004f8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a078 	.word	0x0800a078

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200004fc 	.word	0x200004fc
 8000214:	0800a078 	.word	0x0800a078

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000508:	480d      	ldr	r0, [pc, #52]	@ (8000540 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800050a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800050c:	f004 f992 	bl	8004834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000510:	480c      	ldr	r0, [pc, #48]	@ (8000544 <LoopForever+0x6>)
  ldr r1, =_edata
 8000512:	490d      	ldr	r1, [pc, #52]	@ (8000548 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000514:	4a0d      	ldr	r2, [pc, #52]	@ (800054c <LoopForever+0xe>)
  movs r3, #0
 8000516:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000518:	e002      	b.n	8000520 <LoopCopyDataInit>

0800051a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800051c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800051e:	3304      	adds	r3, #4

08000520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000524:	d3f9      	bcc.n	800051a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000526:	4a0a      	ldr	r2, [pc, #40]	@ (8000550 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000528:	4c0a      	ldr	r4, [pc, #40]	@ (8000554 <LoopForever+0x16>)
  movs r3, #0
 800052a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800052c:	e001      	b.n	8000532 <LoopFillZerobss>

0800052e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800052e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000530:	3204      	adds	r2, #4

08000532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000534:	d3fb      	bcc.n	800052e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000536:	f009 fd6d 	bl	800a014 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800053a:	f000 fba7 	bl	8000c8c <main>

0800053e <LoopForever>:

LoopForever:
    b LoopForever
 800053e:	e7fe      	b.n	800053e <LoopForever>
  ldr   r0, =_estack
 8000540:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000548:	200004f8 	.word	0x200004f8
  ldr r2, =_sidata
 800054c:	0800a4b8 	.word	0x0800a4b8
  ldr r2, =_sbss
 8000550:	200004f8 	.word	0x200004f8
  ldr r4, =_ebss
 8000554:	20001cd0 	.word	0x20001cd0

08000558 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000558:	e7fe      	b.n	8000558 <BusFault_Handler>
	...

0800055c <ASPEP_start>:
  * @brief  Starts ASPEP communication by configuring UART.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->ASPEPIp);
 8000560:	6940      	ldr	r0, [r0, #20]
 8000562:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000564:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000566:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
    /* Configure UART to receive first packet*/
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000568:	6d65      	ldr	r5, [r4, #84]	@ 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 800056a:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 800056e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000572:	6960      	ldr	r0, [r4, #20]
 8000574:	f104 011c 	add.w	r1, r4, #28
 8000578:	462b      	mov	r3, r5
 800057a:	2204      	movs	r2, #4
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 800057c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000580:	4718      	bx	r3
 8000582:	bf00      	nop

08000584 <ASPEP_sendBeacon>:
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  * @param  *capabilities Matched capabilities between controller and performer
  */
void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000584:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
             | (((uint32_t)capabilities->version) << 4U)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000586:	780b      	ldrb	r3, [r1, #0]
             | (((uint32_t)capabilities->version) << 4U)
 8000588:	790a      	ldrb	r2, [r1, #4]
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 800058a:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800058e:	4c1e      	ldr	r4, [pc, #120]	@ (8000608 <ASPEP_sendBeacon+0x84>)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000590:	01db      	lsls	r3, r3, #7
 8000592:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 8000596:	784a      	ldrb	r2, [r1, #1]
 8000598:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 800059c:	78ca      	ldrb	r2, [r1, #3]
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 800059e:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80005a2:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 80005ac:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80005b0:	5ca2      	ldrb	r2, [r4, r2]
 80005b2:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 80005b6:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80005b8:	5ca2      	ldrb	r2, [r4, r2]
 80005ba:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 80005be:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80005c0:	5ca2      	ldrb	r2, [r4, r2]
 80005c2:	4c12      	ldr	r4, [pc, #72]	@ (800060c <ASPEP_sendBeacon+0x88>)
 80005c4:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 80005c8:	5ca2      	ldrb	r2, [r4, r2]
 80005ca:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80005ce:	f043 0305 	orr.w	r3, r3, #5
 80005d2:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d4:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80005d6:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80005d8:	b14b      	cbz	r3, 80005ee <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 80005da:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 80005dc:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80005e0:	b913      	cbnz	r3, 80005e8 <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 80005e2:	2302      	movs	r3, #2
 80005e4:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 80005e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80005ec:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80005ee:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 80005f2:	2303      	movs	r3, #3
 80005f4:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80005f8:	6481      	str	r1, [r0, #72]	@ 0x48
 80005fa:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 80005fc:	2204      	movs	r2, #4
 80005fe:	6d83      	ldr	r3, [r0, #88]	@ 0x58
}
 8000600:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000604:	6940      	ldr	r0, [r0, #20]
 8000606:	4718      	bx	r3
 8000608:	0800a0a0 	.word	0x0800a0a0
 800060c:	0800a090 	.word	0x0800a090

08000610 <ASPEP_sendPing>:
{
 8000610:	b430      	push	{r4, r5}
                   | (uint32_t)((uint32_t)cBit << 5U)
 8000612:	014b      	lsls	r3, r1, #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8000614:	f890 c060 	ldrb.w	ip, [r0, #96]	@ 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 8000618:	f890 4063 	ldrb.w	r4, [r0, #99]	@ 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800061c:	4d1d      	ldr	r5, [pc, #116]	@ (8000694 <ASPEP_sendPing+0x84>)
                   | (uint32_t)((uint32_t)cBit << 5U)
 800061e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000622:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
                   | (uint32_t)((uint32_t)Nbit << 6U)
 8000626:	f00c 0101 	and.w	r1, ip, #1
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800062a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800062e:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
                   | (uint32_t)((uint32_t)ipID << 8U)
 8000632:	f004 040f 	and.w	r4, r4, #15
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000636:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800063a:	b2da      	uxtb	r2, r3
 800063c:	4c16      	ldr	r4, [pc, #88]	@ (8000698 <ASPEP_sendPing+0x88>)
 800063e:	f042 0206 	orr.w	r2, r2, #6
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000642:	f043 0106 	orr.w	r1, r3, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000646:	5ca2      	ldrb	r2, [r4, r2]
 8000648:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 800064c:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800064e:	5ca2      	ldrb	r2, [r4, r2]
 8000650:	ea82 4213 	eor.w	r2, r2, r3, lsr #16
 8000654:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000656:	5ca2      	ldrb	r2, [r4, r2]
 8000658:	ea82 6313 	eor.w	r3, r2, r3, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 800065c:	5ceb      	ldrb	r3, [r5, r3]
 800065e:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8000662:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000664:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000666:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8000668:	b143      	cbz	r3, 800067c <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 800066a:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 800066c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000670:	b913      	cbnz	r3, 8000678 <ASPEP_sendPing+0x68>
          pHandle->ctrlBuffer.state = pending;
 8000672:	2302      	movs	r3, #2
 8000674:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 8000678:	bc30      	pop	{r4, r5}
 800067a:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 800067c:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8000680:	2303      	movs	r3, #3
 8000682:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000686:	6481      	str	r1, [r0, #72]	@ 0x48
 8000688:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 800068a:	2204      	movs	r2, #4
 800068c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800068e:	6940      	ldr	r0, [r0, #20]
}
 8000690:	bc30      	pop	{r4, r5}
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000692:	4718      	bx	r3
 8000694:	0800a090 	.word	0x0800a090
 8000698:	0800a0a0 	.word	0x0800a0a0

0800069c <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 800069c:	2a0a      	cmp	r2, #10
 800069e:	d009      	beq.n	80006b4 <ASPEP_getBuffer+0x18>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 80006a0:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d91d      	bls.n	80006e4 <ASPEP_getBuffer+0x48>
 80006a8:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d90d      	bls.n	80006cc <ASPEP_getBuffer+0x30>
        result = false;
 80006b0:	2000      	movs	r0, #0
}
 80006b2:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 80006b4:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d8f9      	bhi.n	80006b0 <ASPEP_getBuffer+0x14>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80006bc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
        pHandle->syncBuffer.state = writeLock;
 80006be:	2201      	movs	r2, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80006c0:	3304      	adds	r3, #4
 80006c2:	600b      	str	r3, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 80006c4:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
  bool result = true;
 80006c8:	2001      	movs	r0, #1
 80006ca:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006cc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
          pHandle->asyncBufferB.state = writeLock;
 80006ce:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80006d2:	f100 0238 	add.w	r2, r0, #56	@ 0x38
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006d6:	3304      	adds	r3, #4
          pHandle->asyncBufferB.state = writeLock;
 80006d8:	f880 c03e 	strb.w	ip, [r0, #62]	@ 0x3e
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80006dc:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006de:	600b      	str	r3, [r1, #0]
  bool result = true;
 80006e0:	2001      	movs	r0, #1
 80006e2:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006e4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
          pHandle->asyncBufferA.state = writeLock;
 80006e6:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80006ea:	f100 0230 	add.w	r2, r0, #48	@ 0x30
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006ee:	3304      	adds	r3, #4
          pHandle->asyncBufferA.state = writeLock;
 80006f0:	f880 c036 	strb.w	ip, [r0, #54]	@ 0x36
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80006f4:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006f6:	600b      	str	r3, [r1, #0]
 80006f8:	e7f2      	b.n	80006e0 <ASPEP_getBuffer+0x44>
 80006fa:	bf00      	nop

080006fc <ASPEP_sendPacket>:
{
 80006fc:	4684      	mov	ip, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 80006fe:	f890 0064 	ldrb.w	r0, [r0, #100]	@ 0x64
 8000702:	2802      	cmp	r0, #2
 8000704:	d001      	beq.n	800070a <ASPEP_sendPacket+0xe>
      result = ASPEP_NOT_CONNECTED;
 8000706:	2002      	movs	r0, #2
 8000708:	4770      	bx	lr
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 800070a:	ea43 1002 	orr.w	r0, r3, r2, lsl #4
      *header = tmpHeader;
 800070e:	f841 0c04 	str.w	r0, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 8000712:	f89c 006c 	ldrb.w	r0, [ip, #108]	@ 0x6c
 8000716:	2801      	cmp	r0, #1
 8000718:	d104      	bne.n	8000724 <ASPEP_sendPacket+0x28>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 800071a:	f64f 60ca 	movw	r0, #65226	@ 0xfeca
 800071e:	5288      	strh	r0, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000720:	3202      	adds	r2, #2
 8000722:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 8000724:	2b0a      	cmp	r3, #10
 8000726:	d105      	bne.n	8000734 <ASPEP_sendPacket+0x38>
        if (pSupHandle->MCP_PacketAvailable)
 8000728:	f89c 0010 	ldrb.w	r0, [ip, #16]
 800072c:	b348      	cbz	r0, 8000782 <ASPEP_sendPacket+0x86>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from controller is processed*/
 800072e:	2000      	movs	r0, #0
 8000730:	f88c 0010 	strb.w	r0, [ip, #16]
  uint32_t header = *headerPtr;
 8000734:	f851 0c04 	ldr.w	r0, [r1, #-4]
{
 8000738:	b570      	push	{r4, r5, r6, lr}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800073a:	4d34      	ldr	r5, [pc, #208]	@ (800080c <ASPEP_sendPacket+0x110>)
 800073c:	b2c4      	uxtb	r4, r0
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 800073e:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000740:	5d2e      	ldrb	r6, [r5, r4]
 8000742:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8000746:	4074      	eors	r4, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 8000748:	f1a1 0e04 	sub.w	lr, r1, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800074c:	5d2e      	ldrb	r6, [r5, r4]
 800074e:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8000752:	4074      	eors	r4, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000754:	b292      	uxth	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000756:	5d2c      	ldrb	r4, [r5, r4]
 8000758:	f3c0 6503 	ubfx	r5, r0, #24, #4
 800075c:	406c      	eors	r4, r5
 800075e:	4d2c      	ldr	r5, [pc, #176]	@ (8000810 <ASPEP_sendPacket+0x114>)
  *headerPtr |= (uint32_t)crc << 28;
 8000760:	5d2c      	ldrb	r4, [r5, r4]
 8000762:	ea40 7004 	orr.w	r0, r0, r4, lsl #28
 8000766:	f841 0c04 	str.w	r0, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 800076a:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 800076c:	f8dc 1048 	ldr.w	r1, [ip, #72]	@ 0x48
 8000770:	b1b9      	cbz	r1, 80007a2 <ASPEP_sendPacket+0xa6>
  __ASM volatile ("cpsie i" : : : "memory");
 8000772:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 8000774:	2b09      	cmp	r3, #9
 8000776:	d006      	beq.n	8000786 <ASPEP_sendPacket+0x8a>
      else if (MCTL_SYNC == dataType)
 8000778:	2b0a      	cmp	r3, #10
 800077a:	d02a      	beq.n	80007d2 <ASPEP_sendPacket+0xd6>
      else if(ASPEP_CTRL == dataType)
 800077c:	b37b      	cbz	r3, 80007de <ASPEP_sendPacket+0xe2>
  uint8_t result = ASPEP_OK;
 800077e:	2000      	movs	r0, #0
}
 8000780:	bd70      	pop	{r4, r5, r6, pc}
          result = MCTL_SYNC_NOT_EXPECTED;
 8000782:	2001      	movs	r0, #1
}
 8000784:	4770      	bx	lr
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 8000786:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 800078a:	6819      	ldr	r1, [r3, #0]
  uint8_t result = ASPEP_OK;
 800078c:	458e      	cmp	lr, r1
 800078e:	bf14      	ite	ne
 8000790:	2003      	movne	r0, #3
 8000792:	2000      	moveq	r0, #0
        if (NULL == pHandle->asyncNextBuffer)
 8000794:	f8dc 1044 	ldr.w	r1, [ip, #68]	@ 0x44
 8000798:	b3a1      	cbz	r1, 8000804 <ASPEP_sendPacket+0x108>
        pHandle->lastRequestedAsyncBuff->state = pending;
 800079a:	2102      	movs	r1, #2
 800079c:	7199      	strb	r1, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 800079e:	809a      	strh	r2, [r3, #4]
}
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
      if (MCTL_ASYNC == dataType)
 80007a2:	2b09      	cmp	r3, #9
 80007a4:	d029      	beq.n	80007fa <ASPEP_sendPacket+0xfe>
      else if (MCTL_SYNC == dataType)
 80007a6:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 80007a8:	f04f 0303 	mov.w	r3, #3
 80007ac:	bf0b      	itete	eq
 80007ae:	f88c 302e 	strbeq.w	r3, [ip, #46]	@ 0x2e
        pHandle->ctrlBuffer.state = readLock;
 80007b2:	f88c 3024 	strbne.w	r3, [ip, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 80007b6:	f10c 0328 	addeq.w	r3, ip, #40	@ 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80007ba:	f10c 0320 	addne.w	r3, ip, #32
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 80007be:	f8cc 3048 	str.w	r3, [ip, #72]	@ 0x48
 80007c2:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 80007c4:	f8dc 3058 	ldr.w	r3, [ip, #88]	@ 0x58
 80007c8:	f8dc 0014 	ldr.w	r0, [ip, #20]
 80007cc:	4671      	mov	r1, lr
 80007ce:	4798      	blx	r3
 80007d0:	e7d5      	b.n	800077e <ASPEP_sendPacket+0x82>
        if (pHandle -> syncBuffer.state != writeLock)
 80007d2:	f89c 302e 	ldrb.w	r3, [ip, #46]	@ 0x2e
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d009      	beq.n	80007ee <ASPEP_sendPacket+0xf2>
          result = ASPEP_BUFFER_ERROR;
 80007da:	2003      	movs	r0, #3
}
 80007dc:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle->ctrlBuffer.state != available)
 80007de:	f89c 3024 	ldrb.w	r3, [ip, #36]	@ 0x24
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d1f9      	bne.n	80007da <ASPEP_sendPacket+0xde>
          pHandle->ctrlBuffer.state = pending;
 80007e6:	2302      	movs	r3, #2
 80007e8:	f88c 3024 	strb.w	r3, [ip, #36]	@ 0x24
 80007ec:	e7c7      	b.n	800077e <ASPEP_sendPacket+0x82>
          pHandle->syncBuffer.state = pending;
 80007ee:	2302      	movs	r3, #2
 80007f0:	f88c 302e 	strb.w	r3, [ip, #46]	@ 0x2e
          pHandle->syncBuffer.length = bufferLength;
 80007f4:	f8ac 202c 	strh.w	r2, [ip, #44]	@ 0x2c
 80007f8:	e7c1      	b.n	800077e <ASPEP_sendPacket+0x82>
        pHandle->lastRequestedAsyncBuff->state = readLock;
 80007fa:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 80007fe:	2103      	movs	r1, #3
 8000800:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8000802:	e7dc      	b.n	80007be <ASPEP_sendPacket+0xc2>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 8000804:	f8cc 3044 	str.w	r3, [ip, #68]	@ 0x44
 8000808:	e7c7      	b.n	800079a <ASPEP_sendPacket+0x9e>
 800080a:	bf00      	nop
 800080c:	0800a0a0 	.word	0x0800a0a0
 8000810:	0800a090 	.word	0x0800a090

08000814 <ASPEP_HWDataTransmittedIT>:
  * Therefore, there is no need to protect this ISR against another higher priority ISR (HF Task).
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8000814:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8000816:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800081a:	2b03      	cmp	r3, #3
{
 800081c:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 800081e:	d013      	beq.n	8000848 <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 8000820:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8000822:	2100      	movs	r1, #0
 8000824:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 8000826:	f890 202e 	ldrb.w	r2, [r0, #46]	@ 0x2e
 800082a:	2a02      	cmp	r2, #2
 800082c:	d013      	beq.n	8000856 <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 800082e:	2b02      	cmp	r3, #2
 8000830:	d11d      	bne.n	800086e <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000832:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000836:	6d83      	ldr	r3, [r0, #88]	@ 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000838:	6481      	str	r1, [r0, #72]	@ 0x48
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 800083a:	2204      	movs	r2, #4
 800083c:	6940      	ldr	r0, [r0, #20]
 800083e:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8000840:	2303      	movs	r3, #3
 8000842:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000846:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 8000848:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
      pHandle->ctrlBuffer.state = available;
 800084c:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 800084e:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 8000850:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    if (pHandle->syncBuffer.state == pending)
 8000854:	d10b      	bne.n	800086e <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000856:	f104 0028 	add.w	r0, r4, #40	@ 0x28
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 800085a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 800085c:	64a0      	str	r0, [r4, #72]	@ 0x48
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 800085e:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8000860:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000862:	6960      	ldr	r0, [r4, #20]
 8000864:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8000866:	2303      	movs	r3, #3
 8000868:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
}
 800086c:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800086e:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 8000870:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000872:	b1cb      	cbz	r3, 80008a8 <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 8000874:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 8000876:	64a3      	str	r3, [r4, #72]	@ 0x48
        pHandle->asyncNextBuffer->state = readLock;
 8000878:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 800087a:	6819      	ldr	r1, [r3, #0]
 800087c:	889a      	ldrh	r2, [r3, #4]
 800087e:	6960      	ldr	r0, [r4, #20]
 8000880:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000882:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 8000884:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 8000888:	2b02      	cmp	r3, #2
 800088a:	d007      	beq.n	800089c <ASPEP_HWDataTransmittedIT+0x88>
 800088c:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8000890:	2b02      	cmp	r3, #2
 8000892:	d003      	beq.n	800089c <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 8000894:	2300      	movs	r3, #0
 8000896:	6463      	str	r3, [r4, #68]	@ 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 8000898:	b662      	cpsie	i
}
 800089a:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 800089c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800089e:	0063      	lsls	r3, r4, #1
 80008a0:	3368      	adds	r3, #104	@ 0x68
 80008a2:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 80008a4:	6463      	str	r3, [r4, #68]	@ 0x44
        {
 80008a6:	e7f7      	b.n	8000898 <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 80008a8:	64a3      	str	r3, [r4, #72]	@ 0x48
 80008aa:	e7f5      	b.n	8000898 <ASPEP_HWDataTransmittedIT+0x84>

080008ac <ASPEP_RXframeProcess>:
    uint16_t packetNumber;
#if VALID_CRC_DATA
    bool validCRCData = true;
#endif
    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 80008ac:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 80008b0:	69c2      	ldr	r2, [r0, #28]
    *packetLength = 0;
 80008b2:	f04f 0c00 	mov.w	ip, #0
{
 80008b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008ba:	4604      	mov	r4, r0
    *packetLength = 0;
 80008bc:	f8a1 c000 	strh.w	ip, [r1]
    if (pHandle->NewPacketAvailable)
 80008c0:	b1cb      	cbz	r3, 80008f6 <ASPEP_RXframeProcess+0x4a>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 80008c2:	f890 3064 	ldrb.w	r3, [r0, #100]	@ 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 80008c6:	f880 c061 	strb.w	ip, [r0, #97]	@ 0x61
      switch (pHandle->ASPEP_State)
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d055      	beq.n	800097a <ASPEP_RXframeProcess+0xce>
 80008ce:	2b02      	cmp	r3, #2
 80008d0:	d018      	beq.n	8000904 <ASPEP_RXframeProcess+0x58>
 80008d2:	b933      	cbnz	r3, 80008e2 <ASPEP_RXframeProcess+0x36>
      {
        case ASPEP_IDLE:
        {
          if (BEACON == pHandle->rxPacketType)
 80008d4:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 80008d6:	2905      	cmp	r1, #5
 80008d8:	f000 80e3 	beq.w	8000aa2 <ASPEP_RXframeProcess+0x1f6>
              /* Nothing to do, controller has to send back new beacon with matching capabilities */
            }
            /* Beacon Packet must be answered*/
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
          }
          else if (PING == pHandle->rxPacketType)
 80008dc:	2906      	cmp	r1, #6
 80008de:	f000 8129 	beq.w	8000b34 <ASPEP_RXframeProcess+0x288>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 80008e2:	2500      	movs	r5, #0

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80008e4:	6960      	ldr	r0, [r4, #20]
 80008e6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80008e8:	2204      	movs	r2, #4
 80008ea:	f104 011c 	add.w	r1, r4, #28
 80008ee:	4798      	blx	r3
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 80008f0:	4628      	mov	r0, r5
 80008f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 80008f6:	f890 3062 	ldrb.w	r3, [r0, #98]	@ 0x62
 80008fa:	b9bb      	cbnz	r3, 800092c <ASPEP_RXframeProcess+0x80>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 80008fc:	2500      	movs	r5, #0
}
 80008fe:	4628      	mov	r0, r5
 8000900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (BEACON == pHandle->rxPacketType)
 8000904:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8000906:	2b05      	cmp	r3, #5
 8000908:	d045      	beq.n	8000996 <ASPEP_RXframeProcess+0xea>
          else if (PING == pHandle->rxPacketType)
 800090a:	2b06      	cmp	r3, #6
 800090c:	f000 8118 	beq.w	8000b40 <ASPEP_RXframeProcess+0x294>
          else if (DATA_PACKET == pHandle->rxPacketType)
 8000910:	2b09      	cmp	r3, #9
 8000912:	d1e6      	bne.n	80008e2 <ASPEP_RXframeProcess+0x36>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000914:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
              *packetLength = pHandle->rxLengthASPEP;
 8000918:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
              result = pHandle->rxBuffer;
 800091c:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 800091e:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000920:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000922:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000926:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLengthASPEP;
 8000928:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 800092a:	e7db      	b.n	80008e4 <ASPEP_RXframeProcess+0x38>
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 800092c:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8000930:	021b      	lsls	r3, r3, #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000932:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000936:	488b      	ldr	r0, [pc, #556]	@ (8000b64 <ASPEP_RXframeProcess+0x2b8>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000938:	4d8b      	ldr	r5, [pc, #556]	@ (8000b68 <ASPEP_RXframeProcess+0x2bc>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800093a:	f082 0209 	eor.w	r2, r2, #9
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 800093e:	f043 010f 	orr.w	r1, r3, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000942:	5c82      	ldrb	r2, [r0, r2]
 8000944:	ea82 4313 	eor.w	r3, r2, r3, lsr #16
 8000948:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800094a:	5cc3      	ldrb	r3, [r0, r3]
  *headerPtr |= (uint32_t)crc << 28;
 800094c:	5ceb      	ldrb	r3, [r5, r3]
 800094e:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8000952:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000956:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000958:	2b00      	cmp	r3, #0
 800095a:	f000 80f7 	beq.w	8000b4c <ASPEP_RXframeProcess+0x2a0>
  __ASM volatile ("cpsie i" : : : "memory");
 800095e:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000960:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8000964:	b913      	cbnz	r3, 800096c <ASPEP_RXframeProcess+0xc0>
          pHandle->ctrlBuffer.state = pending;
 8000966:	2302      	movs	r3, #2
 8000968:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 800096c:	2200      	movs	r2, #0
      pHandle->fASPEP_HWSync(pHandle->ASPEPIp);
 800096e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000970:	6960      	ldr	r0, [r4, #20]
      pHandle->badPacketFlag = ASPEP_OK;
 8000972:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
      pHandle->fASPEP_HWSync(pHandle->ASPEPIp);
 8000976:	4798      	blx	r3
 8000978:	e7c0      	b.n	80008fc <ASPEP_RXframeProcess+0x50>
          if (BEACON == pHandle->rxPacketType)
 800097a:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 800097c:	2905      	cmp	r1, #5
 800097e:	d04f      	beq.n	8000a20 <ASPEP_RXframeProcess+0x174>
          else if (PING == pHandle->rxPacketType)
 8000980:	2906      	cmp	r1, #6
 8000982:	d1ae      	bne.n	80008e2 <ASPEP_RXframeProcess+0x36>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000984:	4619      	mov	r1, r3
 8000986:	f3c2 320f 	ubfx	r2, r2, #12, #16
 800098a:	f7ff fe41 	bl	8000610 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 800098e:	2302      	movs	r3, #2
 8000990:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8000994:	e7a5      	b.n	80008e2 <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000996:	f894 e01d 	ldrb.w	lr, [r4, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800099a:	f894 506d 	ldrb.w	r5, [r4, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 800099e:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009a0:	f894 606c 	ldrb.w	r6, [r4, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009a4:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009a8:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80009ac:	f00e 0e3f 	and.w	lr, lr, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80009b0:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009b2:	4575      	cmp	r5, lr
 80009b4:	bf28      	it	cs
 80009b6:	4675      	movcs	r5, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009b8:	42b0      	cmp	r0, r6
 80009ba:	4601      	mov	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80009bc:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009c0:	bf28      	it	cs
 80009c2:	4631      	movcs	r1, r6
 80009c4:	4663      	mov	r3, ip
 80009c6:	f361 0307 	bfi	r3, r1, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 80009ca:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009ce:	45b8      	cmp	r8, r7
 80009d0:	4641      	mov	r1, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009d2:	f365 230f 	bfi	r3, r5, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009d6:	bf28      	it	cs
 80009d8:	4639      	movcs	r1, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009da:	45ca      	cmp	sl, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009dc:	f361 4317 	bfi	r3, r1, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009e0:	4651      	mov	r1, sl
 80009e2:	bf28      	it	cs
 80009e4:	4649      	movcs	r1, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009e6:	f361 631f 	bfi	r3, r1, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80009ea:	42b0      	cmp	r0, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009ec:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80009ee:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 80009f2:	d80f      	bhi.n	8000a14 <ASPEP_RXframeProcess+0x168>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 80009f4:	45ae      	cmp	lr, r5
 80009f6:	d80d      	bhi.n	8000a14 <ASPEP_RXframeProcess+0x168>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 80009f8:	45b8      	cmp	r8, r7
 80009fa:	d80b      	bhi.n	8000a14 <ASPEP_RXframeProcess+0x168>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 80009fc:	45ca      	cmp	sl, r9
 80009fe:	d809      	bhi.n	8000a14 <ASPEP_RXframeProcess+0x168>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000a00:	f894 c070 	ldrb.w	ip, [r4, #112]	@ 0x70
 8000a04:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000a08:	ebac 0c02 	sub.w	ip, ip, r2
 8000a0c:	fabc fc8c 	clz	ip, ip
 8000a10:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8000a14:	f884 c064 	strb.w	ip, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000a18:	4620      	mov	r0, r4
 8000a1a:	f7ff fdb3 	bl	8000584 <ASPEP_sendBeacon>
 8000a1e:	e760      	b.n	80008e2 <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000a20:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a22:	f890 606c 	ldrb.w	r6, [r0, #108]	@ 0x6c
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000a26:	7f01      	ldrb	r1, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a28:	f890 006d 	ldrb.w	r0, [r0, #109]	@ 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a2c:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a30:	f894 e06f 	ldrb.w	lr, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000a34:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000a38:	09c9      	lsrs	r1, r1, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a3a:	42a8      	cmp	r0, r5
 8000a3c:	bf28      	it	cs
 8000a3e:	4628      	movcs	r0, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a40:	42b1      	cmp	r1, r6
 8000a42:	4663      	mov	r3, ip
 8000a44:	468c      	mov	ip, r1
 8000a46:	bf28      	it	cs
 8000a48:	46b4      	movcs	ip, r6
 8000a4a:	f36c 0307 	bfi	r3, ip, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000a4e:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000a52:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a56:	45bc      	cmp	ip, r7
 8000a58:	46e1      	mov	r9, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a5a:	f360 230f 	bfi	r3, r0, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a5e:	bf28      	it	cs
 8000a60:	46b9      	movcs	r9, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a62:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a64:	f369 4317 	bfi	r3, r9, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a68:	46c1      	mov	r9, r8
 8000a6a:	bf28      	it	cs
 8000a6c:	46f1      	movcs	r9, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a6e:	f369 631f 	bfi	r3, r9, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a72:	42b1      	cmp	r1, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a74:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a76:	d80b      	bhi.n	8000a90 <ASPEP_RXframeProcess+0x1e4>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000a78:	4285      	cmp	r5, r0
 8000a7a:	d809      	bhi.n	8000a90 <ASPEP_RXframeProcess+0x1e4>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000a7c:	45bc      	cmp	ip, r7
 8000a7e:	d807      	bhi.n	8000a90 <ASPEP_RXframeProcess+0x1e4>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000a80:	45f0      	cmp	r8, lr
 8000a82:	d805      	bhi.n	8000a90 <ASPEP_RXframeProcess+0x1e4>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000a84:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8000a88:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d002      	beq.n	8000a96 <ASPEP_RXframeProcess+0x1ea>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000a96:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 8000a9a:	4620      	mov	r0, r4
 8000a9c:	f7ff fd72 	bl	8000584 <ASPEP_sendBeacon>
 8000aa0:	e71f      	b.n	80008e2 <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000aa2:	f890 c01d 	ldrb.w	ip, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000aa6:	f890 106d 	ldrb.w	r1, [r0, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000aaa:	7f05      	ldrb	r5, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000aac:	f890 606c 	ldrb.w	r6, [r0, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ab0:	f890 706e 	ldrb.w	r7, [r0, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000ab4:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000ab8:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000abc:	09ed      	lsrs	r5, r5, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000abe:	4561      	cmp	r1, ip
 8000ac0:	bf28      	it	cs
 8000ac2:	4661      	movcs	r1, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ac4:	42b5      	cmp	r5, r6
 8000ac6:	4628      	mov	r0, r5
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000ac8:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000acc:	bf28      	it	cs
 8000ace:	4630      	movcs	r0, r6
 8000ad0:	f360 0307 	bfi	r3, r0, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000ad4:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ad8:	45b8      	cmp	r8, r7
 8000ada:	4640      	mov	r0, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000adc:	f361 230f 	bfi	r3, r1, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ae0:	bf28      	it	cs
 8000ae2:	4638      	movcs	r0, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000ae4:	45ca      	cmp	sl, r9
 8000ae6:	46d6      	mov	lr, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ae8:	f360 4317 	bfi	r3, r0, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000aec:	bf28      	it	cs
 8000aee:	46ce      	movcs	lr, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000af0:	f36e 631f 	bfi	r3, lr, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000af4:	42b5      	cmp	r5, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000af6:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000af8:	d8cd      	bhi.n	8000a96 <ASPEP_RXframeProcess+0x1ea>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000afa:	458c      	cmp	ip, r1
 8000afc:	d8cb      	bhi.n	8000a96 <ASPEP_RXframeProcess+0x1ea>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000afe:	45b8      	cmp	r8, r7
 8000b00:	d8c9      	bhi.n	8000a96 <ASPEP_RXframeProcess+0x1ea>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000b02:	45ca      	cmp	sl, r9
 8000b04:	d8c7      	bhi.n	8000a96 <ASPEP_RXframeProcess+0x1ea>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000b06:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8000b0a:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d1c1      	bne.n	8000a96 <ASPEP_RXframeProcess+0x1ea>
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b12:	1c4b      	adds	r3, r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b14:	1c42      	adds	r2, r0, #1
 8000b16:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b18:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b1a:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000b1c:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b20:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000b22:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b24:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000b26:	f8a4 e00e 	strh.w	lr, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b2a:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000b2e:	f884 1064 	strb.w	r1, [r4, #100]	@ 0x64
 8000b32:	e7b0      	b.n	8000a96 <ASPEP_RXframeProcess+0x1ea>
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8000b34:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f7ff fd69 	bl	8000610 <ASPEP_sendPing>
 8000b3e:	e6d0      	b.n	80008e2 <ASPEP_RXframeProcess+0x36>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000b40:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000b44:	2101      	movs	r1, #1
 8000b46:	f7ff fd63 	bl	8000610 <ASPEP_sendPing>
 8000b4a:	e6ca      	b.n	80008e2 <ASPEP_RXframeProcess+0x36>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000b4c:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 8000b50:	2303      	movs	r3, #3
 8000b52:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000b56:	64a1      	str	r1, [r4, #72]	@ 0x48
 8000b58:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000b5a:	2204      	movs	r2, #4
 8000b5c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000b5e:	6960      	ldr	r0, [r4, #20]
 8000b60:	4798      	blx	r3
 8000b62:	e703      	b.n	800096c <ASPEP_RXframeProcess+0xc0>
 8000b64:	0800a0a0 	.word	0x0800a0a0
 8000b68:	0800a090 	.word	0x0800a090

08000b6c <ASPEP_HWDataReceivedIT>:
  * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8000b6c:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->ASPEP_TL_State)
 8000b6e:	f890 3065 	ldrb.w	r3, [r0, #101]	@ 0x65
{
 8000b72:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8000b74:	b13b      	cbz	r3, 8000b86 <ASPEP_HWDataReceivedIT+0x1a>
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d104      	bne.n	8000b84 <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 8000b80:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
        break;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000b84:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000b86:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000b88:	4a1e      	ldr	r2, [pc, #120]	@ (8000c04 <ASPEP_HWDataReceivedIT+0x98>)
 8000b8a:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000b8c:	5cd3      	ldrb	r3, [r2, r3]
 8000b8e:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8000b92:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000b94:	5cd3      	ldrb	r3, [r2, r3]
 8000b96:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 8000b9a:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8000b9c:	5cd3      	ldrb	r3, [r2, r3]
 8000b9e:	ea83 6311 	eor.w	r3, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000ba2:	5cd3      	ldrb	r3, [r2, r3]
 8000ba4:	b95b      	cbnz	r3, 8000bbe <ASPEP_HWDataReceivedIT+0x52>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000ba6:	7f03      	ldrb	r3, [r0, #28]
 8000ba8:	f003 030f 	and.w	r3, r3, #15
 8000bac:	2b06      	cmp	r3, #6
 8000bae:	6683      	str	r3, [r0, #104]	@ 0x68
          switch (pHandle->rxPacketType)
 8000bb0:	d809      	bhi.n	8000bc6 <ASPEP_HWDataReceivedIT+0x5a>
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	d81e      	bhi.n	8000bf4 <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
}
 8000bbc:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 8000bc4:	bd10      	pop	{r4, pc}
 8000bc6:	2b09      	cmp	r3, #9
 8000bc8:	d1f5      	bne.n	8000bb6 <ASPEP_HWDataReceivedIT+0x4a>
              pHandle->rxLengthASPEP = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8000bca:	8b83      	ldrh	r3, [r0, #28]
 8000bcc:	091b      	lsrs	r3, r3, #4
 8000bce:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
              if (0U == pHandle->rxLengthASPEP) /* data packet with length 0 is a valid packet */
 8000bd2:	b17b      	cbz	r3, 8000bf4 <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLengthASPEP <= pHandle->maxRXPayload)
 8000bd4:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d30f      	bcc.n	8000bfc <ASPEP_HWDataReceivedIT+0x90>
                pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8000bdc:	f890 206c 	ldrb.w	r2, [r0, #108]	@ 0x6c
 8000be0:	6981      	ldr	r1, [r0, #24]
 8000be2:	6940      	ldr	r0, [r0, #20]
 8000be4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8000be8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000bea:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000bec:	2301      	movs	r3, #1
 8000bee:	f884 3065 	strb.w	r3, [r4, #101]	@ 0x65
}
 8000bf2:	bd10      	pop	{r4, pc}
              pHandle->NewPacketAvailable = true;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
}
 8000bfa:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 8000c02:	bd10      	pop	{r4, pc}
 8000c04:	0800a0a0 	.word	0x0800a0a0

08000c08 <ASPEP_HWReset>:
  * @brief  Resets DMA after debugger has stopped the MCU.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWReset(ASPEP_Handle_t *pHandle)
{
 8000c08:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000c10:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8000c12:	6940      	ldr	r0, [r0, #20]
 8000c14:	2204      	movs	r2, #4
 8000c16:	311c      	adds	r1, #28
 8000c18:	4718      	bx	r3
 8000c1a:	bf00      	nop

08000c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c1c:	b510      	push	{r4, lr}
 8000c1e:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c20:	2238      	movs	r2, #56	@ 0x38
 8000c22:	2100      	movs	r1, #0
 8000c24:	a806      	add	r0, sp, #24
 8000c26:	f009 f9ed 	bl	800a004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8000c30:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8000c34:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c36:	f005 fb19 	bl	800626c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c3a:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c3c:	2001      	movs	r0, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000c3e:	2255      	movs	r2, #85	@ 0x55
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c40:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8000c44:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000c48:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c4c:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000c4e:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c50:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c52:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000c56:	e9cd 2311 	strd	r2, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c5a:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5c:	f005 fb80 	bl	8006360 <HAL_RCC_OscConfig>
 8000c60:	b108      	cbz	r0, 8000c66 <SystemClock_Config+0x4a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c62:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <SystemClock_Config+0x48>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c66:	2104      	movs	r1, #4
 8000c68:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6a:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c6c:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c70:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c74:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c78:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c7a:	f005 fdef 	bl	800685c <HAL_RCC_ClockConfig>
 8000c7e:	b108      	cbz	r0, 8000c84 <SystemClock_Config+0x68>
 8000c80:	b672      	cpsid	i
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <SystemClock_Config+0x66>
  HAL_RCC_EnableCSS();
 8000c84:	f005 ff18 	bl	8006ab8 <HAL_RCC_EnableCSS>
}
 8000c88:	b014      	add	sp, #80	@ 0x50
 8000c8a:	bd10      	pop	{r4, pc}

08000c8c <main>:
{
 8000c8c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	2400      	movs	r4, #0
{
 8000c92:	b0a7      	sub	sp, #156	@ 0x9c
  HAL_Init();
 8000c94:	f003 fdfe 	bl	8004894 <HAL_Init>
  SystemClock_Config();
 8000c98:	f7ff ffc0 	bl	8000c1c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	e9cd 4419 	strd	r4, r4, [sp, #100]	@ 0x64
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca0:	4daa      	ldr	r5, [pc, #680]	@ (8000f4c <main+0x2c0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	941b      	str	r4, [sp, #108]	@ 0x6c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca4:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	48aa      	ldr	r0, [pc, #680]	@ (8000f50 <main+0x2c4>)
  hadc1.Instance = ADC1;
 8000ca8:	f8df 92e4 	ldr.w	r9, [pc, #740]	@ 8000f90 <main+0x304>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000cb2:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000cb4:	f003 0304 	and.w	r3, r3, #4
 8000cb8:	9305      	str	r3, [sp, #20]
 8000cba:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cbc:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000cbe:	f043 0320 	orr.w	r3, r3, #32
 8000cc2:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000cc4:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000cc6:	f003 0320 	and.w	r3, r3, #32
 8000cca:	9306      	str	r3, [sp, #24]
 8000ccc:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000cd6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	9307      	str	r3, [sp, #28]
 8000cde:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce0:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000ce2:	f043 0302 	orr.w	r3, r3, #2
 8000ce6:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000ce8:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000cf0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	a917      	add	r1, sp, #92	@ 0x5c
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000cf6:	9317      	str	r3, [sp, #92]	@ 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cf8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	9a08      	ldr	r2, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cfe:	9318      	str	r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f005 f934 	bl	8005f6c <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d04:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8000d06:	f043 0304 	orr.w	r3, r3, #4
 8000d0a:	64ab      	str	r3, [r5, #72]	@ 0x48
 8000d0c:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	9303      	str	r3, [sp, #12]
 8000d14:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d16:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	64ab      	str	r3, [r5, #72]	@ 0x48
 8000d1e:	6cab      	ldr	r3, [r5, #72]	@ 0x48
  ADC_MultiModeTypeDef multimode = {0};
 8000d20:	940c      	str	r4, [sp, #48]	@ 0x30
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d22:	f003 0301 	and.w	r3, r3, #1
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d26:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d28:	9304      	str	r3, [sp, #16]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d2a:	223c      	movs	r2, #60	@ 0x3c
 8000d2c:	a817      	add	r0, sp, #92	@ 0x5c
  ADC_MultiModeTypeDef multimode = {0};
 8000d2e:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d32:	9b04      	ldr	r3, [sp, #16]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d34:	f009 f966 	bl	800a004 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d38:	2220      	movs	r2, #32
 8000d3a:	4621      	mov	r1, r4
 8000d3c:	a80f      	add	r0, sp, #60	@ 0x3c
 8000d3e:	f009 f961 	bl	800a004 <memset>
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000d42:	f44f 4700 	mov.w	r7, #32768	@ 0x8000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d46:	e9c9 4401 	strd	r4, r4, [r9, #4]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d4a:	e9c9 440b 	strd	r4, r4, [r9, #44]	@ 0x2c
  hadc1.Init.GainCompensation = 0;
 8000d4e:	f8c9 4010 	str.w	r4, [r9, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d52:	f8a9 401c 	strh.w	r4, [r9, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d56:	f889 4024 	strb.w	r4, [r9, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d5a:	f889 4038 	strb.w	r4, [r9, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d5e:	f8c9 403c 	str.w	r4, [r9, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000d62:	f889 4040 	strb.w	r4, [r9, #64]	@ 0x40
  hadc1.Instance = ADC1;
 8000d66:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d6a:	2501      	movs	r5, #1
 8000d6c:	2404      	movs	r4, #4
  hadc1.Init.NbrOfConversion = 2;
 8000d6e:	2602      	movs	r6, #2
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d70:	4648      	mov	r0, r9
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d72:	e9c9 5405 	strd	r5, r4, [r9, #20]
  hadc1.Instance = ADC1;
 8000d76:	f8c9 2000 	str.w	r2, [r9]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000d7a:	f8c9 700c 	str.w	r7, [r9, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000d7e:	f8c9 6020 	str.w	r6, [r9, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d82:	f003 fdb1 	bl	80048e8 <HAL_ADC_Init>
 8000d86:	b108      	cbz	r0, 8000d8c <main+0x100>
 8000d88:	b672      	cpsid	i
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <main+0xfe>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d8c:	900c      	str	r0, [sp, #48]	@ 0x30
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d8e:	a90c      	add	r1, sp, #48	@ 0x30
 8000d90:	4648      	mov	r0, r9
 8000d92:	f004 fbd5 	bl	8005540 <HAL_ADCEx_MultiModeConfigChannel>
 8000d96:	b108      	cbz	r0, 8000d9c <main+0x110>
 8000d98:	b672      	cpsid	i
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <main+0x10e>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000d9c:	4b6d      	ldr	r3, [pc, #436]	@ (8000f54 <main+0x2c8>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000d9e:	f8ad 0080 	strh.w	r0, [sp, #128]	@ 0x80
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000da2:	f04f 0b09 	mov.w	fp, #9
  sConfigInjected.InjectedOffset = 0;
 8000da6:	e9cd 401b 	strd	r4, r0, [sp, #108]	@ 0x6c
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000daa:	e9cd 3b17 	strd	r3, fp, [sp, #92]	@ 0x5c
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000dae:	f88d 0082 	strb.w	r0, [sp, #130]	@ 0x82
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000db2:	f88d 008c 	strb.w	r0, [sp, #140]	@ 0x8c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000db6:	f04f 087f 	mov.w	r8, #127	@ 0x7f
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000dba:	f04f 0a84 	mov.w	sl, #132	@ 0x84
 8000dbe:	2380      	movs	r3, #128	@ 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000dc0:	a917      	add	r1, sp, #92	@ 0x5c
 8000dc2:	4648      	mov	r0, r9
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000dc4:	e9cd a321 	strd	sl, r3, [sp, #132]	@ 0x84
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000dc8:	9519      	str	r5, [sp, #100]	@ 0x64
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000dca:	961f      	str	r6, [sp, #124]	@ 0x7c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000dcc:	f8cd 8068 	str.w	r8, [sp, #104]	@ 0x68
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000dd0:	f004 f8d6 	bl	8004f80 <HAL_ADCEx_InjectedConfigChannel>
 8000dd4:	b108      	cbz	r0, 8000dda <main+0x14e>
 8000dd6:	b672      	cpsid	i
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <main+0x14c>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000dda:	4a5f      	ldr	r2, [pc, #380]	@ (8000f58 <main+0x2cc>)
 8000ddc:	f240 130f 	movw	r3, #271	@ 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000de0:	a917      	add	r1, sp, #92	@ 0x5c
 8000de2:	4648      	mov	r0, r9
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000de4:	e9cd 2317 	strd	r2, r3, [sp, #92]	@ 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000de8:	f004 f8ca 	bl	8004f80 <HAL_ADCEx_InjectedConfigChannel>
 8000dec:	b108      	cbz	r0, 8000df2 <main+0x166>
 8000dee:	b672      	cpsid	i
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <main+0x164>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000df2:	495a      	ldr	r1, [pc, #360]	@ (8000f5c <main+0x2d0>)
  sConfig.Offset = 0;
 8000df4:	9014      	str	r0, [sp, #80]	@ 0x50
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000df6:	2206      	movs	r2, #6
 8000df8:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dfc:	4648      	mov	r0, r9
 8000dfe:	a90f      	add	r1, sp, #60	@ 0x3c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e00:	e9cd 4811 	strd	r4, r8, [sp, #68]	@ 0x44
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e04:	9413      	str	r4, [sp, #76]	@ 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e06:	f003 fe69 	bl	8004adc <HAL_ADC_ConfigChannel>
 8000e0a:	b108      	cbz	r0, 8000e10 <main+0x184>
 8000e0c:	b672      	cpsid	i
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <main+0x182>
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e10:	4a53      	ldr	r2, [pc, #332]	@ (8000f60 <main+0x2d4>)
 8000e12:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e14:	a90f      	add	r1, sp, #60	@ 0x3c
 8000e16:	4648      	mov	r0, r9
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e18:	e9cd 230f 	strd	r2, r3, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e1c:	f003 fe5e 	bl	8004adc <HAL_ADC_ConfigChannel>
 8000e20:	4601      	mov	r1, r0
 8000e22:	b108      	cbz	r0, 8000e28 <main+0x19c>
 8000e24:	b672      	cpsid	i
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <main+0x19a>
  hadc2.Instance = ADC2;
 8000e28:	f8df 9168 	ldr.w	r9, [pc, #360]	@ 8000f94 <main+0x308>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e2c:	9001      	str	r0, [sp, #4]
 8000e2e:	223c      	movs	r2, #60	@ 0x3c
 8000e30:	a817      	add	r0, sp, #92	@ 0x5c
 8000e32:	f009 f8e7 	bl	800a004 <memset>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e36:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 8000e38:	4a4a      	ldr	r2, [pc, #296]	@ (8000f64 <main+0x2d8>)
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000e3a:	f8c9 700c 	str.w	r7, [r9, #12]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e3e:	4648      	mov	r0, r9
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e40:	e9c9 1101 	strd	r1, r1, [r9, #4]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e44:	e9c9 1504 	strd	r1, r5, [r9, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e48:	f8c9 4018 	str.w	r4, [r9, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e4c:	f8a9 101c 	strh.w	r1, [r9, #28]
  hadc2.Init.NbrOfConversion = 1;
 8000e50:	f8c9 5020 	str.w	r5, [r9, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e54:	f889 1024 	strb.w	r1, [r9, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e58:	f889 1038 	strb.w	r1, [r9, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e5c:	f8c9 103c 	str.w	r1, [r9, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000e60:	f889 1040 	strb.w	r1, [r9, #64]	@ 0x40
  hadc2.Instance = ADC2;
 8000e64:	f8c9 2000 	str.w	r2, [r9]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e68:	f003 fd3e 	bl	80048e8 <HAL_ADC_Init>
 8000e6c:	b108      	cbz	r0, 8000e72 <main+0x1e6>
 8000e6e:	b672      	cpsid	i
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <main+0x1e4>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 8000e72:	4a3d      	ldr	r2, [pc, #244]	@ (8000f68 <main+0x2dc>)
  sConfigInjected.InjectedOffset = 0;
 8000e74:	901c      	str	r0, [sp, #112]	@ 0x70
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000e76:	2380      	movs	r3, #128	@ 0x80
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000e78:	f8ad 0080 	strh.w	r0, [sp, #128]	@ 0x80
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000e7c:	f88d 0082 	strb.w	r0, [sp, #130]	@ 0x82
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000e80:	f88d 008c 	strb.w	r0, [sp, #140]	@ 0x8c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e84:	a917      	add	r1, sp, #92	@ 0x5c
 8000e86:	4648      	mov	r0, r9
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000e88:	e9cd b518 	strd	fp, r5, [sp, #96]	@ 0x60
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000e8c:	e9cd 841a 	strd	r8, r4, [sp, #104]	@ 0x68
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000e90:	961f      	str	r6, [sp, #124]	@ 0x7c
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000e92:	f8cd a084 	str.w	sl, [sp, #132]	@ 0x84
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000e96:	9322      	str	r3, [sp, #136]	@ 0x88
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 8000e98:	9217      	str	r2, [sp, #92]	@ 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e9a:	f004 f871 	bl	8004f80 <HAL_ADCEx_InjectedConfigChannel>
 8000e9e:	b108      	cbz	r0, 8000ea4 <main+0x218>
 8000ea0:	b672      	cpsid	i
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <main+0x216>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000ea4:	4b2b      	ldr	r3, [pc, #172]	@ (8000f54 <main+0x2c8>)
 8000ea6:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000ea8:	4648      	mov	r0, r9
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000eaa:	f240 130f 	movw	r3, #271	@ 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000eae:	a917      	add	r1, sp, #92	@ 0x5c
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000eb0:	9318      	str	r3, [sp, #96]	@ 0x60
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000eb2:	f004 f865 	bl	8004f80 <HAL_ADCEx_InjectedConfigChannel>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	b108      	cbz	r0, 8000ebe <main+0x232>
 8000eba:	b672      	cpsid	i
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <main+0x230>
  hcomp1.Instance = COMP1;
 8000ebe:	482b      	ldr	r0, [pc, #172]	@ (8000f6c <main+0x2e0>)
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000ec0:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000ec4:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000ec8:	6043      	str	r3, [r0, #4]
  hcomp1.Instance = COMP1;
 8000eca:	4b29      	ldr	r3, [pc, #164]	@ (8000f70 <main+0x2e4>)
 8000ecc:	6003      	str	r3, [r0, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 8000ece:	2340      	movs	r3, #64	@ 0x40
 8000ed0:	6083      	str	r3, [r0, #8]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000ed2:	f004 fb9b 	bl	800560c <HAL_COMP_Init>
 8000ed6:	b108      	cbz	r0, 8000edc <main+0x250>
 8000ed8:	b672      	cpsid	i
  while (1)
 8000eda:	e7fe      	b.n	8000eda <main+0x24e>
  hcomp2.Instance = COMP2;
 8000edc:	4825      	ldr	r0, [pc, #148]	@ (8000f74 <main+0x2e8>)
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000ede:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 8000f98 <main+0x30c>
 8000ee2:	2300      	movs	r3, #0
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8000ee4:	2440      	movs	r4, #64	@ 0x40
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000ee6:	e9c0 8300 	strd	r8, r3, [r0]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000eea:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000eee:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8000ef2:	6084      	str	r4, [r0, #8]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000ef4:	f004 fb8a 	bl	800560c <HAL_COMP_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	b108      	cbz	r0, 8000f00 <main+0x274>
 8000efc:	b672      	cpsid	i
  while (1)
 8000efe:	e7fe      	b.n	8000efe <main+0x272>
  hcomp4.Instance = COMP4;
 8000f00:	481d      	ldr	r0, [pc, #116]	@ (8000f78 <main+0x2ec>)
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8000f02:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000f06:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000f0a:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp4.Instance = COMP4;
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f7c <main+0x2f0>)
 8000f10:	6003      	str	r3, [r0, #0]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 8000f12:	f004 fb7b 	bl	800560c <HAL_COMP_Init>
 8000f16:	b108      	cbz	r0, 8000f1c <main+0x290>
 8000f18:	b672      	cpsid	i
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <main+0x28e>
  hcordic.Instance = CORDIC;
 8000f1c:	4818      	ldr	r0, [pc, #96]	@ (8000f80 <main+0x2f4>)
 8000f1e:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <main+0x2f8>)
 8000f20:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000f22:	f004 fc13 	bl	800574c <HAL_CORDIC_Init>
 8000f26:	4601      	mov	r1, r0
 8000f28:	b108      	cbz	r0, 8000f2e <main+0x2a2>
 8000f2a:	b672      	cpsid	i
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <main+0x2a0>
  hdac3.Instance = DAC3;
 8000f2e:	4d16      	ldr	r5, [pc, #88]	@ (8000f88 <main+0x2fc>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8000f30:	2230      	movs	r2, #48	@ 0x30
 8000f32:	a817      	add	r0, sp, #92	@ 0x5c
 8000f34:	f009 f866 	bl	800a004 <memset>
  hdac3.Instance = DAC3;
 8000f38:	4b14      	ldr	r3, [pc, #80]	@ (8000f8c <main+0x300>)
 8000f3a:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	f004 fcad 	bl	800589c <HAL_DAC_Init>
 8000f42:	4602      	mov	r2, r0
 8000f44:	b350      	cbz	r0, 8000f9c <main+0x310>
 8000f46:	b672      	cpsid	i
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <main+0x2bc>
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	48000800 	.word	0x48000800
 8000f54:	0c900008 	.word	0x0c900008
 8000f58:	32601000 	.word	0x32601000
 8000f5c:	04300002 	.word	0x04300002
 8000f60:	14f00020 	.word	0x14f00020
 8000f64:	50000100 	.word	0x50000100
 8000f68:	cb8c0000 	.word	0xcb8c0000
 8000f6c:	2000089c 	.word	0x2000089c
 8000f70:	40010200 	.word	0x40010200
 8000f74:	20000878 	.word	0x20000878
 8000f78:	20000854 	.word	0x20000854
 8000f7c:	4001020c 	.word	0x4001020c
 8000f80:	2000082c 	.word	0x2000082c
 8000f84:	40020c00 	.word	0x40020c00
 8000f88:	20000818 	.word	0x20000818
 8000f8c:	50001000 	.word	0x50001000
 8000f90:	2000092c 	.word	0x2000092c
 8000f94:	200008c0 	.word	0x200008c0
 8000f98:	40010204 	.word	0x40010204
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000f9c:	2302      	movs	r3, #2
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f9e:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000fa2:	f8ad 0060 	strh.w	r0, [sp, #96]	@ 0x60
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000fa6:	901b      	str	r0, [sp, #108]	@ 0x6c
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000fa8:	901e      	str	r0, [sp, #120]	@ 0x78
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000faa:	a917      	add	r1, sp, #92	@ 0x5c
 8000fac:	4628      	mov	r0, r5
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000fae:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000fb2:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fb4:	f004 fc88 	bl	80058c8 <HAL_DAC_ConfigChannel>
 8000fb8:	b108      	cbz	r0, 8000fbe <main+0x332>
 8000fba:	b672      	cpsid	i
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <main+0x330>
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000fbe:	4628      	mov	r0, r5
 8000fc0:	2210      	movs	r2, #16
 8000fc2:	a917      	add	r1, sp, #92	@ 0x5c
 8000fc4:	f004 fc80 	bl	80058c8 <HAL_DAC_ConfigChannel>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	b108      	cbz	r0, 8000fd0 <main+0x344>
 8000fcc:	b672      	cpsid	i
  while (1)
 8000fce:	e7fe      	b.n	8000fce <main+0x342>
  hopamp1.Instance = OPAMP1;
 8000fd0:	48a0      	ldr	r0, [pc, #640]	@ (8001254 <main+0x5c8>)
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000fd2:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8000fd6:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000fda:	6103      	str	r3, [r0, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8000fdc:	7503      	strb	r3, [r0, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000fde:	6183      	str	r3, [r0, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000fe0:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000fe2:	f44f 4540 	mov.w	r5, #49152	@ 0xc000
  hopamp1.Instance = OPAMP1;
 8000fe6:	4b9c      	ldr	r3, [pc, #624]	@ (8001258 <main+0x5cc>)
 8000fe8:	6003      	str	r3, [r0, #0]
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000fea:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000fee:	f005 f8c5 	bl	800617c <HAL_OPAMP_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	b108      	cbz	r0, 8000ffa <main+0x36e>
 8000ff6:	b672      	cpsid	i
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <main+0x36c>
  hopamp2.Instance = OPAMP2;
 8000ffa:	4898      	ldr	r0, [pc, #608]	@ (800125c <main+0x5d0>)
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8000ffc:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001000:	6103      	str	r3, [r0, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 8001002:	7503      	strb	r3, [r0, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001004:	6183      	str	r3, [r0, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001006:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp2.Instance = OPAMP2;
 8001008:	4b95      	ldr	r3, [pc, #596]	@ (8001260 <main+0x5d4>)
 800100a:	6003      	str	r3, [r0, #0]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800100c:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001010:	f005 f8b4 	bl	800617c <HAL_OPAMP_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	b108      	cbz	r0, 800101c <main+0x390>
 8001018:	b672      	cpsid	i
  while (1)
 800101a:	e7fe      	b.n	800101a <main+0x38e>
  hopamp3.Instance = OPAMP3;
 800101c:	4891      	ldr	r0, [pc, #580]	@ (8001264 <main+0x5d8>)
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800101e:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001022:	6043      	str	r3, [r0, #4]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001024:	6103      	str	r3, [r0, #16]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001026:	6183      	str	r3, [r0, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001028:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp3.Init.InternalOutput = ENABLE;
 800102a:	2501      	movs	r5, #1
  hopamp3.Instance = OPAMP3;
 800102c:	4b8e      	ldr	r3, [pc, #568]	@ (8001268 <main+0x5dc>)
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 800102e:	6084      	str	r4, [r0, #8]
  hopamp3.Instance = OPAMP3;
 8001030:	6003      	str	r3, [r0, #0]
  hopamp3.Init.InternalOutput = ENABLE;
 8001032:	7505      	strb	r5, [r0, #20]
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001034:	f005 f8a2 	bl	800617c <HAL_OPAMP_Init>
 8001038:	4604      	mov	r4, r0
 800103a:	b108      	cbz	r0, 8001040 <main+0x3b4>
 800103c:	b672      	cpsid	i
  while (1)
 800103e:	e7fe      	b.n	800103e <main+0x3b2>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001040:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001044:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
 8001048:	e9cd 0010 	strd	r0, r0, [sp, #64]	@ 0x40
 800104c:	e9cd 0012 	strd	r0, r0, [sp, #72]	@ 0x48
 8001050:	e9cd 0014 	strd	r0, r0, [sp, #80]	@ 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001054:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8001058:	9009      	str	r0, [sp, #36]	@ 0x24
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800105a:	4601      	mov	r1, r0
 800105c:	2234      	movs	r2, #52	@ 0x34
 800105e:	a817      	add	r0, sp, #92	@ 0x5c
 8001060:	f008 ffd0 	bl	800a004 <memset>
  htim1.Instance = TIM1;
 8001064:	4881      	ldr	r0, [pc, #516]	@ (800126c <main+0x5e0>)
 8001066:	4b82      	ldr	r3, [pc, #520]	@ (8001270 <main+0x5e4>)
 8001068:	6003      	str	r3, [r0, #0]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 800106a:	f04f 0e20 	mov.w	lr, #32
 800106e:	f44f 53a6 	mov.w	r3, #5312	@ 0x14c0
 8001072:	e9c0 e302 	strd	lr, r3, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001076:	f44f 7380 	mov.w	r3, #256	@ 0x100
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 800107a:	6145      	str	r5, [r0, #20]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 800107c:	6044      	str	r4, [r0, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107e:	6184      	str	r4, [r0, #24]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001080:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001082:	f005 ffad 	bl	8006fe0 <HAL_TIM_PWM_Init>
 8001086:	b108      	cbz	r0, 800108c <main+0x400>
 8001088:	b672      	cpsid	i
  while (1)
 800108a:	e7fe      	b.n	800108a <main+0x3fe>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800108c:	2570      	movs	r5, #112	@ 0x70
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800108e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001090:	4876      	ldr	r0, [pc, #472]	@ (800126c <main+0x5e0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001092:	9509      	str	r5, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001094:	a909      	add	r1, sp, #36	@ 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001096:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800109a:	f006 fa93 	bl	80075c4 <HAL_TIMEx_MasterConfigSynchronization>
 800109e:	b108      	cbz	r0, 80010a4 <main+0x418>
 80010a0:	b672      	cpsid	i
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <main+0x416>
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80010a4:	2401      	movs	r4, #1
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80010a6:	900e      	str	r0, [sp, #56]	@ 0x38
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80010a8:	2302      	movs	r3, #2
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80010aa:	4870      	ldr	r0, [pc, #448]	@ (800126c <main+0x5e0>)
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80010ac:	940d      	str	r4, [sp, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80010ae:	aa0c      	add	r2, sp, #48	@ 0x30
 80010b0:	4621      	mov	r1, r4
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80010b2:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80010b4:	f006 fb26 	bl	8007704 <HAL_TIMEx_ConfigBreakInput>
 80010b8:	b108      	cbz	r0, 80010be <main+0x432>
 80010ba:	b672      	cpsid	i
  while (1)
 80010bc:	e7fe      	b.n	80010bc <main+0x430>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 80010be:	2604      	movs	r6, #4
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80010c0:	486a      	ldr	r0, [pc, #424]	@ (800126c <main+0x5e0>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 80010c2:	960c      	str	r6, [sp, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80010c4:	aa0c      	add	r2, sp, #48	@ 0x30
 80010c6:	4621      	mov	r1, r4
 80010c8:	f006 fb1c 	bl	8007704 <HAL_TIMEx_ConfigBreakInput>
 80010cc:	b108      	cbz	r0, 80010d2 <main+0x446>
 80010ce:	b672      	cpsid	i
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <main+0x444>
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80010d2:	aa0c      	add	r2, sp, #48	@ 0x30
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 80010d4:	2310      	movs	r3, #16
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80010d6:	4865      	ldr	r0, [pc, #404]	@ (800126c <main+0x5e0>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 80010d8:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80010da:	4621      	mov	r1, r4
 80010dc:	f006 fb12 	bl	8007704 <HAL_TIMEx_ConfigBreakInput>
 80010e0:	4602      	mov	r2, r0
 80010e2:	b108      	cbz	r0, 80010e8 <main+0x45c>
 80010e4:	b672      	cpsid	i
  while (1)
 80010e6:	e7fe      	b.n	80010e6 <main+0x45a>
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010e8:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010ec:	e9cd 0013 	strd	r0, r0, [sp, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010f0:	9015      	str	r0, [sp, #84]	@ 0x54
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 80010f2:	2760      	movs	r7, #96	@ 0x60
 80010f4:	f44f 6326 	mov.w	r3, #2656	@ 0xa60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010f8:	485c      	ldr	r0, [pc, #368]	@ (800126c <main+0x5e0>)
 80010fa:	a90f      	add	r1, sp, #60	@ 0x3c
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 80010fc:	e9cd 730f 	strd	r7, r3, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001100:	f006 f97a 	bl	80073f8 <HAL_TIM_PWM_ConfigChannel>
 8001104:	b108      	cbz	r0, 800110a <main+0x47e>
 8001106:	b672      	cpsid	i
  while (1)
 8001108:	e7fe      	b.n	8001108 <main+0x47c>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800110a:	4858      	ldr	r0, [pc, #352]	@ (800126c <main+0x5e0>)
 800110c:	4632      	mov	r2, r6
 800110e:	a90f      	add	r1, sp, #60	@ 0x3c
 8001110:	f006 f972 	bl	80073f8 <HAL_TIM_PWM_ConfigChannel>
 8001114:	b108      	cbz	r0, 800111a <main+0x48e>
 8001116:	b672      	cpsid	i
  while (1)
 8001118:	e7fe      	b.n	8001118 <main+0x48c>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800111a:	4854      	ldr	r0, [pc, #336]	@ (800126c <main+0x5e0>)
 800111c:	2208      	movs	r2, #8
 800111e:	a90f      	add	r1, sp, #60	@ 0x3c
 8001120:	f006 f96a 	bl	80073f8 <HAL_TIM_PWM_ConfigChannel>
 8001124:	b108      	cbz	r0, 800112a <main+0x49e>
 8001126:	b672      	cpsid	i
  while (1)
 8001128:	e7fe      	b.n	8001128 <main+0x49c>
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 800112a:	f241 43bf 	movw	r3, #5311	@ 0x14bf
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800112e:	484f      	ldr	r0, [pc, #316]	@ (800126c <main+0x5e0>)
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8001130:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001132:	a90f      	add	r1, sp, #60	@ 0x3c
 8001134:	220c      	movs	r2, #12
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001136:	950f      	str	r5, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001138:	f006 f95e 	bl	80073f8 <HAL_TIM_PWM_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	b108      	cbz	r0, 8001144 <main+0x4b8>
 8001140:	b672      	cpsid	i
  while (1)
 8001142:	e7fe      	b.n	8001142 <main+0x4b6>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001144:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 8001148:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800114c:	e9cd 4117 	strd	r4, r1, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8001150:	213f      	movs	r1, #63	@ 0x3f
 8001152:	e9cd 3119 	strd	r3, r1, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001156:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 800115a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800115e:	e9cd 511b 	strd	r5, r1, [sp, #108]	@ 0x6c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001162:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
  sBreakDeadTimeConfig.BreakFilter = 3;
 8001166:	2203      	movs	r2, #3
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001168:	e9cd 311f 	strd	r3, r1, [sp, #124]	@ 0x7c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800116c:	483f      	ldr	r0, [pc, #252]	@ (800126c <main+0x5e0>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800116e:	9323      	str	r3, [sp, #140]	@ 0x8c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001170:	a917      	add	r1, sp, #92	@ 0x5c
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001172:	e9cd 231d 	strd	r2, r3, [sp, #116]	@ 0x74
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001176:	e9cd 2321 	strd	r2, r3, [sp, #132]	@ 0x84
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800117a:	f006 fa75 	bl	8007668 <HAL_TIMEx_ConfigBreakDeadTime>
 800117e:	4604      	mov	r4, r0
 8001180:	b108      	cbz	r0, 8001186 <main+0x4fa>
 8001182:	b672      	cpsid	i
  while (1)
 8001184:	e7fe      	b.n	8001184 <main+0x4f8>
  HAL_TIM_MspPostInit(&htim1);
 8001186:	4839      	ldr	r0, [pc, #228]	@ (800126c <main+0x5e0>)
 8001188:	f003 f9b6 	bl	80044f8 <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 800118c:	4839      	ldr	r0, [pc, #228]	@ (8001274 <main+0x5e8>)
  huart2.Init.BaudRate = 1843200;
 800118e:	4a3a      	ldr	r2, [pc, #232]	@ (8001278 <main+0x5ec>)
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001190:	6284      	str	r4, [r0, #40]	@ 0x28
  huart2.Init.BaudRate = 1843200;
 8001192:	f44f 13e1 	mov.w	r3, #1843200	@ 0x1c2000
 8001196:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800119a:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800119c:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a0:	e9c0 4304 	strd	r4, r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a4:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011a8:	e9c0 4408 	strd	r4, r4, [r0, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ac:	f006 fdd0 	bl	8007d50 <HAL_UART_Init>
 80011b0:	b108      	cbz	r0, 80011b6 <main+0x52a>
 80011b2:	b672      	cpsid	i
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <main+0x528>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011b6:	2100      	movs	r1, #0
 80011b8:	482e      	ldr	r0, [pc, #184]	@ (8001274 <main+0x5e8>)
 80011ba:	f006 fe1b 	bl	8007df4 <HAL_UARTEx_SetTxFifoThreshold>
 80011be:	4601      	mov	r1, r0
 80011c0:	b108      	cbz	r0, 80011c6 <main+0x53a>
 80011c2:	b672      	cpsid	i
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <main+0x538>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011c6:	482b      	ldr	r0, [pc, #172]	@ (8001274 <main+0x5e8>)
 80011c8:	f006 fe56 	bl	8007e78 <HAL_UARTEx_SetRxFifoThreshold>
 80011cc:	b108      	cbz	r0, 80011d2 <main+0x546>
 80011ce:	b672      	cpsid	i
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <main+0x544>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80011d2:	4828      	ldr	r0, [pc, #160]	@ (8001274 <main+0x5e8>)
 80011d4:	f006 fdf0 	bl	8007db8 <HAL_UARTEx_DisableFifoMode>
 80011d8:	4604      	mov	r4, r0
 80011da:	b108      	cbz	r0, 80011e0 <main+0x554>
 80011dc:	b672      	cpsid	i
  while (1)
 80011de:	e7fe      	b.n	80011de <main+0x552>
  MX_MotorControl_Init();
 80011e0:	f001 f90e 	bl	8002400 <MX_MotorControl_Init>
  hfdcan1.Instance = FDCAN1;
 80011e4:	4825      	ldr	r0, [pc, #148]	@ (800127c <main+0x5f0>)
 80011e6:	4b26      	ldr	r3, [pc, #152]	@ (8001280 <main+0x5f4>)
 80011e8:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80011ea:	2501      	movs	r5, #1
  hfdcan1.Init.NominalPrescaler = 16;
 80011ec:	2310      	movs	r3, #16
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80011ee:	e9c0 3505 	strd	r3, r5, [r0, #20]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80011f2:	e9c0 4401 	strd	r4, r4, [r0, #4]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 80011f6:	e9c0 5507 	strd	r5, r5, [r0, #28]
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80011fa:	e9c0 5509 	strd	r5, r5, [r0, #36]	@ 0x24
  hfdcan1.Init.DataTimeSeg2 = 1;
 80011fe:	e9c0 550b 	strd	r5, r5, [r0, #44]	@ 0x2c
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001202:	e9c0 440d 	strd	r4, r4, [r0, #52]	@ 0x34
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001206:	60c4      	str	r4, [r0, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001208:	8204      	strh	r4, [r0, #16]
  hfdcan1.Init.ProtocolException = DISABLE;
 800120a:	7484      	strb	r4, [r0, #18]
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800120c:	63c4      	str	r4, [r0, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800120e:	f004 fce5 	bl	8005bdc <HAL_FDCAN_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	b108      	cbz	r0, 800121a <main+0x58e>
 8001216:	b672      	cpsid	i
  while (1)
 8001218:	e7fe      	b.n	8001218 <main+0x58c>
  htim16.Instance = TIM16;
 800121a:	4c1a      	ldr	r4, [pc, #104]	@ (8001284 <main+0x5f8>)
 800121c:	4a1a      	ldr	r2, [pc, #104]	@ (8001288 <main+0x5fc>)
 800121e:	6022      	str	r2, [r4, #0]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001220:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
 8001224:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001228:	e9c4 0001 	strd	r0, r0, [r4, #4]
  htim16.Init.Period = 65535;
 800122c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001230:	4620      	mov	r0, r4
  htim16.Init.RepetitionCounter = 0;
 8001232:	e9c4 3304 	strd	r3, r3, [r4, #16]
  htim16.Init.Period = 65535;
 8001236:	60e2      	str	r2, [r4, #12]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001238:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800123a:	f005 fe53 	bl	8006ee4 <HAL_TIM_Base_Init>
 800123e:	b108      	cbz	r0, 8001244 <main+0x5b8>
 8001240:	b672      	cpsid	i
  while (1)
 8001242:	e7fe      	b.n	8001242 <main+0x5b6>
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8001244:	4620      	mov	r0, r4
 8001246:	f005 ff4b 	bl	80070e0 <HAL_TIM_IC_Init>
 800124a:	4602      	mov	r2, r0
 800124c:	b1f0      	cbz	r0, 800128c <main+0x600>
 800124e:	b672      	cpsid	i
  while (1)
 8001250:	e7fe      	b.n	8001250 <main+0x5c4>
 8001252:	bf00      	nop
 8001254:	20000778 	.word	0x20000778
 8001258:	40010300 	.word	0x40010300
 800125c:	2000073c 	.word	0x2000073c
 8001260:	40010304 	.word	0x40010304
 8001264:	20000700 	.word	0x20000700
 8001268:	40010308 	.word	0x40010308
 800126c:	200006b4 	.word	0x200006b4
 8001270:	40012c00 	.word	0x40012c00
 8001274:	200005d4 	.word	0x200005d4
 8001278:	40004400 	.word	0x40004400
 800127c:	200007b4 	.word	0x200007b4
 8001280:	40006400 	.word	0x40006400
 8001284:	20000668 	.word	0x20000668
 8001288:	40014400 	.word	0x40014400
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800128c:	230a      	movs	r3, #10
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800128e:	4620      	mov	r0, r4
 8001290:	a917      	add	r1, sp, #92	@ 0x5c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001292:	e9cd 3517 	strd	r3, r5, [sp, #92]	@ 0x5c
  sConfigIC.ICFilter = 0;
 8001296:	e9cd 2219 	strd	r2, r2, [sp, #100]	@ 0x64
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800129a:	f005 ff9f 	bl	80071dc <HAL_TIM_IC_ConfigChannel>
 800129e:	4604      	mov	r4, r0
 80012a0:	b108      	cbz	r0, 80012a6 <main+0x61a>
 80012a2:	b672      	cpsid	i
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <main+0x618>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 80012a6:	2103      	movs	r1, #3
 80012a8:	462a      	mov	r2, r5
 80012aa:	2026      	movs	r0, #38	@ 0x26
 80012ac:	f004 fa7a 	bl	80057a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012b0:	2026      	movs	r0, #38	@ 0x26
 80012b2:	f004 fab3 	bl	800581c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80012b6:	4622      	mov	r2, r4
 80012b8:	2103      	movs	r1, #3
 80012ba:	200b      	movs	r0, #11
 80012bc:	f004 fa72 	bl	80057a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012c0:	200b      	movs	r0, #11
 80012c2:	f004 faab 	bl	800581c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 80012c6:	462a      	mov	r2, r5
 80012c8:	2104      	movs	r1, #4
 80012ca:	2018      	movs	r0, #24
 80012cc:	f004 fa6a 	bl	80057a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80012d0:	2018      	movs	r0, #24
 80012d2:	f004 faa3 	bl	800581c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80012d6:	4622      	mov	r2, r4
 80012d8:	4621      	mov	r1, r4
 80012da:	2019      	movs	r0, #25
 80012dc:	f004 fa62 	bl	80057a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80012e0:	2019      	movs	r0, #25
 80012e2:	f004 fa9b 	bl	800581c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 80012e6:	4622      	mov	r2, r4
 80012e8:	2102      	movs	r1, #2
 80012ea:	2012      	movs	r0, #18
 80012ec:	f004 fa5a 	bl	80057a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012f0:	2012      	movs	r0, #18
 80012f2:	f004 fa93 	bl	800581c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80012f6:	2028      	movs	r0, #40	@ 0x28
 80012f8:	4622      	mov	r2, r4
 80012fa:	2103      	movs	r1, #3
 80012fc:	f004 fa52 	bl	80057a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001300:	2028      	movs	r0, #40	@ 0x28
 8001302:	f004 fa8b 	bl	800581c <HAL_NVIC_EnableIRQ>
  while (1)
 8001306:	e7fe      	b.n	8001306 <main+0x67a>

08001308 <Error_Handler>:
 8001308:	b672      	cpsid	i
  while (1)
 800130a:	e7fe      	b.n	800130a <Error_Handler+0x2>

0800130c <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
  return (MCI_StartMotor(pMCI[M1]));
 800130c:	4b01      	ldr	r3, [pc, #4]	@ (8001314 <MC_StartMotor1+0x8>)
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	f000 b880 	b.w	8001414 <MCI_StartMotor>
 8001314:	20001c68 	.word	0x20001c68

08001318 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
  return (MCI_StopMotor(pMCI[M1]));
 8001318:	4b01      	ldr	r3, [pc, #4]	@ (8001320 <MC_StopMotor1+0x8>)
 800131a:	6818      	ldr	r0, [r3, #0]
 800131c:	f000 b890 	b.w	8001440 <MCI_StopMotor>
 8001320:	20001c68 	.word	0x20001c68

08001324 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t MC_GetSTMStateMotor1(void)
{
  return (MCI_GetSTMState(pMCI[M1]));
 8001324:	4b01      	ldr	r3, [pc, #4]	@ (800132c <MC_GetSTMStateMotor1+0x8>)
 8001326:	6818      	ldr	r0, [r3, #0]
 8001328:	f000 b86e 	b.w	8001408 <MCI_GetSTMState>
 800132c:	20001c68 	.word	0x20001c68

08001330 <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */ //cstat !MISRAC2012-Rule-2.7 !RED-unused-param  !MISRAC2012-Rule-2.7  !MISRAC2012-Rule-8.13
__weak uint8_t MC_ProfilerCommand(uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return (MCP_CMD_UNKNOWN);
}
 8001330:	2002      	movs	r0, #2
 8001332:	4770      	bx	lr

08001334 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop

08001338 <MC_APP_PostMediumFrequencyHook_M1>:
 * @brief Hook function called right after the Medium Frequency Task for Motor 1.
 *
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop

0800133c <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 800133c:	f04f 0c01 	mov.w	ip, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001340:	f240 3301 	movw	r3, #769	@ 0x301
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001344:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
 8001348:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 800134a:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800134c:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800134e:	4770      	bx	lr

08001350 <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8001350:	f04f 0c02 	mov.w	ip, #2
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001354:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8001358:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
 800135c:	8201      	strh	r1, [r0, #16]
    pHandle->hDurationms = hDurationms;
 800135e:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001360:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001362:	4770      	bx	lr

08001364 <MCI_SetCurrentReferences>:
  * function.

  @sa MCI_SetCurrentReferences_F
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 8001364:	b082      	sub	sp, #8
  }
  else
  {
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8001366:	2203      	movs	r2, #3
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001368:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 800136c:	7302      	strb	r2, [r0, #12]
    pHandle->Iqdref.q = Iqdref.q;
 800136e:	f8c0 1012 	str.w	r1, [r0, #18]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001372:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001374:	b002      	add	sp, #8
 8001376:	4770      	bx	lr

08001378 <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001378:	8c03      	ldrh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 800137a:	f8b0 c022 	ldrh.w	ip, [r0, #34]	@ 0x22
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 800137e:	430b      	orrs	r3, r1
 8001380:	ea23 0302 	bic.w	r3, r3, r2
    pHandle->PastFaults |= hSetErrors;
 8001384:	ea41 010c 	orr.w	r1, r1, ip
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001388:	8403      	strh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 800138a:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop

08001390 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001390:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8001394:	2b01      	cmp	r3, #1
 8001396:	d000      	beq.n	800139a <MCI_ExecBufferedCommands+0xa>
 8001398:	4770      	bx	lr
{
 800139a:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 800139c:	7b02      	ldrb	r2, [r0, #12]
 800139e:	2a02      	cmp	r2, #2
 80013a0:	4604      	mov	r4, r0
 80013a2:	d007      	beq.n	80013b4 <MCI_ExecBufferedCommands+0x24>
 80013a4:	2a03      	cmp	r2, #3
 80013a6:	d028      	beq.n	80013fa <MCI_ExecBufferedCommands+0x6a>
 80013a8:	2a01      	cmp	r2, #1
 80013aa:	d017      	beq.n	80013dc <MCI_ExecBufferedCommands+0x4c>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 80013ac:	2303      	movs	r3, #3
 80013ae:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80013b2:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80013b4:	6843      	ldr	r3, [r0, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 80013bc:	6800      	ldr	r0, [r0, #0]
 80013be:	2104      	movs	r1, #4
 80013c0:	f008 f9b8 	bl	8009734 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 80013c4:	8ba2      	ldrh	r2, [r4, #28]
 80013c6:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80013ca:	6820      	ldr	r0, [r4, #0]
 80013cc:	f008 f9b6 	bl	800973c <STC_ExecRamp>
      if (commandHasBeenExecuted)
 80013d0:	2800      	cmp	r0, #0
 80013d2:	d0eb      	beq.n	80013ac <MCI_ExecBufferedCommands+0x1c>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 80013d4:	2302      	movs	r3, #2
 80013d6:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 80013da:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80013dc:	6843      	ldr	r3, [r0, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 80013e4:	6800      	ldr	r0, [r0, #0]
 80013e6:	2103      	movs	r1, #3
 80013e8:	f008 f9a4 	bl	8009734 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 80013ec:	8ba2      	ldrh	r2, [r4, #28]
 80013ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80013f2:	6820      	ldr	r0, [r4, #0]
 80013f4:	f008 f9a2 	bl	800973c <STC_ExecRamp>
          break;
 80013f8:	e7ea      	b.n	80013d0 <MCI_ExecBufferedCommands+0x40>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80013fa:	6842      	ldr	r2, [r0, #4]
 80013fc:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8001400:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8001404:	6113      	str	r3, [r2, #16]
      if (commandHasBeenExecuted)
 8001406:	e7e5      	b.n	80013d4 <MCI_ExecBufferedCommands+0x44>

08001408 <MCI_GetSTMState>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
#endif
}
 8001408:	7fc0      	ldrb	r0, [r0, #31]
 800140a:	4770      	bx	lr

0800140c <MCI_GetOccurredFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
#endif
}
 800140c:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 800140e:	4770      	bx	lr

08001410 <MCI_GetCurrentFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
#endif
}
 8001410:	8c00      	ldrh	r0, [r0, #32]
 8001412:	4770      	bx	lr

08001414 <MCI_StartMotor>:
{
 8001414:	b510      	push	{r4, lr}
 8001416:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001418:	f7ff fff6 	bl	8001408 <MCI_GetSTMState>
 800141c:	b108      	cbz	r0, 8001422 <MCI_StartMotor+0xe>
  bool retVal = false;
 800141e:	2000      	movs	r0, #0
}
 8001420:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001422:	4620      	mov	r0, r4
 8001424:	f7ff fff2 	bl	800140c <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001428:	2800      	cmp	r0, #0
 800142a:	d1f8      	bne.n	800141e <MCI_StartMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 800142c:	4620      	mov	r0, r4
 800142e:	f7ff ffef 	bl	8001410 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001432:	2800      	cmp	r0, #0
 8001434:	d1f3      	bne.n	800141e <MCI_StartMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 8001436:	2001      	movs	r0, #1
 8001438:	77a0      	strb	r0, [r4, #30]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800143a:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 800143e:	bd10      	pop	{r4, pc}

08001440 <MCI_StopMotor>:
{
 8001440:	b538      	push	{r3, r4, r5, lr}
 8001442:	4605      	mov	r5, r0
    State = MCI_GetSTMState(pHandle);
 8001444:	f7ff ffe0 	bl	8001408 <MCI_GetSTMState>
    if ((IDLE == State) || (ICLWAIT == State))
 8001448:	4604      	mov	r4, r0
 800144a:	b118      	cbz	r0, 8001454 <MCI_StopMotor+0x14>
 800144c:	f1b0 040c 	subs.w	r4, r0, #12
 8001450:	bf18      	it	ne
 8001452:	2401      	movne	r4, #1
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001454:	4628      	mov	r0, r5
 8001456:	f7ff ffd9 	bl	800140c <MCI_GetOccurredFaults>
 800145a:	b110      	cbz	r0, 8001462 <MCI_StopMotor+0x22>
  bool retVal = false;
 800145c:	2400      	movs	r4, #0
}
 800145e:	4620      	mov	r0, r4
 8001460:	bd38      	pop	{r3, r4, r5, pc}
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001462:	4628      	mov	r0, r5
 8001464:	f7ff ffd4 	bl	8001410 <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001468:	2800      	cmp	r0, #0
 800146a:	d1f7      	bne.n	800145c <MCI_StopMotor+0x1c>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 800146c:	2c00      	cmp	r4, #0
 800146e:	d0f5      	beq.n	800145c <MCI_StopMotor+0x1c>
      pHandle->DirectCommand = MCI_STOP;
 8001470:	2305      	movs	r3, #5
 8001472:	77ab      	strb	r3, [r5, #30]
      retVal = true;
 8001474:	e7f3      	b.n	800145e <MCI_StopMotor+0x1e>
 8001476:	bf00      	nop

08001478 <MCI_FaultAcknowledged>:
{
 8001478:	b510      	push	{r4, lr}
 800147a:	4604      	mov	r4, r0
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 800147c:	f7ff ffc4 	bl	8001408 <MCI_GetSTMState>
 8001480:	280b      	cmp	r0, #11
 8001482:	d001      	beq.n	8001488 <MCI_FaultAcknowledged+0x10>
  bool reVal = false;
 8001484:	2000      	movs	r0, #0
}
 8001486:	bd10      	pop	{r4, pc}
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001488:	4620      	mov	r0, r4
 800148a:	f7ff ffc1 	bl	8001410 <MCI_GetCurrentFaults>
 800148e:	2800      	cmp	r0, #0
 8001490:	d1f8      	bne.n	8001484 <MCI_FaultAcknowledged+0xc>
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 8001492:	2302      	movs	r3, #2
 8001494:	77a3      	strb	r3, [r4, #30]
      pHandle->PastFaults = MC_NO_FAULTS;
 8001496:	8460      	strh	r0, [r4, #34]	@ 0x22
      reVal = true;
 8001498:	2001      	movs	r0, #1
}
 800149a:	bd10      	pop	{r4, pc}

0800149c <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 800149c:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 800149e:	8c00      	ldrh	r0, [r0, #32]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 80014a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop

080014a8 <MCI_GetControlMode>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 80014a8:	f890 0025 	ldrb.w	r0, [r0, #37]	@ 0x25
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop

080014b0 <MCI_GetImposedMotorDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->lastCommand)
 80014b0:	7b03      	ldrb	r3, [r0, #12]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d005      	beq.n	80014c2 <MCI_GetImposedMotorDirection+0x12>
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	d013      	beq.n	80014e2 <MCI_GetImposedMotorDirection+0x32>
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d009      	beq.n	80014d2 <MCI_GetImposedMotorDirection+0x22>
  int16_t retVal = 1;
 80014be:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (retVal);
}
 80014c0:	4770      	bx	lr
        if (pHandle->hFinalTorque < 0)
 80014c2:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
          retVal = -1;
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	bfac      	ite	ge
 80014ca:	2001      	movge	r0, #1
 80014cc:	f04f 30ff 	movlt.w	r0, #4294967295
 80014d0:	4770      	bx	lr
        if (pHandle->hFinalSpeed < 0)
 80014d2:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
          retVal = -1;
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	bfac      	ite	ge
 80014da:	2001      	movge	r0, #1
 80014dc:	f04f 30ff 	movlt.w	r0, #4294967295
 80014e0:	4770      	bx	lr
        if (pHandle->Iqdref.q < 0)
 80014e2:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
          retVal = -1;
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	bfac      	ite	ge
 80014ea:	2001      	movge	r0, #1
 80014ec:	f04f 30ff 	movlt.w	r0, #4294967295
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop

080014f4 <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 80014f4:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop

080014fc <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 80014fc:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop

08001504 <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 8001504:	8b80      	ldrh	r0, [r0, #28]
 8001506:	4770      	bx	lr

08001508 <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 8001508:	6803      	ldr	r3, [r0, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
    pHandle->IncDecAmount = 0;
 800150e:	619a      	str	r2, [r3, #24]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop

08001514 <MCI_GetAvrgMecSpeedUnit>:
static inline SpeednPosFdbk_Handle_t *STC_GetSpeedSensor(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
 8001514:	6803      	ldr	r3, [r0, #0]
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 8001516:	6958      	ldr	r0, [r3, #20]
 8001518:	f008 b8a4 	b.w	8009664 <SPD_GetAvrgMecSpeedUnit>

0800151c <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 800151c:	6800      	ldr	r0, [r0, #0]
 800151e:	f008 b905 	b.w	800972c <STC_GetMecSpeedRefUnit>
 8001522:	bf00      	nop

08001524 <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 8001524:	6842      	ldr	r2, [r0, #4]
 8001526:	6810      	ldr	r0, [r2, #0]
 8001528:	2300      	movs	r3, #0
 800152a:	b282      	uxth	r2, r0
 800152c:	f362 030f 	bfi	r3, r2, #0, #16
 8001530:	0c00      	lsrs	r0, r0, #16
 8001532:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001536:	b082      	sub	sp, #8
#endif
}
 8001538:	4618      	mov	r0, r3
 800153a:	b002      	add	sp, #8
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop

08001540 <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 8001540:	6842      	ldr	r2, [r0, #4]
 8001542:	6850      	ldr	r0, [r2, #4]
 8001544:	2300      	movs	r3, #0
 8001546:	b282      	uxth	r2, r0
 8001548:	f362 030f 	bfi	r3, r2, #0, #16
 800154c:	0c00      	lsrs	r0, r0, #16
 800154e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001552:	b082      	sub	sp, #8
#endif
}
 8001554:	4618      	mov	r0, r3
 8001556:	b002      	add	sp, #8
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop

0800155c <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 800155c:	6842      	ldr	r2, [r0, #4]
 800155e:	68d0      	ldr	r0, [r2, #12]
 8001560:	2300      	movs	r3, #0
 8001562:	b282      	uxth	r2, r0
 8001564:	f362 030f 	bfi	r3, r2, #0, #16
 8001568:	0c00      	lsrs	r0, r0, #16
 800156a:	f360 431f 	bfi	r3, r0, #16, #16
{
 800156e:	b082      	sub	sp, #8
#endif
}
 8001570:	4618      	mov	r0, r3
 8001572:	b002      	add	sp, #8
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop

08001578 <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 8001578:	6842      	ldr	r2, [r0, #4]
 800157a:	6910      	ldr	r0, [r2, #16]
 800157c:	2300      	movs	r3, #0
 800157e:	b282      	uxth	r2, r0
 8001580:	f362 030f 	bfi	r3, r2, #0, #16
 8001584:	0c00      	lsrs	r0, r0, #16
 8001586:	f360 431f 	bfi	r3, r0, #16, #16
{
 800158a:	b082      	sub	sp, #8
#endif
}
 800158c:	4618      	mov	r0, r3
 800158e:	b002      	add	sp, #8
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop

08001594 <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 8001594:	6842      	ldr	r2, [r0, #4]
 8001596:	f8d2 0016 	ldr.w	r0, [r2, #22]
 800159a:	2300      	movs	r3, #0
 800159c:	b282      	uxth	r2, r0
 800159e:	f362 030f 	bfi	r3, r2, #0, #16
 80015a2:	0c00      	lsrs	r0, r0, #16
 80015a4:	f360 431f 	bfi	r3, r0, #16, #16
{
 80015a8:	b082      	sub	sp, #8
#endif
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	b002      	add	sp, #8
 80015ae:	4770      	bx	lr

080015b0 <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 80015b0:	6842      	ldr	r2, [r0, #4]
 80015b2:	f8d2 001a 	ldr.w	r0, [r2, #26]
 80015b6:	2300      	movs	r3, #0
 80015b8:	b282      	uxth	r2, r0
 80015ba:	f362 030f 	bfi	r3, r2, #0, #16
 80015be:	0c00      	lsrs	r0, r0, #16
 80015c0:	f360 431f 	bfi	r3, r0, #16, #16
{
 80015c4:	b082      	sub	sp, #8
#endif
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	b002      	add	sp, #8
 80015ca:	4770      	bx	lr

080015cc <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 80015cc:	6843      	ldr	r3, [r0, #4]
#endif
}
 80015ce:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 80015d2:	4770      	bx	lr

080015d4 <MCI_Clear_Iqdref>:
/**
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 80015d4:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 80015d6:	e9d0 0400 	ldrd	r0, r4, [r0]
 80015da:	f008 f931 	bl	8009840 <STC_GetDefaultIqdref>
 80015de:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80015e2:	8220      	strh	r0, [r4, #16]
 80015e4:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80015e6:	bd10      	pop	{r4, pc}

080015e8 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format.
  * @retval Stator values alpha and beta in alphabeta_t format.
  */
__weak alphabeta_t MCM_Clarke(ab_t Input)
{
 80015e8:	f3c0 430f 	ubfx	r3, r0, #16, #16
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80015ec:	f644 11e6 	movw	r1, #18918	@ 0x49e6
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80015f0:	f24b 621a 	movw	r2, #46618	@ 0xb61a
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80015f4:	fb13 f301 	smulbb	r3, r3, r1
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80015f8:	fb10 f202 	smulbb	r2, r0, r2
 80015fc:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 8001600:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
{
 8001604:	b084      	sub	sp, #16
 8001606:	b203      	sxth	r3, r0
  if (wbeta_tmp > INT16_MAX)
 8001608:	da05      	bge.n	8001616 <MCM_Clarke+0x2e>
 800160a:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 800160c:	f511 4f00 	cmn.w	r1, #32768	@ 0x8000
 8001610:	da0c      	bge.n	800162c <MCM_Clarke+0x44>
 8001612:	4a09      	ldr	r2, [pc, #36]	@ (8001638 <MCM_Clarke+0x50>)
 8001614:	e001      	b.n	800161a <MCM_Clarke+0x32>
 8001616:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  else
  {
    /* Nothing to do */
  }

  return (Output);
 800161a:	b29b      	uxth	r3, r3
 800161c:	2000      	movs	r0, #0
 800161e:	f363 000f 	bfi	r0, r3, #0, #16
 8001622:	b293      	uxth	r3, r2
 8001624:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001628:	b004      	add	sp, #16
 800162a:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 800162c:	4802      	ldr	r0, [pc, #8]	@ (8001638 <MCM_Clarke+0x50>)
 800162e:	b20a      	sxth	r2, r1
 8001630:	4282      	cmp	r2, r0
 8001632:	bfb8      	it	lt
 8001634:	4602      	movlt	r2, r0
 8001636:	e7f0      	b.n	800161a <MCM_Clarke+0x32>
 8001638:	ffff8001 	.word	0xffff8001

0800163c <MCM_Trig_Functions>:
  } CosSin;
  //cstat +MISRAC2012-Rule-19.2
  /* Configure CORDIC */
  /* Misra  violation Rule 11.4 A�Conversion�should�not�be�performed�between�a�
   * pointer�to�object and an integer type */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 800163c:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <MCM_Trig_Functions+0x28>)
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed�between�a
   * pointer�to�object and an integer type */
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 800163e:	f100 40ff 	add.w	r0, r0, #2139095040	@ 0x7f800000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001642:	f04f 1260 	mov.w	r2, #6291552	@ 0x600060
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 8001646:	f500 00fe 	add.w	r0, r0, #8323072	@ 0x7f0000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 800164a:	601a      	str	r2, [r3, #0]
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 800164c:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(const CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 800164e:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed between�a
   * pointer�to object and an integer type */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components); //cstat !UNION-type-punning
 8001650:	2000      	movs	r0, #0
 8001652:	b29a      	uxth	r2, r3
 8001654:	f362 000f 	bfi	r0, r2, #0, #16
 8001658:	0c1b      	lsrs	r3, r3, #16
{
 800165a:	b082      	sub	sp, #8
  return (CosSin.Components); //cstat !UNION-type-punning
 800165c:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001660:	b002      	add	sp, #8
 8001662:	4770      	bx	lr
 8001664:	40020c00 	.word	0x40020c00

08001668 <MCM_Park>:
{
 8001668:	b530      	push	{r4, r5, lr}
 800166a:	4605      	mov	r5, r0
 800166c:	4604      	mov	r4, r0
 800166e:	b085      	sub	sp, #20
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001670:	4608      	mov	r0, r1
 8001672:	f7ff ffe3 	bl	800163c <MCM_Trig_Functions>
 8001676:	b22d      	sxth	r5, r5
 8001678:	b201      	sxth	r1, r0
 800167a:	1424      	asrs	r4, r4, #16
 800167c:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 800167e:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001682:	fb04 3310 	mls	r3, r4, r0, r3
  if (wqd_tmp > INT16_MAX)
 8001686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800168a:	da05      	bge.n	8001698 <MCM_Park+0x30>
 800168c:	13da      	asrs	r2, r3, #15
  else if (wqd_tmp < (-32768))
 800168e:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 8001692:	da22      	bge.n	80016da <MCM_Park+0x72>
 8001694:	4a14      	ldr	r2, [pc, #80]	@ (80016e8 <MCM_Park+0x80>)
 8001696:	e001      	b.n	800169c <MCM_Park+0x34>
 8001698:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 800169c:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80016a0:	fb05 4400 	mla	r4, r5, r0, r4
  if (wqd_tmp > INT16_MAX)
 80016a4:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80016a8:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 80016ac:	da04      	bge.n	80016b8 <MCM_Park+0x50>
  else if (wqd_tmp < (-32768))
 80016ae:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80016b2:	da0c      	bge.n	80016ce <MCM_Park+0x66>
 80016b4:	4b0c      	ldr	r3, [pc, #48]	@ (80016e8 <MCM_Park+0x80>)
 80016b6:	e001      	b.n	80016bc <MCM_Park+0x54>
 80016b8:	f647 73ff 	movw	r3, #32767	@ 0x7fff
  return (Output);
 80016bc:	b292      	uxth	r2, r2
 80016be:	2000      	movs	r0, #0
 80016c0:	f362 000f 	bfi	r0, r2, #0, #16
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	f363 401f 	bfi	r0, r3, #16, #16
}
 80016ca:	b005      	add	sp, #20
 80016cc:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 80016ce:	4906      	ldr	r1, [pc, #24]	@ (80016e8 <MCM_Park+0x80>)
 80016d0:	b21b      	sxth	r3, r3
 80016d2:	428b      	cmp	r3, r1
 80016d4:	bfb8      	it	lt
 80016d6:	460b      	movlt	r3, r1
 80016d8:	e7f0      	b.n	80016bc <MCM_Park+0x54>
    hqd_tmp = ((int16_t)wqd_tmp);
 80016da:	4b03      	ldr	r3, [pc, #12]	@ (80016e8 <MCM_Park+0x80>)
 80016dc:	b212      	sxth	r2, r2
 80016de:	429a      	cmp	r2, r3
 80016e0:	bfb8      	it	lt
 80016e2:	461a      	movlt	r2, r3
 80016e4:	e7da      	b.n	800169c <MCM_Park+0x34>
 80016e6:	bf00      	nop
 80016e8:	ffff8001 	.word	0xffff8001

080016ec <MCM_Rev_Park>:
{
 80016ec:	b530      	push	{r4, r5, lr}
 80016ee:	4605      	mov	r5, r0
 80016f0:	b085      	sub	sp, #20
 80016f2:	4604      	mov	r4, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80016f4:	4608      	mov	r0, r1
 80016f6:	f7ff ffa1 	bl	800163c <MCM_Trig_Functions>
 80016fa:	1424      	asrs	r4, r4, #16
 80016fc:	1402      	asrs	r2, r0, #16
 80016fe:	b22d      	sxth	r5, r5
 8001700:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8001702:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 8001706:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 800170a:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 800170e:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 8001712:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8001716:	2000      	movs	r0, #0
 8001718:	f363 000f 	bfi	r0, r3, #0, #16
 800171c:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8001720:	f364 401f 	bfi	r0, r4, #16, #16
}
 8001724:	b005      	add	sp, #20
 8001726:	bd30      	pop	{r4, r5, pc}

08001728 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 8001728:	2800      	cmp	r0, #0
 800172a:	dd09      	ble.n	8001740 <MCM_Sqrt+0x18>
 800172c:	b672      	cpsid	i
  {
    uint32_t retVal;
    /* Disable Irq as sqrt is used in MF and HF task */
    __disable_irq();
    /* Configure CORDIC */
    WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_SQRT);
 800172e:	4b05      	ldr	r3, [pc, #20]	@ (8001744 <MCM_Sqrt+0x1c>)
 8001730:	f240 1269 	movw	r2, #361	@ 0x169
 8001734:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 8001736:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8001738:	6898      	ldr	r0, [r3, #8]
    LL_CORDIC_WriteData(CORDIC, ((uint32_t)wInput));
    /* Read sqrt and return */
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
    retVal = (LL_CORDIC_ReadData(CORDIC)) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800173a:	0bc0      	lsrs	r0, r0, #15
  __ASM volatile ("cpsie i" : : : "memory");
 800173c:	b662      	cpsie	i
}
 800173e:	4770      	bx	lr
    __enable_irq();

  }
  else
  {
    wtemprootnew = (int32_t)0;
 8001740:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 8001742:	4770      	bx	lr
 8001744:	40020c00 	.word	0x40020c00

08001748 <MCboot>:
{
  /* USER CODE BEGIN MCboot 0 */

  /* USER CODE END MCboot 0 */

  if (MC_NULL == pMCIList)
 8001748:	b308      	cbz	r0, 800178e <MCboot+0x46>
{
 800174a:	b510      	push	{r4, lr}
    bMCBootCompleted = (uint8_t )0;

    /*************************************************/
    /*    FOC initialization         */
    /*************************************************/
    pMCIList[M1] = &Mci[M1];
 800174c:	4a10      	ldr	r2, [pc, #64]	@ (8001790 <MCboot+0x48>)
    bMCBootCompleted = (uint8_t )0;
 800174e:	4c11      	ldr	r4, [pc, #68]	@ (8001794 <MCboot+0x4c>)
    pMCIList[M1] = &Mci[M1];
 8001750:	6002      	str	r2, [r0, #0]
    bMCBootCompleted = (uint8_t )0;
 8001752:	2300      	movs	r3, #0
 8001754:	7023      	strb	r3, [r4, #0]
    FOC_Init();
 8001756:	f000 fa0f 	bl	8001b78 <FOC_Init>

    ASPEP_start(&aspepOverUartA);
 800175a:	480f      	ldr	r0, [pc, #60]	@ (8001798 <MCboot+0x50>)
 800175c:	f7fe fefe 	bl	800055c <ASPEP_start>
    /* USER CODE END MCboot 1 */

    /******************************************************/
    /*   PID component initialization: speed regulation   */
    /******************************************************/
    PID_HandleInit(&PIDSpeedHandle_M1);
 8001760:	480e      	ldr	r0, [pc, #56]	@ (800179c <MCboot+0x54>)
 8001762:	f006 fdb9 	bl	80082d8 <PID_HandleInit>

    /****************************************************/
    /*   Virtual speed sensor component initialization  */
    /****************************************************/
    VSS_Init(&VirtualSpeedSensorM1);
 8001766:	480e      	ldr	r0, [pc, #56]	@ (80017a0 <MCboot+0x58>)
 8001768:	f008 fb56 	bl	8009e18 <VSS_Init>

    /********************************************************/
    /*   Bus voltage sensor component initialization        */
    /********************************************************/
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 800176c:	480d      	ldr	r0, [pc, #52]	@ (80017a4 <MCboot+0x5c>)
 800176e:	f002 f8f9 	bl	8003964 <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 8001772:	480d      	ldr	r0, [pc, #52]	@ (80017a8 <MCboot+0x60>)
 8001774:	f007 fdc0 	bl	80092f8 <RVBS_Init>

    /*******************************************************/
    /*   Temperature measurement component initialization  */
    /*******************************************************/
    (void)RCM_RegisterRegConv(&TempRegConv_M1);
 8001778:	480c      	ldr	r0, [pc, #48]	@ (80017ac <MCboot+0x64>)
 800177a:	f002 f8f3 	bl	8003964 <RCM_RegisterRegConv>
    NTC_Init(&TempSensor_M1);
 800177e:	480c      	ldr	r0, [pc, #48]	@ (80017b0 <MCboot+0x68>)
 8001780:	f006 fd6e 	bl	8008260 <NTC_Init>

    /* Applicative hook in MCBoot() */
    MC_APP_BootHook();
 8001784:	f7ff fdd6 	bl	8001334 <MC_APP_BootHook>

    /* USER CODE BEGIN MCboot 2 */

    /* USER CODE END MCboot 2 */

    bMCBootCompleted = 1U;
 8001788:	2301      	movs	r3, #1
 800178a:	7023      	strb	r3, [r4, #0]
  }
}
 800178c:	bd10      	pop	{r4, pc}
 800178e:	4770      	bx	lr
 8001790:	20000000 	.word	0x20000000
 8001794:	200009d4 	.word	0x200009d4
 8001798:	20000460 	.word	0x20000460
 800179c:	20000338 	.word	0x20000338
 80017a0:	200003cc 	.word	0x200003cc
 80017a4:	20000390 	.word	0x20000390
 80017a8:	20000374 	.word	0x20000374
 80017ac:	200003bc 	.word	0x200003bc
 80017b0:	200003a0 	.word	0x200003a0

080017b4 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 80017b4:	4b01      	ldr	r3, [pc, #4]	@ (80017bc <TSK_SetChargeBootCapDelayM1+0x8>)
 80017b6:	8018      	strh	r0, [r3, #0]
}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	200009d8 	.word	0x200009d8

080017c0 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 80017c0:	4b03      	ldr	r3, [pc, #12]	@ (80017d0 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 80017c2:	8818      	ldrh	r0, [r3, #0]
 80017c4:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80017c6:	fab0 f080 	clz	r0, r0
 80017ca:	0940      	lsrs	r0, r0, #5
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	200009d8 	.word	0x200009d8

080017d4 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 80017d4:	4b01      	ldr	r3, [pc, #4]	@ (80017dc <TSK_SetStopPermanencyTimeM1+0x8>)
 80017d6:	8018      	strh	r0, [r3, #0]
}
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	200009d6 	.word	0x200009d6

080017e0 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 80017e0:	4b03      	ldr	r3, [pc, #12]	@ (80017f0 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 80017e2:	8818      	ldrh	r0, [r3, #0]
 80017e4:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80017e6:	fab0 f080 	clz	r0, r0
 80017ea:	0940      	lsrs	r0, r0, #5
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	200009d6 	.word	0x200009d6

080017f4 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 80017f4:	b508      	push	{r3, lr}
  bMotorNbr = 0;

  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */
  FOC_HighFrequencyTask(bMotorNbr);
 80017f6:	2000      	movs	r0, #0
 80017f8:	f000 fbd8 	bl	8001fac <FOC_HighFrequencyTask>

  /* USER CODE BEGIN HighFrequencyTask 1 */

  /* USER CODE END HighFrequencyTask 1 */

  GLOBAL_TIMESTAMP++;
 80017fc:	4a06      	ldr	r2, [pc, #24]	@ (8001818 <TSK_HighFrequencyTask+0x24>)
  if (0U == MCPA_UART_A.Mark)
 80017fe:	4807      	ldr	r0, [pc, #28]	@ (800181c <TSK_HighFrequencyTask+0x28>)
  GLOBAL_TIMESTAMP++;
 8001800:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8001802:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
  GLOBAL_TIMESTAMP++;
 8001806:	3301      	adds	r3, #1
 8001808:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 800180a:	b909      	cbnz	r1, 8001810 <TSK_HighFrequencyTask+0x1c>
    MCPA_dataLog (&MCPA_UART_A);
  }

  return (bMotorNbr);

}
 800180c:	2000      	movs	r0, #0
 800180e:	bd08      	pop	{r3, pc}
    MCPA_dataLog (&MCPA_UART_A);
 8001810:	f006 fba8 	bl	8007f64 <MCPA_dataLog>
}
 8001814:	2000      	movs	r0, #0
 8001816:	bd08      	pop	{r3, pc}
 8001818:	20001ccc 	.word	0x20001ccc
 800181c:	20000424 	.word	0x20000424

08001820 <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint8_t lbmotor = M1;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  if (M1 == bMotor)
 8001822:	4604      	mov	r4, r0
 8001824:	b198      	cbz	r0, 800184e <TSK_SafetyTask_PWMOFF+0x2e>
  {
    /* Nothing to do */
  }

/* Due to warning array subscript 1 is above array bounds of PWMC_Handle_t *[1] [-Warray-bounds] */
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001826:	4e21      	ldr	r6, [pc, #132]	@ (80018ac <TSK_SafetyTask_PWMOFF+0x8c>)
 8001828:	6830      	ldr	r0, [r6, #0]
 800182a:	f001 f807 	bl	800283c <PWMC_IsFaultOccurred>
 800182e:	4601      	mov	r1, r0
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8001830:	4d1f      	ldr	r5, [pc, #124]	@ (80018b0 <TSK_SafetyTask_PWMOFF+0x90>)
 8001832:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001836:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800183a:	43ca      	mvns	r2, r1
 800183c:	4628      	mov	r0, r5
 800183e:	b292      	uxth	r2, r2
 8001840:	f7ff fd9a 	bl	8001378 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8001844:	4628      	mov	r0, r5
 8001846:	f7ff fe29 	bl	800149c <MCI_GetFaultState>
 800184a:	b9d8      	cbnz	r0, 8001884 <TSK_SafetyTask_PWMOFF+0x64>
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 800184c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 800184e:	4819      	ldr	r0, [pc, #100]	@ (80018b4 <TSK_SafetyTask_PWMOFF+0x94>)
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001850:	4e16      	ldr	r6, [pc, #88]	@ (80018ac <TSK_SafetyTask_PWMOFF+0x8c>)
    uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 8001852:	f002 f983 	bl	8003b5c <RCM_ExecRegularConv>
 8001856:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(&TempSensor_M1, rawValueM1);
 8001858:	4817      	ldr	r0, [pc, #92]	@ (80018b8 <TSK_SafetyTask_PWMOFF+0x98>)
 800185a:	f006 fd13 	bl	8008284 <NTC_CalcAvTemp>
 800185e:	4607      	mov	r7, r0
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001860:	6830      	ldr	r0, [r6, #0]
 8001862:	f000 ffeb 	bl	800283c <PWMC_IsFaultOccurred>
 8001866:	4605      	mov	r5, r0
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 8001868:	4814      	ldr	r0, [pc, #80]	@ (80018bc <TSK_SafetyTask_PWMOFF+0x9c>)
 800186a:	f002 f977 	bl	8003b5c <RCM_ExecRegularConv>
 800186e:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 8001870:	4813      	ldr	r0, [pc, #76]	@ (80018c0 <TSK_SafetyTask_PWMOFF+0xa0>)
 8001872:	f007 fd6d 	bl	8009350 <RVBS_CalcAvVbus>
 8001876:	4307      	orrs	r7, r0
 8001878:	f007 070e 	and.w	r7, r7, #14
 800187c:	ea45 0107 	orr.w	r1, r5, r7
 8001880:	b289      	uxth	r1, r1
 8001882:	e7d5      	b.n	8001830 <TSK_SafetyTask_PWMOFF+0x10>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001884:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001888:	f000 ff8c 	bl	80027a4 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0U)
 800188c:	480d      	ldr	r0, [pc, #52]	@ (80018c4 <TSK_SafetyTask_PWMOFF+0xa4>)
 800188e:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8001892:	b923      	cbnz	r3, 800189e <TSK_SafetyTask_PWMOFF+0x7e>
    FOC_Clear(bMotor);
 8001894:	4620      	mov	r0, r4
}
 8001896:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    FOC_Clear(bMotor);
 800189a:	f000 b933 	b.w	8001b04 <FOC_Clear>
      MCPA_flushDataLog (&MCPA_UART_A);
 800189e:	f006 fc21 	bl	80080e4 <MCPA_flushDataLog>
    FOC_Clear(bMotor);
 80018a2:	4620      	mov	r0, r4
}
 80018a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    FOC_Clear(bMotor);
 80018a8:	f000 b92c 	b.w	8001b04 <FOC_Clear>
 80018ac:	200009c4 	.word	0x200009c4
 80018b0:	20000000 	.word	0x20000000
 80018b4:	200003bc 	.word	0x200003bc
 80018b8:	200003a0 	.word	0x200003a0
 80018bc:	20000390 	.word	0x20000390
 80018c0:	20000374 	.word	0x20000374
 80018c4:	20000424 	.word	0x20000424

080018c8 <TSK_SafetyTask>:
{
 80018c8:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 80018ca:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <TSK_SafetyTask+0x1c>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d000      	beq.n	80018d4 <TSK_SafetyTask+0xc>
}
 80018d2:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 80018d4:	2000      	movs	r0, #0
 80018d6:	f7ff ffa3 	bl	8001820 <TSK_SafetyTask_PWMOFF>
}
 80018da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 80018de:	f002 ba05 	b.w	8003cec <RCM_ExecUserConv>
 80018e2:	bf00      	nop
 80018e4:	200009d4 	.word	0x200009d4

080018e8 <MC_RunMotorControlTasks>:
  if (0U == bMCBootCompleted)
 80018e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001964 <MC_RunMotorControlTasks+0x7c>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	b1cb      	cbz	r3, 8001922 <MC_RunMotorControlTasks+0x3a>
{
 80018ee:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 80018f0:	4c1d      	ldr	r4, [pc, #116]	@ (8001968 <MC_RunMotorControlTasks+0x80>)
 80018f2:	8823      	ldrh	r3, [r4, #0]
 80018f4:	b1b3      	cbz	r3, 8001924 <MC_RunMotorControlTasks+0x3c>
      hMFTaskCounterM1--;
 80018f6:	3b01      	subs	r3, #1
 80018f8:	b29b      	uxth	r3, r3
    if(hBootCapDelayCounterM1 > 0U)
 80018fa:	4a1c      	ldr	r2, [pc, #112]	@ (800196c <MC_RunMotorControlTasks+0x84>)
      hMFTaskCounterM1--;
 80018fc:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 80018fe:	8813      	ldrh	r3, [r2, #0]
 8001900:	b29b      	uxth	r3, r3
 8001902:	b11b      	cbz	r3, 800190c <MC_RunMotorControlTasks+0x24>
      hBootCapDelayCounterM1--;
 8001904:	8813      	ldrh	r3, [r2, #0]
 8001906:	3b01      	subs	r3, #1
 8001908:	b29b      	uxth	r3, r3
 800190a:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 800190c:	4a18      	ldr	r2, [pc, #96]	@ (8001970 <MC_RunMotorControlTasks+0x88>)
 800190e:	8813      	ldrh	r3, [r2, #0]
 8001910:	b29b      	uxth	r3, r3
 8001912:	b11b      	cbz	r3, 800191c <MC_RunMotorControlTasks+0x34>
      hStopPermanencyCounterM1--;
 8001914:	8813      	ldrh	r3, [r2, #0]
 8001916:	3b01      	subs	r3, #1
 8001918:	b29b      	uxth	r3, r3
 800191a:	8013      	strh	r3, [r2, #0]
    TSK_SafetyTask();
 800191c:	f7ff ffd4 	bl	80018c8 <TSK_SafetyTask>
}
 8001920:	bd70      	pop	{r4, r5, r6, pc}
 8001922:	4770      	bx	lr
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001924:	4d13      	ldr	r5, [pc, #76]	@ (8001974 <MC_RunMotorControlTasks+0x8c>)
      TSK_MediumFrequencyTaskM1();
 8001926:	f000 f9bb 	bl	8001ca0 <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 800192a:	f7ff fd05 	bl	8001338 <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 800192e:	4629      	mov	r1, r5
 8001930:	f851 0b0c 	ldr.w	r0, [r1], #12
 8001934:	6883      	ldr	r3, [r0, #8]
 8001936:	4798      	blx	r3
 8001938:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 800193a:	b130      	cbz	r0, 800194a <MC_RunMotorControlTasks+0x62>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 800193c:	4629      	mov	r1, r5
 800193e:	220a      	movs	r2, #10
 8001940:	f851 0b08 	ldr.w	r0, [r1], #8
 8001944:	6803      	ldr	r3, [r0, #0]
 8001946:	4798      	blx	r3
 8001948:	b908      	cbnz	r0, 800194e <MC_RunMotorControlTasks+0x66>
{
 800194a:	2301      	movs	r3, #1
 800194c:	e7d5      	b.n	80018fa <MC_RunMotorControlTasks+0x12>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 800194e:	4628      	mov	r0, r5
 8001950:	f000 fc94 	bl	800227c <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8001954:	6828      	ldr	r0, [r5, #0]
 8001956:	89ea      	ldrh	r2, [r5, #14]
 8001958:	6846      	ldr	r6, [r0, #4]
 800195a:	68a9      	ldr	r1, [r5, #8]
 800195c:	230a      	movs	r3, #10
 800195e:	47b0      	blx	r6
 8001960:	e7f3      	b.n	800194a <MC_RunMotorControlTasks+0x62>
 8001962:	bf00      	nop
 8001964:	200009d4 	.word	0x200009d4
 8001968:	200009da 	.word	0x200009da
 800196c:	200009d8 	.word	0x200009d8
 8001970:	200009d6 	.word	0x200009d6
 8001974:	20000450 	.word	0x20000450

08001978 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001978:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
   FOC_Clear(M1);
 800197a:	2000      	movs	r0, #0
 800197c:	f000 f8c2 	bl	8001b04 <FOC_Clear>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001980:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 8001984:	4802      	ldr	r0, [pc, #8]	@ (8001990 <TSK_HardwareFaultTask+0x18>)
 8001986:	2200      	movs	r2, #0
 8001988:	2180      	movs	r1, #128	@ 0x80
 800198a:	f7ff bcf5 	b.w	8001378 <MCI_FaultProcessing>
 800198e:	bf00      	nop
 8001990:	20000000 	.word	0x20000000

08001994 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8001994:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 8001996:	f7ff fcc5 	bl	8001324 <MC_GetSTMStateMotor1>
 800199a:	b918      	cbnz	r0, 80019a4 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 800199c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 80019a0:	f7ff bcb4 	b.w	800130c <MC_StartMotor1>
}
 80019a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 80019a8:	f7ff bcb6 	b.w	8001318 <MC_StopMotor1>

080019ac <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 80019ac:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019ae:	4a4d      	ldr	r2, [pc, #308]	@ (8001ae4 <mc_lock_pins+0x138>)
 80019b0:	494d      	ldr	r1, [pc, #308]	@ (8001ae8 <mc_lock_pins+0x13c>)
 80019b2:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80019b4:	2504      	movs	r5, #4
 80019b6:	b092      	sub	sp, #72	@ 0x48
 80019b8:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019ba:	61d1      	str	r1, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 80019bc:	69d3      	ldr	r3, [r2, #28]
 80019be:	9311      	str	r3, [sp, #68]	@ 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019c0:	484a      	ldr	r0, [pc, #296]	@ (8001aec <mc_lock_pins+0x140>)
  (void) temp;
 80019c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019c4:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80019c6:	2602      	movs	r6, #2
 80019c8:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019ca:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80019cc:	69d3      	ldr	r3, [r2, #28]
 80019ce:	9310      	str	r3, [sp, #64]	@ 0x40
  (void) temp;
 80019d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  WRITE_REG(GPIOx->LCKR, PinMask);
 80019d2:	f44f 4480 	mov.w	r4, #16384	@ 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019d6:	f44f 33a0 	mov.w	r3, #81920	@ 0x14000
 80019da:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80019dc:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019de:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80019e0:	69d4      	ldr	r4, [r2, #28]
 80019e2:	940f      	str	r4, [sp, #60]	@ 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
  (void) temp;
 80019e8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
  WRITE_REG(GPIOx->LCKR, PinMask);
 80019ea:	2701      	movs	r7, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019ec:	f04f 1401 	mov.w	r4, #65537	@ 0x10001
 80019f0:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80019f2:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019f4:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80019f6:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 80019fa:	f8cd c038 	str.w	ip, [sp, #56]	@ 0x38
  (void) temp;
 80019fe:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a02:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a04:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a06:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a08:	69d4      	ldr	r4, [r2, #28]
 8001a0a:	940d      	str	r4, [sp, #52]	@ 0x34
  (void) temp;
 8001a0c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a0e:	4c38      	ldr	r4, [pc, #224]	@ (8001af0 <mc_lock_pins+0x144>)
 8001a10:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a12:	2780      	movs	r7, #128	@ 0x80
 8001a14:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a16:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a18:	69dc      	ldr	r4, [r3, #28]
 8001a1a:	940c      	str	r4, [sp, #48]	@ 0x30
  (void) temp;
 8001a1c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a1e:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a20:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a22:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a24:	69d8      	ldr	r0, [r3, #28]
 8001a26:	900b      	str	r0, [sp, #44]	@ 0x2c
  (void) temp;
 8001a28:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a2a:	4832      	ldr	r0, [pc, #200]	@ (8001af4 <mc_lock_pins+0x148>)
 8001a2c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a2e:	2408      	movs	r4, #8
 8001a30:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a32:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a34:	69d8      	ldr	r0, [r3, #28]
 8001a36:	900a      	str	r0, [sp, #40]	@ 0x28
  (void) temp;
 8001a38:	980a      	ldr	r0, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a3a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a3c:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a3e:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a40:	69d9      	ldr	r1, [r3, #28]
 8001a42:	9109      	str	r1, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a44:	2040      	movs	r0, #64	@ 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a46:	492c      	ldr	r1, [pc, #176]	@ (8001af8 <mc_lock_pins+0x14c>)
  (void) temp;
 8001a48:	9c09      	ldr	r4, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a4a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a4c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a4e:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a50:	69d9      	ldr	r1, [r3, #28]
 8001a52:	9108      	str	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a54:	2020      	movs	r0, #32
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a56:	4929      	ldr	r1, [pc, #164]	@ (8001afc <mc_lock_pins+0x150>)
  (void) temp;
 8001a58:	9c08      	ldr	r4, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a5a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a5c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a5e:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a60:	69d8      	ldr	r0, [r3, #28]
 8001a62:	9007      	str	r0, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a64:	31e0      	adds	r1, #224	@ 0xe0
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a66:	f44f 7080 	mov.w	r0, #256	@ 0x100
  (void) temp;
 8001a6a:	9c07      	ldr	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a6c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a6e:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a70:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a72:	69d9      	ldr	r1, [r3, #28]
 8001a74:	9106      	str	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a76:	f44f 7000 	mov.w	r0, #512	@ 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a7a:	f44f 3181 	mov.w	r1, #66048	@ 0x10200
  (void) temp;
 8001a7e:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a80:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a82:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a84:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a86:	69d9      	ldr	r1, [r3, #28]
 8001a88:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a8a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a8e:	f44f 3182 	mov.w	r1, #66560	@ 0x10400
  (void) temp;
 8001a92:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a94:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a96:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a98:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a9a:	69d9      	ldr	r1, [r3, #28]
 8001a9c:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a9e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001aa2:	f44f 3188 	mov.w	r1, #69632	@ 0x11000
  (void) temp;
 8001aa6:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001aa8:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001aaa:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001aac:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	9303      	str	r3, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ab2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ab6:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
  (void) temp;
 8001aba:	9803      	ldr	r0, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001abc:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001abe:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ac0:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ac2:	69d2      	ldr	r2, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b00 <mc_lock_pins+0x154>)
  temp = READ_REG(GPIOx->LCKR);
 8001ac6:	9202      	str	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ac8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001acc:	f44f 3290 	mov.w	r2, #73728	@ 0x12000
  (void) temp;
 8001ad0:	9802      	ldr	r0, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ad2:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ad4:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ad6:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	9301      	str	r3, [sp, #4]
  (void) temp;
 8001adc:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 8001ade:	b012      	add	sp, #72	@ 0x48
 8001ae0:	bcf0      	pop	{r4, r5, r6, r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	48000400 	.word	0x48000400
 8001ae8:	00010004 	.word	0x00010004
 8001aec:	00010002 	.word	0x00010002
 8001af0:	00010080 	.word	0x00010080
 8001af4:	00010008 	.word	0x00010008
 8001af8:	00010040 	.word	0x00010040
 8001afc:	00010020 	.word	0x00010020
 8001b00:	48000800 	.word	0x48000800

08001b04 <FOC_Clear>:
  *         controller. It must be called before each motor restart.
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8001b04:	b538      	push	{r3, r4, r5, lr}
 8001b06:	2326      	movs	r3, #38	@ 0x26
 8001b08:	4916      	ldr	r1, [pc, #88]	@ (8001b64 <FOC_Clear+0x60>)
 8001b0a:	fb00 f303 	mul.w	r3, r0, r3

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 8001b0e:	2400      	movs	r4, #0
 8001b10:	50cc      	str	r4, [r1, r3]
{
 8001b12:	4605      	mov	r5, r0
 8001b14:	f103 0208 	add.w	r2, r3, #8
 8001b18:	1858      	adds	r0, r3, r1
 8001b1a:	3310      	adds	r3, #16
 8001b1c:	440a      	add	r2, r1
 8001b1e:	440b      	add	r3, r1
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001b20:	4911      	ldr	r1, [pc, #68]	@ (8001b68 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8001b22:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001b24:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001b28:	6054      	str	r4, [r2, #4]
 8001b2a:	6094      	str	r4, [r2, #8]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001b2c:	4621      	mov	r1, r4
  FOCVars[bMotor].Vqd = NULL_qd;
 8001b2e:	f8c3 4006 	str.w	r4, [r3, #6]
 8001b32:	f8c3 400a 	str.w	r4, [r3, #10]
 8001b36:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001b3a:	f006 fbe1 	bl	8008300 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b6c <FOC_Clear+0x68>)
 8001b40:	4621      	mov	r1, r4
 8001b42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001b46:	f006 fbdb 	bl	8008300 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8001b4a:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <FOC_Clear+0x6c>)
 8001b4c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001b50:	f007 fde4 	bl	800971c <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001b54:	4b07      	ldr	r3, [pc, #28]	@ (8001b74 <FOC_Clear+0x70>)
 8001b56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8001b5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001b5e:	f000 be21 	b.w	80027a4 <PWMC_SwitchOffPWM>
 8001b62:	bf00      	nop
 8001b64:	2000099c 	.word	0x2000099c
 8001b68:	20000030 	.word	0x20000030
 8001b6c:	2000002c 	.word	0x2000002c
 8001b70:	20000034 	.word	0x20000034
 8001b74:	200009c4 	.word	0x200009c4

08001b78 <FOC_Init>:
{
 8001b78:	b5f0      	push	{r4, r5, r6, r7, lr}
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001b7a:	4c27      	ldr	r4, [pc, #156]	@ (8001c18 <FOC_Init+0xa0>)
    PID_HandleInit(&PIDSpeedHandle_M1);
 8001b7c:	4e27      	ldr	r6, [pc, #156]	@ (8001c1c <FOC_Init+0xa4>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001b7e:	4828      	ldr	r0, [pc, #160]	@ (8001c20 <FOC_Init+0xa8>)
    STO_PLL_Init (&STO_PLL_M1);
 8001b80:	4f28      	ldr	r7, [pc, #160]	@ (8001c24 <FOC_Init+0xac>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 8001b82:	4d29      	ldr	r5, [pc, #164]	@ (8001c28 <FOC_Init+0xb0>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001b84:	6020      	str	r0, [r4, #0]
{
 8001b86:	b085      	sub	sp, #20
    R3_2_Init(&PWM_Handle_M1);
 8001b88:	f006 ff98 	bl	8008abc <R3_2_Init>
    startTimers();
 8001b8c:	f000 fc56 	bl	800243c <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 8001b90:	4630      	mov	r0, r6
 8001b92:	f006 fba1 	bl	80082d8 <PID_HandleInit>
    STO_PLL_Init (&STO_PLL_M1);
 8001b96:	4638      	mov	r0, r7
 8001b98:	f008 f84c 	bl	8009c34 <STO_PLL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 8001b9c:	6828      	ldr	r0, [r5, #0]
 8001b9e:	463a      	mov	r2, r7
 8001ba0:	4631      	mov	r1, r6
 8001ba2:	f007 fda3 	bl	80096ec <STC_Init>
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8001ba6:	6820      	ldr	r0, [r4, #0]
 8001ba8:	6829      	ldr	r1, [r5, #0]
 8001baa:	4a20      	ldr	r2, [pc, #128]	@ (8001c2c <FOC_Init+0xb4>)
 8001bac:	4b20      	ldr	r3, [pc, #128]	@ (8001c30 <FOC_Init+0xb8>)
 8001bae:	9000      	str	r0, [sp, #0]
 8001bb0:	4820      	ldr	r0, [pc, #128]	@ (8001c34 <FOC_Init+0xbc>)
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001bb2:	4c21      	ldr	r4, [pc, #132]	@ (8001c38 <FOC_Init+0xc0>)
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8001bb4:	f007 fc8c 	bl	80094d0 <RUC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 8001bb8:	4820      	ldr	r0, [pc, #128]	@ (8001c3c <FOC_Init+0xc4>)
 8001bba:	f006 fb8d 	bl	80082d8 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8001bbe:	4820      	ldr	r0, [pc, #128]	@ (8001c40 <FOC_Init+0xc8>)
 8001bc0:	f006 fb8a 	bl	80082d8 <PID_HandleInit>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c44 <FOC_Init+0xcc>)
 8001bc6:	4a20      	ldr	r2, [pc, #128]	@ (8001c48 <FOC_Init+0xd0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001bca:	4820      	ldr	r0, [pc, #128]	@ (8001c4c <FOC_Init+0xd4>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001bcc:	60da      	str	r2, [r3, #12]
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001bce:	4a20      	ldr	r2, [pc, #128]	@ (8001c50 <FOC_Init+0xd8>)
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001bd0:	609c      	str	r4, [r3, #8]
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001bd2:	6010      	str	r0, [r2, #0]
    REMNG_Init(pREMNG[M1]);
 8001bd4:	f007 fbea 	bl	80093ac <REMNG_Init>
    FOC_Clear(M1);
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f7ff ff93 	bl	8001b04 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001bde:	2301      	movs	r3, #1
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001be0:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001be2:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001be6:	f007 fe2b 	bl	8009840 <STC_GetDefaultIqdref>
 8001bea:	f3c0 420f 	ubfx	r2, r0, #16, #16
 8001bee:	4603      	mov	r3, r0
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001bf0:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001bf2:	8262      	strh	r2, [r4, #18]
 8001bf4:	8223      	strh	r3, [r4, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001bf6:	f007 fe23 	bl	8009840 <STC_GetDefaultIqdref>
 8001bfa:	f3c0 430f 	ubfx	r3, r0, #16, #16
    MCI_ExecSpeedRamp(&Mci[M1],
 8001bfe:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001c00:	82a3      	strh	r3, [r4, #20]
    MCI_ExecSpeedRamp(&Mci[M1],
 8001c02:	f007 fe19 	bl	8009838 <STC_GetMecSpeedRefUnitDefault>
 8001c06:	4601      	mov	r1, r0
 8001c08:	4812      	ldr	r0, [pc, #72]	@ (8001c54 <FOC_Init+0xdc>)
 8001c0a:	2200      	movs	r2, #0
}
 8001c0c:	b005      	add	sp, #20
 8001c0e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    MCI_ExecSpeedRamp(&Mci[M1],
 8001c12:	f7ff bb93 	b.w	800133c <MCI_ExecSpeedRamp>
 8001c16:	bf00      	nop
 8001c18:	200009c4 	.word	0x200009c4
 8001c1c:	20000338 	.word	0x20000338
 8001c20:	20000190 	.word	0x20000190
 8001c24:	20000068 	.word	0x20000068
 8001c28:	20000034 	.word	0x20000034
 8001c2c:	200003cc 	.word	0x200003cc
 8001c30:	20000054 	.word	0x20000054
 8001c34:	20000234 	.word	0x20000234
 8001c38:	2000099c 	.word	0x2000099c
 8001c3c:	2000030c 	.word	0x2000030c
 8001c40:	200002e0 	.word	0x200002e0
 8001c44:	20000028 	.word	0x20000028
 8001c48:	20000374 	.word	0x20000374
 8001c4c:	2000003c 	.word	0x2000003c
 8001c50:	20000998 	.word	0x20000998
 8001c54:	20000000 	.word	0x20000000

08001c58 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop

08001c5c <FOC_CalcCurrRef>:
  *         MTPA algorithm(s). It must be called with the periodicity specified
  *         in oTSC parameters.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c5e:	4606      	mov	r6, r0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c60:	b672      	cpsid	i

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference latching */
  /* to avoid MF task writing them while HF task reading them */
  __disable_irq();
  IqdTmp = FOCVars[bMotor].Iqdref;
 8001c62:	4d0d      	ldr	r5, [pc, #52]	@ (8001c98 <FOC_CalcCurrRef+0x3c>)
 8001c64:	2426      	movs	r4, #38	@ 0x26
 8001c66:	fb04 5400 	mla	r4, r4, r0, r5
 8001c6a:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
 8001c6e:	f9b4 7012 	ldrsh.w	r7, [r4, #18]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c72:	b662      	cpsie	i
  __enable_irq();

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 8001c74:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8001c78:	b13b      	cbz	r3, 8001c8a <FOC_CalcCurrRef+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001c7a:	b672      	cpsid	i
  }

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference restoring */
  __disable_irq();
  FOCVars[bMotor].Iqdref = IqdTmp;
 8001c7c:	2326      	movs	r3, #38	@ 0x26
 8001c7e:	fb03 5506 	mla	r5, r3, r6, r5
 8001c82:	8228      	strh	r0, [r5, #16]
 8001c84:	826f      	strh	r7, [r5, #18]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c86:	b662      	cpsie	i
  /* Exit critical section */
  __enable_irq();
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001c8a:	4b04      	ldr	r3, [pc, #16]	@ (8001c9c <FOC_CalcCurrRef+0x40>)
 8001c8c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8001c90:	f007 fd9c 	bl	80097cc <STC_CalcTorqueReference>
 8001c94:	83e0      	strh	r0, [r4, #30]
    IqdTmp.q = FOCVars[bMotor].hTeref;
 8001c96:	e7f0      	b.n	8001c7a <FOC_CalcCurrRef+0x1e>
 8001c98:	2000099c 	.word	0x2000099c
 8001c9c:	20000034 	.word	0x20000034

08001ca0 <TSK_MediumFrequencyTaskM1>:
{
 8001ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ca2:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8001ca4:	2300      	movs	r3, #0
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8001ca6:	4669      	mov	r1, sp
 8001ca8:	48b6      	ldr	r0, [pc, #728]	@ (8001f84 <TSK_MediumFrequencyTaskM1+0x2e4>)
  int16_t wAux = 0;
 8001caa:	f8ad 3000 	strh.w	r3, [sp]
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8001cae:	f007 fecf 	bl	8009a50 <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 8001cb2:	4bb5      	ldr	r3, [pc, #724]	@ (8001f88 <TSK_MediumFrequencyTaskM1+0x2e8>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001cb4:	4cb5      	ldr	r4, [pc, #724]	@ (8001f8c <TSK_MediumFrequencyTaskM1+0x2ec>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8001cb6:	4605      	mov	r5, r0
  PQD_CalcElMotorPower(pMPM[M1]);
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	f006 fb95 	bl	80083e8 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	f7ff fba6 	bl	8001410 <MCI_GetCurrentFaults>
 8001cc4:	b118      	cbz	r0, 8001cce <TSK_MediumFrequencyTaskM1+0x2e>
    Mci[M1].State = FAULT_NOW;
 8001cc6:	230a      	movs	r3, #10
 8001cc8:	77e3      	strb	r3, [r4, #31]
}
 8001cca:	b003      	add	sp, #12
 8001ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001cce:	4620      	mov	r0, r4
 8001cd0:	f7ff fb9c 	bl	800140c <MCI_GetOccurredFaults>
 8001cd4:	bb70      	cbnz	r0, 8001d34 <TSK_MediumFrequencyTaskM1+0x94>
      switch (Mci[M1].State)
 8001cd6:	7fe3      	ldrb	r3, [r4, #31]
 8001cd8:	2b13      	cmp	r3, #19
 8001cda:	d8f6      	bhi.n	8001cca <TSK_MediumFrequencyTaskM1+0x2a>
 8001cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8001ce4 <TSK_MediumFrequencyTaskM1+0x44>)
 8001cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce2:	bf00      	nop
 8001ce4:	08001eb3 	.word	0x08001eb3
 8001ce8:	08001ccb 	.word	0x08001ccb
 8001cec:	08001ccb 	.word	0x08001ccb
 8001cf0:	08001ccb 	.word	0x08001ccb
 8001cf4:	08001e23 	.word	0x08001e23
 8001cf8:	08001ccb 	.word	0x08001ccb
 8001cfc:	08001dff 	.word	0x08001dff
 8001d00:	08001ccb 	.word	0x08001ccb
 8001d04:	08001ddf 	.word	0x08001ddf
 8001d08:	08001ccb 	.word	0x08001ccb
 8001d0c:	08001d35 	.word	0x08001d35
 8001d10:	08001dd1 	.word	0x08001dd1
 8001d14:	08001ccb 	.word	0x08001ccb
 8001d18:	08001ccb 	.word	0x08001ccb
 8001d1c:	08001ccb 	.word	0x08001ccb
 8001d20:	08001ccb 	.word	0x08001ccb
 8001d24:	08001d8f 	.word	0x08001d8f
 8001d28:	08001d5d 	.word	0x08001d5d
 8001d2c:	08001ccb 	.word	0x08001ccb
 8001d30:	08001d3d 	.word	0x08001d3d
      Mci[M1].State = FAULT_OVER;
 8001d34:	230b      	movs	r3, #11
 8001d36:	77e3      	strb	r3, [r4, #31]
}
 8001d38:	b003      	add	sp, #12
 8001d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001d3c:	7fa3      	ldrb	r3, [r4, #30]
 8001d3e:	2b05      	cmp	r3, #5
 8001d40:	f000 80cf 	beq.w	8001ee2 <TSK_MediumFrequencyTaskM1+0x242>
            if (! RUC_Exec(&RevUpControlM1))
 8001d44:	4892      	ldr	r0, [pc, #584]	@ (8001f90 <TSK_MediumFrequencyTaskM1+0x2f0>)
 8001d46:	f007 fc4d 	bl	80095e4 <RUC_Exec>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	2800      	cmp	r0, #0
 8001d4e:	f040 80e0 	bne.w	8001f12 <TSK_MediumFrequencyTaskM1+0x272>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8001d52:	488e      	ldr	r0, [pc, #568]	@ (8001f8c <TSK_MediumFrequencyTaskM1+0x2ec>)
 8001d54:	2110      	movs	r1, #16
 8001d56:	f7ff fb0f 	bl	8001378 <MCI_FaultProcessing>
 8001d5a:	e7b6      	b.n	8001cca <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001d5c:	7fa3      	ldrb	r3, [r4, #30]
    R3_2_SwitchOffPWM(pwmcHandle[motor]);
 8001d5e:	4d8d      	ldr	r5, [pc, #564]	@ (8001f94 <TSK_MediumFrequencyTaskM1+0x2f4>)
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001d60:	2b05      	cmp	r3, #5
    R3_2_SwitchOffPWM(pwmcHandle[motor]);
 8001d62:	6828      	ldr	r0, [r5, #0]
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001d64:	f000 80bf 	beq.w	8001ee6 <TSK_MediumFrequencyTaskM1+0x246>
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8001d68:	2101      	movs	r1, #1
 8001d6a:	f000 fd1f 	bl	80027ac <PWMC_CurrentReadingCalibr>
 8001d6e:	2800      	cmp	r0, #0
 8001d70:	d0ab      	beq.n	8001cca <TSK_MediumFrequencyTaskM1+0x2a>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8001d72:	7fa3      	ldrb	r3, [r4, #30]
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	f000 80ff 	beq.w	8001f78 <TSK_MediumFrequencyTaskM1+0x2d8>
                R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001d7a:	6828      	ldr	r0, [r5, #0]
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	f006 fdff 	bl	8008980 <R3_2_TurnOnLowSides>
                TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 8001d82:	2014      	movs	r0, #20
 8001d84:	f7ff fd16 	bl	80017b4 <TSK_SetChargeBootCapDelayM1>
                Mci[M1].State = CHARGE_BOOT_CAP;
 8001d88:	2310      	movs	r3, #16
 8001d8a:	77e3      	strb	r3, [r4, #31]
 8001d8c:	e79d      	b.n	8001cca <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001d8e:	7fa3      	ldrb	r3, [r4, #30]
 8001d90:	2b05      	cmp	r3, #5
 8001d92:	f000 80a6 	beq.w	8001ee2 <TSK_MediumFrequencyTaskM1+0x242>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8001d96:	f7ff fd13 	bl	80017c0 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001d9a:	2800      	cmp	r0, #0
 8001d9c:	d095      	beq.n	8001cca <TSK_MediumFrequencyTaskM1+0x2a>
              R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8001d9e:	4d7d      	ldr	r5, [pc, #500]	@ (8001f94 <TSK_MediumFrequencyTaskM1+0x2f4>)
 8001da0:	6828      	ldr	r0, [r5, #0]
 8001da2:	f006 fd2f 	bl	8008804 <R3_2_SwitchOffPWM>
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001da6:	4a7c      	ldr	r2, [pc, #496]	@ (8001f98 <TSK_MediumFrequencyTaskM1+0x2f8>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 8001da8:	4b7c      	ldr	r3, [pc, #496]	@ (8001f9c <TSK_MediumFrequencyTaskM1+0x2fc>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001daa:	497d      	ldr	r1, [pc, #500]	@ (8001fa0 <TSK_MediumFrequencyTaskM1+0x300>)
 8001dac:	6810      	ldr	r0, [r2, #0]
              FOCVars[M1].bDriveInput = EXTERNAL;
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001db4:	f007 fcb0 	bl	8009718 <STC_SetSpeedSensor>
              STO_PLL_Clear(&STO_PLL_M1);
 8001db8:	4872      	ldr	r0, [pc, #456]	@ (8001f84 <TSK_MediumFrequencyTaskM1+0x2e4>)
 8001dba:	f007 ff15 	bl	8009be8 <STO_PLL_Clear>
              FOC_Clear( M1 );
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	f7ff fea0 	bl	8001b04 <FOC_Clear>
                Mci[M1].State = START;
 8001dc4:	2304      	movs	r3, #4
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001dc6:	6828      	ldr	r0, [r5, #0]
                Mci[M1].State = START;
 8001dc8:	77e3      	strb	r3, [r4, #31]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001dca:	f000 fced 	bl	80027a8 <PWMC_SwitchOnPWM>
 8001dce:	e77c      	b.n	8001cca <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8001dd0:	7fa3      	ldrb	r3, [r4, #30]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	f47f af79 	bne.w	8001cca <TSK_MediumFrequencyTaskM1+0x2a>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	83e3      	strh	r3, [r4, #30]
 8001ddc:	e775      	b.n	8001cca <TSK_MediumFrequencyTaskM1+0x2a>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 8001dde:	f7ff fcff 	bl	80017e0 <TSK_StopPermanencyTimeHasElapsedM1>
 8001de2:	2800      	cmp	r0, #0
 8001de4:	f43f af71 	beq.w	8001cca <TSK_MediumFrequencyTaskM1+0x2a>
            STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);    /* Sensor-less */
 8001de8:	4b6b      	ldr	r3, [pc, #428]	@ (8001f98 <TSK_MediumFrequencyTaskM1+0x2f8>)
 8001dea:	496d      	ldr	r1, [pc, #436]	@ (8001fa0 <TSK_MediumFrequencyTaskM1+0x300>)
 8001dec:	6818      	ldr	r0, [r3, #0]
 8001dee:	f007 fc93 	bl	8009718 <STC_SetSpeedSensor>
            VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 8001df2:	486b      	ldr	r0, [pc, #428]	@ (8001fa0 <TSK_MediumFrequencyTaskM1+0x300>)
 8001df4:	f008 f802 	bl	8009dfc <VSS_Clear>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	83e3      	strh	r3, [r4, #30]
 8001dfc:	e765      	b.n	8001cca <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001dfe:	7fa3      	ldrb	r3, [r4, #30]
 8001e00:	2b05      	cmp	r3, #5
 8001e02:	d06e      	beq.n	8001ee2 <TSK_MediumFrequencyTaskM1+0x242>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8001e04:	4861      	ldr	r0, [pc, #388]	@ (8001f8c <TSK_MediumFrequencyTaskM1+0x2ec>)
 8001e06:	f7ff fac3 	bl	8001390 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f7ff ff26 	bl	8001c5c <FOC_CalcCurrRef>
              if(!IsSpeedReliable)
 8001e10:	2d00      	cmp	r5, #0
 8001e12:	f47f af5a 	bne.w	8001cca <TSK_MediumFrequencyTaskM1+0x2a>
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 8001e16:	485d      	ldr	r0, [pc, #372]	@ (8001f8c <TSK_MediumFrequencyTaskM1+0x2ec>)
 8001e18:	462a      	mov	r2, r5
 8001e1a:	2120      	movs	r1, #32
 8001e1c:	f7ff faac 	bl	8001378 <MCI_FaultProcessing>
 8001e20:	e753      	b.n	8001cca <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001e22:	7fa3      	ldrb	r3, [r4, #30]
 8001e24:	2b05      	cmp	r3, #5
 8001e26:	d05c      	beq.n	8001ee2 <TSK_MediumFrequencyTaskM1+0x242>
            if(! RUC_Exec(&RevUpControlM1))
 8001e28:	4859      	ldr	r0, [pc, #356]	@ (8001f90 <TSK_MediumFrequencyTaskM1+0x2f0>)
 8001e2a:	f007 fbdb 	bl	80095e4 <RUC_Exec>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	2800      	cmp	r0, #0
 8001e32:	d164      	bne.n	8001efe <TSK_MediumFrequencyTaskM1+0x25e>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8001e34:	4855      	ldr	r0, [pc, #340]	@ (8001f8c <TSK_MediumFrequencyTaskM1+0x2ec>)
 8001e36:	2110      	movs	r1, #16
 8001e38:	f7ff fa9e 	bl	8001378 <MCI_FaultProcessing>
            (void)VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001e3c:	4858      	ldr	r0, [pc, #352]	@ (8001fa0 <TSK_MediumFrequencyTaskM1+0x300>)
 8001e3e:	f10d 0102 	add.w	r1, sp, #2
 8001e42:	f008 f83f 	bl	8009ec4 <VSS_CalcAvrgMecSpeedUnit>
            if (true == RUC_FirstAccelerationStageReached(&RevUpControlM1))
 8001e46:	4852      	ldr	r0, [pc, #328]	@ (8001f90 <TSK_MediumFrequencyTaskM1+0x2f0>)
 8001e48:	f007 fc02 	bl	8009650 <RUC_FirstAccelerationStageReached>
 8001e4c:	2800      	cmp	r0, #0
 8001e4e:	f43f af3c 	beq.w	8001cca <TSK_MediumFrequencyTaskM1+0x2a>
              ObserverConverged = STO_PLL_IsObserverConverged(&STO_PLL_M1, &hForcedMecSpeedUnit);
 8001e52:	4e4c      	ldr	r6, [pc, #304]	@ (8001f84 <TSK_MediumFrequencyTaskM1+0x2e4>)
 8001e54:	f10d 0102 	add.w	r1, sp, #2
 8001e58:	4630      	mov	r0, r6
 8001e5a:	f007 ff25 	bl	8009ca8 <STO_PLL_IsObserverConverged>
 8001e5e:	4605      	mov	r5, r0
              STO_SetDirection(&STO_PLL_M1, (int8_t)MCI_GetImposedMotorDirection(&Mci[M1]));
 8001e60:	484a      	ldr	r0, [pc, #296]	@ (8001f8c <TSK_MediumFrequencyTaskM1+0x2ec>)
 8001e62:	f7ff fb25 	bl	80014b0 <MCI_GetImposedMotorDirection>
 8001e66:	b241      	sxtb	r1, r0
 8001e68:	4630      	mov	r0, r6
 8001e6a:	f007 ffc3 	bl	8009df4 <STO_SetDirection>
              (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 8001e6e:	484c      	ldr	r0, [pc, #304]	@ (8001fa0 <TSK_MediumFrequencyTaskM1+0x300>)
 8001e70:	4629      	mov	r1, r5
 8001e72:	f008 f8b5 	bl	8009fe0 <VSS_SetStartTransition>
            if (ObserverConverged)
 8001e76:	2d00      	cmp	r5, #0
 8001e78:	f43f af27 	beq.w	8001cca <TSK_MediumFrequencyTaskM1+0x2a>
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001e7c:	4f47      	ldr	r7, [pc, #284]	@ (8001f9c <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001e7e:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 8001e82:	6878      	ldr	r0, [r7, #4]
              REMNG_Init(pREMNG[M1]);
 8001e84:	4d47      	ldr	r5, [pc, #284]	@ (8001fa4 <TSK_MediumFrequencyTaskM1+0x304>)
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001e86:	f7ff fbef 	bl	8001668 <MCM_Park>
 8001e8a:	4603      	mov	r3, r0
              REMNG_Init(pREMNG[M1]);
 8001e8c:	6828      	ldr	r0, [r5, #0]
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001e8e:	9301      	str	r3, [sp, #4]
              REMNG_Init(pREMNG[M1]);
 8001e90:	f007 fa8c 	bl	80093ac <REMNG_Init>
              (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 8001e94:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8001e98:	6828      	ldr	r0, [r5, #0]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f007 fad2 	bl	8009444 <REMNG_ExecRamp>
              (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 8001ea0:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8001ea4:	6828      	ldr	r0, [r5, #0]
 8001ea6:	2219      	movs	r2, #25
 8001ea8:	f007 facc 	bl	8009444 <REMNG_ExecRamp>
              Mci[M1].State = SWITCH_OVER;
 8001eac:	2313      	movs	r3, #19
 8001eae:	77e3      	strb	r3, [r4, #31]
 8001eb0:	e70b      	b.n	8001cca <TSK_MediumFrequencyTaskM1+0x2a>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8001eb2:	7fa5      	ldrb	r5, [r4, #30]
 8001eb4:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
 8001eb8:	2d01      	cmp	r5, #1
 8001eba:	f47f af06 	bne.w	8001cca <TSK_MediumFrequencyTaskM1+0x2a>
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8001ebe:	4833      	ldr	r0, [pc, #204]	@ (8001f8c <TSK_MediumFrequencyTaskM1+0x2ec>)
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8001ec0:	4e34      	ldr	r6, [pc, #208]	@ (8001f94 <TSK_MediumFrequencyTaskM1+0x2f4>)
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8001ec2:	f7ff faf5 	bl	80014b0 <MCI_GetImposedMotorDirection>
 8001ec6:	4601      	mov	r1, r0
 8001ec8:	4831      	ldr	r0, [pc, #196]	@ (8001f90 <TSK_MediumFrequencyTaskM1+0x2f0>)
 8001eca:	f007 fb3f 	bl	800954c <RUC_Clear>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8001ece:	6830      	ldr	r0, [r6, #0]
 8001ed0:	f890 107f 	ldrb.w	r1, [r0, #127]	@ 0x7f
 8001ed4:	2900      	cmp	r1, #0
 8001ed6:	d148      	bne.n	8001f6a <TSK_MediumFrequencyTaskM1+0x2ca>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8001ed8:	f000 fc68 	bl	80027ac <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 8001edc:	2311      	movs	r3, #17
 8001ede:	77e3      	strb	r3, [r4, #31]
 8001ee0:	e6f3      	b.n	8001cca <TSK_MediumFrequencyTaskM1+0x2a>
    R3_2_SwitchOffPWM(pwmcHandle[motor]);
 8001ee2:	4b2c      	ldr	r3, [pc, #176]	@ (8001f94 <TSK_MediumFrequencyTaskM1+0x2f4>)
 8001ee4:	6818      	ldr	r0, [r3, #0]
 8001ee6:	f006 fc8d 	bl	8008804 <R3_2_SwitchOffPWM>
  FOC_Clear(motor);
 8001eea:	2000      	movs	r0, #0
 8001eec:	f7ff fe0a 	bl	8001b04 <FOC_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8001ef0:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001ef4:	f7ff fc6e 	bl	80017d4 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8001ef8:	2308      	movs	r3, #8
 8001efa:	77e3      	strb	r3, [r4, #31]
}
 8001efc:	e6e5      	b.n	8001cca <TSK_MediumFrequencyTaskM1+0x2a>
              IqdRef.q = STC_CalcTorqueReference(pSTC[M1]);
 8001efe:	4b26      	ldr	r3, [pc, #152]	@ (8001f98 <TSK_MediumFrequencyTaskM1+0x2f8>)
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	f007 fc63 	bl	80097cc <STC_CalcTorqueReference>
              IqdRef.d = FOCVars[M1].UserIdref;
 8001f06:	4b25      	ldr	r3, [pc, #148]	@ (8001f9c <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001f08:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
              FOCVars[M1].Iqdref = IqdRef;
 8001f0c:	8218      	strh	r0, [r3, #16]
 8001f0e:	825a      	strh	r2, [r3, #18]
 8001f10:	e794      	b.n	8001e3c <TSK_MediumFrequencyTaskM1+0x19c>
              LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001f12:	4823      	ldr	r0, [pc, #140]	@ (8001fa0 <TSK_MediumFrequencyTaskM1+0x300>)
 8001f14:	a901      	add	r1, sp, #4
 8001f16:	f007 ffd5 	bl	8009ec4 <VSS_CalcAvrgMecSpeedUnit>
 8001f1a:	4605      	mov	r5, r0
              tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 8001f1c:	4820      	ldr	r0, [pc, #128]	@ (8001fa0 <TSK_MediumFrequencyTaskM1+0x300>)
 8001f1e:	f008 f86d 	bl	8009ffc <VSS_TransitionEnded>
              LoopClosed = LoopClosed || tempBool;
 8001f22:	b915      	cbnz	r5, 8001f2a <TSK_MediumFrequencyTaskM1+0x28a>
 8001f24:	2800      	cmp	r0, #0
 8001f26:	f43f aed0 	beq.w	8001cca <TSK_MediumFrequencyTaskM1+0x2a>
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f9c <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001f2c:	481e      	ldr	r0, [pc, #120]	@ (8001fa8 <TSK_MediumFrequencyTaskM1+0x308>)
 8001f2e:	f9b3 6010 	ldrsh.w	r6, [r3, #16]
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /* Observer has converged */
 8001f32:	4d19      	ldr	r5, [pc, #100]	@ (8001f98 <TSK_MediumFrequencyTaskM1+0x2f8>)
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8001f34:	f006 f9ee 	bl	8008314 <PID_GetKIDivisor>
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 8001f38:	b201      	sxth	r1, r0
 8001f3a:	fb06 f101 	mul.w	r1, r6, r1
 8001f3e:	481a      	ldr	r0, [pc, #104]	@ (8001fa8 <TSK_MediumFrequencyTaskM1+0x308>)
 8001f40:	f006 f9de 	bl	8008300 <PID_SetIntegralTerm>
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /* Observer has converged */
 8001f44:	490f      	ldr	r1, [pc, #60]	@ (8001f84 <TSK_MediumFrequencyTaskM1+0x2e4>)
 8001f46:	6828      	ldr	r0, [r5, #0]
 8001f48:	f007 fbe6 	bl	8009718 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f7ff fe83 	bl	8001c58 <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef(M1);
 8001f52:	2000      	movs	r0, #0
 8001f54:	f7ff fe82 	bl	8001c5c <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8001f58:	6828      	ldr	r0, [r5, #0]
 8001f5a:	f007 fc7f 	bl	800985c <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8001f5e:	480b      	ldr	r0, [pc, #44]	@ (8001f8c <TSK_MediumFrequencyTaskM1+0x2ec>)
 8001f60:	f7ff fa16 	bl	8001390 <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 8001f64:	2306      	movs	r3, #6
 8001f66:	77e3      	strb	r3, [r4, #31]
 8001f68:	e6af      	b.n	8001cca <TSK_MediumFrequencyTaskM1+0x2a>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001f6a:	4629      	mov	r1, r5
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8001f6c:	f8a0 5060 	strh.w	r5, [r0, #96]	@ 0x60
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001f70:	f000 fc1c 	bl	80027ac <PWMC_CurrentReadingCalibr>
              R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001f74:	6830      	ldr	r0, [r6, #0]
 8001f76:	e701      	b.n	8001d7c <TSK_MediumFrequencyTaskM1+0xdc>
                FOC_Clear(M1);
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f7ff fdc3 	bl	8001b04 <FOC_Clear>
                Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	83e3      	strh	r3, [r4, #30]
 8001f82:	e6a2      	b.n	8001cca <TSK_MediumFrequencyTaskM1+0x2a>
 8001f84:	20000068 	.word	0x20000068
 8001f88:	20000028 	.word	0x20000028
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	20000234 	.word	0x20000234
 8001f94:	200009c4 	.word	0x200009c4
 8001f98:	20000034 	.word	0x20000034
 8001f9c:	2000099c 	.word	0x2000099c
 8001fa0:	200003cc 	.word	0x200003cc
 8001fa4:	20000998 	.word	0x20000998
 8001fa8:	20000338 	.word	0x20000338

08001fac <FOC_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t FOC_HighFrequencyTask(uint8_t bMotorNbr)
{
 8001fac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* USER CODE END HighFrequencyTask 0 */

  Observer_Inputs_t STO_Inputs; /* Only if sensorless main */

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
  if (SWITCH_OVER == Mci[M1].State)
 8001fb0:	4f4c      	ldr	r7, [pc, #304]	@ (80020e4 <FOC_HighFrequencyTask+0x138>)
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 8001fb2:	4c4d      	ldr	r4, [pc, #308]	@ (80020e8 <FOC_HighFrequencyTask+0x13c>)
  if (SWITCH_OVER == Mci[M1].State)
 8001fb4:	7ffb      	ldrb	r3, [r7, #31]
{
 8001fb6:	b089      	sub	sp, #36	@ 0x24
 8001fb8:	4605      	mov	r5, r0
  if (SWITCH_OVER == Mci[M1].State)
 8001fba:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 8001fbc:	f8d4 001a 	ldr.w	r0, [r4, #26]
 8001fc0:	9005      	str	r0, [sp, #20]
  if (SWITCH_OVER == Mci[M1].State)
 8001fc2:	f000 8083 	beq.w	80020cc <FOC_HighFrequencyTask+0x120>
  ab_t Iab;
  alphabeta_t Ialphabeta, Valphabeta;
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001fc6:	4b49      	ldr	r3, [pc, #292]	@ (80020ec <FOC_HighFrequencyTask+0x140>)
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001fc8:	f8df 8144 	ldr.w	r8, [pc, #324]	@ 8002110 <FOC_HighFrequencyTask+0x164>
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f8d8 0000 	ldr.w	r0, [r8]
static inline int16_t SPD_GetElAngle(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
 8001fd2:	695b      	ldr	r3, [r3, #20]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8001fd4:	a902      	add	r1, sp, #8
 8001fd6:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 8001fda:	6803      	ldr	r3, [r0, #0]
 8001fdc:	4798      	blx	r3
  RCM_ReadOngoingConv();
 8001fde:	f001 fefd 	bl	8003ddc <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 8001fe2:	f001 feb7 	bl	8003d54 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8001fe6:	9802      	ldr	r0, [sp, #8]
 8001fe8:	f7ff fafe 	bl	80015e8 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001fec:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8001fee:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001ff0:	f7ff fb3a 	bl	8001668 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001ff4:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001ff8:	9000      	str	r0, [sp, #0]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001ffa:	b201      	sxth	r1, r0
 8001ffc:	1a59      	subs	r1, r3, r1
 8001ffe:	4b3c      	ldr	r3, [pc, #240]	@ (80020f0 <FOC_HighFrequencyTask+0x144>)
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	f006 f9b1 	bl	8008368 <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002006:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 800200a:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 800200e:	1ac9      	subs	r1, r1, r3
 8002010:	4b38      	ldr	r3, [pc, #224]	@ (80020f4 <FOC_HighFrequencyTask+0x148>)
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002012:	4681      	mov	r9, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	f006 f9a7 	bl	8008368 <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 800201a:	f8ad 9004 	strh.w	r9, [sp, #4]
 800201e:	f8ad 0006 	strh.w	r0, [sp, #6]
 8002022:	9901      	ldr	r1, [sp, #4]
 8002024:	4834      	ldr	r0, [pc, #208]	@ (80020f8 <FOC_HighFrequencyTask+0x14c>)
 8002026:	f005 ff6f 	bl	8007f08 <Circle_Limitation>
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 800202a:	4631      	mov	r1, r6
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 800202c:	4681      	mov	r9, r0
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 800202e:	f7ff fb5d 	bl	80016ec <MCM_Rev_Park>
 8002032:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002034:	f8d8 0000 	ldr.w	r0, [r8]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002038:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800203a:	f000 fa6b 	bl	8002514 <PWMC_SetPhaseVoltage>
 800203e:	4601      	mov	r1, r0

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8002040:	9802      	ldr	r0, [sp, #8]
 8002042:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8002044:	9803      	ldr	r0, [sp, #12]
 8002046:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8002048:	9800      	ldr	r0, [sp, #0]
 800204a:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_DURATION)
 800204c:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 800204e:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Vqd = Vqd;
 8002050:	f8c4 9016 	str.w	r9, [r4, #22]
  FOCVars[M1].hElAngle = hElAngle;
 8002054:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 8002056:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_DURATION)
 800205a:	d02f      	beq.n	80020bc <FOC_HighFrequencyTask+0x110>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 800205c:	4827      	ldr	r0, [pc, #156]	@ (80020fc <FOC_HighFrequencyTask+0x150>)
    (void)STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 800205e:	4e28      	ldr	r6, [pc, #160]	@ (8002100 <FOC_HighFrequencyTask+0x154>)
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8002060:	f007 faf6 	bl	8009650 <RUC_FirstAccelerationStageReached>
  {
    temp_avBusVoltage_d = pHandle->AvBusVoltage_d;
  }
  return (temp_avBusVoltage_d);
#else
  return (pHandle->AvBusVoltage_d);
 8002064:	4a27      	ldr	r2, [pc, #156]	@ (8002104 <FOC_HighFrequencyTask+0x158>)
 8002066:	4603      	mov	r3, r0
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /* Only if sensorless */
 8002068:	6860      	ldr	r0, [r4, #4]
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 800206a:	88d2      	ldrh	r2, [r2, #6]
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /* Only if sensorless */
 800206c:	9006      	str	r0, [sp, #24]
    (void)STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 800206e:	a905      	add	r1, sp, #20
 8002070:	4630      	mov	r0, r6
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8002072:	461c      	mov	r4, r3
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 8002074:	f8ad 201c 	strh.w	r2, [sp, #28]
    (void)STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8002078:	f007 fbf8 	bl	800986c <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp(&STO_PLL_M1); /* Only in case of Sensor-less */
 800207c:	4630      	mov	r0, r6
 800207e:	f007 fd87 	bl	8009b90 <STO_PLL_CalcAvrgElSpeedDpp>
    if (false == IsAccelerationStageReached)
 8002082:	b144      	cbz	r4, 8002096 <FOC_HighFrequencyTask+0xea>
    if((START == Mci[M1].State) || (SWITCH_OVER == Mci[M1].State))
 8002084:	7ffb      	ldrb	r3, [r7, #31]
 8002086:	2b04      	cmp	r3, #4
 8002088:	d00d      	beq.n	80020a6 <FOC_HighFrequencyTask+0xfa>
 800208a:	2b13      	cmp	r3, #19
 800208c:	d00b      	beq.n	80020a6 <FOC_HighFrequencyTask+0xfa>
}
 800208e:	4628      	mov	r0, r5
 8002090:	b009      	add	sp, #36	@ 0x24
 8002092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    /* Nothing to do */
  }
  else
  {
#endif
    PID_SetIntegralTerm(&pHandle->PIRegulator, (int32_t)0);
 8002096:	4621      	mov	r1, r4
 8002098:	f106 0034 	add.w	r0, r6, #52	@ 0x34
 800209c:	f006 f930 	bl	8008300 <PID_SetIntegralTerm>
    if((START == Mci[M1].State) || (SWITCH_OVER == Mci[M1].State))
 80020a0:	7ffb      	ldrb	r3, [r7, #31]
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d1f1      	bne.n	800208a <FOC_HighFrequencyTask+0xde>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 80020a6:	88b3      	ldrh	r3, [r6, #4]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 80020a8:	4817      	ldr	r0, [pc, #92]	@ (8002108 <FOC_HighFrequencyTask+0x15c>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 80020aa:	f8ad 3010 	strh.w	r3, [sp, #16]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 80020ae:	a904      	add	r1, sp, #16
 80020b0:	f007 feb6 	bl	8009e20 <VSS_CalcElAngle>
}
 80020b4:	4628      	mov	r0, r5
 80020b6:	b009      	add	sp, #36	@ 0x24
 80020b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 80020bc:	4809      	ldr	r0, [pc, #36]	@ (80020e4 <FOC_HighFrequencyTask+0x138>)
 80020be:	2200      	movs	r2, #0
 80020c0:	f7ff f95a 	bl	8001378 <MCI_FaultProcessing>
}
 80020c4:	4628      	mov	r0, r5
 80020c6:	b009      	add	sp, #36	@ 0x24
 80020c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!REMNG_RampCompleted(pREMNG[M1]))
 80020cc:	4e0f      	ldr	r6, [pc, #60]	@ (800210c <FOC_HighFrequencyTask+0x160>)
 80020ce:	6830      	ldr	r0, [r6, #0]
 80020d0:	f007 f996 	bl	8009400 <REMNG_RampCompleted>
 80020d4:	2800      	cmp	r0, #0
 80020d6:	f47f af76 	bne.w	8001fc6 <FOC_HighFrequencyTask+0x1a>
      FOCVars[M1].Iqdref.q = (int16_t)REMNG_Calc(pREMNG[M1]);
 80020da:	6830      	ldr	r0, [r6, #0]
 80020dc:	f007 f96e 	bl	80093bc <REMNG_Calc>
 80020e0:	8220      	strh	r0, [r4, #16]
 80020e2:	e770      	b.n	8001fc6 <FOC_HighFrequencyTask+0x1a>
 80020e4:	20000000 	.word	0x20000000
 80020e8:	2000099c 	.word	0x2000099c
 80020ec:	20000034 	.word	0x20000034
 80020f0:	20000030 	.word	0x20000030
 80020f4:	2000002c 	.word	0x2000002c
 80020f8:	20000038 	.word	0x20000038
 80020fc:	20000234 	.word	0x20000234
 8002100:	20000068 	.word	0x20000068
 8002104:	20000374 	.word	0x20000374
 8002108:	200003cc 	.word	0x200003cc
 800210c:	20000998 	.word	0x20000998
 8002110:	200009c4 	.word	0x200009c4

08002114 <RI_SetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8002114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    int16_t rxLength = pHandle->rxLength;
 8002118:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
    uint8_t accessResult;

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 800211c:	4b31      	ldr	r3, [pc, #196]	@ (80021e4 <RI_SetRegCommandParser+0xd0>)
{
 800211e:	b089      	sub	sp, #36	@ 0x24
    uint16_t size = 0U;
 8002120:	f04f 0900 	mov.w	r9, #0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002124:	9306      	str	r3, [sp, #24]
    uint8_t number_of_item =0;
    pHandle->txLength = 0;

    while (rxLength > 0)
 8002126:	454c      	cmp	r4, r9
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002128:	4b2f      	ldr	r3, [pc, #188]	@ (80021e8 <RI_SetRegCommandParser+0xd4>)
    uint16_t size = 0U;
 800212a:	f8ad 9016 	strh.w	r9, [sp, #22]
    uint8_t * txData = pHandle->txBuffer;
 800212e:	e9d0 c601 	ldrd	ip, r6, [r0, #4]
{
 8002132:	4607      	mov	r7, r0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002134:	9307      	str	r3, [sp, #28]
    pHandle->txLength = 0;
 8002136:	f8a0 900e 	strh.w	r9, [r0, #14]
    while (rxLength > 0)
 800213a:	dd47      	ble.n	80021cc <RI_SetRegCommandParser+0xb8>
 800213c:	eb06 0801 	add.w	r8, r6, r1
  uint8_t retVal = MCP_CMD_OK;
 8002140:	f8cd 900c 	str.w	r9, [sp, #12]
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
        /* Prepare next data*/
        rxLength = (int16_t) (rxLength - size);
        rxData = rxData+size;
        /* If there is only one CMD in the buffer, we do not store the result */
        if ((1U == number_of_item) && (0 == rxLength))
 8002144:	f1c6 0a01 	rsb	sl, r6, #1
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8002148:	f10c 0502 	add.w	r5, ip, #2
      regID = *dataElementID & REG_MASK;
 800214c:	f8bc c000 	ldrh.w	ip, [ip]
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8002150:	fa5f f18c 	uxtb.w	r1, ip
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002154:	3c02      	subs	r4, #2
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8002156:	f001 0b07 	and.w	fp, r1, #7
 800215a:	f10d 0920 	add.w	r9, sp, #32
      if (motorID > NBR_OF_MOTORS)
 800215e:	f01c 0f06 	tst.w	ip, #6
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8002162:	fa0f fe84 	sxth.w	lr, r4
 8002166:	f10d 0316 	add.w	r3, sp, #22
 800216a:	462a      	mov	r2, r5
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 800216c:	b2a4      	uxth	r4, r4
      regID = *dataElementID & REG_MASK;
 800216e:	f02c 0007 	bic.w	r0, ip, #7
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8002172:	eb09 0b8b 	add.w	fp, r9, fp, lsl #2
 8002176:	f001 0138 	and.w	r1, r1, #56	@ 0x38
      if (motorID > NBR_OF_MOTORS)
 800217a:	d11b      	bne.n	80021b4 <RI_SetRegCommandParser+0xa0>
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 800217c:	f8cd e000 	str.w	lr, [sp]
 8002180:	f85b bc08 	ldr.w	fp, [fp, #-8]
 8002184:	47d8      	blx	fp
        rxLength = (int16_t) (rxLength - size);
 8002186:	f8bd 2016 	ldrh.w	r2, [sp, #22]
        if ((1U == number_of_item) && (0 == rxLength))
 800218a:	eb06 030a 	add.w	r3, r6, sl
 800218e:	b2db      	uxtb	r3, r3
        rxLength = (int16_t) (rxLength - size);
 8002190:	1aa4      	subs	r4, r4, r2
        if ((1U == number_of_item) && (0 == rxLength))
 8002192:	2b01      	cmp	r3, #1
        rxLength = (int16_t) (rxLength - size);
 8002194:	b224      	sxth	r4, r4
        rxData = rxData+size;
 8002196:	eb05 0c02 	add.w	ip, r5, r2
        if ((1U == number_of_item) && (0 == rxLength))
 800219a:	d013      	beq.n	80021c4 <RI_SetRegCommandParser+0xb0>
        {
          retVal = accessResult;
        }
        else
        {/* Store the result for each access to be able to report failing access */
          if (txSyncFreeSpace !=0 )
 800219c:	4546      	cmp	r6, r8
 800219e:	d00d      	beq.n	80021bc <RI_SetRegCommandParser+0xa8>
          {
            *txData = accessResult;
 80021a0:	f806 0b01 	strb.w	r0, [r6], #1
            txData = txData+1;
            pHandle->txLength++;
 80021a4:	89fb      	ldrh	r3, [r7, #14]
 80021a6:	3301      	adds	r3, #1
 80021a8:	81fb      	strh	r3, [r7, #14]
            txSyncFreeSpace--; /* decrement one by one no wraparound possible */
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80021aa:	b1a0      	cbz	r0, 80021d6 <RI_SetRegCommandParser+0xc2>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 80021ac:	2807      	cmp	r0, #7
 80021ae:	d001      	beq.n	80021b4 <RI_SetRegCommandParser+0xa0>
 80021b0:	280a      	cmp	r0, #10
 80021b2:	d10e      	bne.n	80021d2 <RI_SetRegCommandParser+0xbe>
        retVal = MCP_CMD_NOK;
 80021b4:	2001      	movs	r0, #1
    }
  #ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 80021b6:	b009      	add	sp, #36	@ 0x24
 80021b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80021bc:	2008      	movs	r0, #8
}
 80021be:	b009      	add	sp, #36	@ 0x24
 80021c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((1U == number_of_item) && (0 == rxLength))
 80021c4:	2c00      	cmp	r4, #0
 80021c6:	d1e9      	bne.n	800219c <RI_SetRegCommandParser+0x88>
    if (MCP_CMD_OK == retVal)
 80021c8:	2800      	cmp	r0, #0
 80021ca:	d1f4      	bne.n	80021b6 <RI_SetRegCommandParser+0xa2>
      pHandle->txLength = 0;
 80021cc:	2000      	movs	r0, #0
 80021ce:	81f8      	strh	r0, [r7, #14]
 80021d0:	e7f1      	b.n	80021b6 <RI_SetRegCommandParser+0xa2>
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80021d2:	2301      	movs	r3, #1
 80021d4:	9303      	str	r3, [sp, #12]
    while (rxLength > 0)
 80021d6:	2c00      	cmp	r4, #0
 80021d8:	dcb6      	bgt.n	8002148 <RI_SetRegCommandParser+0x34>
 80021da:	9803      	ldr	r0, [sp, #12]
    if (MCP_CMD_OK == retVal)
 80021dc:	2800      	cmp	r0, #0
 80021de:	d0f5      	beq.n	80021cc <RI_SetRegCommandParser+0xb8>
 80021e0:	e7e9      	b.n	80021b6 <RI_SetRegCommandParser+0xa2>
 80021e2:	bf00      	nop
 80021e4:	08002875 	.word	0x08002875
 80021e8:	08002979 	.word	0x08002979

080021ec <RI_GetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 80021ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021f0:	b086      	sub	sp, #24
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    uint16_t size = 0U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	f8ad 300e 	strh.w	r3, [sp, #14]

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
    pHandle->txLength = 0;
 80021f8:	81c3      	strh	r3, [r0, #14]
    uint16_t rxLength = pHandle->rxLength;
 80021fa:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 80021fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002274 <RI_GetRegCommandParser+0x88>)
 8002200:	9304      	str	r3, [sp, #16]
 8002202:	4b1d      	ldr	r3, [pc, #116]	@ (8002278 <RI_GetRegCommandParser+0x8c>)
    uint8_t * rxData = pHandle->rxBuffer;
 8002204:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 8002208:	6886      	ldr	r6, [r0, #8]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 800220a:	9305      	str	r3, [sp, #20]
    while (rxLength > 0U)
 800220c:	f1b8 0f00 	cmp.w	r8, #0
 8002210:	d016      	beq.n	8002240 <RI_GetRegCommandParser+0x54>
 8002212:	4607      	mov	r7, r0
 8002214:	b20d      	sxth	r5, r1
    uint8_t * rxData = pHandle->rxBuffer;
 8002216:	464c      	mov	r4, r9
    {
      dataElementID = (uint16_t *) rxData;
      rxLength = rxLength - MCP_ID_SIZE;
      rxData = rxData + MCP_ID_SIZE; // Shift buffer to the next MCP_ID

      regID = *dataElementID & REG_MASK;
 8002218:	f834 cb02 	ldrh.w	ip, [r4], #2
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 800221c:	fa5f f18c 	uxtb.w	r1, ip
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8002220:	f001 0e07 	and.w	lr, r1, #7
 8002224:	f10d 0a18 	add.w	sl, sp, #24
      if (motorID > NBR_OF_MOTORS)
 8002228:	f01c 0f06 	tst.w	ip, #6
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 800222c:	4632      	mov	r2, r6
      regID = *dataElementID & REG_MASK;
 800222e:	f02c 0007 	bic.w	r0, ip, #7
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8002232:	f10d 030e 	add.w	r3, sp, #14
 8002236:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800223a:	f001 0138 	and.w	r1, r1, #56	@ 0x38
      if (motorID > NBR_OF_MOTORS)
 800223e:	d003      	beq.n	8002248 <RI_GetRegCommandParser+0x5c>
        retVal = MCP_CMD_NOK;
 8002240:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8002242:	b006      	add	sp, #24
 8002244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8002248:	9500      	str	r5, [sp, #0]
 800224a:	f85e ac08 	ldr.w	sl, [lr, #-8]
 800224e:	47d0      	blx	sl
        if (retVal == MCP_CMD_OK )
 8002250:	eba8 0304 	sub.w	r3, r8, r4
    while (rxLength > 0U)
 8002254:	fa19 f383 	uxtah	r3, r9, r3
 8002258:	b29b      	uxth	r3, r3
        if (retVal == MCP_CMD_OK )
 800225a:	2800      	cmp	r0, #0
 800225c:	d1f1      	bne.n	8002242 <RI_GetRegCommandParser+0x56>
          txData = txData+size;
 800225e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
          pHandle->txLength += size;
 8002262:	89fa      	ldrh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8002264:	1a6d      	subs	r5, r5, r1
          pHandle->txLength += size;
 8002266:	440a      	add	r2, r1
          txData = txData+size;
 8002268:	440e      	add	r6, r1
          pHandle->txLength += size;
 800226a:	81fa      	strh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 800226c:	b22d      	sxth	r5, r5
    while (rxLength > 0U)
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1d2      	bne.n	8002218 <RI_GetRegCommandParser+0x2c>
 8002272:	e7e6      	b.n	8002242 <RI_GetRegCommandParser+0x56>
 8002274:	08002f3d 	.word	0x08002f3d
 8002278:	08003071 	.word	0x08003071

0800227c <MCP_ReceivedPacket>:
  * @brief  Parses the header from the received packet and call the required function depending on the command sent by the controller device.
  *
  * @param  pHandle Handler of the current instance of the MCP component
  */
void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 800227c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800227e:	4604      	mov	r4, r0
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8002280:	6846      	ldr	r6, [r0, #4]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;

    /* Commands requiering payload response must be aware of space available for the payload */
    /* Last byte is reserved for MCP response*/
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002282:	6822      	ldr	r2, [r4, #0]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8002284:	f836 3b02 	ldrh.w	r3, [r6], #2
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002288:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800228a:	8992      	ldrh	r2, [r2, #12]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 800228c:	f403 457f 	and.w	r5, r3, #65280	@ 0xff00
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002290:	3a01      	subs	r2, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002292:	3802      	subs	r0, #2
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8002294:	f023 0c07 	bic.w	ip, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8002298:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800229c:	b291      	uxth	r1, r2
{
 800229e:	b083      	sub	sp, #12
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80022a0:	b280      	uxth	r0, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80022a2:	fa1f fc8c 	uxth.w	ip, ip
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 80022a6:	b212      	sxth	r2, r2
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80022a8:	d04e      	beq.n	8002348 <MCP_ReceivedPacket+0xcc>
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 80022aa:	3b01      	subs	r3, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 80022ac:	4f52      	ldr	r7, [pc, #328]	@ (80023f8 <MCP_ReceivedPacket+0x17c>)
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80022ae:	81a0      	strh	r0, [r4, #12]
    MCI_Handle_t *pMCI = &Mci[motorID];
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2

    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0U;
 80022b8:	2500      	movs	r5, #0

    switch (command)
 80022ba:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 80022be:	6066      	str	r6, [r4, #4]
    MCI_Handle_t *pMCI = &Mci[motorID];
 80022c0:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    pHandle->txLength = 0U;
 80022c4:	81e5      	strh	r5, [r4, #14]
    switch (command)
 80022c6:	d82a      	bhi.n	800231e <MCP_ReceivedPacket+0xa2>
 80022c8:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
 80022cc:	d81e      	bhi.n	800230c <MCP_ReceivedPacket+0x90>
 80022ce:	e8df f00c 	tbb	[pc, ip]
 80022d2:	1d5d      	.short	0x1d5d
 80022d4:	1d1d1d1d 	.word	0x1d1d1d1d
 80022d8:	1d651d1d 	.word	0x1d651d1d
 80022dc:	1d1d1d1d 	.word	0x1d1d1d1d
 80022e0:	1d581d1d 	.word	0x1d581d1d
 80022e4:	1d1d1d1d 	.word	0x1d1d1d1d
 80022e8:	1d501d1d 	.word	0x1d501d1d
 80022ec:	1d1d1d1d 	.word	0x1d1d1d1d
 80022f0:	1d4a1d1d 	.word	0x1d4a1d1d
 80022f4:	1d1d1d1d 	.word	0x1d1d1d1d
 80022f8:	1d6a1d1d 	.word	0x1d6a1d1d
 80022fc:	1d1d1d1d 	.word	0x1d1d1d1d
 8002300:	1d461d1d 	.word	0x1d461d1d
 8002304:	1d1d1d1d 	.word	0x1d1d1d1d
 8002308:	1d1d      	.short	0x1d1d
 800230a:	72          	.byte	0x72
 800230b:	00          	.byte	0x00
 800230c:	2300      	movs	r3, #0
 800230e:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002310:	68a2      	ldr	r2, [r4, #8]
 8002312:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 8002314:	89e3      	ldrh	r3, [r4, #14]
 8002316:	3301      	adds	r3, #1
 8002318:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 800231a:	b003      	add	sp, #12
 800231c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (command)
 800231e:	f1bc 0f68 	cmp.w	ip, #104	@ 0x68
 8002322:	d04e      	beq.n	80023c2 <MCP_ReceivedPacket+0x146>
 8002324:	d907      	bls.n	8002336 <MCP_ReceivedPacket+0xba>
 8002326:	f1bc 0f78 	cmp.w	ip, #120	@ 0x78
 800232a:	d1ef      	bne.n	800230c <MCP_ReceivedPacket+0x90>
        HAL_NVIC_SystemReset();
 800232c:	f003 fa84 	bl	8005838 <HAL_NVIC_SystemReset>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002330:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8002332:	4628      	mov	r0, r5
        break;
 8002334:	e7ec      	b.n	8002310 <MCP_ReceivedPacket+0x94>
    switch (command)
 8002336:	f1bc 0f48 	cmp.w	ip, #72	@ 0x48
 800233a:	d1e7      	bne.n	800230c <MCP_ReceivedPacket+0x90>
        MCI_Clear_Iqdref(pMCI);
 800233c:	4638      	mov	r0, r7
 800233e:	f7ff f949 	bl	80015d4 <MCI_Clear_Iqdref>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002342:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8002344:	4628      	mov	r0, r5
        break;
 8002346:	e7e3      	b.n	8002310 <MCP_ReceivedPacket+0x94>
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 8002348:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
    pHandle->txLength = 0U;
 800234c:	2300      	movs	r3, #0
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 800234e:	f1bc 0f01 	cmp.w	ip, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002352:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8002354:	6066      	str	r6, [r4, #4]
    pHandle->txLength = 0U;
 8002356:	81e3      	strh	r3, [r4, #14]
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8002358:	d93c      	bls.n	80023d4 <MCP_ReceivedPacket+0x158>
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 800235a:	200d      	movs	r0, #13
 800235c:	e7d8      	b.n	8002310 <MCP_ReceivedPacket+0x94>
        if (IDLE == MCI_GetSTMState(pMCI))
 800235e:	4638      	mov	r0, r7
 8002360:	f7ff f852 	bl	8001408 <MCI_GetSTMState>
 8002364:	b128      	cbz	r0, 8002372 <MCP_ReceivedPacket+0xf6>
          (void)MCI_StopMotor(pMCI);
 8002366:	4638      	mov	r0, r7
 8002368:	f7ff f86a 	bl	8001440 <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800236c:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800236e:	2000      	movs	r0, #0
 8002370:	e7ce      	b.n	8002310 <MCP_ReceivedPacket+0x94>
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8002372:	4638      	mov	r0, r7
 8002374:	f7ff f84e 	bl	8001414 <MCI_StartMotor>
 8002378:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800237c:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 800237e:	b2c0      	uxtb	r0, r0
 8002380:	e7c6      	b.n	8002310 <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8002382:	4620      	mov	r0, r4
 8002384:	f7ff ff32 	bl	80021ec <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002388:	89e3      	ldrh	r3, [r4, #14]
        break;
 800238a:	e7c1      	b.n	8002310 <MCP_ReceivedPacket+0x94>
        *pHandle->txBuffer = MCP_VERSION;
 800238c:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4U;
 800238e:	2104      	movs	r1, #4
        *pHandle->txBuffer = MCP_VERSION;
 8002390:	2201      	movs	r2, #1
        pHandle->txLength = 4U;
 8002392:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = MCP_VERSION;
 8002394:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002396:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8002398:	2000      	movs	r0, #0
        break;
 800239a:	e7b9      	b.n	8002310 <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 800239c:	4620      	mov	r0, r4
 800239e:	f7ff feb9 	bl	8002114 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80023a2:	89e3      	ldrh	r3, [r4, #14]
        break;
 80023a4:	e7b4      	b.n	8002310 <MCP_ReceivedPacket+0x94>
        if (RUN == MCI_GetSTMState(pMCI))
 80023a6:	4638      	mov	r0, r7
 80023a8:	f7ff f82e 	bl	8001408 <MCI_GetSTMState>
 80023ac:	2806      	cmp	r0, #6
 80023ae:	d01d      	beq.n	80023ec <MCP_ReceivedPacket+0x170>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80023b0:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80023b2:	2000      	movs	r0, #0
 80023b4:	e7ac      	b.n	8002310 <MCP_ReceivedPacket+0x94>
        (void)MCI_FaultAcknowledged(pMCI);
 80023b6:	4638      	mov	r0, r7
 80023b8:	f7ff f85e 	bl	8001478 <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80023bc:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80023be:	2000      	movs	r0, #0
        break;
 80023c0:	e7a6      	b.n	8002310 <MCP_ReceivedPacket+0x94>
        MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength,
 80023c2:	68a3      	ldr	r3, [r4, #8]
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	4631      	mov	r1, r6
 80023c8:	f104 030e 	add.w	r3, r4, #14
 80023cc:	f7fe ffb0 	bl	8001330 <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80023d0:	89e3      	ldrh	r3, [r4, #14]
        break;
 80023d2:	e79d      	b.n	8002310 <MCP_ReceivedPacket+0x94>
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 80023d4:	4b09      	ldr	r3, [pc, #36]	@ (80023fc <MCP_ReceivedPacket+0x180>)
 80023d6:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
 80023da:	b15d      	cbz	r5, 80023f4 <MCP_ReceivedPacket+0x178>
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 80023dc:	68a3      	ldr	r3, [r4, #8]
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	4631      	mov	r1, r6
 80023e2:	f104 030e 	add.w	r3, r4, #14
 80023e6:	47a8      	blx	r5
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80023e8:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 80023ea:	e791      	b.n	8002310 <MCP_ReceivedPacket+0x94>
          MCI_StopRamp(pMCI);
 80023ec:	4638      	mov	r0, r7
 80023ee:	f7ff f88b 	bl	8001508 <MCI_StopRamp>
 80023f2:	e7dd      	b.n	80023b0 <MCP_ReceivedPacket+0x134>
 80023f4:	462b      	mov	r3, r5
 80023f6:	e7b0      	b.n	800235a <MCP_ReceivedPacket+0xde>
 80023f8:	20000000 	.word	0x20000000
 80023fc:	200009dc 	.word	0x200009dc

08002400 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8002400:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 8002402:	f004 fb2f 	bl	8006a64 <HAL_RCC_GetHCLKFreq>
 8002406:	4b0a      	ldr	r3, [pc, #40]	@ (8002430 <MX_MotorControl_Init+0x30>)
 8002408:	fba3 3000 	umull	r3, r0, r3, r0
 800240c:	09c0      	lsrs	r0, r0, #7
 800240e:	f003 fa25 	bl	800585c <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 8002412:	4b08      	ldr	r3, [pc, #32]	@ (8002434 <MX_MotorControl_Init+0x34>)
 8002414:	2200      	movs	r2, #0
 8002416:	6819      	ldr	r1, [r3, #0]
 8002418:	f04f 30ff 	mov.w	r0, #4294967295
 800241c:	f003 f9c2 	bl	80057a4 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8002420:	4805      	ldr	r0, [pc, #20]	@ (8002438 <MX_MotorControl_Init+0x38>)
 8002422:	f7ff f991 	bl	8001748 <MCboot>
  mc_lock_pins();
}
 8002426:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 800242a:	f7ff babf 	b.w	80019ac <mc_lock_pins>
 800242e:	bf00      	nop
 8002430:	10624dd3 	.word	0x10624dd3
 8002434:	200004f4 	.word	0x200004f4
 8002438:	20001c68 	.word	0x20001c68

0800243c <startTimers>:
  *         @arg @ref LL_TIM_TS_ETRF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 800243c:	4922      	ldr	r1, [pc, #136]	@ (80024c8 <startTimers+0x8c>)
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 800243e:	4a23      	ldr	r2, [pc, #140]	@ (80024cc <startTimers+0x90>)
 8002440:	688b      	ldr	r3, [r1, #8]
 8002442:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800244a:	f043 0310 	orr.w	r3, r3, #16
  * When this function is called, TIM1 and/or TIM8 must be in a frozen state
  * with CNT, ARR, REP RATE and trigger correctly set (these settings are
  * usually performed in the Init method accordingly with the configuration)
  */
__weak void startTimers(void)
{
 800244e:	b410      	push	{r4}
 8002450:	608b      	str	r3, [r1, #8]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8002452:	688b      	ldr	r3, [r1, #8]
 8002454:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002458:	f023 0307 	bic.w	r3, r3, #7
 800245c:	f043 0306 	orr.w	r3, r3, #6
 8002460:	608b      	str	r3, [r1, #8]
 8002462:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002464:	07db      	lsls	r3, r3, #31
 8002466:	b083      	sub	sp, #12
 8002468:	d416      	bmi.n	8002498 <startTimers+0x5c>
  SET_BIT(RCC->APB1ENR1, Periphs);
 800246a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	6593      	str	r3, [r2, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002472:	6d93      	ldr	r3, [r2, #88]	@ 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002474:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800247e:	9b01      	ldr	r3, [sp, #4]
 8002480:	694b      	ldr	r3, [r1, #20]
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	614b      	str	r3, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002488:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800248a:	f023 0301 	bic.w	r3, r3, #1
 800248e:	6593      	str	r3, [r2, #88]	@ 0x58
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 8002490:	b003      	add	sp, #12
 8002492:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002496:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 8002498:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800249c:	480c      	ldr	r0, [pc, #48]	@ (80024d0 <startTimers+0x94>)
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	6859      	ldr	r1, [r3, #4]
 80024a2:	4c0c      	ldr	r4, [pc, #48]	@ (80024d4 <startTimers+0x98>)
 80024a4:	4001      	ands	r1, r0
 80024a6:	f041 0120 	orr.w	r1, r1, #32
 80024aa:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80024ac:	6959      	ldr	r1, [r3, #20]
 80024ae:	f041 0101 	orr.w	r1, r1, #1
 80024b2:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80024b4:	6859      	ldr	r1, [r3, #4]
 80024b6:	4022      	ands	r2, r4
 80024b8:	4001      	ands	r1, r0
 80024ba:	430a      	orrs	r2, r1
 80024bc:	605a      	str	r2, [r3, #4]
}
 80024be:	b003      	add	sp, #12
 80024c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40012c00 	.word	0x40012c00
 80024cc:	40021000 	.word	0x40021000
 80024d0:	fdffff8f 	.word	0xfdffff8f
 80024d4:	02000070 	.word	0x02000070

080024d8 <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80024d8:	3201      	adds	r2, #1
{
 80024da:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80024dc:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80024de:	f06f 0602 	mvn.w	r6, #2
 80024e2:	0155      	lsls	r5, r2, #5
 80024e4:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 80024e6:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 80024e8:	f893 c000 	ldrb.w	ip, [r3]
 80024ec:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 80024f0:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 80024f4:	d80c      	bhi.n	8002510 <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80024f6:	6904      	ldr	r4, [r0, #16]
 80024f8:	07a4      	lsls	r4, r4, #30
 80024fa:	d5f5      	bpl.n	80024e8 <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 80024fc:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8002500:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8002502:	6106      	str	r6, [r0, #16]
 8002504:	d8f0      	bhi.n	80024e8 <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 8002506:	781c      	ldrb	r4, [r3, #0]
 8002508:	2c0f      	cmp	r4, #15
 800250a:	d8ed      	bhi.n	80024e8 <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 800250c:	2301      	movs	r3, #1
 800250e:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 8002510:	bd70      	pop	{r4, r5, r6, pc}
 8002512:	bf00      	nop

08002514 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8002514:	b530      	push	{r4, r5, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002516:	f8b0 4070 	ldrh.w	r4, [r0, #112]	@ 0x70
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 800251a:	f8b0 204e 	ldrh.w	r2, [r0, #78]	@ 0x4e
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800251e:	ea4f 4c21 	mov.w	ip, r1, asr #16
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002522:	b20b      	sxth	r3, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002524:	fb04 fc0c 	mul.w	ip, r4, ip
 8002528:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 800252c:	fb02 f303 	mul.w	r3, r2, r3

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 8002530:	eb03 024c 	add.w	r2, r3, ip, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 8002534:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8002538:	eb02 7ed2 	add.w	lr, r2, r2, lsr #31
    wZ = (wUBeta - wUAlpha) / 2;
 800253c:	eb03 71d3 	add.w	r1, r3, r3, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 8002540:	1c55      	adds	r5, r2, #1
{
 8002542:	b083      	sub	sp, #12
    {
      if (wZ < 0)
      {
        pHandle->Sector = SECTOR_5;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002544:	ea4f 0494 	mov.w	r4, r4, lsr #2
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002548:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 800254c:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 8002550:	ea4f 0161 	mov.w	r1, r1, asr #1
    if (wY < 0)
 8002554:	db6b      	blt.n	800262e <PWMC_SetPhaseVoltage+0x11a>
        }
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 8002556:	1c5d      	adds	r5, r3, #1
 8002558:	db3d      	blt.n	80025d6 <PWMC_SetPhaseVoltage+0xc2>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800255a:	ebbe 0e01 	subs.w	lr, lr, r1
 800255e:	bf44      	itt	mi
 8002560:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 8002564:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002568:	2b00      	cmp	r3, #0
 800256a:	bfbc      	itt	lt
 800256c:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8002570:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 8002574:	2a00      	cmp	r2, #0
 8002576:	bfb8      	it	lt
 8002578:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00

        if(true == pHandle->SingleShuntTopology)
 800257c:	f890 1085 	ldrb.w	r1, [r0, #133]	@ 0x85
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002580:	eb04 4eae 	add.w	lr, r4, lr, asr #18
        pHandle->Sector = SECTOR_2;
 8002584:	f04f 0501 	mov.w	r5, #1
        wTimePhC = wTimePhA - (wY / 131072);
 8002588:	bfb8      	it	lt
 800258a:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        pHandle->Sector = SECTOR_2;
 800258e:	f880 507a 	strb.w	r5, [r0, #122]	@ 0x7a
        wTimePhB = wTimePhA + (wZ / 131072);
 8002592:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 8002596:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 800259a:	2900      	cmp	r1, #0
 800259c:	d16e      	bne.n	800267c <PWMC_SetPhaseVoltage+0x168>
          pHandle->midDuty = 0U;
          pHandle->highDuty = 1U;
        }
        else
        {
        pHandle->lowDuty = (uint16_t)wTimePhB;
 800259e:	fa1f fc83 	uxth.w	ip, r3
        pHandle->midDuty = (uint16_t)wTimePhA;
 80025a2:	fa1f f48e 	uxth.w	r4, lr
        pHandle->highDuty = (uint16_t)wTimePhC;
 80025a6:	b291      	uxth	r1, r2
            pHandle->highDuty = 2U;
 80025a8:	f8a0 105c 	strh.w	r1, [r0, #92]	@ 0x5c

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 80025ac:	6941      	ldr	r1, [r0, #20]
            pHandle->lowDuty = 0U;
 80025ae:	f8a0 c058 	strh.w	ip, [r0, #88]	@ 0x58
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 80025b2:	ea2e 7eee 	bic.w	lr, lr, lr, asr #31
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 80025b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 80025ba:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
            pHandle->midDuty = 1U;
 80025be:	f8a0 405a 	strh.w	r4, [r0, #90]	@ 0x5a
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 80025c2:	f8a0 e050 	strh.w	lr, [r0, #80]	@ 0x50
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 80025c6:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 80025ca:	f8a0 2054 	strh.w	r2, [r0, #84]	@ 0x54
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 80025ce:	b003      	add	sp, #12
 80025d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 80025d4:	4708      	bx	r1
        if ( wX <= 0 )
 80025d6:	f1bc 0f00 	cmp.w	ip, #0
 80025da:	dd7b      	ble.n	80026d4 <PWMC_SetPhaseVoltage+0x1c0>
          wTimePhB = wTimePhA + (wZ / 131072);
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bfb8      	it	lt
 80025e0:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 80025e4:	ebac 0101 	sub.w	r1, ip, r1
          wTimePhB = wTimePhA + (wZ / 131072);
 80025e8:	bfb8      	it	lt
 80025ea:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          wTimePhC = wTimePhB - (wX / 131072);
 80025ee:	f1bc 0f00 	cmp.w	ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 80025f2:	eb04 4ea1 	add.w	lr, r4, r1, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 80025f6:	bfb8      	it	lt
 80025f8:	f50c 3cff 	addlt.w	ip, ip, #130560	@ 0x1fe00
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 80025fc:	f890 107d 	ldrb.w	r1, [r0, #125]	@ 0x7d
          pHandle->Sector = SECTOR_1;
 8002600:	f04f 0200 	mov.w	r2, #0
          wTimePhB = wTimePhA + (wZ / 131072);
 8002604:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002608:	bfb8      	it	lt
 800260a:	f20c 1cff 	addwlt	ip, ip, #511	@ 0x1ff
          pHandle->Sector = SECTOR_1;
 800260e:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
          wTimePhC = wTimePhB - (wX / 131072);
 8002612:	eba3 426c 	sub.w	r2, r3, ip, asr #17
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8002616:	2900      	cmp	r1, #0
 8002618:	f040 80ae 	bne.w	8002778 <PWMC_SetPhaseVoltage+0x264>
 800261c:	f890 4085 	ldrb.w	r4, [r0, #133]	@ 0x85
 8002620:	2c00      	cmp	r4, #0
 8002622:	f000 80b9 	beq.w	8002798 <PWMC_SetPhaseVoltage+0x284>
 8002626:	f04f 0c02 	mov.w	ip, #2
 800262a:	2401      	movs	r4, #1
 800262c:	e7bc      	b.n	80025a8 <PWMC_SetPhaseVoltage+0x94>
      if (wZ < 0)
 800262e:	f1b3 3fff 	cmp.w	r3, #4294967295
        if(true == pHandle->SingleShuntTopology)
 8002632:	f890 5085 	ldrb.w	r5, [r0, #133]	@ 0x85
      if (wZ < 0)
 8002636:	db70      	blt.n	800271a <PWMC_SetPhaseVoltage+0x206>
        if (wX <= 0)
 8002638:	f1bc 0f00 	cmp.w	ip, #0
 800263c:	dd23      	ble.n	8002686 <PWMC_SetPhaseVoltage+0x172>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 800263e:	ebbe 0e0c 	subs.w	lr, lr, ip
 8002642:	bf44      	itt	mi
 8002644:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 8002648:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 800264c:	2a00      	cmp	r2, #0
 800264e:	bfb8      	it	lt
 8002650:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002654:	eb04 4eae 	add.w	lr, r4, lr, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 8002658:	bfb8      	it	lt
 800265a:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_3;
 800265e:	2302      	movs	r3, #2
          wTimePhC = wTimePhA - (wY / 131072);
 8002660:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
          pHandle->Sector = SECTOR_3;
 8002664:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
          wTimePhB = wTimePhC + (wX / 131072);
 8002668:	eb02 436c 	add.w	r3, r2, ip, asr #17
          if(true == pHandle->SingleShuntTopology)
 800266c:	2d00      	cmp	r5, #0
 800266e:	d17e      	bne.n	800276e <PWMC_SetPhaseVoltage+0x25a>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 8002670:	fa1f fc83 	uxth.w	ip, r3
          pHandle->midDuty = (uint16_t)wTimePhC;
 8002674:	b294      	uxth	r4, r2
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002676:	fa1f f18e 	uxth.w	r1, lr
 800267a:	e795      	b.n	80025a8 <PWMC_SetPhaseVoltage+0x94>
 800267c:	f04f 0c02 	mov.w	ip, #2
 8002680:	2400      	movs	r4, #0
 8002682:	2101      	movs	r1, #1
 8002684:	e790      	b.n	80025a8 <PWMC_SetPhaseVoltage+0x94>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002686:	ebbc 0101 	subs.w	r1, ip, r1
 800268a:	bf44      	itt	mi
 800268c:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8002690:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 8002694:	2b00      	cmp	r3, #0
 8002696:	bfb8      	it	lt
 8002698:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_4;
 800269c:	f04f 0203 	mov.w	r2, #3
          wTimePhB = wTimePhA + (wZ / 131072);
 80026a0:	bfb8      	it	lt
 80026a2:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_4;
 80026a6:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
          wTimePhC = wTimePhB - (wX / 131072);
 80026aa:	f1bc 0200 	subs.w	r2, ip, #0
 80026ae:	bfb8      	it	lt
 80026b0:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 80026b4:	eb04 4ea1 	add.w	lr, r4, r1, asr #18
          wTimePhB = wTimePhA + (wZ / 131072);
 80026b8:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 80026bc:	bfb8      	it	lt
 80026be:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 80026c2:	eba3 4262 	sub.w	r2, r3, r2, asr #17
          if(true == pHandle->SingleShuntTopology)
 80026c6:	2d00      	cmp	r5, #0
 80026c8:	d060      	beq.n	800278c <PWMC_SetPhaseVoltage+0x278>
 80026ca:	f04f 0c00 	mov.w	ip, #0
 80026ce:	2401      	movs	r4, #1
 80026d0:	2102      	movs	r1, #2
 80026d2:	e769      	b.n	80025a8 <PWMC_SetPhaseVoltage+0x94>
          wTimePhC = wTimePhA - (wY / 131072);
 80026d4:	2a00      	cmp	r2, #0
 80026d6:	bfb8      	it	lt
 80026d8:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_6;
 80026dc:	f04f 0305 	mov.w	r3, #5
          wTimePhC = wTimePhA - (wY / 131072);
 80026e0:	bfb8      	it	lt
 80026e2:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80026e6:	ebae 0e0c 	sub.w	lr, lr, ip
          pHandle->Sector = SECTOR_6;
 80026ea:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
          wTimePhB = wTimePhC + (wX / 131072);
 80026ee:	f1bc 0300 	subs.w	r3, ip, #0
 80026f2:	bfb8      	it	lt
 80026f4:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80026f8:	eb04 4eae 	add.w	lr, r4, lr, asr #18
          if(true == pHandle->SingleShuntTopology)
 80026fc:	f890 1085 	ldrb.w	r1, [r0, #133]	@ 0x85
          wTimePhC = wTimePhA - (wY / 131072);
 8002700:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002704:	bfb8      	it	lt
 8002706:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
 800270a:	eb02 4363 	add.w	r3, r2, r3, asr #17
          if(true == pHandle->SingleShuntTopology)
 800270e:	b3c1      	cbz	r1, 8002782 <PWMC_SetPhaseVoltage+0x26e>
 8002710:	f04f 0c01 	mov.w	ip, #1
 8002714:	2402      	movs	r4, #2
 8002716:	2100      	movs	r1, #0
 8002718:	e746      	b.n	80025a8 <PWMC_SetPhaseVoltage+0x94>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800271a:	ebbe 0e01 	subs.w	lr, lr, r1
 800271e:	bf44      	itt	mi
 8002720:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 8002724:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002728:	2b00      	cmp	r3, #0
 800272a:	bfbc      	itt	lt
 800272c:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8002730:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002734:	2a00      	cmp	r2, #0
 8002736:	bfb8      	it	lt
 8002738:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800273c:	eb04 4eae 	add.w	lr, r4, lr, asr #18
        pHandle->Sector = SECTOR_5;
 8002740:	f04f 0c04 	mov.w	ip, #4
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002744:	bfb8      	it	lt
 8002746:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        pHandle->Sector = SECTOR_5;
 800274a:	f880 c07a 	strb.w	ip, [r0, #122]	@ 0x7a
        wTimePhB = wTimePhA + (wZ / 131072);
 800274e:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002752:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 8002756:	b92d      	cbnz	r5, 8002764 <PWMC_SetPhaseVoltage+0x250>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8002758:	fa1f fc82 	uxth.w	ip, r2
          pHandle->midDuty = (uint16_t)wTimePhA;
 800275c:	fa1f f48e 	uxth.w	r4, lr
          pHandle->highDuty = (uint16_t)wTimePhB;
 8002760:	b299      	uxth	r1, r3
 8002762:	e721      	b.n	80025a8 <PWMC_SetPhaseVoltage+0x94>
 8002764:	f04f 0c01 	mov.w	ip, #1
 8002768:	2400      	movs	r4, #0
 800276a:	2102      	movs	r1, #2
 800276c:	e71c      	b.n	80025a8 <PWMC_SetPhaseVoltage+0x94>
 800276e:	f04f 0c00 	mov.w	ip, #0
 8002772:	2402      	movs	r4, #2
 8002774:	2101      	movs	r1, #1
 8002776:	e717      	b.n	80025a8 <PWMC_SetPhaseVoltage+0x94>
 8002778:	f04f 0c02 	mov.w	ip, #2
 800277c:	2401      	movs	r4, #1
 800277e:	2100      	movs	r1, #0
 8002780:	e712      	b.n	80025a8 <PWMC_SetPhaseVoltage+0x94>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8002782:	fa1f fc8e 	uxth.w	ip, lr
            pHandle->midDuty = (uint16_t)wTimePhC;
 8002786:	b294      	uxth	r4, r2
            pHandle->highDuty = (uint16_t)wTimePhB;
 8002788:	b299      	uxth	r1, r3
 800278a:	e70d      	b.n	80025a8 <PWMC_SetPhaseVoltage+0x94>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 800278c:	fa1f fc82 	uxth.w	ip, r2
          pHandle->midDuty = (uint16_t)wTimePhB;
 8002790:	b29c      	uxth	r4, r3
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002792:	fa1f f18e 	uxth.w	r1, lr
 8002796:	e707      	b.n	80025a8 <PWMC_SetPhaseVoltage+0x94>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8002798:	fa1f fc8e 	uxth.w	ip, lr
            pHandle->midDuty = (uint16_t)wTimePhB;
 800279c:	b29c      	uxth	r4, r3
            pHandle->highDuty = (uint16_t)wTimePhC;
 800279e:	b291      	uxth	r1, r2
 80027a0:	e702      	b.n	80025a8 <PWMC_SetPhaseVoltage+0x94>
 80027a2:	bf00      	nop

080027a4 <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 80027a4:	6843      	ldr	r3, [r0, #4]
 80027a6:	4718      	bx	r3

080027a8 <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 80027a8:	6883      	ldr	r3, [r0, #8]
 80027aa:	4718      	bx	r3

080027ac <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 80027ac:	b510      	push	{r4, lr}
 80027ae:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 80027b0:	b179      	cbz	r1, 80027d2 <PWMC_CurrentReadingCalibr+0x26>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 80027b2:	2901      	cmp	r1, #1
 80027b4:	d001      	beq.n	80027ba <PWMC_CurrentReadingCalibr+0xe>
  bool retVal = false;
 80027b6:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 80027b8:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 80027ba:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 80027be:	b16b      	cbz	r3, 80027dc <PWMC_CurrentReadingCalibr+0x30>
        pHandle->OffCalibrWaitTimeCounter--;
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1f4      	bne.n	80027b6 <PWMC_CurrentReadingCalibr+0xa>
          pHandle->pFctCurrReadingCalib(pHandle);
 80027cc:	68c3      	ldr	r3, [r0, #12]
 80027ce:	4798      	blx	r3
          retVal = true;
 80027d0:	e004      	b.n	80027dc <PWMC_CurrentReadingCalibr+0x30>
      PWMC_SwitchOffPWM(pHandle);
 80027d2:	f7ff ffe7 	bl	80027a4 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 80027d6:	68e3      	ldr	r3, [r4, #12]
 80027d8:	4620      	mov	r0, r4
 80027da:	4798      	blx	r3
      retVal = true;
 80027dc:	2001      	movs	r0, #1
}
 80027de:	bd10      	pop	{r4, pc}

080027e0 <PWMC_OCP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    if (false == pHandle->BrakeActionLock)
 80027e0:	f890 3083 	ldrb.w	r3, [r0, #131]	@ 0x83
 80027e4:	b91b      	cbnz	r3, 80027ee <PWMC_OCP_Handler+0xe>
    {
      if (ES_GPIO == pHandle->LowSideOutputs)
 80027e6:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d004      	beq.n	80027f8 <PWMC_OCP_Handler+0x18>
    }
    else
    {
      /* Nothing to do */
    }
    pHandle->OverCurrentFlag = true;
 80027ee:	2301      	movs	r3, #1
 80027f0:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 80027f4:	3078      	adds	r0, #120	@ 0x78
 80027f6:	4770      	bx	lr
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 80027f8:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 80027fc:	b410      	push	{r4}
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 80027fe:	6c43      	ldr	r3, [r0, #68]	@ 0x44
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_u_port, pHandle->pwm_en_u_pin);
 8002800:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8002804:	6294      	str	r4, [r2, #40]	@ 0x28
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 8002806:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 800280a:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 800280e:	628c      	str	r4, [r1, #40]	@ 0x28
 8002810:	629a      	str	r2, [r3, #40]	@ 0x28
    pHandle->OverCurrentFlag = true;
 8002812:	2301      	movs	r3, #1
 8002814:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
}
 8002818:	f85d 4b04 	ldr.w	r4, [sp], #4
 800281c:	3078      	adds	r0, #120	@ 0x78
 800281e:	4770      	bx	lr

08002820 <PWMC_OVP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8002820:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
{
 8002822:	4603      	mov	r3, r0
    pHandle->OverVoltageFlag = true;
 8002824:	f04f 0c01 	mov.w	ip, #1
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8002828:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800282c:	644a      	str	r2, [r1, #68]	@ 0x44
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 800282e:	3078      	adds	r0, #120	@ 0x78
    pHandle->OverVoltageFlag = true;
 8002830:	f883 c081 	strb.w	ip, [r3, #129]	@ 0x81
    pHandle->BrakeActionLock = true;
 8002834:	f883 c083 	strb.w	ip, [r3, #131]	@ 0x83
}
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop

0800283c <PWMC_IsFaultOccurred>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns #MC_OVER_CURR if an overcurrent has been
  *                  detected since last method call, #MC_NO_FAULTS otherwise.
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
 800283c:	4603      	mov	r3, r0
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 800283e:	f890 0081 	ldrb.w	r0, [r0, #129]	@ 0x81
 8002842:	b1a8      	cbz	r0, 8002870 <PWMC_IsFaultOccurred+0x34>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 800284a:	2142      	movs	r1, #66	@ 0x42
    retVal = MC_OVER_VOLT;
 800284c:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 800284e:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 8002852:	b11a      	cbz	r2, 800285c <PWMC_IsFaultOccurred+0x20>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    retVal |= MC_OVER_CURR;
 800285a:	4608      	mov	r0, r1
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 800285c:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 8002860:	b12a      	cbz	r2, 800286e <PWMC_IsFaultOccurred+0x32>
  {
    retVal |= MC_DP_FAULT;
 8002862:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
    pHandle->driverProtectionFlag = false;
 8002866:	2200      	movs	r2, #0
    retVal |= MC_DP_FAULT;
 8002868:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 800286a:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
  {
    /* Nothing to do */
  }

  return (retVal);
}
 800286e:	4770      	bx	lr
 8002870:	2140      	movs	r1, #64	@ 0x40
 8002872:	e7ec      	b.n	800284e <PWMC_IsFaultOccurred+0x12>

08002874 <RI_SetRegisterGlobal>:
#include "mcp_config.h"
#include "mcpa.h"
#include "mc_configuration_registers.h"

uint8_t RI_SetRegisterGlobal(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 8002874:	b410      	push	{r4}
  uint8_t retVal = MCP_CMD_OK;
  switch(typeID)
 8002876:	3908      	subs	r1, #8
{
 8002878:	f9bd c004 	ldrsh.w	ip, [sp, #4]
  switch(typeID)
 800287c:	2920      	cmp	r1, #32
 800287e:	d812      	bhi.n	80028a6 <RI_SetRegisterGlobal+0x32>
 8002880:	e8df f001 	tbb	[pc, r1]
 8002884:	11111117 	.word	0x11111117
 8002888:	11111111 	.word	0x11111111
 800288c:	11111121 	.word	0x11111121
 8002890:	11111111 	.word	0x11111111
 8002894:	11111133 	.word	0x11111133
 8002898:	11111111 	.word	0x11111111
 800289c:	1111113d 	.word	0x1111113d
 80028a0:	11111111 	.word	0x11111111
 80028a4:	51          	.byte	0x51
 80028a5:	00          	.byte	0x00
    }

    default:
    {
      retVal = MCP_ERROR_BAD_DATA_TYPE;
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 80028a6:	2200      	movs	r2, #0
 80028a8:	801a      	strh	r2, [r3, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 80028aa:	2007      	movs	r0, #7
      break;
    }
  }
  return (retVal);
}
 80028ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028b0:	4770      	bx	lr
          retVal = MCP_ERROR_RO_REG;
 80028b2:	2848      	cmp	r0, #72	@ 0x48
      *size = 1;
 80028b4:	f04f 0201 	mov.w	r2, #1
          retVal = MCP_ERROR_RO_REG;
 80028b8:	bf14      	ite	ne
 80028ba:	2005      	movne	r0, #5
 80028bc:	2004      	moveq	r0, #4
}
 80028be:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 1;
 80028c2:	801a      	strh	r2, [r3, #0]
}
 80028c4:	4770      	bx	lr
      switch (regID)
 80028c6:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 80028ca:	d04e      	beq.n	800296a <RI_SetRegisterGlobal+0xf6>
 80028cc:	d93e      	bls.n	800294c <RI_SetRegisterGlobal+0xd8>
 80028ce:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 80028d2:	d04a      	beq.n	800296a <RI_SetRegisterGlobal+0xf6>
 80028d4:	f641 3258 	movw	r2, #7000	@ 0x1b58
          retVal = MCP_ERROR_UNKNOWN_REG;
 80028d8:	4290      	cmp	r0, r2
 80028da:	bf0c      	ite	eq
 80028dc:	2004      	moveq	r0, #4
 80028de:	2005      	movne	r0, #5
      *size = 2;
 80028e0:	2202      	movs	r2, #2
}
 80028e2:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 2;
 80028e6:	801a      	strh	r2, [r3, #0]
}
 80028e8:	4770      	bx	lr
          retVal = MCP_ERROR_RO_REG;
 80028ea:	2818      	cmp	r0, #24
      *size = 4;
 80028ec:	f04f 0204 	mov.w	r2, #4
          retVal = MCP_ERROR_RO_REG;
 80028f0:	bf14      	ite	ne
 80028f2:	2005      	movne	r0, #5
 80028f4:	4610      	moveq	r0, r2
}
 80028f6:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 4;
 80028fa:	801a      	strh	r2, [r3, #0]
}
 80028fc:	4770      	bx	lr
uint8_t RI_MovString(const char_t *srcString, char_t *destString, uint16_t *size, int16_t maxSize)
{
  uint8_t retVal = MCP_CMD_OK;
  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */
 80028fe:	2101      	movs	r1, #1
 8002900:	8019      	strh	r1, [r3, #0]

  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002902:	f992 0000 	ldrsb.w	r0, [r2]
 8002906:	b348      	cbz	r0, 800295c <RI_SetRegisterGlobal+0xe8>
 8002908:	fa1f f08c 	uxth.w	r0, ip
 800290c:	e003      	b.n	8002916 <RI_SetRegisterGlobal+0xa2>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
    tempsrcString++;
    *size = *size + 1U;
 800290e:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002910:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
 8002914:	b314      	cbz	r4, 800295c <RI_SetRegisterGlobal+0xe8>
    *size = *size + 1U;
 8002916:	f101 0c01 	add.w	ip, r1, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800291a:	4281      	cmp	r1, r0
    *size = *size + 1U;
 800291c:	fa1f f18c 	uxth.w	r1, ip
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002920:	d3f5      	bcc.n	800290e <RI_SetRegisterGlobal+0x9a>
      retVal = MCP_ERROR_RO_REG;
 8002922:	2004      	movs	r0, #4
 8002924:	e7c2      	b.n	80028ac <RI_SetRegisterGlobal+0x38>
      *size = rawSize + 2U;
 8002926:	8812      	ldrh	r2, [r2, #0]
 8002928:	3202      	adds	r2, #2
 800292a:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 800292c:	fa1f fc8c 	uxth.w	ip, ip
 8002930:	4562      	cmp	r2, ip
      *size = rawSize + 2U;
 8002932:	801a      	strh	r2, [r3, #0]
      if (*size > (uint16_t)dataAvailable)
 8002934:	d81b      	bhi.n	800296e <RI_SetRegisterGlobal+0xfa>
        switch (regID)
 8002936:	28a8      	cmp	r0, #168	@ 0xa8
 8002938:	d0f3      	beq.n	8002922 <RI_SetRegisterGlobal+0xae>
 800293a:	d813      	bhi.n	8002964 <RI_SetRegisterGlobal+0xf0>
 800293c:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8002940:	2828      	cmp	r0, #40	@ 0x28
 8002942:	d0ee      	beq.n	8002922 <RI_SetRegisterGlobal+0xae>
 8002944:	2005      	movs	r0, #5
}
 8002946:	f85d 4b04 	ldr.w	r4, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002950:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8002954:	bf0c      	ite	eq
 8002956:	2004      	moveq	r0, #4
 8002958:	2005      	movne	r0, #5
 800295a:	e7c1      	b.n	80028e0 <RI_SetRegisterGlobal+0x6c>
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 800295c:	2300      	movs	r3, #0
 800295e:	7013      	strb	r3, [r2, #0]
      retVal = MCP_ERROR_RO_REG;
 8002960:	2004      	movs	r0, #4
 8002962:	e7a3      	b.n	80028ac <RI_SetRegisterGlobal+0x38>
 8002964:	28e8      	cmp	r0, #232	@ 0xe8
 8002966:	d1ed      	bne.n	8002944 <RI_SetRegisterGlobal+0xd0>
 8002968:	e7db      	b.n	8002922 <RI_SetRegisterGlobal+0xae>
  uint8_t retVal = MCP_CMD_OK;
 800296a:	2000      	movs	r0, #0
 800296c:	e7b8      	b.n	80028e0 <RI_SetRegisterGlobal+0x6c>
        *size = 0;
 800296e:	2200      	movs	r2, #0
 8002970:	801a      	strh	r2, [r3, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8002972:	200a      	movs	r0, #10
 8002974:	e79a      	b.n	80028ac <RI_SetRegisterGlobal+0x38>
 8002976:	bf00      	nop

08002978 <RI_SetRegisterMotor1>:
{
 8002978:	b530      	push	{r4, r5, lr}
 800297a:	b083      	sub	sp, #12
  switch(typeID)
 800297c:	3908      	subs	r1, #8
{
 800297e:	f9bd c018 	ldrsh.w	ip, [sp, #24]
 8002982:	4696      	mov	lr, r2
 8002984:	461c      	mov	r4, r3
  switch(typeID)
 8002986:	2920      	cmp	r1, #32
 8002988:	d812      	bhi.n	80029b0 <RI_SetRegisterMotor1+0x38>
 800298a:	e8df f001 	tbb	[pc, r1]
 800298e:	1116      	.short	0x1116
 8002990:	11111111 	.word	0x11111111
 8002994:	11231111 	.word	0x11231111
 8002998:	11111111 	.word	0x11111111
 800299c:	11841111 	.word	0x11841111
 80029a0:	11111111 	.word	0x11111111
 80029a4:	114b1111 	.word	0x114b1111
 80029a8:	11111111 	.word	0x11111111
 80029ac:	1111      	.short	0x1111
 80029ae:	62          	.byte	0x62
 80029af:	00          	.byte	0x00
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 80029b0:	2300      	movs	r3, #0
 80029b2:	8023      	strh	r3, [r4, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 80029b4:	2007      	movs	r0, #7
}
 80029b6:	b003      	add	sp, #12
 80029b8:	bd30      	pop	{r4, r5, pc}
      switch (regID)
 80029ba:	2888      	cmp	r0, #136	@ 0x88
 80029bc:	f000 81c2 	beq.w	8002d44 <RI_SetRegisterMotor1+0x3cc>
 80029c0:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
 80029c4:	2848      	cmp	r0, #72	@ 0x48
 80029c6:	bf0c      	ite	eq
 80029c8:	2004      	moveq	r0, #4
 80029ca:	2005      	movne	r0, #5
      *size = 1;
 80029cc:	2301      	movs	r3, #1
 80029ce:	8023      	strh	r3, [r4, #0]
}
 80029d0:	b003      	add	sp, #12
 80029d2:	bd30      	pop	{r4, r5, pc}
      uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 80029d4:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
 80029d8:	8815      	ldrh	r5, [r2, #0]
      switch (regID)
 80029da:	f000 8255 	beq.w	8002e88 <RI_SetRegisterMotor1+0x510>
 80029de:	f200 80b6 	bhi.w	8002b4e <RI_SetRegisterMotor1+0x1d6>
 80029e2:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 80029e6:	f000 8276 	beq.w	8002ed6 <RI_SetRegisterMotor1+0x55e>
 80029ea:	f240 8095 	bls.w	8002b18 <RI_SetRegisterMotor1+0x1a0>
 80029ee:	f5b0 7f64 	cmp.w	r0, #912	@ 0x390
 80029f2:	f000 8263 	beq.w	8002ebc <RI_SetRegisterMotor1+0x544>
 80029f6:	d968      	bls.n	8002aca <RI_SetRegisterMotor1+0x152>
 80029f8:	f5b0 6f92 	cmp.w	r0, #1168	@ 0x490
 80029fc:	f000 823a 	beq.w	8002e74 <RI_SetRegisterMotor1+0x4fc>
 8002a00:	d959      	bls.n	8002ab6 <RI_SetRegisterMotor1+0x13e>
 8002a02:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 8002a06:	d054      	beq.n	8002ab2 <RI_SetRegisterMotor1+0x13a>
 8002a08:	d97c      	bls.n	8002b04 <RI_SetRegisterMotor1+0x18c>
 8002a0a:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 8002a0e:	d050      	beq.n	8002ab2 <RI_SetRegisterMotor1+0x13a>
 8002a10:	d96f      	bls.n	8002af2 <RI_SetRegisterMotor1+0x17a>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002a12:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 8002a16:	bf0c      	ite	eq
 8002a18:	2004      	moveq	r0, #4
 8002a1a:	2005      	movne	r0, #5
      *size = 2;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	8023      	strh	r3, [r4, #0]
}
 8002a20:	b003      	add	sp, #12
 8002a22:	bd30      	pop	{r4, r5, pc}
  *size= 1U ; /* /0 is the min String size */
 8002a24:	2001      	movs	r0, #1
 8002a26:	8020      	strh	r0, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002a28:	f992 3000 	ldrsb.w	r3, [r2]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 8173 	beq.w	8002d18 <RI_SetRegisterMotor1+0x3a0>
 8002a32:	fa1f f38c 	uxth.w	r3, ip
 8002a36:	e005      	b.n	8002a44 <RI_SetRegisterMotor1+0xcc>
    *size = *size + 1U;
 8002a38:	8020      	strh	r0, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002a3a:	f91e 1f01 	ldrsb.w	r1, [lr, #1]!
 8002a3e:	2900      	cmp	r1, #0
 8002a40:	f000 816a 	beq.w	8002d18 <RI_SetRegisterMotor1+0x3a0>
    *size = *size + 1U;
 8002a44:	f100 0c01 	add.w	ip, r0, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002a48:	4283      	cmp	r3, r0
    *size = *size + 1U;
 8002a4a:	fa1f f08c 	uxth.w	r0, ip
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002a4e:	d8f3      	bhi.n	8002a38 <RI_SetRegisterMotor1+0xc0>
 8002a50:	e152      	b.n	8002cf8 <RI_SetRegisterMotor1+0x380>
      uint16_t rawSize = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8002a52:	8811      	ldrh	r1, [r2, #0]
      *size = rawSize + 2U;
 8002a54:	1c8a      	adds	r2, r1, #2
 8002a56:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 8002a58:	fa1f f38c 	uxth.w	r3, ip
 8002a5c:	429a      	cmp	r2, r3
      *size = rawSize + 2U;
 8002a5e:	8022      	strh	r2, [r4, #0]
      if (*size > (uint16_t)dataAvailable)
 8002a60:	f200 815e 	bhi.w	8002d20 <RI_SetRegisterMotor1+0x3a8>
        switch (regID)
 8002a64:	f5b0 7f0a 	cmp.w	r0, #552	@ 0x228
 8002a68:	f000 81a2 	beq.w	8002db0 <RI_SetRegisterMotor1+0x438>
 8002a6c:	f200 8146 	bhi.w	8002cfc <RI_SetRegisterMotor1+0x384>
 8002a70:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 8002a74:	f000 818e 	beq.w	8002d94 <RI_SetRegisterMotor1+0x41c>
 8002a78:	f240 8139 	bls.w	8002cee <RI_SetRegisterMotor1+0x376>
 8002a7c:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 8002a80:	f040 8132 	bne.w	8002ce8 <RI_SetRegisterMotor1+0x370>
            MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 8002a84:	f8be 2006 	ldrh.w	r2, [lr, #6]
 8002a88:	f9be 1002 	ldrsh.w	r1, [lr, #2]
 8002a8c:	48a6      	ldr	r0, [pc, #664]	@ (8002d28 <RI_SetRegisterMotor1+0x3b0>)
 8002a8e:	f7fe fc5f 	bl	8001350 <MCI_ExecTorqueRamp>
  uint8_t retVal = MCP_CMD_OK;
 8002a92:	2000      	movs	r0, #0
 8002a94:	e78f      	b.n	80029b6 <RI_SetRegisterMotor1+0x3e>
      switch (regID)
 8002a96:	2898      	cmp	r0, #152	@ 0x98
 8002a98:	f000 815c 	beq.w	8002d54 <RI_SetRegisterMotor1+0x3dc>
 8002a9c:	d84e      	bhi.n	8002b3c <RI_SetRegisterMotor1+0x1c4>
 8002a9e:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8002aa2:	2818      	cmp	r0, #24
 8002aa4:	bf0c      	ite	eq
 8002aa6:	2004      	moveq	r0, #4
 8002aa8:	2005      	movne	r0, #5
      *size = 4;
 8002aaa:	2304      	movs	r3, #4
 8002aac:	8023      	strh	r3, [r4, #0]
}
 8002aae:	b003      	add	sp, #12
 8002ab0:	bd30      	pop	{r4, r5, pc}
 8002ab2:	2004      	movs	r0, #4
 8002ab4:	e7b2      	b.n	8002a1c <RI_SetRegisterMotor1+0xa4>
 8002ab6:	f5b0 6f8a 	cmp.w	r0, #1104	@ 0x450
 8002aba:	f040 80d2 	bne.w	8002c62 <RI_SetRegisterMotor1+0x2ea>
          PID_SetKI (&(&STO_PLL_M1)->PIRegulator, (int16_t)regdata16);
 8002abe:	489b      	ldr	r0, [pc, #620]	@ (8002d2c <RI_SetRegisterMotor1+0x3b4>)
 8002ac0:	b229      	sxth	r1, r5
 8002ac2:	f005 fc13 	bl	80082ec <PID_SetKI>
  uint8_t retVal = MCP_CMD_OK;
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	e7a8      	b.n	8002a1c <RI_SetRegisterMotor1+0xa4>
 8002aca:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 8002ace:	f000 8220 	beq.w	8002f12 <RI_SetRegisterMotor1+0x59a>
 8002ad2:	f5b0 7f54 	cmp.w	r0, #848	@ 0x350
 8002ad6:	d15f      	bne.n	8002b98 <RI_SetRegisterMotor1+0x220>
          STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8002ad8:	aa01      	add	r2, sp, #4
 8002ada:	f10d 0102 	add.w	r1, sp, #2
 8002ade:	4894      	ldr	r0, [pc, #592]	@ (8002d30 <RI_SetRegisterMotor1+0x3b8>)
 8002ae0:	f007 f966 	bl	8009db0 <STO_PLL_GetObserverGains>
          STO_PLL_SetObserverGains(&STO_PLL_M1, (int16_t)regdata16, hC2);
 8002ae4:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002ae8:	4891      	ldr	r0, [pc, #580]	@ (8002d30 <RI_SetRegisterMotor1+0x3b8>)
 8002aea:	b229      	sxth	r1, r5
 8002aec:	f007 f968 	bl	8009dc0 <STO_PLL_SetObserverGains>
          break;
 8002af0:	e7e9      	b.n	8002ac6 <RI_SetRegisterMotor1+0x14e>
 8002af2:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 8002af6:	d0dc      	beq.n	8002ab2 <RI_SetRegisterMotor1+0x13a>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002af8:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 8002afc:	bf0c      	ite	eq
 8002afe:	2004      	moveq	r0, #4
 8002b00:	2005      	movne	r0, #5
 8002b02:	e78b      	b.n	8002a1c <RI_SetRegisterMotor1+0xa4>
 8002b04:	f5b0 6ff2 	cmp.w	r0, #1936	@ 0x790
 8002b08:	d0d3      	beq.n	8002ab2 <RI_SetRegisterMotor1+0x13a>
 8002b0a:	d93d      	bls.n	8002b88 <RI_SetRegisterMotor1+0x210>
 8002b0c:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 8002b10:	bf0c      	ite	eq
 8002b12:	2004      	moveq	r0, #4
 8002b14:	2005      	movne	r0, #5
 8002b16:	e781      	b.n	8002a1c <RI_SetRegisterMotor1+0xa4>
 8002b18:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 8002b1c:	f000 81af 	beq.w	8002e7e <RI_SetRegisterMotor1+0x506>
 8002b20:	d942      	bls.n	8002ba8 <RI_SetRegisterMotor1+0x230>
 8002b22:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 8002b26:	f000 81ef 	beq.w	8002f08 <RI_SetRegisterMotor1+0x590>
 8002b2a:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 8002b2e:	f040 8098 	bne.w	8002c62 <RI_SetRegisterMotor1+0x2ea>
          PID_SetKD(&PIDIqHandle_M1, (int16_t)regdata16);
 8002b32:	4880      	ldr	r0, [pc, #512]	@ (8002d34 <RI_SetRegisterMotor1+0x3bc>)
 8002b34:	b229      	sxth	r1, r5
 8002b36:	f005 fc09 	bl	800834c <PID_SetKD>
          break;
 8002b3a:	e7c4      	b.n	8002ac6 <RI_SetRegisterMotor1+0x14e>
 8002b3c:	28d8      	cmp	r0, #216	@ 0xd8
 8002b3e:	f000 8120 	beq.w	8002d82 <RI_SetRegisterMotor1+0x40a>
 8002b42:	f5b0 7f8c 	cmp.w	r0, #280	@ 0x118
 8002b46:	bf0c      	ite	eq
 8002b48:	2004      	moveq	r0, #4
 8002b4a:	2005      	movne	r0, #5
 8002b4c:	e7ad      	b.n	8002aaa <RI_SetRegisterMotor1+0x132>
 8002b4e:	f241 5350 	movw	r3, #5456	@ 0x1550
 8002b52:	4298      	cmp	r0, r3
 8002b54:	f000 81ad 	beq.w	8002eb2 <RI_SetRegisterMotor1+0x53a>
 8002b58:	d948      	bls.n	8002bec <RI_SetRegisterMotor1+0x274>
 8002b5a:	f241 6350 	movw	r3, #5712	@ 0x1650
 8002b5e:	4298      	cmp	r0, r3
 8002b60:	f000 81a2 	beq.w	8002ea8 <RI_SetRegisterMotor1+0x530>
 8002b64:	d934      	bls.n	8002bd0 <RI_SetRegisterMotor1+0x258>
 8002b66:	f641 1310 	movw	r3, #6416	@ 0x1910
 8002b6a:	4298      	cmp	r0, r3
 8002b6c:	f000 81c7 	beq.w	8002efe <RI_SetRegisterMotor1+0x586>
 8002b70:	d925      	bls.n	8002bbe <RI_SetRegisterMotor1+0x246>
 8002b72:	f641 2390 	movw	r3, #6800	@ 0x1a90
 8002b76:	4298      	cmp	r0, r3
 8002b78:	d09b      	beq.n	8002ab2 <RI_SetRegisterMotor1+0x13a>
 8002b7a:	f641 3358 	movw	r3, #7000	@ 0x1b58
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002b7e:	4298      	cmp	r0, r3
 8002b80:	bf0c      	ite	eq
 8002b82:	2004      	moveq	r0, #4
 8002b84:	2005      	movne	r0, #5
 8002b86:	e749      	b.n	8002a1c <RI_SetRegisterMotor1+0xa4>
 8002b88:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8002b8c:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8002b90:	bf0c      	ite	eq
 8002b92:	2004      	moveq	r0, #4
 8002b94:	2005      	movne	r0, #5
 8002b96:	e741      	b.n	8002a1c <RI_SetRegisterMotor1+0xa4>
 8002b98:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 8002b9c:	d161      	bne.n	8002c62 <RI_SetRegisterMotor1+0x2ea>
          PID_SetKI(&PIDIdHandle_M1, (int16_t)regdata16);
 8002b9e:	4866      	ldr	r0, [pc, #408]	@ (8002d38 <RI_SetRegisterMotor1+0x3c0>)
 8002ba0:	b229      	sxth	r1, r5
 8002ba2:	f005 fba3 	bl	80082ec <PID_SetKI>
          break;
 8002ba6:	e78e      	b.n	8002ac6 <RI_SetRegisterMotor1+0x14e>
 8002ba8:	28d0      	cmp	r0, #208	@ 0xd0
 8002baa:	f000 81a3 	beq.w	8002ef4 <RI_SetRegisterMotor1+0x57c>
 8002bae:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 8002bb2:	d138      	bne.n	8002c26 <RI_SetRegisterMotor1+0x2ae>
          PID_SetKD(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8002bb4:	4861      	ldr	r0, [pc, #388]	@ (8002d3c <RI_SetRegisterMotor1+0x3c4>)
 8002bb6:	b229      	sxth	r1, r5
 8002bb8:	f005 fbc8 	bl	800834c <PID_SetKD>
          break;
 8002bbc:	e783      	b.n	8002ac6 <RI_SetRegisterMotor1+0x14e>
 8002bbe:	f641 03d0 	movw	r3, #6352	@ 0x18d0
 8002bc2:	4298      	cmp	r0, r3
 8002bc4:	d14d      	bne.n	8002c62 <RI_SetRegisterMotor1+0x2ea>
          PID_SetKIDivisorPOW2 (&(&STO_PLL_M1)->PIRegulator,regdata16);
 8002bc6:	4859      	ldr	r0, [pc, #356]	@ (8002d2c <RI_SetRegisterMotor1+0x3b4>)
 8002bc8:	4629      	mov	r1, r5
 8002bca:	f005 fbab 	bl	8008324 <PID_SetKIDivisorPOW2>
          break;
 8002bce:	e77a      	b.n	8002ac6 <RI_SetRegisterMotor1+0x14e>
 8002bd0:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 8002bd4:	4298      	cmp	r0, r3
 8002bd6:	f000 8188 	beq.w	8002eea <RI_SetRegisterMotor1+0x572>
 8002bda:	f241 6310 	movw	r3, #5648	@ 0x1610
 8002bde:	4298      	cmp	r0, r3
 8002be0:	d118      	bne.n	8002c14 <RI_SetRegisterMotor1+0x29c>
          PID_SetKIDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8002be2:	4854      	ldr	r0, [pc, #336]	@ (8002d34 <RI_SetRegisterMotor1+0x3bc>)
 8002be4:	4629      	mov	r1, r5
 8002be6:	f005 fb9d 	bl	8008324 <PID_SetKIDivisorPOW2>
          break;
 8002bea:	e76c      	b.n	8002ac6 <RI_SetRegisterMotor1+0x14e>
 8002bec:	f241 4350 	movw	r3, #5200	@ 0x1450
 8002bf0:	4298      	cmp	r0, r3
 8002bf2:	f000 8154 	beq.w	8002e9e <RI_SetRegisterMotor1+0x526>
 8002bf6:	d926      	bls.n	8002c46 <RI_SetRegisterMotor1+0x2ce>
 8002bf8:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 8002bfc:	4298      	cmp	r0, r3
 8002bfe:	f000 816f 	beq.w	8002ee0 <RI_SetRegisterMotor1+0x568>
 8002c02:	f241 5310 	movw	r3, #5392	@ 0x1510
 8002c06:	4298      	cmp	r0, r3
 8002c08:	d114      	bne.n	8002c34 <RI_SetRegisterMotor1+0x2bc>
          PID_SetKPDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8002c0a:	484b      	ldr	r0, [pc, #300]	@ (8002d38 <RI_SetRegisterMotor1+0x3c0>)
 8002c0c:	4629      	mov	r1, r5
 8002c0e:	f005 fb7b 	bl	8008308 <PID_SetKPDivisorPOW2>
          break;
 8002c12:	e758      	b.n	8002ac6 <RI_SetRegisterMotor1+0x14e>
 8002c14:	f241 5390 	movw	r3, #5520	@ 0x1590
 8002c18:	4298      	cmp	r0, r3
 8002c1a:	d122      	bne.n	8002c62 <RI_SetRegisterMotor1+0x2ea>
          PID_SetKDDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8002c1c:	4846      	ldr	r0, [pc, #280]	@ (8002d38 <RI_SetRegisterMotor1+0x3c0>)
 8002c1e:	4629      	mov	r1, r5
 8002c20:	f005 fb9c 	bl	800835c <PID_SetKDDivisorPOW2>
          break;
 8002c24:	e74f      	b.n	8002ac6 <RI_SetRegisterMotor1+0x14e>
 8002c26:	2890      	cmp	r0, #144	@ 0x90
 8002c28:	d11b      	bne.n	8002c62 <RI_SetRegisterMotor1+0x2ea>
          PID_SetKP(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8002c2a:	4844      	ldr	r0, [pc, #272]	@ (8002d3c <RI_SetRegisterMotor1+0x3c4>)
 8002c2c:	b229      	sxth	r1, r5
 8002c2e:	f005 fb5b 	bl	80082e8 <PID_SetKP>
          break;
 8002c32:	e748      	b.n	8002ac6 <RI_SetRegisterMotor1+0x14e>
 8002c34:	f241 4390 	movw	r3, #5264	@ 0x1490
 8002c38:	4298      	cmp	r0, r3
 8002c3a:	d112      	bne.n	8002c62 <RI_SetRegisterMotor1+0x2ea>
          PID_SetKIDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8002c3c:	483f      	ldr	r0, [pc, #252]	@ (8002d3c <RI_SetRegisterMotor1+0x3c4>)
 8002c3e:	4629      	mov	r1, r5
 8002c40:	f005 fb70 	bl	8008324 <PID_SetKIDivisorPOW2>
          break;
 8002c44:	e73f      	b.n	8002ac6 <RI_SetRegisterMotor1+0x14e>
 8002c46:	f5b0 6f39 	cmp.w	r0, #2960	@ 0xb90
 8002c4a:	f43f af32 	beq.w	8002ab2 <RI_SetRegisterMotor1+0x13a>
 8002c4e:	d915      	bls.n	8002c7c <RI_SetRegisterMotor1+0x304>
 8002c50:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8002c54:	f43f af37 	beq.w	8002ac6 <RI_SetRegisterMotor1+0x14e>
 8002c58:	d905      	bls.n	8002c66 <RI_SetRegisterMotor1+0x2ee>
 8002c5a:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8002c5e:	f43f af32 	beq.w	8002ac6 <RI_SetRegisterMotor1+0x14e>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002c62:	2005      	movs	r0, #5
 8002c64:	e6da      	b.n	8002a1c <RI_SetRegisterMotor1+0xa4>
 8002c66:	f5b0 6f45 	cmp.w	r0, #3152	@ 0xc50
 8002c6a:	f43f af22 	beq.w	8002ab2 <RI_SetRegisterMotor1+0x13a>
 8002c6e:	d913      	bls.n	8002c98 <RI_SetRegisterMotor1+0x320>
 8002c70:	f5b0 6f49 	cmp.w	r0, #3216	@ 0xc90
 8002c74:	bf0c      	ite	eq
 8002c76:	2004      	moveq	r0, #4
 8002c78:	2005      	movne	r0, #5
 8002c7a:	e6cf      	b.n	8002a1c <RI_SetRegisterMotor1+0xa4>
 8002c7c:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
 8002c80:	d114      	bne.n	8002cac <RI_SetRegisterMotor1+0x334>
          currComp = MCI_GetIqdref(pMCIN);
 8002c82:	4829      	ldr	r0, [pc, #164]	@ (8002d28 <RI_SetRegisterMotor1+0x3b0>)
 8002c84:	f7fe fc78 	bl	8001578 <MCI_GetIqdref>
 8002c88:	9001      	str	r0, [sp, #4]
          currComp.d = (int16_t)regdata16;
 8002c8a:	f8ad 5006 	strh.w	r5, [sp, #6]
          MCI_SetCurrentReferences(pMCIN,currComp);
 8002c8e:	9901      	ldr	r1, [sp, #4]
 8002c90:	4825      	ldr	r0, [pc, #148]	@ (8002d28 <RI_SetRegisterMotor1+0x3b0>)
 8002c92:	f7fe fb67 	bl	8001364 <MCI_SetCurrentReferences>
          break;
 8002c96:	e716      	b.n	8002ac6 <RI_SetRegisterMotor1+0x14e>
 8002c98:	f5b0 6f3d 	cmp.w	r0, #3024	@ 0xbd0
 8002c9c:	f43f af09 	beq.w	8002ab2 <RI_SetRegisterMotor1+0x13a>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002ca0:	f5b0 6f41 	cmp.w	r0, #3088	@ 0xc10
 8002ca4:	bf0c      	ite	eq
 8002ca6:	2004      	moveq	r0, #4
 8002ca8:	2005      	movne	r0, #5
 8002caa:	e6b7      	b.n	8002a1c <RI_SetRegisterMotor1+0xa4>
 8002cac:	d3d9      	bcc.n	8002c62 <RI_SetRegisterMotor1+0x2ea>
 8002cae:	f5b0 6f25 	cmp.w	r0, #2640	@ 0xa50
 8002cb2:	f43f aefe 	beq.w	8002ab2 <RI_SetRegisterMotor1+0x13a>
 8002cb6:	d909      	bls.n	8002ccc <RI_SetRegisterMotor1+0x354>
 8002cb8:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 8002cbc:	f43f aef9 	beq.w	8002ab2 <RI_SetRegisterMotor1+0x13a>
 8002cc0:	f5b0 6f35 	cmp.w	r0, #2896	@ 0xb50
 8002cc4:	bf0c      	ite	eq
 8002cc6:	2004      	moveq	r0, #4
 8002cc8:	2005      	movne	r0, #5
 8002cca:	e6a7      	b.n	8002a1c <RI_SetRegisterMotor1+0xa4>
 8002ccc:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 8002cd0:	f43f aeef 	beq.w	8002ab2 <RI_SetRegisterMotor1+0x13a>
 8002cd4:	f5b0 6f21 	cmp.w	r0, #2576	@ 0xa10
 8002cd8:	bf0c      	ite	eq
 8002cda:	2004      	moveq	r0, #4
 8002cdc:	2005      	movne	r0, #5
 8002cde:	e69d      	b.n	8002a1c <RI_SetRegisterMotor1+0xa4>
 8002ce0:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8002ce4:	2828      	cmp	r0, #40	@ 0x28
 8002ce6:	d007      	beq.n	8002cf8 <RI_SetRegisterMotor1+0x380>
 8002ce8:	2005      	movs	r0, #5
}
 8002cea:	b003      	add	sp, #12
 8002cec:	bd30      	pop	{r4, r5, pc}
 8002cee:	28a8      	cmp	r0, #168	@ 0xa8
 8002cf0:	d002      	beq.n	8002cf8 <RI_SetRegisterMotor1+0x380>
 8002cf2:	d9f5      	bls.n	8002ce0 <RI_SetRegisterMotor1+0x368>
 8002cf4:	28e8      	cmp	r0, #232	@ 0xe8
 8002cf6:	d1f7      	bne.n	8002ce8 <RI_SetRegisterMotor1+0x370>
      retVal = MCP_ERROR_RO_REG;
 8002cf8:	2004      	movs	r0, #4
 8002cfa:	e65c      	b.n	80029b6 <RI_SetRegisterMotor1+0x3e>
 8002cfc:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 8002d00:	d041      	beq.n	8002d86 <RI_SetRegisterMotor1+0x40e>
 8002d02:	f5b0 6fa5 	cmp.w	r0, #1320	@ 0x528
 8002d06:	d1ef      	bne.n	8002ce8 <RI_SetRegisterMotor1+0x370>
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8002d08:	480d      	ldr	r0, [pc, #52]	@ (8002d40 <RI_SetRegisterMotor1+0x3c8>)
 8002d0a:	f10e 0102 	add.w	r1, lr, #2
}
 8002d0e:	b003      	add	sp, #12
 8002d10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8002d14:	f005 ba14 	b.w	8008140 <MCPA_cfgLog>
    *tempdestString = (int8_t)0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	f88e 3000 	strb.w	r3, [lr]
 8002d1e:	e7eb      	b.n	8002cf8 <RI_SetRegisterMotor1+0x380>
        *size = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	8023      	strh	r3, [r4, #0]
              retVal = MCP_ERROR_BAD_RAW_FORMAT;
 8002d24:	200a      	movs	r0, #10
 8002d26:	e646      	b.n	80029b6 <RI_SetRegisterMotor1+0x3e>
 8002d28:	20000000 	.word	0x20000000
 8002d2c:	2000009c 	.word	0x2000009c
 8002d30:	20000068 	.word	0x20000068
 8002d34:	2000030c 	.word	0x2000030c
 8002d38:	200002e0 	.word	0x200002e0
 8002d3c:	20000338 	.word	0x20000338
 8002d40:	20000424 	.word	0x20000424
          uint8_t regdata8 = *data;
 8002d44:	7813      	ldrb	r3, [r2, #0]
          if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d012      	beq.n	8002d70 <RI_SetRegisterMotor1+0x3f8>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	f000 8089 	beq.w	8002e62 <RI_SetRegisterMotor1+0x4ea>
  uint8_t retVal = MCP_CMD_OK;
 8002d50:	2000      	movs	r0, #0
 8002d52:	e63b      	b.n	80029cc <RI_SetRegisterMotor1+0x54>
          MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8002d54:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002d58:	4970      	ldr	r1, [pc, #448]	@ (8002f1c <RI_SetRegisterMotor1+0x5a4>)
 8002d5a:	4871      	ldr	r0, [pc, #452]	@ (8002f20 <RI_SetRegisterMotor1+0x5a8>)
 8002d5c:	fb81 2103 	smull	r2, r1, r1, r3
 8002d60:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8002d64:	2200      	movs	r2, #0
 8002d66:	b209      	sxth	r1, r1
 8002d68:	f7fe fae8 	bl	800133c <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8002d6c:	2000      	movs	r0, #0
          break;
 8002d6e:	e69c      	b.n	8002aaa <RI_SetRegisterMotor1+0x132>
            MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 8002d70:	486b      	ldr	r0, [pc, #428]	@ (8002f20 <RI_SetRegisterMotor1+0x5a8>)
 8002d72:	f7fe fc2b 	bl	80015cc <MCI_GetTeref>
 8002d76:	2200      	movs	r2, #0
 8002d78:	4601      	mov	r1, r0
 8002d7a:	4869      	ldr	r0, [pc, #420]	@ (8002f20 <RI_SetRegisterMotor1+0x5a8>)
 8002d7c:	f7fe fae8 	bl	8001350 <MCI_ExecTorqueRamp>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8002d80:	e7e6      	b.n	8002d50 <RI_SetRegisterMotor1+0x3d8>
          retVal = MCP_ERROR_RO_REG;
 8002d82:	2004      	movs	r0, #4
 8002d84:	e691      	b.n	8002aaa <RI_SetRegisterMotor1+0x132>
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8002d86:	f8de 1002 	ldr.w	r1, [lr, #2]
            MCI_SetCurrentReferences(pMCIN, currComp);
 8002d8a:	4865      	ldr	r0, [pc, #404]	@ (8002f20 <RI_SetRegisterMotor1+0x5a8>)
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8002d8c:	9101      	str	r1, [sp, #4]
            MCI_SetCurrentReferences(pMCIN, currComp);
 8002d8e:	f7fe fae9 	bl	8001364 <MCI_SetCurrentReferences>
            break;
 8002d92:	e67e      	b.n	8002a92 <RI_SetRegisterMotor1+0x11a>
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8002d94:	f8de 1002 	ldr.w	r1, [lr, #2]
 8002d98:	4b60      	ldr	r3, [pc, #384]	@ (8002f1c <RI_SetRegisterMotor1+0x5a4>)
 8002d9a:	f8be 2006 	ldrh.w	r2, [lr, #6]
 8002d9e:	fb83 0301 	smull	r0, r3, r3, r1
 8002da2:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8002da6:	485e      	ldr	r0, [pc, #376]	@ (8002f20 <RI_SetRegisterMotor1+0x5a8>)
 8002da8:	b209      	sxth	r1, r1
 8002daa:	f7fe fac7 	bl	800133c <MCI_ExecSpeedRamp>
            break;
 8002dae:	e670      	b.n	8002a92 <RI_SetRegisterMotor1+0x11a>
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8002db0:	074b      	lsls	r3, r1, #29
 8002db2:	d1b7      	bne.n	8002d24 <RI_SetRegisterMotor1+0x3ac>
            uint8_t nbrOfPhase = (((uint8_t)rawSize) / 8U);
 8002db4:	b2c9      	uxtb	r1, r1
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8002db6:	292f      	cmp	r1, #47	@ 0x2f
 8002db8:	d8b4      	bhi.n	8002d24 <RI_SetRegisterMotor1+0x3ac>
              for (i = 0; i <nbrOfPhase; i++)
 8002dba:	08c9      	lsrs	r1, r1, #3
 8002dbc:	f43f ae69 	beq.w	8002a92 <RI_SetRegisterMotor1+0x11a>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002dc0:	f9be 3002 	ldrsh.w	r3, [lr, #2]
 8002dc4:	4a55      	ldr	r2, [pc, #340]	@ (8002f1c <RI_SetRegisterMotor1+0x5a4>)
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002dc6:	f8be 5008 	ldrh.w	r5, [lr, #8]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002dca:	fb82 4003 	smull	r4, r0, r2, r3
 8002dce:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
    retValue = false;
  }
  else
  {
#endif
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 8002dd2:	4b54      	ldr	r3, [pc, #336]	@ (8002f24 <RI_SetRegisterMotor1+0x5ac>)
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002dd4:	f9be 4006 	ldrsh.w	r4, [lr, #6]
 8002dd8:	821c      	strh	r4, [r3, #16]
              for (i = 0; i <nbrOfPhase; i++)
 8002dda:	2901      	cmp	r1, #1
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8002ddc:	819d      	strh	r5, [r3, #12]
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8002dde:	81d8      	strh	r0, [r3, #14]
 8002de0:	f43f ae57 	beq.w	8002a92 <RI_SetRegisterMotor1+0x11a>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002de4:	f9be 400a 	ldrsh.w	r4, [lr, #10]
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002de8:	f9be 500e 	ldrsh.w	r5, [lr, #14]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002dec:	fb82 c004 	smull	ip, r0, r2, r4
 8002df0:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
              for (i = 0; i <nbrOfPhase; i++)
 8002df4:	2902      	cmp	r1, #2
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002df6:	f8be 4010 	ldrh.w	r4, [lr, #16]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8002dfa:	831c      	strh	r4, [r3, #24]
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 8002dfc:	839d      	strh	r5, [r3, #28]
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8002dfe:	8358      	strh	r0, [r3, #26]
              for (i = 0; i <nbrOfPhase; i++)
 8002e00:	f43f ae47 	beq.w	8002a92 <RI_SetRegisterMotor1+0x11a>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002e04:	f9be 4012 	ldrsh.w	r4, [lr, #18]
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002e08:	f9be 5016 	ldrsh.w	r5, [lr, #22]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002e0c:	fb82 c004 	smull	ip, r0, r2, r4
 8002e10:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
              for (i = 0; i <nbrOfPhase; i++)
 8002e14:	2903      	cmp	r1, #3
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002e16:	f8be 4018 	ldrh.w	r4, [lr, #24]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8002e1a:	849c      	strh	r4, [r3, #36]	@ 0x24
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 8002e1c:	851d      	strh	r5, [r3, #40]	@ 0x28
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8002e1e:	84d8      	strh	r0, [r3, #38]	@ 0x26
              for (i = 0; i <nbrOfPhase; i++)
 8002e20:	f43f ae37 	beq.w	8002a92 <RI_SetRegisterMotor1+0x11a>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002e24:	f9be 401a 	ldrsh.w	r4, [lr, #26]
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002e28:	f9be 501e 	ldrsh.w	r5, [lr, #30]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002e2c:	fb82 c004 	smull	ip, r0, r2, r4
 8002e30:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
              for (i = 0; i <nbrOfPhase; i++)
 8002e34:	2905      	cmp	r1, #5
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002e36:	f8be 4020 	ldrh.w	r4, [lr, #32]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8002e3a:	861c      	strh	r4, [r3, #48]	@ 0x30
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 8002e3c:	869d      	strh	r5, [r3, #52]	@ 0x34
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8002e3e:	8658      	strh	r0, [r3, #50]	@ 0x32
              for (i = 0; i <nbrOfPhase; i++)
 8002e40:	f47f ae27 	bne.w	8002a92 <RI_SetRegisterMotor1+0x11a>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002e44:	f9be 1022 	ldrsh.w	r1, [lr, #34]	@ 0x22
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002e48:	f9be 0026 	ldrsh.w	r0, [lr, #38]	@ 0x26
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002e4c:	fb82 4201 	smull	r4, r2, r2, r1
 8002e50:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002e54:	f8be 4028 	ldrh.w	r4, [lr, #40]	@ 0x28
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8002e58:	879c      	strh	r4, [r3, #60]	@ 0x3c
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 8002e5a:	f8a3 0040 	strh.w	r0, [r3, #64]	@ 0x40
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8002e5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
              for (i = 0; i <nbrOfPhase; i++)
 8002e60:	e617      	b.n	8002a92 <RI_SetRegisterMotor1+0x11a>
            MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 8002e62:	482f      	ldr	r0, [pc, #188]	@ (8002f20 <RI_SetRegisterMotor1+0x5a8>)
 8002e64:	f7fe fb5a 	bl	800151c <MCI_GetMecSpeedRefUnit>
 8002e68:	2200      	movs	r2, #0
 8002e6a:	4601      	mov	r1, r0
 8002e6c:	482c      	ldr	r0, [pc, #176]	@ (8002f20 <RI_SetRegisterMotor1+0x5a8>)
 8002e6e:	f7fe fa65 	bl	800133c <MCI_ExecSpeedRamp>
 8002e72:	e76d      	b.n	8002d50 <RI_SetRegisterMotor1+0x3d8>
          PID_SetKP (&(&STO_PLL_M1)->PIRegulator, (int16_t)regdata16);
 8002e74:	482c      	ldr	r0, [pc, #176]	@ (8002f28 <RI_SetRegisterMotor1+0x5b0>)
 8002e76:	b229      	sxth	r1, r5
 8002e78:	f005 fa36 	bl	80082e8 <PID_SetKP>
          break;
 8002e7c:	e623      	b.n	8002ac6 <RI_SetRegisterMotor1+0x14e>
          PID_SetKP(&PIDIqHandle_M1, (int16_t)regdata16);
 8002e7e:	482b      	ldr	r0, [pc, #172]	@ (8002f2c <RI_SetRegisterMotor1+0x5b4>)
 8002e80:	b229      	sxth	r1, r5
 8002e82:	f005 fa31 	bl	80082e8 <PID_SetKP>
          break;
 8002e86:	e61e      	b.n	8002ac6 <RI_SetRegisterMotor1+0x14e>
          currComp = MCI_GetIqdref(pMCIN);
 8002e88:	4825      	ldr	r0, [pc, #148]	@ (8002f20 <RI_SetRegisterMotor1+0x5a8>)
 8002e8a:	f7fe fb75 	bl	8001578 <MCI_GetIqdref>
 8002e8e:	9001      	str	r0, [sp, #4]
          currComp.q = (int16_t)regdata16;
 8002e90:	f8ad 5004 	strh.w	r5, [sp, #4]
          MCI_SetCurrentReferences(pMCIN,currComp);
 8002e94:	9901      	ldr	r1, [sp, #4]
 8002e96:	4822      	ldr	r0, [pc, #136]	@ (8002f20 <RI_SetRegisterMotor1+0x5a8>)
 8002e98:	f7fe fa64 	bl	8001364 <MCI_SetCurrentReferences>
          break;
 8002e9c:	e613      	b.n	8002ac6 <RI_SetRegisterMotor1+0x14e>
          PID_SetKPDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8002e9e:	4824      	ldr	r0, [pc, #144]	@ (8002f30 <RI_SetRegisterMotor1+0x5b8>)
 8002ea0:	4629      	mov	r1, r5
 8002ea2:	f005 fa31 	bl	8008308 <PID_SetKPDivisorPOW2>
          break;
 8002ea6:	e60e      	b.n	8002ac6 <RI_SetRegisterMotor1+0x14e>
          PID_SetKDDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8002ea8:	4820      	ldr	r0, [pc, #128]	@ (8002f2c <RI_SetRegisterMotor1+0x5b4>)
 8002eaa:	4629      	mov	r1, r5
 8002eac:	f005 fa56 	bl	800835c <PID_SetKDDivisorPOW2>
          break;
 8002eb0:	e609      	b.n	8002ac6 <RI_SetRegisterMotor1+0x14e>
          PID_SetKIDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8002eb2:	4820      	ldr	r0, [pc, #128]	@ (8002f34 <RI_SetRegisterMotor1+0x5bc>)
 8002eb4:	4629      	mov	r1, r5
 8002eb6:	f005 fa35 	bl	8008324 <PID_SetKIDivisorPOW2>
          break;
 8002eba:	e604      	b.n	8002ac6 <RI_SetRegisterMotor1+0x14e>
          STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8002ebc:	aa01      	add	r2, sp, #4
 8002ebe:	f10d 0102 	add.w	r1, sp, #2
 8002ec2:	481d      	ldr	r0, [pc, #116]	@ (8002f38 <RI_SetRegisterMotor1+0x5c0>)
 8002ec4:	f006 ff74 	bl	8009db0 <STO_PLL_GetObserverGains>
          STO_PLL_SetObserverGains(&STO_PLL_M1, hC1, (int16_t)regdata16);
 8002ec8:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002ecc:	481a      	ldr	r0, [pc, #104]	@ (8002f38 <RI_SetRegisterMotor1+0x5c0>)
 8002ece:	b22a      	sxth	r2, r5
 8002ed0:	f006 ff76 	bl	8009dc0 <STO_PLL_SetObserverGains>
          break;
 8002ed4:	e5f7      	b.n	8002ac6 <RI_SetRegisterMotor1+0x14e>
          PID_SetKP(&PIDIdHandle_M1, (int16_t)regdata16);
 8002ed6:	4817      	ldr	r0, [pc, #92]	@ (8002f34 <RI_SetRegisterMotor1+0x5bc>)
 8002ed8:	b229      	sxth	r1, r5
 8002eda:	f005 fa05 	bl	80082e8 <PID_SetKP>
          break;
 8002ede:	e5f2      	b.n	8002ac6 <RI_SetRegisterMotor1+0x14e>
          PID_SetKDDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8002ee0:	4813      	ldr	r0, [pc, #76]	@ (8002f30 <RI_SetRegisterMotor1+0x5b8>)
 8002ee2:	4629      	mov	r1, r5
 8002ee4:	f005 fa3a 	bl	800835c <PID_SetKDDivisorPOW2>
          break;
 8002ee8:	e5ed      	b.n	8002ac6 <RI_SetRegisterMotor1+0x14e>
          PID_SetKPDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8002eea:	4810      	ldr	r0, [pc, #64]	@ (8002f2c <RI_SetRegisterMotor1+0x5b4>)
 8002eec:	4629      	mov	r1, r5
 8002eee:	f005 fa0b 	bl	8008308 <PID_SetKPDivisorPOW2>
          break;
 8002ef2:	e5e8      	b.n	8002ac6 <RI_SetRegisterMotor1+0x14e>
          PID_SetKI(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8002ef4:	480e      	ldr	r0, [pc, #56]	@ (8002f30 <RI_SetRegisterMotor1+0x5b8>)
 8002ef6:	b229      	sxth	r1, r5
 8002ef8:	f005 f9f8 	bl	80082ec <PID_SetKI>
          break;
 8002efc:	e5e3      	b.n	8002ac6 <RI_SetRegisterMotor1+0x14e>
          PID_SetKPDivisorPOW2 (&(&STO_PLL_M1)->PIRegulator,regdata16);
 8002efe:	480a      	ldr	r0, [pc, #40]	@ (8002f28 <RI_SetRegisterMotor1+0x5b0>)
 8002f00:	4629      	mov	r1, r5
 8002f02:	f005 fa01 	bl	8008308 <PID_SetKPDivisorPOW2>
          break;
 8002f06:	e5de      	b.n	8002ac6 <RI_SetRegisterMotor1+0x14e>
          PID_SetKI(&PIDIqHandle_M1, (int16_t)regdata16);
 8002f08:	4808      	ldr	r0, [pc, #32]	@ (8002f2c <RI_SetRegisterMotor1+0x5b4>)
 8002f0a:	b229      	sxth	r1, r5
 8002f0c:	f005 f9ee 	bl	80082ec <PID_SetKI>
          break;
 8002f10:	e5d9      	b.n	8002ac6 <RI_SetRegisterMotor1+0x14e>
          PID_SetKD(&PIDIdHandle_M1, (int16_t)regdata16);
 8002f12:	4808      	ldr	r0, [pc, #32]	@ (8002f34 <RI_SetRegisterMotor1+0x5bc>)
 8002f14:	b229      	sxth	r1, r5
 8002f16:	f005 fa19 	bl	800834c <PID_SetKD>
          break;
 8002f1a:	e5d4      	b.n	8002ac6 <RI_SetRegisterMotor1+0x14e>
 8002f1c:	2aaaaaab 	.word	0x2aaaaaab
 8002f20:	20000000 	.word	0x20000000
 8002f24:	20000234 	.word	0x20000234
 8002f28:	2000009c 	.word	0x2000009c
 8002f2c:	2000030c 	.word	0x2000030c
 8002f30:	20000338 	.word	0x20000338
 8002f34:	200002e0 	.word	0x200002e0
 8002f38:	20000068 	.word	0x20000068

08002f3c <RI_GetRegisterGlobal>:
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8002f3c:	b510      	push	{r4, lr}
    switch (typeID)
 8002f3e:	f1a1 0c08 	sub.w	ip, r1, #8
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8002f42:	f9bd e008 	ldrsh.w	lr, [sp, #8]
    switch (typeID)
 8002f46:	f1bc 0f20 	cmp.w	ip, #32
 8002f4a:	d812      	bhi.n	8002f72 <RI_GetRegisterGlobal+0x36>
 8002f4c:	e8df f00c 	tbb	[pc, ip]
 8002f50:	1111111b 	.word	0x1111111b
 8002f54:	11111111 	.word	0x11111111
 8002f58:	11111127 	.word	0x11111127
 8002f5c:	11111111 	.word	0x11111111
 8002f60:	11111122 	.word	0x11111122
 8002f64:	11111111 	.word	0x11111111
 8002f68:	11111135 	.word	0x11111135
 8002f6c:	11111111 	.word	0x11111111
 8002f70:	13          	.byte	0x13
 8002f71:	00          	.byte	0x00
 8002f72:	2007      	movs	r0, #7
}
 8002f74:	bd10      	pop	{r4, pc}
        switch (regID)
 8002f76:	2828      	cmp	r0, #40	@ 0x28
 8002f78:	d044      	beq.n	8003004 <RI_GetRegisterGlobal+0xc8>
        *size = (*rawSize) + 2U;
 8002f7a:	8812      	ldrh	r2, [r2, #0]
 8002f7c:	3202      	adds	r2, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002f7e:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8002f80:	b292      	uxth	r2, r2
 8002f82:	801a      	strh	r2, [r3, #0]
}
 8002f84:	bd10      	pop	{r4, pc}
        if (freeSpace > 0)
 8002f86:	f1be 0f00 	cmp.w	lr, #0
 8002f8a:	dd39      	ble.n	8003000 <RI_GetRegisterGlobal+0xc4>
 8002f8c:	2201      	movs	r2, #1
            *size= 0 ; /* */
 8002f8e:	801a      	strh	r2, [r3, #0]
              retVal = MCP_ERROR_UNKNOWN_REG;
 8002f90:	2005      	movs	r0, #5
}
 8002f92:	bd10      	pop	{r4, pc}
        if (freeSpace >= 4)
 8002f94:	f1be 0f03 	cmp.w	lr, #3
 8002f98:	dd2a      	ble.n	8002ff0 <RI_GetRegisterGlobal+0xb4>
 8002f9a:	2204      	movs	r2, #4
 8002f9c:	e7f7      	b.n	8002f8e <RI_GetRegisterGlobal+0x52>
        if (freeSpace >= 2)
 8002f9e:	f1be 0f01 	cmp.w	lr, #1
 8002fa2:	dd25      	ble.n	8002ff0 <RI_GetRegisterGlobal+0xb4>
          switch (regID)
 8002fa4:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8002fa8:	d05a      	beq.n	8003060 <RI_GetRegisterGlobal+0x124>
 8002faa:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8002fae:	bf0c      	ite	eq
 8002fb0:	2000      	moveq	r0, #0
 8002fb2:	2005      	movne	r0, #5
          *size = 2;
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	801a      	strh	r2, [r3, #0]
}
 8002fb8:	bd10      	pop	{r4, pc}
        switch (regID)
 8002fba:	2820      	cmp	r0, #32
 8002fbc:	d02c      	beq.n	8003018 <RI_GetRegisterGlobal+0xdc>
 8002fbe:	2860      	cmp	r0, #96	@ 0x60
 8002fc0:	d118      	bne.n	8002ff4 <RI_GetRegisterGlobal+0xb8>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002fc2:	4c28      	ldr	r4, [pc, #160]	@ (8003064 <RI_GetRegisterGlobal+0x128>)
 8002fc4:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 8002fc8:	2101      	movs	r1, #1
 8002fca:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002fcc:	b1a0      	cbz	r0, 8002ff8 <RI_GetRegisterGlobal+0xbc>
 8002fce:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 8002fd2:	46a4      	mov	ip, r4
 8002fd4:	e008      	b.n	8002fe8 <RI_GetRegisterGlobal+0xac>
    *tempdestString = *tempsrcString;
 8002fd6:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 8002fda:	8819      	ldrh	r1, [r3, #0]
 8002fdc:	3101      	adds	r1, #1
 8002fde:	b289      	uxth	r1, r1
 8002fe0:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002fe2:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 8002fe6:	b138      	cbz	r0, 8002ff8 <RI_GetRegisterGlobal+0xbc>
 8002fe8:	4571      	cmp	r1, lr
 8002fea:	d3f4      	bcc.n	8002fd6 <RI_GetRegisterGlobal+0x9a>
    retVal = MCP_ERROR_STRING_FORMAT;
 8002fec:	2006      	movs	r0, #6
}
 8002fee:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002ff0:	2008      	movs	r0, #8
}
 8002ff2:	bd10      	pop	{r4, pc}
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	e7ca      	b.n	8002f8e <RI_GetRegisterGlobal+0x52>
    *tempdestString = (int8_t)0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	7013      	strb	r3, [r2, #0]
  uint8_t retVal = MCP_CMD_OK;
 8002ffc:	2000      	movs	r0, #0
}
 8002ffe:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003000:	4608      	mov	r0, r1
}
 8003002:	bd10      	pop	{r4, pc}
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003004:	fa1f fe8e 	uxth.w	lr, lr
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8003008:	210a      	movs	r1, #10
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800300a:	f1be 0f0b 	cmp.w	lr, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 800300e:	8011      	strh	r1, [r2, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003010:	d81a      	bhi.n	8003048 <RI_GetRegisterGlobal+0x10c>
 8003012:	220c      	movs	r2, #12
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003014:	2008      	movs	r0, #8
 8003016:	e7b4      	b.n	8002f82 <RI_GetRegisterGlobal+0x46>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003018:	4c13      	ldr	r4, [pc, #76]	@ (8003068 <RI_GetRegisterGlobal+0x12c>)
 800301a:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 800301e:	2101      	movs	r1, #1
 8003020:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003022:	2800      	cmp	r0, #0
 8003024:	d0e8      	beq.n	8002ff8 <RI_GetRegisterGlobal+0xbc>
 8003026:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 800302a:	46a4      	mov	ip, r4
 800302c:	e009      	b.n	8003042 <RI_GetRegisterGlobal+0x106>
    *tempdestString = *tempsrcString;
 800302e:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 8003032:	8819      	ldrh	r1, [r3, #0]
 8003034:	3101      	adds	r1, #1
 8003036:	b289      	uxth	r1, r1
 8003038:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800303a:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 800303e:	2800      	cmp	r0, #0
 8003040:	d0da      	beq.n	8002ff8 <RI_GetRegisterGlobal+0xbc>
 8003042:	458e      	cmp	lr, r1
 8003044:	d8f3      	bhi.n	800302e <RI_GetRegisterGlobal+0xf2>
 8003046:	e7d1      	b.n	8002fec <RI_GetRegisterGlobal+0xb0>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8003048:	4908      	ldr	r1, [pc, #32]	@ (800306c <RI_GetRegisterGlobal+0x130>)
 800304a:	6848      	ldr	r0, [r1, #4]
 800304c:	680c      	ldr	r4, [r1, #0]
 800304e:	8909      	ldrh	r1, [r1, #8]
 8003050:	f8c2 0006 	str.w	r0, [r2, #6]
 8003054:	f8c2 4002 	str.w	r4, [r2, #2]
 8003058:	8151      	strh	r1, [r2, #10]
    uint8_t retVal = MCP_CMD_OK;
 800305a:	2000      	movs	r0, #0
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 800305c:	220c      	movs	r2, #12
 800305e:	e790      	b.n	8002f82 <RI_GetRegisterGlobal+0x46>
    uint8_t retVal = MCP_CMD_OK;
 8003060:	2000      	movs	r0, #0
 8003062:	e7a7      	b.n	8002fb4 <RI_GetRegisterGlobal+0x78>
 8003064:	0800a22c 	.word	0x0800a22c
 8003068:	0800a208 	.word	0x0800a208
 800306c:	0800a1fc 	.word	0x0800a1fc

08003070 <RI_GetRegisterMotor1>:
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8003070:	b530      	push	{r4, r5, lr}
 8003072:	b095      	sub	sp, #84	@ 0x54
 8003074:	461d      	mov	r5, r3
    switch (typeID)
 8003076:	f1a1 0308 	sub.w	r3, r1, #8
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 800307a:	f9bd c060 	ldrsh.w	ip, [sp, #96]	@ 0x60
 800307e:	4614      	mov	r4, r2
    switch (typeID)
 8003080:	2b20      	cmp	r3, #32
 8003082:	d812      	bhi.n	80030aa <RI_GetRegisterMotor1+0x3a>
 8003084:	e8df f003 	tbb	[pc, r3]
 8003088:	11111133 	.word	0x11111133
 800308c:	11111111 	.word	0x11111111
 8003090:	1111116a 	.word	0x1111116a
 8003094:	11111111 	.word	0x11111111
 8003098:	11111145 	.word	0x11111145
 800309c:	11111111 	.word	0x11111111
 80030a0:	11111160 	.word	0x11111160
 80030a4:	11111111 	.word	0x11111111
 80030a8:	14          	.byte	0x14
 80030a9:	00          	.byte	0x00
 80030aa:	2007      	movs	r0, #7
  }
 80030ac:	b015      	add	sp, #84	@ 0x54
 80030ae:	bd30      	pop	{r4, r5, pc}
        rawData++;
 80030b0:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 80030b4:	f104 0302 	add.w	r3, r4, #2
        switch (regID)
 80030b8:	f000 82e1 	beq.w	800367e <RI_GetRegisterMotor1+0x60e>
 80030bc:	f200 8083 	bhi.w	80031c6 <RI_GetRegisterMotor1+0x156>
 80030c0:	28e8      	cmp	r0, #232	@ 0xe8
 80030c2:	f000 82ed 	beq.w	80036a0 <RI_GetRegisterMotor1+0x630>
 80030c6:	d86f      	bhi.n	80031a8 <RI_GetRegisterMotor1+0x138>
 80030c8:	2868      	cmp	r0, #104	@ 0x68
 80030ca:	f000 82ce 	beq.w	800366a <RI_GetRegisterMotor1+0x5fa>
 80030ce:	28a8      	cmp	r0, #168	@ 0xa8
 80030d0:	f040 82c6 	bne.w	8003660 <RI_GetRegisterMotor1+0x5f0>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80030d4:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 80030d8:	2210      	movs	r2, #16
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80030da:	f1bc 0f11 	cmp.w	ip, #17
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 80030de:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80030e0:	f200 8257 	bhi.w	8003592 <RI_GetRegisterMotor1+0x522>
 80030e4:	2312      	movs	r3, #18
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80030e6:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 80030e8:	802b      	strh	r3, [r5, #0]
  }
 80030ea:	b015      	add	sp, #84	@ 0x54
 80030ec:	bd30      	pop	{r4, r5, pc}
        if (freeSpace > 0)
 80030ee:	f1bc 0f00 	cmp.w	ip, #0
 80030f2:	f340 825b 	ble.w	80035ac <RI_GetRegisterMotor1+0x53c>
          switch (regID)
 80030f6:	2888      	cmp	r0, #136	@ 0x88
 80030f8:	f000 825c 	beq.w	80035b4 <RI_GetRegisterMotor1+0x544>
 80030fc:	28c8      	cmp	r0, #200	@ 0xc8
 80030fe:	f000 8263 	beq.w	80035c8 <RI_GetRegisterMotor1+0x558>
 8003102:	2848      	cmp	r0, #72	@ 0x48
 8003104:	f000 825c 	beq.w	80035c0 <RI_GetRegisterMotor1+0x550>
 8003108:	2005      	movs	r0, #5
          *size = 1;
 800310a:	2301      	movs	r3, #1
 800310c:	802b      	strh	r3, [r5, #0]
  }
 800310e:	b015      	add	sp, #84	@ 0x54
 8003110:	bd30      	pop	{r4, r5, pc}
        if (freeSpace >= 4)
 8003112:	f1bc 0f03 	cmp.w	ip, #3
 8003116:	f340 81f8 	ble.w	800350a <RI_GetRegisterMotor1+0x49a>
          switch (regID)
 800311a:	28d8      	cmp	r0, #216	@ 0xd8
 800311c:	f000 82ef 	beq.w	80036fe <RI_GetRegisterMotor1+0x68e>
 8003120:	f200 81db 	bhi.w	80034da <RI_GetRegisterMotor1+0x46a>
 8003124:	2858      	cmp	r0, #88	@ 0x58
 8003126:	f000 82c5 	beq.w	80036b4 <RI_GetRegisterMotor1+0x644>
 800312a:	2898      	cmp	r0, #152	@ 0x98
 800312c:	f040 81e6 	bne.w	80034fc <RI_GetRegisterMotor1+0x48c>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8003130:	48a9      	ldr	r0, [pc, #676]	@ (80033d8 <RI_GetRegisterMotor1+0x368>)
 8003132:	f7fe f9f3 	bl	800151c <MCI_GetMecSpeedRefUnit>
 8003136:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800313a:	0040      	lsls	r0, r0, #1
 800313c:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800313e:	2000      	movs	r0, #0
          *size = 4;
 8003140:	2304      	movs	r3, #4
 8003142:	802b      	strh	r3, [r5, #0]
  }
 8003144:	b015      	add	sp, #84	@ 0x54
 8003146:	bd30      	pop	{r4, r5, pc}
        switch (regID)
 8003148:	28a0      	cmp	r0, #160	@ 0xa0
 800314a:	f000 81fe 	beq.w	800354a <RI_GetRegisterMotor1+0x4da>
 800314e:	28e0      	cmp	r0, #224	@ 0xe0
 8003150:	f000 81de 	beq.w	8003510 <RI_GetRegisterMotor1+0x4a0>
            *size= 0 ; /* */
 8003154:	2300      	movs	r3, #0
 8003156:	802b      	strh	r3, [r5, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8003158:	2005      	movs	r0, #5
            break;
 800315a:	e7a7      	b.n	80030ac <RI_GetRegisterMotor1+0x3c>
        if (freeSpace >= 2)
 800315c:	f1bc 0f01 	cmp.w	ip, #1
 8003160:	f340 81d3 	ble.w	800350a <RI_GetRegisterMotor1+0x49a>
          switch (regID)
 8003164:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
 8003168:	f000 830b 	beq.w	8003782 <RI_GetRegisterMotor1+0x712>
 800316c:	f200 80a8 	bhi.w	80032c0 <RI_GetRegisterMotor1+0x250>
 8003170:	f5b0 6f8a 	cmp.w	r0, #1104	@ 0x450
 8003174:	f000 8311 	beq.w	800379a <RI_GetRegisterMotor1+0x72a>
 8003178:	f200 808d 	bhi.w	8003296 <RI_GetRegisterMotor1+0x226>
 800317c:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 8003180:	f000 8306 	beq.w	8003790 <RI_GetRegisterMotor1+0x720>
 8003184:	d961      	bls.n	800324a <RI_GetRegisterMotor1+0x1da>
 8003186:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 800318a:	f000 82f5 	beq.w	8003778 <RI_GetRegisterMotor1+0x708>
 800318e:	d954      	bls.n	800323a <RI_GetRegisterMotor1+0x1ca>
 8003190:	f5b0 7f54 	cmp.w	r0, #848	@ 0x350
 8003194:	d144      	bne.n	8003220 <RI_GetRegisterMotor1+0x1b0>
              STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8003196:	4891      	ldr	r0, [pc, #580]	@ (80033dc <RI_GetRegisterMotor1+0x36c>)
 8003198:	aa13      	add	r2, sp, #76	@ 0x4c
 800319a:	a912      	add	r1, sp, #72	@ 0x48
 800319c:	f006 fe08 	bl	8009db0 <STO_PLL_GetObserverGains>
              *regdata16 = hC1;
 80031a0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80031a4:	8023      	strh	r3, [r4, #0]
              break;
 80031a6:	e0af      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 80031a8:	f5b0 7f94 	cmp.w	r0, #296	@ 0x128
 80031ac:	f040 8258 	bne.w	8003660 <RI_GetRegisterMotor1+0x5f0>
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 80031b0:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = 12;
 80031b4:	220c      	movs	r2, #12
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 80031b6:	f1bc 0f0d 	cmp.w	ip, #13
            *rawSize = 12;
 80031ba:	8022      	strh	r2, [r4, #0]
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 80031bc:	f200 81dd 	bhi.w	800357a <RI_GetRegisterMotor1+0x50a>
 80031c0:	230e      	movs	r3, #14
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80031c2:	2008      	movs	r0, #8
 80031c4:	e790      	b.n	80030e8 <RI_GetRegisterMotor1+0x78>
 80031c6:	f5b0 7f0a 	cmp.w	r0, #552	@ 0x228
 80031ca:	f000 8201 	beq.w	80035d0 <RI_GetRegisterMotor1+0x560>
 80031ce:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 80031d2:	d112      	bne.n	80031fa <RI_GetRegisterMotor1+0x18a>
            *rawSize = 4;
 80031d4:	2304      	movs	r3, #4
 80031d6:	8023      	strh	r3, [r4, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 80031d8:	487f      	ldr	r0, [pc, #508]	@ (80033d8 <RI_GetRegisterMotor1+0x368>)
 80031da:	f7fe f9cd 	bl	8001578 <MCI_GetIqdref>
 80031de:	4603      	mov	r3, r0
 80031e0:	8063      	strh	r3, [r4, #2]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 80031e2:	487d      	ldr	r0, [pc, #500]	@ (80033d8 <RI_GetRegisterMotor1+0x368>)
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 80031e4:	9312      	str	r3, [sp, #72]	@ 0x48
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 80031e6:	f7fe f9c7 	bl	8001578 <MCI_GetIqdref>
        *size = (*rawSize) + 2U;
 80031ea:	8823      	ldrh	r3, [r4, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 80031ec:	f3c0 400f 	ubfx	r0, r0, #16, #16
        *size = (*rawSize) + 2U;
 80031f0:	3302      	adds	r3, #2
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 80031f2:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 80031f4:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 80031f6:	2000      	movs	r0, #0
            break;
 80031f8:	e776      	b.n	80030e8 <RI_GetRegisterMotor1+0x78>
 80031fa:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 80031fe:	f040 822f 	bne.w	8003660 <RI_GetRegisterMotor1+0x5f0>
            *rawSize = 4;
 8003202:	2304      	movs	r3, #4
 8003204:	8023      	strh	r3, [r4, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 8003206:	4874      	ldr	r0, [pc, #464]	@ (80033d8 <RI_GetRegisterMotor1+0x368>)
 8003208:	f7fe f978 	bl	80014fc <MCI_GetLastRampFinalTorque>
 800320c:	8060      	strh	r0, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 800320e:	4872      	ldr	r0, [pc, #456]	@ (80033d8 <RI_GetRegisterMotor1+0x368>)
 8003210:	f7fe f978 	bl	8001504 <MCI_GetLastRampFinalDuration>
        *size = (*rawSize) + 2U;
 8003214:	8823      	ldrh	r3, [r4, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8003216:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 8003218:	3302      	adds	r3, #2
 800321a:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 800321c:	2000      	movs	r0, #0
            break;
 800321e:	e763      	b.n	80030e8 <RI_GetRegisterMotor1+0x78>
 8003220:	f5b0 7f64 	cmp.w	r0, #912	@ 0x390
 8003224:	f040 8273 	bne.w	800370e <RI_GetRegisterMotor1+0x69e>
              STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8003228:	486c      	ldr	r0, [pc, #432]	@ (80033dc <RI_GetRegisterMotor1+0x36c>)
 800322a:	aa13      	add	r2, sp, #76	@ 0x4c
 800322c:	a912      	add	r1, sp, #72	@ 0x48
 800322e:	f006 fdbf 	bl	8009db0 <STO_PLL_GetObserverGains>
              *regdata16 = hC2;
 8003232:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8003236:	8023      	strh	r3, [r4, #0]
              break;
 8003238:	e066      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 800323a:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 800323e:	d111      	bne.n	8003264 <RI_GetRegisterMotor1+0x1f4>
              *regdata16 = PID_GetKP(&PIDIdHandle_M1);
 8003240:	4867      	ldr	r0, [pc, #412]	@ (80033e0 <RI_GetRegisterMotor1+0x370>)
 8003242:	f005 f855 	bl	80082f0 <PID_GetKP>
 8003246:	8020      	strh	r0, [r4, #0]
              break;
 8003248:	e05e      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 800324a:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 800324e:	f000 82ce 	beq.w	80037ee <RI_GetRegisterMotor1+0x77e>
 8003252:	d919      	bls.n	8003288 <RI_GetRegisterMotor1+0x218>
 8003254:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 8003258:	d10d      	bne.n	8003276 <RI_GetRegisterMotor1+0x206>
              *regdata16 = PID_GetKP(&PIDIqHandle_M1);
 800325a:	4862      	ldr	r0, [pc, #392]	@ (80033e4 <RI_GetRegisterMotor1+0x374>)
 800325c:	f005 f848 	bl	80082f0 <PID_GetKP>
 8003260:	8020      	strh	r0, [r4, #0]
              break;
 8003262:	e051      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 8003264:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 8003268:	f040 8251 	bne.w	800370e <RI_GetRegisterMotor1+0x69e>
              *regdata16 = PID_GetKI(&PIDIdHandle_M1);
 800326c:	485c      	ldr	r0, [pc, #368]	@ (80033e0 <RI_GetRegisterMotor1+0x370>)
 800326e:	f005 f843 	bl	80082f8 <PID_GetKI>
 8003272:	8020      	strh	r0, [r4, #0]
              break;
 8003274:	e048      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 8003276:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 800327a:	f040 8248 	bne.w	800370e <RI_GetRegisterMotor1+0x69e>
              *regdata16 = PID_GetKI(&PIDIqHandle_M1);
 800327e:	4859      	ldr	r0, [pc, #356]	@ (80033e4 <RI_GetRegisterMotor1+0x374>)
 8003280:	f005 f83a 	bl	80082f8 <PID_GetKI>
 8003284:	8020      	strh	r0, [r4, #0]
              break;
 8003286:	e03f      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 8003288:	2890      	cmp	r0, #144	@ 0x90
 800328a:	d131      	bne.n	80032f0 <RI_GetRegisterMotor1+0x280>
              *regdata16 = PID_GetKP(&PIDSpeedHandle_M1);
 800328c:	4856      	ldr	r0, [pc, #344]	@ (80033e8 <RI_GetRegisterMotor1+0x378>)
 800328e:	f005 f82f 	bl	80082f0 <PID_GetKP>
 8003292:	8020      	strh	r0, [r4, #0]
              break;
 8003294:	e038      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 8003296:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 800329a:	f000 82a3 	beq.w	80037e4 <RI_GetRegisterMotor1+0x774>
 800329e:	f240 80ea 	bls.w	8003476 <RI_GetRegisterMotor1+0x406>
 80032a2:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 80032a6:	f000 8296 	beq.w	80037d6 <RI_GetRegisterMotor1+0x766>
 80032aa:	f240 80da 	bls.w	8003462 <RI_GetRegisterMotor1+0x3f2>
 80032ae:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
 80032b2:	f040 822c 	bne.w	800370e <RI_GetRegisterMotor1+0x69e>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 80032b6:	4848      	ldr	r0, [pc, #288]	@ (80033d8 <RI_GetRegisterMotor1+0x368>)
 80032b8:	f7fe f95e 	bl	8001578 <MCI_GetIqdref>
 80032bc:	8020      	strh	r0, [r4, #0]
              break;
 80032be:	e023      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 80032c0:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 80032c4:	d020      	beq.n	8003308 <RI_GetRegisterMotor1+0x298>
 80032c6:	d83b      	bhi.n	8003340 <RI_GetRegisterMotor1+0x2d0>
 80032c8:	f5b0 6f39 	cmp.w	r0, #2960	@ 0xb90
 80032cc:	f000 827e 	beq.w	80037cc <RI_GetRegisterMotor1+0x75c>
 80032d0:	d927      	bls.n	8003322 <RI_GetRegisterMotor1+0x2b2>
 80032d2:	f5b0 6f45 	cmp.w	r0, #3152	@ 0xc50
 80032d6:	f000 826a 	beq.w	80037ae <RI_GetRegisterMotor1+0x73e>
 80032da:	d91a      	bls.n	8003312 <RI_GetRegisterMotor1+0x2a2>
 80032dc:	f5b0 6f49 	cmp.w	r0, #3216	@ 0xc90
 80032e0:	d10e      	bne.n	8003300 <RI_GetRegisterMotor1+0x290>
              *regdata16 = STO_PLL_GetEstimatedBemf(&STO_PLL_M1).beta;
 80032e2:	483e      	ldr	r0, [pc, #248]	@ (80033dc <RI_GetRegisterMotor1+0x36c>)
 80032e4:	f006 fd46 	bl	8009d74 <STO_PLL_GetEstimatedBemf>
 80032e8:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80032ec:	8023      	strh	r3, [r4, #0]
              break;
 80032ee:	e00b      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 80032f0:	28d0      	cmp	r0, #208	@ 0xd0
 80032f2:	f040 820c 	bne.w	800370e <RI_GetRegisterMotor1+0x69e>
              *regdata16 = PID_GetKI(&PIDSpeedHandle_M1);
 80032f6:	483c      	ldr	r0, [pc, #240]	@ (80033e8 <RI_GetRegisterMotor1+0x378>)
 80032f8:	f004 fffe 	bl	80082f8 <PID_GetKI>
 80032fc:	8020      	strh	r0, [r4, #0]
              break;
 80032fe:	e003      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 8003300:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8003304:	f040 8203 	bne.w	800370e <RI_GetRegisterMotor1+0x69e>
    uint8_t retVal = MCP_CMD_OK;
 8003308:	2000      	movs	r0, #0
          *size = 2;
 800330a:	2302      	movs	r3, #2
 800330c:	802b      	strh	r3, [r5, #0]
  }
 800330e:	b015      	add	sp, #84	@ 0x54
 8003310:	bd30      	pop	{r4, r5, pc}
 8003312:	f5b0 6f3d 	cmp.w	r0, #3024	@ 0xbd0
 8003316:	d128      	bne.n	800336a <RI_GetRegisterMotor1+0x2fa>
              *regdata16 = STO_PLL_GetEstimatedCurrent(&STO_PLL_M1).alpha;
 8003318:	4830      	ldr	r0, [pc, #192]	@ (80033dc <RI_GetRegisterMotor1+0x36c>)
 800331a:	f006 fd37 	bl	8009d8c <STO_PLL_GetEstimatedCurrent>
 800331e:	8020      	strh	r0, [r4, #0]
              break;
 8003320:	e7f2      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 8003322:	f5b0 6f25 	cmp.w	r0, #2640	@ 0xa50
 8003326:	f000 8222 	beq.w	800376e <RI_GetRegisterMotor1+0x6fe>
 800332a:	d97d      	bls.n	8003428 <RI_GetRegisterMotor1+0x3b8>
 800332c:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 8003330:	d171      	bne.n	8003416 <RI_GetRegisterMotor1+0x3a6>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 8003332:	4829      	ldr	r0, [pc, #164]	@ (80033d8 <RI_GetRegisterMotor1+0x368>)
 8003334:	f7fe f93c 	bl	80015b0 <MCI_GetValphabeta>
 8003338:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800333c:	8023      	strh	r3, [r4, #0]
              break;
 800333e:	e7e3      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 8003340:	f241 5390 	movw	r3, #5520	@ 0x1590
 8003344:	4298      	cmp	r0, r3
 8003346:	f000 820d 	beq.w	8003764 <RI_GetRegisterMotor1+0x6f4>
 800334a:	d92c      	bls.n	80033a6 <RI_GetRegisterMotor1+0x336>
 800334c:	f241 6350 	movw	r3, #5712	@ 0x1650
 8003350:	4298      	cmp	r0, r3
 8003352:	f000 8236 	beq.w	80037c2 <RI_GetRegisterMotor1+0x752>
 8003356:	d91d      	bls.n	8003394 <RI_GetRegisterMotor1+0x324>
 8003358:	f641 03d0 	movw	r3, #6352	@ 0x18d0
 800335c:	4298      	cmp	r0, r3
 800335e:	d10f      	bne.n	8003380 <RI_GetRegisterMotor1+0x310>
              *regdataU16 = PID_GetKIDivisorPOW2(&(&STO_PLL_M1)->PIRegulator);
 8003360:	4822      	ldr	r0, [pc, #136]	@ (80033ec <RI_GetRegisterMotor1+0x37c>)
 8003362:	f004 ffd9 	bl	8008318 <PID_GetKIDivisorPOW2>
 8003366:	8020      	strh	r0, [r4, #0]
              break;
 8003368:	e7ce      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 800336a:	f5b0 6f41 	cmp.w	r0, #3088	@ 0xc10
 800336e:	f040 81ce 	bne.w	800370e <RI_GetRegisterMotor1+0x69e>
              *regdata16 = STO_PLL_GetEstimatedCurrent(&STO_PLL_M1).beta;
 8003372:	481a      	ldr	r0, [pc, #104]	@ (80033dc <RI_GetRegisterMotor1+0x36c>)
 8003374:	f006 fd0a 	bl	8009d8c <STO_PLL_GetEstimatedCurrent>
 8003378:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800337c:	8023      	strh	r3, [r4, #0]
              break;
 800337e:	e7c3      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 8003380:	f641 1310 	movw	r3, #6416	@ 0x1910
 8003384:	4298      	cmp	r0, r3
 8003386:	f040 81c2 	bne.w	800370e <RI_GetRegisterMotor1+0x69e>
              *regdataU16 = PID_GetKPDivisorPOW2(&(&STO_PLL_M1)->PIRegulator);
 800338a:	4818      	ldr	r0, [pc, #96]	@ (80033ec <RI_GetRegisterMotor1+0x37c>)
 800338c:	f004 ffba 	bl	8008304 <PID_GetKPDivisorPOW2>
 8003390:	8020      	strh	r0, [r4, #0]
              break;
 8003392:	e7b9      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 8003394:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 8003398:	4298      	cmp	r0, r3
 800339a:	d113      	bne.n	80033c4 <RI_GetRegisterMotor1+0x354>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIqHandle_M1);
 800339c:	4811      	ldr	r0, [pc, #68]	@ (80033e4 <RI_GetRegisterMotor1+0x374>)
 800339e:	f004 ffb1 	bl	8008304 <PID_GetKPDivisorPOW2>
 80033a2:	8020      	strh	r0, [r4, #0]
              break;
 80033a4:	e7b0      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 80033a6:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 80033aa:	4298      	cmp	r0, r3
 80033ac:	f000 8204 	beq.w	80037b8 <RI_GetRegisterMotor1+0x748>
 80033b0:	d928      	bls.n	8003404 <RI_GetRegisterMotor1+0x394>
 80033b2:	f241 5310 	movw	r3, #5392	@ 0x1510
 80033b6:	4298      	cmp	r0, r3
 80033b8:	d11a      	bne.n	80033f0 <RI_GetRegisterMotor1+0x380>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIdHandle_M1);
 80033ba:	4809      	ldr	r0, [pc, #36]	@ (80033e0 <RI_GetRegisterMotor1+0x370>)
 80033bc:	f004 ffa2 	bl	8008304 <PID_GetKPDivisorPOW2>
 80033c0:	8020      	strh	r0, [r4, #0]
              break;
 80033c2:	e7a1      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 80033c4:	f241 6310 	movw	r3, #5648	@ 0x1610
 80033c8:	4298      	cmp	r0, r3
 80033ca:	f040 81a0 	bne.w	800370e <RI_GetRegisterMotor1+0x69e>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIqHandle_M1);
 80033ce:	4805      	ldr	r0, [pc, #20]	@ (80033e4 <RI_GetRegisterMotor1+0x374>)
 80033d0:	f004 ffa2 	bl	8008318 <PID_GetKIDivisorPOW2>
 80033d4:	8020      	strh	r0, [r4, #0]
              break;
 80033d6:	e797      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 80033d8:	20000000 	.word	0x20000000
 80033dc:	20000068 	.word	0x20000068
 80033e0:	200002e0 	.word	0x200002e0
 80033e4:	2000030c 	.word	0x2000030c
 80033e8:	20000338 	.word	0x20000338
 80033ec:	2000009c 	.word	0x2000009c
 80033f0:	f241 5350 	movw	r3, #5456	@ 0x1550
 80033f4:	4298      	cmp	r0, r3
 80033f6:	f040 818a 	bne.w	800370e <RI_GetRegisterMotor1+0x69e>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIdHandle_M1);
 80033fa:	48b2      	ldr	r0, [pc, #712]	@ (80036c4 <RI_GetRegisterMotor1+0x654>)
 80033fc:	f004 ff8c 	bl	8008318 <PID_GetKIDivisorPOW2>
 8003400:	8020      	strh	r0, [r4, #0]
              break;
 8003402:	e781      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 8003404:	f241 4350 	movw	r3, #5200	@ 0x1450
 8003408:	4298      	cmp	r0, r3
 800340a:	d115      	bne.n	8003438 <RI_GetRegisterMotor1+0x3c8>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(&PIDSpeedHandle_M1);
 800340c:	48ae      	ldr	r0, [pc, #696]	@ (80036c8 <RI_GetRegisterMotor1+0x658>)
 800340e:	f004 ff79 	bl	8008304 <PID_GetKPDivisorPOW2>
 8003412:	8020      	strh	r0, [r4, #0]
              break;
 8003414:	e778      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 8003416:	f5b0 6f35 	cmp.w	r0, #2896	@ 0xb50
 800341a:	f040 8178 	bne.w	800370e <RI_GetRegisterMotor1+0x69e>
 800341e:	4bab      	ldr	r3, [pc, #684]	@ (80036cc <RI_GetRegisterMotor1+0x65c>)
 8003420:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)&STO_PLL_M1);
 8003424:	8023      	strh	r3, [r4, #0]
              break;
 8003426:	e76f      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 8003428:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 800342c:	d10e      	bne.n	800344c <RI_GetRegisterMotor1+0x3dc>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 800342e:	48a8      	ldr	r0, [pc, #672]	@ (80036d0 <RI_GetRegisterMotor1+0x660>)
 8003430:	f7fe f8b0 	bl	8001594 <MCI_GetVqd>
 8003434:	8020      	strh	r0, [r4, #0]
              break;
 8003436:	e767      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 8003438:	f241 4390 	movw	r3, #5264	@ 0x1490
 800343c:	4298      	cmp	r0, r3
 800343e:	f040 8166 	bne.w	800370e <RI_GetRegisterMotor1+0x69e>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(&PIDSpeedHandle_M1);
 8003442:	48a1      	ldr	r0, [pc, #644]	@ (80036c8 <RI_GetRegisterMotor1+0x658>)
 8003444:	f004 ff68 	bl	8008318 <PID_GetKIDivisorPOW2>
 8003448:	8020      	strh	r0, [r4, #0]
              break;
 800344a:	e75d      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 800344c:	f5b0 6f21 	cmp.w	r0, #2576	@ 0xa10
 8003450:	f040 815d 	bne.w	800370e <RI_GetRegisterMotor1+0x69e>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 8003454:	489e      	ldr	r0, [pc, #632]	@ (80036d0 <RI_GetRegisterMotor1+0x660>)
 8003456:	f7fe f89d 	bl	8001594 <MCI_GetVqd>
 800345a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800345e:	8023      	strh	r3, [r4, #0]
              break;
 8003460:	e752      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 8003462:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 8003466:	d113      	bne.n	8003490 <RI_GetRegisterMotor1+0x420>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 8003468:	4899      	ldr	r0, [pc, #612]	@ (80036d0 <RI_GetRegisterMotor1+0x660>)
 800346a:	f7fe f869 	bl	8001540 <MCI_GetIalphabeta>
 800346e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003472:	8023      	strh	r3, [r4, #0]
              break;
 8003474:	e748      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 8003476:	f5b0 6fba 	cmp.w	r0, #1488	@ 0x5d0
 800347a:	f000 8193 	beq.w	80037a4 <RI_GetRegisterMotor1+0x734>
 800347e:	d91b      	bls.n	80034b8 <RI_GetRegisterMotor1+0x448>
 8003480:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 8003484:	d10d      	bne.n	80034a2 <RI_GetRegisterMotor1+0x432>
              *regdata16 = MCI_GetIab(pMCIN).a;
 8003486:	4892      	ldr	r0, [pc, #584]	@ (80036d0 <RI_GetRegisterMotor1+0x660>)
 8003488:	f7fe f84c 	bl	8001524 <MCI_GetIab>
 800348c:	8020      	strh	r0, [r4, #0]
              break;
 800348e:	e73b      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 8003490:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 8003494:	f040 813b 	bne.w	800370e <RI_GetRegisterMotor1+0x69e>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8003498:	488d      	ldr	r0, [pc, #564]	@ (80036d0 <RI_GetRegisterMotor1+0x660>)
 800349a:	f7fe f85f 	bl	800155c <MCI_GetIqd>
 800349e:	8020      	strh	r0, [r4, #0]
              break;
 80034a0:	e732      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 80034a2:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 80034a6:	f040 8132 	bne.w	800370e <RI_GetRegisterMotor1+0x69e>
              *regdata16 = MCI_GetIab(pMCIN).b;
 80034aa:	4889      	ldr	r0, [pc, #548]	@ (80036d0 <RI_GetRegisterMotor1+0x660>)
 80034ac:	f7fe f83a 	bl	8001524 <MCI_GetIab>
 80034b0:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80034b4:	8023      	strh	r3, [r4, #0]
              break;
 80034b6:	e727      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 80034b8:	f5b0 6f92 	cmp.w	r0, #1168	@ 0x490
 80034bc:	d104      	bne.n	80034c8 <RI_GetRegisterMotor1+0x458>
              *regdata16 = PID_GetKP (&(&STO_PLL_M1)->PIRegulator);
 80034be:	4885      	ldr	r0, [pc, #532]	@ (80036d4 <RI_GetRegisterMotor1+0x664>)
 80034c0:	f004 ff16 	bl	80082f0 <PID_GetKP>
 80034c4:	8020      	strh	r0, [r4, #0]
              break;
 80034c6:	e71f      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 80034c8:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 80034cc:	f040 811f 	bne.w	800370e <RI_GetRegisterMotor1+0x69e>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor);
 80034d0:	4881      	ldr	r0, [pc, #516]	@ (80036d8 <RI_GetRegisterMotor1+0x668>)
 80034d2:	f004 fd13 	bl	8007efc <VBS_GetAvBusVoltage_V>
 80034d6:	8020      	strh	r0, [r4, #0]
              break;
 80034d8:	e716      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 80034da:	f5b0 7f8c 	cmp.w	r0, #280	@ 0x118
 80034de:	f000 8109 	beq.w	80036f4 <RI_GetRegisterMotor1+0x684>
 80034e2:	f641 3358 	movw	r3, #7000	@ 0x1b58
 80034e6:	4298      	cmp	r0, r3
 80034e8:	d162      	bne.n	80035b0 <RI_GetRegisterMotor1+0x540>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 80034ea:	4b7c      	ldr	r3, [pc, #496]	@ (80036dc <RI_GetRegisterMotor1+0x66c>)
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	f004 ff97 	bl	8008420 <PQD_GetAvrgElMotorPowerW>
 80034f2:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val; //cstat !UNION-type-punning
 80034f6:	9b01      	ldr	r3, [sp, #4]
 80034f8:	6023      	str	r3, [r4, #0]
              break;
 80034fa:	e620      	b.n	800313e <RI_GetRegisterMotor1+0xce>
 80034fc:	2818      	cmp	r0, #24
 80034fe:	d157      	bne.n	80035b0 <RI_GetRegisterMotor1+0x540>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 8003500:	4873      	ldr	r0, [pc, #460]	@ (80036d0 <RI_GetRegisterMotor1+0x660>)
 8003502:	f7fd ffcb 	bl	800149c <MCI_GetFaultState>
 8003506:	6020      	str	r0, [r4, #0]
              break;
 8003508:	e619      	b.n	800313e <RI_GetRegisterMotor1+0xce>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800350a:	2008      	movs	r0, #8
  }
 800350c:	b015      	add	sp, #84	@ 0x54
 800350e:	bd30      	pop	{r4, r5, pc}
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8003510:	4b73      	ldr	r3, [pc, #460]	@ (80036e0 <RI_GetRegisterMotor1+0x670>)
 8003512:	681a      	ldr	r2, [r3, #0]
  *size= 1U ; /* /0 is the min String size */
 8003514:	2301      	movs	r3, #1
 8003516:	802b      	strh	r3, [r5, #0]
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8003518:	f102 0124 	add.w	r1, r2, #36	@ 0x24
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800351c:	f992 2024 	ldrsb.w	r2, [r2, #36]	@ 0x24
 8003520:	b17a      	cbz	r2, 8003542 <RI_GetRegisterMotor1+0x4d2>
 8003522:	fa1f fc8c 	uxth.w	ip, ip
 8003526:	e008      	b.n	800353a <RI_GetRegisterMotor1+0x4ca>
    *tempdestString = *tempsrcString;
 8003528:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 800352c:	882b      	ldrh	r3, [r5, #0]
 800352e:	3301      	adds	r3, #1
 8003530:	b29b      	uxth	r3, r3
 8003532:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003534:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8003538:	b11a      	cbz	r2, 8003542 <RI_GetRegisterMotor1+0x4d2>
 800353a:	459c      	cmp	ip, r3
 800353c:	d8f4      	bhi.n	8003528 <RI_GetRegisterMotor1+0x4b8>
    retVal = MCP_ERROR_STRING_FORMAT;
 800353e:	2006      	movs	r0, #6
 8003540:	e5b4      	b.n	80030ac <RI_GetRegisterMotor1+0x3c>
    *tempdestString = (int8_t)0;
 8003542:	2300      	movs	r3, #0
 8003544:	7023      	strb	r3, [r4, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003546:	2000      	movs	r0, #0
 8003548:	e5b0      	b.n	80030ac <RI_GetRegisterMotor1+0x3c>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 800354a:	4a66      	ldr	r2, [pc, #408]	@ (80036e4 <RI_GetRegisterMotor1+0x674>)
  *size= 1U ; /* /0 is the min String size */
 800354c:	2301      	movs	r3, #1
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 800354e:	6811      	ldr	r1, [r2, #0]
  *size= 1U ; /* /0 is the min String size */
 8003550:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003552:	f991 2000 	ldrsb.w	r2, [r1]
 8003556:	2a00      	cmp	r2, #0
 8003558:	d0f3      	beq.n	8003542 <RI_GetRegisterMotor1+0x4d2>
 800355a:	fa1f fc8c 	uxth.w	ip, ip
 800355e:	e009      	b.n	8003574 <RI_GetRegisterMotor1+0x504>
    *tempdestString = *tempsrcString;
 8003560:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 8003564:	882b      	ldrh	r3, [r5, #0]
 8003566:	3301      	adds	r3, #1
 8003568:	b29b      	uxth	r3, r3
 800356a:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800356c:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8003570:	2a00      	cmp	r2, #0
 8003572:	d0e6      	beq.n	8003542 <RI_GetRegisterMotor1+0x4d2>
 8003574:	459c      	cmp	ip, r3
 8003576:	d8f3      	bhi.n	8003560 <RI_GetRegisterMotor1+0x4f0>
 8003578:	e7e1      	b.n	800353e <RI_GetRegisterMotor1+0x4ce>
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 800357a:	4a5b      	ldr	r2, [pc, #364]	@ (80036e8 <RI_GetRegisterMotor1+0x678>)
 800357c:	6850      	ldr	r0, [r2, #4]
 800357e:	6814      	ldr	r4, [r2, #0]
 8003580:	6891      	ldr	r1, [r2, #8]
 8003582:	68d2      	ldr	r2, [r2, #12]
 8003584:	60da      	str	r2, [r3, #12]
 8003586:	6058      	str	r0, [r3, #4]
 8003588:	601c      	str	r4, [r3, #0]
 800358a:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 800358c:	2000      	movs	r0, #0
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 800358e:	230e      	movs	r3, #14
 8003590:	e5aa      	b.n	80030e8 <RI_GetRegisterMotor1+0x78>
              ApplicationConfig_reg_t const *pApplicationConfig_reg = ApplicationConfig_reg[motorID];
 8003592:	4a56      	ldr	r2, [pc, #344]	@ (80036ec <RI_GetRegisterMotor1+0x67c>)
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 8003594:	6812      	ldr	r2, [r2, #0]
 8003596:	6850      	ldr	r0, [r2, #4]
 8003598:	6814      	ldr	r4, [r2, #0]
 800359a:	6891      	ldr	r1, [r2, #8]
 800359c:	68d2      	ldr	r2, [r2, #12]
 800359e:	60da      	str	r2, [r3, #12]
 80035a0:	6058      	str	r0, [r3, #4]
 80035a2:	601c      	str	r4, [r3, #0]
 80035a4:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 80035a6:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 80035a8:	2312      	movs	r3, #18
 80035aa:	e59d      	b.n	80030e8 <RI_GetRegisterMotor1+0x78>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80035ac:	4608      	mov	r0, r1
 80035ae:	e57d      	b.n	80030ac <RI_GetRegisterMotor1+0x3c>
 80035b0:	2005      	movs	r0, #5
 80035b2:	e5c5      	b.n	8003140 <RI_GetRegisterMotor1+0xd0>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 80035b4:	4846      	ldr	r0, [pc, #280]	@ (80036d0 <RI_GetRegisterMotor1+0x660>)
 80035b6:	f7fd ff77 	bl	80014a8 <MCI_GetControlMode>
 80035ba:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80035bc:	2000      	movs	r0, #0
 80035be:	e5a4      	b.n	800310a <RI_GetRegisterMotor1+0x9a>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 80035c0:	4843      	ldr	r0, [pc, #268]	@ (80036d0 <RI_GetRegisterMotor1+0x660>)
 80035c2:	f7fd ff21 	bl	8001408 <MCI_GetSTMState>
              break;
 80035c6:	e7f8      	b.n	80035ba <RI_GetRegisterMotor1+0x54a>
static inline uint8_t RUC_GetNumberOfPhases(RevUpCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  return ((MC_NULL == pHandle) ? 0U : (uint8_t)pHandle->bPhaseNbr);
#else
  return ((uint8_t)pHandle->bPhaseNbr);
 80035c8:	4b49      	ldr	r3, [pc, #292]	@ (80036f0 <RI_GetRegisterMotor1+0x680>)
 80035ca:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
              break;
 80035ce:	e7f4      	b.n	80035ba <RI_GetRegisterMotor1+0x54a>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80035d0:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 80035d4:	2328      	movs	r3, #40	@ 0x28
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80035d6:	f1bc 0f29 	cmp.w	ip, #41	@ 0x29
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 80035da:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80035dc:	f240 8094 	bls.w	8003708 <RI_GetRegisterMotor1+0x698>
    retValue = false;
  }
  else
  {
#endif
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 80035e0:	4b43      	ldr	r3, [pc, #268]	@ (80036f0 <RI_GetRegisterMotor1+0x680>)
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 80035e2:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80035e6:	f9b3 0010 	ldrsh.w	r0, [r3, #16]
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 80035ea:	8999      	ldrh	r1, [r3, #12]
                *durationms  = revUpPhase.hDurationms;
 80035ec:	8121      	strh	r1, [r4, #8]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 80035ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 80035f2:	80e0      	strh	r0, [r4, #6]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 80035f4:	0052      	lsls	r2, r2, #1
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 80035f6:	f9b3 001c 	ldrsh.w	r0, [r3, #28]
 80035fa:	f8c4 2002 	str.w	r2, [r4, #2]
 80035fe:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8003602:	8b19      	ldrh	r1, [r3, #24]
                *durationms  = revUpPhase.hDurationms;
 8003604:	8221      	strh	r1, [r4, #16]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003606:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 800360a:	81e0      	strh	r0, [r4, #14]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 800360c:	0052      	lsls	r2, r2, #1
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 800360e:	f9b3 0028 	ldrsh.w	r0, [r3, #40]	@ 0x28
 8003612:	f8c4 200a 	str.w	r2, [r4, #10]
 8003616:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	@ 0x26
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 800361a:	8c99      	ldrh	r1, [r3, #36]	@ 0x24
                *durationms  = revUpPhase.hDurationms;
 800361c:	8321      	strh	r1, [r4, #24]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 800361e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 8003622:	82e0      	strh	r0, [r4, #22]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003624:	0052      	lsls	r2, r2, #1
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 8003626:	f9b3 0034 	ldrsh.w	r0, [r3, #52]	@ 0x34
 800362a:	f8c4 2012 	str.w	r2, [r4, #18]
 800362e:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	@ 0x32
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8003632:	8e19      	ldrh	r1, [r3, #48]	@ 0x30
                *durationms  = revUpPhase.hDurationms;
 8003634:	8421      	strh	r1, [r4, #32]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003636:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 800363a:	83e0      	strh	r0, [r4, #30]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 800363c:	0052      	lsls	r2, r2, #1
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 800363e:	f9b3 0040 	ldrsh.w	r0, [r3, #64]	@ 0x40
 8003642:	f8c4 201a 	str.w	r2, [r4, #26]
 8003646:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	@ 0x3e
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 800364a:	8f99      	ldrh	r1, [r3, #60]	@ 0x3c
                *durationms  = revUpPhase.hDurationms;
 800364c:	8521      	strh	r1, [r4, #40]	@ 0x28
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 800364e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003652:	0052      	lsls	r2, r2, #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 8003654:	84e0      	strh	r0, [r4, #38]	@ 0x26
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003656:	f8c4 2022 	str.w	r2, [r4, #34]	@ 0x22
                *durationms  = revUpPhase.hDurationms;
 800365a:	232a      	movs	r3, #42	@ 0x2a
    uint8_t retVal = MCP_CMD_OK;
 800365c:	2000      	movs	r0, #0
 800365e:	e543      	b.n	80030e8 <RI_GetRegisterMotor1+0x78>
        *size = (*rawSize) + 2U;
 8003660:	8823      	ldrh	r3, [r4, #0]
 8003662:	3302      	adds	r3, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8003664:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8003666:	b29b      	uxth	r3, r3
 8003668:	e53e      	b.n	80030e8 <RI_GetRegisterMotor1+0x78>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800366a:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 800366e:	223c      	movs	r2, #60	@ 0x3c
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003670:	f1bc 0f3d 	cmp.w	ip, #61	@ 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8003674:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003676:	d859      	bhi.n	800372c <RI_GetRegisterMotor1+0x6bc>
 8003678:	233e      	movs	r3, #62	@ 0x3e
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800367a:	2008      	movs	r0, #8
 800367c:	e534      	b.n	80030e8 <RI_GetRegisterMotor1+0x78>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 800367e:	4814      	ldr	r0, [pc, #80]	@ (80036d0 <RI_GetRegisterMotor1+0x660>)
 8003680:	f7fd ff38 	bl	80014f4 <MCI_GetLastRampFinalSpeed>
 8003684:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003688:	0043      	lsls	r3, r0, #1
 800368a:	f8c4 3002 	str.w	r3, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 800368e:	4810      	ldr	r0, [pc, #64]	@ (80036d0 <RI_GetRegisterMotor1+0x660>)
 8003690:	f7fd ff38 	bl	8001504 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 8003694:	2306      	movs	r3, #6
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8003696:	80e0      	strh	r0, [r4, #6]
            *rawSize = 6;
 8003698:	8023      	strh	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800369a:	2000      	movs	r0, #0
            break;
 800369c:	2308      	movs	r3, #8
 800369e:	e523      	b.n	80030e8 <RI_GetRegisterMotor1+0x78>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80036a0:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 80036a4:	220e      	movs	r2, #14
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80036a6:	f1bc 0f0f 	cmp.w	ip, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 80036aa:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80036ac:	d831      	bhi.n	8003712 <RI_GetRegisterMotor1+0x6a2>
 80036ae:	2310      	movs	r3, #16
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80036b0:	2008      	movs	r0, #8
 80036b2:	e519      	b.n	80030e8 <RI_GetRegisterMotor1+0x78>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 80036b4:	4806      	ldr	r0, [pc, #24]	@ (80036d0 <RI_GetRegisterMotor1+0x660>)
 80036b6:	f7fd ff2d 	bl	8001514 <MCI_GetAvrgMecSpeedUnit>
 80036ba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80036be:	0040      	lsls	r0, r0, #1
 80036c0:	6020      	str	r0, [r4, #0]
              break;
 80036c2:	e53c      	b.n	800313e <RI_GetRegisterMotor1+0xce>
 80036c4:	200002e0 	.word	0x200002e0
 80036c8:	20000338 	.word	0x20000338
 80036cc:	20000068 	.word	0x20000068
 80036d0:	20000000 	.word	0x20000000
 80036d4:	2000009c 	.word	0x2000009c
 80036d8:	20000374 	.word	0x20000374
 80036dc:	20000028 	.word	0x20000028
 80036e0:	20000408 	.word	0x20000408
 80036e4:	20000410 	.word	0x20000410
 80036e8:	20000414 	.word	0x20000414
 80036ec:	20000404 	.word	0x20000404
 80036f0:	20000234 	.word	0x20000234
static inline int32_t STO_PLL_GetObservedBemfLevel(STO_PLL_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Obs_Bemf_Level);
#else
  return (pHandle->Obs_Bemf_Level);
 80036f4:	4b40      	ldr	r3, [pc, #256]	@ (80037f8 <RI_GetRegisterMotor1+0x788>)
 80036f6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
              *regdata32 = STO_PLL_GetObservedBemfLevel(&STO_PLL_M1);
 80036fa:	6023      	str	r3, [r4, #0]
              break;
 80036fc:	e51f      	b.n	800313e <RI_GetRegisterMotor1+0xce>
  return (pHandle->Est_Bemf_Level);
 80036fe:	4b3e      	ldr	r3, [pc, #248]	@ (80037f8 <RI_GetRegisterMotor1+0x788>)
 8003700:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
              *regdata32 = STO_PLL_GetEstimatedBemfLevel(&STO_PLL_M1);
 8003704:	6023      	str	r3, [r4, #0]
              break;
 8003706:	e51a      	b.n	800313e <RI_GetRegisterMotor1+0xce>
 8003708:	232a      	movs	r3, #42	@ 0x2a
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800370a:	2008      	movs	r0, #8
 800370c:	e4ec      	b.n	80030e8 <RI_GetRegisterMotor1+0x78>
 800370e:	2005      	movs	r0, #5
 8003710:	e5fb      	b.n	800330a <RI_GetRegisterMotor1+0x29a>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 8003712:	4a3a      	ldr	r2, [pc, #232]	@ (80037fc <RI_GetRegisterMotor1+0x78c>)
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8003714:	6812      	ldr	r2, [r2, #0]
 8003716:	6810      	ldr	r0, [r2, #0]
 8003718:	6851      	ldr	r1, [r2, #4]
 800371a:	6894      	ldr	r4, [r2, #8]
 800371c:	609c      	str	r4, [r3, #8]
 800371e:	6018      	str	r0, [r3, #0]
 8003720:	6059      	str	r1, [r3, #4]
 8003722:	8992      	ldrh	r2, [r2, #12]
 8003724:	819a      	strh	r2, [r3, #12]
    uint8_t retVal = MCP_CMD_OK;
 8003726:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8003728:	2310      	movs	r3, #16
 800372a:	e4dd      	b.n	80030e8 <RI_GetRegisterMotor1+0x78>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 800372c:	4a34      	ldr	r2, [pc, #208]	@ (8003800 <RI_GetRegisterMotor1+0x790>)
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 800372e:	6812      	ldr	r2, [r2, #0]
 8003730:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
 8003734:	6814      	ldr	r4, [r2, #0]
 8003736:	6850      	ldr	r0, [r2, #4]
 8003738:	6891      	ldr	r1, [r2, #8]
 800373a:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800373e:	f8c3 c00c 	str.w	ip, [r3, #12]
 8003742:	3210      	adds	r2, #16
 8003744:	4572      	cmp	r2, lr
 8003746:	601c      	str	r4, [r3, #0]
 8003748:	6058      	str	r0, [r3, #4]
 800374a:	6099      	str	r1, [r3, #8]
 800374c:	f103 0310 	add.w	r3, r3, #16
 8003750:	d1f0      	bne.n	8003734 <RI_GetRegisterMotor1+0x6c4>
 8003752:	6810      	ldr	r0, [r2, #0]
 8003754:	6851      	ldr	r1, [r2, #4]
 8003756:	6892      	ldr	r2, [r2, #8]
 8003758:	609a      	str	r2, [r3, #8]
 800375a:	6018      	str	r0, [r3, #0]
 800375c:	6059      	str	r1, [r3, #4]
    uint8_t retVal = MCP_CMD_OK;
 800375e:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 8003760:	233e      	movs	r3, #62	@ 0x3e
 8003762:	e4c1      	b.n	80030e8 <RI_GetRegisterMotor1+0x78>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIdHandle_M1);
 8003764:	4827      	ldr	r0, [pc, #156]	@ (8003804 <RI_GetRegisterMotor1+0x794>)
 8003766:	f004 fdf7 	bl	8008358 <PID_GetKDDivisorPOW2>
 800376a:	8020      	strh	r0, [r4, #0]
              break;
 800376c:	e5cc      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 800376e:	4826      	ldr	r0, [pc, #152]	@ (8003808 <RI_GetRegisterMotor1+0x798>)
 8003770:	f7fd ff1e 	bl	80015b0 <MCI_GetValphabeta>
 8003774:	8020      	strh	r0, [r4, #0]
              break;
 8003776:	e5c7      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
              *regdata16 = PID_GetKD(&PIDIdHandle_M1);
 8003778:	4822      	ldr	r0, [pc, #136]	@ (8003804 <RI_GetRegisterMotor1+0x794>)
 800377a:	f004 fde9 	bl	8008350 <PID_GetKD>
 800377e:	8020      	strh	r0, [r4, #0]
              break;
 8003780:	e5c2      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 8003782:	4821      	ldr	r0, [pc, #132]	@ (8003808 <RI_GetRegisterMotor1+0x798>)
 8003784:	f7fd fef8 	bl	8001578 <MCI_GetIqdref>
 8003788:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800378c:	8023      	strh	r3, [r4, #0]
              break;
 800378e:	e5bb      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
              *regdata16 = PID_GetKD(&PIDIqHandle_M1);
 8003790:	481e      	ldr	r0, [pc, #120]	@ (800380c <RI_GetRegisterMotor1+0x79c>)
 8003792:	f004 fddd 	bl	8008350 <PID_GetKD>
 8003796:	8020      	strh	r0, [r4, #0]
              break;
 8003798:	e5b6      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
              *regdata16 = PID_GetKI (&(&STO_PLL_M1)->PIRegulator);
 800379a:	481d      	ldr	r0, [pc, #116]	@ (8003810 <RI_GetRegisterMotor1+0x7a0>)
 800379c:	f004 fdac 	bl	80082f8 <PID_GetKI>
 80037a0:	8020      	strh	r0, [r4, #0]
              break;
 80037a2:	e5b1      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
              *regdata16 = NTC_GetAvTemp_C(&TempSensor_M1);
 80037a4:	481b      	ldr	r0, [pc, #108]	@ (8003814 <RI_GetRegisterMotor1+0x7a4>)
 80037a6:	f004 fd85 	bl	80082b4 <NTC_GetAvTemp_C>
 80037aa:	8020      	strh	r0, [r4, #0]
              break;
 80037ac:	e5ac      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
              *regdata16 = STO_PLL_GetEstimatedBemf(&STO_PLL_M1).alpha;
 80037ae:	4812      	ldr	r0, [pc, #72]	@ (80037f8 <RI_GetRegisterMotor1+0x788>)
 80037b0:	f006 fae0 	bl	8009d74 <STO_PLL_GetEstimatedBemf>
 80037b4:	8020      	strh	r0, [r4, #0]
              break;
 80037b6:	e5a7      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDSpeedHandle_M1);
 80037b8:	4817      	ldr	r0, [pc, #92]	@ (8003818 <RI_GetRegisterMotor1+0x7a8>)
 80037ba:	f004 fdcd 	bl	8008358 <PID_GetKDDivisorPOW2>
 80037be:	8020      	strh	r0, [r4, #0]
              break;
 80037c0:	e5a2      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIqHandle_M1);
 80037c2:	4812      	ldr	r0, [pc, #72]	@ (800380c <RI_GetRegisterMotor1+0x79c>)
 80037c4:	f004 fdc8 	bl	8008358 <PID_GetKDDivisorPOW2>
 80037c8:	8020      	strh	r0, [r4, #0]
              break;
 80037ca:	e59d      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)&STO_PLL_M1);
 80037cc:	480a      	ldr	r0, [pc, #40]	@ (80037f8 <RI_GetRegisterMotor1+0x788>)
 80037ce:	f005 ff83 	bl	80096d8 <SPD_GetS16Speed>
 80037d2:	8020      	strh	r0, [r4, #0]
              break;
 80037d4:	e598      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 80037d6:	480c      	ldr	r0, [pc, #48]	@ (8003808 <RI_GetRegisterMotor1+0x798>)
 80037d8:	f7fd fec0 	bl	800155c <MCI_GetIqd>
 80037dc:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80037e0:	8023      	strh	r3, [r4, #0]
              break;
 80037e2:	e591      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 80037e4:	4808      	ldr	r0, [pc, #32]	@ (8003808 <RI_GetRegisterMotor1+0x798>)
 80037e6:	f7fd feab 	bl	8001540 <MCI_GetIalphabeta>
 80037ea:	8020      	strh	r0, [r4, #0]
              break;
 80037ec:	e58c      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
              *regdata16 = PID_GetKD(&PIDSpeedHandle_M1);
 80037ee:	480a      	ldr	r0, [pc, #40]	@ (8003818 <RI_GetRegisterMotor1+0x7a8>)
 80037f0:	f004 fdae 	bl	8008350 <PID_GetKD>
 80037f4:	8020      	strh	r0, [r4, #0]
              break;
 80037f6:	e587      	b.n	8003308 <RI_GetRegisterMotor1+0x298>
 80037f8:	20000068 	.word	0x20000068
 80037fc:	2000040c 	.word	0x2000040c
 8003800:	20000408 	.word	0x20000408
 8003804:	200002e0 	.word	0x200002e0
 8003808:	20000000 	.word	0x20000000
 800380c:	2000030c 	.word	0x2000030c
 8003810:	2000009c 	.word	0x2000009c
 8003814:	200003a0 	.word	0x200003a0
 8003818:	20000338 	.word	0x20000338

0800381c <RI_GetIDSize>:
  return (retVal);
}

uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 800381c:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 8003820:	3808      	subs	r0, #8
 8003822:	b2c0      	uxtb	r0, r0
 8003824:	2810      	cmp	r0, #16
 8003826:	bf9a      	itte	ls
 8003828:	4b01      	ldrls	r3, [pc, #4]	@ (8003830 <RI_GetIDSize+0x14>)
 800382a:	5c18      	ldrbls	r0, [r3, r0]
 800382c:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 800382e:	4770      	bx	lr
 8003830:	0800a34c 	.word	0x0800a34c

08003834 <RI_GetPtrReg>:

    MCI_Handle_t *pMCIN = &Mci[0];
    uint16_t regID = dataID & REG_MASK;
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 8003834:	f000 0338 	and.w	r3, r0, #56	@ 0x38
 8003838:	2b10      	cmp	r3, #16
 800383a:	d003      	beq.n	8003844 <RI_GetPtrReg+0x10>
 800383c:	4a43      	ldr	r2, [pc, #268]	@ (800394c <RI_GetPtrReg+0x118>)
      }

      default:
      {
        *dataPtr = &nullData16;
        retVal = MCP_ERROR_UNKNOWN_REG;
 800383e:	2005      	movs	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003840:	600a      	str	r2, [r1, #0]
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8003842:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 8003844:	f020 0007 	bic.w	r0, r0, #7
 8003848:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 800384c:	b283      	uxth	r3, r0
 800384e:	d073      	beq.n	8003938 <RI_GetPtrReg+0x104>
 8003850:	d80f      	bhi.n	8003872 <RI_GetPtrReg+0x3e>
 8003852:	f5b3 6f0d 	cmp.w	r3, #2256	@ 0x8d0
 8003856:	d074      	beq.n	8003942 <RI_GetPtrReg+0x10e>
 8003858:	d824      	bhi.n	80038a4 <RI_GetPtrReg+0x70>
 800385a:	f5b3 6f05 	cmp.w	r3, #2128	@ 0x850
 800385e:	d058      	beq.n	8003912 <RI_GetPtrReg+0xde>
 8003860:	d915      	bls.n	800388e <RI_GetPtrReg+0x5a>
 8003862:	f5b3 6f09 	cmp.w	r3, #2192	@ 0x890
 8003866:	d1e9      	bne.n	800383c <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8003868:	4b39      	ldr	r3, [pc, #228]	@ (8003950 <RI_GetPtrReg+0x11c>)
 800386a:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800386c:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 800386e:	3206      	adds	r2, #6
            break;
 8003870:	e7e6      	b.n	8003840 <RI_GetPtrReg+0xc>
 8003872:	f5b3 6f35 	cmp.w	r3, #2896	@ 0xb50
 8003876:	d049      	beq.n	800390c <RI_GetPtrReg+0xd8>
 8003878:	d929      	bls.n	80038ce <RI_GetPtrReg+0x9a>
 800387a:	f5b3 6f45 	cmp.w	r3, #3152	@ 0xc50
 800387e:	d041      	beq.n	8003904 <RI_GetPtrReg+0xd0>
 8003880:	f5b3 6f49 	cmp.w	r3, #3216	@ 0xc90
 8003884:	d119      	bne.n	80038ba <RI_GetPtrReg+0x86>
 8003886:	4a33      	ldr	r2, [pc, #204]	@ (8003954 <RI_GetPtrReg+0x120>)
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003888:	600a      	str	r2, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 800388a:	2000      	movs	r0, #0
}
 800388c:	4770      	bx	lr
 800388e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003892:	d04d      	beq.n	8003930 <RI_GetPtrReg+0xfc>
 8003894:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 8003898:	d1d0      	bne.n	800383c <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 800389a:	4b2d      	ldr	r3, [pc, #180]	@ (8003950 <RI_GetPtrReg+0x11c>)
 800389c:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800389e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 80038a0:	3202      	adds	r2, #2
            break;
 80038a2:	e7cd      	b.n	8003840 <RI_GetPtrReg+0xc>
 80038a4:	f5b3 6f15 	cmp.w	r3, #2384	@ 0x950
 80038a8:	d038      	beq.n	800391c <RI_GetPtrReg+0xe8>
 80038aa:	f5b3 6f19 	cmp.w	r3, #2448	@ 0x990
 80038ae:	d119      	bne.n	80038e4 <RI_GetPtrReg+0xb0>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 80038b0:	4b27      	ldr	r3, [pc, #156]	@ (8003950 <RI_GetPtrReg+0x11c>)
 80038b2:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80038b4:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 80038b6:	3212      	adds	r2, #18
            break;
 80038b8:	e7c2      	b.n	8003840 <RI_GetPtrReg+0xc>
 80038ba:	4824      	ldr	r0, [pc, #144]	@ (800394c <RI_GetPtrReg+0x118>)
 80038bc:	4a26      	ldr	r2, [pc, #152]	@ (8003958 <RI_GetPtrReg+0x124>)
 80038be:	f5b3 6f39 	cmp.w	r3, #2960	@ 0xb90
 80038c2:	bf16      	itet	ne
 80038c4:	4602      	movne	r2, r0
 80038c6:	2000      	moveq	r0, #0
 80038c8:	2005      	movne	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 80038ca:	600a      	str	r2, [r1, #0]
}
 80038cc:	4770      	bx	lr
 80038ce:	f5b3 6f25 	cmp.w	r3, #2640	@ 0xa50
 80038d2:	d028      	beq.n	8003926 <RI_GetPtrReg+0xf2>
 80038d4:	f5b3 6f29 	cmp.w	r3, #2704	@ 0xa90
 80038d8:	d10c      	bne.n	80038f4 <RI_GetPtrReg+0xc0>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 80038da:	4b1d      	ldr	r3, [pc, #116]	@ (8003950 <RI_GetPtrReg+0x11c>)
 80038dc:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80038de:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 80038e0:	321c      	adds	r2, #28
            break;
 80038e2:	e7ad      	b.n	8003840 <RI_GetPtrReg+0xc>
 80038e4:	f5b3 6f11 	cmp.w	r3, #2320	@ 0x910
 80038e8:	d1a8      	bne.n	800383c <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 80038ea:	4b19      	ldr	r3, [pc, #100]	@ (8003950 <RI_GetPtrReg+0x11c>)
 80038ec:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80038ee:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 80038f0:	320e      	adds	r2, #14
            break;
 80038f2:	e7a5      	b.n	8003840 <RI_GetPtrReg+0xc>
 80038f4:	f5b3 6f21 	cmp.w	r3, #2576	@ 0xa10
 80038f8:	d1a0      	bne.n	800383c <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 80038fa:	4b15      	ldr	r3, [pc, #84]	@ (8003950 <RI_GetPtrReg+0x11c>)
 80038fc:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80038fe:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8003900:	3218      	adds	r2, #24
            break;
 8003902:	e79d      	b.n	8003840 <RI_GetPtrReg+0xc>
 8003904:	4a15      	ldr	r2, [pc, #84]	@ (800395c <RI_GetPtrReg+0x128>)
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003906:	600a      	str	r2, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003908:	2000      	movs	r0, #0
}
 800390a:	4770      	bx	lr
 800390c:	4a14      	ldr	r2, [pc, #80]	@ (8003960 <RI_GetPtrReg+0x12c>)
  uint8_t retVal = MCP_CMD_OK;
 800390e:	2000      	movs	r0, #0
 8003910:	e796      	b.n	8003840 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8003912:	4b0f      	ldr	r3, [pc, #60]	@ (8003950 <RI_GetPtrReg+0x11c>)
 8003914:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003916:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8003918:	3204      	adds	r2, #4
            break;
 800391a:	e791      	b.n	8003840 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 800391c:	4b0c      	ldr	r3, [pc, #48]	@ (8003950 <RI_GetPtrReg+0x11c>)
 800391e:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003920:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8003922:	3210      	adds	r2, #16
            break;
 8003924:	e78c      	b.n	8003840 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8003926:	4b0a      	ldr	r3, [pc, #40]	@ (8003950 <RI_GetPtrReg+0x11c>)
 8003928:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800392a:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 800392c:	321a      	adds	r2, #26
            break;
 800392e:	e787      	b.n	8003840 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003930:	4b07      	ldr	r3, [pc, #28]	@ (8003950 <RI_GetPtrReg+0x11c>)
  uint8_t retVal = MCP_CMD_OK;
 8003932:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003934:	685a      	ldr	r2, [r3, #4]
             break;
 8003936:	e783      	b.n	8003840 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8003938:	4b05      	ldr	r3, [pc, #20]	@ (8003950 <RI_GetPtrReg+0x11c>)
 800393a:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800393c:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 800393e:	3216      	adds	r2, #22
            break;
 8003940:	e77e      	b.n	8003840 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8003942:	4b03      	ldr	r3, [pc, #12]	@ (8003950 <RI_GetPtrReg+0x11c>)
 8003944:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003946:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8003948:	320c      	adds	r2, #12
            break;
 800394a:	e779      	b.n	8003840 <RI_GetPtrReg+0xc>
 800394c:	20001c6c 	.word	0x20001c6c
 8003950:	20000000 	.word	0x20000000
 8003954:	200000da 	.word	0x200000da
 8003958:	20000074 	.word	0x20000074
 800395c:	200000d8 	.word	0x200000d8
 8003960:	2000006c 	.word	0x2000006c

08003964 <RCM_RegisterRegConv>:
  * @param  regConv Pointer to the regular conversion parameters.
  *         Contains ADC, Channel and sampling time to be used.
  *
  */
void RCM_RegisterRegConv(RegConv_t *regConv)
{
 8003964:	b470      	push	{r4, r5, r6}

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003966:	4e79      	ldr	r6, [pc, #484]	@ (8003b4c <RCM_RegisterRegConv+0x1e8>)
 8003968:	6832      	ldr	r2, [r6, #0]
 800396a:	2a00      	cmp	r2, #0
 800396c:	d035      	beq.n	80039da <RCM_RegisterRegConv+0x76>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800396e:	7901      	ldrb	r1, [r0, #4]
 8003970:	7913      	ldrb	r3, [r2, #4]
 8003972:	4299      	cmp	r1, r3
 8003974:	d01f      	beq.n	80039b6 <RCM_RegisterRegConv+0x52>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003976:	6874      	ldr	r4, [r6, #4]
 8003978:	2c00      	cmp	r4, #0
 800397a:	f000 80c5 	beq.w	8003b08 <RCM_RegisterRegConv+0x1a4>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800397e:	7923      	ldrb	r3, [r4, #4]
 8003980:	428b      	cmp	r3, r1
  uint8_t handle = 255U;
 8003982:	f04f 02ff 	mov.w	r2, #255	@ 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003986:	d030      	beq.n	80039ea <RCM_RegisterRegConv+0x86>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003988:	68b5      	ldr	r5, [r6, #8]
 800398a:	2d00      	cmp	r5, #0
 800398c:	f000 80a2 	beq.w	8003ad4 <RCM_RegisterRegConv+0x170>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003990:	792b      	ldrb	r3, [r5, #4]
 8003992:	428b      	cmp	r3, r1
 8003994:	d02f      	beq.n	80039f6 <RCM_RegisterRegConv+0x92>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003996:	68f4      	ldr	r4, [r6, #12]
 8003998:	2c00      	cmp	r4, #0
 800399a:	f000 80a7 	beq.w	8003aec <RCM_RegisterRegConv+0x188>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800399e:	7923      	ldrb	r3, [r4, #4]
 80039a0:	428b      	cmp	r3, r1
 80039a2:	f000 80aa 	beq.w	8003afa <RCM_RegisterRegConv+0x196>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 80039a6:	2a03      	cmp	r2, #3
 80039a8:	bf88      	it	hi
 80039aa:	22ff      	movhi	r2, #255	@ 0xff
 80039ac:	f240 80b6 	bls.w	8003b1c <RCM_RegisterRegConv+0x1b8>
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  regConv->convHandle = handle;
}
 80039b0:	bc70      	pop	{r4, r5, r6}
  regConv->convHandle = handle;
 80039b2:	7302      	strb	r2, [r0, #12]
}
 80039b4:	4770      	bx	lr
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80039b6:	6803      	ldr	r3, [r0, #0]
 80039b8:	6812      	ldr	r2, [r2, #0]
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d021      	beq.n	8003a02 <RCM_RegisterRegConv+0x9e>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80039be:	6874      	ldr	r4, [r6, #4]
 80039c0:	2c00      	cmp	r4, #0
 80039c2:	d1dc      	bne.n	800397e <RCM_RegisterRegConv+0x1a>
 80039c4:	68b5      	ldr	r5, [r6, #8]
      i++;
 80039c6:	2201      	movs	r2, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80039c8:	2d00      	cmp	r5, #0
 80039ca:	d1e1      	bne.n	8003990 <RCM_RegisterRegConv+0x2c>
 80039cc:	68f4      	ldr	r4, [r6, #12]
 80039ce:	b1dc      	cbz	r4, 8003a08 <RCM_RegisterRegConv+0xa4>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80039d0:	7925      	ldrb	r5, [r4, #4]
 80039d2:	7901      	ldrb	r1, [r0, #4]
 80039d4:	428d      	cmp	r5, r1
 80039d6:	d115      	bne.n	8003a04 <RCM_RegisterRegConv+0xa0>
 80039d8:	e090      	b.n	8003afc <RCM_RegisterRegConv+0x198>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80039da:	6874      	ldr	r4, [r6, #4]
 80039dc:	2c00      	cmp	r4, #0
 80039de:	f000 80a5 	beq.w	8003b2c <RCM_RegisterRegConv+0x1c8>
 80039e2:	7901      	ldrb	r1, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80039e4:	7923      	ldrb	r3, [r4, #4]
 80039e6:	428b      	cmp	r3, r1
 80039e8:	d1ce      	bne.n	8003988 <RCM_RegisterRegConv+0x24>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80039ea:	6824      	ldr	r4, [r4, #0]
 80039ec:	6803      	ldr	r3, [r0, #0]
 80039ee:	42a3      	cmp	r3, r4
 80039f0:	d1ca      	bne.n	8003988 <RCM_RegisterRegConv+0x24>
      i++;
 80039f2:	2201      	movs	r2, #1
 80039f4:	e006      	b.n	8003a04 <RCM_RegisterRegConv+0xa0>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80039f6:	682c      	ldr	r4, [r5, #0]
 80039f8:	6803      	ldr	r3, [r0, #0]
 80039fa:	429c      	cmp	r4, r3
 80039fc:	d1cb      	bne.n	8003996 <RCM_RegisterRegConv+0x32>
      i++;
 80039fe:	2202      	movs	r2, #2
 8003a00:	e000      	b.n	8003a04 <RCM_RegisterRegConv+0xa0>
    uint8_t i = 0;
 8003a02:	2200      	movs	r2, #0
    while (i < RCM_MAX_CONV)
 8003a04:	f04f 0400 	mov.w	r4, #0
 8003a08:	f362 0407 	bfi	r4, r2, #0, #8
 8003a0c:	f362 240f 	bfi	r4, r2, #8, #8
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8003a10:	4d4f      	ldr	r5, [pc, #316]	@ (8003b50 <RCM_RegisterRegConv+0x1ec>)
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a12:	6899      	ldr	r1, [r3, #8]
      RCM_handle_array [handle] = regConv;
 8003a14:	f846 0022 	str.w	r0, [r6, r2, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8003a18:	2600      	movs	r6, #0
 8003a1a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
 8003a1e:	07ce      	lsls	r6, r1, #31
 8003a20:	d422      	bmi.n	8003a68 <RCM_RegisterRegConv+0x104>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8003a22:	6859      	ldr	r1, [r3, #4]
 8003a24:	f021 0104 	bic.w	r1, r1, #4
 8003a28:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003a2a:	2104      	movs	r1, #4
 8003a2c:	6019      	str	r1, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8003a2e:	6859      	ldr	r1, [r3, #4]
 8003a30:	f021 0120 	bic.w	r1, r1, #32
 8003a34:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8003a36:	2120      	movs	r1, #32
 8003a38:	6019      	str	r1, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8003a3a:	6899      	ldr	r1, [r3, #8]
 8003a3c:	f021 4140 	bic.w	r1, r1, #3221225472	@ 0xc0000000
 8003a40:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8003a44:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 8003a48:	6099      	str	r1, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003a4a:	6899      	ldr	r1, [r3, #8]
 8003a4c:	2900      	cmp	r1, #0
 8003a4e:	dbfc      	blt.n	8003a4a <RCM_RegisterRegConv+0xe6>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8003a50:	6819      	ldr	r1, [r3, #0]
 8003a52:	07cd      	lsls	r5, r1, #31
 8003a54:	d408      	bmi.n	8003a68 <RCM_RegisterRegConv+0x104>
  MODIFY_REG(ADCx->CR,
 8003a56:	4d3f      	ldr	r5, [pc, #252]	@ (8003b54 <RCM_RegisterRegConv+0x1f0>)
 8003a58:	6899      	ldr	r1, [r3, #8]
 8003a5a:	4029      	ands	r1, r5
 8003a5c:	f041 0101 	orr.w	r1, r1, #1
 8003a60:	6099      	str	r1, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8003a62:	6819      	ldr	r1, [r3, #0]
 8003a64:	07c9      	lsls	r1, r1, #31
 8003a66:	d5f7      	bpl.n	8003a58 <RCM_RegisterRegConv+0xf4>
      RCM_NoInj_array[handle].enable = false;
 8003a68:	4d3b      	ldr	r5, [pc, #236]	@ (8003b58 <RCM_RegisterRegConv+0x1f4>)
 8003a6a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8003a6e:	0049      	lsls	r1, r1, #1
      RCM_NoInj_array[handle].prev = handle;
 8003a70:	1d2e      	adds	r6, r5, #4
 8003a72:	5274      	strh	r4, [r6, r1]
      RCM_NoInj_array[handle].enable = false;
 8003a74:	2400      	movs	r4, #0
 8003a76:	546c      	strb	r4, [r5, r1]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003a78:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8003a7a:	f024 040f 	bic.w	r4, r4, #15
 8003a7e:	631c      	str	r4, [r3, #48]	@ 0x30
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8003a80:	f890 c004 	ldrb.w	ip, [r0, #4]
 8003a84:	2101      	movs	r1, #1
 8003a86:	fa01 f10c 	lsl.w	r1, r1, ip
 8003a8a:	f1bc 0f09 	cmp.w	ip, #9
 8003a8e:	ea41 618c 	orr.w	r1, r1, ip, lsl #26
 8003a92:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 8003a96:	d817      	bhi.n	8003ac8 <RCM_RegisterRegConv+0x164>
 8003a98:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003a9c:	0dcc      	lsrs	r4, r1, #23
 8003a9e:	f004 0404 	and.w	r4, r4, #4
 8003aa2:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 8003aa6:	6885      	ldr	r5, [r0, #8]
 8003aa8:	f85c 3004 	ldr.w	r3, [ip, r4]
 8003aac:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8003ab0:	2607      	movs	r6, #7
 8003ab2:	408d      	lsls	r5, r1
 8003ab4:	fa06 f101 	lsl.w	r1, r6, r1
 8003ab8:	ea23 0101 	bic.w	r1, r3, r1
 8003abc:	4329      	orrs	r1, r5
 8003abe:	f84c 1004 	str.w	r1, [ip, r4]
}
 8003ac2:	bc70      	pop	{r4, r5, r6}
  regConv->convHandle = handle;
 8003ac4:	7302      	strb	r2, [r0, #12]
}
 8003ac6:	4770      	bx	lr
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8003ac8:	3c1e      	subs	r4, #30
 8003aca:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
 8003ace:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 8003ad2:	e7e3      	b.n	8003a9c <RCM_RegisterRegConv+0x138>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003ad4:	2a04      	cmp	r2, #4
 8003ad6:	d92e      	bls.n	8003b36 <RCM_RegisterRegConv+0x1d2>
 8003ad8:	68f2      	ldr	r2, [r6, #12]
 8003ada:	b372      	cbz	r2, 8003b3a <RCM_RegisterRegConv+0x1d6>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003adc:	7913      	ldrb	r3, [r2, #4]
 8003ade:	4299      	cmp	r1, r3
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003ae0:	6803      	ldr	r3, [r0, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003ae2:	d02f      	beq.n	8003b44 <RCM_RegisterRegConv+0x1e0>
      i++;
 8003ae4:	2202      	movs	r2, #2
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003ae6:	f240 2402 	movw	r4, #514	@ 0x202
 8003aea:	e791      	b.n	8003a10 <RCM_RegisterRegConv+0xac>
 8003aec:	2a04      	cmp	r2, #4
 8003aee:	d917      	bls.n	8003b20 <RCM_RegisterRegConv+0x1bc>
 8003af0:	6803      	ldr	r3, [r0, #0]
 8003af2:	2203      	movs	r2, #3
 8003af4:	f240 3403 	movw	r4, #771	@ 0x303
 8003af8:	e78a      	b.n	8003a10 <RCM_RegisterRegConv+0xac>
 8003afa:	6803      	ldr	r3, [r0, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003afc:	6821      	ldr	r1, [r4, #0]
 8003afe:	4299      	cmp	r1, r3
 8003b00:	f47f af51 	bne.w	80039a6 <RCM_RegisterRegConv+0x42>
      i++;
 8003b04:	2203      	movs	r2, #3
 8003b06:	e77d      	b.n	8003a04 <RCM_RegisterRegConv+0xa0>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003b08:	68b5      	ldr	r5, [r6, #8]
      i++;
 8003b0a:	2201      	movs	r2, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003b0c:	2d00      	cmp	r5, #0
 8003b0e:	f47f af3f 	bne.w	8003990 <RCM_RegisterRegConv+0x2c>
 8003b12:	68f4      	ldr	r4, [r6, #12]
 8003b14:	b124      	cbz	r4, 8003b20 <RCM_RegisterRegConv+0x1bc>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003b16:	7923      	ldrb	r3, [r4, #4]
 8003b18:	428b      	cmp	r3, r1
 8003b1a:	d0ee      	beq.n	8003afa <RCM_RegisterRegConv+0x196>
 8003b1c:	f04f 0400 	mov.w	r4, #0
 8003b20:	f362 0407 	bfi	r4, r2, #0, #8
 8003b24:	6803      	ldr	r3, [r0, #0]
 8003b26:	f362 240f 	bfi	r4, r2, #8, #8
 8003b2a:	e771      	b.n	8003a10 <RCM_RegisterRegConv+0xac>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003b2c:	68b5      	ldr	r5, [r6, #8]
 8003b2e:	b135      	cbz	r5, 8003b3e <RCM_RegisterRegConv+0x1da>
 8003b30:	7901      	ldrb	r1, [r0, #4]
    uint8_t i = 0;
 8003b32:	4622      	mov	r2, r4
 8003b34:	e72c      	b.n	8003990 <RCM_RegisterRegConv+0x2c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003b36:	462a      	mov	r2, r5
 8003b38:	e7eb      	b.n	8003b12 <RCM_RegisterRegConv+0x1ae>
 8003b3a:	6803      	ldr	r3, [r0, #0]
 8003b3c:	e7d2      	b.n	8003ae4 <RCM_RegisterRegConv+0x180>
 8003b3e:	6803      	ldr	r3, [r0, #0]
    uint8_t i = 0;
 8003b40:	462a      	mov	r2, r5
 8003b42:	e743      	b.n	80039cc <RCM_RegisterRegConv+0x68>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003b44:	6812      	ldr	r2, [r2, #0]
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d0dc      	beq.n	8003b04 <RCM_RegisterRegConv+0x1a0>
 8003b4a:	e7cb      	b.n	8003ae4 <RCM_RegisterRegConv+0x180>
 8003b4c:	20001cb4 	.word	0x20001cb4
 8003b50:	20001c94 	.word	0x20001c94
 8003b54:	7fffffc0 	.word	0x7fffffc0
 8003b58:	20001c7c 	.word	0x20001c7c

08003b5c <RCM_ExecRegularConv>:
 * Otherwise, the latest stored conversion result will be returned.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
 8003b5c:	b510      	push	{r4, lr}
  uint16_t retVal;
  uint8_t handle = regConv->convHandle;
 8003b5e:	7b03      	ldrb	r3, [r0, #12]
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 8003b60:	4a5e      	ldr	r2, [pc, #376]	@ (8003cdc <RCM_ExecRegularConv+0x180>)
 8003b62:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8003b66:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003b6a:	f812 0011 	ldrb.w	r0, [r2, r1, lsl #1]
 8003b6e:	2800      	cmp	r0, #0
 8003b70:	d139      	bne.n	8003be6 <RCM_ExecRegularConv+0x8a>
  {
    /* Find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 8003b72:	7811      	ldrb	r1, [r2, #0]
 8003b74:	b991      	cbnz	r1, 8003b9c <RCM_ExecRegularConv+0x40>
  uint8_t LastEnable = RCM_MAX_CONV;
 8003b76:	2004      	movs	r0, #4
      if (true == RCM_NoInj_array [i].enable)
 8003b78:	7991      	ldrb	r1, [r2, #6]
 8003b7a:	2900      	cmp	r1, #0
 8003b7c:	d175      	bne.n	8003c6a <RCM_ExecRegularConv+0x10e>
 8003b7e:	7b11      	ldrb	r1, [r2, #12]
 8003b80:	2900      	cmp	r1, #0
 8003b82:	d177      	bne.n	8003c74 <RCM_ExecRegularConv+0x118>
 8003b84:	7c91      	ldrb	r1, [r2, #18]
 8003b86:	2900      	cmp	r1, #0
 8003b88:	f000 809a 	beq.w	8003cc0 <RCM_ExecRegularConv+0x164>
      {
        if (RCM_NoInj_array[i].next > handle)
 8003b8c:	7dd1      	ldrb	r1, [r2, #23]
 8003b8e:	4299      	cmp	r1, r3
 8003b90:	f240 80a0 	bls.w	8003cd4 <RCM_ExecRegularConv+0x178>
 8003b94:	f04f 0e03 	mov.w	lr, #3
      if (true == RCM_NoInj_array [i].enable)
 8003b98:	4670      	mov	r0, lr
 8003b9a:	e003      	b.n	8003ba4 <RCM_ExecRegularConv+0x48>
        if (RCM_NoInj_array[i].next > handle)
 8003b9c:	7951      	ldrb	r1, [r2, #5]
 8003b9e:	428b      	cmp	r3, r1
 8003ba0:	d2ea      	bcs.n	8003b78 <RCM_ExecRegularConv+0x1c>
  uint8_t i=0;
 8003ba2:	4686      	mov	lr, r0
        /* We found a previous reg conv to link with */
        {
          formerNext = RCM_NoInj_array [i].next;
          RCM_NoInj_array[handle].next = formerNext;
 8003ba4:	eb0c 0403 	add.w	r4, ip, r3
 8003ba8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
          RCM_NoInj_array[handle].prev = i;
          RCM_NoInj_array[i].next = handle;
 8003bac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
          RCM_NoInj_array[handle].next = formerNext;
 8003bb0:	7161      	strb	r1, [r4, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 8003bb2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
          RCM_NoInj_array[handle].prev = i;
 8003bb6:	f884 e004 	strb.w	lr, [r4, #4]
          RCM_NoInj_array[formerNext].prev = handle;
 8003bba:	eb02 0141 	add.w	r1, r2, r1, lsl #1
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003bbe:	4c48      	ldr	r4, [pc, #288]	@ (8003ce0 <RCM_ExecRegularConv+0x184>)
          RCM_NoInj_array[formerNext].prev = handle;
 8003bc0:	710b      	strb	r3, [r1, #4]
          RCM_NoInj_array[i].next = handle;
 8003bc2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003bc6:	7821      	ldrb	r1, [r4, #0]
          RCM_NoInj_array[i].next = handle;
 8003bc8:	7143      	strb	r3, [r0, #5]
    RCM_NoInj_array[handle].enable = true;
 8003bca:	eb0c 0003 	add.w	r0, ip, r3
 8003bce:	f04f 0e01 	mov.w	lr, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003bd2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    RCM_NoInj_array[handle].enable = true;
 8003bd6:	f822 e010 	strh.w	lr, [r2, r0, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003bda:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8003bde:	7849      	ldrb	r1, [r1, #1]
 8003be0:	4571      	cmp	r1, lr
    {/* Select the new conversion to be the next scheduled only if a conversion is not ongoing */
      RCM_currentHandle = handle;
 8003be2:	bf18      	it	ne
 8003be4:	7023      	strbne	r3, [r4, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 8003be6:	493f      	ldr	r1, [pc, #252]	@ (8003ce4 <RCM_ExecRegularConv+0x188>)
 8003be8:	f891 10a0 	ldrb.w	r1, [r1, #160]	@ 0xa0
 8003bec:	2900      	cmp	r1, #0
 8003bee:	d137      	bne.n	8003c60 <RCM_ExecRegularConv+0x104>
  /* The ADC is free to be used asynchronously */
  {
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003bf0:	493d      	ldr	r1, [pc, #244]	@ (8003ce8 <RCM_ExecRegularConv+0x18c>)
 8003bf2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003bf6:	790c      	ldrb	r4, [r1, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003bf8:	6808      	ldr	r0, [r1, #0]
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003bfa:	2101      	movs	r1, #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003bfc:	2c09      	cmp	r4, #9
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003bfe:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8003c02:	fa01 f104 	lsl.w	r1, r1, r4
 8003c06:	ea41 6184 	orr.w	r1, r1, r4, lsl #26
 8003c0a:	bf84      	itt	hi
 8003c0c:	f1ae 0e1e 	subhi.w	lr, lr, #30
 8003c10:	ea41 510e 	orrhi.w	r1, r1, lr, lsl #20
  MODIFY_REG(*preg,
 8003c14:	6b04      	ldr	r4, [r0, #48]	@ 0x30
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003c16:	bf94      	ite	ls
 8003c18:	ea41 510e 	orrls.w	r1, r1, lr, lsl #20
 8003c1c:	f041 7100 	orrhi.w	r1, r1, #33554432	@ 0x2000000
 8003c20:	0d09      	lsrs	r1, r1, #20
 8003c22:	f401 61f8 	and.w	r1, r1, #1984	@ 0x7c0
 8003c26:	f424 64f8 	bic.w	r4, r4, #1984	@ 0x7c0
 8003c2a:	4321      	orrs	r1, r4
 8003c2c:	6301      	str	r1, [r0, #48]	@ 0x30
* param  ADCx ADC instance
* retval Value between Min_Data=0x0000 and Max_Data=0xFFF0
*/
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12L(const ADC_TypeDef *ADCx)
{
  return (uint16_t)(READ_REG(ADCx->DR) & 0x0000FFF0UL);
 8003c2e:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 8003c30:	6881      	ldr	r1, [r0, #8]
 8003c32:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8003c36:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8003c3a:	f041 0104 	orr.w	r1, r1, #4
 8003c3e:	6081      	str	r1, [r0, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8003c40:	6801      	ldr	r1, [r0, #0]
 8003c42:	0749      	lsls	r1, r1, #29
 8003c44:	d5fc      	bpl.n	8003c40 <RCM_ExecRegularConv+0xe4>
 8003c46:	6c00      	ldr	r0, [r0, #64]	@ 0x40
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[handle]->regADC);
 8003c48:	eb0c 0103 	add.w	r1, ip, r3
 8003c4c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8003c50:	f020 000f 	bic.w	r0, r0, #15
 8003c54:	8048      	strh	r0, [r1, #2]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 8003c56:	4822      	ldr	r0, [pc, #136]	@ (8003ce0 <RCM_ExecRegularConv+0x184>)
 8003c58:	794c      	ldrb	r4, [r1, #5]
 8003c5a:	7004      	strb	r4, [r0, #0]
    RCM_NoInj_array[handle].status = valid;
 8003c5c:	2002      	movs	r0, #2
 8003c5e:	7048      	strb	r0, [r1, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 8003c60:	449c      	add	ip, r3
 8003c62:	eb02 024c 	add.w	r2, r2, ip, lsl #1
  return (retVal);
}
 8003c66:	8850      	ldrh	r0, [r2, #2]
 8003c68:	bd10      	pop	{r4, pc}
        if (RCM_NoInj_array[i].next > handle)
 8003c6a:	7ad1      	ldrb	r1, [r2, #11]
 8003c6c:	428b      	cmp	r3, r1
 8003c6e:	d31d      	bcc.n	8003cac <RCM_ExecRegularConv+0x150>
      if (true == RCM_NoInj_array [i].enable)
 8003c70:	7b11      	ldrb	r1, [r2, #12]
 8003c72:	b1f9      	cbz	r1, 8003cb4 <RCM_ExecRegularConv+0x158>
        if (RCM_NoInj_array[i].next > handle)
 8003c74:	7c51      	ldrb	r1, [r2, #17]
 8003c76:	4299      	cmp	r1, r3
 8003c78:	d828      	bhi.n	8003ccc <RCM_ExecRegularConv+0x170>
      if (true == RCM_NoInj_array [i].enable)
 8003c7a:	7c91      	ldrb	r1, [r2, #18]
 8003c7c:	2900      	cmp	r1, #0
 8003c7e:	d185      	bne.n	8003b8c <RCM_ExecRegularConv+0x30>
 8003c80:	2102      	movs	r1, #2
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003c82:	4608      	mov	r0, r1
 8003c84:	eb00 0040 	add.w	r0, r0, r0, lsl #1
         RCM_NoInj_array[handle].next = formerNext;
 8003c88:	eb0c 0403 	add.w	r4, ip, r3
 8003c8c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003c90:	eb02 0040 	add.w	r0, r2, r0, lsl #1
         RCM_NoInj_array[handle].prev = LastEnable;
 8003c94:	7121      	strb	r1, [r4, #4]
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003c96:	7941      	ldrb	r1, [r0, #5]
         RCM_NoInj_array[handle].next = formerNext;
 8003c98:	7161      	strb	r1, [r4, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 8003c9a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003c9e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003ca2:	4c0f      	ldr	r4, [pc, #60]	@ (8003ce0 <RCM_ExecRegularConv+0x184>)
         RCM_NoInj_array[formerNext].prev = handle;
 8003ca4:	710b      	strb	r3, [r1, #4]
         RCM_NoInj_array[LastEnable].next = handle;
 8003ca6:	7143      	strb	r3, [r0, #5]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003ca8:	7821      	ldrb	r1, [r4, #0]
 8003caa:	e78e      	b.n	8003bca <RCM_ExecRegularConv+0x6e>
        if (RCM_NoInj_array[i].next > handle)
 8003cac:	f04f 0e01 	mov.w	lr, #1
      if (true == RCM_NoInj_array [i].enable)
 8003cb0:	4670      	mov	r0, lr
 8003cb2:	e777      	b.n	8003ba4 <RCM_ExecRegularConv+0x48>
 8003cb4:	7c91      	ldrb	r1, [r2, #18]
 8003cb6:	2900      	cmp	r1, #0
 8003cb8:	f47f af68 	bne.w	8003b8c <RCM_ExecRegularConv+0x30>
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	e7e0      	b.n	8003c82 <RCM_ExecRegularConv+0x126>
       if (LastEnable != RCM_MAX_CONV )
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	d0de      	beq.n	8003c82 <RCM_ExecRegularConv+0x126>
         RCM_currentHandle = handle;
 8003cc4:	4c06      	ldr	r4, [pc, #24]	@ (8003ce0 <RCM_ExecRegularConv+0x184>)
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	7023      	strb	r3, [r4, #0]
    while (i < RCM_MAX_CONV)
 8003cca:	e77e      	b.n	8003bca <RCM_ExecRegularConv+0x6e>
        if (RCM_NoInj_array[i].next > handle)
 8003ccc:	f04f 0e02 	mov.w	lr, #2
      if (true == RCM_NoInj_array [i].enable)
 8003cd0:	4670      	mov	r0, lr
 8003cd2:	e767      	b.n	8003ba4 <RCM_ExecRegularConv+0x48>
 8003cd4:	2003      	movs	r0, #3
 8003cd6:	4601      	mov	r1, r0
 8003cd8:	e7d4      	b.n	8003c84 <RCM_ExecRegularConv+0x128>
 8003cda:	bf00      	nop
 8003cdc:	20001c7c 	.word	0x20001c7c
 8003ce0:	20001c78 	.word	0x20001c78
 8003ce4:	20000190 	.word	0x20000190
 8003ce8:	20001cb4 	.word	0x20001cb4

08003cec <RCM_ExecUserConv>:
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 8003cec:	4b14      	ldr	r3, [pc, #80]	@ (8003d40 <RCM_ExecUserConv+0x54>)
{
 8003cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RCM_UserConvHandle != NULL)
 8003cf2:	681c      	ldr	r4, [r3, #0]
 8003cf4:	b124      	cbz	r4, 8003d00 <RCM_ExecUserConv+0x14>
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8003cf6:	4d13      	ldr	r5, [pc, #76]	@ (8003d44 <RCM_ExecUserConv+0x58>)
    handle = RCM_UserConvHandle->convHandle;
 8003cf8:	7b26      	ldrb	r6, [r4, #12]
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8003cfa:	782b      	ldrb	r3, [r5, #0]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d001      	beq.n	8003d04 <RCM_ExecUserConv+0x18>
  }
  else
  {
     /* Nothing to do */
  }
}
 8003d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003d04:	4620      	mov	r0, r4
 8003d06:	f7ff ff29 	bl	8003b5c <RCM_ExecRegularConv>
 8003d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8003d48 <RCM_ExecUserConv+0x5c>)
 8003d0c:	8018      	strh	r0, [r3, #0]
      if (RCM_NoInj_array [handle].status != notvalid)
 8003d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8003d4c <RCM_ExecUserConv+0x60>)
 8003d10:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8003d14:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003d18:	4601      	mov	r1, r0
      if (RCM_NoInj_array [handle].status != notvalid)
 8003d1a:	785b      	ldrb	r3, [r3, #1]
 8003d1c:	b10b      	cbz	r3, 8003d22 <RCM_ExecUserConv+0x36>
        RCM_UserConvState = RCM_USERCONV_EOC;
 8003d1e:	2302      	movs	r3, #2
 8003d20:	702b      	strb	r3, [r5, #0]
      if (RCM_CB_array[handle].cb != NULL)
 8003d22:	4b0b      	ldr	r3, [pc, #44]	@ (8003d50 <RCM_ExecUserConv+0x64>)
 8003d24:	f853 7036 	ldr.w	r7, [r3, r6, lsl #3]
 8003d28:	2f00      	cmp	r7, #0
 8003d2a:	d0e9      	beq.n	8003d00 <RCM_ExecUserConv+0x14>
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003d2c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003d30:	4620      	mov	r0, r4
 8003d32:	685a      	ldr	r2, [r3, #4]
        RCM_UserConvState = RCM_USERCONV_IDLE;
 8003d34:	2300      	movs	r3, #0
 8003d36:	702b      	strb	r3, [r5, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003d38:	463b      	mov	r3, r7
}
 8003d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003d3e:	4718      	bx	r3
 8003d40:	20001c70 	.word	0x20001c70
 8003d44:	20001c74 	.word	0x20001c74
 8003d48:	20001c76 	.word	0x20001c76
 8003d4c:	20001c7c 	.word	0x20001c7c
 8003d50:	20001c94 	.word	0x20001c94

08003d54 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8003d54:	4b1e      	ldr	r3, [pc, #120]	@ (8003dd0 <RCM_ExecNextConv+0x7c>)
 8003d56:	491f      	ldr	r1, [pc, #124]	@ (8003dd4 <RCM_ExecNextConv+0x80>)
 8003d58:	781a      	ldrb	r2, [r3, #0]
 8003d5a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8003d5e:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8003d62:	b3a3      	cbz	r3, 8003dce <RCM_ExecNextConv+0x7a>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped */

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003d64:	4b1c      	ldr	r3, [pc, #112]	@ (8003dd8 <RCM_ExecNextConv+0x84>)
{
 8003d66:	b510      	push	{r4, lr}
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d6c:	6818      	ldr	r0, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003d6e:	2404      	movs	r4, #4
 8003d70:	6004      	str	r4, [r0, #0]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8003d72:	f893 c004 	ldrb.w	ip, [r3, #4]
 8003d76:	2301      	movs	r3, #1
 8003d78:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8003d7c:	f1bc 0f09 	cmp.w	ip, #9
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8003d80:	fa03 f30c 	lsl.w	r3, r3, ip
 8003d84:	ea43 638c 	orr.w	r3, r3, ip, lsl #26
 8003d88:	bf84      	itt	hi
 8003d8a:	3c1e      	subhi	r4, #30
 8003d8c:	ea43 5304 	orrhi.w	r3, r3, r4, lsl #20
 8003d90:	ea4f 0e42 	mov.w	lr, r2, lsl #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8003d94:	bf98      	it	ls
 8003d96:	ea43 5304 	orrls.w	r3, r3, r4, lsl #20

    (void)LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_currentHandle]->regADC);

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8003d9a:	4496      	add	lr, r2
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8003d9c:	bf88      	it	hi
 8003d9e:	f043 7300 	orrhi.w	r3, r3, #33554432	@ 0x2000000
  MODIFY_REG(*preg,
 8003da2:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8003da4:	0d1b      	lsrs	r3, r3, #20
 8003da6:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003daa:	f422 62f8 	bic.w	r2, r2, #1984	@ 0x7c0
 8003dae:	4313      	orrs	r3, r2
 8003db0:	6303      	str	r3, [r0, #48]	@ 0x30
 8003db2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 8003db4:	6883      	ldr	r3, [r0, #8]
 8003db6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8003dba:	eb01 014e 	add.w	r1, r1, lr, lsl #1
 8003dbe:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003dc2:	2401      	movs	r4, #1
 8003dc4:	f043 0304 	orr.w	r3, r3, #4
 8003dc8:	6083      	str	r3, [r0, #8]
 8003dca:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do, conversion not enabled have already notvalid status */
  }
}
 8003dcc:	bd10      	pop	{r4, pc}
 8003dce:	4770      	bx	lr
 8003dd0:	20001c78 	.word	0x20001c78
 8003dd4:	20001c7c 	.word	0x20001c7c
 8003dd8:	20001cb4 	.word	0x20001cb4

08003ddc <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 8003ddc:	b430      	push	{r4, r5}
  uint32_t result;
  RCM_status_t status;

  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8003dde:	4812      	ldr	r0, [pc, #72]	@ (8003e28 <RCM_ReadOngoingConv+0x4c>)
 8003de0:	4a12      	ldr	r2, [pc, #72]	@ (8003e2c <RCM_ReadOngoingConv+0x50>)
 8003de2:	7803      	ldrb	r3, [r0, #0]
 8003de4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8003de8:	f812 4011 	ldrb.w	r4, [r2, r1, lsl #1]
 8003dec:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8003df0:	b16c      	cbz	r4, 8003e0e <RCM_ReadOngoingConv+0x32>
  {
    status = RCM_NoInj_array[RCM_currentHandle].status;
    result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003df2:	4c0f      	ldr	r4, [pc, #60]	@ (8003e30 <RCM_ReadOngoingConv+0x54>)
 8003df4:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8003df8:	6824      	ldr	r4, [r4, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8003dfa:	6825      	ldr	r5, [r4, #0]
 8003dfc:	076d      	lsls	r5, r5, #29
 8003dfe:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003e02:	d406      	bmi.n	8003e12 <RCM_ReadOngoingConv+0x36>
      RCM_NoInj_array[RCM_currentHandle].status = valid;
      /* Restore back DMA configuration */
    }

    /* Prepare next conversion */
    RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8003e04:	449c      	add	ip, r3
 8003e06:	eb02 024c 	add.w	r2, r2, ip, lsl #1
 8003e0a:	7953      	ldrb	r3, [r2, #5]
 8003e0c:	7003      	strb	r3, [r0, #0]
    }
    else
    {
      /* Nothing to do */
    }
}
 8003e0e:	bc30      	pop	{r4, r5}
 8003e10:	4770      	bx	lr
    if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8003e12:	784d      	ldrb	r5, [r1, #1]
 8003e14:	f015 0ffd 	tst.w	r5, #253	@ 0xfd
 8003e18:	d0f4      	beq.n	8003e04 <RCM_ReadOngoingConv+0x28>
 8003e1a:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 8003e1c:	f024 040f 	bic.w	r4, r4, #15
                    = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_currentHandle]->regADC);
 8003e20:	804c      	strh	r4, [r1, #2]
      RCM_NoInj_array[RCM_currentHandle].status = valid;
 8003e22:	2402      	movs	r4, #2
 8003e24:	704c      	strb	r4, [r1, #1]
 8003e26:	e7ed      	b.n	8003e04 <RCM_ReadOngoingConv+0x28>
 8003e28:	20001c78 	.word	0x20001c78
 8003e2c:	20001c7c 	.word	0x20001c7c
 8003e30:	20001cb4 	.word	0x20001cb4

08003e34 <USART2_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8003e34:	4b43      	ldr	r3, [pc, #268]	@ (8003f44 <USART2_IRQHandler+0x110>)
 8003e36:	69da      	ldr	r2, [r3, #28]
 8003e38:	0652      	lsls	r2, r2, #25
  * @brief  This function handles USART interrupt request.
  * @param  None
  */
//cstat !MISRAC2012-Rule-8.4
void USART2_IRQHandler(void)
{
 8003e3a:	b510      	push	{r4, lr}
 8003e3c:	d509      	bpl.n	8003e52 <USART2_IRQHandler+0x1e>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8003e3e:	4942      	ldr	r1, [pc, #264]	@ (8003f48 <USART2_IRQHandler+0x114>)
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel(DMA_TX_A, DMACH_TX_A);
    LL_USART_ClearFlag_TC(USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT(&aspepOverUartA);
 8003e40:	4842      	ldr	r0, [pc, #264]	@ (8003f4c <USART2_IRQHandler+0x118>)
 8003e42:	69ca      	ldr	r2, [r1, #28]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003e44:	2440      	movs	r4, #64	@ 0x40
 8003e46:	f022 0201 	bic.w	r2, r2, #1
 8003e4a:	61ca      	str	r2, [r1, #28]
 8003e4c:	621c      	str	r4, [r3, #32]
 8003e4e:	f7fc fce1 	bl	8000814 <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003e52:	4b3c      	ldr	r3, [pc, #240]	@ (8003f44 <USART2_IRQHandler+0x110>)
 8003e54:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8003e56:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8003e58:	69d9      	ldr	r1, [r3, #28]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8003e5a:	689c      	ldr	r4, [r3, #8]
 8003e5c:	07e4      	lsls	r4, r4, #31
 8003e5e:	d526      	bpl.n	8003eae <USART2_IRQHandler+0x7a>
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8003e60:	f002 0202 	and.w	r2, r2, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003e64:	f000 0008 	and.w	r0, r0, #8
  feFlag = LL_USART_IsActiveFlag_FE(USARTA);
  neFlag = LL_USART_IsActiveFlag_NE(USARTA);
  errorMask = LL_USART_IsEnabledIT_ERROR(USARTA);

  flags = ((oreFlag | feFlag | neFlag) & errorMask);
  if (0U == flags)
 8003e68:	4302      	orrs	r2, r0
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8003e6a:	f001 0104 	and.w	r1, r1, #4
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	d01d      	beq.n	8003eae <USART2_IRQHandler+0x7a>
  {
    /* Nothing to do */
  }
  else
  { /* Stopping the debugger will generate an OverRun error*/
    WRITE_REG(USARTA->ICR, USART_ICR_FECF | USART_ICR_ORECF | USART_ICR_NECF);
 8003e72:	220e      	movs	r2, #14
 8003e74:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e76:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003e7a:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8003e7e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8003e82:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e86:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8003e8a:	e840 3100 	strex	r1, r3, [r0]
 8003e8e:	2900      	cmp	r1, #0
 8003e90:	d1f3      	bne.n	8003e7a <USART2_IRQHandler+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e92:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003e96:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 8003e9a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003e9e:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea2:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8003ea6:	e840 3100 	strex	r1, r3, [r0]
 8003eaa:	2900      	cmp	r1, #0
 8003eac:	d1f3      	bne.n	8003e96 <USART2_IRQHandler+0x62>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8003eae:	4b25      	ldr	r3, [pc, #148]	@ (8003f44 <USART2_IRQHandler+0x110>)
 8003eb0:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8003eb2:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8003eb4:	06d2      	lsls	r2, r2, #27
 8003eb6:	d543      	bpl.n	8003f40 <USART2_IRQHandler+0x10c>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8003eb8:	06db      	lsls	r3, r3, #27
 8003eba:	d541      	bpl.n	8003f40 <USART2_IRQHandler+0x10c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003ec0:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 8003ec4:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003ec8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ecc:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8003ed0:	e840 3100 	strex	r1, r3, [r0]
 8003ed4:	2900      	cmp	r1, #0
 8003ed6:	d1f3      	bne.n	8003ec0 <USART2_IRQHandler+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003edc:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8003ee0:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003ee4:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee8:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8003eec:	e840 3100 	strex	r1, r3, [r0]
 8003ef0:	2900      	cmp	r1, #0
 8003ef2:	d1f3      	bne.n	8003edc <USART2_IRQHandler+0xa8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003ef8:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8003efc:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003f00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f04:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8003f08:	e840 3100 	strex	r1, r3, [r0]
 8003f0c:	2900      	cmp	r1, #0
 8003f0e:	d1f3      	bne.n	8003ef8 <USART2_IRQHandler+0xc4>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8003f10:	4b0c      	ldr	r3, [pc, #48]	@ (8003f44 <USART2_IRQHandler+0x110>)
 8003f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f14:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003f18:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8003f1c:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003f20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f24:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8003f28:	e840 3100 	strex	r1, r3, [r0]
 8003f2c:	2900      	cmp	r1, #0
 8003f2e:	d1f3      	bne.n	8003f18 <USART2_IRQHandler+0xe4>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8003f30:	4b05      	ldr	r3, [pc, #20]	@ (8003f48 <USART2_IRQHandler+0x114>)
    LL_USART_DisableDMAReq_RX(USARTA);
    (void)LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX(USARTA);
    /* Clear pending DMA TC to process only new received packet */
    LL_DMA_ClearFlag_TC(DMA_RX_A, DMACH_RX_A);
    ASPEP_HWReset(&aspepOverUartA);
 8003f32:	4806      	ldr	r0, [pc, #24]	@ (8003f4c <USART2_IRQHandler+0x118>)
 8003f34:	2202      	movs	r2, #2
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 8003f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f3a:	605a      	str	r2, [r3, #4]
    ASPEP_HWReset(&aspepOverUartA);
 8003f3c:	f7fc be64 	b.w	8000c08 <ASPEP_HWReset>
}
 8003f40:	bd10      	pop	{r4, pc}
 8003f42:	bf00      	nop
 8003f44:	40004400 	.word	0x40004400
 8003f48:	40020000 	.word	0x40020000
 8003f4c:	20000460 	.word	0x20000460

08003f50 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 8003f50:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */

  TSK_HardwareFaultTask();
 8003f52:	f7fd fd11 	bl	8001978 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (true)
 8003f56:	e7fe      	b.n	8003f56 <HardFault_Handler+0x6>

08003f58 <SysTick_Handler>:

 /* USER CODE END HardFault_IRQn 1 */
}

void SysTick_Handler(void)
{
 8003f58:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8003f5a:	4c0d      	ldr	r4, [pc, #52]	@ (8003f90 <SysTick_Handler+0x38>)
 8003f5c:	7823      	ldrb	r3, [r4, #0]
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d00f      	beq.n	8003f82 <SysTick_Handler+0x2a>
  else
  {
    /* Nothing to do */
  }

  SystickDividerCounter ++;
 8003f62:	3301      	adds	r3, #1
 8003f64:	b2db      	uxtb	r3, r3
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR,
 8003f66:	4a0b      	ldr	r2, [pc, #44]	@ (8003f94 <SysTick_Handler+0x3c>)
 8003f68:	7023      	strb	r3, [r4, #0]
 8003f6a:	6813      	ldr	r3, [r2, #0]
 8003f6c:	079b      	lsls	r3, r3, #30
 8003f6e:	d504      	bpl.n	8003f7a <SysTick_Handler+0x22>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8003f70:	2302      	movs	r3, #2
  /* Buffer is ready by the HW layer to be processed */
  /* NO DMA interrupt */
  if (LL_DMA_IsActiveFlag_TC(DMA_RX_A, DMACH_RX_A))
  {
    LL_DMA_ClearFlag_TC(DMA_RX_A, DMACH_RX_A);
    ASPEP_HWDataReceivedIT(&aspepOverUartA);
 8003f72:	4809      	ldr	r0, [pc, #36]	@ (8003f98 <SysTick_Handler+0x40>)
 8003f74:	6053      	str	r3, [r2, #4]
 8003f76:	f7fc fdf9 	bl	8000b6c <ASPEP_HWDataReceivedIT>
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */

  /* USER CODE END SysTick_IRQn 2 */
}
 8003f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8003f7e:	f7fd bcb3 	b.w	80018e8 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8003f82:	f000 fc9f 	bl	80048c4 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8003f86:	f001 fc85 	bl	8005894 <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e7eb      	b.n	8003f66 <SysTick_Handler+0xe>
 8003f8e:	bf00      	nop
 8003f90:	200004e8 	.word	0x200004e8
 8003f94:	40020000 	.word	0x40020000
 8003f98:	20000460 	.word	0x20000460

08003f9c <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8003f9c:	4b04      	ldr	r3, [pc, #16]	@ (8003fb0 <EXTI15_10_IRQHandler+0x14>)
 8003f9e:	695a      	ldr	r2, [r3, #20]

  */
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN START_STOP_BTN */
  if (LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_10))
 8003fa0:	0552      	lsls	r2, r2, #21
 8003fa2:	d400      	bmi.n	8003fa6 <EXTI15_10_IRQHandler+0xa>
  else
  {
    /* Nothing to do */
  }

}
 8003fa4:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003fa6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003faa:	615a      	str	r2, [r3, #20]
    (void)UI_HandleStartStopButton_cb();
 8003fac:	f7fd bcf2 	b.w	8001994 <UI_HandleStartStopButton_cb>
 8003fb0:	40010400 	.word	0x40010400

08003fb4 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff0 <HAL_MspInit+0x3c>)
{
 8003fb6:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fb8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003fba:	f042 0201 	orr.w	r2, r2, #1
 8003fbe:	661a      	str	r2, [r3, #96]	@ 0x60
 8003fc0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
{
 8003fc2:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fc4:	f002 0201 	and.w	r2, r2, #1
 8003fc8:	9200      	str	r2, [sp, #0]
 8003fca:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fcc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003fce:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003fd2:	659a      	str	r2, [r3, #88]	@ 0x58
 8003fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fda:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003fdc:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fde:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003fe0:	f001 fbce 	bl	8005780 <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fe4:	b003      	add	sp, #12
 8003fe6:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 8003fea:	f002 b9b1 	b.w	8006350 <HAL_PWREx_DisableUCPDDeadBattery>
 8003fee:	bf00      	nop
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	00000000 	.word	0x00000000

08003ff8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ff8:	b510      	push	{r4, lr}
 8003ffa:	4604      	mov	r4, r0
 8003ffc:	b09c      	sub	sp, #112	@ 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ffe:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004000:	2244      	movs	r2, #68	@ 0x44
 8004002:	a80b      	add	r0, sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004004:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8004008:	e9cd 1108 	strd	r1, r1, [sp, #32]
 800400c:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800400e:	f005 fff9 	bl	800a004 <memset>
  if(hadc->Instance==ADC1)
 8004012:	6823      	ldr	r3, [r4, #0]
 8004014:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004018:	d004      	beq.n	8004024 <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800401a:	4a43      	ldr	r2, [pc, #268]	@ (8004128 <HAL_ADC_MspInit+0x130>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d046      	beq.n	80040ae <HAL_ADC_MspInit+0xb6>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004020:	b01c      	add	sp, #112	@ 0x70
 8004022:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004024:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8004028:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800402c:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800402e:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8004030:	931a      	str	r3, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004032:	f002 fd49 	bl	8006ac8 <HAL_RCCEx_PeriphCLKConfig>
 8004036:	2800      	cmp	r0, #0
 8004038:	d16a      	bne.n	8004110 <HAL_ADC_MspInit+0x118>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800403a:	4a3c      	ldr	r2, [pc, #240]	@ (800412c <HAL_ADC_MspInit+0x134>)
 800403c:	6813      	ldr	r3, [r2, #0]
 800403e:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004040:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004042:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004044:	d109      	bne.n	800405a <HAL_ADC_MspInit+0x62>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004046:	4b3a      	ldr	r3, [pc, #232]	@ (8004130 <HAL_ADC_MspInit+0x138>)
 8004048:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800404a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800404e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004052:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004056:	9301      	str	r3, [sp, #4]
 8004058:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800405a:	4b35      	ldr	r3, [pc, #212]	@ (8004130 <HAL_ADC_MspInit+0x138>)
 800405c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800405e:	f042 0201 	orr.w	r2, r2, #1
 8004062:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004064:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004066:	f002 0201 	and.w	r2, r2, #1
 800406a:	9202      	str	r2, [sp, #8]
 800406c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800406e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004070:	f042 0202 	orr.w	r2, r2, #2
 8004074:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407e:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004080:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 8004082:	2205      	movs	r2, #5
 8004084:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004086:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 800408a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408e:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004090:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004092:	f001 ff6b 	bl	8005f6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8004096:	f244 0202 	movw	r2, #16386	@ 0x4002
 800409a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800409c:	4825      	ldr	r0, [pc, #148]	@ (8004134 <HAL_ADC_MspInit+0x13c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409e:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040a0:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 80040a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040a6:	f001 ff61 	bl	8005f6c <HAL_GPIO_Init>
}
 80040aa:	b01c      	add	sp, #112	@ 0x70
 80040ac:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80040ae:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80040b2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040b6:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80040b8:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80040ba:	931a      	str	r3, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040bc:	f002 fd04 	bl	8006ac8 <HAL_RCCEx_PeriphCLKConfig>
 80040c0:	bb48      	cbnz	r0, 8004116 <HAL_ADC_MspInit+0x11e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80040c2:	4a1a      	ldr	r2, [pc, #104]	@ (800412c <HAL_ADC_MspInit+0x134>)
 80040c4:	6813      	ldr	r3, [r2, #0]
 80040c6:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80040c8:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80040ca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80040cc:	d109      	bne.n	80040e2 <HAL_ADC_MspInit+0xea>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80040ce:	4b18      	ldr	r3, [pc, #96]	@ (8004130 <HAL_ADC_MspInit+0x138>)
 80040d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80040d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040d6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80040d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040de:	9304      	str	r3, [sp, #16]
 80040e0:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040e2:	4b13      	ldr	r3, [pc, #76]	@ (8004130 <HAL_ADC_MspInit+0x138>)
 80040e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80040e6:	f042 0201 	orr.w	r2, r2, #1
 80040ea:	64da      	str	r2, [r3, #76]	@ 0x4c
 80040ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 80040ee:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8004120 <HAL_ADC_MspInit+0x128>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80040f8:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fa:	2300      	movs	r3, #0
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80040fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 8004100:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004104:	9a05      	ldr	r2, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004106:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8004108:	f001 ff30 	bl	8005f6c <HAL_GPIO_Init>
}
 800410c:	b01c      	add	sp, #112	@ 0x70
 800410e:	bd10      	pop	{r4, pc}
      Error_Handler();
 8004110:	f7fd f8fa 	bl	8001308 <Error_Handler>
 8004114:	e791      	b.n	800403a <HAL_ADC_MspInit+0x42>
      Error_Handler();
 8004116:	f7fd f8f7 	bl	8001308 <Error_Handler>
 800411a:	e7d2      	b.n	80040c2 <HAL_ADC_MspInit+0xca>
 800411c:	f3af 8000 	nop.w
 8004120:	00000040 	.word	0x00000040
 8004124:	00000003 	.word	0x00000003
 8004128:	50000100 	.word	0x50000100
 800412c:	20001cc4 	.word	0x20001cc4
 8004130:	40021000 	.word	0x40021000
 8004134:	48000400 	.word	0x48000400

08004138 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8004138:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcomp->Instance==COMP1)
 800413a:	6802      	ldr	r2, [r0, #0]
 800413c:	4934      	ldr	r1, [pc, #208]	@ (8004210 <HAL_COMP_MspInit+0xd8>)
{
 800413e:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004140:	2300      	movs	r3, #0
  if(hcomp->Instance==COMP1)
 8004142:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004144:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004148:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800414c:	9308      	str	r3, [sp, #32]
  if(hcomp->Instance==COMP1)
 800414e:	d008      	beq.n	8004162 <HAL_COMP_MspInit+0x2a>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
  else if(hcomp->Instance==COMP2)
 8004150:	4b30      	ldr	r3, [pc, #192]	@ (8004214 <HAL_COMP_MspInit+0xdc>)
 8004152:	429a      	cmp	r2, r3
 8004154:	d01e      	beq.n	8004194 <HAL_COMP_MspInit+0x5c>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
  else if(hcomp->Instance==COMP4)
 8004156:	4b30      	ldr	r3, [pc, #192]	@ (8004218 <HAL_COMP_MspInit+0xe0>)
 8004158:	429a      	cmp	r2, r3
 800415a:	d034      	beq.n	80041c6 <HAL_COMP_MspInit+0x8e>
  /* USER CODE BEGIN COMP4_MspInit 1 */

  /* USER CODE END COMP4_MspInit 1 */
  }

}
 800415c:	b00b      	add	sp, #44	@ 0x2c
 800415e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004162:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004166:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 800416a:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 80041f8 <HAL_COMP_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800416e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004170:	f042 0201 	orr.w	r2, r2, #1
 8004174:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 800417e:	a904      	add	r1, sp, #16
 8004180:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 8004184:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004188:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 800418a:	f001 feef 	bl	8005f6c <HAL_GPIO_Init>
}
 800418e:	b00b      	add	sp, #44	@ 0x2c
 8004190:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004194:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8004198:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 800419c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800419e:	f042 0201 	orr.w	r2, r2, #1
 80041a2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80041a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 80041a6:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8004200 <HAL_COMP_MspInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 80041b0:	a904      	add	r1, sp, #16
 80041b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 80041b6:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ba:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 80041bc:	f001 fed6 	bl	8005f6c <HAL_GPIO_Init>
}
 80041c0:	b00b      	add	sp, #44	@ 0x2c
 80041c2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041c6:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 80041ca:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80041ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 80041d0:	4812      	ldr	r0, [pc, #72]	@ (800421c <HAL_COMP_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041d2:	f042 0202 	orr.w	r2, r2, #2
 80041d6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80041d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 80041da:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8004208 <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 80041e4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 80041e6:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ea:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 80041ec:	f001 febe 	bl	8005f6c <HAL_GPIO_Init>
}
 80041f0:	b00b      	add	sp, #44	@ 0x2c
 80041f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80041f6:	bf00      	nop
 80041f8:	00000002 	.word	0x00000002
 80041fc:	00000003 	.word	0x00000003
 8004200:	00000080 	.word	0x00000080
 8004204:	00000003 	.word	0x00000003
 8004208:	00000001 	.word	0x00000001
 800420c:	00000003 	.word	0x00000003
 8004210:	40010200 	.word	0x40010200
 8004214:	40010204 	.word	0x40010204
 8004218:	4001020c 	.word	0x4001020c
 800421c:	48000400 	.word	0x48000400

08004220 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 8004220:	4b0a      	ldr	r3, [pc, #40]	@ (800424c <HAL_CORDIC_MspInit+0x2c>)
 8004222:	6802      	ldr	r2, [r0, #0]
 8004224:	429a      	cmp	r2, r3
 8004226:	d000      	beq.n	800422a <HAL_CORDIC_MspInit+0xa>
 8004228:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800422a:	f8d3 2448 	ldr.w	r2, [r3, #1096]	@ 0x448
 800422e:	f042 0208 	orr.w	r2, r2, #8
 8004232:	f8c3 2448 	str.w	r2, [r3, #1096]	@ 0x448
 8004236:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
{
 800423a:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800423c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	9301      	str	r3, [sp, #4]
 8004244:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8004246:	b002      	add	sp, #8
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40020c00 	.word	0x40020c00

08004250 <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  if(hdac->Instance==DAC3)
 8004250:	4b0a      	ldr	r3, [pc, #40]	@ (800427c <HAL_DAC_MspInit+0x2c>)
 8004252:	6802      	ldr	r2, [r0, #0]
 8004254:	429a      	cmp	r2, r3
 8004256:	d000      	beq.n	800425a <HAL_DAC_MspInit+0xa>
 8004258:	4770      	bx	lr
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 800425a:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
 800425e:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
{
 8004262:	b082      	sub	sp, #8
    __HAL_RCC_DAC3_CLK_ENABLE();
 8004264:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004266:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800426a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800426c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800426e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004272:	9301      	str	r3, [sp, #4]
 8004274:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END DAC3_MspInit 1 */

  }

}
 8004276:	b002      	add	sp, #8
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	50001000 	.word	0x50001000

08004280 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004280:	b5d0      	push	{r4, r6, r7, lr}
 8004282:	4604      	mov	r4, r0
 8004284:	b09a      	sub	sp, #104	@ 0x68
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004286:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004288:	2244      	movs	r2, #68	@ 0x44
 800428a:	a809      	add	r0, sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800428c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8004290:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8004294:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004296:	f005 feb5 	bl	800a004 <memset>
  if(hfdcan->Instance==FDCAN1)
 800429a:	4b2f      	ldr	r3, [pc, #188]	@ (8004358 <HAL_FDCAN_MspInit+0xd8>)
 800429c:	6822      	ldr	r2, [r4, #0]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d001      	beq.n	80042a6 <HAL_FDCAN_MspInit+0x26>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80042a2:	b01a      	add	sp, #104	@ 0x68
 80042a4:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80042a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80042aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80042ae:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80042b0:	9209      	str	r2, [sp, #36]	@ 0x24
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80042b2:	9315      	str	r3, [sp, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80042b4:	f002 fc08 	bl	8006ac8 <HAL_RCCEx_PeriphCLKConfig>
 80042b8:	2800      	cmp	r0, #0
 80042ba:	d149      	bne.n	8004350 <HAL_FDCAN_MspInit+0xd0>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80042bc:	4b27      	ldr	r3, [pc, #156]	@ (800435c <HAL_FDCAN_MspInit+0xdc>)
 80042be:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80042c0:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80042c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80042c6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80042c8:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 80042cc:	9201      	str	r2, [sp, #4]
 80042ce:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042d2:	f042 0201 	orr.w	r2, r2, #1
 80042d6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80042d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042da:	f002 0201 	and.w	r2, r2, #1
 80042de:	9202      	str	r2, [sp, #8]
 80042e0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042e4:	f042 0202 	orr.w	r2, r2, #2
 80042e8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80042ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80042f2:	2409      	movs	r4, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042f4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80042f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042fa:	2600      	movs	r6, #0
 80042fc:	2700      	movs	r7, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004302:	2302      	movs	r3, #2
 8004304:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004308:	e9cd 6706 	strd	r6, r7, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800430c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800430e:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004310:	f001 fe2c 	bl	8005f6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004314:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004316:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004318:	f44f 7200 	mov.w	r2, #512	@ 0x200
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800431c:	4810      	ldr	r0, [pc, #64]	@ (8004360 <HAL_FDCAN_MspInit+0xe0>)
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800431e:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004320:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004324:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004328:	f001 fe20 	bl	8005f6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800432c:	2200      	movs	r2, #0
 800432e:	4611      	mov	r1, r2
 8004330:	2015      	movs	r0, #21
 8004332:	f001 fa37 	bl	80057a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004336:	2015      	movs	r0, #21
 8004338:	f001 fa70 	bl	800581c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 800433c:	2200      	movs	r2, #0
 800433e:	4611      	mov	r1, r2
 8004340:	2016      	movs	r0, #22
 8004342:	f001 fa2f 	bl	80057a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8004346:	2016      	movs	r0, #22
 8004348:	f001 fa68 	bl	800581c <HAL_NVIC_EnableIRQ>
}
 800434c:	b01a      	add	sp, #104	@ 0x68
 800434e:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8004350:	f7fc ffda 	bl	8001308 <Error_Handler>
 8004354:	e7b2      	b.n	80042bc <HAL_FDCAN_MspInit+0x3c>
 8004356:	bf00      	nop
 8004358:	40006400 	.word	0x40006400
 800435c:	40021000 	.word	0x40021000
 8004360:	48000400 	.word	0x48000400
 8004364:	00000000 	.word	0x00000000

08004368 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8004368:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hopamp->Instance==OPAMP1)
 800436a:	6802      	ldr	r2, [r0, #0]
 800436c:	4934      	ldr	r1, [pc, #208]	@ (8004440 <HAL_OPAMP_MspInit+0xd8>)
{
 800436e:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004370:	2300      	movs	r3, #0
  if(hopamp->Instance==OPAMP1)
 8004372:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004374:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004378:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800437c:	9308      	str	r3, [sp, #32]
  if(hopamp->Instance==OPAMP1)
 800437e:	d008      	beq.n	8004392 <HAL_OPAMP_MspInit+0x2a>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP2)
 8004380:	4b30      	ldr	r3, [pc, #192]	@ (8004444 <HAL_OPAMP_MspInit+0xdc>)
 8004382:	429a      	cmp	r2, r3
 8004384:	d01e      	beq.n	80043c4 <HAL_OPAMP_MspInit+0x5c>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP3)
 8004386:	4b30      	ldr	r3, [pc, #192]	@ (8004448 <HAL_OPAMP_MspInit+0xe0>)
 8004388:	429a      	cmp	r2, r3
 800438a:	d033      	beq.n	80043f4 <HAL_OPAMP_MspInit+0x8c>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 800438c:	b00b      	add	sp, #44	@ 0x2c
 800438e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004392:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004396:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 800439a:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 8004428 <HAL_OPAMP_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800439e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043a0:	f042 0201 	orr.w	r2, r2, #1
 80043a4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80043a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ae:	a904      	add	r1, sp, #16
 80043b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 80043b4:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043b8:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ba:	f001 fdd7 	bl	8005f6c <HAL_GPIO_Init>
}
 80043be:	b00b      	add	sp, #44	@ 0x2c
 80043c0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043c4:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 80043c8:	33fc      	adds	r3, #252	@ 0xfc
 80043ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043cc:	f042 0201 	orr.w	r2, r2, #1
 80043d0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80043d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 80043d4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8004430 <HAL_OPAMP_MspInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043de:	a904      	add	r1, sp, #16
 80043e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 80043e4:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043e8:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ea:	f001 fdbf 	bl	8005f6c <HAL_GPIO_Init>
}
 80043ee:	b00b      	add	sp, #44	@ 0x2c
 80043f0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043f4:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 80043f8:	33f8      	adds	r3, #248	@ 0xf8
 80043fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043fc:	4813      	ldr	r0, [pc, #76]	@ (800444c <HAL_OPAMP_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043fe:	f042 0202 	orr.w	r2, r2, #2
 8004402:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 8004406:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8004438 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004410:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 8004412:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004416:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004418:	f001 fda8 	bl	8005f6c <HAL_GPIO_Init>
}
 800441c:	b00b      	add	sp, #44	@ 0x2c
 800441e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004422:	bf00      	nop
 8004424:	f3af 8000 	nop.w
 8004428:	0000000e 	.word	0x0000000e
 800442c:	00000003 	.word	0x00000003
 8004430:	000000e0 	.word	0x000000e0
 8004434:	00000003 	.word	0x00000003
 8004438:	00000007 	.word	0x00000007
 800443c:	00000003 	.word	0x00000003
 8004440:	40010300 	.word	0x40010300
 8004444:	40010304 	.word	0x40010304
 8004448:	40010308 	.word	0x40010308
 800444c:	48000400 	.word	0x48000400

08004450 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8004450:	4b09      	ldr	r3, [pc, #36]	@ (8004478 <HAL_TIM_PWM_MspInit+0x28>)
 8004452:	6802      	ldr	r2, [r0, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d000      	beq.n	800445a <HAL_TIM_PWM_MspInit+0xa>
 8004458:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800445a:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
{
 800445e:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004460:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004462:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004466:	661a      	str	r2, [r3, #96]	@ 0x60
 8004468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800446a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800446e:	9301      	str	r3, [sp, #4]
 8004470:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8004472:	b002      	add	sp, #8
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40012c00 	.word	0x40012c00
 800447c:	00000000 	.word	0x00000000

08004480 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004480:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM16)
 8004482:	4a1b      	ldr	r2, [pc, #108]	@ (80044f0 <HAL_TIM_Base_MspInit+0x70>)
 8004484:	6801      	ldr	r1, [r0, #0]
{
 8004486:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004488:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM16)
 800448a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800448c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004490:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004494:	9306      	str	r3, [sp, #24]
  if(htim_base->Instance==TIM16)
 8004496:	d002      	beq.n	800449e <HAL_TIM_Base_MspInit+0x1e>

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 8004498:	b009      	add	sp, #36	@ 0x24
 800449a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM16_CLK_ENABLE();
 800449e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044a2:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80044a6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80044e8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80044aa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ac:	4811      	ldr	r0, [pc, #68]	@ (80044f4 <HAL_TIM_Base_MspInit+0x74>)
    __HAL_RCC_TIM16_CLK_ENABLE();
 80044ae:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80044b2:	661a      	str	r2, [r3, #96]	@ 0x60
 80044b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80044b6:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80044ba:	9200      	str	r2, [sp, #0]
 80044bc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80044c0:	f042 0202 	orr.w	r2, r2, #2
 80044c4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80044c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ce:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80044d0:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80044d2:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044d6:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80044d8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044da:	f001 fd47 	bl	8005f6c <HAL_GPIO_Init>
}
 80044de:	b009      	add	sp, #36	@ 0x24
 80044e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80044e4:	f3af 8000 	nop.w
 80044e8:	00000100 	.word	0x00000100
 80044ec:	00000002 	.word	0x00000002
 80044f0:	40014400 	.word	0x40014400
 80044f4:	48000400 	.word	0x48000400

080044f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80044f8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 80044fa:	4a2a      	ldr	r2, [pc, #168]	@ (80045a4 <HAL_TIM_MspPostInit+0xac>)
 80044fc:	6801      	ldr	r1, [r0, #0]
{
 80044fe:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004500:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8004502:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004504:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004508:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800450c:	9308      	str	r3, [sp, #32]
  if(htim->Instance==TIM1)
 800450e:	d001      	beq.n	8004514 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004510:	b00a      	add	sp, #40	@ 0x28
 8004512:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004514:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004518:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800451c:	2604      	movs	r6, #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800451e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8004520:	4821      	ldr	r0, [pc, #132]	@ (80045a8 <HAL_TIM_MspPostInit+0xb0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004522:	4332      	orrs	r2, r6
 8004524:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004526:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004528:	4032      	ands	r2, r6
 800452a:	9201      	str	r2, [sp, #4]
 800452c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800452e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004530:	f042 0202 	orr.w	r2, r2, #2
 8004534:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004536:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004538:	f002 0202 	and.w	r2, r2, #2
 800453c:	9202      	str	r2, [sp, #8]
 800453e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004540:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800454a:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8004552:	2402      	movs	r4, #2
 8004554:	2502      	movs	r5, #2
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8004556:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8004558:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800455c:	2302      	movs	r3, #2
 800455e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004562:	e9cd 4506 	strd	r4, r5, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004566:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8004568:	f001 fd00 	bl	8005f6c <HAL_GPIO_Init>
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 800456c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 800456e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004572:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8004574:	480d      	ldr	r0, [pc, #52]	@ (80045ac <HAL_TIM_MspPostInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8004576:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8004578:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800457c:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8004580:	f001 fcf4 	bl	8005f6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 8004584:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8004588:	2302      	movs	r3, #2
 800458a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800458e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004590:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004592:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 8004596:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800459a:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800459c:	f001 fce6 	bl	8005f6c <HAL_GPIO_Init>
}
 80045a0:	b00a      	add	sp, #40	@ 0x28
 80045a2:	bd70      	pop	{r4, r5, r6, pc}
 80045a4:	40012c00 	.word	0x40012c00
 80045a8:	48000800 	.word	0x48000800
 80045ac:	48000400 	.word	0x48000400

080045b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80045b0:	b570      	push	{r4, r5, r6, lr}
 80045b2:	4604      	mov	r4, r0
 80045b4:	b098      	sub	sp, #96	@ 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045b6:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80045b8:	2244      	movs	r2, #68	@ 0x44
 80045ba:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045bc:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80045c0:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80045c4:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80045c6:	f005 fd1d 	bl	800a004 <memset>
  if(huart->Instance==USART2)
 80045ca:	4b31      	ldr	r3, [pc, #196]	@ (8004690 <HAL_UART_MspInit+0xe0>)
 80045cc:	6822      	ldr	r2, [r4, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d001      	beq.n	80045d6 <HAL_UART_MspInit+0x26>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80045d2:	b018      	add	sp, #96	@ 0x60
 80045d4:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80045d6:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80045d8:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80045da:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80045dc:	f002 fa74 	bl	8006ac8 <HAL_RCCEx_PeriphCLKConfig>
 80045e0:	2800      	cmp	r0, #0
 80045e2:	d14c      	bne.n	800467e <HAL_UART_MspInit+0xce>
    __HAL_RCC_USART2_CLK_ENABLE();
 80045e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004694 <HAL_UART_MspInit+0xe4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045e6:	482c      	ldr	r0, [pc, #176]	@ (8004698 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80045e8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80045ea:	4e2c      	ldr	r6, [pc, #176]	@ (800469c <HAL_UART_MspInit+0xec>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80045ec:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80045f0:	659a      	str	r2, [r3, #88]	@ 0x58
 80045f2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80045f4:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80045f8:	9200      	str	r2, [sp, #0]
 80045fa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80045fe:	f042 0202 	orr.w	r2, r2, #2
 8004602:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800460c:	2218      	movs	r2, #24
 800460e:	2302      	movs	r3, #2
 8004610:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004614:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004616:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8004618:	2300      	movs	r3, #0
 800461a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800461e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004620:	2307      	movs	r3, #7
 8004622:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004624:	f001 fca2 	bl	8005f6c <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004628:	491d      	ldr	r1, [pc, #116]	@ (80046a0 <HAL_UART_MspInit+0xf0>)
 800462a:	221a      	movs	r2, #26
 800462c:	2300      	movs	r3, #0
 800462e:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004632:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004634:	2280      	movs	r2, #128	@ 0x80
 8004636:	e9c6 3302 	strd	r3, r3, [r6, #8]
 800463a:	e9c6 2304 	strd	r2, r3, [r6, #16]
 800463e:	e9c6 3306 	strd	r3, r3, [r6, #24]
 8004642:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004644:	f001 fa38 	bl	8005ab8 <HAL_DMA_Init>
 8004648:	b9f8      	cbnz	r0, 800468a <HAL_UART_MspInit+0xda>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 800464a:	4d16      	ldr	r5, [pc, #88]	@ (80046a4 <HAL_UART_MspInit+0xf4>)
 800464c:	4916      	ldr	r1, [pc, #88]	@ (80046a8 <HAL_UART_MspInit+0xf8>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800464e:	f8c4 6080 	str.w	r6, [r4, #128]	@ 0x80
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004652:	221b      	movs	r2, #27
 8004654:	2300      	movs	r3, #0
 8004656:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800465a:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800465c:	2110      	movs	r1, #16
 800465e:	2280      	movs	r2, #128	@ 0x80
 8004660:	e9c5 1302 	strd	r1, r3, [r5, #8]
 8004664:	e9c5 3305 	strd	r3, r3, [r5, #20]
 8004668:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800466c:	62b4      	str	r4, [r6, #40]	@ 0x28
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800466e:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004670:	f001 fa22 	bl	8005ab8 <HAL_DMA_Init>
 8004674:	b930      	cbnz	r0, 8004684 <HAL_UART_MspInit+0xd4>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004676:	67e5      	str	r5, [r4, #124]	@ 0x7c
 8004678:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 800467a:	b018      	add	sp, #96	@ 0x60
 800467c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800467e:	f7fc fe43 	bl	8001308 <Error_Handler>
 8004682:	e7af      	b.n	80045e4 <HAL_UART_MspInit+0x34>
      Error_Handler();
 8004684:	f7fc fe40 	bl	8001308 <Error_Handler>
 8004688:	e7f5      	b.n	8004676 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 800468a:	f7fc fe3d 	bl	8001308 <Error_Handler>
 800468e:	e7dc      	b.n	800464a <HAL_UART_MspInit+0x9a>
 8004690:	40004400 	.word	0x40004400
 8004694:	40021000 	.word	0x40021000
 8004698:	48000400 	.word	0x48000400
 800469c:	20000574 	.word	0x20000574
 80046a0:	40020008 	.word	0x40020008
 80046a4:	20000514 	.word	0x20000514
 80046a8:	4002001c 	.word	0x4002001c

080046ac <FDCAN1_IT0_IRQHandler>:
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80046ac:	4801      	ldr	r0, [pc, #4]	@ (80046b4 <FDCAN1_IT0_IRQHandler+0x8>)
 80046ae:	f001 bb99 	b.w	8005de4 <HAL_FDCAN_IRQHandler>
 80046b2:	bf00      	nop
 80046b4:	200007b4 	.word	0x200007b4

080046b8 <FDCAN1_IT1_IRQHandler>:
}

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
 80046b8:	4801      	ldr	r0, [pc, #4]	@ (80046c0 <FDCAN1_IT1_IRQHandler+0x8>)
 80046ba:	f001 bb93 	b.w	8005de4 <HAL_FDCAN_IRQHandler>
 80046be:	bf00      	nop
 80046c0:	200007b4 	.word	0x200007b4

080046c4 <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 80046c4:	4b02      	ldr	r3, [pc, #8]	@ (80046d0 <ADC1_2_IRQHandler+0xc>)
 80046c6:	2240      	movs	r2, #64	@ 0x40
 80046c8:	601a      	str	r2, [r3, #0]

    /* Clear Flags M1 */
    LL_ADC_ClearFlag_JEOS(ADC2);

  /* Highfrequency task */
  (void)TSK_HighFrequencyTask();
 80046ca:	f7fd b893 	b.w	80017f4 <TSK_HighFrequencyTask>
 80046ce:	bf00      	nop
 80046d0:	50000100 	.word	0x50000100

080046d4 <TIM1_UP_TIM16_IRQHandler>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80046d4:	4b03      	ldr	r3, [pc, #12]	@ (80046e4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(TIM1);
  (void)R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 80046d6:	4804      	ldr	r0, [pc, #16]	@ (80046e8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80046d8:	f06f 0201 	mvn.w	r2, #1
 80046dc:	611a      	str	r2, [r3, #16]
 80046de:	f004 bc29 	b.w	8008f34 <R3_2_TIMx_UP_IRQHandler>
 80046e2:	bf00      	nop
 80046e4:	40012c00 	.word	0x40012c00
 80046e8:	20000190 	.word	0x20000190

080046ec <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 80046ec:	b508      	push	{r3, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 80046ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004720 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 80046f0:	691a      	ldr	r2, [r3, #16]
 80046f2:	0612      	lsls	r2, r2, #24
 80046f4:	d505      	bpl.n	8004702 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80046f6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    PWMC_OCP_Handler(&PWM_Handle_M1._Super);
 80046fa:	480a      	ldr	r0, [pc, #40]	@ (8004724 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 80046fc:	611a      	str	r2, [r3, #16]
 80046fe:	f7fe f86f 	bl	80027e0 <PWMC_OCP_Handler>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8004702:	4907      	ldr	r1, [pc, #28]	@ (8004720 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8004704:	690b      	ldr	r3, [r1, #16]
 8004706:	05db      	lsls	r3, r3, #23
 8004708:	d505      	bpl.n	8004716 <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800470a:	f46f 7380 	mvn.w	r3, #256	@ 0x100
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    PWMC_OVP_Handler(&PWM_Handle_M1._Super, TIM1);
 800470e:	4805      	ldr	r0, [pc, #20]	@ (8004724 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8004710:	610b      	str	r3, [r1, #16]
 8004712:	f7fe f885 	bl	8002820 <PWMC_OVP_Handler>
  MC_RunMotorControlTasks();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8004716:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_RunMotorControlTasks();
 800471a:	f7fd b8e5 	b.w	80018e8 <MC_RunMotorControlTasks>
 800471e:	bf00      	nop
 8004720:	40012c00 	.word	0x40012c00
 8004724:	20000190 	.word	0x20000190

08004728 <UASPEP_INIT>:
  * @brief  Initialization of the Hardware used for data transmission and reception.
  *
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_INIT(void *pHWHandle)
{
 8004728:	b430      	push	{r4, r5}
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 800472a:	6802      	ldr	r2, [r0, #0]
 800472c:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004730:	e851 3f00 	ldrex	r3, [r1]
 8004734:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004738:	e841 3400 	strex	r4, r3, [r1]
 800473c:	2c00      	cmp	r4, #0
 800473e:	d1f7      	bne.n	8004730 <UASPEP_INIT+0x8>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8004740:	68c1      	ldr	r1, [r0, #12]
 8004742:	4d19      	ldr	r5, [pc, #100]	@ (80047a8 <UASPEP_INIT+0x80>)
 8004744:	6843      	ldr	r3, [r0, #4]
 8004746:	5c6c      	ldrb	r4, [r5, r1]
 8004748:	4423      	add	r3, r4
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 800474a:	f102 0124 	add.w	r1, r2, #36	@ 0x24
 800474e:	6099      	str	r1, [r3, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004750:	2340      	movs	r3, #64	@ 0x40
 8004752:	6213      	str	r3, [r2, #32]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004754:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004758:	e851 3f00 	ldrex	r3, [r1]
 800475c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004760:	e841 3400 	strex	r4, r3, [r1]
 8004764:	2c00      	cmp	r4, #0
 8004766:	d1f7      	bne.n	8004758 <UASPEP_INIT+0x30>
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004768:	2340      	movs	r3, #64	@ 0x40
 800476a:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476c:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8004770:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004774:	e842 3100 	strex	r1, r3, [r2]
 8004778:	2900      	cmp	r1, #0
 800477a:	d1f7      	bne.n	800476c <UASPEP_INIT+0x44>
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800477c:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004780:	e851 3f00 	ldrex	r3, [r1]
 8004784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004788:	e841 3400 	strex	r4, r3, [r1]
 800478c:	2c00      	cmp	r4, #0
 800478e:	d1f7      	bne.n	8004780 <UASPEP_INIT+0x58>
 8004790:	6901      	ldr	r1, [r0, #16]
 8004792:	6883      	ldr	r3, [r0, #8]
 8004794:	5c69      	ldrb	r1, [r5, r1]
 8004796:	440b      	add	r3, r1
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 8004798:	f102 0028 	add.w	r0, r2, #40	@ 0x28
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800479c:	2140      	movs	r1, #64	@ 0x40
 800479e:	6098      	str	r0, [r3, #8]
}
 80047a0:	bc30      	pop	{r4, r5}
 80047a2:	6211      	str	r1, [r2, #32]
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	0800a360 	.word	0x0800a360

080047ac <UASPEP_CFG_TRANSMISSION>:
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 80047ac:	6903      	ldr	r3, [r0, #16]
 80047ae:	6880      	ldr	r0, [r0, #8]
  * @param  pHWHandle Hardware components chosen for communication
  * @param  data Data to be transmitted to controller
  * @param  length Length of the data to be transmitted
  */
void UASPEP_CFG_TRANSMISSION(void *pHWHandle, void *data, uint16_t length)
{
 80047b0:	b410      	push	{r4}
 80047b2:	4c0b      	ldr	r4, [pc, #44]	@ (80047e0 <UASPEP_CFG_TRANSMISSION+0x34>)
 80047b4:	5ce3      	ldrb	r3, [r4, r3]
 80047b6:	58c4      	ldr	r4, [r0, r3]
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 80047b8:	07e4      	lsls	r4, r4, #31
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 80047ba:	eb00 0c03 	add.w	ip, r0, r3
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 80047be:	d40c      	bmi.n	80047da <UASPEP_CFG_TRANSMISSION+0x2e>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 80047c0:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80047c4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80047c8:	0c09      	lsrs	r1, r1, #16
 80047ca:	0409      	lsls	r1, r1, #16
 80047cc:	430a      	orrs	r2, r1
 80047ce:	f8cc 2004 	str.w	r2, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80047d2:	58c2      	ldr	r2, [r0, r3]
 80047d4:	f042 0201 	orr.w	r2, r2, #1
 80047d8:	50c2      	str	r2, [r0, r3]
  }
  else
  {
    /* Nothing to do */
  }
}
 80047da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	0800a360 	.word	0x0800a360

080047e4 <UASPEP_CFG_RECEPTION>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  buffer Buffer which will receive the communicated data
  * @param  length Length of the received data
  */
void UASPEP_CFG_RECEPTION(void *pHWHandle, void* buffer, uint16_t length)
{
 80047e4:	b430      	push	{r4, r5}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80047e6:	68c3      	ldr	r3, [r0, #12]
 80047e8:	4d0b      	ldr	r5, [pc, #44]	@ (8004818 <UASPEP_CFG_RECEPTION+0x34>)
 80047ea:	6844      	ldr	r4, [r0, #4]
 80047ec:	5ce8      	ldrb	r0, [r5, r3]
 80047ee:	5823      	ldr	r3, [r4, r0]
 80047f0:	eb04 0c00 	add.w	ip, r4, r0
 80047f4:	f023 0301 	bic.w	r3, r3, #1
 80047f8:	5023      	str	r3, [r4, r0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 80047fa:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80047fe:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8004802:	0c1b      	lsrs	r3, r3, #16
 8004804:	041b      	lsls	r3, r3, #16
 8004806:	4313      	orrs	r3, r2
 8004808:	f8cc 3004 	str.w	r3, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 800480c:	5823      	ldr	r3, [r4, r0]
 800480e:	f043 0301 	orr.w	r3, r3, #1
 8004812:	5023      	str	r3, [r4, r0]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);

  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 8004814:	bc30      	pop	{r4, r5}
 8004816:	4770      	bx	lr
 8004818:	0800a360 	.word	0x0800a360

0800481c <UASPEP_IDLE_ENABLE>:
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 800481c:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 800481e:	2310      	movs	r3, #16
 8004820:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004822:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004826:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482a:	e842 3100 	strex	r1, r3, [r2]
 800482e:	2900      	cmp	r1, #0
 8004830:	d1f7      	bne.n	8004822 <UASPEP_IDLE_ENABLE+0x6>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 8004832:	4770      	bx	lr

08004834 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004834:	4a03      	ldr	r2, [pc, #12]	@ (8004844 <SystemInit+0x10>)
 8004836:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800483a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800483e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004842:	4770      	bx	lr
 8004844:	e000ed00 	.word	0xe000ed00

08004848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004848:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800484a:	4b0f      	ldr	r3, [pc, #60]	@ (8004888 <HAL_InitTick+0x40>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	b90b      	cbnz	r3, 8004854 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8004850:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8004852:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004854:	490d      	ldr	r1, [pc, #52]	@ (800488c <HAL_InitTick+0x44>)
 8004856:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800485a:	4605      	mov	r5, r0
 800485c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004860:	6808      	ldr	r0, [r1, #0]
 8004862:	fbb0 f0f3 	udiv	r0, r0, r3
 8004866:	f000 fff9 	bl	800585c <HAL_SYSTICK_Config>
 800486a:	4604      	mov	r4, r0
 800486c:	2800      	cmp	r0, #0
 800486e:	d1ef      	bne.n	8004850 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004870:	2d0f      	cmp	r5, #15
 8004872:	d8ed      	bhi.n	8004850 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004874:	4602      	mov	r2, r0
 8004876:	4629      	mov	r1, r5
 8004878:	f04f 30ff 	mov.w	r0, #4294967295
 800487c:	f000 ff92 	bl	80057a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004880:	4b03      	ldr	r3, [pc, #12]	@ (8004890 <HAL_InitTick+0x48>)
 8004882:	4620      	mov	r0, r4
 8004884:	601d      	str	r5, [r3, #0]
}
 8004886:	bd38      	pop	{r3, r4, r5, pc}
 8004888:	200004f0 	.word	0x200004f0
 800488c:	200004ec 	.word	0x200004ec
 8004890:	200004f4 	.word	0x200004f4

08004894 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004894:	4a0a      	ldr	r2, [pc, #40]	@ (80048c0 <HAL_Init+0x2c>)
 8004896:	6813      	ldr	r3, [r2, #0]
 8004898:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
{
 800489c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800489e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048a2:	f000 ff6d 	bl	8005780 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80048a6:	2004      	movs	r0, #4
 80048a8:	f7ff ffce 	bl	8004848 <HAL_InitTick>
 80048ac:	b110      	cbz	r0, 80048b4 <HAL_Init+0x20>
    status = HAL_ERROR;
 80048ae:	2401      	movs	r4, #1
}
 80048b0:	4620      	mov	r0, r4
 80048b2:	bd10      	pop	{r4, pc}
 80048b4:	4604      	mov	r4, r0
    HAL_MspInit();
 80048b6:	f7ff fb7d 	bl	8003fb4 <HAL_MspInit>
}
 80048ba:	4620      	mov	r0, r4
 80048bc:	bd10      	pop	{r4, pc}
 80048be:	bf00      	nop
 80048c0:	40022000 	.word	0x40022000

080048c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80048c4:	4a03      	ldr	r2, [pc, #12]	@ (80048d4 <HAL_IncTick+0x10>)
 80048c6:	4904      	ldr	r1, [pc, #16]	@ (80048d8 <HAL_IncTick+0x14>)
 80048c8:	6813      	ldr	r3, [r2, #0]
 80048ca:	6809      	ldr	r1, [r1, #0]
 80048cc:	440b      	add	r3, r1
 80048ce:	6013      	str	r3, [r2, #0]
}
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	20001cc8 	.word	0x20001cc8
 80048d8:	200004f0 	.word	0x200004f0

080048dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80048dc:	4b01      	ldr	r3, [pc, #4]	@ (80048e4 <HAL_GetTick+0x8>)
 80048de:	6818      	ldr	r0, [r3, #0]
}
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	20001cc8 	.word	0x20001cc8

080048e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80048e8:	b530      	push	{r4, r5, lr}
 80048ea:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80048ec:	2300      	movs	r3, #0
 80048ee:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80048f0:	2800      	cmp	r0, #0
 80048f2:	f000 80ac 	beq.w	8004a4e <HAL_ADC_Init+0x166>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80048f6:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 80048f8:	4604      	mov	r4, r0
 80048fa:	2d00      	cmp	r5, #0
 80048fc:	f000 80ac 	beq.w	8004a58 <HAL_ADC_Init+0x170>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004900:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004902:	6893      	ldr	r3, [r2, #8]
 8004904:	009d      	lsls	r5, r3, #2
 8004906:	d505      	bpl.n	8004914 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004908:	6893      	ldr	r3, [r2, #8]
 800490a:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800490e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004912:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004914:	6893      	ldr	r3, [r2, #8]
 8004916:	00d8      	lsls	r0, r3, #3
 8004918:	d419      	bmi.n	800494e <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800491a:	4b6b      	ldr	r3, [pc, #428]	@ (8004ac8 <HAL_ADC_Init+0x1e0>)
 800491c:	486b      	ldr	r0, [pc, #428]	@ (8004acc <HAL_ADC_Init+0x1e4>)
 800491e:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8004920:	6891      	ldr	r1, [r2, #8]
 8004922:	099b      	lsrs	r3, r3, #6
 8004924:	fba0 0303 	umull	r0, r3, r0, r3
 8004928:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 800492c:	099b      	lsrs	r3, r3, #6
 800492e:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8004932:	3301      	adds	r3, #1
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800493a:	6091      	str	r1, [r2, #8]
 800493c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800493e:	9b01      	ldr	r3, [sp, #4]
 8004940:	b12b      	cbz	r3, 800494e <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8004942:	9b01      	ldr	r3, [sp, #4]
 8004944:	3b01      	subs	r3, #1
 8004946:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004948:	9b01      	ldr	r3, [sp, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1f9      	bne.n	8004942 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800494e:	6893      	ldr	r3, [r2, #8]
 8004950:	00d9      	lsls	r1, r3, #3
 8004952:	d47f      	bmi.n	8004a54 <HAL_ADC_Init+0x16c>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004954:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004956:	f043 0310 	orr.w	r3, r3, #16
 800495a:	65e3      	str	r3, [r4, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800495c:	6e23      	ldr	r3, [r4, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800495e:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004960:	4303      	orrs	r3, r0
 8004962:	6623      	str	r3, [r4, #96]	@ 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004964:	6893      	ldr	r3, [r2, #8]
 8004966:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800496a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800496c:	d16b      	bne.n	8004a46 <HAL_ADC_Init+0x15e>
 800496e:	06db      	lsls	r3, r3, #27
 8004970:	d469      	bmi.n	8004a46 <HAL_ADC_Init+0x15e>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004972:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004974:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004978:	f043 0302 	orr.w	r3, r3, #2
 800497c:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800497e:	6893      	ldr	r3, [r2, #8]
 8004980:	07dd      	lsls	r5, r3, #31
 8004982:	d409      	bmi.n	8004998 <HAL_ADC_Init+0xb0>
 8004984:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f013 0f01 	tst.w	r3, #1
 800498e:	4b50      	ldr	r3, [pc, #320]	@ (8004ad0 <HAL_ADC_Init+0x1e8>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	d101      	bne.n	8004998 <HAL_ADC_Init+0xb0>
 8004994:	07d9      	lsls	r1, r3, #31
 8004996:	d572      	bpl.n	8004a7e <HAL_ADC_Init+0x196>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 8004998:	68e5      	ldr	r5, [r4, #12]
 800499a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800499c:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
                 hadc->Init.DataAlign                                                   |
 80049a0:	432b      	orrs	r3, r5
 80049a2:	68a5      	ldr	r5, [r4, #8]
 80049a4:	432b      	orrs	r3, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80049a6:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80049a8:	2901      	cmp	r1, #1
                 hadc->Init.DataAlign                                                   |
 80049aa:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80049ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80049b2:	d057      	beq.n	8004a64 <HAL_ADC_Init+0x17c>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049b4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80049b6:	b121      	cbz	r1, 80049c2 <HAL_ADC_Init+0xda>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 80049b8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80049ba:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80049be:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80049c0:	430b      	orrs	r3, r1
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80049c2:	68d5      	ldr	r5, [r2, #12]
 80049c4:	4943      	ldr	r1, [pc, #268]	@ (8004ad4 <HAL_ADC_Init+0x1ec>)
 80049c6:	4029      	ands	r1, r5
 80049c8:	4319      	orrs	r1, r3
 80049ca:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80049cc:	6913      	ldr	r3, [r2, #16]
 80049ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049d0:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80049d4:	430b      	orrs	r3, r1
 80049d6:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80049d8:	6893      	ldr	r3, [r2, #8]
 80049da:	071b      	lsls	r3, r3, #28
 80049dc:	d424      	bmi.n	8004a28 <HAL_ADC_Init+0x140>
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80049de:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80049e0:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80049e4:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80049e6:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80049ea:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80049ec:	f021 0102 	bic.w	r1, r1, #2
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80049f0:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80049f4:	430b      	orrs	r3, r1

      if (hadc->Init.GainCompensation != 0UL)
 80049f6:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80049f8:	60d3      	str	r3, [r2, #12]
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80049fa:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 80049fc:	2900      	cmp	r1, #0
 80049fe:	d046      	beq.n	8004a8e <HAL_ADC_Init+0x1a6>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004a00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a04:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004a06:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8004a0a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004a0e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a12:	430b      	orrs	r3, r1
 8004a14:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004a18:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d042      	beq.n	8004aa6 <HAL_ADC_Init+0x1be>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004a20:	6913      	ldr	r3, [r2, #16]
 8004a22:	f023 0301 	bic.w	r3, r3, #1
 8004a26:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004a28:	6963      	ldr	r3, [r4, #20]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d01f      	beq.n	8004a6e <HAL_ADC_Init+0x186>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004a2e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004a30:	f023 030f 	bic.w	r3, r3, #15
 8004a34:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004a36:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004a38:	f023 0303 	bic.w	r3, r3, #3
 8004a3c:	f043 0301 	orr.w	r3, r3, #1
 8004a40:	65e3      	str	r3, [r4, #92]	@ 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8004a42:	b003      	add	sp, #12
 8004a44:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a46:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004a48:	f043 0310 	orr.w	r3, r3, #16
 8004a4c:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 8004a4e:	2001      	movs	r0, #1
}
 8004a50:	b003      	add	sp, #12
 8004a52:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a54:	2000      	movs	r0, #0
 8004a56:	e785      	b.n	8004964 <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 8004a58:	f7ff face 	bl	8003ff8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004a5c:	6625      	str	r5, [r4, #96]	@ 0x60
    hadc->Lock = HAL_UNLOCKED;
 8004a5e:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
 8004a62:	e74d      	b.n	8004900 <HAL_ADC_Init+0x18>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004a64:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004a66:	3901      	subs	r1, #1
 8004a68:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8004a6c:	e7a2      	b.n	80049b4 <HAL_ADC_Init+0xcc>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004a6e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004a70:	6a23      	ldr	r3, [r4, #32]
 8004a72:	f021 010f 	bic.w	r1, r1, #15
 8004a76:	3b01      	subs	r3, #1
 8004a78:	430b      	orrs	r3, r1
 8004a7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a7c:	e7db      	b.n	8004a36 <HAL_ADC_Init+0x14e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004a7e:	4916      	ldr	r1, [pc, #88]	@ (8004ad8 <HAL_ADC_Init+0x1f0>)
 8004a80:	6865      	ldr	r5, [r4, #4]
 8004a82:	688b      	ldr	r3, [r1, #8]
 8004a84:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8004a88:	432b      	orrs	r3, r5
 8004a8a:	608b      	str	r3, [r1, #8]
}
 8004a8c:	e784      	b.n	8004998 <HAL_ADC_Init+0xb0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004a8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a92:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004a94:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8004a98:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004a9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004aa0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004aa4:	e7b8      	b.n	8004a18 <HAL_ADC_Init+0x130>
        MODIFY_REG(hadc->Instance->CFGR2,
 8004aa6:	6911      	ldr	r1, [r2, #16]
 8004aa8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004aaa:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8004aac:	f421 61ff 	bic.w	r1, r1, #2040	@ 0x7f8
 8004ab0:	f021 0104 	bic.w	r1, r1, #4
 8004ab4:	432b      	orrs	r3, r5
 8004ab6:	430b      	orrs	r3, r1
 8004ab8:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8004aba:	430b      	orrs	r3, r1
 8004abc:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8004abe:	430b      	orrs	r3, r1
 8004ac0:	f043 0301 	orr.w	r3, r3, #1
 8004ac4:	6113      	str	r3, [r2, #16]
 8004ac6:	e7af      	b.n	8004a28 <HAL_ADC_Init+0x140>
 8004ac8:	200004ec 	.word	0x200004ec
 8004acc:	053e2d63 	.word	0x053e2d63
 8004ad0:	50000100 	.word	0x50000100
 8004ad4:	fff04007 	.word	0xfff04007
 8004ad8:	50000300 	.word	0x50000300

08004adc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ae0:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
{
 8004ae4:	b082      	sub	sp, #8
 8004ae6:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8004ae8:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8004aea:	f04f 0000 	mov.w	r0, #0
 8004aee:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8004af0:	f000 812c 	beq.w	8004d4c <HAL_ADC_ConfigChannel+0x270>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004af4:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8004af6:	2001      	movs	r0, #1
 8004af8:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004afc:	6894      	ldr	r4, [r2, #8]
 8004afe:	0764      	lsls	r4, r4, #29
 8004b00:	d455      	bmi.n	8004bae <HAL_ADC_ConfigChannel+0xd2>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004b02:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004b04:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 8004b08:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004b0c:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 8004b10:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004b12:	f102 0430 	add.w	r4, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 8004b16:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8004b1a:	f854 500e 	ldr.w	r5, [r4, lr]
 8004b1e:	261f      	movs	r6, #31
 8004b20:	fa00 f00c 	lsl.w	r0, r0, ip
 8004b24:	fa06 fc0c 	lsl.w	ip, r6, ip
 8004b28:	ea25 0c0c 	bic.w	ip, r5, ip
 8004b2c:	ea40 000c 	orr.w	r0, r0, ip
 8004b30:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b34:	6890      	ldr	r0, [r2, #8]
 8004b36:	0747      	lsls	r7, r0, #29
 8004b38:	d543      	bpl.n	8004bc2 <HAL_ADC_ConfigChannel+0xe6>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b3a:	6890      	ldr	r0, [r2, #8]
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004b3c:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b3e:	6894      	ldr	r4, [r2, #8]
 8004b40:	07e5      	lsls	r5, r4, #31
 8004b42:	d412      	bmi.n	8004b6a <HAL_ADC_ConfigChannel+0x8e>
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004b44:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8004b46:	4cc0      	ldr	r4, [pc, #768]	@ (8004e48 <HAL_ADC_ConfigChannel+0x36c>)
 8004b48:	f8d2 50b0 	ldr.w	r5, [r2, #176]	@ 0xb0
 8004b4c:	f006 0718 	and.w	r7, r6, #24
 8004b50:	40fc      	lsrs	r4, r7
 8004b52:	f3c0 0712 	ubfx	r7, r0, #0, #19
 8004b56:	4004      	ands	r4, r0
 8004b58:	ea25 0507 	bic.w	r5, r5, r7
 8004b5c:	432c      	orrs	r4, r5
 8004b5e:	f8c2 40b0 	str.w	r4, [r2, #176]	@ 0xb0

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b62:	4cba      	ldr	r4, [pc, #744]	@ (8004e4c <HAL_ADC_ConfigChannel+0x370>)
 8004b64:	42a6      	cmp	r6, r4
 8004b66:	f000 80a1 	beq.w	8004cac <HAL_ADC_ConfigChannel+0x1d0>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004b6a:	49b9      	ldr	r1, [pc, #740]	@ (8004e50 <HAL_ADC_ConfigChannel+0x374>)
 8004b6c:	4208      	tst	r0, r1
 8004b6e:	d01c      	beq.n	8004baa <HAL_ADC_ConfigChannel+0xce>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004b70:	4cb8      	ldr	r4, [pc, #736]	@ (8004e54 <HAL_ADC_ConfigChannel+0x378>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004b72:	4db9      	ldr	r5, [pc, #740]	@ (8004e58 <HAL_ADC_ConfigChannel+0x37c>)
 8004b74:	68a1      	ldr	r1, [r4, #8]
 8004b76:	42a8      	cmp	r0, r5
 8004b78:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 8004b7c:	d073      	beq.n	8004c66 <HAL_ADC_ConfigChannel+0x18a>
 8004b7e:	4db7      	ldr	r5, [pc, #732]	@ (8004e5c <HAL_ADC_ConfigChannel+0x380>)
 8004b80:	42a8      	cmp	r0, r5
 8004b82:	d070      	beq.n	8004c66 <HAL_ADC_ConfigChannel+0x18a>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004b84:	4db6      	ldr	r5, [pc, #728]	@ (8004e60 <HAL_ADC_ConfigChannel+0x384>)
 8004b86:	42a8      	cmp	r0, r5
 8004b88:	f000 80e4 	beq.w	8004d54 <HAL_ADC_ConfigChannel+0x278>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004b8c:	4db5      	ldr	r5, [pc, #724]	@ (8004e64 <HAL_ADC_ConfigChannel+0x388>)
 8004b8e:	42a8      	cmp	r0, r5
 8004b90:	d10b      	bne.n	8004baa <HAL_ADC_ConfigChannel+0xce>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b92:	0249      	lsls	r1, r1, #9
 8004b94:	d409      	bmi.n	8004baa <HAL_ADC_ConfigChannel+0xce>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004b96:	49b4      	ldr	r1, [pc, #720]	@ (8004e68 <HAL_ADC_ConfigChannel+0x38c>)
 8004b98:	428a      	cmp	r2, r1
 8004b9a:	d006      	beq.n	8004baa <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004b9c:	68a2      	ldr	r2, [r4, #8]
 8004b9e:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8004ba2:	4332      	orrs	r2, r6
 8004ba4:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8004ba8:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004baa:	2000      	movs	r0, #0
 8004bac:	e003      	b.n	8004bb6 <HAL_ADC_ConfigChannel+0xda>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bb0:	f042 0220 	orr.w	r2, r2, #32
 8004bb4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8004bbc:	b002      	add	sp, #8
 8004bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004bc2:	6894      	ldr	r4, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004bc4:	6808      	ldr	r0, [r1, #0]
 8004bc6:	0726      	lsls	r6, r4, #28
 8004bc8:	d4b9      	bmi.n	8004b3e <HAL_ADC_ConfigChannel+0x62>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004bca:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 8004bcc:	f3c0 5604 	ubfx	r6, r0, #20, #5
 8004bd0:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004bd2:	0dc0      	lsrs	r0, r0, #23
  MODIFY_REG(*preg,
 8004bd4:	40b4      	lsls	r4, r6
 8004bd6:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004bda:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8004bde:	ea6f 0404 	mvn.w	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004be2:	f102 0714 	add.w	r7, r2, #20
 8004be6:	f000 8100 	beq.w	8004dea <HAL_ADC_ConfigChannel+0x30e>
  MODIFY_REG(*preg,
 8004bea:	40b5      	lsls	r5, r6
 8004bec:	583e      	ldr	r6, [r7, r0]
 8004bee:	4034      	ands	r4, r6
 8004bf0:	432c      	orrs	r4, r5
 8004bf2:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004bf4:	6950      	ldr	r0, [r2, #20]
 8004bf6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004bfa:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004bfc:	e9d1 7504 	ldrd	r7, r5, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004c00:	6808      	ldr	r0, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004c02:	68d6      	ldr	r6, [r2, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004c04:	2f04      	cmp	r7, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c06:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004c0a:	4684      	mov	ip, r0
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004c0c:	f000 80c5 	beq.w	8004d9a <HAL_ADC_ConfigChannel+0x2be>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004c10:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8004c14:	0076      	lsls	r6, r6, #1
  MODIFY_REG(*preg,
 8004c16:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 8004c1a:	40b5      	lsls	r5, r6
 8004c1c:	4e93      	ldr	r6, [pc, #588]	@ (8004e6c <HAL_ADC_ConfigChannel+0x390>)
 8004c1e:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8004c22:	ea0c 0606 	and.w	r6, ip, r6
 8004c26:	4306      	orrs	r6, r0
 8004c28:	4335      	orrs	r5, r6
 8004c2a:	f045 4500 	orr.w	r5, r5, #2147483648	@ 0x80000000
 8004c2e:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c32:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 8004c34:	698e      	ldr	r6, [r1, #24]
 8004c36:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8004c3a:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8004c3e:	4330      	orrs	r0, r6
 8004c40:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c44:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004c46:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 8004c48:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8004c4c:	f1a5 0501 	sub.w	r5, r5, #1
 8004c50:	fab5 f585 	clz	r5, r5
 8004c54:	096d      	lsrs	r5, r5, #5
 8004c56:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 8004c5a:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 8004c5e:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004c62:	6808      	ldr	r0, [r1, #0]
}
 8004c64:	e76b      	b.n	8004b3e <HAL_ADC_ConfigChannel+0x62>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004c66:	020c      	lsls	r4, r1, #8
 8004c68:	d49f      	bmi.n	8004baa <HAL_ADC_ConfigChannel+0xce>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c6a:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8004c6e:	d19c      	bne.n	8004baa <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004c70:	4978      	ldr	r1, [pc, #480]	@ (8004e54 <HAL_ADC_ConfigChannel+0x378>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c72:	487f      	ldr	r0, [pc, #508]	@ (8004e70 <HAL_ADC_ConfigChannel+0x394>)
 8004c74:	688a      	ldr	r2, [r1, #8]
 8004c76:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8004c7a:	4332      	orrs	r2, r6
 8004c7c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004c80:	608a      	str	r2, [r1, #8]
 8004c82:	6802      	ldr	r2, [r0, #0]
 8004c84:	497b      	ldr	r1, [pc, #492]	@ (8004e74 <HAL_ADC_ConfigChannel+0x398>)
 8004c86:	0992      	lsrs	r2, r2, #6
 8004c88:	fba1 1202 	umull	r1, r2, r1, r2
 8004c8c:	0992      	lsrs	r2, r2, #6
 8004c8e:	3201      	adds	r2, #1
 8004c90:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004c94:	0092      	lsls	r2, r2, #2
 8004c96:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004c98:	9a01      	ldr	r2, [sp, #4]
 8004c9a:	2a00      	cmp	r2, #0
 8004c9c:	d085      	beq.n	8004baa <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8004c9e:	9a01      	ldr	r2, [sp, #4]
 8004ca0:	3a01      	subs	r2, #1
 8004ca2:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004ca4:	9a01      	ldr	r2, [sp, #4]
 8004ca6:	2a00      	cmp	r2, #0
 8004ca8:	d1f9      	bne.n	8004c9e <HAL_ADC_ConfigChannel+0x1c2>
 8004caa:	e77e      	b.n	8004baa <HAL_ADC_ConfigChannel+0xce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004cac:	2f00      	cmp	r7, #0
 8004cae:	d060      	beq.n	8004d72 <HAL_ADC_ConfigChannel+0x296>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb0:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8004cb4:	2c00      	cmp	r4, #0
 8004cb6:	f000 80a0 	beq.w	8004dfa <HAL_ADC_ConfigChannel+0x31e>
  return __builtin_clz(value);
 8004cba:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cbe:	3401      	adds	r4, #1
 8004cc0:	f004 041f 	and.w	r4, r4, #31
 8004cc4:	2c09      	cmp	r4, #9
 8004cc6:	f240 8098 	bls.w	8004dfa <HAL_ADC_ConfigChannel+0x31e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cca:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8004cce:	2c00      	cmp	r4, #0
 8004cd0:	f000 8148 	beq.w	8004f64 <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 8004cd4:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004cd8:	3401      	adds	r4, #1
 8004cda:	06a4      	lsls	r4, r4, #26
 8004cdc:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce0:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004ce4:	2d00      	cmp	r5, #0
 8004ce6:	f000 8142 	beq.w	8004f6e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8004cea:	fab5 f585 	clz	r5, r5
 8004cee:	3501      	adds	r5, #1
 8004cf0:	f005 051f 	and.w	r5, r5, #31
 8004cf4:	2601      	movs	r6, #1
 8004cf6:	fa06 f505 	lsl.w	r5, r6, r5
 8004cfa:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cfc:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004d00:	2800      	cmp	r0, #0
 8004d02:	f000 8132 	beq.w	8004f6a <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 8004d06:	fab0 f080 	clz	r0, r0
 8004d0a:	1c45      	adds	r5, r0, #1
 8004d0c:	f005 051f 	and.w	r5, r5, #31
 8004d10:	2003      	movs	r0, #3
 8004d12:	f06f 061d 	mvn.w	r6, #29
 8004d16:	fb10 6005 	smlabb	r0, r0, r5, r6
 8004d1a:	0500      	lsls	r0, r0, #20
 8004d1c:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d20:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004d22:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 8004d24:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004d26:	f005 0504 	and.w	r5, r5, #4
 8004d2a:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8004d2e:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8004d32:	fa04 f700 	lsl.w	r7, r4, r0
 8004d36:	f04f 0c07 	mov.w	ip, #7
 8004d3a:	5974      	ldr	r4, [r6, r5]
 8004d3c:	fa0c f000 	lsl.w	r0, ip, r0
 8004d40:	ea24 0000 	bic.w	r0, r4, r0
 8004d44:	4338      	orrs	r0, r7
 8004d46:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004d48:	6808      	ldr	r0, [r1, #0]
}
 8004d4a:	e70e      	b.n	8004b6a <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 8004d4c:	2002      	movs	r0, #2
}
 8004d4e:	b002      	add	sp, #8
 8004d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d54:	01c8      	lsls	r0, r1, #7
 8004d56:	f53f af28 	bmi.w	8004baa <HAL_ADC_ConfigChannel+0xce>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d5a:	4943      	ldr	r1, [pc, #268]	@ (8004e68 <HAL_ADC_ConfigChannel+0x38c>)
 8004d5c:	428a      	cmp	r2, r1
 8004d5e:	f43f af24 	beq.w	8004baa <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004d62:	68a2      	ldr	r2, [r4, #8]
 8004d64:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8004d68:	4332      	orrs	r2, r6
 8004d6a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004d6e:	60a2      	str	r2, [r4, #8]
}
 8004d70:	e71b      	b.n	8004baa <HAL_ADC_ConfigChannel+0xce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004d72:	0e80      	lsrs	r0, r0, #26
 8004d74:	3001      	adds	r0, #1
 8004d76:	f000 051f 	and.w	r5, r0, #31
 8004d7a:	2401      	movs	r4, #1
 8004d7c:	0680      	lsls	r0, r0, #26
 8004d7e:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8004d82:	40ac      	lsls	r4, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d84:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004d86:	ea44 0400 	orr.w	r4, r4, r0
 8004d8a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d8e:	d959      	bls.n	8004e44 <HAL_ADC_ConfigChannel+0x368>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004d90:	381e      	subs	r0, #30
 8004d92:	0500      	lsls	r0, r0, #20
 8004d94:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8004d98:	e7c2      	b.n	8004d20 <HAL_ADC_ConfigChannel+0x244>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004d9a:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 8004d9c:	6e15      	ldr	r5, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004d9e:	f3c0 0612 	ubfx	r6, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004da2:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004da6:	2e00      	cmp	r6, #0
 8004da8:	d166      	bne.n	8004e78 <HAL_ADC_ConfigChannel+0x39c>
 8004daa:	f3c0 6084 	ubfx	r0, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004dae:	4285      	cmp	r5, r0
 8004db0:	f000 80a8 	beq.w	8004f04 <HAL_ADC_ConfigChannel+0x428>
 8004db4:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8004db6:	6e55      	ldr	r5, [r2, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004db8:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8004dbc:	4285      	cmp	r5, r0
 8004dbe:	f000 808c 	beq.w	8004eda <HAL_ADC_ConfigChannel+0x3fe>
 8004dc2:	68a5      	ldr	r5, [r4, #8]
 8004dc4:	68a5      	ldr	r5, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004dc6:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004dca:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8004dce:	4285      	cmp	r5, r0
 8004dd0:	f000 80aa 	beq.w	8004f28 <HAL_ADC_ConfigChannel+0x44c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004dd4:	68e5      	ldr	r5, [r4, #12]
 8004dd6:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004dd8:	f104 060c 	add.w	r6, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ddc:	f3c5 6484 	ubfx	r4, r5, #26, #5
 8004de0:	42a0      	cmp	r0, r4
 8004de2:	f000 80b6 	beq.w	8004f52 <HAL_ADC_ConfigChannel+0x476>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004de6:	4660      	mov	r0, ip
 8004de8:	e6a9      	b.n	8004b3e <HAL_ADC_ConfigChannel+0x62>
  MODIFY_REG(*preg,
 8004dea:	583d      	ldr	r5, [r7, r0]
 8004dec:	402c      	ands	r4, r5
 8004dee:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004df0:	6950      	ldr	r0, [r2, #20]
 8004df2:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8004df6:	6150      	str	r0, [r2, #20]
}
 8004df8:	e700      	b.n	8004bfc <HAL_ADC_ConfigChannel+0x120>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfa:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8004dfe:	2c00      	cmp	r4, #0
 8004e00:	f000 80b9 	beq.w	8004f76 <HAL_ADC_ConfigChannel+0x49a>
  return __builtin_clz(value);
 8004e04:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004e08:	3401      	adds	r4, #1
 8004e0a:	06a4      	lsls	r4, r4, #26
 8004e0c:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e10:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004e14:	2d00      	cmp	r5, #0
 8004e16:	f000 80ac 	beq.w	8004f72 <HAL_ADC_ConfigChannel+0x496>
  return __builtin_clz(value);
 8004e1a:	fab5 f585 	clz	r5, r5
 8004e1e:	3501      	adds	r5, #1
 8004e20:	f005 051f 	and.w	r5, r5, #31
 8004e24:	2601      	movs	r6, #1
 8004e26:	fa06 f505 	lsl.w	r5, r6, r5
 8004e2a:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e2c:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004e30:	2800      	cmp	r0, #0
 8004e32:	f000 8094 	beq.w	8004f5e <HAL_ADC_ConfigChannel+0x482>
  return __builtin_clz(value);
 8004e36:	fab0 f080 	clz	r0, r0
 8004e3a:	3001      	adds	r0, #1
 8004e3c:	f000 001f 	and.w	r0, r0, #31
 8004e40:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004e44:	0500      	lsls	r0, r0, #20
 8004e46:	e76b      	b.n	8004d20 <HAL_ADC_ConfigChannel+0x244>
 8004e48:	0007ffff 	.word	0x0007ffff
 8004e4c:	407f0000 	.word	0x407f0000
 8004e50:	80080000 	.word	0x80080000
 8004e54:	50000300 	.word	0x50000300
 8004e58:	c3210000 	.word	0xc3210000
 8004e5c:	90c00010 	.word	0x90c00010
 8004e60:	c7520000 	.word	0xc7520000
 8004e64:	cb840000 	.word	0xcb840000
 8004e68:	50000100 	.word	0x50000100
 8004e6c:	03fff000 	.word	0x03fff000
 8004e70:	200004ec 	.word	0x200004ec
 8004e74:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e78:	fa90 f6a0 	rbit	r6, r0
  if (value == 0U)
 8004e7c:	b11e      	cbz	r6, 8004e86 <HAL_ADC_ConfigChannel+0x3aa>
  return __builtin_clz(value);
 8004e7e:	fab6 f686 	clz	r6, r6
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004e82:	42b5      	cmp	r5, r6
 8004e84:	d03e      	beq.n	8004f04 <HAL_ADC_ConfigChannel+0x428>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004e86:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8004e88:	6e55      	ldr	r5, [r2, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004e8a:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e8e:	fa9c f6ac 	rbit	r6, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e92:	f104 0708 	add.w	r7, r4, #8
 8004e96:	46be      	mov	lr, r7
  if (value == 0U)
 8004e98:	b11e      	cbz	r6, 8004ea2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8004e9a:	fab6 f686 	clz	r6, r6
 8004e9e:	42ae      	cmp	r6, r5
 8004ea0:	d01d      	beq.n	8004ede <HAL_ADC_ConfigChannel+0x402>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004ea2:	68a5      	ldr	r5, [r4, #8]
 8004ea4:	68a5      	ldr	r5, [r4, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ea6:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eaa:	fa9c feac 	rbit	lr, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004eae:	f104 060c 	add.w	r6, r4, #12
 8004eb2:	46b0      	mov	r8, r6
  if (value == 0U)
 8004eb4:	f1be 0f00 	cmp.w	lr, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_ADC_ConfigChannel+0x3e6>
  return __builtin_clz(value);
 8004eba:	fabe fe8e 	clz	lr, lr
 8004ebe:	45ae      	cmp	lr, r5
 8004ec0:	d034      	beq.n	8004f2c <HAL_ADC_ConfigChannel+0x450>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004ec2:	68e5      	ldr	r5, [r4, #12]
 8004ec4:	68e4      	ldr	r4, [r4, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ec6:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eca:	fa9c f5ac 	rbit	r5, ip
  if (value == 0U)
 8004ece:	2d00      	cmp	r5, #0
 8004ed0:	f43f ae35 	beq.w	8004b3e <HAL_ADC_ConfigChannel+0x62>
  return __builtin_clz(value);
 8004ed4:	fab5 f085 	clz	r0, r5
 8004ed8:	e782      	b.n	8004de0 <HAL_ADC_ConfigChannel+0x304>
 8004eda:	f104 0e08 	add.w	lr, r4, #8
  MODIFY_REG(*preg,
 8004ede:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8004ee0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004ee4:	6650      	str	r0, [r2, #100]	@ 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004ee6:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004eea:	68a0      	ldr	r0, [r4, #8]
 8004eec:	68a5      	ldr	r5, [r4, #8]
 8004eee:	f3cc 0612 	ubfx	r6, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ef2:	4677      	mov	r7, lr
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ef4:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004ef8:	4660      	mov	r0, ip
 8004efa:	2e00      	cmp	r6, #0
 8004efc:	d1d5      	bne.n	8004eaa <HAL_ADC_ConfigChannel+0x3ce>
 8004efe:	f3cc 6084 	ubfx	r0, ip, #26, #5
 8004f02:	e764      	b.n	8004dce <HAL_ADC_ConfigChannel+0x2f2>
  MODIFY_REG(*preg,
 8004f04:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8004f06:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004f0a:	6610      	str	r0, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f0c:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004f10:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8004f12:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8004f14:	f3cc 0612 	ubfx	r6, ip, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004f18:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f1c:	4660      	mov	r0, ip
 8004f1e:	2e00      	cmp	r6, #0
 8004f20:	d1b5      	bne.n	8004e8e <HAL_ADC_ConfigChannel+0x3b2>
 8004f22:	f3cc 6084 	ubfx	r0, ip, #26, #5
 8004f26:	e749      	b.n	8004dbc <HAL_ADC_ConfigChannel+0x2e0>
 8004f28:	f104 080c 	add.w	r8, r4, #12
  MODIFY_REG(*preg,
 8004f2c:	6838      	ldr	r0, [r7, #0]
 8004f2e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004f32:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f34:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004f38:	68e0      	ldr	r0, [r4, #12]
 8004f3a:	68e4      	ldr	r4, [r4, #12]
 8004f3c:	f3cc 0512 	ubfx	r5, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f40:	4646      	mov	r6, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f42:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f46:	4660      	mov	r0, ip
 8004f48:	2d00      	cmp	r5, #0
 8004f4a:	d1be      	bne.n	8004eca <HAL_ADC_ConfigChannel+0x3ee>
 8004f4c:	f3cc 6084 	ubfx	r0, ip, #26, #5
 8004f50:	e746      	b.n	8004de0 <HAL_ADC_ConfigChannel+0x304>
  MODIFY_REG(*preg,
 8004f52:	6830      	ldr	r0, [r6, #0]
 8004f54:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004f58:	6030      	str	r0, [r6, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004f5a:	6808      	ldr	r0, [r1, #0]
}
 8004f5c:	e5ef      	b.n	8004b3e <HAL_ADC_ConfigChannel+0x62>
 8004f5e:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 8004f62:	e6dd      	b.n	8004d20 <HAL_ADC_ConfigChannel+0x244>
 8004f64:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8004f68:	e6ba      	b.n	8004ce0 <HAL_ADC_ConfigChannel+0x204>
 8004f6a:	4804      	ldr	r0, [pc, #16]	@ (8004f7c <HAL_ADC_ConfigChannel+0x4a0>)
 8004f6c:	e6d8      	b.n	8004d20 <HAL_ADC_ConfigChannel+0x244>
 8004f6e:	2502      	movs	r5, #2
 8004f70:	e6c3      	b.n	8004cfa <HAL_ADC_ConfigChannel+0x21e>
 8004f72:	2502      	movs	r5, #2
 8004f74:	e759      	b.n	8004e2a <HAL_ADC_ConfigChannel+0x34e>
 8004f76:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8004f7a:	e749      	b.n	8004e10 <HAL_ADC_ConfigChannel+0x334>
 8004f7c:	fe500000 	.word	0xfe500000

08004f80 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8004f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f84:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
{
 8004f88:	4602      	mov	r2, r0
 8004f8a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8004f8c:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8004f8e:	2b01      	cmp	r3, #1
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004f90:	6955      	ldr	r5, [r2, #20]
  __IO uint32_t wait_loop_index = 0;
 8004f92:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8004f94:	f000 8174 	beq.w	8005280 <HAL_ADCEx_InjectedConfigChannel+0x300>
 8004f98:	2301      	movs	r3, #1
 8004f9a:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8004f9e:	e9d1 4000 	ldrd	r4, r0, [r1]

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004fa2:	6813      	ldr	r3, [r2, #0]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004fa4:	2d00      	cmp	r5, #0
 8004fa6:	d072      	beq.n	800508e <HAL_ADCEx_InjectedConfigChannel+0x10e>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8004fa8:	6a0d      	ldr	r5, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004faa:	2d01      	cmp	r5, #1
 8004fac:	d06f      	beq.n	800508e <HAL_ADCEx_InjectedConfigChannel+0x10e>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004fae:	6e97      	ldr	r7, [r2, #104]	@ 0x68
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8004fb0:	f000 001f 	and.w	r0, r0, #31
 8004fb4:	f3c4 6684 	ubfx	r6, r4, #26, #5
 8004fb8:	4086      	lsls	r6, r0
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004fba:	2f00      	cmp	r7, #0
 8004fbc:	f040 811a 	bne.w	80051f4 <HAL_ADCEx_InjectedConfigChannel+0x274>
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004fc0:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8004fc2:	3d01      	subs	r5, #1
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	f000 8217 	beq.w	80053f8 <HAL_ADCEx_InjectedConfigChannel+0x478>
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8004fca:	6acf      	ldr	r7, [r1, #44]	@ 0x2c
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004fcc:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
 8004fd0:	4328      	orrs	r0, r5
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8004fd2:	4338      	orrs	r0, r7
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8004fd4:	4330      	orrs	r0, r6
 8004fd6:	e9c2 0519 	strd	r0, r5, [r2, #100]	@ 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004fda:	6898      	ldr	r0, [r3, #8]
 8004fdc:	0700      	lsls	r0, r0, #28
 8004fde:	d410      	bmi.n	8005002 <HAL_ADCEx_InjectedConfigChannel+0x82>
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004fe0:	f891 0026 	ldrb.w	r0, [r1, #38]	@ 0x26
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8004fe4:	f891 5025 	ldrb.w	r5, [r1, #37]	@ 0x25
      MODIFY_REG(hadc->Instance->CFGR,
 8004fe8:	0540      	lsls	r0, r0, #21
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8004fea:	2d00      	cmp	r5, #0
 8004fec:	f040 80f7 	bne.w	80051de <HAL_ADCEx_InjectedConfigChannel+0x25e>
      MODIFY_REG(hadc->Instance->CFGR,
 8004ff0:	68dd      	ldr	r5, [r3, #12]
 8004ff2:	f891 6024 	ldrb.w	r6, [r1, #36]	@ 0x24
 8004ff6:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 8004ffa:	ea40 5006 	orr.w	r0, r0, r6, lsl #20
 8004ffe:	4328      	orrs	r0, r5
 8005000:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005002:	6898      	ldr	r0, [r3, #8]
 8005004:	f010 0004 	ands.w	r0, r0, #4
 8005008:	d057      	beq.n	80050ba <HAL_ADCEx_InjectedConfigChannel+0x13a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800500a:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800500c:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800500e:	689d      	ldr	r5, [r3, #8]
 8005010:	07ee      	lsls	r6, r5, #31
 8005012:	d414      	bmi.n	800503e <HAL_ADCEx_InjectedConfigChannel+0xbe>
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8005014:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8005016:	4da4      	ldr	r5, [pc, #656]	@ (80052a8 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8005018:	f8d3 60b0 	ldr.w	r6, [r3, #176]	@ 0xb0
 800501c:	f007 0c18 	and.w	ip, r7, #24
 8005020:	fa25 f50c 	lsr.w	r5, r5, ip
 8005024:	f3c4 0e12 	ubfx	lr, r4, #0, #19
 8005028:	4025      	ands	r5, r4
 800502a:	ea26 0c0e 	bic.w	ip, r6, lr
 800502e:	ea45 050c 	orr.w	r5, r5, ip
 8005032:	f8c3 50b0 	str.w	r5, [r3, #176]	@ 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005036:	4d9d      	ldr	r5, [pc, #628]	@ (80052ac <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8005038:	42af      	cmp	r7, r5
 800503a:	f000 80f6 	beq.w	800522a <HAL_ADCEx_InjectedConfigChannel+0x2aa>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 800503e:	499c      	ldr	r1, [pc, #624]	@ (80052b0 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8005040:	420c      	tst	r4, r1
 8005042:	d01e      	beq.n	8005082 <HAL_ADCEx_InjectedConfigChannel+0x102>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005044:	4e9b      	ldr	r6, [pc, #620]	@ (80052b4 <HAL_ADCEx_InjectedConfigChannel+0x334>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8005046:	4d9c      	ldr	r5, [pc, #624]	@ (80052b8 <HAL_ADCEx_InjectedConfigChannel+0x338>)
 8005048:	68b1      	ldr	r1, [r6, #8]
 800504a:	42ac      	cmp	r4, r5
 800504c:	f001 77e0 	and.w	r7, r1, #29360128	@ 0x1c00000
 8005050:	f000 809f 	beq.w	8005192 <HAL_ADCEx_InjectedConfigChannel+0x212>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005054:	4d99      	ldr	r5, [pc, #612]	@ (80052bc <HAL_ADCEx_InjectedConfigChannel+0x33c>)
 8005056:	42ac      	cmp	r4, r5
 8005058:	f000 809b 	beq.w	8005192 <HAL_ADCEx_InjectedConfigChannel+0x212>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 800505c:	4d98      	ldr	r5, [pc, #608]	@ (80052c0 <HAL_ADCEx_InjectedConfigChannel+0x340>)
 800505e:	42ac      	cmp	r4, r5
 8005060:	f000 8112 	beq.w	8005288 <HAL_ADCEx_InjectedConfigChannel+0x308>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8005064:	4d97      	ldr	r5, [pc, #604]	@ (80052c4 <HAL_ADCEx_InjectedConfigChannel+0x344>)
 8005066:	42ac      	cmp	r4, r5
 8005068:	d10b      	bne.n	8005082 <HAL_ADCEx_InjectedConfigChannel+0x102>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800506a:	0249      	lsls	r1, r1, #9
 800506c:	d409      	bmi.n	8005082 <HAL_ADCEx_InjectedConfigChannel+0x102>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 800506e:	4996      	ldr	r1, [pc, #600]	@ (80052c8 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 8005070:	428b      	cmp	r3, r1
 8005072:	d006      	beq.n	8005082 <HAL_ADCEx_InjectedConfigChannel+0x102>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005074:	68b3      	ldr	r3, [r6, #8]
 8005076:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 800507a:	433b      	orrs	r3, r7
 800507c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005080:	60b3      	str	r3, [r6, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005082:	2300      	movs	r3, #0
 8005084:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8005088:	b003      	add	sp, #12
 800508a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800508e:	2809      	cmp	r0, #9
 8005090:	d1a3      	bne.n	8004fda <HAL_ADCEx_InjectedConfigChannel+0x5a>
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005092:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005094:	0c65      	lsrs	r5, r4, #17
 8005096:	f405 5578 	and.w	r5, r5, #15872	@ 0x3e00
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800509a:	b120      	cbz	r0, 80050a6 <HAL_ADCEx_InjectedConfigChannel+0x126>
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800509c:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800509e:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80050a2:	4330      	orrs	r0, r6
 80050a4:	4305      	orrs	r5, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 80050a6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80050a8:	4e88      	ldr	r6, [pc, #544]	@ (80052cc <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 80050aa:	4030      	ands	r0, r6
 80050ac:	4328      	orrs	r0, r5
 80050ae:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80050b0:	6898      	ldr	r0, [r3, #8]
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 80050b2:	6655      	str	r5, [r2, #100]	@ 0x64
 80050b4:	0700      	lsls	r0, r0, #28
 80050b6:	d4a4      	bmi.n	8005002 <HAL_ADCEx_InjectedConfigChannel+0x82>
 80050b8:	e792      	b.n	8004fe0 <HAL_ADCEx_InjectedConfigChannel+0x60>
 80050ba:	689d      	ldr	r5, [r3, #8]
 80050bc:	072f      	lsls	r7, r5, #28
 80050be:	d4a6      	bmi.n	800500e <HAL_ADCEx_InjectedConfigChannel+0x8e>
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80050c0:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 80050c2:	f891 0025 	ldrb.w	r0, [r1, #37]	@ 0x25
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80050c6:	2d00      	cmp	r5, #0
 80050c8:	f040 80a6 	bne.w	8005218 <HAL_ADCEx_InjectedConfigChannel+0x298>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80050cc:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80050ce:	68d8      	ldr	r0, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80050d0:	f000 8194 	beq.w	80053fc <HAL_ADCEx_InjectedConfigChannel+0x47c>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80050d4:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 80050d8:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050da:	2000      	movs	r0, #0
    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 80050dc:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 80050e0:	2d01      	cmp	r5, #1
 80050e2:	f000 817e 	beq.w	80053e2 <HAL_ADCEx_InjectedConfigChannel+0x462>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80050e6:	691d      	ldr	r5, [r3, #16]
 80050e8:	f025 0502 	bic.w	r5, r5, #2
 80050ec:	611d      	str	r5, [r3, #16]
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80050ee:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(*preg,
 80050f0:	f3c4 5704 	ubfx	r7, r4, #20, #5
 80050f4:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80050f6:	0de4      	lsrs	r4, r4, #23
  MODIFY_REG(*preg,
 80050f8:	40bd      	lsls	r5, r7
 80050fa:	f1b6 4f00 	cmp.w	r6, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80050fe:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 8005102:	ea6f 0505 	mvn.w	r5, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005106:	f103 0c14 	add.w	ip, r3, #20
 800510a:	f000 8160 	beq.w	80053ce <HAL_ADCEx_InjectedConfigChannel+0x44e>
  MODIFY_REG(*preg,
 800510e:	40be      	lsls	r6, r7
 8005110:	f85c 7004 	ldr.w	r7, [ip, r4]
 8005114:	403d      	ands	r5, r7
 8005116:	4335      	orrs	r5, r6
 8005118:	f84c 5004 	str.w	r5, [ip, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800511c:	695c      	ldr	r4, [r3, #20]
 800511e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005122:	615c      	str	r4, [r3, #20]
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8005124:	f8d1 c010 	ldr.w	ip, [r1, #16]
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8005128:	680c      	ldr	r4, [r1, #0]
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 800512a:	694e      	ldr	r6, [r1, #20]
 800512c:	68df      	ldr	r7, [r3, #12]
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800512e:	f1bc 0f04 	cmp.w	ip, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005132:	f103 0560 	add.w	r5, r3, #96	@ 0x60
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8005136:	46a6      	mov	lr, r4
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8005138:	f000 8109 	beq.w	800534e <HAL_ADCEx_InjectedConfigChannel+0x3ce>
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 800513c:	f3c7 07c1 	ubfx	r7, r7, #3, #2
 8005140:	007f      	lsls	r7, r7, #1
  MODIFY_REG(*preg,
 8005142:	f855 e02c 	ldr.w	lr, [r5, ip, lsl #2]
 8005146:	40be      	lsls	r6, r7
 8005148:	4f61      	ldr	r7, [pc, #388]	@ (80052d0 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 800514a:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 800514e:	ea0e 0707 	and.w	r7, lr, r7
 8005152:	4327      	orrs	r7, r4
 8005154:	433e      	orrs	r6, r7
 8005156:	f046 4600 	orr.w	r6, r6, #2147483648	@ 0x80000000
 800515a:	f845 602c 	str.w	r6, [r5, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800515e:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8005160:	698e      	ldr	r6, [r1, #24]
 8005162:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8005166:	f024 7480 	bic.w	r4, r4, #16777216	@ 0x1000000
 800516a:	4334      	orrs	r4, r6
 800516c:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005170:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8005172:	7f0e      	ldrb	r6, [r1, #28]
  MODIFY_REG(*preg,
 8005174:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8005178:	f1a6 0601 	sub.w	r6, r6, #1
 800517c:	fab6 f686 	clz	r6, r6
 8005180:	0976      	lsrs	r6, r6, #5
 8005182:	f024 7400 	bic.w	r4, r4, #33554432	@ 0x2000000
 8005186:	ea44 6446 	orr.w	r4, r4, r6, lsl #25
 800518a:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 800518e:	680c      	ldr	r4, [r1, #0]
}
 8005190:	e73d      	b.n	800500e <HAL_ADCEx_InjectedConfigChannel+0x8e>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005192:	020d      	lsls	r5, r1, #8
 8005194:	f53f af75 	bmi.w	8005082 <HAL_ADCEx_InjectedConfigChannel+0x102>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005198:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800519c:	f47f af71 	bne.w	8005082 <HAL_ADCEx_InjectedConfigChannel+0x102>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80051a0:	4944      	ldr	r1, [pc, #272]	@ (80052b4 <HAL_ADCEx_InjectedConfigChannel+0x334>)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 80051a2:	4c4c      	ldr	r4, [pc, #304]	@ (80052d4 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 80051a4:	688b      	ldr	r3, [r1, #8]
 80051a6:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 80051aa:	433b      	orrs	r3, r7
 80051ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80051b0:	608b      	str	r3, [r1, #8]
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	4948      	ldr	r1, [pc, #288]	@ (80052d8 <HAL_ADCEx_InjectedConfigChannel+0x358>)
 80051b6:	099b      	lsrs	r3, r3, #6
 80051b8:	fba1 1303 	umull	r1, r3, r1, r3
 80051bc:	099b      	lsrs	r3, r3, #6
 80051be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80051c6:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80051c8:	9b01      	ldr	r3, [sp, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f43f af59 	beq.w	8005082 <HAL_ADCEx_InjectedConfigChannel+0x102>
          wait_loop_index--;
 80051d0:	9b01      	ldr	r3, [sp, #4]
 80051d2:	3b01      	subs	r3, #1
 80051d4:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80051d6:	9b01      	ldr	r3, [sp, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1f9      	bne.n	80051d0 <HAL_ADCEx_InjectedConfigChannel+0x250>
 80051dc:	e751      	b.n	8005082 <HAL_ADCEx_InjectedConfigChannel+0x102>
      MODIFY_REG(hadc->Instance->CFGR,
 80051de:	68dd      	ldr	r5, [r3, #12]
 80051e0:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 80051e4:	4328      	orrs	r0, r5
 80051e6:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80051e8:	6898      	ldr	r0, [r3, #8]
 80051ea:	f010 0004 	ands.w	r0, r0, #4
 80051ee:	f43f af64 	beq.w	80050ba <HAL_ADCEx_InjectedConfigChannel+0x13a>
 80051f2:	e70a      	b.n	800500a <HAL_ADCEx_InjectedConfigChannel+0x8a>
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80051f4:	6e55      	ldr	r5, [r2, #100]	@ 0x64
    hadc->InjectionConfig.ChannelCount--;
 80051f6:	3f01      	subs	r7, #1
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80051f8:	4335      	orrs	r5, r6
    hadc->InjectionConfig.ChannelCount--;
 80051fa:	6697      	str	r7, [r2, #104]	@ 0x68
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80051fc:	6655      	str	r5, [r2, #100]	@ 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80051fe:	2f00      	cmp	r7, #0
 8005200:	f47f aeeb 	bne.w	8004fda <HAL_ADCEx_InjectedConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8005204:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005206:	4e31      	ldr	r6, [pc, #196]	@ (80052cc <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 8005208:	4030      	ands	r0, r6
 800520a:	4328      	orrs	r0, r5
 800520c:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800520e:	6898      	ldr	r0, [r3, #8]
 8005210:	0700      	lsls	r0, r0, #28
 8005212:	f53f aef6 	bmi.w	8005002 <HAL_ADCEx_InjectedConfigChannel+0x82>
 8005216:	e6e3      	b.n	8004fe0 <HAL_ADCEx_InjectedConfigChannel+0x60>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8005218:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
 800521a:	2d00      	cmp	r5, #0
 800521c:	f43f af56 	beq.w	80050cc <HAL_ADCEx_InjectedConfigChannel+0x14c>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8005220:	2801      	cmp	r0, #1
 8005222:	f000 810d 	beq.w	8005440 <HAL_ADCEx_InjectedConfigChannel+0x4c0>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005226:	68d8      	ldr	r0, [r3, #12]
 8005228:	e754      	b.n	80050d4 <HAL_ADCEx_InjectedConfigChannel+0x154>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800522a:	f1be 0f00 	cmp.w	lr, #0
 800522e:	d155      	bne.n	80052dc <HAL_ADCEx_InjectedConfigChannel+0x35c>
 8005230:	0ea4      	lsrs	r4, r4, #26
 8005232:	3401      	adds	r4, #1
 8005234:	f004 061f 	and.w	r6, r4, #31
 8005238:	2501      	movs	r5, #1
 800523a:	06a4      	lsls	r4, r4, #26
 800523c:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 8005240:	40b5      	lsls	r5, r6
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005242:	2e09      	cmp	r6, #9
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005244:	ea45 0504 	orr.w	r5, r5, r4
 8005248:	eb06 0446 	add.w	r4, r6, r6, lsl #1
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800524c:	f200 80f3 	bhi.w	8005436 <HAL_ADCEx_InjectedConfigChannel+0x4b6>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005250:	0524      	lsls	r4, r4, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005252:	432c      	orrs	r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005254:	0de6      	lsrs	r6, r4, #23
  MODIFY_REG(*preg,
 8005256:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005258:	f006 0604 	and.w	r6, r6, #4
 800525c:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 8005260:	f3c4 5404 	ubfx	r4, r4, #20, #5
 8005264:	fa05 fc04 	lsl.w	ip, r5, r4
 8005268:	f04f 0e07 	mov.w	lr, #7
 800526c:	59bd      	ldr	r5, [r7, r6]
 800526e:	fa0e f404 	lsl.w	r4, lr, r4
 8005272:	ea25 0404 	bic.w	r4, r5, r4
 8005276:	ea44 040c 	orr.w	r4, r4, ip
 800527a:	51bc      	str	r4, [r7, r6]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 800527c:	680c      	ldr	r4, [r1, #0]
}
 800527e:	e6de      	b.n	800503e <HAL_ADCEx_InjectedConfigChannel+0xbe>
  __HAL_LOCK(hadc);
 8005280:	2002      	movs	r0, #2
}
 8005282:	b003      	add	sp, #12
 8005284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005288:	01cc      	lsls	r4, r1, #7
 800528a:	f53f aefa 	bmi.w	8005082 <HAL_ADCEx_InjectedConfigChannel+0x102>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800528e:	490e      	ldr	r1, [pc, #56]	@ (80052c8 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 8005290:	428b      	cmp	r3, r1
 8005292:	f43f aef6 	beq.w	8005082 <HAL_ADCEx_InjectedConfigChannel+0x102>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005296:	68b3      	ldr	r3, [r6, #8]
 8005298:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 800529c:	433b      	orrs	r3, r7
 800529e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052a2:	60b3      	str	r3, [r6, #8]
}
 80052a4:	e6ed      	b.n	8005082 <HAL_ADCEx_InjectedConfigChannel+0x102>
 80052a6:	bf00      	nop
 80052a8:	0007ffff 	.word	0x0007ffff
 80052ac:	407f0000 	.word	0x407f0000
 80052b0:	80080000 	.word	0x80080000
 80052b4:	50000300 	.word	0x50000300
 80052b8:	c3210000 	.word	0xc3210000
 80052bc:	90c00010 	.word	0x90c00010
 80052c0:	c7520000 	.word	0xc7520000
 80052c4:	cb840000 	.word	0xcb840000
 80052c8:	50000100 	.word	0x50000100
 80052cc:	04104000 	.word	0x04104000
 80052d0:	03fff000 	.word	0x03fff000
 80052d4:	200004ec 	.word	0x200004ec
 80052d8:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052dc:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80052e0:	2d00      	cmp	r5, #0
 80052e2:	f000 80b2 	beq.w	800544a <HAL_ADCEx_InjectedConfigChannel+0x4ca>
  return __builtin_clz(value);
 80052e6:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052ea:	3501      	adds	r5, #1
 80052ec:	f005 051f 	and.w	r5, r5, #31
 80052f0:	2d09      	cmp	r5, #9
 80052f2:	f240 80aa 	bls.w	800544a <HAL_ADCEx_InjectedConfigChannel+0x4ca>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f6:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80052fa:	2d00      	cmp	r5, #0
 80052fc:	f000 8111 	beq.w	8005522 <HAL_ADCEx_InjectedConfigChannel+0x5a2>
  return __builtin_clz(value);
 8005300:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005304:	3501      	adds	r5, #1
 8005306:	06ad      	lsls	r5, r5, #26
 8005308:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800530c:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8005310:	2e00      	cmp	r6, #0
 8005312:	f000 8104 	beq.w	800551e <HAL_ADCEx_InjectedConfigChannel+0x59e>
  return __builtin_clz(value);
 8005316:	fab6 f686 	clz	r6, r6
 800531a:	3601      	adds	r6, #1
 800531c:	f006 061f 	and.w	r6, r6, #31
 8005320:	2701      	movs	r7, #1
 8005322:	fa07 f606 	lsl.w	r6, r7, r6
 8005326:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005328:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 800532c:	2c00      	cmp	r4, #0
 800532e:	f000 80fe 	beq.w	800552e <HAL_ADCEx_InjectedConfigChannel+0x5ae>
  return __builtin_clz(value);
 8005332:	fab4 f484 	clz	r4, r4
 8005336:	1c66      	adds	r6, r4, #1
 8005338:	f006 061f 	and.w	r6, r6, #31
 800533c:	2403      	movs	r4, #3
 800533e:	f06f 071d 	mvn.w	r7, #29
 8005342:	fb14 7406 	smlabb	r4, r4, r6, r7
 8005346:	0524      	lsls	r4, r4, #20
 8005348:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 800534c:	e781      	b.n	8005252 <HAL_ADCEx_InjectedConfigChannel+0x2d2>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800534e:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
 8005350:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8005352:	f3c4 0712 	ubfx	r7, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005356:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800535a:	2f00      	cmp	r7, #0
 800535c:	d052      	beq.n	8005404 <HAL_ADCEx_InjectedConfigChannel+0x484>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800535e:	fa94 f7a4 	rbit	r7, r4
  if (value == 0U)
 8005362:	b127      	cbz	r7, 800536e <HAL_ADCEx_InjectedConfigChannel+0x3ee>
  return __builtin_clz(value);
 8005364:	fab7 f787 	clz	r7, r7
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005368:	42be      	cmp	r6, r7
 800536a:	f000 80a7 	beq.w	80054bc <HAL_ADCEx_InjectedConfigChannel+0x53c>
 800536e:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 8005370:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005372:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005376:	fa9e f7ae 	rbit	r7, lr
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800537a:	f105 0c08 	add.w	ip, r5, #8
 800537e:	46e0      	mov	r8, ip
  if (value == 0U)
 8005380:	b127      	cbz	r7, 800538c <HAL_ADCEx_InjectedConfigChannel+0x40c>
  return __builtin_clz(value);
 8005382:	fab7 f787 	clz	r7, r7
 8005386:	42b7      	cmp	r7, r6
 8005388:	f000 8084 	beq.w	8005494 <HAL_ADCEx_InjectedConfigChannel+0x514>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800538c:	68ae      	ldr	r6, [r5, #8]
 800538e:	68ae      	ldr	r6, [r5, #8]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005390:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005394:	fa9e f8ae 	rbit	r8, lr
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005398:	f105 070c 	add.w	r7, r5, #12
 800539c:	46b9      	mov	r9, r7
  if (value == 0U)
 800539e:	f1b8 0f00 	cmp.w	r8, #0
 80053a2:	d004      	beq.n	80053ae <HAL_ADCEx_InjectedConfigChannel+0x42e>
  return __builtin_clz(value);
 80053a4:	fab8 f888 	clz	r8, r8
 80053a8:	45b0      	cmp	r8, r6
 80053aa:	f000 809c 	beq.w	80054e6 <HAL_ADCEx_InjectedConfigChannel+0x566>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80053ae:	68ee      	ldr	r6, [r5, #12]
 80053b0:	68ed      	ldr	r5, [r5, #12]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80053b2:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b6:	fa9e f6ae 	rbit	r6, lr
  if (value == 0U)
 80053ba:	2e00      	cmp	r6, #0
 80053bc:	f43f ae27 	beq.w	800500e <HAL_ADCEx_InjectedConfigChannel+0x8e>
  return __builtin_clz(value);
 80053c0:	fab6 f486 	clz	r4, r6
 80053c4:	42ac      	cmp	r4, r5
 80053c6:	f000 80a4 	beq.w	8005512 <HAL_ADCEx_InjectedConfigChannel+0x592>
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 80053ca:	4674      	mov	r4, lr
 80053cc:	e61f      	b.n	800500e <HAL_ADCEx_InjectedConfigChannel+0x8e>
  MODIFY_REG(*preg,
 80053ce:	f85c 6004 	ldr.w	r6, [ip, r4]
 80053d2:	4035      	ands	r5, r6
 80053d4:	f84c 5004 	str.w	r5, [ip, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80053d8:	695c      	ldr	r4, [r3, #20]
 80053da:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 80053de:	615c      	str	r4, [r3, #20]
}
 80053e0:	e6a0      	b.n	8005124 <HAL_ADCEx_InjectedConfigChannel+0x1a4>
      MODIFY_REG(hadc->Instance->CFGR2,
 80053e2:	e9d1 570d 	ldrd	r5, r7, [r1, #52]	@ 0x34
 80053e6:	691e      	ldr	r6, [r3, #16]
 80053e8:	433d      	orrs	r5, r7
 80053ea:	f426 76ff 	bic.w	r6, r6, #510	@ 0x1fe
 80053ee:	4335      	orrs	r5, r6
 80053f0:	f045 0502 	orr.w	r5, r5, #2
 80053f4:	611d      	str	r5, [r3, #16]
 80053f6:	e67a      	b.n	80050ee <HAL_ADCEx_InjectedConfigChannel+0x16e>
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 80053f8:	4628      	mov	r0, r5
 80053fa:	e5eb      	b.n	8004fd4 <HAL_ADCEx_InjectedConfigChannel+0x54>
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80053fc:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8005400:	60d8      	str	r0, [r3, #12]
 8005402:	e66a      	b.n	80050da <HAL_ADCEx_InjectedConfigChannel+0x15a>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8005404:	f3c4 6484 	ubfx	r4, r4, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005408:	42a6      	cmp	r6, r4
 800540a:	d057      	beq.n	80054bc <HAL_ADCEx_InjectedConfigChannel+0x53c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800540c:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 800540e:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005410:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005414:	42a6      	cmp	r6, r4
 8005416:	d03b      	beq.n	8005490 <HAL_ADCEx_InjectedConfigChannel+0x510>
 8005418:	68ae      	ldr	r6, [r5, #8]
 800541a:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800541c:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005420:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005424:	42a6      	cmp	r6, r4
 8005426:	d05c      	beq.n	80054e2 <HAL_ADCEx_InjectedConfigChannel+0x562>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005428:	68ee      	ldr	r6, [r5, #12]
 800542a:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800542c:	f105 070c 	add.w	r7, r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005430:	f3c6 6584 	ubfx	r5, r6, #26, #5
 8005434:	e7c6      	b.n	80053c4 <HAL_ADCEx_InjectedConfigChannel+0x444>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005436:	3c1e      	subs	r4, #30
 8005438:	0524      	lsls	r4, r4, #20
 800543a:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 800543e:	e708      	b.n	8005252 <HAL_ADCEx_InjectedConfigChannel+0x2d2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005440:	6dd5      	ldr	r5, [r2, #92]	@ 0x5c
 8005442:	f045 0520 	orr.w	r5, r5, #32
 8005446:	65d5      	str	r5, [r2, #92]	@ 0x5c
        tmp_hal_status = HAL_ERROR;
 8005448:	e648      	b.n	80050dc <HAL_ADCEx_InjectedConfigChannel+0x15c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800544a:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 800544e:	2d00      	cmp	r5, #0
 8005450:	d071      	beq.n	8005536 <HAL_ADCEx_InjectedConfigChannel+0x5b6>
  return __builtin_clz(value);
 8005452:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005456:	3501      	adds	r5, #1
 8005458:	06ad      	lsls	r5, r5, #26
 800545a:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800545e:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8005462:	2e00      	cmp	r6, #0
 8005464:	d065      	beq.n	8005532 <HAL_ADCEx_InjectedConfigChannel+0x5b2>
  return __builtin_clz(value);
 8005466:	fab6 f686 	clz	r6, r6
 800546a:	3601      	adds	r6, #1
 800546c:	f006 061f 	and.w	r6, r6, #31
 8005470:	2701      	movs	r7, #1
 8005472:	fa07 f606 	lsl.w	r6, r7, r6
 8005476:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005478:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 800547c:	2c00      	cmp	r4, #0
 800547e:	d053      	beq.n	8005528 <HAL_ADCEx_InjectedConfigChannel+0x5a8>
  return __builtin_clz(value);
 8005480:	fab4 f484 	clz	r4, r4
 8005484:	3401      	adds	r4, #1
 8005486:	f004 041f 	and.w	r4, r4, #31
 800548a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800548e:	e6df      	b.n	8005250 <HAL_ADCEx_InjectedConfigChannel+0x2d0>
 8005490:	f105 0808 	add.w	r8, r5, #8
  MODIFY_REG(*preg,
 8005494:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 8005496:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800549a:	665c      	str	r4, [r3, #100]	@ 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800549c:	f8d1 e000 	ldr.w	lr, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80054a0:	68ac      	ldr	r4, [r5, #8]
 80054a2:	68ae      	ldr	r6, [r5, #8]
 80054a4:	f3ce 0712 	ubfx	r7, lr, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80054a8:	46c4      	mov	ip, r8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80054aa:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80054ae:	4674      	mov	r4, lr
 80054b0:	2f00      	cmp	r7, #0
 80054b2:	f47f af6f 	bne.w	8005394 <HAL_ADCEx_InjectedConfigChannel+0x414>
 80054b6:	f3ce 6484 	ubfx	r4, lr, #26, #5
 80054ba:	e7b3      	b.n	8005424 <HAL_ADCEx_InjectedConfigChannel+0x4a4>
  MODIFY_REG(*preg,
 80054bc:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 80054be:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80054c2:	661c      	str	r4, [r3, #96]	@ 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80054c4:	f8d1 e000 	ldr.w	lr, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80054c8:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 80054ca:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 80054cc:	f3ce 0712 	ubfx	r7, lr, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80054d0:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80054d4:	4674      	mov	r4, lr
 80054d6:	2f00      	cmp	r7, #0
 80054d8:	f47f af4d 	bne.w	8005376 <HAL_ADCEx_InjectedConfigChannel+0x3f6>
 80054dc:	f3ce 6484 	ubfx	r4, lr, #26, #5
 80054e0:	e798      	b.n	8005414 <HAL_ADCEx_InjectedConfigChannel+0x494>
 80054e2:	f105 090c 	add.w	r9, r5, #12
  MODIFY_REG(*preg,
 80054e6:	f8dc 4000 	ldr.w	r4, [ip]
 80054ea:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80054ee:	f8cc 4000 	str.w	r4, [ip]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80054f2:	f8d1 e000 	ldr.w	lr, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80054f6:	68ec      	ldr	r4, [r5, #12]
 80054f8:	68ed      	ldr	r5, [r5, #12]
 80054fa:	f3ce 0612 	ubfx	r6, lr, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80054fe:	464f      	mov	r7, r9
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005500:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8005504:	4674      	mov	r4, lr
 8005506:	2e00      	cmp	r6, #0
 8005508:	f47f af55 	bne.w	80053b6 <HAL_ADCEx_InjectedConfigChannel+0x436>
 800550c:	f3ce 6484 	ubfx	r4, lr, #26, #5
 8005510:	e758      	b.n	80053c4 <HAL_ADCEx_InjectedConfigChannel+0x444>
  MODIFY_REG(*preg,
 8005512:	683c      	ldr	r4, [r7, #0]
 8005514:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005518:	603c      	str	r4, [r7, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 800551a:	680c      	ldr	r4, [r1, #0]
}
 800551c:	e577      	b.n	800500e <HAL_ADCEx_InjectedConfigChannel+0x8e>
 800551e:	2602      	movs	r6, #2
 8005520:	e701      	b.n	8005326 <HAL_ADCEx_InjectedConfigChannel+0x3a6>
 8005522:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 8005526:	e6f1      	b.n	800530c <HAL_ADCEx_InjectedConfigChannel+0x38c>
 8005528:	f44f 1440 	mov.w	r4, #3145728	@ 0x300000
 800552c:	e691      	b.n	8005252 <HAL_ADCEx_InjectedConfigChannel+0x2d2>
 800552e:	4c03      	ldr	r4, [pc, #12]	@ (800553c <HAL_ADCEx_InjectedConfigChannel+0x5bc>)
 8005530:	e68f      	b.n	8005252 <HAL_ADCEx_InjectedConfigChannel+0x2d2>
 8005532:	2602      	movs	r6, #2
 8005534:	e79f      	b.n	8005476 <HAL_ADCEx_InjectedConfigChannel+0x4f6>
 8005536:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 800553a:	e790      	b.n	800545e <HAL_ADCEx_InjectedConfigChannel+0x4de>
 800553c:	fe500000 	.word	0xfe500000

08005540 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005540:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005542:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
  if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005546:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8005548:	2a01      	cmp	r2, #1
{
 800554a:	b09c      	sub	sp, #112	@ 0x70
  __HAL_LOCK(hadc);
 800554c:	d042      	beq.n	80055d4 <HAL_ADCEx_MultiModeConfigChannel+0x94>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800554e:	6804      	ldr	r4, [r0, #0]
 8005550:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005552:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8005554:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005556:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800555a:	9218      	str	r2, [sp, #96]	@ 0x60
  __HAL_LOCK(hadc);
 800555c:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005560:	9219      	str	r2, [sp, #100]	@ 0x64
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005562:	d008      	beq.n	8005576 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005564:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005566:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800556a:	f041 0120 	orr.w	r1, r1, #32
 800556e:	65d9      	str	r1, [r3, #92]	@ 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8005570:	b01c      	add	sp, #112	@ 0x70
 8005572:	bcf0      	pop	{r4, r5, r6, r7}
 8005574:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005576:	4a23      	ldr	r2, [pc, #140]	@ (8005604 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8005578:	6890      	ldr	r0, [r2, #8]
 800557a:	0740      	lsls	r0, r0, #29
 800557c:	d50b      	bpl.n	8005596 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800557e:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005580:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005582:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8005586:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005588:	65da      	str	r2, [r3, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 8005590:	b01c      	add	sp, #112	@ 0x70
 8005592:	bcf0      	pop	{r4, r5, r6, r7}
 8005594:	4770      	bx	lr
 8005596:	68a0      	ldr	r0, [r4, #8]
 8005598:	0746      	lsls	r6, r0, #29
 800559a:	d4f1      	bmi.n	8005580 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800559c:	b1f5      	cbz	r5, 80055dc <HAL_ADCEx_MultiModeConfigChannel+0x9c>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800559e:	4e1a      	ldr	r6, [pc, #104]	@ (8005608 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80055a0:	684f      	ldr	r7, [r1, #4]
 80055a2:	68b0      	ldr	r0, [r6, #8]
 80055a4:	f893 c038 	ldrb.w	ip, [r3, #56]	@ 0x38
 80055a8:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 80055ac:	4338      	orrs	r0, r7
 80055ae:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 80055b2:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80055b4:	68a0      	ldr	r0, [r4, #8]
 80055b6:	6892      	ldr	r2, [r2, #8]
 80055b8:	07c0      	lsls	r0, r0, #31
 80055ba:	d420      	bmi.n	80055fe <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 80055bc:	07d7      	lsls	r7, r2, #31
 80055be:	d41e      	bmi.n	80055fe <HAL_ADCEx_MultiModeConfigChannel+0xbe>
        MODIFY_REG(tmpADC_Common->CCR,
 80055c0:	68b0      	ldr	r0, [r6, #8]
 80055c2:	688a      	ldr	r2, [r1, #8]
 80055c4:	f420 6171 	bic.w	r1, r0, #3856	@ 0xf10
 80055c8:	432a      	orrs	r2, r5
 80055ca:	f021 010f 	bic.w	r1, r1, #15
 80055ce:	430a      	orrs	r2, r1
 80055d0:	60b2      	str	r2, [r6, #8]
 80055d2:	e014      	b.n	80055fe <HAL_ADCEx_MultiModeConfigChannel+0xbe>
  __HAL_LOCK(hadc);
 80055d4:	2002      	movs	r0, #2
}
 80055d6:	b01c      	add	sp, #112	@ 0x70
 80055d8:	bcf0      	pop	{r4, r5, r6, r7}
 80055da:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80055dc:	480a      	ldr	r0, [pc, #40]	@ (8005608 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80055de:	6881      	ldr	r1, [r0, #8]
 80055e0:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 80055e4:	6081      	str	r1, [r0, #8]
 80055e6:	68a1      	ldr	r1, [r4, #8]
 80055e8:	6892      	ldr	r2, [r2, #8]
 80055ea:	07cd      	lsls	r5, r1, #31
 80055ec:	d407      	bmi.n	80055fe <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 80055ee:	07d4      	lsls	r4, r2, #31
 80055f0:	d405      	bmi.n	80055fe <HAL_ADCEx_MultiModeConfigChannel+0xbe>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80055f2:	6882      	ldr	r2, [r0, #8]
 80055f4:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 80055f8:	f022 020f 	bic.w	r2, r2, #15
 80055fc:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055fe:	2000      	movs	r0, #0
 8005600:	e7c3      	b.n	800558a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8005602:	bf00      	nop
 8005604:	50000100 	.word	0x50000100
 8005608:	50000300 	.word	0x50000300

0800560c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800560c:	b530      	push	{r4, r5, lr}
 800560e:	b083      	sub	sp, #12
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8005610:	2300      	movs	r3, #0
 8005612:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8005614:	2800      	cmp	r0, #0
 8005616:	d051      	beq.n	80056bc <HAL_COMP_Init+0xb0>
  {
    status = HAL_ERROR;
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8005618:	6802      	ldr	r2, [r0, #0]
 800561a:	6813      	ldr	r3, [r2, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	4604      	mov	r4, r0
 8005620:	db4c      	blt.n	80056bc <HAL_COMP_Init+0xb0>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005622:	7f43      	ldrb	r3, [r0, #29]
 8005624:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8005628:	2b00      	cmp	r3, #0
 800562a:	d073      	beq.n	8005714 <HAL_COMP_Init+0x108>
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
               | hcomp->Init.InputPlus
 800562c:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
               | hcomp->Init.BlankingSrce
 8005630:	6961      	ldr	r1, [r4, #20]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8005632:	6815      	ldr	r5, [r2, #0]
               | hcomp->Init.InputPlus
 8005634:	4303      	orrs	r3, r0
               | hcomp->Init.BlankingSrce
 8005636:	430b      	orrs	r3, r1
               | hcomp->Init.Hysteresis
 8005638:	68e1      	ldr	r1, [r4, #12]
               | hcomp->Init.OutputPol
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800563a:	6810      	ldr	r0, [r2, #0]
               | hcomp->Init.Hysteresis
 800563c:	430b      	orrs	r3, r1
    tmp_csr = (hcomp->Init.InputMinus
 800563e:	6921      	ldr	r1, [r4, #16]
 8005640:	430b      	orrs	r3, r1
    MODIFY_REG(hcomp->Instance->CSR,
 8005642:	493c      	ldr	r1, [pc, #240]	@ (8005734 <HAL_COMP_Init+0x128>)
 8005644:	4001      	ands	r1, r0
 8005646:	430b      	orrs	r3, r1
 8005648:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800564a:	6813      	ldr	r3, [r2, #0]
 800564c:	021b      	lsls	r3, r3, #8
 800564e:	d501      	bpl.n	8005654 <HAL_COMP_Init+0x48>
 8005650:	022d      	lsls	r5, r5, #8
 8005652:	d549      	bpl.n	80056e8 <HAL_COMP_Init+0xdc>
        wait_loop_index--;
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005654:	4b38      	ldr	r3, [pc, #224]	@ (8005738 <HAL_COMP_Init+0x12c>)
 8005656:	429a      	cmp	r2, r3
 8005658:	d062      	beq.n	8005720 <HAL_COMP_Init+0x114>
 800565a:	4b38      	ldr	r3, [pc, #224]	@ (800573c <HAL_COMP_Init+0x130>)
 800565c:	429a      	cmp	r2, r3
 800565e:	d064      	beq.n	800572a <HAL_COMP_Init+0x11e>
 8005660:	3304      	adds	r3, #4
 8005662:	429a      	cmp	r2, r3
 8005664:	bf15      	itete	ne
 8005666:	f06f 4280 	mvnne.w	r2, #1073741824	@ 0x40000000
 800566a:	f06f 5200 	mvneq.w	r2, #536870912	@ 0x20000000
 800566e:	f04f 4180 	movne.w	r1, #1073741824	@ 0x40000000
 8005672:	f04f 5100 	moveq.w	r1, #536870912	@ 0x20000000

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8005676:	69a3      	ldr	r3, [r4, #24]
 8005678:	0798      	lsls	r0, r3, #30
 800567a:	d022      	beq.n	80056c2 <HAL_COMP_Init+0xb6>
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800567c:	4d30      	ldr	r5, [pc, #192]	@ (8005740 <HAL_COMP_Init+0x134>)
 800567e:	68a8      	ldr	r0, [r5, #8]
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8005680:	f013 0f10 	tst.w	r3, #16
 8005684:	bf14      	ite	ne
 8005686:	4308      	orrne	r0, r1
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005688:	4010      	andeq	r0, r2
 800568a:	60a8      	str	r0, [r5, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800568c:	4d2c      	ldr	r5, [pc, #176]	@ (8005740 <HAL_COMP_Init+0x134>)
 800568e:	68e8      	ldr	r0, [r5, #12]
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8005690:	f013 0f20 	tst.w	r3, #32
 8005694:	bf14      	ite	ne
 8005696:	4308      	orrne	r0, r1
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005698:	4010      	andeq	r0, r2
 800569a:	60e8      	str	r0, [r5, #12]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800569c:	4828      	ldr	r0, [pc, #160]	@ (8005740 <HAL_COMP_Init+0x134>)
 800569e:	6141      	str	r1, [r0, #20]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80056a0:	6845      	ldr	r5, [r0, #4]
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80056a2:	f013 0f02 	tst.w	r3, #2
 80056a6:	bf14      	ite	ne
 80056a8:	430d      	orrne	r5, r1
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80056aa:	4015      	andeq	r5, r2
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80056ac:	07db      	lsls	r3, r3, #31
 80056ae:	6045      	str	r5, [r0, #4]
 80056b0:	d515      	bpl.n	80056de <HAL_COMP_Init+0xd2>
  SET_BIT(EXTI->IMR1, ExtiLine);
 80056b2:	4b23      	ldr	r3, [pc, #140]	@ (8005740 <HAL_COMP_Init+0x134>)
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	4311      	orrs	r1, r2
 80056b8:	6019      	str	r1, [r3, #0]
}
 80056ba:	e009      	b.n	80056d0 <HAL_COMP_Init+0xc4>
    status = HAL_ERROR;
 80056bc:	2001      	movs	r0, #1
      hcomp->State = HAL_COMP_STATE_READY;
    }
  }

  return status;
}
 80056be:	b003      	add	sp, #12
 80056c0:	bd30      	pop	{r4, r5, pc}
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80056c2:	4b1f      	ldr	r3, [pc, #124]	@ (8005740 <HAL_COMP_Init+0x134>)
 80056c4:	6859      	ldr	r1, [r3, #4]
 80056c6:	4011      	ands	r1, r2
 80056c8:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80056ca:	6819      	ldr	r1, [r3, #0]
 80056cc:	400a      	ands	r2, r1
 80056ce:	601a      	str	r2, [r3, #0]
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80056d0:	7f63      	ldrb	r3, [r4, #29]
 80056d2:	b90b      	cbnz	r3, 80056d8 <HAL_COMP_Init+0xcc>
      hcomp->State = HAL_COMP_STATE_READY;
 80056d4:	2301      	movs	r3, #1
 80056d6:	7763      	strb	r3, [r4, #29]
  HAL_StatusTypeDef status = HAL_OK;
 80056d8:	2000      	movs	r0, #0
}
 80056da:	b003      	add	sp, #12
 80056dc:	bd30      	pop	{r4, r5, pc}
 80056de:	4918      	ldr	r1, [pc, #96]	@ (8005740 <HAL_COMP_Init+0x134>)
 80056e0:	680b      	ldr	r3, [r1, #0]
 80056e2:	4013      	ands	r3, r2
 80056e4:	600b      	str	r3, [r1, #0]
}
 80056e6:	e7f3      	b.n	80056d0 <HAL_COMP_Init+0xc4>
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80056e8:	4b16      	ldr	r3, [pc, #88]	@ (8005744 <HAL_COMP_Init+0x138>)
 80056ea:	4917      	ldr	r1, [pc, #92]	@ (8005748 <HAL_COMP_Init+0x13c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	099b      	lsrs	r3, r3, #6
 80056f0:	fba1 1303 	umull	r1, r3, r1, r3
 80056f4:	099b      	lsrs	r3, r3, #6
 80056f6:	3301      	adds	r3, #1
 80056f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8005700:	9b01      	ldr	r3, [sp, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d0a6      	beq.n	8005654 <HAL_COMP_Init+0x48>
        wait_loop_index--;
 8005706:	9b01      	ldr	r3, [sp, #4]
 8005708:	3b01      	subs	r3, #1
 800570a:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800570c:	9b01      	ldr	r3, [sp, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1f9      	bne.n	8005706 <HAL_COMP_Init+0xfa>
 8005712:	e79f      	b.n	8005654 <HAL_COMP_Init+0x48>
      hcomp->Lock = HAL_UNLOCKED;
 8005714:	7701      	strb	r1, [r0, #28]
      COMP_CLEAR_ERRORCODE(hcomp);
 8005716:	6201      	str	r1, [r0, #32]
      HAL_COMP_MspInit(hcomp);
 8005718:	f7fe fd0e 	bl	8004138 <HAL_COMP_MspInit>
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800571c:	6822      	ldr	r2, [r4, #0]
 800571e:	e785      	b.n	800562c <HAL_COMP_Init+0x20>
 8005720:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005724:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005728:	e7a5      	b.n	8005676 <HAL_COMP_Init+0x6a>
 800572a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800572e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005732:	e7a0      	b.n	8005676 <HAL_COMP_Init+0x6a>
 8005734:	ff007e0f 	.word	0xff007e0f
 8005738:	40010200 	.word	0x40010200
 800573c:	40010204 	.word	0x40010204
 8005740:	40010400 	.word	0x40010400
 8005744:	200004ec 	.word	0x200004ec
 8005748:	053e2d63 	.word	0x053e2d63

0800574c <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 800574c:	b1b0      	cbz	r0, 800577c <HAL_CORDIC_Init+0x30>
{
 800574e:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8005750:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8005754:	4604      	mov	r4, r0
 8005756:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800575a:	b153      	cbz	r3, 8005772 <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 800575c:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800575e:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005760:	6260      	str	r0, [r4, #36]	@ 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005762:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  hcordic->pInBuff = NULL;
 8005766:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToOrder = 0U;
 800576a:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800576e:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 8005770:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 8005772:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 8005776:	f7fe fd53 	bl	8004220 <HAL_CORDIC_MspInit>
 800577a:	e7ef      	b.n	800575c <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 800577c:	2001      	movs	r0, #1
}
 800577e:	4770      	bx	lr

08005780 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005780:	4907      	ldr	r1, [pc, #28]	@ (80057a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005782:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005784:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005786:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800578a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800578e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005790:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005792:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005796:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800579a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	e000ed00 	.word	0xe000ed00

080057a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057a4:	4b1b      	ldr	r3, [pc, #108]	@ (8005814 <HAL_NVIC_SetPriority+0x70>)
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057ac:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057ae:	f1c3 0e07 	rsb	lr, r3, #7
 80057b2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057b6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057ba:	bf28      	it	cs
 80057bc:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057c0:	f1bc 0f06 	cmp.w	ip, #6
 80057c4:	d91c      	bls.n	8005800 <HAL_NVIC_SetPriority+0x5c>
 80057c6:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057ca:	f04f 33ff 	mov.w	r3, #4294967295
 80057ce:	fa03 f30c 	lsl.w	r3, r3, ip
 80057d2:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057d6:	f04f 33ff 	mov.w	r3, #4294967295
 80057da:	fa03 f30e 	lsl.w	r3, r3, lr
 80057de:	ea21 0303 	bic.w	r3, r1, r3
 80057e2:	fa03 f30c 	lsl.w	r3, r3, ip
 80057e6:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057e8:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 80057ea:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057ec:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80057ee:	db0a      	blt.n	8005806 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057f0:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80057f4:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80057f8:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80057fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8005800:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005802:	4694      	mov	ip, r2
 8005804:	e7e7      	b.n	80057d6 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005806:	4a04      	ldr	r2, [pc, #16]	@ (8005818 <HAL_NVIC_SetPriority+0x74>)
 8005808:	f000 000f 	and.w	r0, r0, #15
 800580c:	4402      	add	r2, r0
 800580e:	7613      	strb	r3, [r2, #24]
 8005810:	f85d fb04 	ldr.w	pc, [sp], #4
 8005814:	e000ed00 	.word	0xe000ed00
 8005818:	e000ecfc 	.word	0xe000ecfc

0800581c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800581c:	2800      	cmp	r0, #0
 800581e:	db07      	blt.n	8005830 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005820:	4a04      	ldr	r2, [pc, #16]	@ (8005834 <HAL_NVIC_EnableIRQ+0x18>)
 8005822:	0941      	lsrs	r1, r0, #5
 8005824:	2301      	movs	r3, #1
 8005826:	f000 001f 	and.w	r0, r0, #31
 800582a:	4083      	lsls	r3, r0
 800582c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	e000e100 	.word	0xe000e100

08005838 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8005838:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800583c:	4905      	ldr	r1, [pc, #20]	@ (8005854 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800583e:	4b06      	ldr	r3, [pc, #24]	@ (8005858 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005840:	68ca      	ldr	r2, [r1, #12]
 8005842:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005846:	4313      	orrs	r3, r2
 8005848:	60cb      	str	r3, [r1, #12]
 800584a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800584e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8005850:	e7fd      	b.n	800584e <HAL_NVIC_SystemReset+0x16>
 8005852:	bf00      	nop
 8005854:	e000ed00 	.word	0xe000ed00
 8005858:	05fa0004 	.word	0x05fa0004

0800585c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800585c:	3801      	subs	r0, #1
 800585e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8005862:	d301      	bcc.n	8005868 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005864:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8005866:	4770      	bx	lr
{
 8005868:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800586a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800586e:	4c07      	ldr	r4, [pc, #28]	@ (800588c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005870:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005872:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8005876:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800587a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800587c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800587e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005880:	619a      	str	r2, [r3, #24]
}
 8005882:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005886:	6119      	str	r1, [r3, #16]
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	e000ed00 	.word	0xe000ed00

08005890 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop

08005894 <HAL_SYSTICK_IRQHandler>:
{
 8005894:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8005896:	f7ff fffb 	bl	8005890 <HAL_SYSTICK_Callback>
}
 800589a:	bd08      	pop	{r3, pc}

0800589c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800589c:	b188      	cbz	r0, 80058c2 <HAL_DAC_Init+0x26>
{
 800589e:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80058a0:	7903      	ldrb	r3, [r0, #4]
 80058a2:	4604      	mov	r4, r0
 80058a4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80058a8:	b13b      	cbz	r3, 80058ba <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80058aa:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80058ac:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80058ae:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80058b0:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80058b2:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80058b4:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80058b6:	4618      	mov	r0, r3
}
 80058b8:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80058ba:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80058bc:	f7fe fcc8 	bl	8004250 <HAL_DAC_MspInit>
 80058c0:	e7f3      	b.n	80058aa <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 80058c2:	2001      	movs	r0, #1
}
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop

080058c8 <HAL_DAC_ConfigChannel>:
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80058c8:	2800      	cmp	r0, #0
 80058ca:	f000 80ce 	beq.w	8005a6a <HAL_DAC_ConfigChannel+0x1a2>
{
 80058ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058d2:	460f      	mov	r7, r1
  if ((hdac == NULL) || (sConfig == NULL))
 80058d4:	2900      	cmp	r1, #0
 80058d6:	f000 80ca 	beq.w	8005a6e <HAL_DAC_ConfigChannel+0x1a6>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80058da:	7943      	ldrb	r3, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80058dc:	6889      	ldr	r1, [r1, #8]
  __HAL_LOCK(hdac);
 80058de:	2b01      	cmp	r3, #1
 80058e0:	4606      	mov	r6, r0
 80058e2:	f000 80d3 	beq.w	8005a8c <HAL_DAC_ConfigChannel+0x1c4>
 80058e6:	2301      	movs	r3, #1
 80058e8:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80058ea:	2904      	cmp	r1, #4
  hdac->State = HAL_DAC_STATE_BUSY;
 80058ec:	f04f 0302 	mov.w	r3, #2
 80058f0:	4614      	mov	r4, r2
 80058f2:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80058f4:	d07b      	beq.n	80059ee <HAL_DAC_ConfigChannel+0x126>

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80058f6:	6803      	ldr	r3, [r0, #0]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80058f8:	f002 0410 	and.w	r4, r2, #16
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80058fc:	69fa      	ldr	r2, [r7, #28]
 80058fe:	2a01      	cmp	r2, #1
 8005900:	d108      	bne.n	8005914 <HAL_DAC_ConfigChannel+0x4c>
    tmpreg1 = hdac->Instance->CCR;
 8005902:	6b98      	ldr	r0, [r3, #56]	@ 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005904:	6a3a      	ldr	r2, [r7, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005906:	251f      	movs	r5, #31
 8005908:	40a5      	lsls	r5, r4
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800590a:	40a2      	lsls	r2, r4
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800590c:	ea20 0005 	bic.w	r0, r0, r5
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005910:	4302      	orrs	r2, r0
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005912:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005914:	69bd      	ldr	r5, [r7, #24]
  tmpreg1 = hdac->Instance->MCR;
 8005916:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005918:	f8d7 8014 	ldr.w	r8, [r7, #20]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800591c:	2007      	movs	r0, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800591e:	2d01      	cmp	r5, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005920:	fa00 f004 	lsl.w	r0, r0, r4
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005924:	f000 809e 	beq.w	8005a64 <HAL_DAC_ConfigChannel+0x19c>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005928:	2d02      	cmp	r5, #2
 800592a:	f000 80a3 	beq.w	8005a74 <HAL_DAC_ConfigChannel+0x1ac>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800592e:	fab8 fc88 	clz	ip, r8
 8005932:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005936:	793d      	ldrb	r5, [r7, #4]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005938:	f897 e005 	ldrb.w	lr, [r7, #5]
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800593c:	f1a5 0501 	sub.w	r5, r5, #1
 8005940:	fab5 f585 	clz	r5, r5
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005944:	f1ae 0e01 	sub.w	lr, lr, #1
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005948:	096d      	lsrs	r5, r5, #5
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800594a:	fabe fe8e 	clz	lr, lr
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800594e:	022d      	lsls	r5, r5, #8
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005950:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8005954:	ea45 254e 	orr.w	r5, r5, lr, lsl #9
 8005958:	ea45 0508 	orr.w	r5, r5, r8
 800595c:	430d      	orrs	r5, r1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800595e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005962:	40a1      	lsls	r1, r4
 8005964:	4301      	orrs	r1, r0
 8005966:	ea22 0801 	bic.w	r8, r2, r1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800596a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800596e:	40a2      	lsls	r2, r4
 8005970:	ea28 0802 	bic.w	r8, r8, r2
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	2a02      	cmp	r2, #2
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005978:	ea45 050c 	orr.w	r5, r5, ip
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800597c:	f428 4840 	bic.w	r8, r8, #49152	@ 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005980:	d07b      	beq.n	8005a7a <HAL_DAC_ConfigChannel+0x1b2>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005982:	ea48 0802 	orr.w	r8, r8, r2
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005986:	40a5      	lsls	r5, r4
 8005988:	ea45 0508 	orr.w	r5, r5, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800598c:	63dd      	str	r5, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005994:	40a1      	lsls	r1, r4
 8005996:	ea22 0201 	bic.w	r2, r2, r1
 800599a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800599c:	e9d7 1203 	ldrd	r1, r2, [r7, #12]
  tmpreg1 = hdac->Instance->CR;
 80059a0:	681d      	ldr	r5, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80059a2:	f640 70fe 	movw	r0, #4094	@ 0xffe
 80059a6:	40a0      	lsls	r0, r4
 80059a8:	ea25 0500 	bic.w	r5, r5, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80059ac:	fa01 f004 	lsl.w	r0, r1, r4
 80059b0:	4328      	orrs	r0, r5
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80059b2:	0192      	lsls	r2, r2, #6
  hdac->Instance->CR = tmpreg1;
 80059b4:	6018      	str	r0, [r3, #0]
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80059b6:	f3c1 0183 	ubfx	r1, r1, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80059ba:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 80059be:	430a      	orrs	r2, r1
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80059c0:	f640 700f 	movw	r0, #3855	@ 0xf0f
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80059c4:	6819      	ldr	r1, [r3, #0]
 80059c6:	25c0      	movs	r5, #192	@ 0xc0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80059c8:	40a0      	lsls	r0, r4
 80059ca:	40a2      	lsls	r2, r4
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80059cc:	fa05 f404 	lsl.w	r4, r5, r4
 80059d0:	ea21 0104 	bic.w	r1, r1, r4
 80059d4:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80059d6:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 80059d8:	ea21 0100 	bic.w	r1, r1, r0
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80059dc:	2400      	movs	r4, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80059de:	430a      	orrs	r2, r1
  hdac->State = HAL_DAC_STATE_READY;
 80059e0:	2101      	movs	r1, #1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80059e2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Return function status */
  return status;
 80059e4:	4620      	mov	r0, r4
  hdac->State = HAL_DAC_STATE_READY;
 80059e6:	7131      	strb	r1, [r6, #4]
  __HAL_UNLOCK(hdac);
 80059e8:	7174      	strb	r4, [r6, #5]
}
 80059ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 80059ee:	f7fe ff75 	bl	80048dc <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80059f2:	6833      	ldr	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80059f4:	4605      	mov	r5, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80059f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    if (Channel == DAC_CHANNEL_1)
 80059f8:	b154      	cbz	r4, 8005a10 <HAL_DAC_ConfigChannel+0x148>
 80059fa:	e018      	b.n	8005a2e <HAL_DAC_ConfigChannel+0x166>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80059fc:	f7fe ff6e 	bl	80048dc <HAL_GetTick>
 8005a00:	1b40      	subs	r0, r0, r5
 8005a02:	2801      	cmp	r0, #1
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005a04:	6833      	ldr	r3, [r6, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005a06:	d902      	bls.n	8005a0e <HAL_DAC_ConfigChannel+0x146>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005a08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a0a:	0411      	lsls	r1, r2, #16
 8005a0c:	d448      	bmi.n	8005aa0 <HAL_DAC_ConfigChannel+0x1d8>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005a0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a10:	0412      	lsls	r2, r2, #16
 8005a12:	d4f3      	bmi.n	80059fc <HAL_DAC_ConfigChannel+0x134>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a16:	641a      	str	r2, [r3, #64]	@ 0x40
 8005a18:	e00d      	b.n	8005a36 <HAL_DAC_ConfigChannel+0x16e>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005a1a:	f7fe ff5f 	bl	80048dc <HAL_GetTick>
 8005a1e:	1b40      	subs	r0, r0, r5
 8005a20:	2801      	cmp	r0, #1
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005a22:	6833      	ldr	r3, [r6, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005a24:	d902      	bls.n	8005a2c <HAL_DAC_ConfigChannel+0x164>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005a26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a28:	2a00      	cmp	r2, #0
 8005a2a:	db39      	blt.n	8005aa0 <HAL_DAC_ConfigChannel+0x1d8>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005a2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a2e:	2a00      	cmp	r2, #0
 8005a30:	dbf3      	blt.n	8005a1a <HAL_DAC_ConfigChannel+0x152>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a34:	645a      	str	r2, [r3, #68]	@ 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005a36:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a3a:	f004 0410 	and.w	r4, r4, #16
 8005a3e:	f240 30ff 	movw	r0, #1023	@ 0x3ff
 8005a42:	40a0      	lsls	r0, r4
 8005a44:	40a1      	lsls	r1, r4
 8005a46:	ea22 0200 	bic.w	r2, r2, r0
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	649a      	str	r2, [r3, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005a4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a52:	20ff      	movs	r0, #255	@ 0xff
 8005a54:	40a0      	lsls	r0, r4
 8005a56:	40a1      	lsls	r1, r4
 8005a58:	ea22 0200 	bic.w	r2, r2, r0
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005a60:	68b9      	ldr	r1, [r7, #8]
 8005a62:	e74b      	b.n	80058fc <HAL_DAC_ConfigChannel+0x34>
    connectOnChip = 0x00000000UL;
 8005a64:	f04f 0c00 	mov.w	ip, #0
 8005a68:	e765      	b.n	8005936 <HAL_DAC_ConfigChannel+0x6e>
    return HAL_ERROR;
 8005a6a:	2001      	movs	r0, #1
}
 8005a6c:	4770      	bx	lr
    return HAL_ERROR;
 8005a6e:	2001      	movs	r0, #1
}
 8005a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = DAC_MCR_MODE1_0;
 8005a74:	f04f 0c01 	mov.w	ip, #1
 8005a78:	e75d      	b.n	8005936 <HAL_DAC_ConfigChannel+0x6e>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005a7a:	f000 fff3 	bl	8006a64 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8005ab0 <HAL_DAC_ConfigChannel+0x1e8>)
 8005a80:	4298      	cmp	r0, r3
 8005a82:	d905      	bls.n	8005a90 <HAL_DAC_ConfigChannel+0x1c8>
  hdac->Instance->MCR = tmpreg1;
 8005a84:	6833      	ldr	r3, [r6, #0]
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005a86:	f448 4800 	orr.w	r8, r8, #32768	@ 0x8000
 8005a8a:	e77c      	b.n	8005986 <HAL_DAC_ConfigChannel+0xbe>
  __HAL_LOCK(hdac);
 8005a8c:	2002      	movs	r0, #2
 8005a8e:	e7ac      	b.n	80059ea <HAL_DAC_ConfigChannel+0x122>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005a90:	4a08      	ldr	r2, [pc, #32]	@ (8005ab4 <HAL_DAC_ConfigChannel+0x1ec>)
  hdac->Instance->MCR = tmpreg1;
 8005a92:	6833      	ldr	r3, [r6, #0]
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005a94:	4290      	cmp	r0, r2
 8005a96:	f67f af76 	bls.w	8005986 <HAL_DAC_ConfigChannel+0xbe>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005a9a:	f448 4880 	orr.w	r8, r8, #16384	@ 0x4000
 8005a9e:	e772      	b.n	8005986 <HAL_DAC_ConfigChannel+0xbe>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005aa0:	6933      	ldr	r3, [r6, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005aa2:	2203      	movs	r2, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005aa4:	f043 0308 	orr.w	r3, r3, #8
 8005aa8:	6133      	str	r3, [r6, #16]
            return HAL_TIMEOUT;
 8005aaa:	2003      	movs	r0, #3
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005aac:	7132      	strb	r2, [r6, #4]
            return HAL_TIMEOUT;
 8005aae:	e79c      	b.n	80059ea <HAL_DAC_ConfigChannel+0x122>
 8005ab0:	09896800 	.word	0x09896800
 8005ab4:	04c4b400 	.word	0x04c4b400

08005ab8 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	d076      	beq.n	8005baa <HAL_DMA_Init+0xf2>
{
 8005abc:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005abe:	4a3c      	ldr	r2, [pc, #240]	@ (8005bb0 <HAL_DMA_Init+0xf8>)
 8005ac0:	6804      	ldr	r4, [r0, #0]
 8005ac2:	4294      	cmp	r4, r2
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	d95c      	bls.n	8005b82 <HAL_DMA_Init+0xca>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005ac8:	493a      	ldr	r1, [pc, #232]	@ (8005bb4 <HAL_DMA_Init+0xfc>)
 8005aca:	4a3b      	ldr	r2, [pc, #236]	@ (8005bb8 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA2;
 8005acc:	483b      	ldr	r0, [pc, #236]	@ (8005bbc <HAL_DMA_Init+0x104>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005ace:	4421      	add	r1, r4
 8005ad0:	fba2 2101 	umull	r2, r1, r2, r1
 8005ad4:	0909      	lsrs	r1, r1, #4
 8005ad6:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ad8:	2202      	movs	r2, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005ada:	689d      	ldr	r5, [r3, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 8005adc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp |=  hdma->Init.Direction        |
 8005ae0:	68da      	ldr	r2, [r3, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005ae2:	4e35      	ldr	r6, [pc, #212]	@ (8005bb8 <HAL_DMA_Init+0x100>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005ae4:	4f36      	ldr	r7, [pc, #216]	@ (8005bc0 <HAL_DMA_Init+0x108>)
 8005ae6:	e9c3 0110 	strd	r0, r1, [r3, #64]	@ 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005aea:	6918      	ldr	r0, [r3, #16]
  tmp |=  hdma->Init.Direction        |
 8005aec:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005aee:	4302      	orrs	r2, r0
 8005af0:	6958      	ldr	r0, [r3, #20]
 8005af2:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005af4:	6998      	ldr	r0, [r3, #24]
 8005af6:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CCR;
 8005af8:	6820      	ldr	r0, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005afa:	f420 4cff 	bic.w	ip, r0, #32640	@ 0x7f80
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005afe:	69d8      	ldr	r0, [r3, #28]
 8005b00:	4302      	orrs	r2, r0
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005b02:	b2e0      	uxtb	r0, r4
 8005b04:	3808      	subs	r0, #8
 8005b06:	fba6 6000 	umull	r6, r0, r6, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b0a:	6a1e      	ldr	r6, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005b0c:	f02c 0c70 	bic.w	ip, ip, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b10:	4332      	orrs	r2, r6
  tmp |=  hdma->Init.Direction        |
 8005b12:	ea42 020c 	orr.w	r2, r2, ip
  hdma->Instance->CCR = tmp;
 8005b16:	6022      	str	r2, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005b18:	4e25      	ldr	r6, [pc, #148]	@ (8005bb0 <HAL_DMA_Init+0xf8>)
 8005b1a:	4a2a      	ldr	r2, [pc, #168]	@ (8005bc4 <HAL_DMA_Init+0x10c>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005b1c:	f3c0 1004 	ubfx	r0, r0, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005b20:	42b4      	cmp	r4, r6
 8005b22:	bf98      	it	ls
 8005b24:	463a      	movls	r2, r7
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005b26:	f206 4679 	addw	r6, r6, #1145	@ 0x479
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005b2a:	2401      	movs	r4, #1
 8005b2c:	fa04 f000 	lsl.w	r0, r4, r0
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005b30:	64de      	str	r6, [r3, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005b32:	f5b5 4f80 	cmp.w	r5, #16384	@ 0x4000
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005b36:	eb01 0602 	add.w	r6, r1, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005b3a:	6518      	str	r0, [r3, #80]	@ 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005b3c:	649e      	str	r6, [r3, #72]	@ 0x48
 8005b3e:	ea4f 0191 	mov.w	r1, r1, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005b42:	d027      	beq.n	8005b94 <HAL_DMA_Init+0xdc>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005b44:	685e      	ldr	r6, [r3, #4]
 8005b46:	b2f5      	uxtb	r5, r6
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005b48:	3e01      	subs	r6, #1
 8005b4a:	2e03      	cmp	r6, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005b4c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b50:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005b54:	d824      	bhi.n	8005ba0 <HAL_DMA_Init+0xe8>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b56:	4a1c      	ldr	r2, [pc, #112]	@ (8005bc8 <HAL_DMA_Init+0x110>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b58:	481c      	ldr	r0, [pc, #112]	@ (8005bcc <HAL_DMA_Init+0x114>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b5a:	442a      	add	r2, r5
 8005b5c:	0092      	lsls	r2, r2, #2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005b5e:	3d01      	subs	r5, #1
 8005b60:	40ac      	lsls	r4, r5
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005b62:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b64:	e9c3 2015 	strd	r2, r0, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005b68:	65dc      	str	r4, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005b6a:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b6c:	4a18      	ldr	r2, [pc, #96]	@ (8005bd0 <HAL_DMA_Init+0x118>)
 8005b6e:	6454      	str	r4, [r2, #68]	@ 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b70:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8005b72:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b74:	63d8      	str	r0, [r3, #60]	@ 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8005b76:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8005b7a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8005b7e:	bcf0      	pop	{r4, r5, r6, r7}
 8005b80:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005b82:	4914      	ldr	r1, [pc, #80]	@ (8005bd4 <HAL_DMA_Init+0x11c>)
 8005b84:	4a0c      	ldr	r2, [pc, #48]	@ (8005bb8 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA1;
 8005b86:	4814      	ldr	r0, [pc, #80]	@ (8005bd8 <HAL_DMA_Init+0x120>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005b88:	4421      	add	r1, r4
 8005b8a:	fba2 2101 	umull	r2, r1, r2, r1
 8005b8e:	0909      	lsrs	r1, r1, #4
 8005b90:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 8005b92:	e7a1      	b.n	8005ad8 <HAL_DMA_Init+0x20>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005b94:	2400      	movs	r4, #0
 8005b96:	605c      	str	r4, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005b98:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b9c:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    hdma->DMAmuxRequestGen = 0U;
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	e9c3 2215 	strd	r2, r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005ba6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ba8:	e7e2      	b.n	8005b70 <HAL_DMA_Init+0xb8>
    return HAL_ERROR;
 8005baa:	2001      	movs	r0, #1
}
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	40020407 	.word	0x40020407
 8005bb4:	bffdfbf8 	.word	0xbffdfbf8
 8005bb8:	cccccccd 	.word	0xcccccccd
 8005bbc:	40020400 	.word	0x40020400
 8005bc0:	40020800 	.word	0x40020800
 8005bc4:	40020820 	.word	0x40020820
 8005bc8:	1000823f 	.word	0x1000823f
 8005bcc:	40020940 	.word	0x40020940
 8005bd0:	40020900 	.word	0x40020900
 8005bd4:	bffdfff8 	.word	0xbffdfff8
 8005bd8:	40020000 	.word	0x40020000

08005bdc <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	f000 80d9 	beq.w	8005d94 <HAL_FDCAN_Init+0x1b8>
{
 8005be2:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005be4:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8005be8:	4604      	mov	r4, r0
 8005bea:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d071      	beq.n	8005cd6 <HAL_FDCAN_Init+0xfa>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005bf2:	6822      	ldr	r2, [r4, #0]
 8005bf4:	6993      	ldr	r3, [r2, #24]
 8005bf6:	f023 0310 	bic.w	r3, r3, #16
 8005bfa:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005bfc:	f7fe fe6e 	bl	80048dc <HAL_GetTick>
 8005c00:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005c02:	e004      	b.n	8005c0e <HAL_FDCAN_Init+0x32>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005c04:	f7fe fe6a 	bl	80048dc <HAL_GetTick>
 8005c08:	1b40      	subs	r0, r0, r5
 8005c0a:	280a      	cmp	r0, #10
 8005c0c:	d85a      	bhi.n	8005cc4 <HAL_FDCAN_Init+0xe8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	699a      	ldr	r2, [r3, #24]
 8005c12:	0711      	lsls	r1, r2, #28
 8005c14:	d4f6      	bmi.n	8005c04 <HAL_FDCAN_Init+0x28>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005c16:	699a      	ldr	r2, [r3, #24]
 8005c18:	f042 0201 	orr.w	r2, r2, #1
 8005c1c:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c1e:	f7fe fe5d 	bl	80048dc <HAL_GetTick>
 8005c22:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005c24:	e004      	b.n	8005c30 <HAL_FDCAN_Init+0x54>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005c26:	f7fe fe59 	bl	80048dc <HAL_GetTick>
 8005c2a:	1b40      	subs	r0, r0, r5
 8005c2c:	280a      	cmp	r0, #10
 8005c2e:	d849      	bhi.n	8005cc4 <HAL_FDCAN_Init+0xe8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005c30:	6823      	ldr	r3, [r4, #0]
 8005c32:	699a      	ldr	r2, [r3, #24]
 8005c34:	07d2      	lsls	r2, r2, #31
 8005c36:	d5f6      	bpl.n	8005c26 <HAL_FDCAN_Init+0x4a>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005c38:	699a      	ldr	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005c3a:	4959      	ldr	r1, [pc, #356]	@ (8005da0 <HAL_FDCAN_Init+0x1c4>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005c3c:	f042 0202 	orr.w	r2, r2, #2
  if (hfdcan->Instance == FDCAN1)
 8005c40:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005c42:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 8005c44:	f000 80a1 	beq.w	8005d8a <HAL_FDCAN_Init+0x1ae>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005c48:	7c22      	ldrb	r2, [r4, #16]
 8005c4a:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005c4c:	699a      	ldr	r2, [r3, #24]
 8005c4e:	bf0c      	ite	eq
 8005c50:	f022 0240 	biceq.w	r2, r2, #64	@ 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005c54:	f042 0240 	orrne.w	r2, r2, #64	@ 0x40
 8005c58:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005c5a:	7c62      	ldrb	r2, [r4, #17]
 8005c5c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005c5e:	699a      	ldr	r2, [r3, #24]
 8005c60:	bf0c      	ite	eq
 8005c62:	f442 4280 	orreq.w	r2, r2, #16384	@ 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005c66:	f422 4280 	bicne.w	r2, r2, #16384	@ 0x4000
 8005c6a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005c6c:	7ca2      	ldrb	r2, [r4, #18]
 8005c6e:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005c70:	699a      	ldr	r2, [r3, #24]
 8005c72:	bf0c      	ite	eq
 8005c74:	f422 5280 	biceq.w	r2, r2, #4096	@ 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005c78:	f442 5280 	orrne.w	r2, r2, #4096	@ 0x1000
 8005c7c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005c7e:	699a      	ldr	r2, [r3, #24]
 8005c80:	68a0      	ldr	r0, [r4, #8]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005c82:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005c84:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005c88:	4302      	orrs	r2, r0
 8005c8a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005c8c:	699a      	ldr	r2, [r3, #24]
 8005c8e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005c92:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005c94:	691a      	ldr	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005c96:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005c98:	f022 0210 	bic.w	r2, r2, #16
 8005c9c:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005c9e:	d01f      	beq.n	8005ce0 <HAL_FDCAN_Init+0x104>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005ca0:	b311      	cbz	r1, 8005ce8 <HAL_FDCAN_Init+0x10c>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005ca2:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005ca4:	699a      	ldr	r2, [r3, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005ca6:	d077      	beq.n	8005d98 <HAL_FDCAN_Init+0x1bc>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005ca8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005cac:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005cae:	691a      	ldr	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005cb0:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005cb2:	f042 0210 	orr.w	r2, r2, #16
 8005cb6:	611a      	str	r2, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005cb8:	d116      	bne.n	8005ce8 <HAL_FDCAN_Init+0x10c>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005cba:	699a      	ldr	r2, [r3, #24]
 8005cbc:	f042 0220 	orr.w	r2, r2, #32
 8005cc0:	619a      	str	r2, [r3, #24]
 8005cc2:	e011      	b.n	8005ce8 <HAL_FDCAN_Init+0x10c>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005cc4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005cc6:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005cc8:	f043 0301 	orr.w	r3, r3, #1
 8005ccc:	6623      	str	r3, [r4, #96]	@ 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005cce:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 8005cd2:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8005cd4:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8005cd6:	f880 205d 	strb.w	r2, [r0, #93]	@ 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8005cda:	f7fe fad1 	bl	8004280 <HAL_FDCAN_MspInit>
 8005cde:	e788      	b.n	8005bf2 <HAL_FDCAN_Init+0x16>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005ce0:	699a      	ldr	r2, [r3, #24]
 8005ce2:	f042 0204 	orr.w	r2, r2, #4
 8005ce6:	619a      	str	r2, [r3, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005ce8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005cec:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005cee:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005cf0:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005cf2:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005cf6:	6a21      	ldr	r1, [r4, #32]
 8005cf8:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005cfa:	430a      	orrs	r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005cfc:	6961      	ldr	r1, [r4, #20]
 8005cfe:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005d00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005d04:	f5b0 7f40 	cmp.w	r0, #768	@ 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005d08:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005d0a:	d10e      	bne.n	8005d2a <HAL_FDCAN_Init+0x14e>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005d0c:	e9d4 020b 	ldrd	r0, r2, [r4, #44]	@ 0x2c
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005d10:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005d12:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005d14:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005d16:	0112      	lsls	r2, r2, #4
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005d18:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005d1a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005d1e:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005d20:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005d22:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005d24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005d28:	60da      	str	r2, [r3, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005d2a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005d2e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005d30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005d32:	4302      	orrs	r2, r0
 8005d34:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005d38:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005d3c:	4819      	ldr	r0, [pc, #100]	@ (8005da4 <HAL_FDCAN_Init+0x1c8>)
 8005d3e:	6420      	str	r0, [r4, #64]	@ 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005d40:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8005d44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005d48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005d4c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005d50:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005d52:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005d56:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005d5a:	4913      	ldr	r1, [pc, #76]	@ (8005da8 <HAL_FDCAN_Init+0x1cc>)
 8005d5c:	6461      	str	r1, [r4, #68]	@ 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005d5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005d62:	4b12      	ldr	r3, [pc, #72]	@ (8005dac <HAL_FDCAN_Init+0x1d0>)
 8005d64:	4a12      	ldr	r2, [pc, #72]	@ (8005db0 <HAL_FDCAN_Init+0x1d4>)
 8005d66:	3140      	adds	r1, #64	@ 0x40
 8005d68:	e9c4 1312 	strd	r1, r3, [r4, #72]	@ 0x48
 8005d6c:	33f0      	adds	r3, #240	@ 0xf0
 8005d6e:	e9c4 2314 	strd	r2, r3, [r4, #80]	@ 0x50
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005d72:	2100      	movs	r1, #0
 8005d74:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8005d78:	f004 f944 	bl	800a004 <memset>
  hfdcan->LatestTxFifoQRequest = 0U;
 8005d7c:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005d7e:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005d80:	6620      	str	r0, [r4, #96]	@ 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005d82:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 8005d86:	65a0      	str	r0, [r4, #88]	@ 0x58
}
 8005d88:	bd38      	pop	{r3, r4, r5, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8005db4 <HAL_FDCAN_Init+0x1d8>)
 8005d8c:	6861      	ldr	r1, [r4, #4]
 8005d8e:	f8c2 1500 	str.w	r1, [r2, #1280]	@ 0x500
 8005d92:	e759      	b.n	8005c48 <HAL_FDCAN_Init+0x6c>
    return HAL_ERROR;
 8005d94:	2001      	movs	r0, #1
}
 8005d96:	4770      	bx	lr
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005d98:	f042 0220 	orr.w	r2, r2, #32
 8005d9c:	619a      	str	r2, [r3, #24]
 8005d9e:	e7a3      	b.n	8005ce8 <HAL_FDCAN_Init+0x10c>
 8005da0:	40006400 	.word	0x40006400
 8005da4:	4000a400 	.word	0x4000a400
 8005da8:	4000a470 	.word	0x4000a470
 8005dac:	4000a588 	.word	0x4000a588
 8005db0:	4000a660 	.word	0x4000a660
 8005db4:	40006000 	.word	0x40006000

08005db8 <HAL_FDCAN_TxEventFifoCallback>:
}
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop

08005dbc <HAL_FDCAN_RxFifo0Callback>:
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop

08005dc0 <HAL_FDCAN_RxFifo1Callback>:
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop

08005dc4 <HAL_FDCAN_TxFifoEmptyCallback>:
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop

08005dc8 <HAL_FDCAN_TxBufferCompleteCallback>:
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop

08005dcc <HAL_FDCAN_TxBufferAbortCallback>:
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop

08005dd0 <HAL_FDCAN_TimestampWraparoundCallback>:
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop

08005dd4 <HAL_FDCAN_TimeoutOccurredCallback>:
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop

08005dd8 <HAL_FDCAN_HighPriorityMessageCallback>:
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop

08005ddc <HAL_FDCAN_ErrorCallback>:
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop

08005de0 <HAL_FDCAN_ErrorStatusCallback>:
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop

08005de4 <HAL_FDCAN_IRQHandler>:
{
 8005de4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005de8:	6803      	ldr	r3, [r0, #0]
 8005dea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005dec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005dee:	ea02 0a01 	and.w	sl, r2, r1
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005df2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005df4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005df6:	ea02 0901 	and.w	r9, r2, r1
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005dfa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005dfc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005dfe:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005e00:	ea02 0801 	and.w	r8, r2, r1
  Errors &= hfdcan->Instance->IE;
 8005e04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005e06:	6d1f      	ldr	r7, [r3, #80]	@ 0x50
  Errors &= hfdcan->Instance->IE;
 8005e08:	4016      	ands	r6, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005e0a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  itsource = hfdcan->Instance->IE;
 8005e0c:	f8d3 b054 	ldr.w	fp, [r3, #84]	@ 0x54
  itflag = hfdcan->Instance->IR;
 8005e10:	6d1d      	ldr	r5, [r3, #80]	@ 0x50
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005e12:	4017      	ands	r7, r2
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005e14:	0669      	lsls	r1, r5, #25
{
 8005e16:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005e18:	f40a 5ae0 	and.w	sl, sl, #7168	@ 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005e1c:	f009 0907 	and.w	r9, r9, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005e20:	f008 0838 	and.w	r8, r8, #56	@ 0x38
  Errors &= hfdcan->Instance->IE;
 8005e24:	f406 0671 	and.w	r6, r6, #15794176	@ 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005e28:	f407 2760 	and.w	r7, r7, #917504	@ 0xe0000
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005e2c:	d502      	bpl.n	8005e34 <HAL_FDCAN_IRQHandler+0x50>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005e2e:	f01b 0f40 	tst.w	fp, #64	@ 0x40
 8005e32:	d172      	bne.n	8005f1a <HAL_FDCAN_IRQHandler+0x136>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005e34:	05ea      	lsls	r2, r5, #23
 8005e36:	d502      	bpl.n	8005e3e <HAL_FDCAN_IRQHandler+0x5a>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005e38:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 8005e3c:	d15d      	bne.n	8005efa <HAL_FDCAN_IRQHandler+0x116>
  if (TxEventFifoITs != 0U)
 8005e3e:	f1ba 0f00 	cmp.w	sl, #0
 8005e42:	d14a      	bne.n	8005eda <HAL_FDCAN_IRQHandler+0xf6>
  if (RxFifo0ITs != 0U)
 8005e44:	f1b9 0f00 	cmp.w	r9, #0
 8005e48:	d135      	bne.n	8005eb6 <HAL_FDCAN_IRQHandler+0xd2>
  if (RxFifo1ITs != 0U)
 8005e4a:	f1b8 0f00 	cmp.w	r8, #0
 8005e4e:	d13c      	bne.n	8005eca <HAL_FDCAN_IRQHandler+0xe6>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005e50:	05ab      	lsls	r3, r5, #22
 8005e52:	d502      	bpl.n	8005e5a <HAL_FDCAN_IRQHandler+0x76>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005e54:	f41b 7f00 	tst.w	fp, #512	@ 0x200
 8005e58:	d174      	bne.n	8005f44 <HAL_FDCAN_IRQHandler+0x160>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005e5a:	0628      	lsls	r0, r5, #24
 8005e5c:	d502      	bpl.n	8005e64 <HAL_FDCAN_IRQHandler+0x80>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8005e5e:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 8005e62:	d177      	bne.n	8005f54 <HAL_FDCAN_IRQHandler+0x170>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005e64:	04a9      	lsls	r1, r5, #18
 8005e66:	d502      	bpl.n	8005e6e <HAL_FDCAN_IRQHandler+0x8a>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005e68:	f41b 5f00 	tst.w	fp, #8192	@ 0x2000
 8005e6c:	d15a      	bne.n	8005f24 <HAL_FDCAN_IRQHandler+0x140>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005e6e:	042a      	lsls	r2, r5, #16
 8005e70:	d502      	bpl.n	8005e78 <HAL_FDCAN_IRQHandler+0x94>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005e72:	f41b 4f00 	tst.w	fp, #32768	@ 0x8000
 8005e76:	d15d      	bne.n	8005f34 <HAL_FDCAN_IRQHandler+0x150>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005e78:	046b      	lsls	r3, r5, #17
 8005e7a:	d50a      	bpl.n	8005e92 <HAL_FDCAN_IRQHandler+0xae>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005e7c:	f41b 4f80 	tst.w	fp, #16384	@ 0x4000
 8005e80:	d007      	beq.n	8005e92 <HAL_FDCAN_IRQHandler+0xae>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005e88:	651a      	str	r2, [r3, #80]	@ 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005e8a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005e8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e90:	6623      	str	r3, [r4, #96]	@ 0x60
  if (ErrorStatusITs != 0U)
 8005e92:	b94f      	cbnz	r7, 8005ea8 <HAL_FDCAN_IRQHandler+0xc4>
  if (Errors != 0U)
 8005e94:	b126      	cbz	r6, 8005ea0 <HAL_FDCAN_IRQHandler+0xbc>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	651e      	str	r6, [r3, #80]	@ 0x50
    hfdcan->ErrorCode |= Errors;
 8005e9a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005e9c:	4333      	orrs	r3, r6
 8005e9e:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005ea0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005ea2:	bb2b      	cbnz	r3, 8005ef0 <HAL_FDCAN_IRQHandler+0x10c>
}
 8005ea4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005ea8:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005eaa:	4639      	mov	r1, r7
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005eac:	651f      	str	r7, [r3, #80]	@ 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005eae:	4620      	mov	r0, r4
 8005eb0:	f7ff ff96 	bl	8005de0 <HAL_FDCAN_ErrorStatusCallback>
 8005eb4:	e7ee      	b.n	8005e94 <HAL_FDCAN_IRQHandler+0xb0>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005eb6:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005eb8:	4649      	mov	r1, r9
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005eba:	f8c3 9050 	str.w	r9, [r3, #80]	@ 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	f7ff ff7c 	bl	8005dbc <HAL_FDCAN_RxFifo0Callback>
  if (RxFifo1ITs != 0U)
 8005ec4:	f1b8 0f00 	cmp.w	r8, #0
 8005ec8:	d0c2      	beq.n	8005e50 <HAL_FDCAN_IRQHandler+0x6c>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005eca:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005ecc:	4641      	mov	r1, r8
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005ece:	f8c3 8050 	str.w	r8, [r3, #80]	@ 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	f7ff ff74 	bl	8005dc0 <HAL_FDCAN_RxFifo1Callback>
 8005ed8:	e7ba      	b.n	8005e50 <HAL_FDCAN_IRQHandler+0x6c>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005eda:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005edc:	4651      	mov	r1, sl
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005ede:	f8c3 a050 	str.w	sl, [r3, #80]	@ 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f7ff ff68 	bl	8005db8 <HAL_FDCAN_TxEventFifoCallback>
  if (RxFifo0ITs != 0U)
 8005ee8:	f1b9 0f00 	cmp.w	r9, #0
 8005eec:	d0ad      	beq.n	8005e4a <HAL_FDCAN_IRQHandler+0x66>
 8005eee:	e7e2      	b.n	8005eb6 <HAL_FDCAN_IRQHandler+0xd2>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	f7ff ff73 	bl	8005ddc <HAL_FDCAN_ErrorCallback>
}
 8005ef6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	f8d3 10d8 	ldr.w	r1, [r3, #216]	@ 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005f00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005f04:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005f08:	6518      	str	r0, [r3, #80]	@ 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005f0a:	4011      	ands	r1, r2
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	f7ff ff5d 	bl	8005dcc <HAL_FDCAN_TxBufferAbortCallback>
  if (TxEventFifoITs != 0U)
 8005f12:	f1ba 0f00 	cmp.w	sl, #0
 8005f16:	d095      	beq.n	8005e44 <HAL_FDCAN_IRQHandler+0x60>
 8005f18:	e7df      	b.n	8005eda <HAL_FDCAN_IRQHandler+0xf6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005f1a:	2240      	movs	r2, #64	@ 0x40
 8005f1c:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005f1e:	f7ff ff5b 	bl	8005dd8 <HAL_FDCAN_HighPriorityMessageCallback>
 8005f22:	e787      	b.n	8005e34 <HAL_FDCAN_IRQHandler+0x50>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005f24:	6823      	ldr	r3, [r4, #0]
 8005f26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005f2a:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	f7ff ff4f 	bl	8005dd0 <HAL_FDCAN_TimestampWraparoundCallback>
 8005f32:	e79c      	b.n	8005e6e <HAL_FDCAN_IRQHandler+0x8a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005f34:	6823      	ldr	r3, [r4, #0]
 8005f36:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005f3a:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f7ff ff49 	bl	8005dd4 <HAL_FDCAN_TimeoutOccurredCallback>
 8005f42:	e799      	b.n	8005e78 <HAL_FDCAN_IRQHandler+0x94>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005f44:	6823      	ldr	r3, [r4, #0]
 8005f46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f4a:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	f7ff ff39 	bl	8005dc4 <HAL_FDCAN_TxFifoEmptyCallback>
 8005f52:	e782      	b.n	8005e5a <HAL_FDCAN_IRQHandler+0x76>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005f54:	6823      	ldr	r3, [r4, #0]
 8005f56:	f8d3 10d4 	ldr.w	r1, [r3, #212]	@ 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005f5a:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005f5e:	2080      	movs	r0, #128	@ 0x80
 8005f60:	6518      	str	r0, [r3, #80]	@ 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005f62:	4011      	ands	r1, r2
 8005f64:	4620      	mov	r0, r4
 8005f66:	f7ff ff2f 	bl	8005dc8 <HAL_FDCAN_TxBufferCompleteCallback>
 8005f6a:	e77b      	b.n	8005e64 <HAL_FDCAN_IRQHandler+0x80>

08005f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005f70:	680c      	ldr	r4, [r1, #0]
{
 8005f72:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005f74:	2c00      	cmp	r4, #0
 8005f76:	f000 8089 	beq.w	800608c <HAL_GPIO_Init+0x120>
  uint32_t position = 0x00U;
 8005f7a:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005f7c:	f04f 0b01 	mov.w	fp, #1
 8005f80:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 8005f84:	ea1e 0a04 	ands.w	sl, lr, r4
 8005f88:	d07b      	beq.n	8006082 <HAL_GPIO_Init+0x116>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005f8a:	684d      	ldr	r5, [r1, #4]
 8005f8c:	f005 0203 	and.w	r2, r5, #3
 8005f90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005f94:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005f96:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005f9a:	fa06 f70c 	lsl.w	r7, r6, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005f9e:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005fa2:	ea6f 0707 	mvn.w	r7, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005fa6:	d974      	bls.n	8006092 <HAL_GPIO_Init+0x126>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005fa8:	2a03      	cmp	r2, #3
 8005faa:	f040 80b0 	bne.w	800610e <HAL_GPIO_Init+0x1a2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fae:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 8005fb2:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005fb6:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fba:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005fbc:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8005fc0:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005fc2:	d05e      	beq.n	8006082 <HAL_GPIO_Init+0x116>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fc4:	4f66      	ldr	r7, [pc, #408]	@ (8006160 <HAL_GPIO_Init+0x1f4>)
 8005fc6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005fc8:	f042 0201 	orr.w	r2, r2, #1
 8005fcc:	663a      	str	r2, [r7, #96]	@ 0x60
 8005fce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005fd0:	f002 0201 	and.w	r2, r2, #1
 8005fd4:	9203      	str	r2, [sp, #12]
 8005fd6:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005fd8:	f023 0203 	bic.w	r2, r3, #3
 8005fdc:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8005fe0:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005fe4:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8005fe8:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005fea:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005fee:	260f      	movs	r6, #15
 8005ff0:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ff4:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ff8:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ffc:	d01d      	beq.n	800603a <HAL_GPIO_Init+0xce>
 8005ffe:	4e59      	ldr	r6, [pc, #356]	@ (8006164 <HAL_GPIO_Init+0x1f8>)
 8006000:	42b0      	cmp	r0, r6
 8006002:	f000 8097 	beq.w	8006134 <HAL_GPIO_Init+0x1c8>
 8006006:	4e58      	ldr	r6, [pc, #352]	@ (8006168 <HAL_GPIO_Init+0x1fc>)
 8006008:	42b0      	cmp	r0, r6
 800600a:	f000 809a 	beq.w	8006142 <HAL_GPIO_Init+0x1d6>
 800600e:	f8df e160 	ldr.w	lr, [pc, #352]	@ 8006170 <HAL_GPIO_Init+0x204>
 8006012:	4570      	cmp	r0, lr
 8006014:	f000 8087 	beq.w	8006126 <HAL_GPIO_Init+0x1ba>
 8006018:	f8df e158 	ldr.w	lr, [pc, #344]	@ 8006174 <HAL_GPIO_Init+0x208>
 800601c:	4570      	cmp	r0, lr
 800601e:	f000 8097 	beq.w	8006150 <HAL_GPIO_Init+0x1e4>
 8006022:	f8df e154 	ldr.w	lr, [pc, #340]	@ 8006178 <HAL_GPIO_Init+0x20c>
 8006026:	4570      	cmp	r0, lr
 8006028:	bf0c      	ite	eq
 800602a:	f04f 0e05 	moveq.w	lr, #5
 800602e:	f04f 0e06 	movne.w	lr, #6
 8006032:	fa0e fc0c 	lsl.w	ip, lr, ip
 8006036:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 800603a:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800603c:	4a4b      	ldr	r2, [pc, #300]	@ (800616c <HAL_GPIO_Init+0x200>)
 800603e:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006040:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 8006042:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8006046:	4e49      	ldr	r6, [pc, #292]	@ (800616c <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8006048:	bf54      	ite	pl
 800604a:	403a      	andpl	r2, r7
          temp |= iocurrent;
 800604c:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 8006050:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8006052:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006054:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8006056:	4e45      	ldr	r6, [pc, #276]	@ (800616c <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8006058:	bf54      	ite	pl
 800605a:	403a      	andpl	r2, r7
          temp |= iocurrent;
 800605c:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 8006060:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR1;
 8006062:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006064:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8006066:	4e41      	ldr	r6, [pc, #260]	@ (800616c <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8006068:	bf54      	ite	pl
 800606a:	403a      	andpl	r2, r7
          temp |= iocurrent;
 800606c:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 8006070:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006072:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006074:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8006076:	4d3d      	ldr	r5, [pc, #244]	@ (800616c <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8006078:	bf54      	ite	pl
 800607a:	403a      	andpl	r2, r7
          temp |= iocurrent;
 800607c:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 8006080:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 8006082:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006084:	fa34 f203 	lsrs.w	r2, r4, r3
 8006088:	f47f af7a 	bne.w	8005f80 <HAL_GPIO_Init+0x14>
  }
}
 800608c:	b005      	add	sp, #20
 800608e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8006092:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006096:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006098:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 800609c:	fa06 f80c 	lsl.w	r8, r6, ip
 80060a0:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 80060a4:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 80060a8:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060ac:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060ae:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060b2:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 80060b6:	fa0e fe03 	lsl.w	lr, lr, r3
 80060ba:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 80060be:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 80060c2:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060c6:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060ca:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060ce:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060d2:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 80060d4:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060d8:	f47f af69 	bne.w	8005fae <HAL_GPIO_Init+0x42>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80060dc:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 80060de:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80060e2:	f003 0e07 	and.w	lr, r3, #7
 80060e6:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80060ea:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80060ee:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3U];
 80060f2:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80060f6:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80060f8:	260f      	movs	r6, #15
 80060fa:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80060fe:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006100:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006104:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 8006108:	f8c8 e020 	str.w	lr, [r8, #32]
 800610c:	e74f      	b.n	8005fae <HAL_GPIO_Init+0x42>
        temp = GPIOx->PUPDR;
 800610e:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006112:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006114:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006118:	fa06 fe0c 	lsl.w	lr, r6, ip
 800611c:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 8006120:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006124:	e743      	b.n	8005fae <HAL_GPIO_Init+0x42>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006126:	f04f 0e03 	mov.w	lr, #3
 800612a:	fa0e fc0c 	lsl.w	ip, lr, ip
 800612e:	ea47 070c 	orr.w	r7, r7, ip
 8006132:	e782      	b.n	800603a <HAL_GPIO_Init+0xce>
 8006134:	f04f 0e01 	mov.w	lr, #1
 8006138:	fa0e fc0c 	lsl.w	ip, lr, ip
 800613c:	ea47 070c 	orr.w	r7, r7, ip
 8006140:	e77b      	b.n	800603a <HAL_GPIO_Init+0xce>
 8006142:	f04f 0e02 	mov.w	lr, #2
 8006146:	fa0e fc0c 	lsl.w	ip, lr, ip
 800614a:	ea47 070c 	orr.w	r7, r7, ip
 800614e:	e774      	b.n	800603a <HAL_GPIO_Init+0xce>
 8006150:	f04f 0e04 	mov.w	lr, #4
 8006154:	fa0e fc0c 	lsl.w	ip, lr, ip
 8006158:	ea47 070c 	orr.w	r7, r7, ip
 800615c:	e76d      	b.n	800603a <HAL_GPIO_Init+0xce>
 800615e:	bf00      	nop
 8006160:	40021000 	.word	0x40021000
 8006164:	48000400 	.word	0x48000400
 8006168:	48000800 	.word	0x48000800
 800616c:	40010400 	.word	0x40010400
 8006170:	48000c00 	.word	0x48000c00
 8006174:	48001000 	.word	0x48001000
 8006178:	48001400 	.word	0x48001400

0800617c <HAL_OPAMP_Init>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 800617c:	2800      	cmp	r0, #0
 800617e:	d06f      	beq.n	8006260 <HAL_OPAMP_Init+0xe4>
{
 8006180:	b530      	push	{r4, r5, lr}
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006182:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8006186:	2b05      	cmp	r3, #5
{
 8006188:	b083      	sub	sp, #12
 800618a:	4604      	mov	r4, r0
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800618c:	d056      	beq.n	800623c <HAL_OPAMP_Init+0xc0>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800618e:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8006192:	2b02      	cmp	r3, #2
 8006194:	d052      	beq.n	800623c <HAL_OPAMP_Init+0xc0>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006196:	4b33      	ldr	r3, [pc, #204]	@ (8006264 <HAL_OPAMP_Init+0xe8>)
 8006198:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800619a:	f042 0201 	orr.w	r2, r2, #1
 800619e:	661a      	str	r2, [r3, #96]	@ 0x60
 80061a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	9301      	str	r3, [sp, #4]
 80061a8:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80061aa:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 80061ae:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80061b2:	b90b      	cbnz	r3, 80061b8 <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80061b4:	f880 2039 	strb.w	r2, [r0, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80061b8:	4620      	mov	r0, r4
 80061ba:	f7fe f8d5 	bl	8004368 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80061be:	68a3      	ldr	r3, [r4, #8]
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80061c0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80061c2:	f023 0220 	bic.w	r2, r3, #32
 80061c6:	2a40      	cmp	r2, #64	@ 0x40
      MODIFY_REG(hopamp->Instance->CSR,
 80061c8:	6822      	ldr	r2, [r4, #0]
 80061ca:	6811      	ldr	r1, [r2, #0]
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80061cc:	d039      	beq.n	8006242 <HAL_OPAMP_Init+0xc6>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80061ce:	6865      	ldr	r5, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 80061d0:	f021 0110 	bic.w	r1, r1, #16
 80061d4:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 80061d6:	68e0      	ldr	r0, [r4, #12]
      MODIFY_REG(hopamp->Instance->CSR,
 80061d8:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 80061da:	432b      	orrs	r3, r5
 80061dc:	4303      	orrs	r3, r0
 80061de:	6920      	ldr	r0, [r4, #16]
 80061e0:	6811      	ldr	r1, [r2, #0]
 80061e2:	4303      	orrs	r3, r0
 80061e4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80061e6:	4303      	orrs	r3, r0
 80061e8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80061ea:	4303      	orrs	r3, r0
 80061ec:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80061ee:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 80061f2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80061f4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80061f8:	481b      	ldr	r0, [pc, #108]	@ (8006268 <HAL_OPAMP_Init+0xec>)
 80061fa:	4008      	ands	r0, r1
 80061fc:	7d21      	ldrb	r1, [r4, #20]
 80061fe:	f1a1 0101 	sub.w	r1, r1, #1
 8006202:	fab1 f181 	clz	r1, r1
 8006206:	4303      	orrs	r3, r0
 8006208:	0949      	lsrs	r1, r1, #5
 800620a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800620e:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8006210:	6993      	ldr	r3, [r2, #24]
 8006212:	2b00      	cmp	r3, #0
 8006214:	db09      	blt.n	800622a <HAL_OPAMP_Init+0xae>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8006216:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 800621a:	6991      	ldr	r1, [r2, #24]
 800621c:	4303      	orrs	r3, r0
 800621e:	6a20      	ldr	r0, [r4, #32]
 8006220:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8006224:	4303      	orrs	r3, r0
 8006226:	430b      	orrs	r3, r1
 8006228:	6193      	str	r3, [r2, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800622a:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 800622e:	b913      	cbnz	r3, 8006236 <HAL_OPAMP_Init+0xba>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8006230:	2301      	movs	r3, #1
 8006232:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8006236:	2000      	movs	r0, #0
  }
}
 8006238:	b003      	add	sp, #12
 800623a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800623c:	2001      	movs	r0, #1
}
 800623e:	b003      	add	sp, #12
 8006240:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hopamp->Instance->CSR,
 8006242:	f021 0110 	bic.w	r1, r1, #16
 8006246:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 8006248:	6860      	ldr	r0, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 800624a:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 800624c:	4303      	orrs	r3, r0
 800624e:	6920      	ldr	r0, [r4, #16]
 8006250:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006252:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8006254:	4303      	orrs	r3, r0
 8006256:	430b      	orrs	r3, r1
 8006258:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800625a:	6811      	ldr	r1, [r2, #0]
 800625c:	432b      	orrs	r3, r5
 800625e:	e7c6      	b.n	80061ee <HAL_OPAMP_Init+0x72>
    return HAL_ERROR;
 8006260:	2001      	movs	r0, #1
}
 8006262:	4770      	bx	lr
 8006264:	40021000 	.word	0x40021000
 8006268:	e0003e11 	.word	0xe0003e11

0800626c <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800626c:	4a35      	ldr	r2, [pc, #212]	@ (8006344 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 800626e:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006270:	b960      	cbnz	r0, 800628c <HAL_PWREx_ControlVoltageScaling+0x20>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006272:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006276:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800627a:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800627e:	d01b      	beq.n	80062b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006284:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006288:	2000      	movs	r0, #0
}
 800628a:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800628c:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8006290:	d006      	beq.n	80062a0 <HAL_PWREx_ControlVoltageScaling+0x34>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006292:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006296:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800629a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800629c:	2000      	movs	r0, #0
}
 800629e:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80062a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80062a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80062a8:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80062ac:	d029      	beq.n	8006302 <HAL_PWREx_ControlVoltageScaling+0x96>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80062ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062b2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80062b6:	e7f1      	b.n	800629c <HAL_PWREx_ControlVoltageScaling+0x30>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80062b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80062c0:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80062c2:	4821      	ldr	r0, [pc, #132]	@ (8006348 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80062c4:	4921      	ldr	r1, [pc, #132]	@ (800634c <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80062c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80062ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80062ce:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80062d0:	6803      	ldr	r3, [r0, #0]
 80062d2:	2032      	movs	r0, #50	@ 0x32
 80062d4:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062d8:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80062da:	fba1 1303 	umull	r1, r3, r1, r3
 80062de:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062e0:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80062e2:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062e6:	d506      	bpl.n	80062f6 <HAL_PWREx_ControlVoltageScaling+0x8a>
 80062e8:	e000      	b.n	80062ec <HAL_PWREx_ControlVoltageScaling+0x80>
 80062ea:	b123      	cbz	r3, 80062f6 <HAL_PWREx_ControlVoltageScaling+0x8a>
 80062ec:	6951      	ldr	r1, [r2, #20]
 80062ee:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80062f0:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062f4:	d4f9      	bmi.n	80062ea <HAL_PWREx_ControlVoltageScaling+0x7e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80062f6:	4b13      	ldr	r3, [pc, #76]	@ (8006344 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	055b      	lsls	r3, r3, #21
 80062fc:	d5ce      	bpl.n	800629c <HAL_PWREx_ControlVoltageScaling+0x30>
        return HAL_TIMEOUT;
 80062fe:	2003      	movs	r0, #3
 8006300:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006302:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006306:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800630a:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800630c:	480e      	ldr	r0, [pc, #56]	@ (8006348 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800630e:	490f      	ldr	r1, [pc, #60]	@ (800634c <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006310:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006314:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006318:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800631a:	6803      	ldr	r3, [r0, #0]
 800631c:	2032      	movs	r0, #50	@ 0x32
 800631e:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006322:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006324:	fba1 1303 	umull	r1, r3, r1, r3
 8006328:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800632a:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800632c:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006330:	d5e1      	bpl.n	80062f6 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8006332:	e001      	b.n	8006338 <HAL_PWREx_ControlVoltageScaling+0xcc>
 8006334:	2b00      	cmp	r3, #0
 8006336:	d0de      	beq.n	80062f6 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8006338:	6951      	ldr	r1, [r2, #20]
 800633a:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 800633c:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006340:	d5d9      	bpl.n	80062f6 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8006342:	e7f7      	b.n	8006334 <HAL_PWREx_ControlVoltageScaling+0xc8>
 8006344:	40007000 	.word	0x40007000
 8006348:	200004ec 	.word	0x200004ec
 800634c:	431bde83 	.word	0x431bde83

08006350 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006350:	4a02      	ldr	r2, [pc, #8]	@ (800635c <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8006352:	6893      	ldr	r3, [r2, #8]
 8006354:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006358:	6093      	str	r3, [r2, #8]
}
 800635a:	4770      	bx	lr
 800635c:	40007000 	.word	0x40007000

08006360 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006360:	2800      	cmp	r0, #0
 8006362:	f000 81bd 	beq.w	80066e0 <HAL_RCC_OscConfig+0x380>
{
 8006366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800636a:	6803      	ldr	r3, [r0, #0]
 800636c:	07d9      	lsls	r1, r3, #31
{
 800636e:	b082      	sub	sp, #8
 8006370:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006372:	d512      	bpl.n	800639a <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006374:	49a6      	ldr	r1, [pc, #664]	@ (8006610 <HAL_RCC_OscConfig+0x2b0>)
 8006376:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006378:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800637a:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800637e:	2a0c      	cmp	r2, #12
 8006380:	f000 80d0 	beq.w	8006524 <HAL_RCC_OscConfig+0x1c4>
 8006384:	2a08      	cmp	r2, #8
 8006386:	f040 80d2 	bne.w	800652e <HAL_RCC_OscConfig+0x1ce>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800638a:	4aa1      	ldr	r2, [pc, #644]	@ (8006610 <HAL_RCC_OscConfig+0x2b0>)
 800638c:	6812      	ldr	r2, [r2, #0]
 800638e:	0392      	lsls	r2, r2, #14
 8006390:	d503      	bpl.n	800639a <HAL_RCC_OscConfig+0x3a>
 8006392:	6862      	ldr	r2, [r4, #4]
 8006394:	2a00      	cmp	r2, #0
 8006396:	f000 8137 	beq.w	8006608 <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800639a:	079a      	lsls	r2, r3, #30
 800639c:	d522      	bpl.n	80063e4 <HAL_RCC_OscConfig+0x84>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800639e:	4a9c      	ldr	r2, [pc, #624]	@ (8006610 <HAL_RCC_OscConfig+0x2b0>)
 80063a0:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063a2:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063a4:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80063a8:	2b0c      	cmp	r3, #12
 80063aa:	f000 80f8 	beq.w	800659e <HAL_RCC_OscConfig+0x23e>
 80063ae:	2b04      	cmp	r3, #4
 80063b0:	f040 80fa 	bne.w	80065a8 <HAL_RCC_OscConfig+0x248>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063b4:	4b96      	ldr	r3, [pc, #600]	@ (8006610 <HAL_RCC_OscConfig+0x2b0>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	055b      	lsls	r3, r3, #21
 80063ba:	d503      	bpl.n	80063c4 <HAL_RCC_OscConfig+0x64>
 80063bc:	68e3      	ldr	r3, [r4, #12]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f000 8122 	beq.w	8006608 <HAL_RCC_OscConfig+0x2a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063c4:	4a92      	ldr	r2, [pc, #584]	@ (8006610 <HAL_RCC_OscConfig+0x2b0>)
 80063c6:	6920      	ldr	r0, [r4, #16]
 80063c8:	6853      	ldr	r3, [r2, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80063ca:	4992      	ldr	r1, [pc, #584]	@ (8006614 <HAL_RCC_OscConfig+0x2b4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063cc:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80063d0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80063d4:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80063d6:	6808      	ldr	r0, [r1, #0]
 80063d8:	f7fe fa36 	bl	8004848 <HAL_InitTick>
 80063dc:	2800      	cmp	r0, #0
 80063de:	f040 8113 	bne.w	8006608 <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	071a      	lsls	r2, r3, #28
 80063e6:	d519      	bpl.n	800641c <HAL_RCC_OscConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063e8:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063ea:	4d89      	ldr	r5, [pc, #548]	@ (8006610 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 80c2 	beq.w	8006576 <HAL_RCC_OscConfig+0x216>
      __HAL_RCC_LSI_ENABLE();
 80063f2:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80063f6:	f043 0301 	orr.w	r3, r3, #1
 80063fa:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063fe:	f7fe fa6d 	bl	80048dc <HAL_GetTick>
 8006402:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006404:	e005      	b.n	8006412 <HAL_RCC_OscConfig+0xb2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006406:	f7fe fa69 	bl	80048dc <HAL_GetTick>
 800640a:	1b80      	subs	r0, r0, r6
 800640c:	2802      	cmp	r0, #2
 800640e:	f200 8117 	bhi.w	8006640 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006412:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8006416:	079b      	lsls	r3, r3, #30
 8006418:	d5f5      	bpl.n	8006406 <HAL_RCC_OscConfig+0xa6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	075d      	lsls	r5, r3, #29
 800641e:	d541      	bpl.n	80064a4 <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006420:	4b7b      	ldr	r3, [pc, #492]	@ (8006610 <HAL_RCC_OscConfig+0x2b0>)
 8006422:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006424:	00d0      	lsls	r0, r2, #3
 8006426:	f100 810f 	bmi.w	8006648 <HAL_RCC_OscConfig+0x2e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800642a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800642c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006430:	659a      	str	r2, [r3, #88]	@ 0x58
 8006432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006434:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006438:	9301      	str	r3, [sp, #4]
 800643a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800643c:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800643e:	4e76      	ldr	r6, [pc, #472]	@ (8006618 <HAL_RCC_OscConfig+0x2b8>)
 8006440:	6833      	ldr	r3, [r6, #0]
 8006442:	05d9      	lsls	r1, r3, #23
 8006444:	f140 812e 	bpl.w	80066a4 <HAL_RCC_OscConfig+0x344>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006448:	68a3      	ldr	r3, [r4, #8]
 800644a:	2b01      	cmp	r3, #1
 800644c:	f000 80fe 	beq.w	800664c <HAL_RCC_OscConfig+0x2ec>
 8006450:	2b05      	cmp	r3, #5
 8006452:	f000 8184 	beq.w	800675e <HAL_RCC_OscConfig+0x3fe>
 8006456:	4e6e      	ldr	r6, [pc, #440]	@ (8006610 <HAL_RCC_OscConfig+0x2b0>)
 8006458:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 800645c:	f022 0201 	bic.w	r2, r2, #1
 8006460:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
 8006464:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8006468:	f022 0204 	bic.w	r2, r2, #4
 800646c:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006470:	2b00      	cmp	r3, #0
 8006472:	f040 80f2 	bne.w	800665a <HAL_RCC_OscConfig+0x2fa>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006476:	f7fe fa31 	bl	80048dc <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800647a:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800647e:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006480:	e005      	b.n	800648e <HAL_RCC_OscConfig+0x12e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006482:	f7fe fa2b 	bl	80048dc <HAL_GetTick>
 8006486:	1bc0      	subs	r0, r0, r7
 8006488:	4540      	cmp	r0, r8
 800648a:	f200 80d9 	bhi.w	8006640 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800648e:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 8006492:	0799      	lsls	r1, r3, #30
 8006494:	d4f5      	bmi.n	8006482 <HAL_RCC_OscConfig+0x122>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006496:	b125      	cbz	r5, 80064a2 <HAL_RCC_OscConfig+0x142>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006498:	4a5d      	ldr	r2, [pc, #372]	@ (8006610 <HAL_RCC_OscConfig+0x2b0>)
 800649a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800649c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064a0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80064a2:	6823      	ldr	r3, [r4, #0]
 80064a4:	069a      	lsls	r2, r3, #26
 80064a6:	d518      	bpl.n	80064da <HAL_RCC_OscConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80064a8:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80064aa:	4d59      	ldr	r5, [pc, #356]	@ (8006610 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 80e5 	beq.w	800667c <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_HSI48_ENABLE();
 80064b2:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 80064b6:	f043 0301 	orr.w	r3, r3, #1
 80064ba:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064be:	f7fe fa0d 	bl	80048dc <HAL_GetTick>
 80064c2:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80064c4:	e005      	b.n	80064d2 <HAL_RCC_OscConfig+0x172>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064c6:	f7fe fa09 	bl	80048dc <HAL_GetTick>
 80064ca:	1b80      	subs	r0, r0, r6
 80064cc:	2802      	cmp	r0, #2
 80064ce:	f200 80b7 	bhi.w	8006640 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80064d2:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 80064d6:	079b      	lsls	r3, r3, #30
 80064d8:	d5f5      	bpl.n	80064c6 <HAL_RCC_OscConfig+0x166>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80064da:	69e3      	ldr	r3, [r4, #28]
 80064dc:	b1f3      	cbz	r3, 800651c <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80064de:	4d4c      	ldr	r5, [pc, #304]	@ (8006610 <HAL_RCC_OscConfig+0x2b0>)
 80064e0:	68aa      	ldr	r2, [r5, #8]
 80064e2:	f002 020c 	and.w	r2, r2, #12
 80064e6:	2a0c      	cmp	r2, #12
 80064e8:	f000 8147 	beq.w	800677a <HAL_RCC_OscConfig+0x41a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80064ec:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064ee:	682b      	ldr	r3, [r5, #0]
 80064f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064f4:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80064f6:	f000 80f5 	beq.w	80066e4 <HAL_RCC_OscConfig+0x384>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064fa:	f7fe f9ef 	bl	80048dc <HAL_GetTick>
 80064fe:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006500:	e005      	b.n	800650e <HAL_RCC_OscConfig+0x1ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006502:	f7fe f9eb 	bl	80048dc <HAL_GetTick>
 8006506:	1b00      	subs	r0, r0, r4
 8006508:	2802      	cmp	r0, #2
 800650a:	f200 8099 	bhi.w	8006640 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800650e:	682b      	ldr	r3, [r5, #0]
 8006510:	019b      	lsls	r3, r3, #6
 8006512:	d4f6      	bmi.n	8006502 <HAL_RCC_OscConfig+0x1a2>
            return HAL_TIMEOUT;
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006514:	68ea      	ldr	r2, [r5, #12]
 8006516:	4b41      	ldr	r3, [pc, #260]	@ (800661c <HAL_RCC_OscConfig+0x2bc>)
 8006518:	4013      	ands	r3, r2
 800651a:	60eb      	str	r3, [r5, #12]
      }
    }
  }
  }

  return HAL_OK;
 800651c:	2000      	movs	r0, #0
}
 800651e:	b002      	add	sp, #8
 8006520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006524:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006528:	2903      	cmp	r1, #3
 800652a:	f43f af2e 	beq.w	800638a <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800652e:	6863      	ldr	r3, [r4, #4]
 8006530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006534:	d055      	beq.n	80065e2 <HAL_RCC_OscConfig+0x282>
 8006536:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800653a:	f000 80c4 	beq.w	80066c6 <HAL_RCC_OscConfig+0x366>
 800653e:	4d34      	ldr	r5, [pc, #208]	@ (8006610 <HAL_RCC_OscConfig+0x2b0>)
 8006540:	682a      	ldr	r2, [r5, #0]
 8006542:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006546:	602a      	str	r2, [r5, #0]
 8006548:	682a      	ldr	r2, [r5, #0]
 800654a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800654e:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006550:	2b00      	cmp	r3, #0
 8006552:	d14b      	bne.n	80065ec <HAL_RCC_OscConfig+0x28c>
        tickstart = HAL_GetTick();
 8006554:	f7fe f9c2 	bl	80048dc <HAL_GetTick>
 8006558:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800655a:	e004      	b.n	8006566 <HAL_RCC_OscConfig+0x206>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800655c:	f7fe f9be 	bl	80048dc <HAL_GetTick>
 8006560:	1b80      	subs	r0, r0, r6
 8006562:	2864      	cmp	r0, #100	@ 0x64
 8006564:	d86c      	bhi.n	8006640 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006566:	682b      	ldr	r3, [r5, #0]
 8006568:	0399      	lsls	r1, r3, #14
 800656a:	d4f7      	bmi.n	800655c <HAL_RCC_OscConfig+0x1fc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800656c:	6823      	ldr	r3, [r4, #0]
 800656e:	079a      	lsls	r2, r3, #30
 8006570:	f57f af38 	bpl.w	80063e4 <HAL_RCC_OscConfig+0x84>
 8006574:	e713      	b.n	800639e <HAL_RCC_OscConfig+0x3e>
      __HAL_RCC_LSI_DISABLE();
 8006576:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800657a:	f023 0301 	bic.w	r3, r3, #1
 800657e:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8006582:	f7fe f9ab 	bl	80048dc <HAL_GetTick>
 8006586:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006588:	e004      	b.n	8006594 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800658a:	f7fe f9a7 	bl	80048dc <HAL_GetTick>
 800658e:	1b80      	subs	r0, r0, r6
 8006590:	2802      	cmp	r0, #2
 8006592:	d855      	bhi.n	8006640 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006594:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8006598:	079f      	lsls	r7, r3, #30
 800659a:	d4f6      	bmi.n	800658a <HAL_RCC_OscConfig+0x22a>
 800659c:	e73d      	b.n	800641a <HAL_RCC_OscConfig+0xba>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800659e:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80065a2:	2a02      	cmp	r2, #2
 80065a4:	f43f af06 	beq.w	80063b4 <HAL_RCC_OscConfig+0x54>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065a8:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 80065aa:	4d19      	ldr	r5, [pc, #100]	@ (8006610 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d037      	beq.n	8006620 <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 80065b0:	682b      	ldr	r3, [r5, #0]
 80065b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065b6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80065b8:	f7fe f990 	bl	80048dc <HAL_GetTick>
 80065bc:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065be:	e004      	b.n	80065ca <HAL_RCC_OscConfig+0x26a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065c0:	f7fe f98c 	bl	80048dc <HAL_GetTick>
 80065c4:	1b80      	subs	r0, r0, r6
 80065c6:	2802      	cmp	r0, #2
 80065c8:	d83a      	bhi.n	8006640 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065ca:	682b      	ldr	r3, [r5, #0]
 80065cc:	055f      	lsls	r7, r3, #21
 80065ce:	d5f7      	bpl.n	80065c0 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065d0:	686b      	ldr	r3, [r5, #4]
 80065d2:	6922      	ldr	r2, [r4, #16]
 80065d4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80065d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80065dc:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	e700      	b.n	80063e4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065e2:	4a0b      	ldr	r2, [pc, #44]	@ (8006610 <HAL_RCC_OscConfig+0x2b0>)
 80065e4:	6813      	ldr	r3, [r2, #0]
 80065e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065ea:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80065ec:	f7fe f976 	bl	80048dc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065f0:	4e07      	ldr	r6, [pc, #28]	@ (8006610 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 80065f2:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065f4:	e004      	b.n	8006600 <HAL_RCC_OscConfig+0x2a0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065f6:	f7fe f971 	bl	80048dc <HAL_GetTick>
 80065fa:	1b40      	subs	r0, r0, r5
 80065fc:	2864      	cmp	r0, #100	@ 0x64
 80065fe:	d81f      	bhi.n	8006640 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006600:	6833      	ldr	r3, [r6, #0]
 8006602:	039f      	lsls	r7, r3, #14
 8006604:	d5f7      	bpl.n	80065f6 <HAL_RCC_OscConfig+0x296>
 8006606:	e7b1      	b.n	800656c <HAL_RCC_OscConfig+0x20c>
    return HAL_ERROR;
 8006608:	2001      	movs	r0, #1
}
 800660a:	b002      	add	sp, #8
 800660c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006610:	40021000 	.word	0x40021000
 8006614:	200004f4 	.word	0x200004f4
 8006618:	40007000 	.word	0x40007000
 800661c:	feeefffc 	.word	0xfeeefffc
        __HAL_RCC_HSI_DISABLE();
 8006620:	682b      	ldr	r3, [r5, #0]
 8006622:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006626:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006628:	f7fe f958 	bl	80048dc <HAL_GetTick>
 800662c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800662e:	682b      	ldr	r3, [r5, #0]
 8006630:	0559      	lsls	r1, r3, #21
 8006632:	f57f aed6 	bpl.w	80063e2 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006636:	f7fe f951 	bl	80048dc <HAL_GetTick>
 800663a:	1b80      	subs	r0, r0, r6
 800663c:	2802      	cmp	r0, #2
 800663e:	d9f6      	bls.n	800662e <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 8006640:	2003      	movs	r0, #3
}
 8006642:	b002      	add	sp, #8
 8006644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8006648:	2500      	movs	r5, #0
 800664a:	e6f8      	b.n	800643e <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800664c:	4a65      	ldr	r2, [pc, #404]	@ (80067e4 <HAL_RCC_OscConfig+0x484>)
 800664e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006652:	f043 0301 	orr.w	r3, r3, #1
 8006656:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 800665a:	f7fe f93f 	bl	80048dc <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800665e:	4f61      	ldr	r7, [pc, #388]	@ (80067e4 <HAL_RCC_OscConfig+0x484>)
      tickstart = HAL_GetTick();
 8006660:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006662:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006666:	e004      	b.n	8006672 <HAL_RCC_OscConfig+0x312>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006668:	f7fe f938 	bl	80048dc <HAL_GetTick>
 800666c:	1b80      	subs	r0, r0, r6
 800666e:	4540      	cmp	r0, r8
 8006670:	d8e6      	bhi.n	8006640 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006672:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006676:	079b      	lsls	r3, r3, #30
 8006678:	d5f6      	bpl.n	8006668 <HAL_RCC_OscConfig+0x308>
 800667a:	e70c      	b.n	8006496 <HAL_RCC_OscConfig+0x136>
      __HAL_RCC_HSI48_DISABLE();
 800667c:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8006680:	f023 0301 	bic.w	r3, r3, #1
 8006684:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8006688:	f7fe f928 	bl	80048dc <HAL_GetTick>
 800668c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800668e:	e004      	b.n	800669a <HAL_RCC_OscConfig+0x33a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006690:	f7fe f924 	bl	80048dc <HAL_GetTick>
 8006694:	1b80      	subs	r0, r0, r6
 8006696:	2802      	cmp	r0, #2
 8006698:	d8d2      	bhi.n	8006640 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800669a:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800669e:	079f      	lsls	r7, r3, #30
 80066a0:	d4f6      	bmi.n	8006690 <HAL_RCC_OscConfig+0x330>
 80066a2:	e71a      	b.n	80064da <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066a4:	6833      	ldr	r3, [r6, #0]
 80066a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066aa:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80066ac:	f7fe f916 	bl	80048dc <HAL_GetTick>
 80066b0:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066b2:	6833      	ldr	r3, [r6, #0]
 80066b4:	05da      	lsls	r2, r3, #23
 80066b6:	f53f aec7 	bmi.w	8006448 <HAL_RCC_OscConfig+0xe8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066ba:	f7fe f90f 	bl	80048dc <HAL_GetTick>
 80066be:	1bc0      	subs	r0, r0, r7
 80066c0:	2802      	cmp	r0, #2
 80066c2:	d9f6      	bls.n	80066b2 <HAL_RCC_OscConfig+0x352>
 80066c4:	e7bc      	b.n	8006640 <HAL_RCC_OscConfig+0x2e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80066ca:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80066d4:	601a      	str	r2, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80066dc:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066de:	e785      	b.n	80065ec <HAL_RCC_OscConfig+0x28c>
    return HAL_ERROR;
 80066e0:	2001      	movs	r0, #1
}
 80066e2:	4770      	bx	lr
        tickstart = HAL_GetTick();
 80066e4:	f7fe f8fa 	bl	80048dc <HAL_GetTick>
 80066e8:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066ea:	e004      	b.n	80066f6 <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066ec:	f7fe f8f6 	bl	80048dc <HAL_GetTick>
 80066f0:	1b80      	subs	r0, r0, r6
 80066f2:	2802      	cmp	r0, #2
 80066f4:	d8a4      	bhi.n	8006640 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066f6:	682b      	ldr	r3, [r5, #0]
 80066f8:	0199      	lsls	r1, r3, #6
 80066fa:	d4f7      	bmi.n	80066ec <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066fc:	68e9      	ldr	r1, [r5, #12]
 80066fe:	4b3a      	ldr	r3, [pc, #232]	@ (80067e8 <HAL_RCC_OscConfig+0x488>)
 8006700:	6a22      	ldr	r2, [r4, #32]
 8006702:	6a60      	ldr	r0, [r4, #36]	@ 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006704:	4e37      	ldr	r6, [pc, #220]	@ (80067e4 <HAL_RCC_OscConfig+0x484>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006706:	400b      	ands	r3, r1
 8006708:	4313      	orrs	r3, r2
 800670a:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	@ 0x28
 800670e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006712:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8006716:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	@ 0x30
 800671a:	3801      	subs	r0, #1
 800671c:	0849      	lsrs	r1, r1, #1
 800671e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8006722:	3901      	subs	r1, #1
 8006724:	0852      	lsrs	r2, r2, #1
 8006726:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800672a:	3a01      	subs	r2, #1
 800672c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8006730:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8006732:	682b      	ldr	r3, [r5, #0]
 8006734:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006738:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800673a:	68eb      	ldr	r3, [r5, #12]
 800673c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006740:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8006742:	f7fe f8cb 	bl	80048dc <HAL_GetTick>
 8006746:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006748:	e005      	b.n	8006756 <HAL_RCC_OscConfig+0x3f6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800674a:	f7fe f8c7 	bl	80048dc <HAL_GetTick>
 800674e:	1b00      	subs	r0, r0, r4
 8006750:	2802      	cmp	r0, #2
 8006752:	f63f af75 	bhi.w	8006640 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006756:	6833      	ldr	r3, [r6, #0]
 8006758:	019a      	lsls	r2, r3, #6
 800675a:	d5f6      	bpl.n	800674a <HAL_RCC_OscConfig+0x3ea>
 800675c:	e6de      	b.n	800651c <HAL_RCC_OscConfig+0x1bc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800675e:	4b21      	ldr	r3, [pc, #132]	@ (80067e4 <HAL_RCC_OscConfig+0x484>)
 8006760:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8006764:	f042 0204 	orr.w	r2, r2, #4
 8006768:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800676c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8006770:	f042 0201 	orr.w	r2, r2, #1
 8006774:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006778:	e76f      	b.n	800665a <HAL_RCC_OscConfig+0x2fa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800677a:	2b01      	cmp	r3, #1
 800677c:	f43f af44 	beq.w	8006608 <HAL_RCC_OscConfig+0x2a8>
      temp_pllckcfg = RCC->PLLCFGR;
 8006780:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006782:	6a22      	ldr	r2, [r4, #32]
 8006784:	f003 0103 	and.w	r1, r3, #3
 8006788:	4291      	cmp	r1, r2
 800678a:	f47f af3d 	bne.w	8006608 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800678e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006790:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006794:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006796:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800679a:	f47f af35 	bne.w	8006608 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800679e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80067a0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80067a4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80067a8:	f47f af2e 	bne.w	8006608 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80067ac:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80067ae:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80067b2:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80067b6:	f47f af27 	bne.w	8006608 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067ba:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80067bc:	0852      	lsrs	r2, r2, #1
 80067be:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 80067c2:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80067c4:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80067c8:	f47f af1e 	bne.w	8006608 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80067cc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80067ce:	0852      	lsrs	r2, r2, #1
 80067d0:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 80067d4:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067d6:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80067da:	bf14      	ite	ne
 80067dc:	2001      	movne	r0, #1
 80067de:	2000      	moveq	r0, #0
 80067e0:	e69d      	b.n	800651e <HAL_RCC_OscConfig+0x1be>
 80067e2:	bf00      	nop
 80067e4:	40021000 	.word	0x40021000
 80067e8:	019f800c 	.word	0x019f800c

080067ec <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80067ec:	4b18      	ldr	r3, [pc, #96]	@ (8006850 <HAL_RCC_GetSysClockFreq+0x64>)
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	f002 020c 	and.w	r2, r2, #12
 80067f4:	2a04      	cmp	r2, #4
 80067f6:	d026      	beq.n	8006846 <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80067f8:	689a      	ldr	r2, [r3, #8]
 80067fa:	f002 020c 	and.w	r2, r2, #12
 80067fe:	2a08      	cmp	r2, #8
 8006800:	d023      	beq.n	800684a <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006802:	689a      	ldr	r2, [r3, #8]
 8006804:	f002 020c 	and.w	r2, r2, #12
 8006808:	2a0c      	cmp	r2, #12
 800680a:	d001      	beq.n	8006810 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 800680c:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 800680e:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006810:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006812:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006814:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006816:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 800681a:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800681c:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006820:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006824:	bf0c      	ite	eq
 8006826:	4b0b      	ldreq	r3, [pc, #44]	@ (8006854 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006828:	4b0b      	ldrne	r3, [pc, #44]	@ (8006858 <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800682a:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800682c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006830:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006834:	4b06      	ldr	r3, [pc, #24]	@ (8006850 <HAL_RCC_GetSysClockFreq+0x64>)
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800683c:	3301      	adds	r3, #1
 800683e:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8006840:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8006844:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8006846:	4804      	ldr	r0, [pc, #16]	@ (8006858 <HAL_RCC_GetSysClockFreq+0x6c>)
 8006848:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800684a:	4802      	ldr	r0, [pc, #8]	@ (8006854 <HAL_RCC_GetSysClockFreq+0x68>)
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	40021000 	.word	0x40021000
 8006854:	007a1200 	.word	0x007a1200
 8006858:	00f42400 	.word	0x00f42400

0800685c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800685c:	2800      	cmp	r0, #0
 800685e:	f000 80ee 	beq.w	8006a3e <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006862:	4a78      	ldr	r2, [pc, #480]	@ (8006a44 <HAL_RCC_ClockConfig+0x1e8>)
{
 8006864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006868:	6813      	ldr	r3, [r2, #0]
 800686a:	f003 030f 	and.w	r3, r3, #15
 800686e:	428b      	cmp	r3, r1
 8006870:	460d      	mov	r5, r1
 8006872:	4604      	mov	r4, r0
 8006874:	d20c      	bcs.n	8006890 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006876:	6813      	ldr	r3, [r2, #0]
 8006878:	f023 030f 	bic.w	r3, r3, #15
 800687c:	430b      	orrs	r3, r1
 800687e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006880:	6813      	ldr	r3, [r2, #0]
 8006882:	f003 030f 	and.w	r3, r3, #15
 8006886:	428b      	cmp	r3, r1
 8006888:	d002      	beq.n	8006890 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800688a:	2001      	movs	r0, #1
}
 800688c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006890:	6823      	ldr	r3, [r4, #0]
 8006892:	07df      	lsls	r7, r3, #31
 8006894:	d569      	bpl.n	800696a <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006896:	6867      	ldr	r7, [r4, #4]
 8006898:	2f03      	cmp	r7, #3
 800689a:	f000 80a0 	beq.w	80069de <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800689e:	4b6a      	ldr	r3, [pc, #424]	@ (8006a48 <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068a0:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068a2:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068a4:	f000 8097 	beq.w	80069d6 <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068a8:	055b      	lsls	r3, r3, #21
 80068aa:	d5ee      	bpl.n	800688a <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80068ac:	f7ff ff9e 	bl	80067ec <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80068b0:	4b66      	ldr	r3, [pc, #408]	@ (8006a4c <HAL_RCC_ClockConfig+0x1f0>)
 80068b2:	4298      	cmp	r0, r3
 80068b4:	f240 80c0 	bls.w	8006a38 <HAL_RCC_ClockConfig+0x1dc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80068b8:	4a63      	ldr	r2, [pc, #396]	@ (8006a48 <HAL_RCC_ClockConfig+0x1ec>)
 80068ba:	6893      	ldr	r3, [r2, #8]
 80068bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80068c6:	f04f 0980 	mov.w	r9, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80068ca:	4e5f      	ldr	r6, [pc, #380]	@ (8006a48 <HAL_RCC_ClockConfig+0x1ec>)
 80068cc:	68b3      	ldr	r3, [r6, #8]
 80068ce:	f023 0303 	bic.w	r3, r3, #3
 80068d2:	433b      	orrs	r3, r7
 80068d4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80068d6:	f7fe f801 	bl	80048dc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068da:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80068de:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068e0:	e004      	b.n	80068ec <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068e2:	f7fd fffb 	bl	80048dc <HAL_GetTick>
 80068e6:	1bc0      	subs	r0, r0, r7
 80068e8:	4540      	cmp	r0, r8
 80068ea:	d871      	bhi.n	80069d0 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068ec:	68b3      	ldr	r3, [r6, #8]
 80068ee:	6862      	ldr	r2, [r4, #4]
 80068f0:	f003 030c 	and.w	r3, r3, #12
 80068f4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80068f8:	d1f3      	bne.n	80068e2 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068fa:	6823      	ldr	r3, [r4, #0]
 80068fc:	079f      	lsls	r7, r3, #30
 80068fe:	d436      	bmi.n	800696e <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 8006900:	f1b9 0f00 	cmp.w	r9, #0
 8006904:	d003      	beq.n	800690e <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006906:	68b3      	ldr	r3, [r6, #8]
 8006908:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800690c:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800690e:	4e4d      	ldr	r6, [pc, #308]	@ (8006a44 <HAL_RCC_ClockConfig+0x1e8>)
 8006910:	6833      	ldr	r3, [r6, #0]
 8006912:	f003 030f 	and.w	r3, r3, #15
 8006916:	42ab      	cmp	r3, r5
 8006918:	d846      	bhi.n	80069a8 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	075a      	lsls	r2, r3, #29
 800691e:	d506      	bpl.n	800692e <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006920:	4949      	ldr	r1, [pc, #292]	@ (8006a48 <HAL_RCC_ClockConfig+0x1ec>)
 8006922:	68e0      	ldr	r0, [r4, #12]
 8006924:	688a      	ldr	r2, [r1, #8]
 8006926:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800692a:	4302      	orrs	r2, r0
 800692c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800692e:	071b      	lsls	r3, r3, #28
 8006930:	d507      	bpl.n	8006942 <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006932:	4a45      	ldr	r2, [pc, #276]	@ (8006a48 <HAL_RCC_ClockConfig+0x1ec>)
 8006934:	6921      	ldr	r1, [r4, #16]
 8006936:	6893      	ldr	r3, [r2, #8]
 8006938:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800693c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006940:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006942:	f7ff ff53 	bl	80067ec <HAL_RCC_GetSysClockFreq>
 8006946:	4a40      	ldr	r2, [pc, #256]	@ (8006a48 <HAL_RCC_ClockConfig+0x1ec>)
 8006948:	4c41      	ldr	r4, [pc, #260]	@ (8006a50 <HAL_RCC_ClockConfig+0x1f4>)
 800694a:	6892      	ldr	r2, [r2, #8]
 800694c:	4941      	ldr	r1, [pc, #260]	@ (8006a54 <HAL_RCC_ClockConfig+0x1f8>)
 800694e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8006952:	4603      	mov	r3, r0
 8006954:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8006956:	4840      	ldr	r0, [pc, #256]	@ (8006a58 <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006958:	f002 021f 	and.w	r2, r2, #31
 800695c:	40d3      	lsrs	r3, r2
 800695e:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8006960:	6800      	ldr	r0, [r0, #0]
}
 8006962:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8006966:	f7fd bf6f 	b.w	8004848 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800696a:	079e      	lsls	r6, r3, #30
 800696c:	d5cf      	bpl.n	800690e <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800696e:	0758      	lsls	r0, r3, #29
 8006970:	d504      	bpl.n	800697c <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006972:	4935      	ldr	r1, [pc, #212]	@ (8006a48 <HAL_RCC_ClockConfig+0x1ec>)
 8006974:	688a      	ldr	r2, [r1, #8]
 8006976:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800697a:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800697c:	0719      	lsls	r1, r3, #28
 800697e:	d506      	bpl.n	800698e <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006980:	4a31      	ldr	r2, [pc, #196]	@ (8006a48 <HAL_RCC_ClockConfig+0x1ec>)
 8006982:	6893      	ldr	r3, [r2, #8]
 8006984:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006988:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800698c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800698e:	4a2e      	ldr	r2, [pc, #184]	@ (8006a48 <HAL_RCC_ClockConfig+0x1ec>)
 8006990:	68a1      	ldr	r1, [r4, #8]
 8006992:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006994:	4e2b      	ldr	r6, [pc, #172]	@ (8006a44 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006996:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800699a:	430b      	orrs	r3, r1
 800699c:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800699e:	6833      	ldr	r3, [r6, #0]
 80069a0:	f003 030f 	and.w	r3, r3, #15
 80069a4:	42ab      	cmp	r3, r5
 80069a6:	d9b8      	bls.n	800691a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069a8:	6833      	ldr	r3, [r6, #0]
 80069aa:	f023 030f 	bic.w	r3, r3, #15
 80069ae:	432b      	orrs	r3, r5
 80069b0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80069b2:	f7fd ff93 	bl	80048dc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069b6:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80069ba:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069bc:	6833      	ldr	r3, [r6, #0]
 80069be:	f003 030f 	and.w	r3, r3, #15
 80069c2:	42ab      	cmp	r3, r5
 80069c4:	d0a9      	beq.n	800691a <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069c6:	f7fd ff89 	bl	80048dc <HAL_GetTick>
 80069ca:	1bc0      	subs	r0, r0, r7
 80069cc:	4540      	cmp	r0, r8
 80069ce:	d9f5      	bls.n	80069bc <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 80069d0:	2003      	movs	r0, #3
}
 80069d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069d6:	039a      	lsls	r2, r3, #14
 80069d8:	f53f af68 	bmi.w	80068ac <HAL_RCC_ClockConfig+0x50>
 80069dc:	e755      	b.n	800688a <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069de:	4a1a      	ldr	r2, [pc, #104]	@ (8006a48 <HAL_RCC_ClockConfig+0x1ec>)
 80069e0:	6811      	ldr	r1, [r2, #0]
 80069e2:	0188      	lsls	r0, r1, #6
 80069e4:	f57f af51 	bpl.w	800688a <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80069e8:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80069ea:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069ec:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 80069ee:	4e17      	ldr	r6, [pc, #92]	@ (8006a4c <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80069f0:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 80069f4:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80069f6:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069fa:	bf0c      	ite	eq
 80069fc:	4817      	ldreq	r0, [pc, #92]	@ (8006a5c <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069fe:	4818      	ldrne	r0, [pc, #96]	@ (8006a60 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006a00:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006a02:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006a06:	4810      	ldr	r0, [pc, #64]	@ (8006a48 <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006a08:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8006a0c:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006a10:	68c1      	ldr	r1, [r0, #12]
 8006a12:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8006a16:	3101      	adds	r1, #1
 8006a18:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 8006a1a:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 8006a1e:	42b2      	cmp	r2, r6
 8006a20:	d90a      	bls.n	8006a38 <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006a22:	6882      	ldr	r2, [r0, #8]
 8006a24:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 8006a28:	f43f af46 	beq.w	80068b8 <HAL_RCC_ClockConfig+0x5c>
 8006a2c:	0799      	lsls	r1, r3, #30
 8006a2e:	d503      	bpl.n	8006a38 <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006a30:	68a3      	ldr	r3, [r4, #8]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f43f af40 	beq.w	80068b8 <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006a38:	f04f 0900 	mov.w	r9, #0
 8006a3c:	e745      	b.n	80068ca <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 8006a3e:	2001      	movs	r0, #1
}
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	40022000 	.word	0x40022000
 8006a48:	40021000 	.word	0x40021000
 8006a4c:	04c4b400 	.word	0x04c4b400
 8006a50:	0800a370 	.word	0x0800a370
 8006a54:	200004ec 	.word	0x200004ec
 8006a58:	200004f4 	.word	0x200004f4
 8006a5c:	007a1200 	.word	0x007a1200
 8006a60:	00f42400 	.word	0x00f42400

08006a64 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8006a64:	4b01      	ldr	r3, [pc, #4]	@ (8006a6c <HAL_RCC_GetHCLKFreq+0x8>)
}
 8006a66:	6818      	ldr	r0, [r3, #0]
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	200004ec 	.word	0x200004ec

08006a70 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006a70:	4b05      	ldr	r3, [pc, #20]	@ (8006a88 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006a72:	4a06      	ldr	r2, [pc, #24]	@ (8006a8c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006a74:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006a76:	4906      	ldr	r1, [pc, #24]	@ (8006a90 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006a78:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006a7c:	6808      	ldr	r0, [r1, #0]
 8006a7e:	5cd3      	ldrb	r3, [r2, r3]
 8006a80:	f003 031f 	and.w	r3, r3, #31
}
 8006a84:	40d8      	lsrs	r0, r3
 8006a86:	4770      	bx	lr
 8006a88:	40021000 	.word	0x40021000
 8006a8c:	0800a368 	.word	0x0800a368
 8006a90:	200004ec 	.word	0x200004ec

08006a94 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006a94:	4b05      	ldr	r3, [pc, #20]	@ (8006aac <HAL_RCC_GetPCLK2Freq+0x18>)
 8006a96:	4a06      	ldr	r2, [pc, #24]	@ (8006ab0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006a98:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006a9a:	4906      	ldr	r1, [pc, #24]	@ (8006ab4 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006a9c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006aa0:	6808      	ldr	r0, [r1, #0]
 8006aa2:	5cd3      	ldrb	r3, [r2, r3]
 8006aa4:	f003 031f 	and.w	r3, r3, #31
}
 8006aa8:	40d8      	lsrs	r0, r3
 8006aaa:	4770      	bx	lr
 8006aac:	40021000 	.word	0x40021000
 8006ab0:	0800a368 	.word	0x0800a368
 8006ab4:	200004ec 	.word	0x200004ec

08006ab8 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8006ab8:	4a02      	ldr	r2, [pc, #8]	@ (8006ac4 <HAL_RCC_EnableCSS+0xc>)
 8006aba:	6813      	ldr	r3, [r2, #0]
 8006abc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ac0:	6013      	str	r3, [r2, #0]
}
 8006ac2:	4770      	bx	lr
 8006ac4:	40021000 	.word	0x40021000

08006ac8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006acc:	6803      	ldr	r3, [r0, #0]
{
 8006ace:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ad0:	f413 2000 	ands.w	r0, r3, #524288	@ 0x80000
{
 8006ad4:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ad6:	d052      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ad8:	4ba1      	ldr	r3, [pc, #644]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006ada:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006adc:	00d5      	lsls	r5, r2, #3
 8006ade:	f140 8108 	bpl.w	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    FlagStatus       pwrclkchanged = RESET;
 8006ae2:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ae4:	4d9f      	ldr	r5, [pc, #636]	@ (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006ae6:	682b      	ldr	r3, [r5, #0]
 8006ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006aec:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006aee:	f7fd fef5 	bl	80048dc <HAL_GetTick>
 8006af2:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006af4:	e005      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006af6:	f7fd fef1 	bl	80048dc <HAL_GetTick>
 8006afa:	1b83      	subs	r3, r0, r6
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	f200 8103 	bhi.w	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x240>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b02:	682b      	ldr	r3, [r5, #0]
 8006b04:	05d8      	lsls	r0, r3, #23
 8006b06:	d5f6      	bpl.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006b08:	4d95      	ldr	r5, [pc, #596]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006b0a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006b0c:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006b10:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8006b14:	d026      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d024      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b1a:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b1e:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8006b22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b26:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b2a:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8006b2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b32:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b36:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006b3a:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8006b3c:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006b40:	d510      	bpl.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b42:	f7fd fecb 	bl	80048dc <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b46:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8006b4a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b4c:	e005      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x92>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b4e:	f7fd fec5 	bl	80048dc <HAL_GetTick>
 8006b52:	1b80      	subs	r0, r0, r6
 8006b54:	4540      	cmp	r0, r8
 8006b56:	f200 80d7 	bhi.w	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x240>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b5a:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8006b5e:	079b      	lsls	r3, r3, #30
 8006b60:	d5f5      	bpl.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x86>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b62:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006b64:	497e      	ldr	r1, [pc, #504]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006b66:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 8006b6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b74:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b76:	2000      	movs	r0, #0
    if(pwrclkchanged == SET)
 8006b78:	2f00      	cmp	r7, #0
 8006b7a:	f040 80ca 	bne.w	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b7e:	07de      	lsls	r6, r3, #31
 8006b80:	d508      	bpl.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b82:	4977      	ldr	r1, [pc, #476]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006b84:	6865      	ldr	r5, [r4, #4]
 8006b86:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006b8a:	f022 0203 	bic.w	r2, r2, #3
 8006b8e:	432a      	orrs	r2, r5
 8006b90:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b94:	079d      	lsls	r5, r3, #30
 8006b96:	d508      	bpl.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b98:	4971      	ldr	r1, [pc, #452]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006b9a:	68a5      	ldr	r5, [r4, #8]
 8006b9c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006ba0:	f022 020c 	bic.w	r2, r2, #12
 8006ba4:	432a      	orrs	r2, r5
 8006ba6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006baa:	0759      	lsls	r1, r3, #29
 8006bac:	d508      	bpl.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006bae:	496c      	ldr	r1, [pc, #432]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006bb0:	68e5      	ldr	r5, [r4, #12]
 8006bb2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006bb6:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8006bba:	432a      	orrs	r2, r5
 8006bbc:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006bc0:	071a      	lsls	r2, r3, #28
 8006bc2:	d508      	bpl.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006bc4:	4966      	ldr	r1, [pc, #408]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006bc6:	6925      	ldr	r5, [r4, #16]
 8006bc8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006bcc:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8006bd0:	432a      	orrs	r2, r5
 8006bd2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006bd6:	069f      	lsls	r7, r3, #26
 8006bd8:	d508      	bpl.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006bda:	4961      	ldr	r1, [pc, #388]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006bdc:	6965      	ldr	r5, [r4, #20]
 8006bde:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006be2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006be6:	432a      	orrs	r2, r5
 8006be8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006bec:	065e      	lsls	r6, r3, #25
 8006bee:	d508      	bpl.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006bf0:	495b      	ldr	r1, [pc, #364]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006bf2:	69a5      	ldr	r5, [r4, #24]
 8006bf4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006bf8:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8006bfc:	432a      	orrs	r2, r5
 8006bfe:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c02:	061d      	lsls	r5, r3, #24
 8006c04:	d508      	bpl.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c06:	4956      	ldr	r1, [pc, #344]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006c08:	69e5      	ldr	r5, [r4, #28]
 8006c0a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006c0e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006c12:	432a      	orrs	r2, r5
 8006c14:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c18:	05d9      	lsls	r1, r3, #23
 8006c1a:	d508      	bpl.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c1c:	4950      	ldr	r1, [pc, #320]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006c1e:	6a25      	ldr	r5, [r4, #32]
 8006c20:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006c24:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8006c28:	432a      	orrs	r2, r5
 8006c2a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c2e:	059a      	lsls	r2, r3, #22
 8006c30:	d508      	bpl.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c32:	494b      	ldr	r1, [pc, #300]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006c34:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8006c36:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006c3a:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8006c3e:	432a      	orrs	r2, r5
 8006c40:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006c44:	055f      	lsls	r7, r3, #21
 8006c46:	d50b      	bpl.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c48:	4945      	ldr	r1, [pc, #276]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006c4a:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8006c4c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006c50:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8006c54:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006c56:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c5a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006c5e:	d05e      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x256>

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006c60:	051e      	lsls	r6, r3, #20
 8006c62:	d50b      	bpl.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006c64:	493e      	ldr	r1, [pc, #248]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006c66:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8006c68:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006c6c:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8006c70:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006c72:	f5b5 0f80 	cmp.w	r5, #4194304	@ 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006c76:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006c7a:	d055      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x260>

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006c7c:	04dd      	lsls	r5, r3, #19
 8006c7e:	d50b      	bpl.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c80:	4937      	ldr	r1, [pc, #220]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006c82:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8006c84:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006c88:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006c8c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006c8e:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c92:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006c96:	d04c      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x26a>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006c98:	0499      	lsls	r1, r3, #18
 8006c9a:	d50b      	bpl.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c9c:	4930      	ldr	r1, [pc, #192]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006c9e:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8006ca0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006ca4:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8006ca8:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006caa:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006cae:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006cb2:	d043      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x274>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006cb4:	045a      	lsls	r2, r3, #17
 8006cb6:	d50b      	bpl.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006cb8:	4929      	ldr	r1, [pc, #164]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006cba:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8006cbc:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006cc0:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8006cc4:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006cc6:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006cca:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006cce:	d03a      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006cd0:	041b      	lsls	r3, r3, #16
 8006cd2:	d50b      	bpl.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006cd4:	4a22      	ldr	r2, [pc, #136]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006cd6:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8006cd8:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8006cdc:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8006ce0:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006ce2:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006ce6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006cea:	d031      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x288>
  }

#endif /* QUADSPI */

  return status;
}
 8006cec:	b002      	add	sp, #8
 8006cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cf2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006cf4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006cf8:	659a      	str	r2, [r3, #88]	@ 0x58
 8006cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d00:	9301      	str	r3, [sp, #4]
 8006d02:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006d04:	2701      	movs	r7, #1
 8006d06:	e6ed      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d08:	6823      	ldr	r3, [r4, #0]
        status = ret;
 8006d0a:	2003      	movs	r0, #3
    if(pwrclkchanged == SET)
 8006d0c:	2f00      	cmp	r7, #0
 8006d0e:	f43f af36 	beq.w	8006b7e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d12:	4913      	ldr	r1, [pc, #76]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006d14:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8006d16:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8006d1a:	658a      	str	r2, [r1, #88]	@ 0x58
 8006d1c:	e72f      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d1e:	68ca      	ldr	r2, [r1, #12]
 8006d20:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8006d24:	60ca      	str	r2, [r1, #12]
 8006d26:	e79b      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d28:	68ca      	ldr	r2, [r1, #12]
 8006d2a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8006d2e:	60ca      	str	r2, [r1, #12]
 8006d30:	e7a4      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d32:	68ca      	ldr	r2, [r1, #12]
 8006d34:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8006d38:	60ca      	str	r2, [r1, #12]
 8006d3a:	e7ad      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d3c:	68ca      	ldr	r2, [r1, #12]
 8006d3e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8006d42:	60ca      	str	r2, [r1, #12]
 8006d44:	e7b6      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d46:	68ca      	ldr	r2, [r1, #12]
 8006d48:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8006d4c:	60ca      	str	r2, [r1, #12]
 8006d4e:	e7bf      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x208>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006d50:	68d3      	ldr	r3, [r2, #12]
 8006d52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d56:	60d3      	str	r3, [r2, #12]
}
 8006d58:	b002      	add	sp, #8
 8006d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d5e:	bf00      	nop
 8006d60:	40021000 	.word	0x40021000
 8006d64:	40007000 	.word	0x40007000

08006d68 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d68:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d6a:	6a02      	ldr	r2, [r0, #32]
 8006d6c:	f022 0201 	bic.w	r2, r2, #1
 8006d70:	6202      	str	r2, [r0, #32]
{
 8006d72:	b470      	push	{r4, r5, r6}

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d74:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d76:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d78:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d7a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006d7e:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006d82:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d84:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8006d86:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8006d8a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d8c:	4d13      	ldr	r5, [pc, #76]	@ (8006ddc <TIM_OC1_SetConfig+0x74>)
 8006d8e:	42a8      	cmp	r0, r5
 8006d90:	d00f      	beq.n	8006db2 <TIM_OC1_SetConfig+0x4a>
 8006d92:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8006d96:	42a8      	cmp	r0, r5
 8006d98:	d00b      	beq.n	8006db2 <TIM_OC1_SetConfig+0x4a>
 8006d9a:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8006d9e:	42a8      	cmp	r0, r5
 8006da0:	d007      	beq.n	8006db2 <TIM_OC1_SetConfig+0x4a>
 8006da2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006da6:	42a8      	cmp	r0, r5
 8006da8:	d003      	beq.n	8006db2 <TIM_OC1_SetConfig+0x4a>
 8006daa:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006dae:	42a8      	cmp	r0, r5
 8006db0:	d10d      	bne.n	8006dce <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006db2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8006db4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006db8:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006dba:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006dbe:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8006dc2:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8006dc6:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8006dca:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006dce:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006dd0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006dd2:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8006dd4:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8006dd6:	6341      	str	r1, [r0, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8006dd8:	6203      	str	r3, [r0, #32]
}
 8006dda:	4770      	bx	lr
 8006ddc:	40012c00 	.word	0x40012c00

08006de0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006de0:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006de2:	6a02      	ldr	r2, [r0, #32]
 8006de4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006de8:	6202      	str	r2, [r0, #32]
{
 8006dea:	b470      	push	{r4, r5, r6}

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dec:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dee:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006df0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006df2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006df6:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006dfa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006dfc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8006dfe:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e02:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e06:	4d14      	ldr	r5, [pc, #80]	@ (8006e58 <TIM_OC3_SetConfig+0x78>)
 8006e08:	42a8      	cmp	r0, r5
 8006e0a:	d00f      	beq.n	8006e2c <TIM_OC3_SetConfig+0x4c>
 8006e0c:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8006e10:	42a8      	cmp	r0, r5
 8006e12:	d00b      	beq.n	8006e2c <TIM_OC3_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e14:	4d11      	ldr	r5, [pc, #68]	@ (8006e5c <TIM_OC3_SetConfig+0x7c>)
 8006e16:	42a8      	cmp	r0, r5
 8006e18:	d00f      	beq.n	8006e3a <TIM_OC3_SetConfig+0x5a>
 8006e1a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006e1e:	42a8      	cmp	r0, r5
 8006e20:	d00b      	beq.n	8006e3a <TIM_OC3_SetConfig+0x5a>
 8006e22:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006e26:	42a8      	cmp	r0, r5
 8006e28:	d10f      	bne.n	8006e4a <TIM_OC3_SetConfig+0x6a>
 8006e2a:	e006      	b.n	8006e3a <TIM_OC3_SetConfig+0x5a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e2c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e32:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e3a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e3e:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e42:	ea46 0c05 	orr.w	ip, r6, r5
 8006e46:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e4a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006e4c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006e4e:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8006e50:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8006e52:	63c1      	str	r1, [r0, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8006e54:	6203      	str	r3, [r0, #32]
}
 8006e56:	4770      	bx	lr
 8006e58:	40012c00 	.word	0x40012c00
 8006e5c:	40014000 	.word	0x40014000

08006e60 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e60:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e62:	6a02      	ldr	r2, [r0, #32]
 8006e64:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006e68:	6202      	str	r2, [r0, #32]
{
 8006e6a:	b470      	push	{r4, r5, r6}

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e6c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e6e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e70:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e72:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8006e76:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e7a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e7e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8006e80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e84:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006e88:	4d14      	ldr	r5, [pc, #80]	@ (8006edc <TIM_OC4_SetConfig+0x7c>)
 8006e8a:	42a8      	cmp	r0, r5
 8006e8c:	d00f      	beq.n	8006eae <TIM_OC4_SetConfig+0x4e>
 8006e8e:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8006e92:	42a8      	cmp	r0, r5
 8006e94:	d00b      	beq.n	8006eae <TIM_OC4_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e96:	4d12      	ldr	r5, [pc, #72]	@ (8006ee0 <TIM_OC4_SetConfig+0x80>)
 8006e98:	42a8      	cmp	r0, r5
 8006e9a:	d00f      	beq.n	8006ebc <TIM_OC4_SetConfig+0x5c>
 8006e9c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006ea0:	42a8      	cmp	r0, r5
 8006ea2:	d00b      	beq.n	8006ebc <TIM_OC4_SetConfig+0x5c>
 8006ea4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006ea8:	42a8      	cmp	r0, r5
 8006eaa:	d10f      	bne.n	8006ecc <TIM_OC4_SetConfig+0x6c>
 8006eac:	e006      	b.n	8006ebc <TIM_OC4_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006eae:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8006eb0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006eb4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8006eb8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006ebc:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006ec0:	f424 4440 	bic.w	r4, r4, #49152	@ 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006ec4:	ea46 0c05 	orr.w	ip, r6, r5
 8006ec8:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ecc:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006ece:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006ed0:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8006ed2:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 8006ed4:	6401      	str	r1, [r0, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8006ed6:	6203      	str	r3, [r0, #32]
}
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	40012c00 	.word	0x40012c00
 8006ee0:	40014000 	.word	0x40014000

08006ee4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	d075      	beq.n	8006fd4 <HAL_TIM_Base_Init+0xf0>
{
 8006ee8:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006eea:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006eee:	4604      	mov	r4, r0
 8006ef0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d068      	beq.n	8006fca <HAL_TIM_Base_Init+0xe6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ef8:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006efa:	4e37      	ldr	r6, [pc, #220]	@ (8006fd8 <HAL_TIM_Base_Init+0xf4>)
  TIMx->PSC = Structure->Prescaler;
 8006efc:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006efe:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f00:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8006f02:	2202      	movs	r2, #2
 8006f04:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f08:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 8006f0a:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f0c:	d04c      	beq.n	8006fa8 <HAL_TIM_Base_Init+0xc4>
 8006f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f12:	d017      	beq.n	8006f44 <HAL_TIM_Base_Init+0x60>
 8006f14:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8006f18:	42b3      	cmp	r3, r6
 8006f1a:	d013      	beq.n	8006f44 <HAL_TIM_Base_Init+0x60>
 8006f1c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8006f20:	42b3      	cmp	r3, r6
 8006f22:	d00f      	beq.n	8006f44 <HAL_TIM_Base_Init+0x60>
 8006f24:	f506 3696 	add.w	r6, r6, #76800	@ 0x12c00
 8006f28:	42b3      	cmp	r3, r6
 8006f2a:	d03d      	beq.n	8006fa8 <HAL_TIM_Base_Init+0xc4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f2c:	4e2b      	ldr	r6, [pc, #172]	@ (8006fdc <HAL_TIM_Base_Init+0xf8>)
 8006f2e:	42b3      	cmp	r3, r6
 8006f30:	d03e      	beq.n	8006fb0 <HAL_TIM_Base_Init+0xcc>
 8006f32:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8006f36:	42b3      	cmp	r3, r6
 8006f38:	d03a      	beq.n	8006fb0 <HAL_TIM_Base_Init+0xcc>
 8006f3a:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8006f3e:	42b3      	cmp	r3, r6
 8006f40:	d108      	bne.n	8006f54 <HAL_TIM_Base_Init+0x70>
 8006f42:	e035      	b.n	8006fb0 <HAL_TIM_Base_Init+0xcc>
    tmpcr1 |= Structure->CounterMode;
 8006f44:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f46:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006f4a:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f4c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f4e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f52:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f58:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8006f5a:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f5c:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006f5e:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006f60:	2201      	movs	r2, #1
 8006f62:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006f64:	691a      	ldr	r2, [r3, #16]
 8006f66:	07d2      	lsls	r2, r2, #31
 8006f68:	d503      	bpl.n	8006f72 <HAL_TIM_Base_Init+0x8e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006f6a:	691a      	ldr	r2, [r3, #16]
 8006f6c:	f022 0201 	bic.w	r2, r2, #1
 8006f70:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f72:	2301      	movs	r3, #1
 8006f74:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f78:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006f7c:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006f80:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006f84:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8006f88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f90:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006f94:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8006f98:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8006f9c:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006fa0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8006fa4:	2000      	movs	r0, #0
}
 8006fa6:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 8006fa8:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006faa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006fae:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fb0:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fb2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fb6:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006fbc:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8006fbe:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fc0:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006fc2:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006fc4:	6962      	ldr	r2, [r4, #20]
 8006fc6:	631a      	str	r2, [r3, #48]	@ 0x30
 8006fc8:	e7ca      	b.n	8006f60 <HAL_TIM_Base_Init+0x7c>
    htim->Lock = HAL_UNLOCKED;
 8006fca:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006fce:	f7fd fa57 	bl	8004480 <HAL_TIM_Base_MspInit>
 8006fd2:	e791      	b.n	8006ef8 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 8006fd4:	2001      	movs	r0, #1
}
 8006fd6:	4770      	bx	lr
 8006fd8:	40012c00 	.word	0x40012c00
 8006fdc:	40014000 	.word	0x40014000

08006fe0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	d075      	beq.n	80070d0 <HAL_TIM_PWM_Init+0xf0>
{
 8006fe4:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006fe6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006fea:	4604      	mov	r4, r0
 8006fec:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d068      	beq.n	80070c6 <HAL_TIM_PWM_Init+0xe6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ff4:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ff6:	4e37      	ldr	r6, [pc, #220]	@ (80070d4 <HAL_TIM_PWM_Init+0xf4>)
  TIMx->PSC = Structure->Prescaler;
 8006ff8:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ffa:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ffc:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8006ffe:	2202      	movs	r2, #2
 8007000:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007004:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 8007006:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007008:	d04c      	beq.n	80070a4 <HAL_TIM_PWM_Init+0xc4>
 800700a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800700e:	d017      	beq.n	8007040 <HAL_TIM_PWM_Init+0x60>
 8007010:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8007014:	42b3      	cmp	r3, r6
 8007016:	d013      	beq.n	8007040 <HAL_TIM_PWM_Init+0x60>
 8007018:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800701c:	42b3      	cmp	r3, r6
 800701e:	d00f      	beq.n	8007040 <HAL_TIM_PWM_Init+0x60>
 8007020:	f506 3696 	add.w	r6, r6, #76800	@ 0x12c00
 8007024:	42b3      	cmp	r3, r6
 8007026:	d03d      	beq.n	80070a4 <HAL_TIM_PWM_Init+0xc4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007028:	4e2b      	ldr	r6, [pc, #172]	@ (80070d8 <HAL_TIM_PWM_Init+0xf8>)
 800702a:	42b3      	cmp	r3, r6
 800702c:	d03e      	beq.n	80070ac <HAL_TIM_PWM_Init+0xcc>
 800702e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8007032:	42b3      	cmp	r3, r6
 8007034:	d03a      	beq.n	80070ac <HAL_TIM_PWM_Init+0xcc>
 8007036:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800703a:	42b3      	cmp	r3, r6
 800703c:	d108      	bne.n	8007050 <HAL_TIM_PWM_Init+0x70>
 800703e:	e035      	b.n	80070ac <HAL_TIM_PWM_Init+0xcc>
    tmpcr1 |= Structure->CounterMode;
 8007040:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007042:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8007046:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007048:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800704a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800704e:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007050:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007054:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8007056:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007058:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800705a:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 800705c:	2201      	movs	r2, #1
 800705e:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007060:	691a      	ldr	r2, [r3, #16]
 8007062:	07d2      	lsls	r2, r2, #31
 8007064:	d503      	bpl.n	800706e <HAL_TIM_PWM_Init+0x8e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007066:	691a      	ldr	r2, [r3, #16]
 8007068:	f022 0201 	bic.w	r2, r2, #1
 800706c:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800706e:	2301      	movs	r3, #1
 8007070:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007074:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8007078:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800707c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8007080:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8007084:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007088:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800708c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8007090:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8007094:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8007098:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800709c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80070a0:	2000      	movs	r0, #0
}
 80070a2:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 80070a4:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070a6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80070aa:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070ac:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80070ae:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070b2:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80070b8:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80070ba:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070bc:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80070be:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80070c0:	6962      	ldr	r2, [r4, #20]
 80070c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80070c4:	e7ca      	b.n	800705c <HAL_TIM_PWM_Init+0x7c>
    htim->Lock = HAL_UNLOCKED;
 80070c6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80070ca:	f7fd f9c1 	bl	8004450 <HAL_TIM_PWM_MspInit>
 80070ce:	e791      	b.n	8006ff4 <HAL_TIM_PWM_Init+0x14>
    return HAL_ERROR;
 80070d0:	2001      	movs	r0, #1
}
 80070d2:	4770      	bx	lr
 80070d4:	40012c00 	.word	0x40012c00
 80070d8:	40014000 	.word	0x40014000

080070dc <HAL_TIM_IC_MspInit>:
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop

080070e0 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 80070e0:	2800      	cmp	r0, #0
 80070e2:	d075      	beq.n	80071d0 <HAL_TIM_IC_Init+0xf0>
{
 80070e4:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80070e6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80070ea:	4604      	mov	r4, r0
 80070ec:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d068      	beq.n	80071c6 <HAL_TIM_IC_Init+0xe6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070f4:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070f6:	4e37      	ldr	r6, [pc, #220]	@ (80071d4 <HAL_TIM_IC_Init+0xf4>)
  TIMx->PSC = Structure->Prescaler;
 80070f8:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070fa:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070fc:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 80070fe:	2202      	movs	r2, #2
 8007100:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007104:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 8007106:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007108:	d04c      	beq.n	80071a4 <HAL_TIM_IC_Init+0xc4>
 800710a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800710e:	d017      	beq.n	8007140 <HAL_TIM_IC_Init+0x60>
 8007110:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8007114:	42b3      	cmp	r3, r6
 8007116:	d013      	beq.n	8007140 <HAL_TIM_IC_Init+0x60>
 8007118:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800711c:	42b3      	cmp	r3, r6
 800711e:	d00f      	beq.n	8007140 <HAL_TIM_IC_Init+0x60>
 8007120:	f506 3696 	add.w	r6, r6, #76800	@ 0x12c00
 8007124:	42b3      	cmp	r3, r6
 8007126:	d03d      	beq.n	80071a4 <HAL_TIM_IC_Init+0xc4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007128:	4e2b      	ldr	r6, [pc, #172]	@ (80071d8 <HAL_TIM_IC_Init+0xf8>)
 800712a:	42b3      	cmp	r3, r6
 800712c:	d03e      	beq.n	80071ac <HAL_TIM_IC_Init+0xcc>
 800712e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8007132:	42b3      	cmp	r3, r6
 8007134:	d03a      	beq.n	80071ac <HAL_TIM_IC_Init+0xcc>
 8007136:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800713a:	42b3      	cmp	r3, r6
 800713c:	d108      	bne.n	8007150 <HAL_TIM_IC_Init+0x70>
 800713e:	e035      	b.n	80071ac <HAL_TIM_IC_Init+0xcc>
    tmpcr1 |= Structure->CounterMode;
 8007140:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007142:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8007146:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007148:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800714a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800714e:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007150:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007154:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8007156:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007158:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800715a:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 800715c:	2201      	movs	r2, #1
 800715e:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007160:	691a      	ldr	r2, [r3, #16]
 8007162:	07d2      	lsls	r2, r2, #31
 8007164:	d503      	bpl.n	800716e <HAL_TIM_IC_Init+0x8e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007166:	691a      	ldr	r2, [r3, #16]
 8007168:	f022 0201 	bic.w	r2, r2, #1
 800716c:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800716e:	2301      	movs	r3, #1
 8007170:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007174:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8007178:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800717c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8007180:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8007184:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007188:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800718c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8007190:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8007194:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8007198:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800719c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80071a0:	2000      	movs	r0, #0
}
 80071a2:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 80071a4:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071a6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80071aa:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071ac:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80071ae:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071b2:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80071b8:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80071ba:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071bc:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80071be:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80071c0:	6962      	ldr	r2, [r4, #20]
 80071c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80071c4:	e7ca      	b.n	800715c <HAL_TIM_IC_Init+0x7c>
    htim->Lock = HAL_UNLOCKED;
 80071c6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_IC_MspInit(htim);
 80071ca:	f7ff ff87 	bl	80070dc <HAL_TIM_IC_MspInit>
 80071ce:	e791      	b.n	80070f4 <HAL_TIM_IC_Init+0x14>
    return HAL_ERROR;
 80071d0:	2001      	movs	r0, #1
}
 80071d2:	4770      	bx	lr
 80071d4:	40012c00 	.word	0x40012c00
 80071d8:	40014000 	.word	0x40014000

080071dc <HAL_TIM_IC_ConfigChannel>:
{
 80071dc:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80071de:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 80071e2:	2801      	cmp	r0, #1
 80071e4:	f000 80c1 	beq.w	800736a <HAL_TIM_IC_ConfigChannel+0x18e>
 80071e8:	2001      	movs	r0, #1
{
 80071ea:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 80071ec:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  if (Channel == TIM_CHANNEL_1)
 80071f0:	b15a      	cbz	r2, 800720a <HAL_TIM_IC_ConfigChannel+0x2e>
  else if (Channel == TIM_CHANNEL_2)
 80071f2:	2a04      	cmp	r2, #4
 80071f4:	d04c      	beq.n	8007290 <HAL_TIM_IC_ConfigChannel+0xb4>
  else if (Channel == TIM_CHANNEL_3)
 80071f6:	2a08      	cmp	r2, #8
 80071f8:	f000 8094 	beq.w	8007324 <HAL_TIM_IC_ConfigChannel+0x148>
  else if (Channel == TIM_CHANNEL_4)
 80071fc:	2a0c      	cmp	r2, #12
 80071fe:	d06c      	beq.n	80072da <HAL_TIM_IC_ConfigChannel+0xfe>
  __HAL_UNLOCK(htim);
 8007200:	2200      	movs	r2, #0
 8007202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8007206:	bcf0      	pop	{r4, r5, r6, r7}
 8007208:	4770      	bx	lr
    TIM_TI1_SetConfig(htim->Instance,
 800720a:	681a      	ldr	r2, [r3, #0]
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800720c:	f8df c160 	ldr.w	ip, [pc, #352]	@ 8007370 <HAL_TIM_IC_ConfigChannel+0x194>
  tmpccer = TIMx->CCER;
 8007210:	6a16      	ldr	r6, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007212:	6a17      	ldr	r7, [r2, #32]
                      sConfig->ICFilter);
 8007214:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007216:	f027 0701 	bic.w	r7, r7, #1
                      sConfig->ICSelection,
 800721a:	e9d1 4500 	ldrd	r4, r5, [r1]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800721e:	4562      	cmp	r2, ip
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007220:	6217      	str	r7, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007222:	6997      	ldr	r7, [r2, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007224:	d015      	beq.n	8007252 <HAL_TIM_IC_ConfigChannel+0x76>
 8007226:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800722a:	d012      	beq.n	8007252 <HAL_TIM_IC_ConfigChannel+0x76>
 800722c:	f5ac 3c94 	sub.w	ip, ip, #75776	@ 0x12800
 8007230:	4562      	cmp	r2, ip
 8007232:	d00e      	beq.n	8007252 <HAL_TIM_IC_ConfigChannel+0x76>
 8007234:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8007238:	4562      	cmp	r2, ip
 800723a:	d00a      	beq.n	8007252 <HAL_TIM_IC_ConfigChannel+0x76>
 800723c:	f50c 3c96 	add.w	ip, ip, #76800	@ 0x12c00
 8007240:	4562      	cmp	r2, ip
 8007242:	d006      	beq.n	8007252 <HAL_TIM_IC_ConfigChannel+0x76>
 8007244:	f50c 6c40 	add.w	ip, ip, #3072	@ 0xc00
 8007248:	4562      	cmp	r2, ip
 800724a:	d002      	beq.n	8007252 <HAL_TIM_IC_ConfigChannel+0x76>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800724c:	f047 0c01 	orr.w	ip, r7, #1
 8007250:	e003      	b.n	800725a <HAL_TIM_IC_ConfigChannel+0x7e>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007252:	f027 0703 	bic.w	r7, r7, #3
    tmpccmr1 |= TIM_ICSelection;
 8007256:	ea45 0c07 	orr.w	ip, r5, r7
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800725a:	0100      	lsls	r0, r0, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800725c:	f02c 0cf0 	bic.w	ip, ip, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007260:	b2c0      	uxtb	r0, r0
 8007262:	ea40 000c 	orr.w	r0, r0, ip
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007266:	6190      	str	r0, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007268:	f026 050a 	bic.w	r5, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800726c:	f004 000a 	and.w	r0, r4, #10
 8007270:	4328      	orrs	r0, r5
  TIMx->CCER = tmpccer;
 8007272:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007274:	6990      	ldr	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007276:	688c      	ldr	r4, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007278:	f020 000c 	bic.w	r0, r0, #12
 800727c:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800727e:	6991      	ldr	r1, [r2, #24]
 8007280:	4321      	orrs	r1, r4
 8007282:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 8007284:	2200      	movs	r2, #0
 8007286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800728a:	2000      	movs	r0, #0
}
 800728c:	bcf0      	pop	{r4, r5, r6, r7}
 800728e:	4770      	bx	lr
                      sConfig->ICSelection,
 8007290:	e9d1 0600 	ldrd	r0, r6, [r1]
    TIM_TI2_SetConfig(htim->Instance,
 8007294:	681a      	ldr	r2, [r3, #0]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007296:	0104      	lsls	r4, r0, #4
  tmpccer = TIMx->CCER;
 8007298:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800729a:	6a15      	ldr	r5, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800729c:	f020 00a0 	bic.w	r0, r0, #160	@ 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072a0:	f025 0510 	bic.w	r5, r5, #16
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80072a4:	f004 04a0 	and.w	r4, r4, #160	@ 0xa0
 80072a8:	4304      	orrs	r4, r0
                      sConfig->ICFilter);
 80072aa:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072ac:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80072ae:	688d      	ldr	r5, [r1, #8]
  tmpccmr1 = TIMx->CCMR1;
 80072b0:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80072b2:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80072b6:	0300      	lsls	r0, r0, #12
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80072b8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80072bc:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072be:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80072c2:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072c4:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 80072c6:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80072c8:	6991      	ldr	r1, [r2, #24]
 80072ca:	f421 6140 	bic.w	r1, r1, #3072	@ 0xc00
 80072ce:	6191      	str	r1, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80072d0:	6991      	ldr	r1, [r2, #24]
 80072d2:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 80072d6:	6191      	str	r1, [r2, #24]
 80072d8:	e7d4      	b.n	8007284 <HAL_TIM_IC_ConfigChannel+0xa8>
                      sConfig->ICSelection,
 80072da:	e9d1 0600 	ldrd	r0, r6, [r1]
    TIM_TI4_SetConfig(htim->Instance,
 80072de:	681a      	ldr	r2, [r3, #0]
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80072e0:	0304      	lsls	r4, r0, #12
  tmpccer = TIMx->CCER;
 80072e2:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072e4:	6a15      	ldr	r5, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80072e6:	f420 4020 	bic.w	r0, r0, #40960	@ 0xa000
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072ea:	f425 5580 	bic.w	r5, r5, #4096	@ 0x1000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80072ee:	f404 4420 	and.w	r4, r4, #40960	@ 0xa000
 80072f2:	4304      	orrs	r4, r0
                      sConfig->ICFilter);
 80072f4:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072f6:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80072f8:	688d      	ldr	r5, [r1, #8]
  tmpccmr2 = TIMx->CCMR2;
 80072fa:	69d1      	ldr	r1, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80072fc:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007300:	0300      	lsls	r0, r0, #12
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007302:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007306:	b280      	uxth	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007308:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800730c:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800730e:	61d1      	str	r1, [r2, #28]
  TIMx->CCER = tmpccer ;
 8007310:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007312:	69d1      	ldr	r1, [r2, #28]
 8007314:	f421 6140 	bic.w	r1, r1, #3072	@ 0xc00
 8007318:	61d1      	str	r1, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800731a:	69d1      	ldr	r1, [r2, #28]
 800731c:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8007320:	61d1      	str	r1, [r2, #28]
 8007322:	e7af      	b.n	8007284 <HAL_TIM_IC_ConfigChannel+0xa8>
                      sConfig->ICSelection,
 8007324:	e9d1 0500 	ldrd	r0, r5, [r1]
    TIM_TI3_SetConfig(htim->Instance,
 8007328:	681a      	ldr	r2, [r3, #0]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800732a:	0204      	lsls	r4, r0, #8
  tmpccer = TIMx->CCER;
 800732c:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800732e:	6a16      	ldr	r6, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007330:	f420 6020 	bic.w	r0, r0, #2560	@ 0xa00
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007334:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007338:	f404 6420 	and.w	r4, r4, #2560	@ 0xa00
 800733c:	4304      	orrs	r4, r0
                      sConfig->ICFilter);
 800733e:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007340:	6216      	str	r6, [r2, #32]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007342:	688e      	ldr	r6, [r1, #8]
  tmpccmr2 = TIMx->CCMR2;
 8007344:	69d1      	ldr	r1, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007346:	f021 0103 	bic.w	r1, r1, #3
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800734a:	0100      	lsls	r0, r0, #4
  tmpccmr2 |= TIM_ICSelection;
 800734c:	4329      	orrs	r1, r5
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800734e:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007350:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007354:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 8007356:	61d1      	str	r1, [r2, #28]
  TIMx->CCER = tmpccer;
 8007358:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800735a:	69d1      	ldr	r1, [r2, #28]
 800735c:	f021 010c 	bic.w	r1, r1, #12
 8007360:	61d1      	str	r1, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007362:	69d1      	ldr	r1, [r2, #28]
 8007364:	4331      	orrs	r1, r6
 8007366:	61d1      	str	r1, [r2, #28]
 8007368:	e78c      	b.n	8007284 <HAL_TIM_IC_ConfigChannel+0xa8>
  __HAL_LOCK(htim);
 800736a:	2002      	movs	r0, #2
}
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	40012c00 	.word	0x40012c00

08007374 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8007374:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007376:	6a02      	ldr	r2, [r0, #32]
 8007378:	f022 0210 	bic.w	r2, r2, #16
 800737c:	6202      	str	r2, [r0, #32]
{
 800737e:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8007380:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8007382:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007384:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007386:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800738a:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800738e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007392:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8007394:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007398:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800739c:	4d14      	ldr	r5, [pc, #80]	@ (80073f0 <TIM_OC2_SetConfig+0x7c>)
 800739e:	42a8      	cmp	r0, r5
 80073a0:	d00f      	beq.n	80073c2 <TIM_OC2_SetConfig+0x4e>
 80073a2:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80073a6:	42a8      	cmp	r0, r5
 80073a8:	d00b      	beq.n	80073c2 <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073aa:	4d12      	ldr	r5, [pc, #72]	@ (80073f4 <TIM_OC2_SetConfig+0x80>)
 80073ac:	42a8      	cmp	r0, r5
 80073ae:	d00f      	beq.n	80073d0 <TIM_OC2_SetConfig+0x5c>
 80073b0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80073b4:	42a8      	cmp	r0, r5
 80073b6:	d00b      	beq.n	80073d0 <TIM_OC2_SetConfig+0x5c>
 80073b8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80073bc:	42a8      	cmp	r0, r5
 80073be:	d10f      	bne.n	80073e0 <TIM_OC2_SetConfig+0x6c>
 80073c0:	e006      	b.n	80073d0 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073c2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80073c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073c8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80073cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073d0:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073d4:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073d8:	ea46 0c05 	orr.w	ip, r6, r5
 80073dc:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 80073e0:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80073e2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80073e4:	6182      	str	r2, [r0, #24]
}
 80073e6:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 80073e8:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80073ea:	6203      	str	r3, [r0, #32]
}
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	40012c00 	.word	0x40012c00
 80073f4:	40014000 	.word	0x40014000

080073f8 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80073f8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	f000 80dc 	beq.w	80075ba <HAL_TIM_PWM_ConfigChannel+0x1c2>
 8007402:	2301      	movs	r3, #1
{
 8007404:	b570      	push	{r4, r5, r6, lr}
 8007406:	4604      	mov	r4, r0
 8007408:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 800740a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800740e:	2a14      	cmp	r2, #20
 8007410:	d80c      	bhi.n	800742c <HAL_TIM_PWM_ConfigChannel+0x34>
 8007412:	e8df f002 	tbb	[pc, r2]
 8007416:	0b4f      	.short	0x0b4f
 8007418:	0b630b0b 	.word	0x0b630b0b
 800741c:	0b740b0b 	.word	0x0b740b0b
 8007420:	0b840b0b 	.word	0x0b840b0b
 8007424:	0b950b0b 	.word	0x0b950b0b
 8007428:	0b0b      	.short	0x0b0b
 800742a:	10          	.byte	0x10
 800742b:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 800742c:	2300      	movs	r3, #0
 800742e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  switch (Channel)
 8007432:	2001      	movs	r0, #1
}
 8007434:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007436:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007438:	682e      	ldr	r6, [r5, #0]
  tmpccer = TIMx->CCER;
 800743a:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800743c:	6a19      	ldr	r1, [r3, #32]
 800743e:	f421 1180 	bic.w	r1, r1, #1048576	@ 0x100000
 8007442:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8007444:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8007446:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007448:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 800744c:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007450:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007454:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007456:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800745a:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800745e:	4e58      	ldr	r6, [pc, #352]	@ (80075c0 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8007460:	42b3      	cmp	r3, r6
 8007462:	d00f      	beq.n	8007484 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8007464:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8007468:	42b3      	cmp	r3, r6
 800746a:	d00b      	beq.n	8007484 <HAL_TIM_PWM_ConfigChannel+0x8c>
 800746c:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 8007470:	42b3      	cmp	r3, r6
 8007472:	d007      	beq.n	8007484 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8007474:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8007478:	42b3      	cmp	r3, r6
 800747a:	d003      	beq.n	8007484 <HAL_TIM_PWM_ConfigChannel+0x8c>
 800747c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8007480:	42b3      	cmp	r3, r6
 8007482:	d104      	bne.n	800748e <HAL_TIM_PWM_ConfigChannel+0x96>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007484:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007486:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800748a:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 800748e:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8007490:	6519      	str	r1, [r3, #80]	@ 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8007492:	6869      	ldr	r1, [r5, #4]
 8007494:	64d9      	str	r1, [r3, #76]	@ 0x4c
  TIMx->CCER = tmpccer;
 8007496:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007498:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800749a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800749c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80074a0:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80074a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80074a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074a8:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80074aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80074ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80074b0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80074b2:	e00e      	b.n	80074d2 <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074b4:	6800      	ldr	r0, [r0, #0]
 80074b6:	f7ff fc57 	bl	8006d68 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80074ba:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80074bc:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80074be:	f043 0308 	orr.w	r3, r3, #8
 80074c2:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80074c4:	6983      	ldr	r3, [r0, #24]
 80074c6:	f023 0304 	bic.w	r3, r3, #4
 80074ca:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80074cc:	6983      	ldr	r3, [r0, #24]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 80074d2:	2300      	movs	r3, #0
 80074d4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80074d8:	2000      	movs	r0, #0
}
 80074da:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80074dc:	6800      	ldr	r0, [r0, #0]
 80074de:	f7ff ff49 	bl	8007374 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80074e2:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074e4:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80074e6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80074ea:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80074ec:	6983      	ldr	r3, [r0, #24]
 80074ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80074f2:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074f4:	6983      	ldr	r3, [r0, #24]
 80074f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80074fa:	6183      	str	r3, [r0, #24]
      break;
 80074fc:	e7e9      	b.n	80074d2 <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074fe:	6800      	ldr	r0, [r0, #0]
 8007500:	f7ff fc6e 	bl	8006de0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007504:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007506:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007508:	f043 0308 	orr.w	r3, r3, #8
 800750c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800750e:	69c3      	ldr	r3, [r0, #28]
 8007510:	f023 0304 	bic.w	r3, r3, #4
 8007514:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007516:	69c3      	ldr	r3, [r0, #28]
 8007518:	4313      	orrs	r3, r2
 800751a:	61c3      	str	r3, [r0, #28]
      break;
 800751c:	e7d9      	b.n	80074d2 <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800751e:	6800      	ldr	r0, [r0, #0]
 8007520:	f7ff fc9e 	bl	8006e60 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007524:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007526:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007528:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800752c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800752e:	69c3      	ldr	r3, [r0, #28]
 8007530:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007534:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007536:	69c3      	ldr	r3, [r0, #28]
 8007538:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800753c:	61c3      	str	r3, [r0, #28]
      break;
 800753e:	e7c8      	b.n	80074d2 <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007540:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8007542:	682e      	ldr	r6, [r5, #0]
  tmpccer = TIMx->CCER;
 8007544:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007546:	6a19      	ldr	r1, [r3, #32]
 8007548:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800754c:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800754e:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8007550:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007552:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8007556:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 800755a:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800755c:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 800755e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007562:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007566:	4e16      	ldr	r6, [pc, #88]	@ (80075c0 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8007568:	42b3      	cmp	r3, r6
 800756a:	d00f      	beq.n	800758c <HAL_TIM_PWM_ConfigChannel+0x194>
 800756c:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8007570:	42b3      	cmp	r3, r6
 8007572:	d00b      	beq.n	800758c <HAL_TIM_PWM_ConfigChannel+0x194>
 8007574:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 8007578:	42b3      	cmp	r3, r6
 800757a:	d007      	beq.n	800758c <HAL_TIM_PWM_ConfigChannel+0x194>
 800757c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8007580:	42b3      	cmp	r3, r6
 8007582:	d003      	beq.n	800758c <HAL_TIM_PWM_ConfigChannel+0x194>
 8007584:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8007588:	42b3      	cmp	r3, r6
 800758a:	d104      	bne.n	8007596 <HAL_TIM_PWM_ConfigChannel+0x19e>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800758c:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800758e:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007592:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8007596:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8007598:	6519      	str	r1, [r3, #80]	@ 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 800759a:	6869      	ldr	r1, [r5, #4]
 800759c:	6499      	str	r1, [r3, #72]	@ 0x48
  TIMx->CCER = tmpccer;
 800759e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80075a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80075a2:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80075a4:	f042 0208 	orr.w	r2, r2, #8
 80075a8:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80075aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80075ac:	f022 0204 	bic.w	r2, r2, #4
 80075b0:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80075b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80075b4:	430a      	orrs	r2, r1
 80075b6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80075b8:	e78b      	b.n	80074d2 <HAL_TIM_PWM_ConfigChannel+0xda>
  __HAL_LOCK(htim);
 80075ba:	2002      	movs	r0, #2
}
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	40012c00 	.word	0x40012c00

080075c4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075c4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d046      	beq.n	800765a <HAL_TIMEx_MasterConfigSynchronization+0x96>
{
 80075cc:	b470      	push	{r4, r5, r6}
 80075ce:	4602      	mov	r2, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075d0:	4e23      	ldr	r6, [pc, #140]	@ (8007660 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
  tmpcr2 = htim->Instance->CR2;
 80075d2:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80075d4:	2302      	movs	r3, #2
 80075d6:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075da:	42b0      	cmp	r0, r6
  tmpcr2 = htim->Instance->CR2;
 80075dc:	6843      	ldr	r3, [r0, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075de:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80075e0:	6884      	ldr	r4, [r0, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075e2:	d024      	beq.n	800762e <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 80075e4:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 80075e8:	42b0      	cmp	r0, r6
 80075ea:	d02b      	beq.n	8007644 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  tmpcr2 &= ~TIM_CR2_MMS;
 80075ec:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80075f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075f4:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075f6:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 80075fa:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075fc:	d00a      	beq.n	8007614 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 80075fe:	4b19      	ldr	r3, [pc, #100]	@ (8007664 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8007600:	4298      	cmp	r0, r3
 8007602:	d007      	beq.n	8007614 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8007604:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007608:	4298      	cmp	r0, r3
 800760a:	d003      	beq.n	8007614 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 800760c:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8007610:	4298      	cmp	r0, r3
 8007612:	d104      	bne.n	800761e <HAL_TIMEx_MasterConfigSynchronization+0x5a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007614:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007616:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800761a:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800761c:	6084      	str	r4, [r0, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800761e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007620:	2301      	movs	r3, #1
 8007622:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8007626:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 800762a:	bc70      	pop	{r4, r5, r6}
 800762c:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800762e:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007630:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007634:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8007636:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800763a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800763e:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8007640:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007642:	e7e7      	b.n	8007614 <HAL_TIMEx_MasterConfigSynchronization+0x50>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007644:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007646:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800764a:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 800764c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007650:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007654:	431d      	orrs	r5, r3
  htim->Instance->CR2 = tmpcr2;
 8007656:	6045      	str	r5, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007658:	e7dc      	b.n	8007614 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  __HAL_LOCK(htim);
 800765a:	2002      	movs	r0, #2
}
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	40012c00 	.word	0x40012c00
 8007664:	40000400 	.word	0x40000400

08007668 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007668:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800766c:	2b01      	cmp	r3, #1
 800766e:	d045      	beq.n	80076fc <HAL_TIMEx_ConfigBreakDeadTime+0x94>
{
 8007670:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007672:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8007676:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800767a:	4602      	mov	r2, r0
 800767c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800767e:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007680:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007682:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007686:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007688:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800768c:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800768e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007690:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007694:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007696:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007698:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800769c:	6b08      	ldr	r0, [r1, #48]	@ 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800769e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80076a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80076a4:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80076a6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80076a8:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80076ac:	69c8      	ldr	r0, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80076ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80076b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80076b6:	4c12      	ldr	r4, [pc, #72]	@ (8007700 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80076b8:	4303      	orrs	r3, r0
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80076ba:	6810      	ldr	r0, [r2, #0]
 80076bc:	42a0      	cmp	r0, r4
 80076be:	d00b      	beq.n	80076d8 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 80076c0:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 80076c4:	42a0      	cmp	r0, r4
 80076c6:	d007      	beq.n	80076d8 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80076c8:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80076ca:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 80076cc:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 80076d0:	4608      	mov	r0, r1
}
 80076d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076d6:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80076d8:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80076da:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80076de:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80076e2:	6a0c      	ldr	r4, [r1, #32]
 80076e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80076e8:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80076ea:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80076ec:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80076ee:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80076f2:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80076f4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80076f8:	430b      	orrs	r3, r1
 80076fa:	e7e5      	b.n	80076c8 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
  __HAL_LOCK(htim);
 80076fc:	2002      	movs	r0, #2
}
 80076fe:	4770      	bx	lr
 8007700:	40012c00 	.word	0x40012c00

08007704 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8007704:	4603      	mov	r3, r0
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8007706:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 800770a:	2801      	cmp	r0, #1
 800770c:	d047      	beq.n	800779e <HAL_TIMEx_ConfigBreakInput+0x9a>

  switch (sBreakInputConfig->Source)
 800770e:	6810      	ldr	r0, [r2, #0]
 8007710:	3801      	subs	r0, #1
 8007712:	280f      	cmp	r0, #15
{
 8007714:	b4f0      	push	{r4, r5, r6, r7}
 8007716:	d825      	bhi.n	8007764 <HAL_TIMEx_ConfigBreakInput+0x60>
 8007718:	4c22      	ldr	r4, [pc, #136]	@ (80077a4 <HAL_TIMEx_ConfigBreakInput+0xa0>)
 800771a:	4e23      	ldr	r6, [pc, #140]	@ (80077a8 <HAL_TIMEx_ConfigBreakInput+0xa4>)
 800771c:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 8007720:	f856 c020 	ldr.w	ip, [r6, r0, lsl #2]
 8007724:	4c21      	ldr	r4, [pc, #132]	@ (80077ac <HAL_TIMEx_ConfigBreakInput+0xa8>)
 8007726:	4e22      	ldr	r6, [pc, #136]	@ (80077b0 <HAL_TIMEx_ConfigBreakInput+0xac>)
 8007728:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 800772c:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 8007730:	2901      	cmp	r1, #1
 8007732:	d01d      	beq.n	8007770 <HAL_TIMEx_ConfigBreakInput+0x6c>
 8007734:	2902      	cmp	r1, #2
 8007736:	d12c      	bne.n	8007792 <HAL_TIMEx_ConfigBreakInput+0x8e>
      tmporx &= ~bkin_enable_mask;
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007738:	6890      	ldr	r0, [r2, #8]
      tmporx = htim->Instance->AF2;
 800773a:	681e      	ldr	r6, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800773c:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800773e:	40b8      	lsls	r0, r7
      tmporx = htim->Instance->AF2;
 8007740:	6e77      	ldr	r7, [r6, #100]	@ 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007742:	fa01 f10c 	lsl.w	r1, r1, ip
 8007746:	ea81 0207 	eor.w	r2, r1, r7
 800774a:	402a      	ands	r2, r5
 800774c:	407a      	eors	r2, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800774e:	ea80 0102 	eor.w	r1, r0, r2
 8007752:	4021      	ands	r1, r4
 8007754:	404a      	eors	r2, r1

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8007756:	6672      	str	r2, [r6, #100]	@ 0x64
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 8007758:	2200      	movs	r2, #0
 800775a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800775e:	2000      	movs	r0, #0

  return status;
}
 8007760:	bcf0      	pop	{r4, r5, r6, r7}
 8007762:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 8007764:	2700      	movs	r7, #0
  switch (BreakInput)
 8007766:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 8007768:	46bc      	mov	ip, r7
 800776a:	463c      	mov	r4, r7
 800776c:	463d      	mov	r5, r7
  switch (BreakInput)
 800776e:	d1e1      	bne.n	8007734 <HAL_TIMEx_ConfigBreakInput+0x30>
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007770:	6890      	ldr	r0, [r2, #8]
      tmporx = htim->Instance->AF1;
 8007772:	681e      	ldr	r6, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007774:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007776:	40b8      	lsls	r0, r7
      tmporx = htim->Instance->AF1;
 8007778:	6e37      	ldr	r7, [r6, #96]	@ 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800777a:	fa01 f10c 	lsl.w	r1, r1, ip
 800777e:	ea81 0207 	eor.w	r2, r1, r7
 8007782:	402a      	ands	r2, r5
 8007784:	407a      	eors	r2, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007786:	ea80 0102 	eor.w	r1, r0, r2
 800778a:	4021      	ands	r1, r4
 800778c:	404a      	eors	r2, r1
      htim->Instance->AF1 = tmporx;
 800778e:	6632      	str	r2, [r6, #96]	@ 0x60
      break;
 8007790:	e7e2      	b.n	8007758 <HAL_TIMEx_ConfigBreakInput+0x54>
  __HAL_UNLOCK(htim);
 8007792:	2200      	movs	r2, #0
 8007794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  switch (BreakInput)
 8007798:	2001      	movs	r0, #1
}
 800779a:	bcf0      	pop	{r4, r5, r6, r7}
 800779c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800779e:	2002      	movs	r0, #2
}
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	0800a440 	.word	0x0800a440
 80077a8:	0800a3c0 	.word	0x0800a3c0
 80077ac:	0800a400 	.word	0x0800a400
 80077b0:	0800a380 	.word	0x0800a380

080077b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077b4:	b570      	push	{r4, r5, r6, lr}
 80077b6:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80077b8:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077ba:	6882      	ldr	r2, [r0, #8]
 80077bc:	6900      	ldr	r0, [r0, #16]
 80077be:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077c0:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077c2:	4302      	orrs	r2, r0
 80077c4:	430a      	orrs	r2, r1
 80077c6:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077c8:	4995      	ldr	r1, [pc, #596]	@ (8007a20 <UART_SetConfig+0x26c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077ca:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077cc:	4029      	ands	r1, r5
 80077ce:	430a      	orrs	r2, r1
 80077d0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077d2:	685a      	ldr	r2, [r3, #4]
 80077d4:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80077d6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077d8:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80077dc:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077de:	4991      	ldr	r1, [pc, #580]	@ (8007a24 <UART_SetConfig+0x270>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077e0:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077e2:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077e4:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077e6:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077e8:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 80077ec:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077f0:	f000 80bb 	beq.w	800796a <UART_SetConfig+0x1b6>
    tmpreg |= huart->Init.OneBitSampling;
 80077f4:	6a26      	ldr	r6, [r4, #32]
 80077f6:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077f8:	430a      	orrs	r2, r1
 80077fa:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80077fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077fe:	f022 020f 	bic.w	r2, r2, #15
 8007802:	432a      	orrs	r2, r5
 8007804:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007806:	4a88      	ldr	r2, [pc, #544]	@ (8007a28 <UART_SetConfig+0x274>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d035      	beq.n	8007878 <UART_SetConfig+0xc4>
 800780c:	4a87      	ldr	r2, [pc, #540]	@ (8007a2c <UART_SetConfig+0x278>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d00e      	beq.n	8007830 <UART_SetConfig+0x7c>
 8007812:	4a87      	ldr	r2, [pc, #540]	@ (8007a30 <UART_SetConfig+0x27c>)
 8007814:	4293      	cmp	r3, r2
 8007816:	f000 8098 	beq.w	800794a <UART_SetConfig+0x196>
 800781a:	4a86      	ldr	r2, [pc, #536]	@ (8007a34 <UART_SetConfig+0x280>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d03f      	beq.n	80078a0 <UART_SetConfig+0xec>

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
      {
        ret = HAL_ERROR;
 8007820:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007822:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8007824:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->TxISR = NULL;
 8007828:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 800782c:	66a2      	str	r2, [r4, #104]	@ 0x68

  return ret;
}
 800782e:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007830:	4b81      	ldr	r3, [pc, #516]	@ (8007a38 <UART_SetConfig+0x284>)
 8007832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007836:	f003 030c 	and.w	r3, r3, #12
 800783a:	2b0c      	cmp	r3, #12
 800783c:	d8f0      	bhi.n	8007820 <UART_SetConfig+0x6c>
 800783e:	a201      	add	r2, pc, #4	@ (adr r2, 8007844 <UART_SetConfig+0x90>)
 8007840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007844:	0800793f 	.word	0x0800793f
 8007848:	08007821 	.word	0x08007821
 800784c:	08007821 	.word	0x08007821
 8007850:	08007821 	.word	0x08007821
 8007854:	080078b9 	.word	0x080078b9
 8007858:	08007821 	.word	0x08007821
 800785c:	08007821 	.word	0x08007821
 8007860:	08007821 	.word	0x08007821
 8007864:	08007901 	.word	0x08007901
 8007868:	08007821 	.word	0x08007821
 800786c:	08007821 	.word	0x08007821
 8007870:	08007821 	.word	0x08007821
 8007874:	080078d1 	.word	0x080078d1
 8007878:	4b6f      	ldr	r3, [pc, #444]	@ (8007a38 <UART_SetConfig+0x284>)
 800787a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800787e:	f003 0303 	and.w	r3, r3, #3
 8007882:	2b02      	cmp	r3, #2
 8007884:	d03c      	beq.n	8007900 <UART_SetConfig+0x14c>
 8007886:	2b03      	cmp	r3, #3
 8007888:	d022      	beq.n	80078d0 <UART_SetConfig+0x11c>
 800788a:	2b01      	cmp	r3, #1
 800788c:	d014      	beq.n	80078b8 <UART_SetConfig+0x104>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800788e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007892:	f000 80bc 	beq.w	8007a0e <UART_SetConfig+0x25a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007896:	f7ff f8fd 	bl	8006a94 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800789a:	b9a8      	cbnz	r0, 80078c8 <UART_SetConfig+0x114>
        pclk = (uint32_t) HSI_VALUE;
 800789c:	2000      	movs	r0, #0
 800789e:	e7c0      	b.n	8007822 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078a0:	4b65      	ldr	r3, [pc, #404]	@ (8007a38 <UART_SetConfig+0x284>)
 80078a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80078aa:	2b80      	cmp	r3, #128	@ 0x80
 80078ac:	d028      	beq.n	8007900 <UART_SetConfig+0x14c>
 80078ae:	d859      	bhi.n	8007964 <UART_SetConfig+0x1b0>
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d044      	beq.n	800793e <UART_SetConfig+0x18a>
 80078b4:	2b40      	cmp	r3, #64	@ 0x40
 80078b6:	d1b3      	bne.n	8007820 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078b8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80078bc:	f000 80aa 	beq.w	8007a14 <UART_SetConfig+0x260>
        pclk = HAL_RCC_GetSysClockFreq();
 80078c0:	f7fe ff94 	bl	80067ec <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80078c4:	2800      	cmp	r0, #0
 80078c6:	d0e9      	beq.n	800789c <UART_SetConfig+0xe8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078c8:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80078ca:	e006      	b.n	80078da <UART_SetConfig+0x126>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078cc:	2b30      	cmp	r3, #48	@ 0x30
 80078ce:	d1a7      	bne.n	8007820 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078d0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80078d4:	d018      	beq.n	8007908 <UART_SetConfig+0x154>
        pclk = (uint32_t) LSE_VALUE;
 80078d6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078da:	6863      	ldr	r3, [r4, #4]
 80078dc:	4a57      	ldr	r2, [pc, #348]	@ (8007a3c <UART_SetConfig+0x288>)
 80078de:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
 80078e2:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078e6:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078ea:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80078ee:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078f2:	f1a0 0310 	sub.w	r3, r0, #16
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d892      	bhi.n	8007820 <UART_SetConfig+0x6c>
          huart->Instance->BRR = usartdiv;
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	60d8      	str	r0, [r3, #12]
 80078fe:	e7cd      	b.n	800789c <UART_SetConfig+0xe8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007900:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8007904:	484e      	ldr	r0, [pc, #312]	@ (8007a40 <UART_SetConfig+0x28c>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007906:	d1e8      	bne.n	80078da <UART_SetConfig+0x126>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007908:	6862      	ldr	r2, [r4, #4]
 800790a:	4b4c      	ldr	r3, [pc, #304]	@ (8007a3c <UART_SetConfig+0x288>)
 800790c:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 8007910:	fbb0 f0f1 	udiv	r0, r0, r1
 8007914:	0853      	lsrs	r3, r2, #1
 8007916:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800791a:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800791e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007922:	f1a3 0210 	sub.w	r2, r3, #16
 8007926:	428a      	cmp	r2, r1
 8007928:	f63f af7a 	bhi.w	8007820 <UART_SetConfig+0x6c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800792c:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8007930:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007932:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007934:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8007938:	4313      	orrs	r3, r2
 800793a:	60cb      	str	r3, [r1, #12]
 800793c:	e7ae      	b.n	800789c <UART_SetConfig+0xe8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800793e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007942:	d05d      	beq.n	8007a00 <UART_SetConfig+0x24c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007944:	f7ff f894 	bl	8006a70 <HAL_RCC_GetPCLK1Freq>
        break;
 8007948:	e7a7      	b.n	800789a <UART_SetConfig+0xe6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800794a:	4b3b      	ldr	r3, [pc, #236]	@ (8007a38 <UART_SetConfig+0x284>)
 800794c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007950:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007954:	2b20      	cmp	r3, #32
 8007956:	d0d3      	beq.n	8007900 <UART_SetConfig+0x14c>
 8007958:	d8b8      	bhi.n	80078cc <UART_SetConfig+0x118>
 800795a:	2b00      	cmp	r3, #0
 800795c:	d0ef      	beq.n	800793e <UART_SetConfig+0x18a>
 800795e:	2b10      	cmp	r3, #16
 8007960:	d0aa      	beq.n	80078b8 <UART_SetConfig+0x104>
 8007962:	e75d      	b.n	8007820 <UART_SetConfig+0x6c>
 8007964:	2bc0      	cmp	r3, #192	@ 0xc0
 8007966:	d0b3      	beq.n	80078d0 <UART_SetConfig+0x11c>
 8007968:	e75a      	b.n	8007820 <UART_SetConfig+0x6c>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800796a:	4311      	orrs	r1, r2
 800796c:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800796e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007970:	4931      	ldr	r1, [pc, #196]	@ (8007a38 <UART_SetConfig+0x284>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007972:	f022 020f 	bic.w	r2, r2, #15
 8007976:	432a      	orrs	r2, r5
 8007978:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800797a:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800797e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007982:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007986:	d048      	beq.n	8007a1a <UART_SetConfig+0x266>
 8007988:	d833      	bhi.n	80079f2 <UART_SetConfig+0x23e>
 800798a:	b37b      	cbz	r3, 80079ec <UART_SetConfig+0x238>
 800798c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007990:	f47f af46 	bne.w	8007820 <UART_SetConfig+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 8007994:	f7fe ff2a 	bl	80067ec <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8007998:	2800      	cmp	r0, #0
 800799a:	f43f af7f 	beq.w	800789c <UART_SetConfig+0xe8>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800799e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079a0:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80079a2:	4b26      	ldr	r3, [pc, #152]	@ (8007a3c <UART_SetConfig+0x288>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079a4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80079a8:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 80079ac:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079b0:	4299      	cmp	r1, r3
 80079b2:	f63f af35 	bhi.w	8007820 <UART_SetConfig+0x6c>
 80079b6:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 80079ba:	f63f af31 	bhi.w	8007820 <UART_SetConfig+0x6c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079be:	2300      	movs	r3, #0
 80079c0:	4619      	mov	r1, r3
 80079c2:	f7f8 fc29 	bl	8000218 <__aeabi_uldivmod>
 80079c6:	0872      	lsrs	r2, r6, #1
 80079c8:	0203      	lsls	r3, r0, #8
 80079ca:	0209      	lsls	r1, r1, #8
 80079cc:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80079d0:	1898      	adds	r0, r3, r2
 80079d2:	f141 0100 	adc.w	r1, r1, #0
 80079d6:	4632      	mov	r2, r6
 80079d8:	2300      	movs	r3, #0
 80079da:	f7f8 fc1d 	bl	8000218 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079de:	4b19      	ldr	r3, [pc, #100]	@ (8007a44 <UART_SetConfig+0x290>)
 80079e0:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 80079e4:	429a      	cmp	r2, r3
 80079e6:	f63f af1b 	bhi.w	8007820 <UART_SetConfig+0x6c>
 80079ea:	e786      	b.n	80078fa <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetPCLK1Freq();
 80079ec:	f7ff f840 	bl	8006a70 <HAL_RCC_GetPCLK1Freq>
        break;
 80079f0:	e7d2      	b.n	8007998 <UART_SetConfig+0x1e4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079f6:	f47f af13 	bne.w	8007820 <UART_SetConfig+0x6c>
        pclk = (uint32_t) LSE_VALUE;
 80079fa:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80079fe:	e7cf      	b.n	80079a0 <UART_SetConfig+0x1ec>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a00:	f7ff f836 	bl	8006a70 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007a04:	2800      	cmp	r0, #0
 8007a06:	f43f af49 	beq.w	800789c <UART_SetConfig+0xe8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a0a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8007a0c:	e77c      	b.n	8007908 <UART_SetConfig+0x154>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a0e:	f7ff f841 	bl	8006a94 <HAL_RCC_GetPCLK2Freq>
        break;
 8007a12:	e7f7      	b.n	8007a04 <UART_SetConfig+0x250>
        pclk = HAL_RCC_GetSysClockFreq();
 8007a14:	f7fe feea 	bl	80067ec <HAL_RCC_GetSysClockFreq>
        break;
 8007a18:	e7f4      	b.n	8007a04 <UART_SetConfig+0x250>
        pclk = (uint32_t) HSI_VALUE;
 8007a1a:	4809      	ldr	r0, [pc, #36]	@ (8007a40 <UART_SetConfig+0x28c>)
 8007a1c:	e7c0      	b.n	80079a0 <UART_SetConfig+0x1ec>
 8007a1e:	bf00      	nop
 8007a20:	cfff69f3 	.word	0xcfff69f3
 8007a24:	40008000 	.word	0x40008000
 8007a28:	40013800 	.word	0x40013800
 8007a2c:	40004400 	.word	0x40004400
 8007a30:	40004800 	.word	0x40004800
 8007a34:	40004c00 	.word	0x40004c00
 8007a38:	40021000 	.word	0x40021000
 8007a3c:	0800a480 	.word	0x0800a480
 8007a40:	00f42400 	.word	0x00f42400
 8007a44:	000ffcff 	.word	0x000ffcff

08007a48 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a48:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007a4a:	071a      	lsls	r2, r3, #28
{
 8007a4c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a4e:	d506      	bpl.n	8007a5e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a50:	6801      	ldr	r1, [r0, #0]
 8007a52:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8007a54:	684a      	ldr	r2, [r1, #4]
 8007a56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007a5a:	4322      	orrs	r2, r4
 8007a5c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a5e:	07dc      	lsls	r4, r3, #31
 8007a60:	d506      	bpl.n	8007a70 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a62:	6801      	ldr	r1, [r0, #0]
 8007a64:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8007a66:	684a      	ldr	r2, [r1, #4]
 8007a68:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007a6c:	4322      	orrs	r2, r4
 8007a6e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a70:	0799      	lsls	r1, r3, #30
 8007a72:	d506      	bpl.n	8007a82 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a74:	6801      	ldr	r1, [r0, #0]
 8007a76:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8007a78:	684a      	ldr	r2, [r1, #4]
 8007a7a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007a7e:	4322      	orrs	r2, r4
 8007a80:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a82:	075a      	lsls	r2, r3, #29
 8007a84:	d506      	bpl.n	8007a94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a86:	6801      	ldr	r1, [r0, #0]
 8007a88:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8007a8a:	684a      	ldr	r2, [r1, #4]
 8007a8c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007a90:	4322      	orrs	r2, r4
 8007a92:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a94:	06dc      	lsls	r4, r3, #27
 8007a96:	d506      	bpl.n	8007aa6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a98:	6801      	ldr	r1, [r0, #0]
 8007a9a:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8007a9c:	688a      	ldr	r2, [r1, #8]
 8007a9e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007aa2:	4322      	orrs	r2, r4
 8007aa4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007aa6:	0699      	lsls	r1, r3, #26
 8007aa8:	d506      	bpl.n	8007ab8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007aaa:	6801      	ldr	r1, [r0, #0]
 8007aac:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8007aae:	688a      	ldr	r2, [r1, #8]
 8007ab0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007ab4:	4322      	orrs	r2, r4
 8007ab6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ab8:	065a      	lsls	r2, r3, #25
 8007aba:	d509      	bpl.n	8007ad0 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007abc:	6801      	ldr	r1, [r0, #0]
 8007abe:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8007ac0:	684a      	ldr	r2, [r1, #4]
 8007ac2:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8007ac6:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ac8:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007acc:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ace:	d00b      	beq.n	8007ae8 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ad0:	061b      	lsls	r3, r3, #24
 8007ad2:	d506      	bpl.n	8007ae2 <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ad4:	6802      	ldr	r2, [r0, #0]
 8007ad6:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8007ad8:	6853      	ldr	r3, [r2, #4]
 8007ada:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8007ade:	430b      	orrs	r3, r1
 8007ae0:	6053      	str	r3, [r2, #4]
  }
}
 8007ae2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ae6:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ae8:	684a      	ldr	r2, [r1, #4]
 8007aea:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8007aec:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8007af0:	4322      	orrs	r2, r4
 8007af2:	604a      	str	r2, [r1, #4]
 8007af4:	e7ec      	b.n	8007ad0 <UART_AdvFeatureConfig+0x88>
 8007af6:	bf00      	nop

08007af8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007af8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007afa:	2300      	movs	r3, #0
{
 8007afc:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007afe:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b02:	f7fc feeb 	bl	80048dc <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b06:	6822      	ldr	r2, [r4, #0]
 8007b08:	6813      	ldr	r3, [r2, #0]
 8007b0a:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 8007b0c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b0e:	d40f      	bmi.n	8007b30 <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b10:	6813      	ldr	r3, [r2, #0]
 8007b12:	0759      	lsls	r1, r3, #29
 8007b14:	d431      	bmi.n	8007b7a <UART_CheckIdleState+0x82>
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b16:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8007b18:	2220      	movs	r2, #32
 8007b1a:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 8007b1e:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8007b20:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b24:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b26:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8007b28:	2300      	movs	r3, #0
 8007b2a:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8007b2e:	bd38      	pop	{r3, r4, r5, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b30:	69d3      	ldr	r3, [r2, #28]
 8007b32:	0298      	lsls	r0, r3, #10
 8007b34:	d4ec      	bmi.n	8007b10 <UART_CheckIdleState+0x18>
 8007b36:	e00c      	b.n	8007b52 <UART_CheckIdleState+0x5a>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b38:	6819      	ldr	r1, [r3, #0]
 8007b3a:	0749      	lsls	r1, r1, #29
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	d505      	bpl.n	8007b4c <UART_CheckIdleState+0x54>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b40:	69d9      	ldr	r1, [r3, #28]
 8007b42:	0708      	lsls	r0, r1, #28
 8007b44:	d44a      	bmi.n	8007bdc <UART_CheckIdleState+0xe4>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b46:	69d9      	ldr	r1, [r3, #28]
 8007b48:	0509      	lsls	r1, r1, #20
 8007b4a:	d475      	bmi.n	8007c38 <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b4c:	69db      	ldr	r3, [r3, #28]
 8007b4e:	0298      	lsls	r0, r3, #10
 8007b50:	d4de      	bmi.n	8007b10 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b52:	f7fc fec3 	bl	80048dc <HAL_GetTick>
 8007b56:	1b43      	subs	r3, r0, r5
 8007b58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b5c:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b5e:	d3eb      	bcc.n	8007b38 <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b60:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007b64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b68:	e843 2100 	strex	r1, r2, [r3]
 8007b6c:	2900      	cmp	r1, #0
 8007b6e:	d1f7      	bne.n	8007b60 <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 8007b70:	2320      	movs	r3, #32
 8007b72:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8007b76:	2003      	movs	r0, #3
 8007b78:	e7d6      	b.n	8007b28 <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b7a:	69d3      	ldr	r3, [r2, #28]
 8007b7c:	025b      	lsls	r3, r3, #9
 8007b7e:	d4ca      	bmi.n	8007b16 <UART_CheckIdleState+0x1e>
 8007b80:	e00d      	b.n	8007b9e <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	0750      	lsls	r0, r2, #29
 8007b86:	d507      	bpl.n	8007b98 <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b88:	69da      	ldr	r2, [r3, #28]
 8007b8a:	0711      	lsls	r1, r2, #28
 8007b8c:	f100 8082 	bmi.w	8007c94 <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b90:	69da      	ldr	r2, [r3, #28]
 8007b92:	0512      	lsls	r2, r2, #20
 8007b94:	f100 80ac 	bmi.w	8007cf0 <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b98:	69db      	ldr	r3, [r3, #28]
 8007b9a:	025b      	lsls	r3, r3, #9
 8007b9c:	d4bb      	bmi.n	8007b16 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b9e:	f7fc fe9d 	bl	80048dc <HAL_GetTick>
 8007ba2:	1b43      	subs	r3, r0, r5
 8007ba4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ba8:	6823      	ldr	r3, [r4, #0]
 8007baa:	d3ea      	bcc.n	8007b82 <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bac:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bb0:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb4:	e843 2100 	strex	r1, r2, [r3]
 8007bb8:	2900      	cmp	r1, #0
 8007bba:	d1f7      	bne.n	8007bac <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bbc:	f103 0208 	add.w	r2, r3, #8
 8007bc0:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bc4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc8:	f103 0008 	add.w	r0, r3, #8
 8007bcc:	e840 2100 	strex	r1, r2, [r0]
 8007bd0:	2900      	cmp	r1, #0
 8007bd2:	d1f3      	bne.n	8007bbc <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 8007bd4:	2320      	movs	r3, #32
 8007bd6:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 8007bda:	e7cc      	b.n	8007b76 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bdc:	2208      	movs	r2, #8
 8007bde:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be0:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007be4:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be8:	e843 2100 	strex	r1, r2, [r3]
 8007bec:	2900      	cmp	r1, #0
 8007bee:	d1f7      	bne.n	8007be0 <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bf0:	4856      	ldr	r0, [pc, #344]	@ (8007d4c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf2:	f103 0208 	add.w	r2, r3, #8
 8007bf6:	e852 2f00 	ldrex	r2, [r2]
 8007bfa:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfc:	f103 0508 	add.w	r5, r3, #8
 8007c00:	e845 2100 	strex	r1, r2, [r5]
 8007c04:	2900      	cmp	r1, #0
 8007c06:	d1f4      	bne.n	8007bf2 <UART_CheckIdleState+0xfa>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c08:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8007c0a:	2a01      	cmp	r2, #1
 8007c0c:	d00b      	beq.n	8007c26 <UART_CheckIdleState+0x12e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c0e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007c10:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c12:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8007c14:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c18:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c1a:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8007c1c:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c20:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8007c24:	e79c      	b.n	8007b60 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c26:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c2a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2e:	e843 2100 	strex	r1, r2, [r3]
 8007c32:	2900      	cmp	r1, #0
 8007c34:	d1f7      	bne.n	8007c26 <UART_CheckIdleState+0x12e>
 8007c36:	e7ea      	b.n	8007c0e <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c3c:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c42:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c46:	e843 2100 	strex	r1, r2, [r3]
 8007c4a:	2900      	cmp	r1, #0
 8007c4c:	d1f7      	bne.n	8007c3e <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c4e:	483f      	ldr	r0, [pc, #252]	@ (8007d4c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c50:	f103 0208 	add.w	r2, r3, #8
 8007c54:	e852 2f00 	ldrex	r2, [r2]
 8007c58:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5a:	f103 0508 	add.w	r5, r3, #8
 8007c5e:	e845 2100 	strex	r1, r2, [r5]
 8007c62:	2900      	cmp	r1, #0
 8007c64:	d1f4      	bne.n	8007c50 <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c66:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8007c68:	2a01      	cmp	r2, #1
 8007c6a:	d00a      	beq.n	8007c82 <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c6c:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007c6e:	2120      	movs	r1, #32
 8007c70:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8007c74:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c76:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8007c78:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c7c:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8007c80:	e76e      	b.n	8007b60 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c82:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c86:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8a:	e843 2100 	strex	r1, r2, [r3]
 8007c8e:	2900      	cmp	r1, #0
 8007c90:	d1f7      	bne.n	8007c82 <UART_CheckIdleState+0x18a>
 8007c92:	e7eb      	b.n	8007c6c <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c94:	2208      	movs	r2, #8
 8007c96:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c98:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c9c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca0:	e843 2100 	strex	r1, r2, [r3]
 8007ca4:	2900      	cmp	r1, #0
 8007ca6:	d1f7      	bne.n	8007c98 <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ca8:	4828      	ldr	r0, [pc, #160]	@ (8007d4c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007caa:	f103 0208 	add.w	r2, r3, #8
 8007cae:	e852 2f00 	ldrex	r2, [r2]
 8007cb2:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb4:	f103 0508 	add.w	r5, r3, #8
 8007cb8:	e845 2100 	strex	r1, r2, [r5]
 8007cbc:	2900      	cmp	r1, #0
 8007cbe:	d1f4      	bne.n	8007caa <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cc0:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8007cc2:	2a01      	cmp	r2, #1
 8007cc4:	d00b      	beq.n	8007cde <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cc6:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007cc8:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007cca:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8007ccc:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8007cd0:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cd2:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8007cd4:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007cd8:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8007cdc:	e766      	b.n	8007bac <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cde:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ce2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	e843 2100 	strex	r1, r2, [r3]
 8007cea:	2900      	cmp	r1, #0
 8007cec:	d1f7      	bne.n	8007cde <UART_CheckIdleState+0x1e6>
 8007cee:	e7ea      	b.n	8007cc6 <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007cf0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007cf4:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf6:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cfa:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfe:	e843 2100 	strex	r1, r2, [r3]
 8007d02:	2900      	cmp	r1, #0
 8007d04:	d1f7      	bne.n	8007cf6 <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d06:	4811      	ldr	r0, [pc, #68]	@ (8007d4c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d08:	f103 0208 	add.w	r2, r3, #8
 8007d0c:	e852 2f00 	ldrex	r2, [r2]
 8007d10:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d12:	f103 0508 	add.w	r5, r3, #8
 8007d16:	e845 2100 	strex	r1, r2, [r5]
 8007d1a:	2900      	cmp	r1, #0
 8007d1c:	d1f4      	bne.n	8007d08 <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d1e:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8007d20:	2a01      	cmp	r2, #1
 8007d22:	d00a      	beq.n	8007d3a <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d24:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007d26:	2120      	movs	r1, #32
 8007d28:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8007d2c:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d2e:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8007d30:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d34:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8007d38:	e738      	b.n	8007bac <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d3e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d42:	e843 2100 	strex	r1, r2, [r3]
 8007d46:	2900      	cmp	r1, #0
 8007d48:	d1f7      	bne.n	8007d3a <UART_CheckIdleState+0x242>
 8007d4a:	e7eb      	b.n	8007d24 <UART_CheckIdleState+0x22c>
 8007d4c:	effffffe 	.word	0xeffffffe

08007d50 <HAL_UART_Init>:
  if (huart == NULL)
 8007d50:	b380      	cbz	r0, 8007db4 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8007d52:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8007d56:	b510      	push	{r4, lr}
 8007d58:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007d5a:	b333      	cbz	r3, 8007daa <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8007d5c:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d5e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 8007d60:	2324      	movs	r3, #36	@ 0x24
 8007d62:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8007d66:	6813      	ldr	r3, [r2, #0]
 8007d68:	f023 0301 	bic.w	r3, r3, #1
 8007d6c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d6e:	b9c1      	cbnz	r1, 8007da2 <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d70:	4620      	mov	r0, r4
 8007d72:	f7ff fd1f 	bl	80077b4 <UART_SetConfig>
 8007d76:	2801      	cmp	r0, #1
 8007d78:	d011      	beq.n	8007d9e <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d7a:	6823      	ldr	r3, [r4, #0]
 8007d7c:	685a      	ldr	r2, [r3, #4]
 8007d7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d84:	689a      	ldr	r2, [r3, #8]
 8007d86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d8a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8007d92:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8007d94:	601a      	str	r2, [r3, #0]
}
 8007d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8007d9a:	f7ff bead 	b.w	8007af8 <UART_CheckIdleState>
}
 8007d9e:	2001      	movs	r0, #1
 8007da0:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8007da2:	4620      	mov	r0, r4
 8007da4:	f7ff fe50 	bl	8007a48 <UART_AdvFeatureConfig>
 8007da8:	e7e2      	b.n	8007d70 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8007daa:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8007dae:	f7fc fbff 	bl	80045b0 <HAL_UART_MspInit>
 8007db2:	e7d3      	b.n	8007d5c <HAL_UART_Init+0xc>
}
 8007db4:	2001      	movs	r0, #1
 8007db6:	4770      	bx	lr

08007db8 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007db8:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d017      	beq.n	8007df0 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dc0:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007dc2:	2324      	movs	r3, #36	@ 0x24
{
 8007dc4:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 8007dc6:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dca:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dcc:	6814      	ldr	r4, [r2, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007dce:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 8007dd0:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007dd4:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8007dd8:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007dda:	6643      	str	r3, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ddc:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dde:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 8007de2:	2220      	movs	r2, #32
 8007de4:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88

  return HAL_OK;
}
 8007de8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8007dec:	4618      	mov	r0, r3
}
 8007dee:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007df0:	2002      	movs	r0, #2
}
 8007df2:	4770      	bx	lr

08007df4 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007df4:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8007df8:	2a01      	cmp	r2, #1
 8007dfa:	d037      	beq.n	8007e6c <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8007dfc:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dfe:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007e00:	2024      	movs	r0, #36	@ 0x24
{
 8007e02:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007e04:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e08:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e0a:	6810      	ldr	r0, [r2, #0]
 8007e0c:	f020 0001 	bic.w	r0, r0, #1
 8007e10:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007e12:	6890      	ldr	r0, [r2, #8]
 8007e14:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 8007e18:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e1a:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007e1c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e1e:	b310      	cbz	r0, 8007e66 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e20:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e22:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e24:	4d12      	ldr	r5, [pc, #72]	@ (8007e70 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e26:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e2a:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e2e:	4911      	ldr	r1, [pc, #68]	@ (8007e74 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 8007e30:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e34:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e38:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e3c:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e40:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e42:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e44:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e48:	fbb1 f1f5 	udiv	r1, r1, r5
 8007e4c:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8007e50:	2100      	movs	r1, #0
 8007e52:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8007e56:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e58:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8007e5a:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 8007e5e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007e60:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 8007e64:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8007e66:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8007e68:	4608      	mov	r0, r1
 8007e6a:	e7ef      	b.n	8007e4c <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8007e6c:	2002      	movs	r0, #2
}
 8007e6e:	4770      	bx	lr
 8007e70:	0800a498 	.word	0x0800a498
 8007e74:	0800a4a0 	.word	0x0800a4a0

08007e78 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8007e78:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8007e7c:	2a01      	cmp	r2, #1
 8007e7e:	d037      	beq.n	8007ef0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 8007e80:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e82:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007e84:	2024      	movs	r0, #36	@ 0x24
{
 8007e86:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007e88:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e8c:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8007e8e:	6810      	ldr	r0, [r2, #0]
 8007e90:	f020 0001 	bic.w	r0, r0, #1
 8007e94:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e96:	6890      	ldr	r0, [r2, #8]
 8007e98:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 8007e9c:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e9e:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007ea0:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ea2:	b310      	cbz	r0, 8007eea <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ea4:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ea6:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ea8:	4d12      	ldr	r5, [pc, #72]	@ (8007ef4 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007eaa:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007eae:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007eb2:	4911      	ldr	r1, [pc, #68]	@ (8007ef8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007eb4:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007eb8:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ebc:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ec0:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ec4:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ec6:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ec8:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ecc:	fbb1 f1f5 	udiv	r1, r1, r5
 8007ed0:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8007eda:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007edc:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8007ede:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 8007ee2:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007ee4:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 8007ee8:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8007eea:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8007eec:	4608      	mov	r0, r1
 8007eee:	e7ef      	b.n	8007ed0 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8007ef0:	2002      	movs	r0, #2
}
 8007ef2:	4770      	bx	lr
 8007ef4:	0800a498 	.word	0x0800a498
 8007ef8:	0800a4a0 	.word	0x0800a4a0

08007efc <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 8007efc:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 8007efe:	8840      	ldrh	r0, [r0, #2]
 8007f00:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 8007f04:	0c00      	lsrs	r0, r0, #16
 8007f06:	4770      	bx	lr

08007f08 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8007f08:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 8007f0a:	8803      	ldrh	r3, [r0, #0]
 8007f0c:	140d      	asrs	r5, r1, #16
 8007f0e:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8007f10:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 8007f14:	fb03 f303 	mul.w	r3, r3, r3
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 8007f18:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 8007f1c:	428b      	cmp	r3, r1
{
 8007f1e:	b084      	sub	sp, #16
    if (square_sum > square_limit)
 8007f20:	da0f      	bge.n	8007f42 <Circle_Limitation+0x3a>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8007f22:	8846      	ldrh	r6, [r0, #2]
 8007f24:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 8007f28:	4282      	cmp	r2, r0
 8007f2a:	dd13      	ble.n	8007f54 <Circle_Limitation+0x4c>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 8007f2c:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 8007f2e:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 8007f32:	bfb8      	it	lt
 8007f34:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 8007f36:	f7f9 fbf7 	bl	8001728 <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 8007f3a:	2c00      	cmp	r4, #0
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
      local_vqd.d = (int16_t)new_d;
 8007f3c:	b235      	sxth	r5, r6
        if (Vqd.q < 0)
 8007f3e:	db0e      	blt.n	8007f5e <Circle_Limitation+0x56>
      local_vqd.q = (int16_t)new_q;
 8007f40:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 8007f42:	b2a4      	uxth	r4, r4
 8007f44:	2000      	movs	r0, #0
 8007f46:	f364 000f 	bfi	r0, r4, #0, #16
 8007f4a:	b2ad      	uxth	r5, r5
 8007f4c:	f365 401f 	bfi	r0, r5, #16, #16
}
 8007f50:	b004      	add	sp, #16
 8007f52:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 8007f54:	1a98      	subs	r0, r3, r2
 8007f56:	f7f9 fbe7 	bl	8001728 <MCM_Sqrt>
        if (Vqd.q < 0)
 8007f5a:	2c00      	cmp	r4, #0
 8007f5c:	daf0      	bge.n	8007f40 <Circle_Limitation+0x38>
          new_q = - new_q;
 8007f5e:	4240      	negs	r0, r0
      local_vqd.q = (int16_t)new_q;
 8007f60:	b204      	sxth	r4, r0
      local_vqd.d = (int16_t)new_d;
 8007f62:	e7ee      	b.n	8007f42 <Circle_Limitation+0x3a>

08007f64 <MCPA_dataLog>:
  * @brief  Allocates and fills buffer with asynchronous data to be sent to controller
  *
  * @param  *pHandle Pointer to the MCPA Handle
  */
void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 8007f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8007f66:	7fc3      	ldrb	r3, [r0, #31]
 8007f68:	f890 2022 	ldrb.w	r2, [r0, #34]	@ 0x22
 8007f6c:	429a      	cmp	r2, r3
{
 8007f6e:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8007f70:	d002      	beq.n	8007f78 <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* Nothing to log just waiting next call to MCPA_datalog */
      pHandle->HFIndex++;
 8007f72:	3301      	adds	r3, #1
 8007f74:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8007f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 8007f78:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 8007f7e:	b1a5      	cbz	r5, 8007faa <MCPA_dataLog+0x46>
 8007f80:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8007f82:	8ba2      	ldrh	r2, [r4, #28]
 8007f84:	42aa      	cmp	r2, r5
 8007f86:	d24e      	bcs.n	8008026 <MCPA_dataLog+0xc2>
 8007f88:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8007f8c:	2bfe      	cmp	r3, #254	@ 0xfe
 8007f8e:	d066      	beq.n	800805e <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8007f90:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8007f94:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer,
 8007f96:	8b22      	ldrh	r2, [r4, #24]
 8007f98:	6820      	ldr	r0, [r4, #0]
 8007f9a:	3202      	adds	r2, #2
 8007f9c:	2309      	movs	r3, #9
 8007f9e:	6845      	ldr	r5, [r0, #4]
 8007fa0:	b292      	uxth	r2, r2
 8007fa2:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	8323      	strh	r3, [r4, #24]
}
 8007fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 8007faa:	4601      	mov	r1, r0
 8007fac:	2209      	movs	r2, #9
 8007fae:	f851 0b14 	ldr.w	r0, [r1], #20
 8007fb2:	6803      	ldr	r3, [r0, #0]
 8007fb4:	4798      	blx	r3
 8007fb6:	b390      	cbz	r0, 800801e <MCPA_dataLog+0xba>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8007fb8:	4b49      	ldr	r3, [pc, #292]	@ (80080e0 <MCPA_dataLog+0x17c>)
 8007fba:	6961      	ldr	r1, [r4, #20]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 8007fc0:	f894 0029 	ldrb.w	r0, [r4, #41]	@ 0x29
 8007fc4:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer */
 8007fc8:	f884 5020 	strb.w	r5, [r4, #32]
          pHandle->bufferIndex = 4U;
 8007fcc:	2304      	movs	r3, #4
          if (pHandle->Mark == pHandle->MarkBuff)
 8007fce:	4282      	cmp	r2, r0
          pHandle->bufferIndex = 4U;
 8007fd0:	8323      	strh	r3, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 8007fd2:	d101      	bne.n	8007fd8 <MCPA_dataLog+0x74>
 8007fd4:	461d      	mov	r5, r3
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8007fd6:	e7d4      	b.n	8007f82 <MCPA_dataLog+0x1e>
            pHandle->MFNumBuff           = pHandle->MFNum;
 8007fd8:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            pHandle->HFNumBuff           = pHandle->HFNum;
 8007fdc:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
            pHandle->MFRateBuff          = pHandle->MFRate;
 8007fe0:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
            pHandle->HFRateBuff          = pHandle->HFRate;
 8007fe4:	f894 5021 	ldrb.w	r5, [r4, #33]	@ 0x21
            pHandle->HFNumBuff           = pHandle->HFNum;
 8007fe8:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
            pHandle->MFNumBuff           = pHandle->MFNum;
 8007fec:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                         ((uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum) * 4U); /* We store pointer here,
 8007ff0:	441a      	add	r2, r3
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8007ff2:	8b63      	ldrh	r3, [r4, #26]
            pHandle->MarkBuff            = pHandle->Mark;
 8007ff4:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8007ff8:	0092      	lsls	r2, r2, #2
            pHandle->MFRateBuff          = pHandle->MFRate;
 8007ffa:	f884 1026 	strb.w	r1, [r4, #38]	@ 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8007ffe:	83a3      	strh	r3, [r4, #28]
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8008000:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
            pHandle->HFRateBuff          = pHandle->HFRate;
 8008004:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8008008:	f002 f828 	bl	800a05c <memcpy>
                         (uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum); /* 1 size byte per ID */
 800800c:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
 8008010:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            (void)memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable,
 8008014:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 8008018:	441a      	add	r2, r3
 800801a:	f002 f81f 	bl	800a05c <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 800801e:	8b25      	ldrh	r5, [r4, #24]
 8008020:	2d00      	cmp	r5, #0
 8008022:	d1ad      	bne.n	8007f80 <MCPA_dataLog+0x1c>
}
 8008024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8008026:	f894 6024 	ldrb.w	r6, [r4, #36]	@ 0x24
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 800802a:	194b      	adds	r3, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 800802c:	b36e      	cbz	r6, 800808a <MCPA_dataLog+0x126>
 800802e:	68a2      	ldr	r2, [r4, #8]
 8008030:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 8008034:	3a04      	subs	r2, #4
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]) ; //cstat !MISRAC2012-Rule-11.5
 8008036:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800803a:	8800      	ldrh	r0, [r0, #0]
 800803c:	f823 0b02 	strh.w	r0, [r3], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8008040:	8b25      	ldrh	r5, [r4, #24]
 8008042:	3502      	adds	r5, #2
 8008044:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8008046:	459c      	cmp	ip, r3
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8008048:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 800804a:	d1f4      	bne.n	8008036 <MCPA_dataLog+0xd2>
        if (pHandle->MFRateBuff < 254U)
 800804c:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8008050:	8ba2      	ldrh	r2, [r4, #28]
        if (pHandle->MFRateBuff < 254U)
 8008052:	2bfd      	cmp	r3, #253	@ 0xfd
 8008054:	4618      	mov	r0, r3
 8008056:	d91d      	bls.n	8008094 <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8008058:	4295      	cmp	r5, r2
 800805a:	d897      	bhi.n	8007f8c <MCPA_dataLog+0x28>
}
 800805c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800805e:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8008062:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 8008066:	4418      	add	r0, r3
 8008068:	4298      	cmp	r0, r3
 800806a:	dd91      	ble.n	8007f90 <MCPA_dataLog+0x2c>
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 800806c:	68a7      	ldr	r7, [r4, #8]
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 800806e:	6926      	ldr	r6, [r4, #16]
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8008070:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8008074:	6812      	ldr	r2, [r2, #0]
 8008076:	514a      	str	r2, [r1, r5]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8008078:	1c5a      	adds	r2, r3, #1
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 800807a:	5cf3      	ldrb	r3, [r6, r3]
 800807c:	442b      	add	r3, r5
 800807e:	b29d      	uxth	r5, r3
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8008080:	b2d3      	uxtb	r3, r2
 8008082:	4283      	cmp	r3, r0
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8008084:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8008086:	dbf3      	blt.n	8008070 <MCPA_dataLog+0x10c>
 8008088:	e782      	b.n	8007f90 <MCPA_dataLog+0x2c>
        if (pHandle->MFRateBuff < 254U)
 800808a:	f894 0026 	ldrb.w	r0, [r4, #38]	@ 0x26
 800808e:	28fd      	cmp	r0, #253	@ 0xfd
 8008090:	f63f af71 	bhi.w	8007f76 <MCPA_dataLog+0x12>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 8008094:	f894 3020 	ldrb.w	r3, [r4, #32]
 8008098:	4283      	cmp	r3, r0
 800809a:	d006      	beq.n	80080aa <MCPA_dataLog+0x146>
            pHandle->MFIndex ++;
 800809c:	3301      	adds	r3, #1
 800809e:	f884 3020 	strb.w	r3, [r4, #32]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 80080a2:	4295      	cmp	r5, r2
 80080a4:	f63f af74 	bhi.w	8007f90 <MCPA_dataLog+0x2c>
}
 80080a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80080aa:	f894 7028 	ldrb.w	r7, [r4, #40]	@ 0x28
 80080ae:	4437      	add	r7, r6
            pHandle->MFIndex = 0U;
 80080b0:	2300      	movs	r3, #0
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80080b2:	42b7      	cmp	r7, r6
            pHandle->MFIndex = 0U;
 80080b4:	f884 3020 	strb.w	r3, [r4, #32]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80080b8:	ddf3      	ble.n	80080a2 <MCPA_dataLog+0x13e>
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80080ba:	f8d4 e008 	ldr.w	lr, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80080be:	f8d4 c010 	ldr.w	ip, [r4, #16]
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80080c2:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	514b      	str	r3, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80080ca:	f81c 3006 	ldrb.w	r3, [ip, r6]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80080ce:	1c70      	adds	r0, r6, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80080d0:	442b      	add	r3, r5
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80080d2:	b2c6      	uxtb	r6, r0
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80080d4:	b29d      	uxth	r5, r3
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80080d6:	42be      	cmp	r6, r7
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80080d8:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80080da:	dbf2      	blt.n	80080c2 <MCPA_dataLog+0x15e>
 80080dc:	e7e1      	b.n	80080a2 <MCPA_dataLog+0x13e>
 80080de:	bf00      	nop
 80080e0:	20001ccc 	.word	0x20001ccc

080080e4 <MCPA_flushDataLog>:
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->bufferIndex > 0U)
 80080e4:	8b03      	ldrh	r3, [r0, #24]
 80080e6:	b19b      	cbz	r3, 8008110 <MCPA_flushDataLog+0x2c>
{
 80080e8:	b570      	push	{r4, r5, r6, lr}
    {  /* If buffer is allocated, we must send it */
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 80080ea:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
                                          proper decoding */
      {
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
        {
         logValue = (uint32_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 80080ee:	6941      	ldr	r1, [r0, #20]
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 80080f0:	2afe      	cmp	r2, #254	@ 0xfe
 80080f2:	4604      	mov	r4, r0
 80080f4:	d00d      	beq.n	8008112 <MCPA_flushDataLog+0x2e>
      else
      {
        /* Nothing to do */
      }
      logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
      *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 80080f6:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 80080fa:	52ca      	strh	r2, [r1, r3]
                                          the MARK */
      pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 80080fc:	8b22      	ldrh	r2, [r4, #24]
 80080fe:	6820      	ldr	r0, [r4, #0]
 8008100:	3202      	adds	r2, #2
 8008102:	2309      	movs	r3, #9
 8008104:	6845      	ldr	r5, [r0, #4]
 8008106:	b292      	uxth	r2, r2
 8008108:	47a8      	blx	r5
                                             pHandle->bufferIndex + 2U, MCTL_ASYNC);
      pHandle->bufferIndex = 0U;
 800810a:	2300      	movs	r3, #0
 800810c:	8323      	strh	r3, [r4, #24]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 800810e:	bd70      	pop	{r4, r5, r6, pc}
 8008110:	4770      	bx	lr
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8008112:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8008116:	f890 c028 	ldrb.w	ip, [r0, #40]	@ 0x28
 800811a:	4494      	add	ip, r2
 800811c:	4562      	cmp	r2, ip
 800811e:	daea      	bge.n	80080f6 <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8008120:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008122:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8008124:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 8008128:	6800      	ldr	r0, [r0, #0]
 800812a:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800812c:	5ca8      	ldrb	r0, [r5, r2]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800812e:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008130:	4403      	add	r3, r0
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8008132:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008134:	b29b      	uxth	r3, r3
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8008136:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008138:	8323      	strh	r3, [r4, #24]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800813a:	dbf3      	blt.n	8008124 <MCPA_flushDataLog+0x40>
 800813c:	e7db      	b.n	80080f6 <MCPA_flushDataLog+0x12>
 800813e:	bf00      	nop

08008140 <MCPA_cfgLog>:
  *
  * @param  *pHandle Pointer to the MCPA Handle
  * @param  *cfgdata Configuration of the Async communication
  */
uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 8008140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t i;
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
    uint16_t newID, buffSize;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8008144:	880f      	ldrh	r7, [r1, #0]
{
 8008146:	4604      	mov	r4, r0

    if (buffSize == 0U)
 8008148:	2f00      	cmp	r7, #0
 800814a:	d046      	beq.n	80081da <MCPA_cfgLog+0x9a>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload)
 800814c:	6803      	ldr	r3, [r0, #0]
 800814e:	89db      	ldrh	r3, [r3, #14]
 8008150:	42bb      	cmp	r3, r7
 8008152:	d33f      	bcc.n	80081d4 <MCPA_cfgLog+0x94>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 8008154:	788b      	ldrb	r3, [r1, #2]
 8008156:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 800815a:	f891 8003 	ldrb.w	r8, [r1, #3]
 800815e:	f880 8023 	strb.w	r8, [r0, #35]	@ 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 8008162:	790b      	ldrb	r3, [r1, #4]
 8008164:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 8008168:	794b      	ldrb	r3, [r1, #5]
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */

      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 800816a:	7f82      	ldrb	r2, [r0, #30]
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 800816c:	f880 3027 	strb.w	r3, [r0, #39]	@ 0x27
      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 8008170:	4443      	add	r3, r8
 8008172:	4293      	cmp	r3, r2
 8008174:	dc57      	bgt.n	8008226 <MCPA_cfgLog+0xe6>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */
 8008176:	1d8e      	adds	r6, r1, #6
      {
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8008178:	2b00      	cmp	r3, #0
 800817a:	d057      	beq.n	800822c <MCPA_cfgLog+0xec>
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 800817c:	f04f 0800 	mov.w	r8, #0
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8008180:	4645      	mov	r5, r8
 8008182:	e011      	b.n	80081a8 <MCPA_cfgLog+0x68>
        {
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
          /* HF Data are fixed to 2 bytes */
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 8008184:	68e3      	ldr	r3, [r4, #12]
 8008186:	5558      	strb	r0, [r3, r5]
          pCfgData++; /* Point to the next UID */
          pCfgData++;
          logSize = logSize+pHandle->dataSizeTable[i];
 8008188:	68e2      	ldr	r2, [r4, #12]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800818a:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 800818e:	f894 1027 	ldrb.w	r1, [r4, #39]	@ 0x27
          logSize = logSize+pHandle->dataSizeTable[i];
 8008192:	5d52      	ldrb	r2, [r2, r5]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8008194:	f105 0c01 	add.w	ip, r5, #1
 8008198:	fa5f f58c 	uxtb.w	r5, ip
 800819c:	440b      	add	r3, r1
          logSize = logSize+pHandle->dataSizeTable[i];
 800819e:	4442      	add	r2, r8
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 80081a0:	429d      	cmp	r5, r3
          logSize = logSize+pHandle->dataSizeTable[i];
 80081a2:	fa1f f882 	uxth.w	r8, r2
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 80081a6:	da11      	bge.n	80081cc <MCPA_cfgLog+0x8c>
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 80081a8:	f836 9b02 	ldrh.w	r9, [r6], #2
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
 80081ac:	6861      	ldr	r1, [r4, #4]
 80081ae:	4648      	mov	r0, r9
 80081b0:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80081b4:	f7fb fb3e 	bl	8003834 <RI_GetPtrReg>
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 80081b8:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 80081bc:	42ab      	cmp	r3, r5
 80081be:	f04f 0002 	mov.w	r0, #2
 80081c2:	d8df      	bhi.n	8008184 <MCPA_cfgLog+0x44>
 80081c4:	4648      	mov	r0, r9
 80081c6:	f7fb fb29 	bl	800381c <RI_GetIDSize>
 80081ca:	e7db      	b.n	8008184 <MCPA_cfgLog+0x44>
        }

        /* Smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp */
        if (buffSize < (logSize + 2U + 4U))
 80081cc:	f108 0206 	add.w	r2, r8, #6
 80081d0:	4297      	cmp	r7, r2
 80081d2:	d210      	bcs.n	80081f6 <MCPA_cfgLog+0xb6>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 80081d4:	2009      	movs	r0, #9
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return (result);
}
 80081d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0U)
 80081da:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0U;
 80081dc:	f880 7029 	strb.w	r7, [r0, #41]	@ 0x29
  if (pHandle->bufferIndex > 0U)
 80081e0:	b9ab      	cbnz	r3, 800820e <MCPA_cfgLog+0xce>
  pHandle->bufferIndex = 0U;
 80081e2:	2300      	movs	r3, #0
 80081e4:	8323      	strh	r3, [r4, #24]
  pHandle->MarkBuff    = 0U;
 80081e6:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
  pHandle->HFIndex     = 0U;
 80081ea:	77e3      	strb	r3, [r4, #31]
  pHandle->HFRateBuff  = 0U; /* We do not want to miss any sample at the restart */
 80081ec:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
  uint8_t result = MCP_CMD_OK;
 80081f0:	2000      	movs	r0, #0
}
 80081f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          pHandle->bufferTxTrigger = buffSize-logSize - 2U; /* 2 is required to add the last Mark byte and NUL
 80081f6:	3f02      	subs	r7, #2
 80081f8:	eba7 0708 	sub.w	r7, r7, r8
 80081fc:	8367      	strh	r7, [r4, #26]
          pHandle->Mark = *((uint8_t *)pCfgData);
 80081fe:	7833      	ldrb	r3, [r6, #0]
 8008200:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
          if (0U == pHandle->Mark)
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1f3      	bne.n	80081f0 <MCPA_cfgLog+0xb0>
  if (pHandle->bufferIndex > 0U)
 8008208:	8b23      	ldrh	r3, [r4, #24]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d0e9      	beq.n	80081e2 <MCPA_cfgLog+0xa2>
    logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 800820e:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8008210:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 8008214:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 8008216:	8b22      	ldrh	r2, [r4, #24]
 8008218:	6820      	ldr	r0, [r4, #0]
 800821a:	3202      	adds	r2, #2
 800821c:	6845      	ldr	r5, [r0, #4]
 800821e:	b292      	uxth	r2, r2
 8008220:	2309      	movs	r3, #9
 8008222:	47a8      	blx	r5
 8008224:	e7dd      	b.n	80081e2 <MCPA_cfgLog+0xa2>
        result = MCP_ERROR_BAD_RAW_FORMAT;
 8008226:	200a      	movs	r0, #10
}
 8008228:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800822c:	2206      	movs	r2, #6
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 800822e:	4698      	mov	r8, r3
 8008230:	e7ce      	b.n	80081d0 <MCPA_cfgLog+0x90>
 8008232:	bf00      	nop

08008234 <NTC_SetFaultState>:
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hSensitivity > 0 )
 8008234:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
    {
      if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8008238:	8843      	ldrh	r3, [r0, #2]
 800823a:	8982      	ldrh	r2, [r0, #12]
    if (pHandle->hSensitivity > 0 )
 800823c:	2900      	cmp	r1, #0
 800823e:	dd08      	ble.n	8008252 <NTC_SetFaultState+0x1e>
      if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8008240:	4293      	cmp	r3, r2
 8008242:	d804      	bhi.n	800824e <NTC_SetFaultState+0x1a>
      {
        hFault = MC_OVER_TEMP;
      }
      else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 8008244:	89c2      	ldrh	r2, [r0, #14]
 8008246:	429a      	cmp	r2, r3
 8008248:	d908      	bls.n	800825c <NTC_SetFaultState+0x28>
      {
        hFault = MC_NO_ERROR;
 800824a:	2000      	movs	r0, #0
 800824c:	4770      	bx	lr
    }
    else
    {
      if (pHandle->hAvTemp_d < pHandle->hOverTempThreshold)
      {
        hFault = MC_OVER_TEMP;
 800824e:	2008      	movs	r0, #8
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (hFault);
}
 8008250:	4770      	bx	lr
      if (pHandle->hAvTemp_d < pHandle->hOverTempThreshold)
 8008252:	4293      	cmp	r3, r2
 8008254:	d3fb      	bcc.n	800824e <NTC_SetFaultState+0x1a>
      else if (pHandle->hAvTemp_d > pHandle->hOverTempDeactThreshold)
 8008256:	89c2      	ldrh	r2, [r0, #14]
 8008258:	429a      	cmp	r2, r3
 800825a:	d3f6      	bcc.n	800824a <NTC_SetFaultState+0x16>
        hFault = pHandle->hFaultState;
 800825c:	8900      	ldrh	r0, [r0, #8]
 800825e:	4770      	bx	lr

08008260 <NTC_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8008260:	7803      	ldrb	r3, [r0, #0]
 8008262:	b94b      	cbnz	r3, 8008278 <NTC_Init+0x18>
    /* nothing to do */
  }
  else
  {
#endif
    if (pHandle->hSensitivity > 0 ) 
 8008264:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 8008268:	2b00      	cmp	r3, #0
 800826a:	bfcc      	ite	gt
 800826c:	2300      	movgt	r3, #0
 800826e:	2301      	movle	r3, #1
 8008270:	425b      	negs	r3, r3
 8008272:	b29b      	uxth	r3, r3
    {
      pHandle->hAvTemp_d = 0U;
    }
    else
    {
      pHandle->hAvTemp_d = 0xFFFFU;
 8008274:	8043      	strh	r3, [r0, #2]
}
 8008276:	4770      	bx	lr
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8008278:	8883      	ldrh	r3, [r0, #4]
      pHandle->hAvTemp_d = 0xFFFFU;
 800827a:	8043      	strh	r3, [r0, #2]
      pHandle->hFaultState = MC_NO_ERROR;
 800827c:	2200      	movs	r2, #0
 800827e:	8102      	strh	r2, [r0, #8]
}
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop

08008284 <NTC_CalcAvTemp>:
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @retval Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp(NTC_Handle_t *pHandle, uint16_t rawValue)
{
 8008284:	b510      	push	{r4, lr}
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8008286:	7803      	ldrb	r3, [r0, #0]
{
 8008288:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 800828a:	b983      	cbnz	r3, 80082ae <NTC_CalcAvTemp+0x2a>
    {
      uint16_t hAux;
      hAux = rawValue;

      if (0xFFFFU == hAux)
 800828c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008290:	4299      	cmp	r1, r3
 8008292:	d007      	beq.n	80082a4 <NTC_CalcAvTemp+0x20>
        /* Nothing to do */
      }
      else
      {
        uint32_t wtemp;
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8008294:	8943      	ldrh	r3, [r0, #10]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 8008296:	8842      	ldrh	r2, [r0, #2]
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8008298:	1e58      	subs	r0, r3, #1
        wtemp += hAux;
 800829a:	fb00 1102 	mla	r1, r0, r2, r1
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 800829e:	fbb1 f1f3 	udiv	r1, r1, r3

        pHandle->hAvTemp_d = (uint16_t)wtemp;
 80082a2:	8061      	strh	r1, [r4, #2]
      }

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 80082a4:	4620      	mov	r0, r4
 80082a6:	f7ff ffc5 	bl	8008234 <NTC_SetFaultState>
 80082aa:	8120      	strh	r0, [r4, #8]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 80082ac:	bd10      	pop	{r4, pc}
 80082ae:	2000      	movs	r0, #0
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 80082b0:	8120      	strh	r0, [r4, #8]
}
 80082b2:	bd10      	pop	{r4, pc}

080082b4 <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 80082b4:	7803      	ldrb	r3, [r0, #0]
 80082b6:	b95b      	cbnz	r3, 80082d0 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 80082b8:	8842      	ldrh	r2, [r0, #2]
      wTemp -= ((int32_t)pHandle->wV0);
 80082ba:	6941      	ldr	r1, [r0, #20]
      wTemp *= pHandle->hSensitivity;
 80082bc:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 80082c0:	8b00      	ldrh	r0, [r0, #24]
      wTemp -= ((int32_t)pHandle->wV0);
 80082c2:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 80082c4:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 80082c8:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 80082cc:	b200      	sxth	r0, r0
 80082ce:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 80082d0:	88c0      	ldrh	r0, [r0, #6]
}
 80082d2:	b200      	sxth	r0, r0
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop

080082d8 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 80082d8:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80082da:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 80082dc:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80082de:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 80082e0:	8442      	strh	r2, [r0, #34]	@ 0x22
    pHandle->wIntegralTerm = 0;
 80082e2:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 80082e4:	6283      	str	r3, [r0, #40]	@ 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80082e6:	4770      	bx	lr

080082e8 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 80082e8:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80082ea:	4770      	bx	lr

080082ec <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 80082ec:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80082ee:	4770      	bx	lr

080082f0 <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 80082f0:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop

080082f8 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 80082f8:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop

08008300 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8008300:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 8008302:	4770      	bx	lr

08008304 <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 8008304:	8b80      	ldrh	r0, [r0, #28]
 8008306:	4770      	bx	lr

08008308 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8008308:	2301      	movs	r3, #1
 800830a:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 800830c:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 800830e:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop

08008314 <PID_GetKIDivisor>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisor);
#else
  return (pHandle->hKiDivisor);
#endif
}
 8008314:	8b40      	ldrh	r0, [r0, #26]
 8008316:	4770      	bx	lr

08008318 <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 8008318:	8bc0      	ldrh	r0, [r0, #30]
 800831a:	4770      	bx	lr

0800831c <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 800831c:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800831e:	4770      	bx	lr

08008320 <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 8008320:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008322:	4770      	bx	lr

08008324 <PID_SetKIDivisorPOW2>:
{
 8008324:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8008326:	2301      	movs	r3, #1
{
 8008328:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 800832a:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 800832c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008330:	40a1      	lsls	r1, r4
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 8008332:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 8008334:	8343      	strh	r3, [r0, #26]
{
 8008336:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8008338:	f7ff fff2 	bl	8008320 <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 800833c:	4902      	ldr	r1, [pc, #8]	@ (8008348 <PID_SetKIDivisorPOW2+0x24>)
 800833e:	4628      	mov	r0, r5
 8008340:	40a1      	lsls	r1, r4
 8008342:	f7ff ffeb 	bl	800831c <PID_SetLowerIntegralTermLimit>
}
 8008346:	bd38      	pop	{r3, r4, r5, pc}
 8008348:	ffff8001 	.word	0xffff8001

0800834c <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 800834c:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800834e:	4770      	bx	lr

08008350 <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 8008350:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop

08008358 <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 8008358:	8cc0      	ldrh	r0, [r0, #38]	@ 0x26
 800835a:	4770      	bx	lr

0800835c <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 800835c:	2301      	movs	r3, #1
 800835e:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8008360:	84c1      	strh	r1, [r0, #38]	@ 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8008362:	8483      	strh	r3, [r0, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop

08008368 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8008368:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 800836c:	4603      	mov	r3, r0
 800836e:	b530      	push	{r4, r5, lr}

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8008370:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8008374:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8008378:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800837c:	fb01 f202 	mul.w	r2, r1, r2
    if (0 == pHandle->hKiGain)
 8008380:	b17c      	cbz	r4, 80083a2 <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8008382:	fb04 f101 	mul.w	r1, r4, r1
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8008386:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
      if (wIntegral_sum_temp < 0)
 800838a:	eb15 0e01 	adds.w	lr, r5, r1
 800838e:	d41d      	bmi.n	80083cc <PI_Controller+0x64>
            wIntegral_sum_temp = -INT32_MAX;
 8008390:	420d      	tst	r5, r1
 8008392:	4914      	ldr	r1, [pc, #80]	@ (80083e4 <PI_Controller+0x7c>)
 8008394:	bf48      	it	mi
 8008396:	468e      	movmi	lr, r1
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8008398:	45a6      	cmp	lr, r4
 800839a:	dc02      	bgt.n	80083a2 <PI_Controller+0x3a>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 800839c:	691c      	ldr	r4, [r3, #16]
 800839e:	4574      	cmp	r4, lr
 80083a0:	dd1d      	ble.n	80083de <PI_Controller+0x76>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 80083a2:	8b99      	ldrh	r1, [r3, #28]
 80083a4:	410a      	asrs	r2, r1
 80083a6:	8bd9      	ldrh	r1, [r3, #30]
 80083a8:	fa44 f101 	asr.w	r1, r4, r1
 80083ac:	440a      	add	r2, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 80083ae:	4290      	cmp	r0, r2
 80083b0:	da03      	bge.n	80083ba <PI_Controller+0x52>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 80083b2:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 80083b4:	4414      	add	r4, r2
 80083b6:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 80083b8:	bd30      	pop	{r4, r5, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 80083ba:	4594      	cmp	ip, r2
      wDischarge = hLowerOutputLimit - wOutput_32;
 80083bc:	bfc5      	ittet	gt
 80083be:	ebac 0202 	subgt.w	r2, ip, r2
    pHandle->wIntegralTerm += wDischarge;
 80083c2:	18a4      	addgt	r4, r4, r2
    returnValue = (int16_t)wOutput_32;
 80083c4:	b210      	sxthle	r0, r2
      wOutput_32 = hLowerOutputLimit;
 80083c6:	4660      	movgt	r0, ip
    pHandle->wIntegralTerm += wDischarge;
 80083c8:	609c      	str	r4, [r3, #8]
}
 80083ca:	bd30      	pop	{r4, r5, pc}
        if (pHandle->wIntegralTerm > 0)
 80083cc:	2d00      	cmp	r5, #0
 80083ce:	dde3      	ble.n	8008398 <PI_Controller+0x30>
          if (wIntegral_Term > 0)
 80083d0:	2900      	cmp	r1, #0
 80083d2:	dde1      	ble.n	8008398 <PI_Controller+0x30>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 80083d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80083d8:	428c      	cmp	r4, r1
 80083da:	d1e2      	bne.n	80083a2 <PI_Controller+0x3a>
 80083dc:	46a6      	mov	lr, r4
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 80083de:	4674      	mov	r4, lr
 80083e0:	e7df      	b.n	80083a2 <PI_Controller+0x3a>
 80083e2:	bf00      	nop
 80083e4:	80000001 	.word	0x80000001

080083e8 <PQD_CalcElMotorPower>:
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 80083e8:	6882      	ldr	r2, [r0, #8]
{
 80083ea:	b500      	push	{lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 80083ec:	89d1      	ldrh	r1, [r2, #14]
 80083ee:	f8b2 e018 	ldrh.w	lr, [r2, #24]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 80083f2:	8993      	ldrh	r3, [r2, #12]
 80083f4:	f8b2 c016 	ldrh.w	ip, [r2, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 80083f8:	fb11 f20e 	smulbb	r2, r1, lr
    wAux /= 65536;
 80083fc:	fb13 230c 	smlabb	r3, r3, ip, r2
 8008400:	2b00      	cmp	r3, #0

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8008402:	f9b0 2000 	ldrsh.w	r2, [r0]
    wAux /= 65536;
 8008406:	bfbc      	itt	lt
 8008408:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
 800840c:	33ff      	addlt	r3, #255	@ 0xff
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 800840e:	ebd2 4323 	rsbs	r3, r2, r3, asr #16
 8008412:	bf48      	it	mi
 8008414:	330f      	addmi	r3, #15
 8008416:	eb02 1223 	add.w	r2, r2, r3, asr #4
 800841a:	8002      	strh	r2, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 800841c:	f85d fb04 	ldr.w	pc, [sp], #4

08008420 <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float_t The average measured motor power expressed in Watts.
  */
__weak float_t PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 8008420:	b510      	push	{r4, lr}
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8008422:	f9b0 3000 	ldrsh.w	r3, [r0]
 8008426:	ee07 3a90 	vmov	s15, r3
{
 800842a:	ed2d 8b02 	vpush	{d8}
 800842e:	4604      	mov	r4, r0
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8008430:	68c0      	ldr	r0, [r0, #12]
 8008432:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8008436:	f7ff fd61 	bl	8007efc <VBS_GetAvBusVoltage_V>
 800843a:	edd4 7a01 	vldr	s15, [r4, #4]
 800843e:	ee68 7a27 	vmul.f32	s15, s16, s15

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 8008442:	ecbd 8b02 	vpop	{d8}
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8008446:	ee00 0a10 	vmov	s0, r0
 800844a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 800844e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008452:	bd10      	pop	{r4, pc}

08008454 <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008454:	6883      	ldr	r3, [r0, #8]
 8008456:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800845a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800845e:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008460:	6883      	ldr	r3, [r0, #8]
 8008462:	00d9      	lsls	r1, r3, #3
/*
  * @brief Initializes @p ADCx peripheral for current sensing.
  * 
  */
static void R3_2_ADCxInit(ADC_TypeDef *ADCx)
{
 8008464:	b082      	sub	sp, #8
 8008466:	d418      	bmi.n	800849a <R3_2_ADCxInit+0x46>
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency  */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
                                         * (SystemCoreClock / (100000UL * 2UL)));
 8008468:	4b26      	ldr	r3, [pc, #152]	@ (8008504 <R3_2_ADCxInit+0xb0>)
  MODIFY_REG(ADCx->CR,
 800846a:	6882      	ldr	r2, [r0, #8]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4926      	ldr	r1, [pc, #152]	@ (8008508 <R3_2_ADCxInit+0xb4>)
 8008470:	099b      	lsrs	r3, r3, #6
 8008472:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 8008476:	fba1 1303 	umull	r1, r3, r1, r3
 800847a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800847e:	099b      	lsrs	r3, r3, #6
 8008480:	005b      	lsls	r3, r3, #1
 8008482:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8008486:	6082      	str	r2, [r0, #8]
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
 8008488:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800848a:	9b01      	ldr	r3, [sp, #4]
 800848c:	b12b      	cbz	r3, 800849a <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 800848e:	9b01      	ldr	r3, [sp, #4]
 8008490:	3b01      	subs	r3, #1
 8008492:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8008494:	9b01      	ldr	r3, [sp, #4]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1f9      	bne.n	800848e <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 800849a:	6883      	ldr	r3, [r0, #8]
 800849c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80084a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80084a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80084a8:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80084aa:	6883      	ldr	r3, [r0, #8]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	dbfc      	blt.n	80084aa <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80084b0:	6803      	ldr	r3, [r0, #0]
 80084b2:	07da      	lsls	r2, r3, #31
 80084b4:	d408      	bmi.n	80084c8 <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 80084b6:	4a15      	ldr	r2, [pc, #84]	@ (800850c <R3_2_ADCxInit+0xb8>)
 80084b8:	6883      	ldr	r3, [r0, #8]
 80084ba:	4013      	ands	r3, r2
 80084bc:	f043 0301 	orr.w	r3, r3, #1
 80084c0:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80084c2:	6803      	ldr	r3, [r0, #0]
 80084c4:	07db      	lsls	r3, r3, #31
 80084c6:	d5f7      	bpl.n	80084b8 <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 80084c8:	6883      	ldr	r3, [r0, #8]
 80084ca:	4a10      	ldr	r2, [pc, #64]	@ (800850c <R3_2_ADCxInit+0xb8>)
 80084cc:	4013      	ands	r3, r2
 80084ce:	f043 0308 	orr.w	r3, r3, #8
 80084d2:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CR,
 80084d4:	6883      	ldr	r3, [r0, #8]
 80084d6:	4013      	ands	r3, r2
 80084d8:	f043 0320 	orr.w	r3, r3, #32
 80084dc:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 80084de:	68c3      	ldr	r3, [r0, #12]
 80084e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80084e4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80084e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80084ec:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80084ee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80084f0:	f023 030f 	bic.w	r3, r3, #15
 80084f4:	6303      	str	r3, [r0, #48]	@ 0x30
  MODIFY_REG(ADCx->CR,
 80084f6:	6883      	ldr	r3, [r0, #8]
 80084f8:	4013      	ands	r3, r2
 80084fa:	f043 0304 	orr.w	r3, r3, #4
 80084fe:	6083      	str	r3, [r0, #8]

  /* Dummy conversion (ES0431 doc chap. 2.5.8 ADC channel 0 converted instead of the required ADC channel) 
     Note: Sequence length forced to zero in order to prevent ADC OverRun occurrence */
  LL_ADC_REG_SetSequencerLength(ADCx, 0U);
  LL_ADC_REG_StartConversion(ADCx);
}
 8008500:	b002      	add	sp, #8
 8008502:	4770      	bx	lr
 8008504:	200004ec 	.word	0x200004ec
 8008508:	053e2d63 	.word	0x053e2d63
 800850c:	7fffffc0 	.word	0x7fffffc0

08008510 <R3_2_GetPhaseCurrents>:
#endif
    int32_t Aux;
    uint32_t ADCDataReg1;
    uint32_t ADCDataReg2;
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl;  //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008510:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
    uint8_t Sector;

    Sector = (uint8_t)pHandle->_Super.Sector;
 8008514:	f890 207a 	ldrb.w	r2, [r0, #122]	@ 0x7a
{
 8008518:	b470      	push	{r4, r5, r6}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800851a:	681c      	ldr	r4, [r3, #0]
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 800851c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8008520:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 8008522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 8008524:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 8008528:	f8d3 6080 	ldr.w	r6, [r3, #128]	@ 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800852c:	6863      	ldr	r3, [r4, #4]
 800852e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008536:	6063      	str	r3, [r4, #4]

    /* Disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    switch (Sector)
 8008538:	2a05      	cmp	r2, #5
 800853a:	f200 809d 	bhi.w	8008678 <R3_2_GetPhaseCurrents+0x168>
 800853e:	e8df f002 	tbb	[pc, r2]
 8008542:	1d37      	.short	0x1d37
 8008544:	3703031d 	.word	0x3703031d
      case SECTOR_4:
      case SECTOR_5:
      {
        /* Current on Phase C is not accessible     */
        /* Ia = PhaseAOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8008548:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88

        /* Saturation of Ia */
        if (Aux < -INT16_MAX)
 800854c:	4a4e      	ldr	r2, [pc, #312]	@ (8008688 <R3_2_GetPhaseCurrents+0x178>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800854e:	1b5b      	subs	r3, r3, r5
        if (Aux < -INT16_MAX)
 8008550:	4293      	cmp	r3, r2
 8008552:	db58      	blt.n	8008606 <R3_2_GetPhaseCurrents+0xf6>
        {
          Iab->a = -INT16_MAX;
        }
        else  if (Aux > INT16_MAX)
 8008554:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008558:	f280 8087 	bge.w	800866a <R3_2_GetPhaseCurrents+0x15a>
        {
          Iab->a = INT16_MAX;
        }
        else
        {
          Iab->a = (int16_t)Aux;
 800855c:	fa0f fc83 	sxth.w	ip, r3
        }

        /* Ib = PhaseBOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 8008560:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

        /* Saturation of Ib */
        if (Aux < -INT16_MAX)
 8008564:	4d48      	ldr	r5, [pc, #288]	@ (8008688 <R3_2_GetPhaseCurrents+0x178>)
          Iab->a = -INT16_MAX;
 8008566:	f8a1 c000 	strh.w	ip, [r1]
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 800856a:	1b92      	subs	r2, r2, r6
        if (Aux < -INT16_MAX)
 800856c:	42aa      	cmp	r2, r5
 800856e:	da5b      	bge.n	8008628 <R3_2_GetPhaseCurrents+0x118>
        {
          Iab->b = -INT16_MAX;
 8008570:	804d      	strh	r5, [r1, #2]
        break;
    }

    pHandle->_Super.Ia = Iab->a;
    pHandle->_Super.Ib = Iab->b;
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008572:	fa1f f38c 	uxth.w	r3, ip
 8008576:	f248 0201 	movw	r2, #32769	@ 0x8001
 800857a:	e030      	b.n	80085de <R3_2_GetPhaseCurrents+0xce>
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800857c:	f8d0 4088 	ldr.w	r4, [r0, #136]	@ 0x88
        if (Aux < -INT16_MAX)
 8008580:	4b41      	ldr	r3, [pc, #260]	@ (8008688 <R3_2_GetPhaseCurrents+0x178>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8008582:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8008584:	429c      	cmp	r4, r3
 8008586:	db39      	blt.n	80085fc <R3_2_GetPhaseCurrents+0xec>
        else  if (Aux > INT16_MAX)
 8008588:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 800858c:	da62      	bge.n	8008654 <R3_2_GetPhaseCurrents+0x144>
          Iab->a = (int16_t)Aux;
 800858e:	fa0f fc84 	sxth.w	ip, r4
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008592:	b2a3      	uxth	r3, r4
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8008594:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
          Iab->a = -INT16_MAX;
 8008598:	f8a1 c000 	strh.w	ip, [r1]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 800859c:	1ab2      	subs	r2, r6, r2
        Aux -= (int32_t)Iab->a;             /* Ib */
 800859e:	1b12      	subs	r2, r2, r4
        if (Aux > INT16_MAX)
 80085a0:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80085a4:	db39      	blt.n	800861a <R3_2_GetPhaseCurrents+0x10a>
          Iab->b = INT16_MAX;
 80085a6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80085aa:	804a      	strh	r2, [r1, #2]
 80085ac:	4615      	mov	r5, r2
 80085ae:	e016      	b.n	80085de <R3_2_GetPhaseCurrents+0xce>
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 80085b0:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
        if (Aux < -INT16_MAX)
 80085b4:	4b34      	ldr	r3, [pc, #208]	@ (8008688 <R3_2_GetPhaseCurrents+0x178>)
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 80085b6:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 80085b8:	429c      	cmp	r4, r3
 80085ba:	db1a      	blt.n	80085f2 <R3_2_GetPhaseCurrents+0xe2>
        else  if (Aux > INT16_MAX)
 80085bc:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 80085c0:	da3d      	bge.n	800863e <R3_2_GetPhaseCurrents+0x12e>
          Iab->b = (int16_t)Aux;
 80085c2:	b225      	sxth	r5, r4
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 80085c4:	b2a2      	uxth	r2, r4
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 80085c6:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
          Iab->b = -INT16_MAX;
 80085ca:	804d      	strh	r5, [r1, #2]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 80085cc:	1af3      	subs	r3, r6, r3
        Aux -= (int32_t)Iab->b;             /* Ia  */
 80085ce:	1b1b      	subs	r3, r3, r4
        if (Aux > INT16_MAX)
 80085d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085d4:	db19      	blt.n	800860a <R3_2_GetPhaseCurrents+0xfa>
          Iab->a = INT16_MAX;
 80085d6:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80085da:	800b      	strh	r3, [r1, #0]
 80085dc:	469c      	mov	ip, r3
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 80085de:	4413      	add	r3, r2
 80085e0:	425b      	negs	r3, r3
    pHandle->_Super.Ib = Iab->b;
 80085e2:	f8a0 5064 	strh.w	r5, [r0, #100]	@ 0x64
    pHandle->_Super.Ia = Iab->a;
 80085e6:	f8a0 c062 	strh.w	ip, [r0, #98]	@ 0x62
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 80085ea:	bc70      	pop	{r4, r5, r6}
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 80085ec:	f8a0 3066 	strh.w	r3, [r0, #102]	@ 0x66
}
 80085f0:	4770      	bx	lr
 80085f2:	461c      	mov	r4, r3
 80085f4:	f248 0201 	movw	r2, #32769	@ 0x8001
 80085f8:	461d      	mov	r5, r3
 80085fa:	e7e4      	b.n	80085c6 <R3_2_GetPhaseCurrents+0xb6>
 80085fc:	461c      	mov	r4, r3
 80085fe:	46a4      	mov	ip, r4
 8008600:	f248 0301 	movw	r3, #32769	@ 0x8001
 8008604:	e7c6      	b.n	8008594 <R3_2_GetPhaseCurrents+0x84>
 8008606:	4694      	mov	ip, r2
 8008608:	e7aa      	b.n	8008560 <R3_2_GetPhaseCurrents+0x50>
        else  if (Aux < -INT16_MAX)
 800860a:	4c1f      	ldr	r4, [pc, #124]	@ (8008688 <R3_2_GetPhaseCurrents+0x178>)
 800860c:	42a3      	cmp	r3, r4
 800860e:	da26      	bge.n	800865e <R3_2_GetPhaseCurrents+0x14e>
          Iab->a = -INT16_MAX;
 8008610:	800c      	strh	r4, [r1, #0]
 8008612:	f248 0301 	movw	r3, #32769	@ 0x8001
 8008616:	46a4      	mov	ip, r4
 8008618:	e7e1      	b.n	80085de <R3_2_GetPhaseCurrents+0xce>
        else  if (Aux < -INT16_MAX)
 800861a:	4d1b      	ldr	r5, [pc, #108]	@ (8008688 <R3_2_GetPhaseCurrents+0x178>)
 800861c:	42aa      	cmp	r2, r5
 800861e:	da27      	bge.n	8008670 <R3_2_GetPhaseCurrents+0x160>
          Iab->b = -INT16_MAX;
 8008620:	804d      	strh	r5, [r1, #2]
 8008622:	f248 0201 	movw	r2, #32769	@ 0x8001
 8008626:	e7da      	b.n	80085de <R3_2_GetPhaseCurrents+0xce>
        else  if (Aux > INT16_MAX)
 8008628:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800862c:	db0c      	blt.n	8008648 <R3_2_GetPhaseCurrents+0x138>
          Iab->b = INT16_MAX;
 800862e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8008632:	461a      	mov	r2, r3
 8008634:	804b      	strh	r3, [r1, #2]
 8008636:	4615      	mov	r5, r2
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008638:	fa1f f38c 	uxth.w	r3, ip
 800863c:	e7cf      	b.n	80085de <R3_2_GetPhaseCurrents+0xce>
 800863e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008642:	4614      	mov	r4, r2
 8008644:	4615      	mov	r5, r2
 8008646:	e7be      	b.n	80085c6 <R3_2_GetPhaseCurrents+0xb6>
          Iab->b = (int16_t)Aux;
 8008648:	b215      	sxth	r5, r2
 800864a:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800864c:	fa1f f38c 	uxth.w	r3, ip
 8008650:	b292      	uxth	r2, r2
 8008652:	e7c4      	b.n	80085de <R3_2_GetPhaseCurrents+0xce>
 8008654:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8008658:	461c      	mov	r4, r3
 800865a:	469c      	mov	ip, r3
 800865c:	e79a      	b.n	8008594 <R3_2_GetPhaseCurrents+0x84>
          Iab->a = (int16_t)Aux;
 800865e:	fa0f fc83 	sxth.w	ip, r3
 8008662:	f8a1 c000 	strh.w	ip, [r1]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008666:	b29b      	uxth	r3, r3
 8008668:	e7b9      	b.n	80085de <R3_2_GetPhaseCurrents+0xce>
 800866a:	f647 7cff 	movw	ip, #32767	@ 0x7fff
 800866e:	e777      	b.n	8008560 <R3_2_GetPhaseCurrents+0x50>
          Iab->b = (int16_t)Aux;
 8008670:	b215      	sxth	r5, r2
 8008672:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008674:	b292      	uxth	r2, r2
 8008676:	e7b2      	b.n	80085de <R3_2_GetPhaseCurrents+0xce>
    pHandle->_Super.Ia = Iab->a;
 8008678:	f9b1 c000 	ldrsh.w	ip, [r1]
    pHandle->_Super.Ib = Iab->b;
 800867c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008680:	880b      	ldrh	r3, [r1, #0]
 8008682:	884a      	ldrh	r2, [r1, #2]
 8008684:	e7ab      	b.n	80085de <R3_2_GetPhaseCurrents+0xce>
 8008686:	bf00      	nop
 8008688:	ffff8001 	.word	0xffff8001

0800868c <R3_2_SetADCSampPointPolarization>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval Return value of R3_1_WriteTIMRegisters.
  */
uint16_t R3_2_SetADCSampPointPolarization(PWMC_Handle_t *pHdl)
{
 800868c:	b410      	push	{r4}
  *         set too late for being taken into account in the next PWM cycle.
  */
__STATIC_INLINE uint16_t R3_2_WriteTIMRegisters(PWMC_Handle_t *pHdl, uint16_t SamplingPoint)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800868e:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8008692:	f890 4099 	ldrb.w	r4, [r0, #153]	@ 0x99
 8008696:	f880 407a 	strb.w	r4, [r0, #122]	@ 0x7a
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 800869a:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800869e:	681b      	ldr	r3, [r3, #0]
  uint16_t Aux;

  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 80086a0:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
  WRITE_REG(TIMx->CCR1, CompareValue);
 80086a4:	635c      	str	r4, [r3, #52]	@ 0x34
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 80086a6:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 80086a8:	f8b0 4052 	ldrh.w	r4, [r0, #82]	@ 0x52
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 80086ac:	f8b0 0054 	ldrh.w	r0, [r0, #84]	@ 0x54
  WRITE_REG(TIMx->CCR2, CompareValue);
 80086b0:	639c      	str	r4, [r3, #56]	@ 0x38
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 80086b2:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 80086b4:	63d8      	str	r0, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80086b6:	641a      	str	r2, [r3, #64]	@ 0x40
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t) SamplingPoint);

  /* Limit for update event */
  /*  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u ) */
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 80086b8:	4904      	ldr	r1, [pc, #16]	@ (80086cc <R3_2_SetADCSampPointPolarization+0x40>)
 80086ba:	685b      	ldr	r3, [r3, #4]
}
 80086bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 80086c0:	420b      	tst	r3, r1
}
 80086c2:	bf14      	ite	ne
 80086c4:	2001      	movne	r0, #1
 80086c6:	2000      	moveq	r0, #0
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	02000070 	.word	0x02000070

080086d0 <R3_2_HFCurrentsPolarizationAB>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_HFCurrentsPolarizationAB(PWMC_Handle_t *pHdl, ab_t *Iab)
{
 80086d0:	b430      	push	{r4, r5}
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80086d2:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 80086d6:	f890 4099 	ldrb.w	r4, [r0, #153]	@ 0x99
 80086da:	681a      	ldr	r2, [r3, #0]
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 80086dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80086e0:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 80086e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 80086e4:	f8d4 4080 	ldr.w	r4, [r4, #128]	@ 0x80
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 80086e8:	f8d3 5080 	ldr.w	r5, [r3, #128]	@ 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80086ec:	6853      	ldr	r3, [r2, #4]
 80086ee:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80086f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086f6:	6053      	str	r3, [r2, #4]

    /* Disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 80086f8:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 80086fc:	2b0f      	cmp	r3, #15
 80086fe:	d80d      	bhi.n	800871c <R3_2_HFCurrentsPolarizationAB+0x4c>
    {
      pHandle-> PhaseAOffset += ADCDataReg1;
 8008700:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
      pHandle-> PhaseBOffset += ADCDataReg2;
 8008704:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
      pHandle-> PhaseAOffset += ADCDataReg1;
 8008708:	441c      	add	r4, r3
      pHandle->PolarizationCounter++;
 800870a:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
      pHandle-> PhaseBOffset += ADCDataReg2;
 800870e:	442a      	add	r2, r5
      pHandle->PolarizationCounter++;
 8008710:	3301      	adds	r3, #1
      pHandle-> PhaseBOffset += ADCDataReg2;
 8008712:	e9c0 4222 	strd	r4, r2, [r0, #136]	@ 0x88
      pHandle->PolarizationCounter++;
 8008716:	b2db      	uxtb	r3, r3
 8008718:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    {
      /* Nothing to do */
    }

    /* During offset calibration no current is flowing in the phases */
    Iab->a = 0;
 800871c:	2300      	movs	r3, #0
    Iab->b = 0;
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 800871e:	bc30      	pop	{r4, r5}
    Iab->a = 0;
 8008720:	600b      	str	r3, [r1, #0]
}
 8008722:	4770      	bx	lr

08008724 <R3_2_HFCurrentsPolarizationC>:
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8008724:	f890 3099 	ldrb.w	r3, [r0, #153]	@ 0x99
{
 8008728:	b410      	push	{r4}
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 800872a:	3314      	adds	r3, #20
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800872c:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
 8008730:	6822      	ldr	r2, [r4, #0]
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8008732:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8008736:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800873a:	6853      	ldr	r3, [r2, #4]
 800873c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008740:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008744:	6053      	str	r3, [r2, #4]

    /* Disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 8008746:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 800874a:	2b0f      	cmp	r3, #15
 800874c:	d80a      	bhi.n	8008764 <R3_2_HFCurrentsPolarizationC+0x40>
    {
      /* Phase C is read from SECTOR_1, second value */
      pHandle-> PhaseCOffset += ADCDataReg2;
      pHandle->PolarizationCounter++;
 800874e:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
      pHandle-> PhaseCOffset += ADCDataReg2;
 8008752:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
      pHandle->PolarizationCounter++;
 8008756:	3301      	adds	r3, #1
      pHandle-> PhaseCOffset += ADCDataReg2;
 8008758:	4422      	add	r2, r4
      pHandle->PolarizationCounter++;
 800875a:	b2db      	uxtb	r3, r3
      pHandle-> PhaseCOffset += ADCDataReg2;
 800875c:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
      pHandle->PolarizationCounter++;
 8008760:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    {
      /* Nothing to do */
    }

    /* During offset calibration no current is flowing in the phases */
    Iab->a = 0;
 8008764:	2300      	movs	r3, #0
    Iab->b = 0;
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 8008766:	f85d 4b04 	ldr.w	r4, [sp], #4
    Iab->a = 0;
 800876a:	600b      	str	r3, [r1, #0]
}
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop

08008770 <R3_2_SwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008770:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
  pHandle->ADCRegularLocked = true;

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 8008774:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008778:	681b      	ldr	r3, [r3, #0]
  pHandle->ADCRegularLocked = true;
 800877a:	f04f 0c01 	mov.w	ip, #1
{
 800877e:	b5f0      	push	{r4, r5, r6, r7, lr}
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 8008780:	fa22 f10c 	lsr.w	r1, r2, ip
  pHandle->_Super.TurnOnLowSidesAction = false;
 8008784:	f04f 0e00 	mov.w	lr, #0
 8008788:	f880 e07c 	strb.w	lr, [r0, #124]	@ 0x7c
  pHandle->ADCRegularLocked = true;
 800878c:	f880 c0a0 	strb.w	ip, [r0, #160]	@ 0xa0
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t)pHandle->Half_PWMPeriod - (uint32_t)5));
 8008790:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008792:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008794:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008796:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008798:	f06f 0101 	mvn.w	r1, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 800879c:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800879e:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80087a0:	691a      	ldr	r2, [r3, #16]
 80087a2:	07d2      	lsls	r2, r2, #31
 80087a4:	d5fc      	bpl.n	80087a0 <R3_2_SwitchOnPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80087a6:	f06f 0201 	mvn.w	r2, #1
 80087aa:	611a      	str	r2, [r3, #16]
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80087ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80087b2:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80087b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80087ba:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 80087bc:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 80087c0:	2a02      	cmp	r2, #2
 80087c2:	d007      	beq.n	80087d4 <R3_2_SwitchOnPWM+0x64>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80087c4:	f06f 0201 	mvn.w	r2, #1
 80087c8:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80087ca:	68da      	ldr	r2, [r3, #12]
 80087cc:	f042 0201 	orr.w	r2, r2, #1
 80087d0:	60da      	str	r2, [r3, #12]
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE(TIMx);
}
 80087d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 80087d4:	6a19      	ldr	r1, [r3, #32]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80087d6:	6bc7      	ldr	r7, [r0, #60]	@ 0x3c
 80087d8:	f8b0 c048 	ldrh.w	ip, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80087dc:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 80087de:	f8b0 604a 	ldrh.w	r6, [r0, #74]	@ 0x4a
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80087e2:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80087e4:	f8b0 004c 	ldrh.w	r0, [r0, #76]	@ 0x4c
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 80087e8:	f240 5255 	movw	r2, #1365	@ 0x555
 80087ec:	4211      	tst	r1, r2
 80087ee:	d004      	beq.n	80087fa <R3_2_SwitchOnPWM+0x8a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80087f0:	f8c7 c018 	str.w	ip, [r7, #24]
 80087f4:	61ae      	str	r6, [r5, #24]
 80087f6:	61a0      	str	r0, [r4, #24]
}
 80087f8:	e7e4      	b.n	80087c4 <R3_2_SwitchOnPWM+0x54>
  WRITE_REG(GPIOx->BRR, PinMask);
 80087fa:	f8c7 c028 	str.w	ip, [r7, #40]	@ 0x28
 80087fe:	62ae      	str	r6, [r5, #40]	@ 0x28
 8008800:	62a0      	str	r0, [r4, #40]	@ 0x28
}
 8008802:	e7df      	b.n	80087c4 <R3_2_SwitchOnPWM+0x54>

08008804 <R3_2_SwitchOffPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008804:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (true == pHandle->_Super.BrakeActionLock)
 8008808:	f890 1083 	ldrb.w	r1, [r0, #131]	@ 0x83
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800880c:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800880e:	68d3      	ldr	r3, [r2, #12]
 8008810:	f023 0301 	bic.w	r3, r3, #1
 8008814:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008816:	6c53      	ldr	r3, [r2, #68]	@ 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 8008818:	f04f 0c00 	mov.w	ip, #0
 800881c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008820:	f880 c07c 	strb.w	ip, [r0, #124]	@ 0x7c
 8008824:	6453      	str	r3, [r2, #68]	@ 0x44
  if (true == pHandle->_Super.BrakeActionLock)
 8008826:	b919      	cbnz	r1, 8008830 <R3_2_SwitchOffPWM+0x2c>
  {
    /* Nothing to do */
  }
  else
  {
    if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 8008828:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800882c:	2b02      	cmp	r3, #2
 800882e:	d00c      	beq.n	800884a <R3_2_SwitchOffPWM+0x46>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008830:	f06f 0301 	mvn.w	r3, #1
 8008834:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008836:	6913      	ldr	r3, [r2, #16]
 8008838:	07db      	lsls	r3, r3, #31
 800883a:	d5fc      	bpl.n	8008836 <R3_2_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800883c:	f06f 0101 	mvn.w	r1, #1
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* We allow ADC usage for regular conversion on Systick */
  pHandle->ADCRegularLocked = false;
 8008840:	2300      	movs	r3, #0
 8008842:	6111      	str	r1, [r2, #16]
 8008844:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8008848:	4770      	bx	lr
{
 800884a:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800884c:	e9d0 410f 	ldrd	r4, r1, [r0, #60]	@ 0x3c
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8008850:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8008854:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  WRITE_REG(GPIOx->BRR, PinMask);
 8008856:	62a5      	str	r5, [r4, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8008858:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
 800885c:	628c      	str	r4, [r1, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800885e:	f8b0 104c 	ldrh.w	r1, [r0, #76]	@ 0x4c
 8008862:	6299      	str	r1, [r3, #40]	@ 0x28
 8008864:	f06f 0301 	mvn.w	r3, #1
 8008868:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800886a:	6913      	ldr	r3, [r2, #16]
 800886c:	07d9      	lsls	r1, r3, #31
 800886e:	d5fc      	bpl.n	800886a <R3_2_SwitchOffPWM+0x66>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008870:	f06f 0101 	mvn.w	r1, #1
  pHandle->ADCRegularLocked = false;
 8008874:	2300      	movs	r3, #0
 8008876:	6111      	str	r1, [r2, #16]
}
 8008878:	bc30      	pop	{r4, r5}
  pHandle->ADCRegularLocked = false;
 800887a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
}
 800887e:	4770      	bx	lr

08008880 <R3_2_RLGetPhaseCurrents>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @param  pStator_Currents: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_RLGetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *pStator_Currents)
{
 8008880:	b410      	push	{r4}
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008882:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
 8008886:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008888:	6853      	ldr	r3, [r2, #4]
 800888a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800888e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008892:	6053      	str	r3, [r2, #4]

    /* Disable ADC trigger source */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    wAux = ((int32_t)pHandle->PhaseBOffset)
         - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 8008894:	f890 207a 	ldrb.w	r2, [r0, #122]	@ 0x7a
    wAux = ((int32_t)pHandle->PhaseBOffset)
 8008898:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
    else
    {
      wAux = -INT16_MAX;
    }

    pStator_Currents->a = (int16_t)wAux;
 800889c:	480c      	ldr	r0, [pc, #48]	@ (80088d0 <R3_2_RLGetPhaseCurrents+0x50>)
         - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 800889e:	3214      	adds	r2, #20
 80088a0:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 80088a4:	f8d4 4080 	ldr.w	r4, [r4, #128]	@ 0x80
      if (wAux < INT16_MAX)
 80088a8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
    wAux = ((int32_t)pHandle->PhaseBOffset)
 80088ac:	1b1b      	subs	r3, r3, r4
      if (wAux < INT16_MAX)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	bfa8      	it	ge
 80088b2:	4613      	movge	r3, r2
    pStator_Currents->a = (int16_t)wAux;
 80088b4:	4283      	cmp	r3, r0
 80088b6:	bfb8      	it	lt
 80088b8:	4603      	movlt	r3, r0
 80088ba:	b21b      	sxth	r3, r3
 80088bc:	2200      	movs	r2, #0
 80088be:	f363 020f 	bfi	r2, r3, #0, #16
 80088c2:	f363 421f 	bfi	r2, r3, #16, #16
    pStator_Currents->b = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 80088c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    pStator_Currents->a = (int16_t)wAux;
 80088ca:	600a      	str	r2, [r1, #0]
}
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	ffff8001 	.word	0xffff8001

080088d4 <R3_2_RLSwitchOnPWM>:
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80088d4:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
{
 80088d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80088dc:	6813      	ldr	r3, [r2, #0]
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCDataReg1[0];
 80088de:	6b94      	ldr	r4, [r2, #56]	@ 0x38
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCDataReg2[0];
 80088e0:	6d11      	ldr	r1, [r2, #80]	@ 0x50

    pHandle->ADCRegularLocked=true;
 80088e2:	2201      	movs	r2, #1
 80088e4:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80088e8:	f06f 0201 	mvn.w	r2, #1
 80088ec:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80088ee:	691a      	ldr	r2, [r3, #16]
 80088f0:	07d5      	lsls	r5, r2, #31
 80088f2:	d5fc      	bpl.n	80088ee <R3_2_RLSwitchOnPWM+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80088f4:	f06f 0201 	mvn.w	r2, #1
 80088f8:	611a      	str	r2, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80088fa:	2201      	movs	r2, #1
 80088fc:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    /* Clear Update Flag */
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 1U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 80088fe:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
 8008902:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008904:	641a      	str	r2, [r3, #64]	@ 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008906:	691a      	ldr	r2, [r3, #16]
 8008908:	07d2      	lsls	r2, r2, #31
 800890a:	d5fc      	bpl.n	8008906 <R3_2_RLSwitchOnPWM+0x32>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800890c:	68da      	ldr	r2, [r3, #12]
 800890e:	f042 0201 	orr.w	r2, r2, #1
 8008912:	60da      	str	r2, [r3, #12]

    /* Enable TIMx update interrupt */
    LL_TIM_EnableIT_UPDATE(TIMx);

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8008914:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008916:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800891a:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800891c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800891e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008922:	645a      	str	r2, [r3, #68]	@ 0x44
    LL_TIM_EnableAllOutputs(TIMx);

    if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 8008924:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 8008928:	2a02      	cmp	r2, #2
 800892a:	d117      	bne.n	800895c <R3_2_RLSwitchOnPWM+0x88>
    {
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 800892c:	6a1a      	ldr	r2, [r3, #32]
      {
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800892e:	f8d0 e03c 	ldr.w	lr, [r0, #60]	@ 0x3c
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8008932:	6c07      	ldr	r7, [r0, #64]	@ 0x40
        LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8008934:	6c45      	ldr	r5, [r0, #68]	@ 0x44
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8008936:	f8b0 8048 	ldrh.w	r8, [r0, #72]	@ 0x48
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800893a:	f8b0 c04a 	ldrh.w	ip, [r0, #74]	@ 0x4a
        LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800893e:	f8b0 604c 	ldrh.w	r6, [r0, #76]	@ 0x4c
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 8008942:	f240 5355 	movw	r3, #1365	@ 0x555
 8008946:	421a      	tst	r2, r3
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008948:	bf15      	itete	ne
 800894a:	f8ce 8018 	strne.w	r8, [lr, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 800894e:	f8ce 8028 	streq.w	r8, [lr, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008952:	f8c7 c018 	strne.w	ip, [r7, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8008956:	f8c7 c028 	streq.w	ip, [r7, #40]	@ 0x28
 800895a:	62ae      	str	r6, [r5, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Set the sector that correspond to Phase B and C sampling
     * B will be sampled by ADCx_1 */
    pHdl->Sector = SECTOR_4;
 800895c:	2303      	movs	r3, #3
 800895e:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
  MODIFY_REG(ADCx->CR,
 8008962:	68a3      	ldr	r3, [r4, #8]
 8008964:	4a05      	ldr	r2, [pc, #20]	@ (800897c <R3_2_RLSwitchOnPWM+0xa8>)
 8008966:	4013      	ands	r3, r2
 8008968:	f043 0308 	orr.w	r3, r3, #8
 800896c:	60a3      	str	r3, [r4, #8]
 800896e:	688b      	ldr	r3, [r1, #8]
 8008970:	4013      	ands	r3, r2
 8008972:	f043 0308 	orr.w	r3, r3, #8
 8008976:	608b      	str	r3, [r1, #8]
    LL_ADC_INJ_StartConversion(ADCx_1);
    LL_ADC_INJ_StartConversion(ADCx_2);
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 8008978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800897c:	7fffffc0 	.word	0x7fffffc0

08008980 <R3_2_TurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008980:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8008984:	681a      	ldr	r2, [r3, #0]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8008986:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800898a:	f06f 0301 	mvn.w	r3, #1
 800898e:	f880 c07c 	strb.w	ip, [r0, #124]	@ 0x7c
 8008992:	6113      	str	r3, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008994:	6351      	str	r1, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008996:	6391      	str	r1, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008998:	63d1      	str	r1, [r2, #60]	@ 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800899a:	6913      	ldr	r3, [r2, #16]
 800899c:	07db      	lsls	r3, r3, #31
 800899e:	d5fc      	bpl.n	800899a <R3_2_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80089a0:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 80089a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089a6:	6453      	str	r3, [r2, #68]	@ 0x44
  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 80089a8:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d000      	beq.n	80089b2 <R3_2_TurnOnLowSides+0x32>
 80089b0:	4770      	bx	lr
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80089b2:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 80089b6:	b410      	push	{r4}
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80089b8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80089ba:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  WRITE_REG(GPIOx->BSRR, PinMask);
 80089be:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80089c0:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80089c4:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 80089c8:	618c      	str	r4, [r1, #24]
}
 80089ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089ce:	619a      	str	r2, [r3, #24]
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop

080089d4 <R3_2_SetAOReferenceVoltage>:
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 80089d4:	ea4f 4c90 	mov.w	ip, r0, lsr #18
{
 80089d8:	b510      	push	{r4, lr}
 80089da:	f00c 0c3c 	and.w	ip, ip, #60	@ 0x3c
 80089de:	f101 0e08 	add.w	lr, r1, #8
 80089e2:	b082      	sub	sp, #8
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 80089e4:	f85e 300c 	ldr.w	r3, [lr, ip]
 80089e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80089ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80089f0:	4313      	orrs	r3, r2
 80089f2:	f84e 300c 	str.w	r3, [lr, ip]
  SET_BIT(DACx->SWTRIGR,
 80089f6:	684a      	ldr	r2, [r1, #4]
 80089f8:	f000 0303 	and.w	r3, r0, #3
 80089fc:	4313      	orrs	r3, r2
 80089fe:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 8008a00:	680a      	ldr	r2, [r1, #0]
 8008a02:	f000 0010 	and.w	r0, r0, #16
 8008a06:	2301      	movs	r3, #1
 8008a08:	4083      	lsls	r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8008a0a:	ea33 0202 	bics.w	r2, r3, r2
 8008a0e:	d014      	beq.n	8008a3a <R3_2_SetAOReferenceVoltage+0x66>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 8008a10:	4a14      	ldr	r2, [pc, #80]	@ (8008a64 <R3_2_SetAOReferenceVoltage+0x90>)
 8008a12:	4815      	ldr	r0, [pc, #84]	@ (8008a68 <R3_2_SetAOReferenceVoltage+0x94>)
 8008a14:	6812      	ldr	r2, [r2, #0]
  SET_BIT(DACx->CR,
 8008a16:	680c      	ldr	r4, [r1, #0]
 8008a18:	fba0 0202 	umull	r0, r2, r0, r2
 8008a1c:	0cd2      	lsrs	r2, r2, #19
 8008a1e:	4323      	orrs	r3, r4
 8008a20:	00d2      	lsls	r2, r2, #3
 8008a22:	600b      	str	r3, [r1, #0]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 8008a24:	9200      	str	r2, [sp, #0]
    while (wait_loop_index != 0UL)
 8008a26:	9b00      	ldr	r3, [sp, #0]
 8008a28:	b12b      	cbz	r3, 8008a36 <R3_2_SetAOReferenceVoltage+0x62>
      wait_loop_index--;
 8008a2a:	9b00      	ldr	r3, [sp, #0]
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	9300      	str	r3, [sp, #0]
    while (wait_loop_index != 0UL)
 8008a30:	9b00      	ldr	r3, [sp, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d1f9      	bne.n	8008a2a <R3_2_SetAOReferenceVoltage+0x56>
}
 8008a36:	b002      	add	sp, #8
 8008a38:	bd10      	pop	{r4, pc}
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8008a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8008a64 <R3_2_SetAOReferenceVoltage+0x90>)
 8008a3c:	4a0a      	ldr	r2, [pc, #40]	@ (8008a68 <R3_2_SetAOReferenceVoltage+0x94>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	fba2 2303 	umull	r2, r3, r2, r3
 8008a44:	0cdb      	lsrs	r3, r3, #19
 8008a46:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008a4a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8008a4c:	9b01      	ldr	r3, [sp, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d0f1      	beq.n	8008a36 <R3_2_SetAOReferenceVoltage+0x62>
      wait_loop_index--;
 8008a52:	9b01      	ldr	r3, [sp, #4]
 8008a54:	3b01      	subs	r3, #1
 8008a56:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8008a58:	9b01      	ldr	r3, [sp, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1f9      	bne.n	8008a52 <R3_2_SetAOReferenceVoltage+0x7e>
}
 8008a5e:	b002      	add	sp, #8
 8008a60:	bd10      	pop	{r4, pc}
 8008a62:	bf00      	nop
 8008a64:	200004ec 	.word	0x200004ec
 8008a68:	431bde83 	.word	0x431bde83

08008a6c <R3_2_RLTurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008a6c:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8008a70:	681a      	ldr	r2, [r3, #0]
  pHandle->ADCRegularLocked = true;
 8008a72:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008a76:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008a78:	f06f 0301 	mvn.w	r3, #1
 8008a7c:	f880 c0a0 	strb.w	ip, [r0, #160]	@ 0xa0
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008a80:	6351      	str	r1, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008a82:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008a84:	6913      	ldr	r3, [r2, #16]
 8008a86:	07db      	lsls	r3, r3, #31
 8008a88:	d5fc      	bpl.n	8008a84 <R3_2_RLTurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008a8a:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8008a8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a90:	6453      	str	r3, [r2, #68]	@ 0x44
  if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 8008a92:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d000      	beq.n	8008a9c <R3_2_RLTurnOnLowSides+0x30>
 8008a9a:	4770      	bx	lr
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8008a9c:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 8008aa0:	b410      	push	{r4}
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8008aa2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8008aa4:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
 8008aa8:	6194      	str	r4, [r2, #24]
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8008aaa:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8008aae:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
  WRITE_REG(GPIOx->BRR, PinMask);
 8008ab2:	628c      	str	r4, [r1, #40]	@ 0x28
}
 8008ab4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ab8:	629a      	str	r2, [r3, #40]	@ 0x28
 8008aba:	4770      	bx	lr

08008abc <R3_2_Init>:
{
 8008abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8008ac0:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCDataReg1[0];
 8008ac4:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCDataReg2[0];
 8008ac6:	6d26      	ldr	r6, [r4, #80]	@ 0x50
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8008ac8:	687a      	ldr	r2, [r7, #4]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008aca:	6825      	ldr	r5, [r4, #0]
    COMP_TypeDef *COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 8008acc:	f8d4 b00c 	ldr.w	fp, [r4, #12]
{
 8008ad0:	4680      	mov	r8, r0
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 8008ad2:	e9d4 c006 	ldrd	ip, r0, [r4, #24]
{
 8008ad6:	b087      	sub	sp, #28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8008ad8:	f04f 0e04 	mov.w	lr, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8008adc:	f022 0204 	bic.w	r2, r2, #4
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 8008ae0:	9000      	str	r0, [sp, #0]
    DAC_TypeDef *DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 8008ae2:	6a20      	ldr	r0, [r4, #32]
 8008ae4:	9001      	str	r0, [sp, #4]
    COMP_TypeDef *COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 8008ae6:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    DAC_TypeDef *DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 8008aea:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8008aec:	9002      	str	r0, [sp, #8]
    COMP_TypeDef *COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 8008aee:	e9d4 a904 	ldrd	sl, r9, [r4, #16]
 8008af2:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8008af4:	f8c7 e000 	str.w	lr, [r7]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8008af8:	687a      	ldr	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8008afa:	2020      	movs	r0, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8008afc:	f022 0220 	bic.w	r2, r2, #32
 8008b00:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8008b02:	6038      	str	r0, [r7, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8008b04:	6872      	ldr	r2, [r6, #4]
 8008b06:	f022 0204 	bic.w	r2, r2, #4
 8008b0a:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8008b0c:	f8c6 e000 	str.w	lr, [r6]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8008b10:	6872      	ldr	r2, [r6, #4]
 8008b12:	f022 0220 	bic.w	r2, r2, #32
 8008b16:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8008b18:	6030      	str	r0, [r6, #0]
      if (TIM1 ==  TIMx)
 8008b1a:	4a85      	ldr	r2, [pc, #532]	@ (8008d30 <R3_2_Init+0x274>)
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8008b1c:	4885      	ldr	r0, [pc, #532]	@ (8008d34 <R3_2_Init+0x278>)
 8008b1e:	4295      	cmp	r5, r2
 8008b20:	6902      	ldr	r2, [r0, #16]
 8008b22:	bf0c      	ite	eq
 8008b24:	f442 6200 	orreq.w	r2, r2, #2048	@ 0x800
 8008b28:	f442 5200 	orrne.w	r2, r2, #8192	@ 0x2000
 8008b2c:	6102      	str	r2, [r0, #16]
      if (OPAMPParams != NULL)
 8008b2e:	b181      	cbz	r1, 8008b52 <R3_2_Init+0x96>
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_1[1]);
 8008b30:	e9d1 2000 	ldrd	r2, r0, [r1]
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 8008b34:	f8d2 e000 	ldr.w	lr, [r2]
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_2[0]);
 8008b38:	6989      	ldr	r1, [r1, #24]
 8008b3a:	f04e 0e01 	orr.w	lr, lr, #1
 8008b3e:	f8c2 e000 	str.w	lr, [r2]
 8008b42:	6802      	ldr	r2, [r0, #0]
 8008b44:	f042 0201 	orr.w	r2, r2, #1
 8008b48:	6002      	str	r2, [r0, #0]
 8008b4a:	680a      	ldr	r2, [r1, #0]
 8008b4c:	f042 0201 	orr.w	r2, r2, #1
 8008b50:	600a      	str	r2, [r1, #0]
      if (COMP_OCPAx != NULL)
 8008b52:	b1b3      	cbz	r3, 8008b82 <R3_2_Init+0xc6>
        if ((pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE) && (DAC_OCPAx != MC_NULL))
 8008b54:	f894 20a7 	ldrb.w	r2, [r4, #167]	@ 0xa7
 8008b58:	2a01      	cmp	r2, #1
 8008b5a:	d00a      	beq.n	8008b72 <R3_2_Init+0xb6>
 8008b5c:	f1bc 0f00 	cmp.w	ip, #0
 8008b60:	d007      	beq.n	8008b72 <R3_2_Init+0xb6>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx,
 8008b62:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	@ 0xa2
 8008b66:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8008b68:	9303      	str	r3, [sp, #12]
 8008b6a:	4661      	mov	r1, ip
 8008b6c:	f7ff ff32 	bl	80089d4 <R3_2_SetAOReferenceVoltage>
 8008b70:	9b03      	ldr	r3, [sp, #12]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	f042 0201 	orr.w	r2, r2, #1
 8008b78:	601a      	str	r2, [r3, #0]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008b80:	601a      	str	r2, [r3, #0]
      if (COMP_OCPBx != NULL)
 8008b82:	f1bb 0f00 	cmp.w	fp, #0
 8008b86:	d017      	beq.n	8008bb8 <R3_2_Init+0xfc>
        if ((pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE) && (DAC_OCPBx != MC_NULL))
 8008b88:	f894 30a8 	ldrb.w	r3, [r4, #168]	@ 0xa8
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d007      	beq.n	8008ba0 <R3_2_Init+0xe4>
 8008b90:	9b00      	ldr	r3, [sp, #0]
 8008b92:	b12b      	cbz	r3, 8008ba0 <R3_2_Init+0xe4>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,
 8008b94:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	@ 0xa2
 8008b98:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	f7ff ff1a 	bl	80089d4 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008ba0:	f8db 3000 	ldr.w	r3, [fp]
 8008ba4:	f043 0301 	orr.w	r3, r3, #1
 8008ba8:	f8cb 3000 	str.w	r3, [fp]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008bac:	f8db 3000 	ldr.w	r3, [fp]
 8008bb0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bb4:	f8cb 3000 	str.w	r3, [fp]
      if (COMP_OCPCx != NULL)
 8008bb8:	f1ba 0f00 	cmp.w	sl, #0
 8008bbc:	d017      	beq.n	8008bee <R3_2_Init+0x132>
        if ((pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE)  && (DAC_OCPCx != MC_NULL))
 8008bbe:	f894 30a9 	ldrb.w	r3, [r4, #169]	@ 0xa9
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d007      	beq.n	8008bd6 <R3_2_Init+0x11a>
 8008bc6:	9b01      	ldr	r3, [sp, #4]
 8008bc8:	b12b      	cbz	r3, 8008bd6 <R3_2_Init+0x11a>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,
 8008bca:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	@ 0xa2
 8008bce:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	f7ff feff 	bl	80089d4 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008bd6:	f8da 3000 	ldr.w	r3, [sl]
 8008bda:	f043 0301 	orr.w	r3, r3, #1
 8008bde:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008be2:	f8da 3000 	ldr.w	r3, [sl]
 8008be6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bea:	f8ca 3000 	str.w	r3, [sl]
      if (COMP_OVPx != NULL)
 8008bee:	f1b9 0f00 	cmp.w	r9, #0
 8008bf2:	d017      	beq.n	8008c24 <R3_2_Init+0x168>
        if ((pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE) && (DAC_OVPx != MC_NULL))
 8008bf4:	f894 30aa 	ldrb.w	r3, [r4, #170]	@ 0xaa
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d007      	beq.n	8008c0c <R3_2_Init+0x150>
 8008bfc:	9b02      	ldr	r3, [sp, #8]
 8008bfe:	b12b      	cbz	r3, 8008c0c <R3_2_Init+0x150>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,
 8008c00:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	@ 0xa4
 8008c04:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8008c06:	4619      	mov	r1, r3
 8008c08:	f7ff fee4 	bl	80089d4 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008c0c:	f8d9 3000 	ldr.w	r3, [r9]
 8008c10:	f043 0301 	orr.w	r3, r3, #1
 8008c14:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008c18:	f8d9 3000 	ldr.w	r3, [r9]
 8008c1c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c20:	f8c9 3000 	str.w	r3, [r9]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	07da      	lsls	r2, r3, #31
 8008c28:	d553      	bpl.n	8008cd2 <R3_2_Init+0x216>
 8008c2a:	68b3      	ldr	r3, [r6, #8]
 8008c2c:	07db      	lsls	r3, r3, #31
 8008c2e:	d54c      	bpl.n	8008cca <R3_2_Init+0x20e>
  volatile uint32_t Brk2Timeout = 1000;
 8008c30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008c34:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8008c36:	682b      	ldr	r3, [r5, #0]
 8008c38:	f023 0301 	bic.w	r3, r3, #1
 8008c3c:	602b      	str	r3, [r5, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008c3e:	686b      	ldr	r3, [r5, #4]
 8008c40:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008c44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c48:	606b      	str	r3, [r5, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008c4a:	69ab      	ldr	r3, [r5, #24]
 8008c4c:	f043 0308 	orr.w	r3, r3, #8
 8008c50:	61ab      	str	r3, [r5, #24]
 8008c52:	69ab      	ldr	r3, [r5, #24]
 8008c54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008c58:	61ab      	str	r3, [r5, #24]
 8008c5a:	69eb      	ldr	r3, [r5, #28]
 8008c5c:	f043 0308 	orr.w	r3, r3, #8
 8008c60:	61eb      	str	r3, [r5, #28]
 8008c62:	69eb      	ldr	r3, [r5, #28]
 8008c64:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008c68:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008c6a:	696b      	ldr	r3, [r5, #20]
 8008c6c:	f043 0301 	orr.w	r3, r3, #1
 8008c70:	616b      	str	r3, [r5, #20]
  if (2U == pHandle->pParams_str->FreqRatio)
 8008c72:	f894 30ab 	ldrb.w	r3, [r4, #171]	@ 0xab
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d046      	beq.n	8008d08 <R3_2_Init+0x24c>
    if (M1 == pHandle->_Super.Motor)
 8008c7a:	f898 3078 	ldrb.w	r3, [r8, #120]	@ 0x78
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d034      	beq.n	8008cec <R3_2_Init+0x230>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8008c82:	f06f 0380 	mvn.w	r3, #128	@ 0x80
 8008c86:	612b      	str	r3, [r5, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8008c88:	692b      	ldr	r3, [r5, #16]
  while ((Brk2Timeout != 0u) && (1U == result))
 8008c8a:	9a05      	ldr	r2, [sp, #20]
 8008c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c90:	b172      	cbz	r2, 8008cb0 <R3_2_Init+0x1f4>
 8008c92:	b16b      	cbz	r3, 8008cb0 <R3_2_Init+0x1f4>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8008c94:	f46f 7180 	mvn.w	r1, #256	@ 0x100
 8008c98:	e000      	b.n	8008c9c <R3_2_Init+0x1e0>
 8008c9a:	b14b      	cbz	r3, 8008cb0 <R3_2_Init+0x1f4>
 8008c9c:	6129      	str	r1, [r5, #16]
    Brk2Timeout--;
 8008c9e:	9b05      	ldr	r3, [sp, #20]
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8008ca4:	692b      	ldr	r3, [r5, #16]
  while ((Brk2Timeout != 0u) && (1U == result))
 8008ca6:	9a05      	ldr	r2, [sp, #20]
 8008ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cac:	2a00      	cmp	r2, #0
 8008cae:	d1f4      	bne.n	8008c9a <R3_2_Init+0x1de>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8008cb0:	68eb      	ldr	r3, [r5, #12]
 8008cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cb6:	60eb      	str	r3, [r5, #12]
  SET_BIT(TIMx->CCER, Channels);
 8008cb8:	6a2b      	ldr	r3, [r5, #32]
 8008cba:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 8008cbe:	f043 0305 	orr.w	r3, r3, #5
 8008cc2:	622b      	str	r3, [r5, #32]
}
 8008cc4:	b007      	add	sp, #28
 8008cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        R3_2_ADCxInit(ADCx_2);
 8008cca:	4630      	mov	r0, r6
 8008ccc:	f7ff fbc2 	bl	8008454 <R3_2_ADCxInit>
 8008cd0:	e7ae      	b.n	8008c30 <R3_2_Init+0x174>
        R3_2_ADCxInit(ADCx_1);
 8008cd2:	4638      	mov	r0, r7
 8008cd4:	f7ff fbbe 	bl	8008454 <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8008cd8:	2340      	movs	r3, #64	@ 0x40
 8008cda:	603b      	str	r3, [r7, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ce2:	607b      	str	r3, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008ce4:	68b3      	ldr	r3, [r6, #8]
 8008ce6:	07db      	lsls	r3, r3, #31
 8008ce8:	d4a2      	bmi.n	8008c30 <R3_2_Init+0x174>
 8008cea:	e7ee      	b.n	8008cca <R3_2_Init+0x20e>
      if (1U == pHandle->pParams_str->RepetitionCounter)
 8008cec:	f894 30a6 	ldrb.w	r3, [r4, #166]	@ 0xa6
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d00d      	beq.n	8008d10 <R3_2_Init+0x254>
      else if (3U == pHandle->pParams_str->RepetitionCounter)
 8008cf4:	2b03      	cmp	r3, #3
 8008cf6:	d1c4      	bne.n	8008c82 <R3_2_Init+0x1c6>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	632a      	str	r2, [r5, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008cfc:	696a      	ldr	r2, [r5, #20]
 8008cfe:	f042 0201 	orr.w	r2, r2, #1
 8008d02:	616a      	str	r2, [r5, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008d04:	632b      	str	r3, [r5, #48]	@ 0x30
}
 8008d06:	e7bc      	b.n	8008c82 <R3_2_Init+0x1c6>
    if (HIGHER_FREQ == pHandle->pParams_str->IsHigherFreqTim)
 8008d08:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d004      	beq.n	8008d1a <R3_2_Init+0x25e>
        LL_TIM_SetCounter(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) - 1U);
 8008d10:	f8b8 3094 	ldrh.w	r3, [r8, #148]	@ 0x94
 8008d14:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 8008d16:	626b      	str	r3, [r5, #36]	@ 0x24
}
 8008d18:	e7b3      	b.n	8008c82 <R3_2_Init+0x1c6>
      if (3U == pHandle->pParams_str->RepetitionCounter)
 8008d1a:	f894 20a6 	ldrb.w	r2, [r4, #166]	@ 0xa6
 8008d1e:	2a03      	cmp	r2, #3
 8008d20:	d1f6      	bne.n	8008d10 <R3_2_Init+0x254>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008d22:	632b      	str	r3, [r5, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008d24:	696b      	ldr	r3, [r5, #20]
 8008d26:	f043 0301 	orr.w	r3, r3, #1
 8008d2a:	616b      	str	r3, [r5, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008d2c:	632a      	str	r2, [r5, #48]	@ 0x30
}
 8008d2e:	e7ef      	b.n	8008d10 <R3_2_Init+0x254>
 8008d30:	40012c00 	.word	0x40012c00
 8008d34:	e0042000 	.word	0xe0042000

08008d38 <R3_2_SetOffsetCalib>:
{
 8008d38:	b410      	push	{r4}
    pHandle->PhaseAOffset = (uint32_t)offsets->phaseAOffset;
 8008d3a:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 8008d3e:	680b      	ldr	r3, [r1, #0]
 8008d40:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    pHdl->offsetCalibStatus = true;
 8008d44:	2301      	movs	r3, #1
    pHandle->PhaseAOffset = (uint32_t)offsets->phaseAOffset;
 8008d46:	e9c0 4223 	strd	r4, r2, [r0, #140]	@ 0x8c
    pHdl->offsetCalibStatus = true;
 8008d4a:	f880 307f 	strb.w	r3, [r0, #127]	@ 0x7f
}
 8008d4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <R3_2_GetOffsetCalib>:
  offsets->phaseAOffset = (int32_t)pHandle->PhaseAOffset;
 8008d54:	e9d0 2323 	ldrd	r2, r3, [r0, #140]	@ 0x8c
 8008d58:	f8d0 0088 	ldr.w	r0, [r0, #136]	@ 0x88
 8008d5c:	608b      	str	r3, [r1, #8]
 8008d5e:	e9c1 0200 	strd	r0, r2, [r1]
}
 8008d62:	4770      	bx	lr

08008d64 <R3_2_CurrentReadingPolarization>:
{
 8008d64:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008d66:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8008d6a:	681d      	ldr	r5, [r3, #0]
  ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCDataReg1[0];
 8008d6c:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
  ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCDataReg2[0];
 8008d6e:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
  if (true == pHandle->_Super.offsetCalibStatus)
 8008d70:	f890 307f 	ldrb.w	r3, [r0, #127]	@ 0x7f
{
 8008d74:	b083      	sub	sp, #12
 8008d76:	4604      	mov	r4, r0
  if (true == pHandle->_Super.offsetCalibStatus)
 8008d78:	b1ab      	cbz	r3, 8008da6 <R3_2_CurrentReadingPolarization+0x42>
  MODIFY_REG(ADCx->CR,
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	4a46      	ldr	r2, [pc, #280]	@ (8008e98 <R3_2_CurrentReadingPolarization+0x134>)
 8008d7e:	4013      	ands	r3, r2
 8008d80:	f043 0308 	orr.w	r3, r3, #8
 8008d84:	60bb      	str	r3, [r7, #8]
 8008d86:	68b3      	ldr	r3, [r6, #8]
 8008d88:	4013      	ands	r3, r2
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8008d8a:	2180      	movs	r1, #128	@ 0x80
 8008d8c:	f043 0308 	orr.w	r3, r3, #8
 8008d90:	60b3      	str	r3, [r6, #8]
 8008d92:	f8a0 1096 	strh.w	r1, [r0, #150]	@ 0x96
  pHandle->_Super.Sector = SECTOR_5;
 8008d96:	2204      	movs	r2, #4
  pHandle->_Super.BrakeActionLock = false;
 8008d98:	2300      	movs	r3, #0
  pHandle->_Super.Sector = SECTOR_5;
 8008d9a:	f884 207a 	strb.w	r2, [r4, #122]	@ 0x7a
  pHandle->_Super.BrakeActionLock = false;
 8008d9e:	f884 3083 	strb.w	r3, [r4, #131]	@ 0x83
}
 8008da2:	b003      	add	sp, #12
 8008da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8008da6:	6802      	ldr	r2, [r0, #0]
 8008da8:	9200      	str	r2, [sp, #0]
    pHandle->PhaseAOffset = 0U;
 8008daa:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8008dae:	6942      	ldr	r2, [r0, #20]
 8008db0:	9201      	str	r2, [sp, #4]
    pHandle->PolarizationCounter = 0U;
 8008db2:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    pHandle->PhaseCOffset = 0U;
 8008db6:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  CLEAR_BIT(TIMx->CCER, Channels);
 8008dba:	6a2b      	ldr	r3, [r5, #32]
 8008dbc:	f423 63aa 	bic.w	r3, r3, #1360	@ 0x550
 8008dc0:	f023 0305 	bic.w	r3, r3, #5
 8008dc4:	622b      	str	r3, [r5, #32]
    pHandle->PolarizationSector=SECTOR_5;
 8008dc6:	2304      	movs	r3, #4
 8008dc8:	f880 3099 	strb.w	r3, [r0, #153]	@ 0x99
    pHandle->_Super.Sector = SECTOR_5;
 8008dcc:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 8008dd0:	4b32      	ldr	r3, [pc, #200]	@ (8008e9c <R3_2_CurrentReadingPolarization+0x138>)
 8008dd2:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 8008dd4:	4b32      	ldr	r3, [pc, #200]	@ (8008ea0 <R3_2_CurrentReadingPolarization+0x13c>)
 8008dd6:	6143      	str	r3, [r0, #20]
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8008dd8:	2380      	movs	r3, #128	@ 0x80
 8008dda:	f8a0 3096 	strh.w	r3, [r0, #150]	@ 0x96
    R3_2_SwitchOnPWM(&pHandle->_Super);
 8008dde:	f7ff fcc7 	bl	8008770 <R3_2_SwitchOnPWM>
    while (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF)
 8008de2:	4a30      	ldr	r2, [pc, #192]	@ (8008ea4 <R3_2_CurrentReadingPolarization+0x140>)
 8008de4:	686b      	ldr	r3, [r5, #4]
 8008de6:	4013      	ands	r3, r2
 8008de8:	2b70      	cmp	r3, #112	@ 0x70
 8008dea:	d1fb      	bne.n	8008de4 <R3_2_CurrentReadingPolarization+0x80>
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	4a2a      	ldr	r2, [pc, #168]	@ (8008e98 <R3_2_CurrentReadingPolarization+0x134>)
 8008df0:	4013      	ands	r3, r2
 8008df2:	f043 0308 	orr.w	r3, r3, #8
 8008df6:	60bb      	str	r3, [r7, #8]
 8008df8:	68b3      	ldr	r3, [r6, #8]
 8008dfa:	4013      	ands	r3, r2
 8008dfc:	f043 0308 	orr.w	r3, r3, #8
                           pHandle->pParams_str->RepetitionCounter,
 8008e00:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 8008e04:	60b3      	str	r3, [r6, #8]
    waitForPolarizationEnd(TIMx,
 8008e06:	f104 0798 	add.w	r7, r4, #152	@ 0x98
 8008e0a:	f104 0656 	add.w	r6, r4, #86	@ 0x56
 8008e0e:	f892 20a6 	ldrb.w	r2, [r2, #166]	@ 0xa6
 8008e12:	4631      	mov	r1, r6
 8008e14:	463b      	mov	r3, r7
 8008e16:	4628      	mov	r0, r5
 8008e18:	f7f9 fb5e 	bl	80024d8 <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	f7ff fcf1 	bl	8008804 <R3_2_SwitchOffPWM>
    pHandle->PolarizationCounter = 0U;
 8008e22:	2300      	movs	r3, #0
 8008e24:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
    pHandle->PolarizationSector=SECTOR_1;
 8008e28:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
    pHandle->_Super.Sector = SECTOR_1;
 8008e2c:	f884 307a 	strb.w	r3, [r4, #122]	@ 0x7a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 8008e30:	4b1d      	ldr	r3, [pc, #116]	@ (8008ea8 <R3_2_CurrentReadingPolarization+0x144>)
 8008e32:	6023      	str	r3, [r4, #0]
    R3_2_SwitchOnPWM(&pHandle->_Super);
 8008e34:	4620      	mov	r0, r4
 8008e36:	f7ff fc9b 	bl	8008770 <R3_2_SwitchOnPWM>
                           pHandle->pParams_str->RepetitionCounter,
 8008e3a:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
    waitForPolarizationEnd(TIMx,
 8008e3e:	463b      	mov	r3, r7
 8008e40:	f892 20a6 	ldrb.w	r2, [r2, #166]	@ 0xa6
 8008e44:	4631      	mov	r1, r6
 8008e46:	4628      	mov	r0, r5
 8008e48:	f7f9 fb46 	bl	80024d8 <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	f7ff fcd9 	bl	8008804 <R3_2_SwitchOffPWM>
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8008e52:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	@ 0x88
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8008e56:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
    pHandle->PhaseAOffset /= NB_CONVERSIONS;
 8008e5a:	0908      	lsrs	r0, r1, #4
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8008e5c:	0911      	lsrs	r1, r2, #4
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8008e5e:	091a      	lsrs	r2, r3, #4
    LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod >> 1u);
 8008e60:	f8b4 3094 	ldrh.w	r3, [r4, #148]	@ 0x94
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8008e64:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8008e68:	e9c4 0122 	strd	r0, r1, [r4, #136]	@ 0x88
    LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod >> 1u);
 8008e6c:	085b      	lsrs	r3, r3, #1
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8008e6e:	9900      	ldr	r1, [sp, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8008e70:	9a01      	ldr	r2, [sp, #4]
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8008e72:	6021      	str	r1, [r4, #0]
    pHandle->_Super.offsetCalibStatus = true;
 8008e74:	2001      	movs	r0, #1
 8008e76:	f884 007f 	strb.w	r0, [r4, #127]	@ 0x7f
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8008e7a:	6162      	str	r2, [r4, #20]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008e7c:	636b      	str	r3, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008e7e:	63ab      	str	r3, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008e80:	63eb      	str	r3, [r5, #60]	@ 0x3c
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_COM(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 8008e82:	696b      	ldr	r3, [r5, #20]
 8008e84:	f043 0320 	orr.w	r3, r3, #32
 8008e88:	616b      	str	r3, [r5, #20]
  SET_BIT(TIMx->CCER, Channels);
 8008e8a:	6a2b      	ldr	r3, [r5, #32]
 8008e8c:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 8008e90:	f043 0305 	orr.w	r3, r3, #5
 8008e94:	622b      	str	r3, [r5, #32]
}
 8008e96:	e77e      	b.n	8008d96 <R3_2_CurrentReadingPolarization+0x32>
 8008e98:	7fffffc0 	.word	0x7fffffc0
 8008e9c:	080086d1 	.word	0x080086d1
 8008ea0:	0800868d 	.word	0x0800868d
 8008ea4:	02000070 	.word	0x02000070
 8008ea8:	08008725 	.word	0x08008725

08008eac <R3_2_SetADCSampPointSectX>:
{
 8008eac:	b530      	push	{r4, r5, lr}
    if ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) > pHandle->pParams_str->Tafter)
 8008eae:	f8b0 3058 	ldrh.w	r3, [r0, #88]	@ 0x58
 8008eb2:	f8b0 e094 	ldrh.w	lr, [r0, #148]	@ 0x94
 8008eb6:	f8d0 109c 	ldr.w	r1, [r0, #156]	@ 0x9c
 8008eba:	ebae 0203 	sub.w	r2, lr, r3
 8008ebe:	f8b1 4098 	ldrh.w	r4, [r1, #152]	@ 0x98
 8008ec2:	b292      	uxth	r2, r2
 8008ec4:	42a2      	cmp	r2, r4
 8008ec6:	d917      	bls.n	8008ef8 <R3_2_SetADCSampPointSectX+0x4c>
      pHandle->_Super.Sector = SECTOR_5;
 8008ec8:	2204      	movs	r2, #4
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 8008eca:	f10e 33ff 	add.w	r3, lr, #4294967295
      pHandle->_Super.Sector = SECTOR_5;
 8008ece:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 8008ed2:	b29b      	uxth	r3, r3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008ed4:	680a      	ldr	r2, [r1, #0]
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 8008ed6:	f8b0 5050 	ldrh.w	r5, [r0, #80]	@ 0x50
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 8008eda:	f8b0 4052 	ldrh.w	r4, [r0, #82]	@ 0x52
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 8008ede:	f8b0 1054 	ldrh.w	r1, [r0, #84]	@ 0x54
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008ee2:	6355      	str	r5, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008ee4:	6394      	str	r4, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008ee6:	63d1      	str	r1, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008ee8:	6413      	str	r3, [r2, #64]	@ 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8008eea:	6852      	ldr	r2, [r2, #4]
 8008eec:	4b10      	ldr	r3, [pc, #64]	@ (8008f30 <R3_2_SetADCSampPointSectX+0x84>)
 8008eee:	421a      	tst	r2, r3
}
 8008ef0:	bf14      	ite	ne
 8008ef2:	2001      	movne	r0, #1
 8008ef4:	2000      	moveq	r0, #0
 8008ef6:	bd30      	pop	{r4, r5, pc}
      DeltaDuty = (uint16_t)(pHdl->lowDuty - pHdl->midDuty);
 8008ef8:	f8b0 c05a 	ldrh.w	ip, [r0, #90]	@ 0x5a
 8008efc:	eba3 0c0c 	sub.w	ip, r3, ip
      if (DeltaDuty > ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) * 2U))
 8008f00:	fa1f fc8c 	uxth.w	ip, ip
 8008f04:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 8008f08:	d904      	bls.n	8008f14 <R3_2_SetADCSampPointSectX+0x68>
        SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 8008f0a:	f8b1 209c 	ldrh.w	r2, [r1, #156]	@ 0x9c
 8008f0e:	1a9b      	subs	r3, r3, r2
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	e7df      	b.n	8008ed4 <R3_2_SetADCSampPointSectX+0x28>
        SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 8008f14:	4423      	add	r3, r4
 8008f16:	b29b      	uxth	r3, r3
        if (SamplingPoint >= pHandle->Half_PWMPeriod)
 8008f18:	459e      	cmp	lr, r3
 8008f1a:	d8db      	bhi.n	8008ed4 <R3_2_SetADCSampPointSectX+0x28>
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 8008f1c:	43db      	mvns	r3, r3
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 8008f1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 8008f22:	eb03 034e 	add.w	r3, r3, lr, lsl #1
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 8008f26:	f8a0 2096 	strh.w	r2, [r0, #150]	@ 0x96
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	e7d2      	b.n	8008ed4 <R3_2_SetADCSampPointSectX+0x28>
 8008f2e:	bf00      	nop
 8008f30:	02000070 	.word	0x02000070

08008f34 <R3_2_TIMx_UP_IRQHandler>:
{
 8008f34:	b4f0      	push	{r4, r5, r6, r7}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008f36:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8008f3a:	f890 407a 	ldrb.w	r4, [r0, #122]	@ 0x7a
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8008f3e:	685e      	ldr	r6, [r3, #4]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008f40:	681d      	ldr	r5, [r3, #0]
{
 8008f42:	4601      	mov	r1, r0
 8008f44:	eb03 0084 	add.w	r0, r3, r4, lsl #2
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008f48:	6b82      	ldr	r2, [r0, #56]	@ 0x38
    if (OPAMPParams != NULL)
 8008f4a:	b1d6      	cbz	r6, 8008f82 <R3_2_TIMx_UP_IRQHandler+0x4e>
 8008f4c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
      while (0x0u != pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR)
 8008f50:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1fc      	bne.n	8008f50 <R3_2_TIMx_UP_IRQHandler+0x1c>
      OpampConfig = OPAMPParams->OPAMPConfig1[pHandle->_Super.Sector];
 8008f56:	eb06 030c 	add.w	r3, r6, ip
 8008f5a:	6b1f      	ldr	r7, [r3, #48]	@ 0x30
      if (OpampConfig != OPAMP_UNCHANGED)
 8008f5c:	f1b7 3fff 	cmp.w	r7, #4294967295
 8008f60:	d006      	beq.n	8008f70 <R3_2_TIMx_UP_IRQHandler+0x3c>
        operationAmp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 8008f62:	f856 6024 	ldr.w	r6, [r6, r4, lsl #2]
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 8008f66:	6834      	ldr	r4, [r6, #0]
 8008f68:	f424 7486 	bic.w	r4, r4, #268	@ 0x10c
 8008f6c:	433c      	orrs	r4, r7
 8008f6e:	6034      	str	r4, [r6, #0]
      OpampConfig = OPAMPParams->OPAMPConfig2[pHandle->_Super.Sector];
 8008f70:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
      if (OpampConfig != OPAMP_UNCHANGED)
 8008f72:	1c66      	adds	r6, r4, #1
 8008f74:	d005      	beq.n	8008f82 <R3_2_TIMx_UP_IRQHandler+0x4e>
        operationAmp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 8008f76:	699e      	ldr	r6, [r3, #24]
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 8008f78:	6833      	ldr	r3, [r6, #0]
 8008f7a:	f423 7386 	bic.w	r3, r3, #268	@ 0x10c
 8008f7e:	4323      	orrs	r3, r4
 8008f80:	6033      	str	r3, [r6, #0]
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008f82:	f8b1 3096 	ldrh.w	r3, [r1, #150]	@ 0x96
 8008f86:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 8008f88:	431c      	orrs	r4, r3
 8008f8a:	64d4      	str	r4, [r2, #76]	@ 0x4c
    pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008f8c:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8008f8e:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8008f92:	4303      	orrs	r3, r0
 8008f94:	64d3      	str	r3, [r2, #76]	@ 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008f96:	686b      	ldr	r3, [r5, #4]
 8008f98:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008f9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8008fa0:	2280      	movs	r2, #128	@ 0x80
 8008fa2:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8008fa6:	606b      	str	r3, [r5, #4]
}
 8008fa8:	f101 0078 	add.w	r0, r1, #120	@ 0x78
 8008fac:	bcf0      	pop	{r4, r5, r6, r7}
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8008fae:	f8a1 2096 	strh.w	r2, [r1, #150]	@ 0x96
}
 8008fb2:	4770      	bx	lr

08008fb4 <R3_2_RLDetectionModeEnable>:
  if (false == pHandle->_Super.RLDetectionMode)
 8008fb4:	f890 107e 	ldrb.w	r1, [r0, #126]	@ 0x7e
{
 8008fb8:	b410      	push	{r4}
  if (false == pHandle->_Super.RLDetectionMode)
 8008fba:	2900      	cmp	r1, #0
 8008fbc:	d13f      	bne.n	800903e <R3_2_RLDetectionModeEnable+0x8a>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008fbe:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8008fc2:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008fc4:	699a      	ldr	r2, [r3, #24]
 8008fc6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008fca:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8008fce:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8008fd2:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008fd4:	6a1a      	ldr	r2, [r3, #32]
 8008fd6:	f042 0201 	orr.w	r2, r2, #1
 8008fda:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008fdc:	6a1a      	ldr	r2, [r3, #32]
 8008fde:	f022 0204 	bic.w	r2, r2, #4
 8008fe2:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008fe4:	6359      	str	r1, [r3, #52]	@ 0x34
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 8008fe6:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 8008fea:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8008fec:	f103 0418 	add.w	r4, r3, #24
 8008ff0:	d033      	beq.n	800905a <R3_2_RLDetectionModeEnable+0xa6>
    else if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 8008ff2:	2a02      	cmp	r2, #2
 8008ff4:	d10f      	bne.n	8009016 <R3_2_RLDetectionModeEnable+0x62>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008ff6:	699a      	ldr	r2, [r3, #24]
 8008ff8:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8008ffc:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 8009000:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009004:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009006:	6a1a      	ldr	r2, [r3, #32]
 8009008:	f042 0210 	orr.w	r2, r2, #16
 800900c:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800900e:	6a1a      	ldr	r2, [r3, #32]
 8009010:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009014:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009016:	6862      	ldr	r2, [r4, #4]
 8009018:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800901c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8009020:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
 8009024:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009026:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 8009028:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
 800902c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009030:	621a      	str	r2, [r3, #32]
 8009032:	6a1a      	ldr	r2, [r3, #32]
 8009034:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009038:	621a      	str	r2, [r3, #32]
 800903a:	f8c0 1088 	str.w	r1, [r0, #136]	@ 0x88
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 800903e:	4b0f      	ldr	r3, [pc, #60]	@ (800907c <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 8009040:	490f      	ldr	r1, [pc, #60]	@ (8009080 <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8009042:	4a10      	ldr	r2, [pc, #64]	@ (8009084 <R3_2_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8009044:	4c10      	ldr	r4, [pc, #64]	@ (8009088 <R3_2_RLDetectionModeEnable+0xd4>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8009046:	6103      	str	r3, [r0, #16]
  pHandle->_Super.RLDetectionMode = true;
 8009048:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 800904a:	6004      	str	r4, [r0, #0]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800904c:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8009050:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 8009054:	f880 307e 	strb.w	r3, [r0, #126]	@ 0x7e
}
 8009058:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800905a:	699a      	ldr	r2, [r3, #24]
 800905c:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8009060:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 8009064:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009068:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 800906a:	6a1a      	ldr	r2, [r3, #32]
 800906c:	f022 0210 	bic.w	r2, r2, #16
 8009070:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8009072:	6a1a      	ldr	r2, [r3, #32]
 8009074:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009078:	621a      	str	r2, [r3, #32]
}
 800907a:	e7cc      	b.n	8009016 <R3_2_RLDetectionModeEnable+0x62>
 800907c:	08008a6d 	.word	0x08008a6d
 8009080:	080088d5 	.word	0x080088d5
 8009084:	08008805 	.word	0x08008805
 8009088:	08008881 	.word	0x08008881

0800908c <R3_2_RLDetectionModeDisable>:
  if (true ==  pHandle->_Super.RLDetectionMode)
 800908c:	f890 307e 	ldrb.w	r3, [r0, #126]	@ 0x7e
 8009090:	2b00      	cmp	r3, #0
 8009092:	d03d      	beq.n	8009110 <R3_2_RLDetectionModeDisable+0x84>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009094:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 8009098:	f8b0 1094 	ldrh.w	r1, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800909c:	681b      	ldr	r3, [r3, #0]
{
 800909e:	b410      	push	{r4}
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80090a0:	699a      	ldr	r2, [r3, #24]
 80090a2:	4c40      	ldr	r4, [pc, #256]	@ (80091a4 <R3_2_RLDetectionModeDisable+0x118>)
 80090a4:	4022      	ands	r2, r4
 80090a6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80090aa:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80090ac:	6a1a      	ldr	r2, [r3, #32]
 80090ae:	f042 0201 	orr.w	r2, r2, #1
 80090b2:	621a      	str	r2, [r3, #32]
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 80090b4:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 80090b8:	2a01      	cmp	r2, #1
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 80090ba:	ea4f 0151 	mov.w	r1, r1, lsr #1
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 80090be:	d028      	beq.n	8009112 <R3_2_RLDetectionModeDisable+0x86>
    else if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 80090c0:	2a02      	cmp	r2, #2
 80090c2:	d04a      	beq.n	800915a <R3_2_RLDetectionModeDisable+0xce>
  WRITE_REG(TIMx->CCR1, CompareValue);
 80090c4:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80090c6:	699a      	ldr	r2, [r3, #24]
 80090c8:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80090cc:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 80090d0:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 80090d4:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80090d6:	6a1a      	ldr	r2, [r3, #32]
 80090d8:	f042 0210 	orr.w	r2, r2, #16
 80090dc:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80090de:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80090e0:	69da      	ldr	r2, [r3, #28]
 80090e2:	4022      	ands	r2, r4
 80090e4:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80090e8:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 80090ea:	6a1a      	ldr	r2, [r3, #32]
 80090ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80090f0:	621a      	str	r2, [r3, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 80090f2:	4a2d      	ldr	r2, [pc, #180]	@ (80091a8 <R3_2_RLDetectionModeDisable+0x11c>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 80090f4:	63d9      	str	r1, [r3, #60]	@ 0x3c
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 80090f6:	492d      	ldr	r1, [pc, #180]	@ (80091ac <R3_2_RLDetectionModeDisable+0x120>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 80090f8:	6002      	str	r2, [r0, #0]
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 80090fa:	4a2d      	ldr	r2, [pc, #180]	@ (80091b0 <R3_2_RLDetectionModeDisable+0x124>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 80090fc:	4c2d      	ldr	r4, [pc, #180]	@ (80091b4 <R3_2_RLDetectionModeDisable+0x128>)
 80090fe:	6104      	str	r4, [r0, #16]
    pHandle->_Super.RLDetectionMode = false;
 8009100:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8009102:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8009106:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 800910a:	f880 307e 	strb.w	r3, [r0, #126]	@ 0x7e
}
 800910e:	4770      	bx	lr
 8009110:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8009112:	6a1a      	ldr	r2, [r3, #32]
 8009114:	f042 0204 	orr.w	r2, r2, #4
 8009118:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800911a:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800911c:	699a      	ldr	r2, [r3, #24]
 800911e:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8009122:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 8009126:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 800912a:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800912c:	6a1a      	ldr	r2, [r3, #32]
 800912e:	f042 0210 	orr.w	r2, r2, #16
 8009132:	621a      	str	r2, [r3, #32]
 8009134:	6a1a      	ldr	r2, [r3, #32]
 8009136:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800913a:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800913c:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800913e:	69da      	ldr	r2, [r3, #28]
 8009140:	4022      	ands	r2, r4
 8009142:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009146:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8009148:	6a1a      	ldr	r2, [r3, #32]
 800914a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800914e:	621a      	str	r2, [r3, #32]
 8009150:	6a1a      	ldr	r2, [r3, #32]
 8009152:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009156:	621a      	str	r2, [r3, #32]
}
 8009158:	e7cb      	b.n	80090f2 <R3_2_RLDetectionModeDisable+0x66>
  CLEAR_BIT(TIMx->CCER, Channels);
 800915a:	6a1a      	ldr	r2, [r3, #32]
 800915c:	f022 0204 	bic.w	r2, r2, #4
 8009160:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009162:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009164:	699a      	ldr	r2, [r3, #24]
 8009166:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800916a:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800916e:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 8009172:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009174:	6a1a      	ldr	r2, [r3, #32]
 8009176:	f042 0210 	orr.w	r2, r2, #16
 800917a:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800917c:	6a1a      	ldr	r2, [r3, #32]
 800917e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009182:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009184:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009186:	69da      	ldr	r2, [r3, #28]
 8009188:	4022      	ands	r2, r4
 800918a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800918e:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8009190:	6a1a      	ldr	r2, [r3, #32]
 8009192:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009196:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009198:	6a1a      	ldr	r2, [r3, #32]
 800919a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800919e:	621a      	str	r2, [r3, #32]
}
 80091a0:	e7a7      	b.n	80090f2 <R3_2_RLDetectionModeDisable+0x66>
 80091a2:	bf00      	nop
 80091a4:	fffeff8c 	.word	0xfffeff8c
 80091a8:	08008511 	.word	0x08008511
 80091ac:	08008771 	.word	0x08008771
 80091b0:	08008805 	.word	0x08008805
 80091b4:	08008981 	.word	0x08008981

080091b8 <R3_2_RLDetectionModeSetDuty>:
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80091b8:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 80091bc:	f8b0 c094 	ldrh.w	ip, [r0, #148]	@ 0x94
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80091c0:	6812      	ldr	r2, [r2, #0]
{
 80091c2:	4603      	mov	r3, r0
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80091c4:	69d0      	ldr	r0, [r2, #28]
 80091c6:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 80091ca:	fb0c f101 	mul.w	r1, ip, r1
 80091ce:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
{
 80091d2:	b410      	push	{r4}
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 80091d4:	0c09      	lsrs	r1, r1, #16
    pHandle->ADCRegularLocked = true;
 80091d6:	2401      	movs	r4, #1
 80091d8:	f440 40e0 	orr.w	r0, r0, #28672	@ 0x7000
 80091dc:	f883 40a0 	strb.w	r4, [r3, #160]	@ 0xa0
    pHandle->_Super.CntPhA = (uint16_t)val;
 80091e0:	f8a3 1050 	strh.w	r1, [r3, #80]	@ 0x50
 80091e4:	61d0      	str	r0, [r2, #28]
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 80091e6:	f8b3 0074 	ldrh.w	r0, [r3, #116]	@ 0x74
    LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)pHandle->_Super.Toff);
 80091ea:	f8b3 4076 	ldrh.w	r4, [r3, #118]	@ 0x76
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 80091ee:	ebac 0000 	sub.w	r0, ip, r0
  WRITE_REG(TIMx->CCR4, CompareValue);
 80091f2:	6410      	str	r0, [r2, #64]	@ 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 80091f4:	63d4      	str	r4, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 80091f6:	6351      	str	r1, [r2, #52]	@ 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80091f8:	6851      	ldr	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 80091fa:	f8b3 0056 	ldrh.w	r0, [r3, #86]	@ 0x56
 80091fe:	f021 7100 	bic.w	r1, r1, #33554432	@ 0x2000000
 8009202:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
    pHdl->Sector = SECTOR_4;
 8009206:	f04f 0c03 	mov.w	ip, #3
 800920a:	f041 0170 	orr.w	r1, r1, #112	@ 0x70
 800920e:	6051      	str	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 8009210:	2801      	cmp	r0, #1
    pHdl->Sector = SECTOR_4;
 8009212:	f883 c07a 	strb.w	ip, [r3, #122]	@ 0x7a
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8009216:	6852      	ldr	r2, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 8009218:	d007      	beq.n	800922a <R3_2_RLDetectionModeSetDuty+0x72>
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800921a:	4b07      	ldr	r3, [pc, #28]	@ (8009238 <R3_2_RLDetectionModeSetDuty+0x80>)
}
 800921c:	f85d 4b04 	ldr.w	r4, [sp], #4
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8009220:	421a      	tst	r2, r3
 8009222:	bf14      	ite	ne
 8009224:	2001      	movne	r0, #1
 8009226:	2000      	moveq	r0, #0
}
 8009228:	4770      	bx	lr
      pHandle->_Super.SWerror = 0U;
 800922a:	2200      	movs	r2, #0
}
 800922c:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->_Super.SWerror = 0U;
 8009230:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	02000070 	.word	0x02000070

0800923c <R3_2_RLTurnOnLowSidesAndStart>:
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800923c:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8009240:	681b      	ldr	r3, [r3, #0]

    pHandle->ADCRegularLocked=true;
 8009242:	2101      	movs	r1, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009244:	f06f 0201 	mvn.w	r2, #1
{
 8009248:	b430      	push	{r4, r5}
    pHandle->ADCRegularLocked=true;
 800924a:	f880 10a0 	strb.w	r1, [r0, #160]	@ 0xa0
 800924e:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009250:	691a      	ldr	r2, [r3, #16]
 8009252:	07d1      	lsls	r1, r2, #31
 8009254:	d5fc      	bpl.n	8009250 <R3_2_RLTurnOnLowSidesAndStart+0x14>
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH2(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH3(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 8009256:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  WRITE_REG(TIMx->CCR1, CompareValue);
 800925a:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800925c:	f06f 0401 	mvn.w	r4, #1
 8009260:	3a05      	subs	r2, #5
 8009262:	611c      	str	r4, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009264:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009266:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009268:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800926a:	641a      	str	r2, [r3, #64]	@ 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800926c:	691a      	ldr	r2, [r3, #16]
 800926e:	07d2      	lsls	r2, r2, #31
 8009270:	d5fc      	bpl.n	800926c <R3_2_RLTurnOnLowSidesAndStart+0x30>
    {
      /* Nothing to do */
    }

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8009272:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009274:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009278:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800927a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800927c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009280:	645a      	str	r2, [r3, #68]	@ 0x44
    LL_TIM_EnableAllOutputs (TIMx);

    if (ES_GPIO == pHandle->_Super.LowSideOutputs )
 8009282:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 8009286:	2a02      	cmp	r2, #2
 8009288:	d10b      	bne.n	80092a2 <R3_2_RLTurnOnLowSidesAndStart+0x66>
    {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800928a:	e9d0 410f 	ldrd	r4, r1, [r0, #60]	@ 0x3c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800928e:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8009292:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009294:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8009296:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
 800929a:	618c      	str	r4, [r1, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800929c:	f8b0 104c 	ldrh.w	r1, [r0, #76]	@ 0x4c
 80092a0:	6191      	str	r1, [r2, #24]
    else
    {
      /* Nothing to do */
    }

    pHdl->Sector = SECTOR_4;
 80092a2:	2203      	movs	r2, #3
 80092a4:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
  SET_BIT(TIMx->CCER, Channels);
 80092a8:	6a1a      	ldr	r2, [r3, #32]
 80092aa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80092ae:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80092b0:	68da      	ldr	r2, [r3, #12]
 80092b2:	f042 0201 	orr.w	r2, r2, #1

    LL_TIM_EnableIT_UPDATE(TIMx);
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 80092b6:	bc30      	pop	{r4, r5}
 80092b8:	60da      	str	r2, [r3, #12]
 80092ba:	4770      	bx	lr

080092bc <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 80092bc:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 80092c0:	8a42      	ldrh	r2, [r0, #18]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 80092c2:	8943      	ldrh	r3, [r0, #10]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 80092c4:	4494      	add	ip, r2
 80092c6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
{
 80092ca:	b430      	push	{r4, r5}
 80092cc:	2500      	movs	r5, #0
 80092ce:	f36c 050f 	bfi	r5, ip, #0, #16
 80092d2:	f36c 451f 	bfi	r5, ip, #16, #16
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 80092d6:	b14b      	cbz	r3, 80092ec <RVBS_Clear+0x30>
    {
      pHandle->aBuffer[index] = aux;
 80092d8:	6944      	ldr	r4, [r0, #20]
 80092da:	2300      	movs	r3, #0
 80092dc:	b29a      	uxth	r2, r3
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 80092de:	3301      	adds	r3, #1
      pHandle->aBuffer[index] = aux;
 80092e0:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 80092e4:	8941      	ldrh	r1, [r0, #10]
 80092e6:	b29a      	uxth	r2, r3
 80092e8:	4291      	cmp	r1, r2
 80092ea:	d8f7      	bhi.n	80092dc <RVBS_Clear+0x20>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 80092ec:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 80092ee:	6045      	str	r5, [r0, #4]
    pHandle->index = 0U;
 80092f0:	7643      	strb	r3, [r0, #25]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 80092f2:	bc30      	pop	{r4, r5}
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop

080092f8 <RVBS_Init>:
{
 80092f8:	b508      	push	{r3, lr}
    RVBS_Clear(pHandle);
 80092fa:	f7ff ffdf 	bl	80092bc <RVBS_Clear>
}
 80092fe:	bd08      	pop	{r3, pc}

08009300 <RVBS_CheckFaultState>:
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8009300:	8982      	ldrh	r2, [r0, #12]
 8009302:	89c1      	ldrh	r1, [r0, #14]
	{
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8009304:	88c3      	ldrh	r3, [r0, #6]
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8009306:	428a      	cmp	r2, r1
 8009308:	d010      	beq.n	800932c <RVBS_CheckFaultState+0x2c>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800930a:	f8b0 c012 	ldrh.w	ip, [r0, #18]
 800930e:	459c      	cmp	ip, r3
 8009310:	d80a      	bhi.n	8009328 <RVBS_CheckFaultState+0x28>
{
 8009312:	b410      	push	{r4}
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 8009314:	7c04      	ldrb	r4, [r0, #16]
 8009316:	b994      	cbnz	r4, 800933e <RVBS_CheckFaultState+0x3e>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 8009318:	4299      	cmp	r1, r3
 800931a:	d914      	bls.n	8009346 <RVBS_CheckFaultState+0x46>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 800931c:	2301      	movs	r3, #1
 800931e:	7403      	strb	r3, [r0, #16]
        {
          pHandle->OverVoltageHysteresisUpDir = false;
          fault = MC_OVER_VOLT;
        }
        else{
          fault = MC_NO_ERROR;
 8009320:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 8009322:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009326:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 8009328:	2004      	movs	r0, #4
 800932a:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800932c:	429a      	cmp	r2, r3
 800932e:	d30c      	bcc.n	800934a <RVBS_CheckFaultState+0x4a>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8009330:	8a40      	ldrh	r0, [r0, #18]
 8009332:	4298      	cmp	r0, r3
 8009334:	bf94      	ite	ls
 8009336:	2000      	movls	r0, #0
 8009338:	2001      	movhi	r0, #1
 800933a:	0080      	lsls	r0, r0, #2
 800933c:	4770      	bx	lr
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800933e:	429a      	cmp	r2, r3
 8009340:	d2ee      	bcs.n	8009320 <RVBS_CheckFaultState+0x20>
          pHandle->OverVoltageHysteresisUpDir = false;
 8009342:	2300      	movs	r3, #0
 8009344:	7403      	strb	r3, [r0, #16]
          fault = MC_OVER_VOLT;
 8009346:	2002      	movs	r0, #2
 8009348:	e7eb      	b.n	8009322 <RVBS_CheckFaultState+0x22>
 800934a:	2002      	movs	r0, #2
}
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop

08009350 <RVBS_CalcAvVbus>:
{
 8009350:	b538      	push	{r3, r4, r5, lr}
    if (0xFFFFU == hAux)
 8009352:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009356:	4299      	cmp	r1, r3
{
 8009358:	4604      	mov	r4, r0
    if (0xFFFFU == hAux)
 800935a:	d021      	beq.n	80093a0 <RVBS_CalcAvVbus+0x50>
      pHandle->aBuffer[pHandle->index] = hAux;
 800935c:	6943      	ldr	r3, [r0, #20]
 800935e:	7e45      	ldrb	r5, [r0, #25]
 8009360:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8009364:	f8b0 e00a 	ldrh.w	lr, [r0, #10]
 8009368:	f01e 02ff 	ands.w	r2, lr, #255	@ 0xff
 800936c:	d00d      	beq.n	800938a <RVBS_CalcAvVbus+0x3a>
 800936e:	3a01      	subs	r2, #1
 8009370:	b2d2      	uxtb	r2, r2
 8009372:	eb03 0042 	add.w	r0, r3, r2, lsl #1
 8009376:	3b02      	subs	r3, #2
      wtemp = 0u;
 8009378:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 800937a:	f833 cf02 	ldrh.w	ip, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800937e:	4298      	cmp	r0, r3
        wtemp += pHandle->aBuffer[i];
 8009380:	4462      	add	r2, ip
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8009382:	d1fa      	bne.n	800937a <RVBS_CalcAvVbus+0x2a>
      wtemp /= pHandle->LowPassFilterBW;
 8009384:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8009388:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 800938a:	f10e 3eff 	add.w	lr, lr, #4294967295
 800938e:	4575      	cmp	r5, lr
        pHandle->index++;
 8009390:	bf34      	ite	cc
 8009392:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 8009394:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8009396:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 8009398:	80a1      	strh	r1, [r4, #4]
        pHandle->index++;
 800939a:	bf34      	ite	cc
 800939c:	7665      	strbcc	r5, [r4, #25]
        pHandle->index = 0U;
 800939e:	7663      	strbcs	r3, [r4, #25]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 80093a0:	4620      	mov	r0, r4
 80093a2:	f7ff ffad 	bl	8009300 <RVBS_CheckFaultState>
 80093a6:	8120      	strh	r0, [r4, #8]
}
 80093a8:	bd38      	pop	{r3, r4, r5, pc}
 80093aa:	bf00      	nop

080093ac <REMNG_Init>:
  }
  else
  {
#endif
    pHandle->Ext = 0;
    pHandle->TargetFinal = 0;
 80093ac:	2300      	movs	r3, #0
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 80093ae:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 80093b0:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 80093b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 80093b8:	6142      	str	r2, [r0, #20]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 80093ba:	4770      	bx	lr

080093bc <REMNG_Calc>:
  else
  {
#endif
    int32_t current_ref;

    current_ref = pHandle->Ext;
 80093bc:	e9d0 2102 	ldrd	r2, r1, [r0, #8]

    /* Update the variable and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 80093c0:	2901      	cmp	r1, #1
{
 80093c2:	b410      	push	{r4}
 80093c4:	4603      	mov	r3, r0
      pHandle->RampRemainingStep --;
    }
    else if (1U == pHandle->RampRemainingStep)
    {
      /* Set the backup value of TargetFinal */
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 80093c6:	6944      	ldr	r4, [r0, #20]
    if (pHandle->RampRemainingStep > 1U)
 80093c8:	d909      	bls.n	80093de <REMNG_Calc+0x22>
      current_ref += pHandle->IncDecAmount;
 80093ca:	6900      	ldr	r0, [r0, #16]
      pHandle->RampRemainingStep --;
 80093cc:	3901      	subs	r1, #1
      current_ref += pHandle->IncDecAmount;
 80093ce:	4402      	add	r2, r0
      pHandle->RampRemainingStep --;
 80093d0:	60d9      	str	r1, [r3, #12]
    {
      /* Do nothing */
    }

    pHandle->Ext = current_ref;
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 80093d2:	fb92 f0f4 	sdiv	r0, r2, r4
    pHandle->Ext = current_ref;
 80093d6:	609a      	str	r2, [r3, #8]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
  return (ret_val);
}
 80093d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093dc:	4770      	bx	lr
    else if (1U == pHandle->RampRemainingStep)
 80093de:	d005      	beq.n	80093ec <REMNG_Calc+0x30>
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 80093e0:	fb92 f0f4 	sdiv	r0, r2, r4
}
 80093e4:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->Ext = current_ref;
 80093e8:	609a      	str	r2, [r3, #8]
}
 80093ea:	4770      	bx	lr
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 80093ec:	6840      	ldr	r0, [r0, #4]
 80093ee:	fb04 f200 	mul.w	r2, r4, r0
      pHandle->RampRemainingStep = 0U;
 80093f2:	2100      	movs	r1, #0
}
 80093f4:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->RampRemainingStep = 0U;
 80093f8:	60d9      	str	r1, [r3, #12]
    pHandle->Ext = current_ref;
 80093fa:	609a      	str	r2, [r3, #8]
}
 80093fc:	4770      	bx	lr
 80093fe:	bf00      	nop

08009400 <REMNG_RampCompleted>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (0U == pHandle->RampRemainingStep)
 8009400:	68c0      	ldr	r0, [r0, #12]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
  return (retVal);

}
 8009402:	fab0 f080 	clz	r0, r0
 8009406:	0940      	lsrs	r0, r0, #5
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop

0800940c <getScalingFactor>:
  int32_t aux;
  uint8_t i;

  if (Target < 0)
  {
    aux = -Target;
 800940c:	2800      	cmp	r0, #0
 800940e:	bfb8      	it	lt
 8009410:	4240      	neglt	r0, r0
    TargetAbs = (uint32_t)Target;
  }
  for (i = 1U; i < 32U; i++)
  {
    uint32_t limit = (((uint32_t)1) << (31U - i));
    if (TargetAbs >= limit)
 8009412:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8009416:	d213      	bcs.n	8009440 <getScalingFactor+0x34>
 8009418:	2302      	movs	r3, #2
    uint32_t limit = (((uint32_t)1) << (31U - i));
 800941a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800941e:	e001      	b.n	8009424 <getScalingFactor+0x18>
  for (i = 1U; i < 32U; i++)
 8009420:	2b20      	cmp	r3, #32
 8009422:	d00a      	beq.n	800943a <getScalingFactor+0x2e>
    uint32_t limit = (((uint32_t)1) << (31U - i));
 8009424:	fa2c f203 	lsr.w	r2, ip, r3
    if (TargetAbs >= limit)
 8009428:	4290      	cmp	r0, r2
 800942a:	4619      	mov	r1, r3
 800942c:	f103 0301 	add.w	r3, r3, #1
 8009430:	d3f6      	bcc.n	8009420 <getScalingFactor+0x14>
    else
    {
      /* Nothing to do */
    }
  }
  return (((uint32_t)1) << (i - 1U));
 8009432:	3901      	subs	r1, #1
 8009434:	2001      	movs	r0, #1
 8009436:	4088      	lsls	r0, r1
 8009438:	4770      	bx	lr
 800943a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800943e:	4770      	bx	lr
    if (TargetAbs >= limit)
 8009440:	2001      	movs	r0, #1
}
 8009442:	4770      	bx	lr

08009444 <REMNG_ExecRamp>:
{
 8009444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009448:	4604      	mov	r4, r0
 800944a:	460e      	mov	r6, r1
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800944c:	6880      	ldr	r0, [r0, #8]
 800944e:	6963      	ldr	r3, [r4, #20]
    if (0U == Durationms)
 8009450:	4615      	mov	r5, r2
 8009452:	b962      	cbnz	r2, 800946e <REMNG_ExecRamp+0x2a>
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 8009454:	4608      	mov	r0, r1
 8009456:	f7ff ffd9 	bl	800940c <getScalingFactor>
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800945a:	fb00 f606 	mul.w	r6, r0, r6
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 800945e:	6160      	str	r0, [r4, #20]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8009460:	4628      	mov	r0, r5
      pHandle->IncDecAmount = 0;
 8009462:	e9c4 5003 	strd	r5, r0, [r4, #12]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8009466:	60a6      	str	r6, [r4, #8]
}
 8009468:	2001      	movs	r0, #1
 800946a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800946e:	fb90 f8f3 	sdiv	r8, r0, r3
      uint32_t wScalingFactor = getScalingFactor(TargetFinal - current_ref);
 8009472:	eba1 0708 	sub.w	r7, r1, r8
 8009476:	4638      	mov	r0, r7
 8009478:	f7ff ffc8 	bl	800940c <getScalingFactor>
 800947c:	4682      	mov	sl, r0
      uint32_t wScalingFactor2 = getScalingFactor(current_ref);
 800947e:	4640      	mov	r0, r8
 8009480:	f7ff ffc4 	bl	800940c <getScalingFactor>
 8009484:	4681      	mov	r9, r0
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 8009486:	4630      	mov	r0, r6
 8009488:	f7ff ffc0 	bl	800940c <getScalingFactor>
      if (wScalingFactor <  wScalingFactor2)
 800948c:	45ca      	cmp	sl, r9
 800948e:	d318      	bcc.n	80094c2 <REMNG_ExecRamp+0x7e>
        if (wScalingFactor2 < wScalingFactor3)
 8009490:	4548      	cmp	r0, r9
 8009492:	bf28      	it	cs
 8009494:	4648      	movcs	r0, r9
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 8009496:	fb08 f300 	mul.w	r3, r8, r0
 800949a:	60a3      	str	r3, [r4, #8]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 800949c:	6823      	ldr	r3, [r4, #0]
      aux /= 1000U;
 800949e:	4a0b      	ldr	r2, [pc, #44]	@ (80094cc <REMNG_ExecRamp+0x88>)
      pHandle->ScalingFactor = wScalingFactorMin;
 80094a0:	6160      	str	r0, [r4, #20]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 80094a2:	fb05 f303 	mul.w	r3, r5, r3
      aux /= 1000U;
 80094a6:	fba2 2303 	umull	r2, r3, r2, r3
 80094aa:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 80094ac:	1c5d      	adds	r5, r3, #1
      aux1 = (TargetFinal - current_ref) * ((int32_t)pHandle->ScalingFactor);
 80094ae:	fb07 f000 	mul.w	r0, r7, r0
      pHandle->TargetFinal = TargetFinal;
 80094b2:	6066      	str	r6, [r4, #4]
      aux1 /= ((int32_t)pHandle->RampRemainingStep);
 80094b4:	fb90 f0f5 	sdiv	r0, r0, r5
      pHandle->IncDecAmount = 0;
 80094b8:	e9c4 5003 	strd	r5, r0, [r4, #12]
}
 80094bc:	2001      	movs	r0, #1
 80094be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (wScalingFactor < wScalingFactor3)
 80094c2:	4550      	cmp	r0, sl
 80094c4:	bf28      	it	cs
 80094c6:	4650      	movcs	r0, sl
 80094c8:	e7e5      	b.n	8009496 <REMNG_ExecRamp+0x52>
 80094ca:	bf00      	nop
 80094cc:	10624dd3 	.word	0x10624dd3

080094d0 <RUC_Init>:
__weak void RUC_Init(RevUpCtrl_Handle_t *pHandle,
                     SpeednTorqCtrl_Handle_t *pSTC,
                     VirtualSpeedSensor_Handle_t *pVSS,
                     STO_Handle_t *pSNSL,
                     PWMC_Handle_t *pPWM)
{
 80094d0:	b500      	push	{lr}
  {
#endif
    RevUpCtrl_PhaseParams_t *pRUCPhaseParams = &pHandle->ParamsData[0];
    uint8_t bPhase = 0U;

    pHandle->pSTC = pSTC;
 80094d2:	6681      	str	r1, [r0, #104]	@ 0x68
    pHandle->EnteredZone1 = false;

    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
    {
      /* Dump HF data for now HF data are forced to 16 bits */
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 80094d4:	6941      	ldr	r1, [r0, #20]
    pHandle->pSNSL = pSNSL;
 80094d6:	e9c0 231b 	strd	r2, r3, [r0, #108]	@ 0x6c
    pHandle->OTFSCLowside = false;
 80094da:	f04f 0c00 	mov.w	ip, #0
    pHandle->pPWM = pPWM;
 80094de:	9b01      	ldr	r3, [sp, #4]
    pHandle->OTFSCLowside = false;
 80094e0:	f8a0 c054 	strh.w	ip, [r0, #84]	@ 0x54
    pHandle->pPWM = pPWM;
 80094e4:	6743      	str	r3, [r0, #116]	@ 0x74
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 80094e6:	b309      	cbz	r1, 800952c <RUC_Init+0x5c>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 80094e8:	688b      	ldr	r3, [r1, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 80094ea:	b323      	cbz	r3, 8009536 <RUC_Init+0x66>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 80094ec:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 80094ee:	b32b      	cbz	r3, 800953c <RUC_Init+0x6c>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 80094f0:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 80094f2:	b333      	cbz	r3, 8009542 <RUC_Init+0x72>
 80094f4:	689b      	ldr	r3, [r3, #8]
      bPhase++;
 80094f6:	f04f 0c05 	mov.w	ip, #5
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 80094fa:	b1cb      	cbz	r3, 8009530 <RUC_Init+0x60>
 80094fc:	2204      	movs	r2, #4
 80094fe:	f04f 0c05 	mov.w	ip, #5
    {
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;

      pHandle->bPhaseNbr = bPhase;

      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8009502:	8803      	ldrh	r3, [r0, #0]
 8009504:	4910      	ldr	r1, [pc, #64]	@ (8009548 <RUC_Init+0x78>)
 8009506:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800950a:	fb0e f303 	mul.w	r3, lr, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800950e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8009512:	fba1 1303 	umull	r1, r3, r1, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8009516:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800951a:	2100      	movs	r1, #0
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800951c:	099b      	lsrs	r3, r3, #6
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800951e:	6151      	str	r1, [r2, #20]
      pHandle->bPhaseNbr = bPhase;
 8009520:	f880 c048 	strb.w	ip, [r0, #72]	@ 0x48
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8009524:	f880 3056 	strb.w	r3, [r0, #86]	@ 0x56
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 8009528:	f85d fb04 	ldr.w	pc, [sp], #4
      bPhase++;
 800952c:	f04f 0c01 	mov.w	ip, #1
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8009530:	f10c 32ff 	add.w	r2, ip, #4294967295
 8009534:	e7e5      	b.n	8009502 <RUC_Init+0x32>
      bPhase++;
 8009536:	f04f 0c02 	mov.w	ip, #2
 800953a:	e7f9      	b.n	8009530 <RUC_Init+0x60>
 800953c:	f04f 0c03 	mov.w	ip, #3
 8009540:	e7f6      	b.n	8009530 <RUC_Init+0x60>
 8009542:	f04f 0c04 	mov.w	ip, #4
 8009546:	e7f3      	b.n	8009530 <RUC_Init+0x60>
 8009548:	10624dd3 	.word	0x10624dd3

0800954c <RUC_Clear>:
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  * @param  hMotorDirection: Rotor rotation direction.
  *         This parameter must be -1 or +1.
  */
__weak void RUC_Clear(RevUpCtrl_Handle_t *pHandle, int16_t hMotorDirection)
{
 800954c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
 8009550:	f8d0 806c 	ldr.w	r8, [r0, #108]	@ 0x6c
    SpeednTorqCtrl_Handle_t *pSTC = pHandle->pSTC;
 8009554:	6e87      	ldr	r7, [r0, #104]	@ 0x68
    RevUpCtrl_PhaseParams_t *pPhaseParams = pHandle->ParamsData;

    pHandle->hDirection = hMotorDirection;
 8009556:	80c1      	strh	r1, [r0, #6]
    pHandle->EnteredZone1 = false;

    /* Initializes the rev up stages counter */
    pHandle->bStageCnt = 0U;
 8009558:	2500      	movs	r5, #0
{
 800955a:	4604      	mov	r4, r0
    pHandle->bStageCnt = 0U;
 800955c:	f880 5058 	strb.w	r5, [r0, #88]	@ 0x58
    pHandle->bOTFRelCounter = 0U;
 8009560:	f880 5053 	strb.w	r5, [r0, #83]	@ 0x53
    pHandle->OTFSCLowside = false;
 8009564:	f8a0 5054 	strh.w	r5, [r0, #84]	@ 0x54

    /* Calls the clear method of VSS */
    VSS_Clear(pVSS);
 8009568:	4640      	mov	r0, r8

    /* Sets the STC in torque mode */
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);

    /* Sets the mechanical starting angle of VSS */
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 800956a:	b28e      	uxth	r6, r1
    VSS_Clear(pVSS);
 800956c:	f000 fc46 	bl	8009dfc <VSS_Clear>
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);
 8009570:	2104      	movs	r1, #4
 8009572:	4638      	mov	r0, r7
 8009574:	f000 f8de 	bl	8009734 <STC_SetControlMode>
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 8009578:	8863      	ldrh	r3, [r4, #2]
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800957a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800957e:	fb13 f306 	smulbb	r3, r3, r6
 8009582:	b21b      	sxth	r3, r3
    pHandle->hElAngleAccu = hMecAngle;
 8009584:	f8a8 3030 	strh.w	r3, [r8, #48]	@ 0x30
    pHandle->_Super.hElAngle = hMecAngle;
 8009588:	f8a8 3004 	strh.w	r3, [r8, #4]

    /* Sets to zero the starting torque of STC */
    (void)STC_ExecRamp(pSTC, 0, 0U);
 800958c:	4629      	mov	r1, r5
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800958e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009592:	4638      	mov	r0, r7
 8009594:	f8a8 3006 	strh.w	r3, [r8, #6]
 8009598:	462a      	mov	r2, r5
 800959a:	f000 f8cf 	bl	800973c <STC_ExecRamp>

    /* Gives the first command to STC and VSS */
    (void)STC_ExecRamp(pSTC, pPhaseParams->hFinalTorque * hMotorDirection, (uint32_t)(pPhaseParams->hDurationms));
 800959e:	8a21      	ldrh	r1, [r4, #16]
 80095a0:	89a2      	ldrh	r2, [r4, #12]
 80095a2:	fb11 f106 	smulbb	r1, r1, r6
 80095a6:	b209      	sxth	r1, r1
 80095a8:	4638      	mov	r0, r7
 80095aa:	f000 f8c7 	bl	800973c <STC_ExecRamp>

    VSS_SetMecAcceleration(pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection, pPhaseParams->hDurationms);
 80095ae:	89e1      	ldrh	r1, [r4, #14]
 80095b0:	89a2      	ldrh	r2, [r4, #12]
 80095b2:	fb11 f106 	smulbb	r1, r1, r6
 80095b6:	b209      	sxth	r1, r1
 80095b8:	4640      	mov	r0, r8
 80095ba:	f000 fcd5 	bl	8009f68 <VSS_SetMecAcceleration>

    /* Compute hPhaseRemainingTicks */
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 80095be:	89a3      	ldrh	r3, [r4, #12]
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 80095c0:	8821      	ldrh	r1, [r4, #0]
                                              / 1000U );
 80095c2:	4a07      	ldr	r2, [pc, #28]	@ (80095e0 <RUC_Clear+0x94>)

    /* Set the next phases parameter pointer */
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5

    /* Timeout counter for PLL reset during OTF */
    pHandle->bResetPLLCnt = 0U;
 80095c4:	f884 5057 	strb.w	r5, [r4, #87]	@ 0x57
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 80095c8:	fb01 f303 	mul.w	r3, r1, r3
                                              / 1000U );
 80095cc:	fba2 2303 	umull	r2, r3, r2, r3
 80095d0:	099b      	lsrs	r3, r3, #6
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 80095d2:	6962      	ldr	r2, [r4, #20]
 80095d4:	60a2      	str	r2, [r4, #8]
    pHandle->hPhaseRemainingTicks++;
 80095d6:	3301      	adds	r3, #1
 80095d8:	80a3      	strh	r3, [r4, #4]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 80095da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095de:	bf00      	nop
 80095e0:	10624dd3 	.word	0x10624dd3

080095e4 <RUC_Exec>:
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hPhaseRemainingTicks > 0U)
 80095e4:	8883      	ldrh	r3, [r0, #4]
{
 80095e6:	b510      	push	{r4, lr}
 80095e8:	4604      	mov	r4, r0
    if (pHandle->hPhaseRemainingTicks > 0U)
 80095ea:	bb43      	cbnz	r3, 800963e <RUC_Exec+0x5a>
      /* Nothing to do */
    }

    if (0U == pHandle->hPhaseRemainingTicks)
    {
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 80095ec:	68a0      	ldr	r0, [r4, #8]
 80095ee:	b328      	cbz	r0, 800963c <RUC_Exec+0x58>
      {
        /* If it becomes zero the current phase has been completed */
        /* Gives the next command to STC and VSS */
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 80095f0:	8881      	ldrh	r1, [r0, #4]
 80095f2:	88e3      	ldrh	r3, [r4, #6]
 80095f4:	8802      	ldrh	r2, [r0, #0]
 80095f6:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80095f8:	fb11 f103 	smulbb	r1, r1, r3
 80095fc:	b209      	sxth	r1, r1
 80095fe:	f000 f89d 	bl	800973c <STC_ExecRamp>
                           (uint32_t)(pHandle->pCurrentPhaseParams->hDurationms));

        VSS_SetMecAcceleration(pHandle->pVSS,
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8009602:	68a3      	ldr	r3, [r4, #8]
 8009604:	88e0      	ldrh	r0, [r4, #6]
 8009606:	8859      	ldrh	r1, [r3, #2]
        VSS_SetMecAcceleration(pHandle->pVSS,
 8009608:	881a      	ldrh	r2, [r3, #0]
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 800960a:	fb11 f100 	smulbb	r1, r1, r0
        VSS_SetMecAcceleration(pHandle->pVSS,
 800960e:	b209      	sxth	r1, r1
 8009610:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8009612:	f000 fca9 	bl	8009f68 <VSS_SetMecAcceleration>
                               pHandle->pCurrentPhaseParams->hDurationms);

        /* Compute hPhaseRemainingTicks */
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 8009616:	68a1      	ldr	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8009618:	8820      	ldrh	r0, [r4, #0]
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 800961a:	880b      	ldrh	r3, [r1, #0]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800961c:	4a0b      	ldr	r2, [pc, #44]	@ (800964c <RUC_Exec+0x68>)
        pHandle->hPhaseRemainingTicks++;

        /* Set the next phases parameter pointer */
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 800961e:	6889      	ldr	r1, [r1, #8]
 8009620:	60a1      	str	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8009622:	fb00 f303 	mul.w	r3, r0, r3
 8009626:	fba2 2303 	umull	r2, r3, r2, r3

        /* Increases the rev up stages counter */
        pHandle->bStageCnt++;
 800962a:	f894 2058 	ldrb.w	r2, [r4, #88]	@ 0x58
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800962e:	099b      	lsrs	r3, r3, #6
        pHandle->hPhaseRemainingTicks++;
 8009630:	3301      	adds	r3, #1
        pHandle->bStageCnt++;
 8009632:	3201      	adds	r2, #1
        pHandle->hPhaseRemainingTicks++;
 8009634:	80a3      	strh	r3, [r4, #4]
        pHandle->bStageCnt++;
 8009636:	f884 2058 	strb.w	r2, [r4, #88]	@ 0x58
  bool retVal = true;
 800963a:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retVal);
}
 800963c:	bd10      	pop	{r4, pc}
      pHandle->hPhaseRemainingTicks--;
 800963e:	3b01      	subs	r3, #1
 8009640:	b29b      	uxth	r3, r3
 8009642:	8083      	strh	r3, [r0, #4]
    if (0U == pHandle->hPhaseRemainingTicks)
 8009644:	2b00      	cmp	r3, #0
 8009646:	d0d1      	beq.n	80095ec <RUC_Exec+0x8>
  bool retVal = true;
 8009648:	2001      	movs	r0, #1
}
 800964a:	bd10      	pop	{r4, pc}
 800964c:	10624dd3 	.word	0x10624dd3

08009650 <RUC_FirstAccelerationStageReached>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->bStageCnt >= pHandle->bFirstAccelerationStage)
 8009650:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 8009654:	f890 0049 	ldrb.w	r0, [r0, #73]	@ 0x49
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retVal);
}
 8009658:	4282      	cmp	r2, r0
 800965a:	bf34      	ite	cc
 800965c:	2000      	movcc	r0, #0
 800965e:	2001      	movcs	r0, #1
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop

08009664 <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 8009664:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop

0800966c <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 800966c:	f9b1 c000 	ldrsh.w	ip, [r1]
{
 8009670:	4603      	mov	r3, r0
 8009672:	b510      	push	{r4, lr}
    {
      hAux = -(*pMecSpeedUnit);
 8009674:	fa1f f18c 	uxth.w	r1, ip
    if (*pMecSpeedUnit < 0)
 8009678:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(*pMecSpeedUnit);
 800967c:	bfb8      	it	lt
 800967e:	4249      	neglt	r1, r1
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8009680:	f8b3 e016 	ldrh.w	lr, [r3, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8009684:	78c0      	ldrb	r0, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8009686:	781a      	ldrb	r2, [r3, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8009688:	8a9c      	ldrh	r4, [r3, #20]
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 800968a:	f9b3 c012 	ldrsh.w	ip, [r3, #18]
      hAux = -(*pMecSpeedUnit);
 800968e:	bfb8      	it	lt
 8009690:	b289      	uxthlt	r1, r1
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8009692:	458e      	cmp	lr, r1
 8009694:	d816      	bhi.n	80096c4 <SPD_IsMecSpeedReliable+0x58>
    {
      hAux = -(pHandle->hMecAccelUnitP);
 8009696:	fa1f fe8c 	uxth.w	lr, ip
    if (pHandle->hMecAccelUnitP < 0)
 800969a:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(pHandle->hMecAccelUnitP);
 800969e:	bfb8      	it	lt
 80096a0:	f1ce 0e00 	rsblt	lr, lr, #0
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 80096a4:	f8b3 c018 	ldrh.w	ip, [r3, #24]
      hAux = -(pHandle->hMecAccelUnitP);
 80096a8:	bfb8      	it	lt
 80096aa:	fa1f fe8e 	uxthlt.w	lr, lr
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 80096ae:	45f4      	cmp	ip, lr
 80096b0:	d308      	bcc.n	80096c4 <SPD_IsMecSpeedReliable+0x58>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 80096b2:	428c      	cmp	r4, r1
 80096b4:	d306      	bcc.n	80096c4 <SPD_IsMecSpeedReliable+0x58>
        /* Nothing to do */
      }
    }
    else
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 80096b6:	4290      	cmp	r0, r2
 80096b8:	d809      	bhi.n	80096ce <SPD_IsMecSpeedReliable+0x62>
      {
        /* Nothing to do */
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 80096ba:	1a10      	subs	r0, r2, r0
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 80096bc:	701a      	strb	r2, [r3, #0]
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 80096be:	bf18      	it	ne
 80096c0:	2001      	movne	r0, #1
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 80096c2:	bd10      	pop	{r4, pc}
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 80096c4:	4290      	cmp	r0, r2
 80096c6:	d9f8      	bls.n	80096ba <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber++;
 80096c8:	3201      	adds	r2, #1
 80096ca:	b2d2      	uxtb	r2, r2
 80096cc:	e7f5      	b.n	80096ba <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber = 0u;
 80096ce:	2200      	movs	r2, #0
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 80096d0:	701a      	strb	r2, [r3, #0]
  bool SpeedSensorReliability = true;
 80096d2:	2001      	movs	r0, #1
}
 80096d4:	bd10      	pop	{r4, pc}
 80096d6:	bf00      	nop

080096d8 <SPD_GetS16Speed>:
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
    wAux *= INT16_MAX;
 80096d8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 80096dc:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
    wAux *= INT16_MAX;
 80096e0:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 80096e4:	fb93 f0f2 	sdiv	r0, r3, r2
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (tempValue);
}
 80096e8:	b200      	sxth	r0, r0
 80096ea:	4770      	bx	lr

080096ec <STC_Init>:
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 80096ec:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	@ 0x2c
    pHandle->PISpeed = pPI;
 80096f0:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 80096f2:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	@ 0x2e
    pHandle->SPD = SPD_Handle;
 80096f6:	6142      	str	r2, [r0, #20]
{
 80096f8:	b410      	push	{r4}
    pHandle->Mode = pHandle->ModeDefault;
 80096fa:	f890 402a 	ldrb.w	r4, [r0, #42]	@ 0x2a
 80096fe:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 8009700:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8009702:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8009706:	0409      	lsls	r1, r1, #16
 8009708:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->TargetFinal = 0;
 800970c:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800970e:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->RampRemainingStep = 0U;
 8009712:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8009714:	6183      	str	r3, [r0, #24]
}
 8009716:	4770      	bx	lr

08009718 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 8009718:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800971a:	4770      	bx	lr

0800971c <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 800971c:	7803      	ldrb	r3, [r0, #0]
 800971e:	2b03      	cmp	r3, #3
 8009720:	d000      	beq.n	8009724 <STC_Clear+0x8>
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8009722:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 8009724:	6900      	ldr	r0, [r0, #16]
 8009726:	2100      	movs	r1, #0
 8009728:	f7fe bdea 	b.w	8008300 <PID_SetIntegralTerm>

0800972c <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 800972c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8009730:	4770      	bx	lr
 8009732:	bf00      	nop

08009734 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8009734:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 8009736:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8009738:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800973a:	4770      	bx	lr

0800973c <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 800973c:	b410      	push	{r4}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800973e:	7803      	ldrb	r3, [r0, #0]
 8009740:	2b04      	cmp	r3, #4
 8009742:	d019      	beq.n	8009778 <STC_ExecRamp+0x3c>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8009744:	f8b0 c01e 	ldrh.w	ip, [r0, #30]
 8009748:	458c      	cmp	ip, r1
 800974a:	da03      	bge.n	8009754 <STC_ExecRamp+0x18>
 800974c:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 800974e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009752:	4770      	bx	lr
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 8009754:	f9b0 4024 	ldrsh.w	r4, [r0, #36]	@ 0x24
 8009758:	428c      	cmp	r4, r1
 800975a:	dcf7      	bgt.n	800974c <STC_ExecRamp+0x10>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 800975c:	8c04      	ldrh	r4, [r0, #32]
 800975e:	428c      	cmp	r4, r1
 8009760:	dd03      	ble.n	800976a <STC_ExecRamp+0x2e>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 8009762:	f9b0 4022 	ldrsh.w	r4, [r0, #34]	@ 0x22
 8009766:	428c      	cmp	r4, r1
 8009768:	dbf0      	blt.n	800974c <STC_ExecRamp+0x10>
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 800976a:	6844      	ldr	r4, [r0, #4]
      if (0U == hDurationms)
 800976c:	b9b2      	cbnz	r2, 800979c <STC_ExecRamp+0x60>
        if (MCM_SPEED_MODE == pHandle->Mode)
 800976e:	2b03      	cmp	r3, #3
 8009770:	d10a      	bne.n	8009788 <STC_ExecRamp+0x4c>
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8009772:	0409      	lsls	r1, r1, #16
 8009774:	6041      	str	r1, [r0, #4]
 8009776:	e009      	b.n	800978c <STC_ExecRamp+0x50>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8009778:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 800977a:	428b      	cmp	r3, r1
 800977c:	dbe6      	blt.n	800974c <STC_ExecRamp+0x10>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 800977e:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	@ 0x28
 8009782:	428b      	cmp	r3, r1
 8009784:	dce2      	bgt.n	800974c <STC_ExecRamp+0x10>
      if (0U == hDurationms)
 8009786:	b9da      	cbnz	r2, 80097c0 <STC_ExecRamp+0x84>
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 8009788:	0409      	lsls	r1, r1, #16
 800978a:	6081      	str	r1, [r0, #8]
        pHandle->IncDecAmount = 0;
 800978c:	2300      	movs	r3, #0
 800978e:	461a      	mov	r2, r3
        pHandle->RampRemainingStep = 0U;
 8009790:	60c3      	str	r3, [r0, #12]
        pHandle->IncDecAmount = 0;
 8009792:	6182      	str	r2, [r0, #24]
}
 8009794:	f85d 4b04 	ldr.w	r4, [sp], #4
        pHandle->IncDecAmount = 0;
 8009798:	2001      	movs	r0, #1
}
 800979a:	4770      	bx	lr
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 800979c:	ea4f 4c24 	mov.w	ip, r4, asr #16
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 80097a0:	8b83      	ldrh	r3, [r0, #28]
        wAux /= 1000U;
 80097a2:	4c09      	ldr	r4, [pc, #36]	@ (80097c8 <STC_ExecRamp+0x8c>)
        pHandle->TargetFinal = hTargetFinal;
 80097a4:	8041      	strh	r1, [r0, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 80097a6:	fb02 f303 	mul.w	r3, r2, r3
        wAux /= 1000U;
 80097aa:	fba4 4303 	umull	r4, r3, r4, r3
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 80097ae:	eba1 0c0c 	sub.w	ip, r1, ip
        wAux /= 1000U;
 80097b2:	099b      	lsrs	r3, r3, #6
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 80097b4:	ea4f 420c 	mov.w	r2, ip, lsl #16
        pHandle->RampRemainingStep++;
 80097b8:	3301      	adds	r3, #1
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 80097ba:	fb92 f2f3 	sdiv	r2, r2, r3
        pHandle->IncDecAmount = wAux1;
 80097be:	e7e7      	b.n	8009790 <STC_ExecRamp+0x54>
  return ((int16_t)(pHandle->TorqueRef >> 16));
 80097c0:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80097c4:	e7ec      	b.n	80097a0 <STC_ExecRamp+0x64>
 80097c6:	bf00      	nop
 80097c8:	10624dd3 	.word	0x10624dd3

080097cc <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 80097cc:	b538      	push	{r3, r4, r5, lr}
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 80097ce:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 80097d0:	68c3      	ldr	r3, [r0, #12]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80097d2:	2a04      	cmp	r2, #4
{
 80097d4:	4604      	mov	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80097d6:	d012      	beq.n	80097fe <STC_CalcTorqueReference+0x32>
    if (pHandle->RampRemainingStep > 1U)
 80097d8:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->SpeedRefUnitExt;
 80097da:	6845      	ldr	r5, [r0, #4]
    if (pHandle->RampRemainingStep > 1U)
 80097dc:	d908      	bls.n	80097f0 <STC_CalcTorqueReference+0x24>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 80097de:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 80097e0:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 80097e2:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 80097e4:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 80097e6:	2a03      	cmp	r2, #3
 80097e8:	d011      	beq.n	800980e <STC_CalcTorqueReference+0x42>
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 80097ea:	1428      	asrs	r0, r5, #16
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 80097ec:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 80097ee:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 80097f0:	d1f9      	bne.n	80097e6 <STC_CalcTorqueReference+0x1a>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80097f2:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 80097f6:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80097f8:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 80097fa:	60c3      	str	r3, [r0, #12]
 80097fc:	e7f3      	b.n	80097e6 <STC_CalcTorqueReference+0x1a>
    if (pHandle->RampRemainingStep > 1U)
 80097fe:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->TorqueRef;
 8009800:	6885      	ldr	r5, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 8009802:	d911      	bls.n	8009828 <STC_CalcTorqueReference+0x5c>
      wCurrentReference += pHandle->IncDecAmount;
 8009804:	6982      	ldr	r2, [r0, #24]
      pHandle->RampRemainingStep--;
 8009806:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8009808:	4415      	add	r5, r2
      pHandle->RampRemainingStep--;
 800980a:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 800980c:	e7ed      	b.n	80097ea <STC_CalcTorqueReference+0x1e>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 800980e:	6960      	ldr	r0, [r4, #20]
 8009810:	f7ff ff28 	bl	8009664 <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 8009814:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8009818:	b209      	sxth	r1, r1
 800981a:	6920      	ldr	r0, [r4, #16]
 800981c:	f7fe fda4 	bl	8008368 <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 8009820:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8009822:	0405      	lsls	r5, r0, #16
 8009824:	60a5      	str	r5, [r4, #8]
}
 8009826:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 8009828:	d1df      	bne.n	80097ea <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800982a:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 800982e:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8009830:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 8009832:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 8009834:	e7d9      	b.n	80097ea <STC_CalcTorqueReference+0x1e>
 8009836:	bf00      	nop

08009838 <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 8009838:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 800983c:	4770      	bx	lr
 800983e:	bf00      	nop

08009840 <STC_GetDefaultIqdref>:
    IqdRefDefault.d = 0;
  }
  else
  {
#endif
    IqdRefDefault.q = pHandle->TorqueRefDefault;
 8009840:	f8d0 302e 	ldr.w	r3, [r0, #46]	@ 0x2e
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 8009844:	2200      	movs	r2, #0
 8009846:	b299      	uxth	r1, r3
 8009848:	f361 020f 	bfi	r2, r1, #0, #16
 800984c:	0c1b      	lsrs	r3, r3, #16
 800984e:	f363 421f 	bfi	r2, r3, #16, #16
{
 8009852:	b082      	sub	sp, #8
}
 8009854:	4610      	mov	r0, r2
 8009856:	b002      	add	sp, #8
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop

0800985c <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 800985c:	b510      	push	{r4, lr}
 800985e:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 8009860:	6940      	ldr	r0, [r0, #20]
 8009862:	f7ff feff 	bl	8009664 <SPD_GetAvrgMecSpeedUnit>
 8009866:	0400      	lsls	r0, r0, #16
 8009868:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800986a:	bd10      	pop	{r4, pc}

0800986c <STO_PLL_CalcElAngle>:
  * @param  pInput: Pointer to the observer inputs structure.
  * @retval int16_t Rotor electrical angle (s16Degrees).
  */
//cstat !MISRAC2012-Rule-8.13
__weak int16_t STO_PLL_CalcElAngle(STO_PLL_Handle_t *pHandle, Observer_Inputs_t *pInputs)
{
 800986c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16_t retValue;

  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 8009870:	4604      	mov	r4, r0
{
 8009872:	b089      	sub	sp, #36	@ 0x24
  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 8009874:	2800      	cmp	r0, #0
 8009876:	f000 80cf 	beq.w	8009a18 <STO_PLL_CalcElAngle+0x1ac>
 800987a:	2900      	cmp	r1, #0
 800987c:	f000 80cf 	beq.w	8009a1e <STO_PLL_CalcElAngle+0x1b2>
    int16_t hIbeta_err;
    int16_t hRotor_Speed;
    int16_t hValfa;
    int16_t hVbeta;

    if (pHandle->wBemf_alfa_est > (((int32_t)pHandle->hF2) * INT16_MAX))
 8009880:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	@ 0x2e
 8009884:	6e87      	ldr	r7, [r0, #104]	@ 0x68
 8009886:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800988a:	429f      	cmp	r7, r3
 800988c:	f340 80d1 	ble.w	8009a32 <STO_PLL_CalcElAngle+0x1c6>
    {
      pHandle->wBemf_alfa_est = INT16_MAX * ((int32_t)pHandle->hF2);
 8009890:	6683      	str	r3, [r0, #104]	@ 0x68
 8009892:	461f      	mov	r7, r3
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8009894:	f8b4 511e 	ldrh.w	r5, [r4, #286]	@ 0x11e
#else
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est / pHandle->hF2);
#endif

    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 8009898:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 800989a:	fa47 f205 	asr.w	r2, r7, r5
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 800989e:	42b3      	cmp	r3, r6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 80098a0:	9201      	str	r2, [sp, #4]
 80098a2:	fa0f fe82 	sxth.w	lr, r2
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 80098a6:	f2c0 80c1 	blt.w	8009a2c <STO_PLL_CalcElAngle+0x1c0>
    {
      pHandle->wBemf_beta_est = INT16_MAX * ((int32_t)pHandle->hF2);
    }
    else if (pHandle->wBemf_beta_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 80098aa:	425b      	negs	r3, r3
 80098ac:	429e      	cmp	r6, r3
 80098ae:	f340 80bd 	ble.w	8009a2c <STO_PLL_CalcElAngle+0x1c0>
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
#else
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est / pHandle->hF2);
#endif

    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 80098b2:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	@ 0x2c
 80098b6:	f8d4 9060 	ldr.w	r9, [r4, #96]	@ 0x60
 80098ba:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 80098be:	fa46 f505 	asr.w	r5, r6, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 80098c2:	4599      	cmp	r9, r3
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 80098c4:	fa0f fc85 	sxth.w	ip, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 80098c8:	f340 80b9 	ble.w	8009a3e <STO_PLL_CalcElAngle+0x1d2>
    {
      pHandle->Ialfa_est = INT16_MAX * ((int32_t)pHandle->hF1);
 80098cc:	6623      	str	r3, [r4, #96]	@ 0x60
 80098ce:	4699      	mov	r9, r3
    else
    {
      /* Nothing to do */
    }

    if (pHandle->Ibeta_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 80098d0:	f8d4 8064 	ldr.w	r8, [r4, #100]	@ 0x64
 80098d4:	4543      	cmp	r3, r8
 80098d6:	f2c0 80a6 	blt.w	8009a26 <STO_PLL_CalcElAngle+0x1ba>
    {
      pHandle->Ibeta_est = INT16_MAX * ((int32_t)pHandle->hF1);
    }
    else if (pHandle->Ibeta_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 80098da:	425b      	negs	r3, r3
 80098dc:	4598      	cmp	r8, r3
 80098de:	f340 80a2 	ble.w	8009a26 <STO_PLL_CalcElAngle+0x1ba>
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
#else
    hIbeta_err = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif

    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 80098e2:	88c8      	ldrh	r0, [r1, #6]

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 80098e4:	f8b1 a008 	ldrh.w	sl, [r1, #8]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 80098e8:	888b      	ldrh	r3, [r1, #4]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 80098ea:	f8ad 0014 	strh.w	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
#else
    hValfa = (int16_t)(wAux / 65536);
#endif

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 80098ee:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 80098f2:	f8ad 3010 	strh.w	r3, [sp, #16]
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 80098f6:	f9b1 3000 	ldrsh.w	r3, [r1]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 80098fa:	f8b4 211c 	ldrh.w	r2, [r4, #284]	@ 0x11c
    hAux = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 80098fe:	f9b4 b020 	ldrsh.w	fp, [r4, #32]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8009902:	9904      	ldr	r1, [sp, #16]
    wAux = wAux * pHandle->hC6;
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
    wBemf_beta_est_Next -= wAux;

    /* Calls the PLL blockset */
    pHandle->hBemf_alfa_est = hAux_Alfa;
 8009904:	f8a4 e070 	strh.w	lr, [r4, #112]	@ 0x70
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 8009908:	fb0a f000 	mul.w	r0, sl, r0
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800990c:	fb0a f303 	mul.w	r3, sl, r3
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8009910:	1400      	asrs	r0, r0, #16
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8009912:	141b      	asrs	r3, r3, #16
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8009914:	9003      	str	r0, [sp, #12]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8009916:	9805      	ldr	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8009918:	9302      	str	r3, [sp, #8]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800991a:	fa49 f302 	asr.w	r3, r9, r2
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 800991e:	fa48 f202 	asr.w	r2, r8, r2
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8009922:	eba2 0a00 	sub.w	sl, r2, r0
    wAux = ((int32_t)pHandle->hC1) * hAux;
 8009926:	fb12 f20b 	smulbb	r2, r2, fp
    wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 800992a:	eba8 0202 	sub.w	r2, r8, r2
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800992e:	1a59      	subs	r1, r3, r1
    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 8009930:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	@ 0x22
    wIalfa_est_Next += wAux;
 8009934:	9802      	ldr	r0, [sp, #8]
    pHandle->hBemf_beta_est = hAux_Beta;
 8009936:	f8a4 c072 	strh.w	ip, [r4, #114]	@ 0x72
    wAux = ((int32_t)pHandle->hC1) * hAux;
 800993a:	fb13 f30b 	smulbb	r3, r3, fp
    wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 800993e:	eba9 0303 	sub.w	r3, r9, r3
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8009942:	b209      	sxth	r1, r1
    wAux = ((int32_t)pHandle->hC5) * hValfa;
 8009944:	f9b4 9028 	ldrsh.w	r9, [r4, #40]	@ 0x28
    wIalfa_est_Next += wAux;
 8009948:	fb08 3301 	mla	r3, r8, r1, r3
    wIalfa_est_Next += wAux;
 800994c:	fb09 3300 	mla	r3, r9, r0, r3
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8009950:	fa0f fa8a 	sxth.w	sl, sl
    wIbeta_est_Next += wAux;
 8009954:	9803      	ldr	r0, [sp, #12]
    wIbeta_est_Next += wAux;
 8009956:	fb08 280a 	mla	r8, r8, sl, r2
    wIbeta_est_Next += wAux;
 800995a:	fb09 8800 	mla	r8, r9, r0, r8
    wAux = ((int32_t)pHandle->hC4) * hIalfa_err;
 800995e:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	@ 0x26
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8009962:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
    wAux = wAux * pHandle->hC6;
 8009964:	f9b4 902a 	ldrsh.w	r9, [r4, #42]	@ 0x2a
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 8009968:	fb01 7100 	mla	r1, r1, r0, r7
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 800996c:	fb00 600a 	mla	r0, r0, sl, r6
    wAux = ((int32_t)pHandle->hC3) * hAux_Alfa;
 8009970:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	@ 0x24
    wIalfa_est_Next -= wAux;
 8009974:	fb06 371e 	mls	r7, r6, lr, r3
    wIbeta_est_Next -= wAux;
 8009978:	fb06 861c 	mls	r6, r6, ip, r8
    wAux = (int32_t)hAux_Alfa >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800997c:	fa4e fe02 	asr.w	lr, lr, r2
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8009980:	fa4c fc02 	asr.w	ip, ip, r2
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 8009984:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
    wAux = wAux * pHandle->hC6;
 8009988:	fb0e f309 	mul.w	r3, lr, r9
    wBemf_beta_est_Next -= wAux;
 800998c:	fb03 0812 	mls	r8, r3, r2, r0

    if (0 == pHandle->hForcedDirection)
 8009990:	f994 3124 	ldrsb.w	r3, [r4, #292]	@ 0x124
    wAux = wAux * pHandle->hC6;
 8009994:	fb0c fc09 	mul.w	ip, ip, r9
    wBemf_alfa_est_Next += wAux;
 8009998:	fb0c 1902 	mla	r9, ip, r2, r1
    if (0 == pHandle->hForcedDirection)
 800999c:	2b00      	cmp	r3, #0
 800999e:	d154      	bne.n	8009a4a <STO_PLL_CalcElAngle+0x1de>
    {
      /* We are in auxiliary mode, then rely on the speed detected */
      if(pHandle->_Super.hElSpeedDpp >= 0)
 80099a0:	2a00      	cmp	r2, #0
 80099a2:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 80099a6:	bfa8      	it	ge
 80099a8:	f04f 0a01 	movge.w	sl, #1
  int16_t hAux1;
  int16_t hAux2;
  int16_t hOutput;
  Trig_Components Local_Components;

  Local_Components = MCM_Trig_Functions(pHandle->_Super.hElAngle);
 80099ac:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80099b0:	f7f7 fe44 	bl	800163c <MCM_Trig_Functions>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 80099b4:	9b01      	ldr	r3, [sp, #4]
    hAux_Beta = (int16_t)(hAux_Beta * wDirection);
 80099b6:	fb15 f50a 	smulbb	r5, r5, sl
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 80099ba:	fb13 f30a 	smulbb	r3, r3, sl
    hRotor_Speed = STO_ExecutePLL(pHandle, hAux_Alfa, -hAux_Beta);
 80099be:	426d      	negs	r5, r5

  /* Alfa & Beta BEMF multiplied by Cos & Sin */
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
  wBeta_Cos_tmp = ((int32_t )hBemf_beta_est) * ((int32_t )Local_Components.hCos);
 80099c0:	fb10 f505 	smulbb	r5, r0, r5
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
 80099c4:	fb10 f023 	smultb	r0, r0, r3
#else
  hAux2 = (int16_t)(wAlfa_Sin_tmp / 32768);
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller(& pHandle->PIRegulator, (int32_t)(hAux1 ) - hAux2);
 80099c8:	f340 31cf 	sbfx	r1, r0, #15, #16
 80099cc:	f345 35cf 	sbfx	r5, r5, #15, #16
 80099d0:	1a69      	subs	r1, r5, r1
 80099d2:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 80099d6:	f7fe fcc7 	bl	8008368 <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 80099da:	f894 30f4 	ldrb.w	r3, [r4, #244]	@ 0xf4
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 80099de:	f894 210e 	ldrb.w	r2, [r4, #270]	@ 0x10e
    pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 80099e2:	8220      	strh	r0, [r4, #16]
  bBuffer_index++;
 80099e4:	3301      	adds	r3, #1
 80099e6:	b2db      	uxtb	r3, r3
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 80099e8:	429a      	cmp	r2, r3
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 80099ea:	bf12      	itee	ne
 80099ec:	461a      	movne	r2, r3
 80099ee:	2200      	moveq	r2, #0
    bBuffer_index = 0U;
 80099f0:	4613      	moveq	r3, r2
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 80099f2:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80099f6:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	@ 0x74
 80099fa:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 80099fe:	f8a2 0074 	strh.w	r0, [r2, #116]	@ 0x74
  pHandle->Speed_Buffer_Index = bBuffer_index;
 8009a02:	f884 30f4 	strb.w	r3, [r4, #244]	@ 0xf4
    pHandle->_Super.hElAngle += hRotor_Speed;
 8009a06:	88a3      	ldrh	r3, [r4, #4]
    pHandle->Ialfa_est = wIalfa_est_Next;
 8009a08:	6627      	str	r7, [r4, #96]	@ 0x60
    pHandle->_Super.hElAngle += hRotor_Speed;
 8009a0a:	4418      	add	r0, r3
    pHandle->Ibeta_est = wIbeta_est_Next;
 8009a0c:	e9c4 6919 	strd	r6, r9, [r4, #100]	@ 0x64
    pHandle->_Super.hElAngle += hRotor_Speed;
 8009a10:	b200      	sxth	r0, r0
    pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 8009a12:	f8c4 806c 	str.w	r8, [r4, #108]	@ 0x6c
    pHandle->_Super.hElAngle += hRotor_Speed;
 8009a16:	80a0      	strh	r0, [r4, #4]
}
 8009a18:	b009      	add	sp, #36	@ 0x24
 8009a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    retValue = 0;
 8009a1e:	4608      	mov	r0, r1
}
 8009a20:	b009      	add	sp, #36	@ 0x24
 8009a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pHandle->Ibeta_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 8009a26:	6663      	str	r3, [r4, #100]	@ 0x64
 8009a28:	4698      	mov	r8, r3
 8009a2a:	e75a      	b.n	80098e2 <STO_PLL_CalcElAngle+0x76>
      pHandle->wBemf_beta_est = (-INT16_MAX * ((int32_t)pHandle->hF2));
 8009a2c:	66e3      	str	r3, [r4, #108]	@ 0x6c
 8009a2e:	461e      	mov	r6, r3
 8009a30:	e73f      	b.n	80098b2 <STO_PLL_CalcElAngle+0x46>
    else if (pHandle->wBemf_alfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 8009a32:	425a      	negs	r2, r3
 8009a34:	4297      	cmp	r7, r2
      pHandle->wBemf_alfa_est = -INT16_MAX * ((int32_t)pHandle->hF2);
 8009a36:	bfdc      	itt	le
 8009a38:	6682      	strle	r2, [r0, #104]	@ 0x68
 8009a3a:	4617      	movle	r7, r2
 8009a3c:	e72a      	b.n	8009894 <STO_PLL_CalcElAngle+0x28>
    else if (pHandle->Ialfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 8009a3e:	425a      	negs	r2, r3
 8009a40:	4591      	cmp	r9, r2
      pHandle->Ialfa_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 8009a42:	bfdc      	itt	le
 8009a44:	6622      	strle	r2, [r4, #96]	@ 0x60
 8009a46:	4691      	movle	r9, r2
 8009a48:	e742      	b.n	80098d0 <STO_PLL_CalcElAngle+0x64>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8009a4a:	fa1f fa83 	uxth.w	sl, r3
 8009a4e:	e7ad      	b.n	80099ac <STO_PLL_CalcElAngle+0x140>

08009a50 <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 8009a50:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 8009a52:	f890 510e 	ldrb.w	r5, [r0, #270]	@ 0x10e
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8009a56:	2d00      	cmp	r5, #0
 8009a58:	f000 8094 	beq.w	8009b84 <STO_PLL_CalcAvrgMecSpeedUnit+0x134>
 8009a5c:	f100 0272 	add.w	r2, r0, #114	@ 0x72
 8009a60:	eb02 0445 	add.w	r4, r2, r5, lsl #1
 8009a64:	4613      	mov	r3, r2
    int32_t wAvrSpeed_dpp = (int32_t)0;
 8009a66:	f04f 0c00 	mov.w	ip, #0
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 8009a6a:	f933 ef02 	ldrsh.w	lr, [r3, #2]!
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8009a6e:	42a3      	cmp	r3, r4
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 8009a70:	44f4      	add	ip, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8009a72:	d1fa      	bne.n	8009a6a <STO_PLL_CalcAvrgMecSpeedUnit+0x1a>
      wAvrSpeed_dpp = wAvrSpeed_dpp / ((int16_t)bSpeedBufferSizeUnit);
 8009a74:	fb9c fef5 	sdiv	lr, ip, r5
    int32_t wAvrQuadraticError = 0;
 8009a78:	f04f 0c00 	mov.w	ip, #0
      wError = ((int32_t)pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 8009a7c:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 8009a80:	eba3 030e 	sub.w	r3, r3, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8009a84:	42a2      	cmp	r2, r4
      wAvrQuadraticError += wError;
 8009a86:	fb03 cc03 	mla	ip, r3, r3, ip
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8009a8a:	d1f7      	bne.n	8009a7c <STO_PLL_CalcAvrgMecSpeedUnit+0x2c>
    wAvrQuadraticError = wAvrQuadraticError / ((int16_t)bSpeedBufferSizeUnit);
 8009a8c:	fbbc f4f5 	udiv	r4, ip, r5
    wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 8009a90:	fb0e f30e 	mul.w	r3, lr, lr
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 8009a94:	17de      	asrs	r6, r3, #31
 8009a96:	f8b0 c110 	ldrh.w	ip, [r0, #272]	@ 0x110
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8009a9a:	8b45      	ldrh	r5, [r0, #26]
    if (true == pHandle->EnableDualCheck) /* Do algorithm if it's enabled */
 8009a9c:	f890 7104 	ldrb.w	r7, [r0, #260]	@ 0x104
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 8009aa0:	fbac 2303 	umull	r2, r3, ip, r3
 8009aa4:	fb0c 3306 	mla	r3, ip, r6, r3
    wAvrSquareSpeed = (int32_t)(lAvrSquareSpeed / (int64_t)128);
 8009aa8:	09d2      	lsrs	r2, r2, #7
 8009aaa:	ea42 6243 	orr.w	r2, r2, r3, lsl #25
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 8009aae:	7883      	ldrb	r3, [r0, #2]
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8009ab0:	fb0e f505 	mul.w	r5, lr, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8009ab4:	42a2      	cmp	r2, r4
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 8009ab6:	fb05 f303 	mul.w	r3, r5, r3
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8009aba:	bfd8      	it	le
 8009abc:	2600      	movle	r6, #0
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 8009abe:	69c5      	ldr	r5, [r0, #28]
 8009ac0:	fb93 f3f5 	sdiv	r3, r3, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8009ac4:	bfc8      	it	gt
 8009ac6:	2601      	movgt	r6, #1
    wAux = wAux / ((int16_t)pHandle->_Super.bElToMecRatio);
 8009ac8:	7845      	ldrb	r5, [r0, #1]
 8009aca:	fb93 f3f5 	sdiv	r3, r3, r5
    *pMecSpeedUnit = (int16_t)wAux;
 8009ace:	b21d      	sxth	r5, r3
 8009ad0:	800d      	strh	r5, [r1, #0]
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8009ad2:	f880 60f5 	strb.w	r6, [r0, #245]	@ 0xf5
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wAux;
 8009ad6:	8185      	strh	r5, [r0, #12]
    if (false == pHandle->IsAlgorithmConverged)
 8009ad8:	f890 60f8 	ldrb.w	r6, [r0, #248]	@ 0xf8
    if (true == pHandle->EnableDualCheck) /* Do algorithm if it's enabled */
 8009adc:	b98f      	cbnz	r7, 8009b02 <STO_PLL_CalcAvrgMecSpeedUnit+0xb2>
    if (false == pHandle->IsAlgorithmConverged)
 8009ade:	b336      	cbz	r6, 8009b2e <STO_PLL_CalcAvrgMecSpeedUnit+0xde>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 8009ae0:	42a2      	cmp	r2, r4
 8009ae2:	dc21      	bgt.n	8009b28 <STO_PLL_CalcAvrgMecSpeedUnit+0xd8>
        pHandle->ReliabilityCounter++;
 8009ae4:	f890 30f7 	ldrb.w	r3, [r0, #247]	@ 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->_Super.bMaximumSpeedErrorsNumber)
 8009ae8:	78c2      	ldrb	r2, [r0, #3]
        pHandle->ReliabilityCounter++;
 8009aea:	3301      	adds	r3, #1
 8009aec:	b2db      	uxtb	r3, r3
        if (pHandle->ReliabilityCounter >= pHandle->_Super.bMaximumSpeedErrorsNumber)
 8009aee:	4293      	cmp	r3, r2
        pHandle->ReliabilityCounter++;
 8009af0:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->_Super.bMaximumSpeedErrorsNumber)
 8009af4:	d31b      	bcc.n	8009b2e <STO_PLL_CalcAvrgMecSpeedUnit+0xde>
          pHandle->ReliabilityCounter = 0U;
 8009af6:	2300      	movs	r3, #0
 8009af8:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
          pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8009afc:	7002      	strb	r2, [r0, #0]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 8009b02:	2b00      	cmp	r3, #0
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 8009b04:	f8b0 511a 	ldrh.w	r5, [r0, #282]	@ 0x11a
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 8009b08:	bfb8      	it	lt
 8009b0a:	425b      	neglt	r3, r3
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 8009b0c:	429d      	cmp	r5, r3
 8009b0e:	dc12      	bgt.n	8009b36 <STO_PLL_CalcAvrgMecSpeedUnit+0xe6>
    bool bIs_Bemf_Consistent = false;
 8009b10:	2500      	movs	r5, #0
    int32_t wEstBemfSq = 0;
 8009b12:	462b      	mov	r3, r5
    int32_t wObsBemfSq = 0;
 8009b14:	462f      	mov	r7, r5
      pHandle->Est_Bemf_Level = wEstBemfSq;
 8009b16:	e9c0 733f 	strd	r7, r3, [r0, #252]	@ 0xfc
      pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 8009b1a:	f880 50f9 	strb.w	r5, [r0, #249]	@ 0xf9
    if (false == pHandle->IsAlgorithmConverged)
 8009b1e:	b136      	cbz	r6, 8009b2e <STO_PLL_CalcAvrgMecSpeedUnit+0xde>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 8009b20:	42a2      	cmp	r2, r4
 8009b22:	dddf      	ble.n	8009ae4 <STO_PLL_CalcAvrgMecSpeedUnit+0x94>
 8009b24:	2d00      	cmp	r5, #0
 8009b26:	d0dd      	beq.n	8009ae4 <STO_PLL_CalcAvrgMecSpeedUnit+0x94>
        pHandle->ReliabilityCounter = 0U;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
}
 8009b2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 8009b32:	f7ff bd9b 	b.w	800966c <SPD_IsMecSpeedReliable>
        wObsBemf = (int32_t)pHandle->hBemf_alfa_est;
 8009b36:	f9b0 5070 	ldrsh.w	r5, [r0, #112]	@ 0x70
        wObsBemf = (int32_t)pHandle->hBemf_beta_est;
 8009b3a:	f9b0 7072 	ldrsh.w	r7, [r0, #114]	@ 0x72
        wObsBemfSq = wObsBemf * wObsBemf;
 8009b3e:	fb05 fc05 	mul.w	ip, r5, r5
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 8009b42:	f890 5118 	ldrb.w	r5, [r0, #280]	@ 0x118
        wObsBemfSq += wObsBemf * wObsBemf;
 8009b46:	fb07 c707 	mla	r7, r7, r7, ip
        wEstBemf = (wAux * 32767) / ((int16_t)pHandle->_Super.hMaxReliableMecSpeedUnit);
 8009b4a:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8009b4e:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
 8009b52:	fb93 f3fc 	sdiv	r3, r3, ip
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 8009b56:	fb03 f505 	mul.w	r5, r3, r5
 8009b5a:	2d00      	cmp	r5, #0
 8009b5c:	bfb8      	it	lt
 8009b5e:	353f      	addlt	r5, #63	@ 0x3f
 8009b60:	11ad      	asrs	r5, r5, #6
        wEstBemfSq *= wEstBemf;
 8009b62:	fb05 f303 	mul.w	r3, r5, r3
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	461d      	mov	r5, r3
 8009b6a:	f890 c117 	ldrb.w	ip, [r0, #279]	@ 0x117
 8009b6e:	bfb8      	it	lt
 8009b70:	f103 053f 	addlt.w	r5, r3, #63	@ 0x3f
 8009b74:	11ad      	asrs	r5, r5, #6
 8009b76:	fb0c 3515 	mls	r5, ip, r5, r3
        if (wObsBemfSq > wEstBemfSqLo)
 8009b7a:	42af      	cmp	r7, r5
 8009b7c:	bfd4      	ite	le
 8009b7e:	2500      	movle	r5, #0
 8009b80:	2501      	movgt	r5, #1
 8009b82:	e7c8      	b.n	8009b16 <STO_PLL_CalcAvrgMecSpeedUnit+0xc6>
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8009b84:	462c      	mov	r4, r5
 8009b86:	462b      	mov	r3, r5
 8009b88:	462e      	mov	r6, r5
    int32_t wAvrSpeed_dpp = (int32_t)0;
 8009b8a:	46ae      	mov	lr, r5
 8009b8c:	e783      	b.n	8009a96 <STO_PLL_CalcAvrgMecSpeedUnit+0x46>
 8009b8e:	bf00      	nop

08009b90 <STO_PLL_CalcAvrgElSpeedDpp>:
    int16_t hIndexNew = (int16_t)pHandle->Speed_Buffer_Index;
 8009b90:	f890 20f4 	ldrb.w	r2, [r0, #244]	@ 0xf4
    int16_t hSpeedBufferSizeUnit = (int16_t)pHandle->SpeedBufferSizeUnit;
 8009b94:	f890 c10e 	ldrb.w	ip, [r0, #270]	@ 0x10e
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8009b98:	f890 110f 	ldrb.w	r1, [r0, #271]	@ 0x10f
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 8009b9c:	eb00 0342 	add.w	r3, r0, r2, lsl #1
{
 8009ba0:	b410      	push	{r4}
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 8009ba2:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	@ 0x74
 8009ba6:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8009baa:	ebac 0101 	sub.w	r1, ip, r1
 8009bae:	b289      	uxth	r1, r1
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 8009bb0:	4423      	add	r3, r4
    if (0 == hBufferSizeDiff)
 8009bb2:	b959      	cbnz	r1, 8009bcc <STO_PLL_CalcAvrgElSpeedDpp+0x3c>
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 8009bb4:	f9b0 210c 	ldrsh.w	r2, [r0, #268]	@ 0x10c
 8009bb8:	1a9b      	subs	r3, r3, r2
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 8009bba:	f8b0 2120 	ldrh.w	r2, [r0, #288]	@ 0x120
    pHandle->DppBufferSum = wSum;
 8009bbe:	f8c0 3108 	str.w	r3, [r0, #264]	@ 0x108
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 8009bc2:	4113      	asrs	r3, r2
}
 8009bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.hElSpeedDpp = (int16_t)wAvrSpeed_dpp;
 8009bc8:	81c3      	strh	r3, [r0, #14]
}
 8009bca:	4770      	bx	lr
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 8009bcc:	440a      	add	r2, r1
 8009bce:	b291      	uxth	r1, r2
 8009bd0:	b212      	sxth	r2, r2
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 8009bd2:	4594      	cmp	ip, r2
        hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 8009bd4:	bfdc      	itt	le
 8009bd6:	eba1 010c 	suble.w	r1, r1, ip
 8009bda:	b20a      	sxthle	r2, r1
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->Speed_Buffer[hIndexOld];
 8009bdc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8009be0:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	@ 0x74
 8009be4:	1a9b      	subs	r3, r3, r2
 8009be6:	e7e8      	b.n	8009bba <STO_PLL_CalcAvrgElSpeedDpp+0x2a>

08009be8 <STO_PLL_Clear>:
{
 8009be8:	b510      	push	{r4, lr}
  *
  */
static inline void STO_InitSpeedBuffer(STO_PLL_Handle_t * pHandle)
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 8009bea:	f890 210e 	ldrb.w	r2, [r0, #270]	@ 0x10e
    pHandle->Ialfa_est = (int32_t)0;
 8009bee:	2100      	movs	r1, #0
    pHandle->Ibeta_est = (int32_t)0;
 8009bf0:	e9c0 1118 	strd	r1, r1, [r0, #96]	@ 0x60
    pHandle->wBemf_beta_est = (int32_t)0;
 8009bf4:	e9c0 111a 	strd	r1, r1, [r0, #104]	@ 0x68
    pHandle->Est_Bemf_Level = (int32_t)0;
 8009bf8:	e9c0 113f 	strd	r1, r1, [r0, #252]	@ 0xfc
{
 8009bfc:	4604      	mov	r4, r0
    pHandle->_Super.hElAngle = (int16_t)0;
 8009bfe:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hElSpeedDpp = (int16_t)0;
 8009c00:	81c1      	strh	r1, [r0, #14]
    pHandle->ConsistencyCounter = 0u;
 8009c02:	f8a0 10f6 	strh.w	r1, [r0, #246]	@ 0xf6
    pHandle->IsAlgorithmConverged = false;
 8009c06:	f8a0 10f8 	strh.w	r1, [r0, #248]	@ 0xf8
    pHandle->DppBufferSum = (int32_t)0;
 8009c0a:	f8c0 1108 	str.w	r1, [r0, #264]	@ 0x108
    pHandle->ForceConvergency = false;
 8009c0e:	f8a0 1122 	strh.w	r1, [r0, #290]	@ 0x122

  /* Init speed buffer */
  for (b_i = 0U; b_i < bSpeedBufferSize; b_i++)
 8009c12:	b11a      	cbz	r2, 8009c1c <STO_PLL_Clear+0x34>
  {
    pHandle->Speed_Buffer[b_i] = (int16_t)0;
 8009c14:	0052      	lsls	r2, r2, #1
 8009c16:	3074      	adds	r0, #116	@ 0x74
 8009c18:	f000 f9f4 	bl	800a004 <memset>
  }
  pHandle->Speed_Buffer_Index = 0U;
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	f884 10f4 	strb.w	r1, [r4, #244]	@ 0xf4
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 8009c22:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 8009c26:	f104 0034 	add.w	r0, r4, #52	@ 0x34
}
 8009c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 8009c2e:	f7fe bb67 	b.w	8008300 <PID_SetIntegralTerm>
 8009c32:	bf00      	nop

08009c34 <STO_PLL_Init>:
{
 8009c34:	b510      	push	{r4, lr}
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8009c36:	f890 1116 	ldrb.w	r1, [r0, #278]	@ 0x116
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 8009c3a:	4b19      	ldr	r3, [pc, #100]	@ (8009ca0 <STO_PLL_Init+0x6c>)
 8009c3c:	f9b0 e02e 	ldrsh.w	lr, [r0, #46]	@ 0x2e
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8009c40:	f880 10f6 	strb.w	r1, [r0, #246]	@ 0xf6
    pHandle->EnableDualCheck = true;
 8009c44:	2201      	movs	r2, #1
    pHandle->F3POW2 = 0U;
 8009c46:	2100      	movs	r1, #0
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 8009c48:	fb93 f3fe 	sdiv	r3, r3, lr
 8009c4c:	b21b      	sxth	r3, r3
{
 8009c4e:	4604      	mov	r4, r0
    pHandle->EnableDualCheck = true;
 8009c50:	f880 2104 	strb.w	r2, [r0, #260]	@ 0x104
    pHandle->F3POW2 = 0U;
 8009c54:	8641      	strh	r1, [r0, #50]	@ 0x32
    while (htempk != 0)
 8009c56:	b30b      	cbz	r3, 8009c9c <STO_PLL_Init+0x68>
    wAux = ((int32_t)1);
 8009c58:	4611      	mov	r1, r2
      htempk /= ((int16_t)2);
 8009c5a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    while (htempk != 0)
 8009c5e:	f102 0c01 	add.w	ip, r2, #1
 8009c62:	105b      	asrs	r3, r3, #1
 8009c64:	4610      	mov	r0, r2
      wAux *= ((int32_t)2);
 8009c66:	ea4f 0141 	mov.w	r1, r1, lsl #1
    while (htempk != 0)
 8009c6a:	fa1f f28c 	uxth.w	r2, ip
 8009c6e:	d1f4      	bne.n	8009c5a <STO_PLL_Init+0x26>
    pHandle->hF3 = (int16_t)wAux;
 8009c70:	b20a      	sxth	r2, r1
 8009c72:	8660      	strh	r0, [r4, #50]	@ 0x32
    wAux = ((int32_t)(pHandle->hF2)) * pHandle->hF3;
 8009c74:	fb0e f102 	mul.w	r1, lr, r2
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 8009c78:	480a      	ldr	r0, [pc, #40]	@ (8009ca4 <STO_PLL_Init+0x70>)
    pHandle->hF3 = (int16_t)wAux;
 8009c7a:	8622      	strh	r2, [r4, #48]	@ 0x30
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 8009c7c:	17cb      	asrs	r3, r1, #31
 8009c7e:	fb80 0101 	smull	r0, r1, r0, r1
 8009c82:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 8009c86:	8563      	strh	r3, [r4, #42]	@ 0x2a
    STO_PLL_Clear(pHandle);
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f7ff ffad 	bl	8009be8 <STO_PLL_Clear>
    PID_HandleInit(&pHandle->PIRegulator);
 8009c8e:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8009c92:	f7fe fb21 	bl	80082d8 <PID_HandleInit>
    pHandle->_Super.hMecAccelUnitP = 0;
 8009c96:	2300      	movs	r3, #0
 8009c98:	8263      	strh	r3, [r4, #18]
}
 8009c9a:	bd10      	pop	{r4, pc}
 8009c9c:	4671      	mov	r1, lr
 8009c9e:	e7eb      	b.n	8009c78 <STO_PLL_Init+0x44>
 8009ca0:	000fea5e 	.word	0x000fea5e
 8009ca4:	06488dc5 	.word	0x06488dc5

08009ca8 <STO_PLL_IsObserverConverged>:
    int32_t wtemp;
    int16_t hEstimatedSpeedUnit;
    int16_t hUpperThreshold;
    int16_t hLowerThreshold;

    if (true == pHandle->ForceConvergency2)
 8009ca8:	f890 2123 	ldrb.w	r2, [r0, #291]	@ 0x123
{
 8009cac:	4603      	mov	r3, r0
    if (true == pHandle->ForceConvergency2)
 8009cae:	b112      	cbz	r2, 8009cb6 <STO_PLL_IsObserverConverged+0xe>
    {
      *phForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8009cb0:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 8009cb4:	800a      	strh	r2, [r1, #0]
    else
    {
      /* Nothing to do */
    }

    if (true == pHandle->ForceConvergency)
 8009cb6:	f893 0122 	ldrb.w	r0, [r3, #290]	@ 0x122
 8009cba:	b128      	cbz	r0, 8009cc8 <STO_PLL_IsObserverConverged+0x20>
    {
      bAux = true;
      pHandle->IsAlgorithmConverged = true;
 8009cbc:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8009cbe:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 8009cc0:	f883 00f8 	strb.w	r0, [r3, #248]	@ 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8009cc4:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (bAux);
}
 8009cc6:	4770      	bx	lr
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 8009cc8:	f9b1 2000 	ldrsh.w	r2, [r1]
      hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8009ccc:	f9b3 c00c 	ldrsh.w	ip, [r3, #12]
{
 8009cd0:	b530      	push	{r4, r5, lr}
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 8009cd2:	fb0c fe02 	mul.w	lr, ip, r2
      if (wtemp > 0)
 8009cd6:	f1be 0f00 	cmp.w	lr, #0
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 8009cda:	4614      	mov	r4, r2
      if (wtemp > 0)
 8009cdc:	dd38      	ble.n	8009d50 <STO_PLL_IsObserverConverged+0xa8>
        if (hEstimatedSpeedUnit < 0)
 8009cde:	f1bc 0f00 	cmp.w	ip, #0
          hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 8009ce2:	bfbc      	itt	lt
 8009ce4:	f1cc 0c00 	rsblt	ip, ip, #0
 8009ce8:	fa0f fc8c 	sxthlt.w	ip, ip
        if (*phForcedMecSpeedUnit < 0)
 8009cec:	2a00      	cmp	r2, #0
 8009cee:	db34      	blt.n	8009d5a <STO_PLL_IsObserverConverged+0xb2>
        if (true == pHandle->IsSpeedReliable)
 8009cf0:	f893 10f5 	ldrb.w	r1, [r3, #245]	@ 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 8009cf4:	f893 e112 	ldrb.w	lr, [r3, #274]	@ 0x112
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 8009cf8:	f893 2113 	ldrb.w	r2, [r3, #275]	@ 0x113
        if (true == pHandle->IsSpeedReliable)
 8009cfc:	b349      	cbz	r1, 8009d52 <STO_PLL_IsObserverConverged+0xaa>
          if ((uint16_t)hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed)
 8009cfe:	f8b3 5114 	ldrh.w	r5, [r3, #276]	@ 0x114
 8009d02:	fa1f f18c 	uxth.w	r1, ip
 8009d06:	428d      	cmp	r5, r1
 8009d08:	d223      	bcs.n	8009d52 <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 8009d0a:	fb04 f202 	mul.w	r2, r4, r2
        hLowerThreshold = (int16_t)(wAux / ((int32_t)16));
 8009d0e:	2a00      	cmp	r2, #0
 8009d10:	bfb8      	it	lt
 8009d12:	320f      	addlt	r2, #15
            if (hEstimatedSpeedUnit >= hLowerThreshold)
 8009d14:	f342 120f 	sbfx	r2, r2, #4, #16
 8009d18:	4594      	cmp	ip, r2
 8009d1a:	db1a      	blt.n	8009d52 <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 8009d1c:	fb04 fe0e 	mul.w	lr, r4, lr
        hUpperThreshold = (int16_t)(wAux / ((int32_t)16));
 8009d20:	f1be 0f00 	cmp.w	lr, #0
 8009d24:	bfb8      	it	lt
 8009d26:	f10e 0e0f 	addlt.w	lr, lr, #15
              if (hEstimatedSpeedUnit <= hUpperThreshold)
 8009d2a:	f34e 1e0f 	sbfx	lr, lr, #4, #16
 8009d2e:	45f4      	cmp	ip, lr
 8009d30:	dc0f      	bgt.n	8009d52 <STO_PLL_IsObserverConverged+0xaa>
                pHandle->ConsistencyCounter++;
 8009d32:	f893 20f6 	ldrb.w	r2, [r3, #246]	@ 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 8009d36:	f893 1116 	ldrb.w	r1, [r3, #278]	@ 0x116
                pHandle->ConsistencyCounter++;
 8009d3a:	3201      	adds	r2, #1
 8009d3c:	b2d2      	uxtb	r2, r2
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 8009d3e:	4291      	cmp	r1, r2
                pHandle->ConsistencyCounter++;
 8009d40:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 8009d44:	d804      	bhi.n	8009d50 <STO_PLL_IsObserverConverged+0xa8>
      pHandle->IsAlgorithmConverged = true;
 8009d46:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8009d48:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 8009d4a:	f883 00f8 	strb.w	r0, [r3, #248]	@ 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8009d4e:	701a      	strb	r2, [r3, #0]
}
 8009d50:	bd30      	pop	{r4, r5, pc}
                pHandle->ConsistencyCounter = 0U;
 8009d52:	2200      	movs	r2, #0
 8009d54:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
}
 8009d58:	bd30      	pop	{r4, r5, pc}
          *phForcedMecSpeedUnit = -*phForcedMecSpeedUnit;
 8009d5a:	4252      	negs	r2, r2
 8009d5c:	b212      	sxth	r2, r2
 8009d5e:	800a      	strh	r2, [r1, #0]
        if (true == pHandle->IsSpeedReliable)
 8009d60:	f893 10f5 	ldrb.w	r1, [r3, #245]	@ 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 8009d64:	f893 e112 	ldrb.w	lr, [r3, #274]	@ 0x112
 8009d68:	4614      	mov	r4, r2
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 8009d6a:	f893 2113 	ldrb.w	r2, [r3, #275]	@ 0x113
        if (true == pHandle->IsSpeedReliable)
 8009d6e:	2900      	cmp	r1, #0
 8009d70:	d0ef      	beq.n	8009d52 <STO_PLL_IsObserverConverged+0xaa>
 8009d72:	e7c4      	b.n	8009cfe <STO_PLL_IsObserverConverged+0x56>

08009d74 <STO_PLL_GetEstimatedBemf>:
    vaux.alpha = pHandle->hBemf_alfa_est;
    vaux.beta = pHandle->hBemf_beta_est;
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (vaux);
 8009d74:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8009d76:	2200      	movs	r2, #0
 8009d78:	b299      	uxth	r1, r3
 8009d7a:	f361 020f 	bfi	r2, r1, #0, #16
 8009d7e:	0c1b      	lsrs	r3, r3, #16
 8009d80:	f363 421f 	bfi	r2, r3, #16, #16
{
 8009d84:	b082      	sub	sp, #8
}
 8009d86:	4610      	mov	r0, r2
 8009d88:	b002      	add	sp, #8
 8009d8a:	4770      	bx	lr

08009d8c <STO_PLL_GetEstimatedCurrent>:
  * @brief  Exports from @p pHandle the stator current alpha-beta as estimated by state observer.
  * 
  * @retval alphabeta_t State observer estimated stator current Ialpha-beta.
  */
__weak alphabeta_t STO_PLL_GetEstimatedCurrent(STO_PLL_Handle_t *pHandle)
{
 8009d8c:	4603      	mov	r3, r0
  iaux.beta = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (iaux);
 8009d8e:	2000      	movs	r0, #0
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8009d90:	f8b3 111c 	ldrh.w	r1, [r3, #284]	@ 0x11c
  iaux.beta = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 8009d94:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8009d98:	410a      	asrs	r2, r1
  return (iaux);
 8009d9a:	410b      	asrs	r3, r1
 8009d9c:	b292      	uxth	r2, r2
 8009d9e:	f362 000f 	bfi	r0, r2, #0, #16
 8009da2:	b29b      	uxth	r3, r3
{
 8009da4:	b082      	sub	sp, #8
  return (iaux);
 8009da6:	f363 401f 	bfi	r0, r3, #16, #16
}
 8009daa:	b002      	add	sp, #8
 8009dac:	4770      	bx	lr
 8009dae:	bf00      	nop

08009db0 <STO_PLL_GetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    *phC2 = pHandle->hC2;
 8009db0:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8009db4:	800b      	strh	r3, [r1, #0]
    *phC4 = pHandle->hC4;
 8009db6:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	@ 0x26
 8009dba:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop

08009dc0 <STO_PLL_SetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hC2 = hhC1;
 8009dc0:	8441      	strh	r1, [r0, #34]	@ 0x22
    pHandle->hC4 = hhC2;
 8009dc2:	84c2      	strh	r2, [r0, #38]	@ 0x26
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8009dc4:	4770      	bx	lr
 8009dc6:	bf00      	nop

08009dc8 <STO_OTF_ResetPLL>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    PID_SetIntegralTerm(&pHdl->PIRegulator, (int32_t)0);
 8009dc8:	6800      	ldr	r0, [r0, #0]
 8009dca:	2100      	movs	r1, #0
 8009dcc:	3034      	adds	r0, #52	@ 0x34
 8009dce:	f7fe ba97 	b.w	8008300 <PID_SetIntegralTerm>
 8009dd2:	bf00      	nop

08009dd4 <STO_PLL_IsVarianceTight>:
  }
  else
  {
#endif
    const STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    tempStatus = pHdl->IsSpeedReliable;
 8009dd4:	6803      	ldr	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (tempStatus);
}
 8009dd6:	f893 00f5 	ldrb.w	r0, [r3, #245]	@ 0xf5
 8009dda:	4770      	bx	lr

08009ddc <STO_PLL_ForceConvergency1>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency = true;
 8009ddc:	6803      	ldr	r3, [r0, #0]
 8009dde:	2201      	movs	r2, #1
 8009de0:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop

08009de8 <STO_PLL_ForceConvergency2>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency2 = true;
 8009de8:	6803      	ldr	r3, [r0, #0]
 8009dea:	2201      	movs	r2, #1
 8009dec:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8009df0:	4770      	bx	lr
 8009df2:	bf00      	nop

08009df4 <STO_SetDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hForcedDirection = direction;
 8009df4:	f880 1124 	strb.w	r1, [r0, #292]	@ 0x124
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop

08009dfc <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8009dfc:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8009dfe:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8009e00:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 8009e02:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 8009e06:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 8009e08:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 8009e0a:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 8009e0c:	8503      	strh	r3, [r0, #40]	@ 0x28
    pHandle->bTransitionStarted = false;
 8009e0e:	8583      	strh	r3, [r0, #44]	@ 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8009e10:	85c2      	strh	r2, [r0, #46]	@ 0x2e
    pHandle->hElAngleAccu = 0;
 8009e12:	6303      	str	r3, [r0, #48]	@ 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop

08009e18 <VSS_Init>:
{
 8009e18:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 8009e1a:	f7ff ffef 	bl	8009dfc <VSS_Clear>
}
 8009e1e:	bd08      	pop	{r3, pc}

08009e20 <VSS_CalcElAngle>:
    int16_t hAngleDiff;
    int32_t wAux;
    int16_t hAngleCorr;
    int16_t hSignCorr = 1;

    if (true == pHandle->bCopyObserver)
 8009e20:	f890 2033 	ldrb.w	r2, [r0, #51]	@ 0x33
{
 8009e24:	4603      	mov	r3, r0
    if (true == pHandle->bCopyObserver)
 8009e26:	b11a      	cbz	r2, 8009e30 <VSS_CalcElAngle+0x10>
    {
      hRetAngle = *(int16_t *)pInputVars_str;
 8009e28:	f9b1 0000 	ldrsh.w	r0, [r1]
      {
        hRetAngle = pHandle->hElAngleAccu;
      }
    }

    pHandle->_Super.hElAngle = hRetAngle;
 8009e2c:	8098      	strh	r0, [r3, #4]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (hRetAngle);
}
 8009e2e:	4770      	bx	lr
{
 8009e30:	b530      	push	{r4, r5, lr}
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8009e32:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8009e36:	8e00      	ldrh	r0, [r0, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8009e38:	88dd      	ldrh	r5, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 8009e3a:	f893 402c 	ldrb.w	r4, [r3, #44]	@ 0x2c
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8009e3e:	785a      	ldrb	r2, [r3, #1]
 8009e40:	fb9c f2f2 	sdiv	r2, ip, r2
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8009e44:	4460      	add	r0, ip
 8009e46:	fa1f fe80 	uxth.w	lr, r0
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8009e4a:	442a      	add	r2, r5
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8009e4c:	b200      	sxth	r0, r0
 8009e4e:	8618      	strh	r0, [r3, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8009e50:	80da      	strh	r2, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 8009e52:	b1fc      	cbz	r4, 8009e94 <VSS_CalcElAngle+0x74>
        if (0 == pHandle->hTransitionRemainingSteps)
 8009e54:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	@ 0x2e
 8009e58:	b1f2      	cbz	r2, 8009e98 <VSS_CalcElAngle+0x78>
          pHandle->hTransitionRemainingSteps--;
 8009e5a:	3a01      	subs	r2, #1
 8009e5c:	b212      	sxth	r2, r2
 8009e5e:	85da      	strh	r2, [r3, #46]	@ 0x2e
          if (pHandle->_Super.hElSpeedDpp >= 0)
 8009e60:	f1bc 0f00 	cmp.w	ip, #0
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 8009e64:	8809      	ldrh	r1, [r1, #0]
          if (pHandle->_Super.hElSpeedDpp >= 0)
 8009e66:	db26      	blt.n	8009eb6 <VSS_CalcElAngle+0x96>
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 8009e68:	eba1 0e0e 	sub.w	lr, r1, lr
 8009e6c:	fa0f fe8e 	sxth.w	lr, lr
 8009e70:	2501      	movs	r5, #1
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 8009e72:	f9b3 4036 	ldrsh.w	r4, [r3, #54]	@ 0x36
          wAux = (int32_t)hAngleDiff * pHandle->hTransitionRemainingSteps;
 8009e76:	fb0e f202 	mul.w	r2, lr, r2
          if (hAngleDiff >= 0)
 8009e7a:	f1be 0f00 	cmp.w	lr, #0
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 8009e7e:	fb92 f2f4 	sdiv	r2, r2, r4
          hAngleCorr *= hSignCorr;
 8009e82:	fb12 f205 	smulbb	r2, r2, r5
 8009e86:	b292      	uxth	r2, r2
          if (hAngleDiff >= 0)
 8009e88:	db0e      	blt.n	8009ea8 <VSS_CalcElAngle+0x88>
            pHandle->bTransitionLocked = true;
 8009e8a:	2001      	movs	r0, #1
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 8009e8c:	1a8a      	subs	r2, r1, r2
            pHandle->bTransitionLocked = true;
 8009e8e:	f883 0032 	strb.w	r0, [r3, #50]	@ 0x32
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 8009e92:	b210      	sxth	r0, r2
    pHandle->_Super.hElAngle = hRetAngle;
 8009e94:	8098      	strh	r0, [r3, #4]
}
 8009e96:	bd30      	pop	{r4, r5, pc}
          hRetAngle = *(int16_t *)pInputVars_str;
 8009e98:	f9b1 0000 	ldrsh.w	r0, [r1]
          pHandle->_Super.bSpeedErrorNumber = 0U;
 8009e9c:	701a      	strb	r2, [r3, #0]
          pHandle->bTransitionEnded = true;
 8009e9e:	2401      	movs	r4, #1
 8009ea0:	f883 402d 	strb.w	r4, [r3, #45]	@ 0x2d
    pHandle->_Super.hElAngle = hRetAngle;
 8009ea4:	8098      	strh	r0, [r3, #4]
}
 8009ea6:	bd30      	pop	{r4, r5, pc}
            if (false == pHandle->bTransitionLocked)
 8009ea8:	f893 4032 	ldrb.w	r4, [r3, #50]	@ 0x32
 8009eac:	2c00      	cmp	r4, #0
 8009eae:	d0f1      	beq.n	8009e94 <VSS_CalcElAngle+0x74>
              hRetAngle = *(int16_t *)pInputVars_str + hAngleCorr;
 8009eb0:	440a      	add	r2, r1
 8009eb2:	b210      	sxth	r0, r2
 8009eb4:	e7ee      	b.n	8009e94 <VSS_CalcElAngle+0x74>
            hAngleDiff = pHandle->hElAngleAccu - *(int16_t *)pInputVars_str;
 8009eb6:	ebae 0e01 	sub.w	lr, lr, r1
 8009eba:	fa0f fe8e 	sxth.w	lr, lr
 8009ebe:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 8009ec2:	e7d6      	b.n	8009e72 <VSS_CalcElAngle+0x52>

08009ec4 <VSS_CalcAvrgMecSpeedUnit>:
    SpeedSensorReliability = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingStep > 1u)
 8009ec4:	8d02      	ldrh	r2, [r0, #40]	@ 0x28
 8009ec6:	2a01      	cmp	r2, #1
{
 8009ec8:	4603      	mov	r3, r0
    if (pHandle->hRemainingStep > 1u)
 8009eca:	d922      	bls.n	8009f12 <VSS_CalcAvrgMecSpeedUnit+0x4e>
{
 8009ecc:	b410      	push	{r4}
    {
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8009ece:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8009ed0:	6a1c      	ldr	r4, [r3, #32]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 / 65536);
#endif

      /* Convert dpp into MecUnit */
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8009ed2:	8b5a      	ldrh	r2, [r3, #26]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8009ed4:	4420      	add	r0, r4
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 8009ed6:	ea4f 4c20 	mov.w	ip, r0, asr #16
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8009eda:	69dc      	ldr	r4, [r3, #28]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8009edc:	6258      	str	r0, [r3, #36]	@ 0x24
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8009ede:	fb0c f202 	mul.w	r2, ip, r2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8009ee2:	7858      	ldrb	r0, [r3, #1]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 8009ee4:	f8a3 c00e 	strh.w	ip, [r3, #14]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8009ee8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8009eec:	fb04 f000 	mul.w	r0, r4, r0
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8009ef0:	0052      	lsls	r2, r2, #1
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8009ef2:	fb92 f2f0 	sdiv	r2, r2, r0
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 8009ef6:	b212      	sxth	r2, r2
 8009ef8:	800a      	strh	r2, [r1, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
      pHandle->hRemainingStep--;
 8009efa:	8d18      	ldrh	r0, [r3, #40]	@ 0x28
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8009efc:	819a      	strh	r2, [r3, #12]
      pHandle->hRemainingStep--;
 8009efe:	1e42      	subs	r2, r0, #1
    else
    {
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
    }
    /* If the transition is not done yet, we already know that speed is not reliable */
    if (false == pHandle->bTransitionEnded)
 8009f00:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      pHandle->hRemainingStep--;
 8009f04:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (false == pHandle->bTransitionEnded)
 8009f06:	b970      	cbnz	r0, 8009f26 <VSS_CalcAvrgMecSpeedUnit+0x62>
    {
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8009f08:	78da      	ldrb	r2, [r3, #3]
 8009f0a:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (SpeedSensorReliability);
}
 8009f0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f10:	4770      	bx	lr
    else if (1U == pHandle->hRemainingStep)
 8009f12:	d00d      	beq.n	8009f30 <VSS_CalcAvrgMecSpeedUnit+0x6c>
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8009f14:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    if (false == pHandle->bTransitionEnded)
 8009f18:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8009f1c:	800a      	strh	r2, [r1, #0]
    if (false == pHandle->bTransitionEnded)
 8009f1e:	bb00      	cbnz	r0, 8009f62 <VSS_CalcAvrgMecSpeedUnit+0x9e>
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8009f20:	78da      	ldrb	r2, [r3, #3]
 8009f22:	701a      	strb	r2, [r3, #0]
}
 8009f24:	4770      	bx	lr
 8009f26:	f85d 4b04 	ldr.w	r4, [sp], #4
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7ff bb9e 	b.w	800966c <SPD_IsMecSpeedReliable>
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 8009f30:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	@ 0x2a
 8009f34:	f8a1 c000 	strh.w	ip, [r1]
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8009f38:	8b42      	ldrh	r2, [r0, #26]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 8009f3a:	69c0      	ldr	r0, [r0, #28]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8009f3c:	f8a3 c00c 	strh.w	ip, [r3, #12]
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8009f40:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009f44:	0052      	lsls	r2, r2, #1
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 8009f46:	fb00 f00c 	mul.w	r0, r0, ip
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8009f4a:	fb90 f0f2 	sdiv	r0, r0, r2
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8009f4e:	785a      	ldrb	r2, [r3, #1]
 8009f50:	fb12 f200 	smulbb	r2, r2, r0
      pHandle->hRemainingStep = 0U;
 8009f54:	2000      	movs	r0, #0
 8009f56:	8518      	strh	r0, [r3, #40]	@ 0x28
    if (false == pHandle->bTransitionEnded)
 8009f58:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8009f5c:	81da      	strh	r2, [r3, #14]
    if (false == pHandle->bTransitionEnded)
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	d0de      	beq.n	8009f20 <VSS_CalcAvrgMecSpeedUnit+0x5c>
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7ff bb82 	b.w	800966c <SPD_IsMecSpeedReliable>

08009f68 <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 8009f68:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8009f6c:	b9a3      	cbnz	r3, 8009f98 <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8009f6e:	8b43      	ldrh	r3, [r0, #26]
{
 8009f70:	b510      	push	{r4, lr}
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8009f72:	69c4      	ldr	r4, [r0, #28]

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8009f74:	f890 e001 	ldrb.w	lr, [r0, #1]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8009f78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8009f7c:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8009f80:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 8009f82:	fb9c fcf3 	sdiv	ip, ip, r3
      if (0U == hDurationms)
 8009f86:	b942      	cbnz	r2, 8009f9a <VSS_SetMecAcceleration+0x32>
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8009f88:	fb1c fc0e 	smulbb	ip, ip, lr
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8009f8c:	8181      	strh	r1, [r0, #12]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8009f8e:	f8a0 c00e 	strh.w	ip, [r0, #14]

        pHandle->hRemainingStep = 0U;
 8009f92:	8502      	strh	r2, [r0, #40]	@ 0x28

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8009f94:	8541      	strh	r1, [r0, #42]	@ 0x2a
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8009f96:	bd10      	pop	{r4, pc}
 8009f98:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 8009f9a:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
 8009f9c:	fb02 f303 	mul.w	r3, r2, r3
 8009fa0:	4a0e      	ldr	r2, [pc, #56]	@ (8009fdc <VSS_SetMecAcceleration+0x74>)
 8009fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fa6:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 8009faa:	3301      	adds	r3, #1
 8009fac:	b29b      	uxth	r3, r3
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8009fae:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
        pHandle->hRemainingStep = hNbrStep;
 8009fb2:	8503      	strh	r3, [r0, #40]	@ 0x28
        if (0U == hNbrStep)
 8009fb4:	b91b      	cbnz	r3, 8009fbe <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8009fb6:	0412      	lsls	r2, r2, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8009fb8:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8009fba:	6242      	str	r2, [r0, #36]	@ 0x24
}
 8009fbc:	bd10      	pop	{r4, pc}
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8009fbe:	fb92 f4fe 	sdiv	r4, r2, lr
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8009fc2:	ebac 0c04 	sub.w	ip, ip, r4
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 8009fc6:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8009fca:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8009fcc:	fb9c f3f3 	sdiv	r3, ip, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 8009fd0:	fb0e f303 	mul.w	r3, lr, r3
 8009fd4:	6203      	str	r3, [r0, #32]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8009fd6:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8009fd8:	6242      	str	r2, [r0, #36]	@ 0x24
    }
 8009fda:	e7ef      	b.n	8009fbc <VSS_SetMecAcceleration+0x54>
 8009fdc:	10624dd3 	.word	0x10624dd3

08009fe0 <VSS_SetStartTransition>:
    /* nothing to do */
  }
  else
  {
#endif
    if (true == bCommand)
 8009fe0:	b151      	cbz	r1, 8009ff8 <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionStarted = true;

      if (0 == pHandle->hTransitionSteps)
 8009fe2:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	@ 0x36
      pHandle->bTransitionStarted = true;
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
      if (0 == pHandle->hTransitionSteps)
 8009fec:	b923      	cbnz	r3, 8009ff8 <VSS_SetStartTransition+0x18>
      {
        pHandle->bTransitionEnded = true;
 8009fee:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0U;
 8009ff2:	7003      	strb	r3, [r0, #0]
        bAux = false;
 8009ff4:	4618      	mov	r0, r3
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (bAux);
}
 8009ff6:	4770      	bx	lr
  bool bAux = true;
 8009ff8:	2001      	movs	r0, #1
 8009ffa:	4770      	bx	lr

08009ffc <VSS_TransitionEnded>:
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  return ((MC_NULL == pHandle) ? false : pHandle->bTransitionEnded);
#else
  return (pHandle->bTransitionEnded);
#endif
}
 8009ffc:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop

0800a004 <memset>:
 800a004:	4402      	add	r2, r0
 800a006:	4603      	mov	r3, r0
 800a008:	4293      	cmp	r3, r2
 800a00a:	d100      	bne.n	800a00e <memset+0xa>
 800a00c:	4770      	bx	lr
 800a00e:	f803 1b01 	strb.w	r1, [r3], #1
 800a012:	e7f9      	b.n	800a008 <memset+0x4>

0800a014 <__libc_init_array>:
 800a014:	b570      	push	{r4, r5, r6, lr}
 800a016:	4d0d      	ldr	r5, [pc, #52]	@ (800a04c <__libc_init_array+0x38>)
 800a018:	4c0d      	ldr	r4, [pc, #52]	@ (800a050 <__libc_init_array+0x3c>)
 800a01a:	1b64      	subs	r4, r4, r5
 800a01c:	10a4      	asrs	r4, r4, #2
 800a01e:	2600      	movs	r6, #0
 800a020:	42a6      	cmp	r6, r4
 800a022:	d109      	bne.n	800a038 <__libc_init_array+0x24>
 800a024:	4d0b      	ldr	r5, [pc, #44]	@ (800a054 <__libc_init_array+0x40>)
 800a026:	4c0c      	ldr	r4, [pc, #48]	@ (800a058 <__libc_init_array+0x44>)
 800a028:	f000 f826 	bl	800a078 <_init>
 800a02c:	1b64      	subs	r4, r4, r5
 800a02e:	10a4      	asrs	r4, r4, #2
 800a030:	2600      	movs	r6, #0
 800a032:	42a6      	cmp	r6, r4
 800a034:	d105      	bne.n	800a042 <__libc_init_array+0x2e>
 800a036:	bd70      	pop	{r4, r5, r6, pc}
 800a038:	f855 3b04 	ldr.w	r3, [r5], #4
 800a03c:	4798      	blx	r3
 800a03e:	3601      	adds	r6, #1
 800a040:	e7ee      	b.n	800a020 <__libc_init_array+0xc>
 800a042:	f855 3b04 	ldr.w	r3, [r5], #4
 800a046:	4798      	blx	r3
 800a048:	3601      	adds	r6, #1
 800a04a:	e7f2      	b.n	800a032 <__libc_init_array+0x1e>
 800a04c:	0800a4b0 	.word	0x0800a4b0
 800a050:	0800a4b0 	.word	0x0800a4b0
 800a054:	0800a4b0 	.word	0x0800a4b0
 800a058:	0800a4b4 	.word	0x0800a4b4

0800a05c <memcpy>:
 800a05c:	440a      	add	r2, r1
 800a05e:	4291      	cmp	r1, r2
 800a060:	f100 33ff 	add.w	r3, r0, #4294967295
 800a064:	d100      	bne.n	800a068 <memcpy+0xc>
 800a066:	4770      	bx	lr
 800a068:	b510      	push	{r4, lr}
 800a06a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a06e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a072:	4291      	cmp	r1, r2
 800a074:	d1f9      	bne.n	800a06a <memcpy+0xe>
 800a076:	bd10      	pop	{r4, pc}

0800a078 <_init>:
 800a078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a07a:	bf00      	nop
 800a07c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a07e:	bc08      	pop	{r3}
 800a080:	469e      	mov	lr, r3
 800a082:	4770      	bx	lr

0800a084 <_fini>:
 800a084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a086:	bf00      	nop
 800a088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a08a:	bc08      	pop	{r3}
 800a08c:	469e      	mov	lr, r3
 800a08e:	4770      	bx	lr
