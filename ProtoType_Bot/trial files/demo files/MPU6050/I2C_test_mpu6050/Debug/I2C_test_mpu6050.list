
I2C_test_mpu6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4e0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  0800a5a0  0800a5a0  0000b5a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab60  0800ab60  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800ab60  0800ab60  0000c1d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ab60  0800ab60  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab60  0800ab60  0000bb60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ab64  0800ab64  0000bb64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ab68  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  200001d4  0800ad3c  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  0800ad3c  0000c498  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfce  00000000  00000000  0000c1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fb2  00000000  00000000  000181ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0001a180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000816  00000000  00000000  0001abf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000114ee  00000000  00000000  0001b406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea14  00000000  00000000  0002c8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063b89  00000000  00000000  0003b308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009ee91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a2c  00000000  00000000  0009eed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000a2900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a588 	.word	0x0800a588

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	0800a588 	.word	0x0800a588

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f943 	bl	80016c8 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f883 	bl	8001558 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f935 	bl	80016c8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f92b 	bl	80016c8 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f8ad 	bl	80015e0 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f8a3 	bl	80015e0 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	@ (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f001 fffb 	bl	80024b8 <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	@ (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 fc36 	bl	8001d3c <__aeabi_dsub>
 80004d0:	f001 fff2 	bl	80024b8 <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	@ 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	2200      	movs	r2, #0
 80004e8:	2300      	movs	r3, #0
 80004ea:	0004      	movs	r4, r0
 80004ec:	000d      	movs	r5, r1
 80004ee:	f7ff ffb3 	bl	8000458 <__aeabi_dcmplt>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	d108      	bne.n	8000508 <__aeabi_d2lz+0x24>
 80004f6:	0020      	movs	r0, r4
 80004f8:	0029      	movs	r1, r5
 80004fa:	f000 f80f 	bl	800051c <__aeabi_d2ulz>
 80004fe:	0002      	movs	r2, r0
 8000500:	000b      	movs	r3, r1
 8000502:	0010      	movs	r0, r2
 8000504:	0019      	movs	r1, r3
 8000506:	bd70      	pop	{r4, r5, r6, pc}
 8000508:	2380      	movs	r3, #128	@ 0x80
 800050a:	061b      	lsls	r3, r3, #24
 800050c:	18e9      	adds	r1, r5, r3
 800050e:	0020      	movs	r0, r4
 8000510:	f000 f804 	bl	800051c <__aeabi_d2ulz>
 8000514:	2300      	movs	r3, #0
 8000516:	4242      	negs	r2, r0
 8000518:	418b      	sbcs	r3, r1
 800051a:	e7f2      	b.n	8000502 <__aeabi_d2lz+0x1e>

0800051c <__aeabi_d2ulz>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	2200      	movs	r2, #0
 8000520:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <__aeabi_d2ulz+0x34>)
 8000522:	000d      	movs	r5, r1
 8000524:	0004      	movs	r4, r0
 8000526:	f001 f941 	bl	80017ac <__aeabi_dmul>
 800052a:	f7ff ffbd 	bl	80004a8 <__aeabi_d2uiz>
 800052e:	0006      	movs	r6, r0
 8000530:	f002 f82c 	bl	800258c <__aeabi_ui2d>
 8000534:	2200      	movs	r2, #0
 8000536:	4b07      	ldr	r3, [pc, #28]	@ (8000554 <__aeabi_d2ulz+0x38>)
 8000538:	f001 f938 	bl	80017ac <__aeabi_dmul>
 800053c:	0002      	movs	r2, r0
 800053e:	000b      	movs	r3, r1
 8000540:	0020      	movs	r0, r4
 8000542:	0029      	movs	r1, r5
 8000544:	f001 fbfa 	bl	8001d3c <__aeabi_dsub>
 8000548:	f7ff ffae 	bl	80004a8 <__aeabi_d2uiz>
 800054c:	0031      	movs	r1, r6
 800054e:	bd70      	pop	{r4, r5, r6, pc}
 8000550:	3df00000 	.word	0x3df00000
 8000554:	41f00000 	.word	0x41f00000

08000558 <__aeabi_l2d>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	0006      	movs	r6, r0
 800055c:	0008      	movs	r0, r1
 800055e:	f001 ffe7 	bl	8002530 <__aeabi_i2d>
 8000562:	2200      	movs	r2, #0
 8000564:	4b06      	ldr	r3, [pc, #24]	@ (8000580 <__aeabi_l2d+0x28>)
 8000566:	f001 f921 	bl	80017ac <__aeabi_dmul>
 800056a:	000d      	movs	r5, r1
 800056c:	0004      	movs	r4, r0
 800056e:	0030      	movs	r0, r6
 8000570:	f002 f80c 	bl	800258c <__aeabi_ui2d>
 8000574:	002b      	movs	r3, r5
 8000576:	0022      	movs	r2, r4
 8000578:	f000 f970 	bl	800085c <__aeabi_dadd>
 800057c:	bd70      	pop	{r4, r5, r6, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)
 8000580:	41f00000 	.word	0x41f00000

08000584 <__aeabi_fdiv>:
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000586:	464f      	mov	r7, r9
 8000588:	4646      	mov	r6, r8
 800058a:	46d6      	mov	lr, sl
 800058c:	0244      	lsls	r4, r0, #9
 800058e:	b5c0      	push	{r6, r7, lr}
 8000590:	0047      	lsls	r7, r0, #1
 8000592:	1c0e      	adds	r6, r1, #0
 8000594:	0a64      	lsrs	r4, r4, #9
 8000596:	0e3f      	lsrs	r7, r7, #24
 8000598:	0fc5      	lsrs	r5, r0, #31
 800059a:	2f00      	cmp	r7, #0
 800059c:	d03c      	beq.n	8000618 <__aeabi_fdiv+0x94>
 800059e:	2fff      	cmp	r7, #255	@ 0xff
 80005a0:	d042      	beq.n	8000628 <__aeabi_fdiv+0xa4>
 80005a2:	2300      	movs	r3, #0
 80005a4:	2280      	movs	r2, #128	@ 0x80
 80005a6:	4699      	mov	r9, r3
 80005a8:	469a      	mov	sl, r3
 80005aa:	00e4      	lsls	r4, r4, #3
 80005ac:	04d2      	lsls	r2, r2, #19
 80005ae:	4314      	orrs	r4, r2
 80005b0:	3f7f      	subs	r7, #127	@ 0x7f
 80005b2:	0273      	lsls	r3, r6, #9
 80005b4:	0a5b      	lsrs	r3, r3, #9
 80005b6:	4698      	mov	r8, r3
 80005b8:	0073      	lsls	r3, r6, #1
 80005ba:	0e1b      	lsrs	r3, r3, #24
 80005bc:	0ff6      	lsrs	r6, r6, #31
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d01b      	beq.n	80005fa <__aeabi_fdiv+0x76>
 80005c2:	2bff      	cmp	r3, #255	@ 0xff
 80005c4:	d013      	beq.n	80005ee <__aeabi_fdiv+0x6a>
 80005c6:	4642      	mov	r2, r8
 80005c8:	2180      	movs	r1, #128	@ 0x80
 80005ca:	00d2      	lsls	r2, r2, #3
 80005cc:	04c9      	lsls	r1, r1, #19
 80005ce:	4311      	orrs	r1, r2
 80005d0:	4688      	mov	r8, r1
 80005d2:	2000      	movs	r0, #0
 80005d4:	3b7f      	subs	r3, #127	@ 0x7f
 80005d6:	0029      	movs	r1, r5
 80005d8:	1aff      	subs	r7, r7, r3
 80005da:	464b      	mov	r3, r9
 80005dc:	4071      	eors	r1, r6
 80005de:	b2c9      	uxtb	r1, r1
 80005e0:	2b0f      	cmp	r3, #15
 80005e2:	d900      	bls.n	80005e6 <__aeabi_fdiv+0x62>
 80005e4:	e0b5      	b.n	8000752 <__aeabi_fdiv+0x1ce>
 80005e6:	4a74      	ldr	r2, [pc, #464]	@ (80007b8 <__aeabi_fdiv+0x234>)
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	58d3      	ldr	r3, [r2, r3]
 80005ec:	469f      	mov	pc, r3
 80005ee:	4643      	mov	r3, r8
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d13f      	bne.n	8000674 <__aeabi_fdiv+0xf0>
 80005f4:	3fff      	subs	r7, #255	@ 0xff
 80005f6:	3302      	adds	r3, #2
 80005f8:	e003      	b.n	8000602 <__aeabi_fdiv+0x7e>
 80005fa:	4643      	mov	r3, r8
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d12d      	bne.n	800065c <__aeabi_fdiv+0xd8>
 8000600:	2301      	movs	r3, #1
 8000602:	0029      	movs	r1, r5
 8000604:	464a      	mov	r2, r9
 8000606:	4071      	eors	r1, r6
 8000608:	b2c9      	uxtb	r1, r1
 800060a:	431a      	orrs	r2, r3
 800060c:	2a0e      	cmp	r2, #14
 800060e:	d838      	bhi.n	8000682 <__aeabi_fdiv+0xfe>
 8000610:	486a      	ldr	r0, [pc, #424]	@ (80007bc <__aeabi_fdiv+0x238>)
 8000612:	0092      	lsls	r2, r2, #2
 8000614:	5882      	ldr	r2, [r0, r2]
 8000616:	4697      	mov	pc, r2
 8000618:	2c00      	cmp	r4, #0
 800061a:	d113      	bne.n	8000644 <__aeabi_fdiv+0xc0>
 800061c:	2304      	movs	r3, #4
 800061e:	4699      	mov	r9, r3
 8000620:	3b03      	subs	r3, #3
 8000622:	2700      	movs	r7, #0
 8000624:	469a      	mov	sl, r3
 8000626:	e7c4      	b.n	80005b2 <__aeabi_fdiv+0x2e>
 8000628:	2c00      	cmp	r4, #0
 800062a:	d105      	bne.n	8000638 <__aeabi_fdiv+0xb4>
 800062c:	2308      	movs	r3, #8
 800062e:	4699      	mov	r9, r3
 8000630:	3b06      	subs	r3, #6
 8000632:	27ff      	movs	r7, #255	@ 0xff
 8000634:	469a      	mov	sl, r3
 8000636:	e7bc      	b.n	80005b2 <__aeabi_fdiv+0x2e>
 8000638:	230c      	movs	r3, #12
 800063a:	4699      	mov	r9, r3
 800063c:	3b09      	subs	r3, #9
 800063e:	27ff      	movs	r7, #255	@ 0xff
 8000640:	469a      	mov	sl, r3
 8000642:	e7b6      	b.n	80005b2 <__aeabi_fdiv+0x2e>
 8000644:	0020      	movs	r0, r4
 8000646:	f002 f891 	bl	800276c <__clzsi2>
 800064a:	2776      	movs	r7, #118	@ 0x76
 800064c:	1f43      	subs	r3, r0, #5
 800064e:	409c      	lsls	r4, r3
 8000650:	2300      	movs	r3, #0
 8000652:	427f      	negs	r7, r7
 8000654:	4699      	mov	r9, r3
 8000656:	469a      	mov	sl, r3
 8000658:	1a3f      	subs	r7, r7, r0
 800065a:	e7aa      	b.n	80005b2 <__aeabi_fdiv+0x2e>
 800065c:	4640      	mov	r0, r8
 800065e:	f002 f885 	bl	800276c <__clzsi2>
 8000662:	4642      	mov	r2, r8
 8000664:	1f43      	subs	r3, r0, #5
 8000666:	409a      	lsls	r2, r3
 8000668:	2376      	movs	r3, #118	@ 0x76
 800066a:	425b      	negs	r3, r3
 800066c:	1a1b      	subs	r3, r3, r0
 800066e:	4690      	mov	r8, r2
 8000670:	2000      	movs	r0, #0
 8000672:	e7b0      	b.n	80005d6 <__aeabi_fdiv+0x52>
 8000674:	2303      	movs	r3, #3
 8000676:	464a      	mov	r2, r9
 8000678:	431a      	orrs	r2, r3
 800067a:	4691      	mov	r9, r2
 800067c:	2003      	movs	r0, #3
 800067e:	33fc      	adds	r3, #252	@ 0xfc
 8000680:	e7a9      	b.n	80005d6 <__aeabi_fdiv+0x52>
 8000682:	000d      	movs	r5, r1
 8000684:	20ff      	movs	r0, #255	@ 0xff
 8000686:	2200      	movs	r2, #0
 8000688:	05c0      	lsls	r0, r0, #23
 800068a:	07ed      	lsls	r5, r5, #31
 800068c:	4310      	orrs	r0, r2
 800068e:	4328      	orrs	r0, r5
 8000690:	bce0      	pop	{r5, r6, r7}
 8000692:	46ba      	mov	sl, r7
 8000694:	46b1      	mov	r9, r6
 8000696:	46a8      	mov	r8, r5
 8000698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800069a:	000d      	movs	r5, r1
 800069c:	2000      	movs	r0, #0
 800069e:	2200      	movs	r2, #0
 80006a0:	e7f2      	b.n	8000688 <__aeabi_fdiv+0x104>
 80006a2:	4653      	mov	r3, sl
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	d0ed      	beq.n	8000684 <__aeabi_fdiv+0x100>
 80006a8:	2b03      	cmp	r3, #3
 80006aa:	d033      	beq.n	8000714 <__aeabi_fdiv+0x190>
 80006ac:	46a0      	mov	r8, r4
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d105      	bne.n	80006be <__aeabi_fdiv+0x13a>
 80006b2:	2000      	movs	r0, #0
 80006b4:	2200      	movs	r2, #0
 80006b6:	e7e7      	b.n	8000688 <__aeabi_fdiv+0x104>
 80006b8:	0035      	movs	r5, r6
 80006ba:	2803      	cmp	r0, #3
 80006bc:	d07a      	beq.n	80007b4 <__aeabi_fdiv+0x230>
 80006be:	003b      	movs	r3, r7
 80006c0:	337f      	adds	r3, #127	@ 0x7f
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	dd2d      	ble.n	8000722 <__aeabi_fdiv+0x19e>
 80006c6:	4642      	mov	r2, r8
 80006c8:	0752      	lsls	r2, r2, #29
 80006ca:	d007      	beq.n	80006dc <__aeabi_fdiv+0x158>
 80006cc:	220f      	movs	r2, #15
 80006ce:	4641      	mov	r1, r8
 80006d0:	400a      	ands	r2, r1
 80006d2:	2a04      	cmp	r2, #4
 80006d4:	d002      	beq.n	80006dc <__aeabi_fdiv+0x158>
 80006d6:	2204      	movs	r2, #4
 80006d8:	4694      	mov	ip, r2
 80006da:	44e0      	add	r8, ip
 80006dc:	4642      	mov	r2, r8
 80006de:	0112      	lsls	r2, r2, #4
 80006e0:	d505      	bpl.n	80006ee <__aeabi_fdiv+0x16a>
 80006e2:	4642      	mov	r2, r8
 80006e4:	4b36      	ldr	r3, [pc, #216]	@ (80007c0 <__aeabi_fdiv+0x23c>)
 80006e6:	401a      	ands	r2, r3
 80006e8:	003b      	movs	r3, r7
 80006ea:	4690      	mov	r8, r2
 80006ec:	3380      	adds	r3, #128	@ 0x80
 80006ee:	2bfe      	cmp	r3, #254	@ 0xfe
 80006f0:	dcc8      	bgt.n	8000684 <__aeabi_fdiv+0x100>
 80006f2:	4642      	mov	r2, r8
 80006f4:	0192      	lsls	r2, r2, #6
 80006f6:	0a52      	lsrs	r2, r2, #9
 80006f8:	b2d8      	uxtb	r0, r3
 80006fa:	e7c5      	b.n	8000688 <__aeabi_fdiv+0x104>
 80006fc:	2280      	movs	r2, #128	@ 0x80
 80006fe:	2500      	movs	r5, #0
 8000700:	20ff      	movs	r0, #255	@ 0xff
 8000702:	03d2      	lsls	r2, r2, #15
 8000704:	e7c0      	b.n	8000688 <__aeabi_fdiv+0x104>
 8000706:	2280      	movs	r2, #128	@ 0x80
 8000708:	03d2      	lsls	r2, r2, #15
 800070a:	4214      	tst	r4, r2
 800070c:	d002      	beq.n	8000714 <__aeabi_fdiv+0x190>
 800070e:	4643      	mov	r3, r8
 8000710:	4213      	tst	r3, r2
 8000712:	d049      	beq.n	80007a8 <__aeabi_fdiv+0x224>
 8000714:	2280      	movs	r2, #128	@ 0x80
 8000716:	03d2      	lsls	r2, r2, #15
 8000718:	4322      	orrs	r2, r4
 800071a:	0252      	lsls	r2, r2, #9
 800071c:	20ff      	movs	r0, #255	@ 0xff
 800071e:	0a52      	lsrs	r2, r2, #9
 8000720:	e7b2      	b.n	8000688 <__aeabi_fdiv+0x104>
 8000722:	2201      	movs	r2, #1
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	2b1b      	cmp	r3, #27
 8000728:	dcc3      	bgt.n	80006b2 <__aeabi_fdiv+0x12e>
 800072a:	4642      	mov	r2, r8
 800072c:	40da      	lsrs	r2, r3
 800072e:	4643      	mov	r3, r8
 8000730:	379e      	adds	r7, #158	@ 0x9e
 8000732:	40bb      	lsls	r3, r7
 8000734:	1e59      	subs	r1, r3, #1
 8000736:	418b      	sbcs	r3, r1
 8000738:	431a      	orrs	r2, r3
 800073a:	0753      	lsls	r3, r2, #29
 800073c:	d004      	beq.n	8000748 <__aeabi_fdiv+0x1c4>
 800073e:	230f      	movs	r3, #15
 8000740:	4013      	ands	r3, r2
 8000742:	2b04      	cmp	r3, #4
 8000744:	d000      	beq.n	8000748 <__aeabi_fdiv+0x1c4>
 8000746:	3204      	adds	r2, #4
 8000748:	0153      	lsls	r3, r2, #5
 800074a:	d529      	bpl.n	80007a0 <__aeabi_fdiv+0x21c>
 800074c:	2001      	movs	r0, #1
 800074e:	2200      	movs	r2, #0
 8000750:	e79a      	b.n	8000688 <__aeabi_fdiv+0x104>
 8000752:	4642      	mov	r2, r8
 8000754:	0163      	lsls	r3, r4, #5
 8000756:	0155      	lsls	r5, r2, #5
 8000758:	42ab      	cmp	r3, r5
 800075a:	d215      	bcs.n	8000788 <__aeabi_fdiv+0x204>
 800075c:	201b      	movs	r0, #27
 800075e:	2200      	movs	r2, #0
 8000760:	3f01      	subs	r7, #1
 8000762:	2601      	movs	r6, #1
 8000764:	001c      	movs	r4, r3
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	2c00      	cmp	r4, #0
 800076c:	db01      	blt.n	8000772 <__aeabi_fdiv+0x1ee>
 800076e:	429d      	cmp	r5, r3
 8000770:	d801      	bhi.n	8000776 <__aeabi_fdiv+0x1f2>
 8000772:	1b5b      	subs	r3, r3, r5
 8000774:	4332      	orrs	r2, r6
 8000776:	3801      	subs	r0, #1
 8000778:	2800      	cmp	r0, #0
 800077a:	d1f3      	bne.n	8000764 <__aeabi_fdiv+0x1e0>
 800077c:	1e58      	subs	r0, r3, #1
 800077e:	4183      	sbcs	r3, r0
 8000780:	4313      	orrs	r3, r2
 8000782:	4698      	mov	r8, r3
 8000784:	000d      	movs	r5, r1
 8000786:	e79a      	b.n	80006be <__aeabi_fdiv+0x13a>
 8000788:	201a      	movs	r0, #26
 800078a:	2201      	movs	r2, #1
 800078c:	1b5b      	subs	r3, r3, r5
 800078e:	e7e8      	b.n	8000762 <__aeabi_fdiv+0x1de>
 8000790:	3b02      	subs	r3, #2
 8000792:	425a      	negs	r2, r3
 8000794:	4153      	adcs	r3, r2
 8000796:	425b      	negs	r3, r3
 8000798:	0035      	movs	r5, r6
 800079a:	2200      	movs	r2, #0
 800079c:	b2d8      	uxtb	r0, r3
 800079e:	e773      	b.n	8000688 <__aeabi_fdiv+0x104>
 80007a0:	0192      	lsls	r2, r2, #6
 80007a2:	2000      	movs	r0, #0
 80007a4:	0a52      	lsrs	r2, r2, #9
 80007a6:	e76f      	b.n	8000688 <__aeabi_fdiv+0x104>
 80007a8:	431a      	orrs	r2, r3
 80007aa:	0252      	lsls	r2, r2, #9
 80007ac:	0035      	movs	r5, r6
 80007ae:	20ff      	movs	r0, #255	@ 0xff
 80007b0:	0a52      	lsrs	r2, r2, #9
 80007b2:	e769      	b.n	8000688 <__aeabi_fdiv+0x104>
 80007b4:	4644      	mov	r4, r8
 80007b6:	e7ad      	b.n	8000714 <__aeabi_fdiv+0x190>
 80007b8:	0800a640 	.word	0x0800a640
 80007bc:	0800a680 	.word	0x0800a680
 80007c0:	f7ffffff 	.word	0xf7ffffff

080007c4 <__aeabi_i2f>:
 80007c4:	b570      	push	{r4, r5, r6, lr}
 80007c6:	2800      	cmp	r0, #0
 80007c8:	d013      	beq.n	80007f2 <__aeabi_i2f+0x2e>
 80007ca:	17c3      	asrs	r3, r0, #31
 80007cc:	18c5      	adds	r5, r0, r3
 80007ce:	405d      	eors	r5, r3
 80007d0:	0fc4      	lsrs	r4, r0, #31
 80007d2:	0028      	movs	r0, r5
 80007d4:	f001 ffca 	bl	800276c <__clzsi2>
 80007d8:	239e      	movs	r3, #158	@ 0x9e
 80007da:	0001      	movs	r1, r0
 80007dc:	1a1b      	subs	r3, r3, r0
 80007de:	2b96      	cmp	r3, #150	@ 0x96
 80007e0:	dc0f      	bgt.n	8000802 <__aeabi_i2f+0x3e>
 80007e2:	2808      	cmp	r0, #8
 80007e4:	d034      	beq.n	8000850 <__aeabi_i2f+0x8c>
 80007e6:	3908      	subs	r1, #8
 80007e8:	408d      	lsls	r5, r1
 80007ea:	026d      	lsls	r5, r5, #9
 80007ec:	0a6d      	lsrs	r5, r5, #9
 80007ee:	b2d8      	uxtb	r0, r3
 80007f0:	e002      	b.n	80007f8 <__aeabi_i2f+0x34>
 80007f2:	2400      	movs	r4, #0
 80007f4:	2000      	movs	r0, #0
 80007f6:	2500      	movs	r5, #0
 80007f8:	05c0      	lsls	r0, r0, #23
 80007fa:	4328      	orrs	r0, r5
 80007fc:	07e4      	lsls	r4, r4, #31
 80007fe:	4320      	orrs	r0, r4
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	2b99      	cmp	r3, #153	@ 0x99
 8000804:	dc16      	bgt.n	8000834 <__aeabi_i2f+0x70>
 8000806:	1f42      	subs	r2, r0, #5
 8000808:	2805      	cmp	r0, #5
 800080a:	d000      	beq.n	800080e <__aeabi_i2f+0x4a>
 800080c:	4095      	lsls	r5, r2
 800080e:	002a      	movs	r2, r5
 8000810:	4811      	ldr	r0, [pc, #68]	@ (8000858 <__aeabi_i2f+0x94>)
 8000812:	4002      	ands	r2, r0
 8000814:	076e      	lsls	r6, r5, #29
 8000816:	d009      	beq.n	800082c <__aeabi_i2f+0x68>
 8000818:	260f      	movs	r6, #15
 800081a:	4035      	ands	r5, r6
 800081c:	2d04      	cmp	r5, #4
 800081e:	d005      	beq.n	800082c <__aeabi_i2f+0x68>
 8000820:	3204      	adds	r2, #4
 8000822:	0155      	lsls	r5, r2, #5
 8000824:	d502      	bpl.n	800082c <__aeabi_i2f+0x68>
 8000826:	239f      	movs	r3, #159	@ 0x9f
 8000828:	4002      	ands	r2, r0
 800082a:	1a5b      	subs	r3, r3, r1
 800082c:	0192      	lsls	r2, r2, #6
 800082e:	0a55      	lsrs	r5, r2, #9
 8000830:	b2d8      	uxtb	r0, r3
 8000832:	e7e1      	b.n	80007f8 <__aeabi_i2f+0x34>
 8000834:	2205      	movs	r2, #5
 8000836:	1a12      	subs	r2, r2, r0
 8000838:	0028      	movs	r0, r5
 800083a:	40d0      	lsrs	r0, r2
 800083c:	0002      	movs	r2, r0
 800083e:	0008      	movs	r0, r1
 8000840:	301b      	adds	r0, #27
 8000842:	4085      	lsls	r5, r0
 8000844:	0028      	movs	r0, r5
 8000846:	1e45      	subs	r5, r0, #1
 8000848:	41a8      	sbcs	r0, r5
 800084a:	4302      	orrs	r2, r0
 800084c:	0015      	movs	r5, r2
 800084e:	e7de      	b.n	800080e <__aeabi_i2f+0x4a>
 8000850:	026d      	lsls	r5, r5, #9
 8000852:	2096      	movs	r0, #150	@ 0x96
 8000854:	0a6d      	lsrs	r5, r5, #9
 8000856:	e7cf      	b.n	80007f8 <__aeabi_i2f+0x34>
 8000858:	fbffffff 	.word	0xfbffffff

0800085c <__aeabi_dadd>:
 800085c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800085e:	4657      	mov	r7, sl
 8000860:	464e      	mov	r6, r9
 8000862:	4645      	mov	r5, r8
 8000864:	46de      	mov	lr, fp
 8000866:	b5e0      	push	{r5, r6, r7, lr}
 8000868:	b083      	sub	sp, #12
 800086a:	9000      	str	r0, [sp, #0]
 800086c:	9101      	str	r1, [sp, #4]
 800086e:	030c      	lsls	r4, r1, #12
 8000870:	004f      	lsls	r7, r1, #1
 8000872:	0fce      	lsrs	r6, r1, #31
 8000874:	0a61      	lsrs	r1, r4, #9
 8000876:	9c00      	ldr	r4, [sp, #0]
 8000878:	031d      	lsls	r5, r3, #12
 800087a:	0f64      	lsrs	r4, r4, #29
 800087c:	430c      	orrs	r4, r1
 800087e:	9900      	ldr	r1, [sp, #0]
 8000880:	9200      	str	r2, [sp, #0]
 8000882:	9301      	str	r3, [sp, #4]
 8000884:	00c8      	lsls	r0, r1, #3
 8000886:	0059      	lsls	r1, r3, #1
 8000888:	0d4b      	lsrs	r3, r1, #21
 800088a:	4699      	mov	r9, r3
 800088c:	9a00      	ldr	r2, [sp, #0]
 800088e:	9b01      	ldr	r3, [sp, #4]
 8000890:	0a6d      	lsrs	r5, r5, #9
 8000892:	0fd9      	lsrs	r1, r3, #31
 8000894:	0f53      	lsrs	r3, r2, #29
 8000896:	432b      	orrs	r3, r5
 8000898:	469a      	mov	sl, r3
 800089a:	9b00      	ldr	r3, [sp, #0]
 800089c:	0d7f      	lsrs	r7, r7, #21
 800089e:	00da      	lsls	r2, r3, #3
 80008a0:	4694      	mov	ip, r2
 80008a2:	464a      	mov	r2, r9
 80008a4:	46b0      	mov	r8, r6
 80008a6:	1aba      	subs	r2, r7, r2
 80008a8:	428e      	cmp	r6, r1
 80008aa:	d100      	bne.n	80008ae <__aeabi_dadd+0x52>
 80008ac:	e0b0      	b.n	8000a10 <__aeabi_dadd+0x1b4>
 80008ae:	2a00      	cmp	r2, #0
 80008b0:	dc00      	bgt.n	80008b4 <__aeabi_dadd+0x58>
 80008b2:	e078      	b.n	80009a6 <__aeabi_dadd+0x14a>
 80008b4:	4649      	mov	r1, r9
 80008b6:	2900      	cmp	r1, #0
 80008b8:	d100      	bne.n	80008bc <__aeabi_dadd+0x60>
 80008ba:	e0e9      	b.n	8000a90 <__aeabi_dadd+0x234>
 80008bc:	49c9      	ldr	r1, [pc, #804]	@ (8000be4 <__aeabi_dadd+0x388>)
 80008be:	428f      	cmp	r7, r1
 80008c0:	d100      	bne.n	80008c4 <__aeabi_dadd+0x68>
 80008c2:	e195      	b.n	8000bf0 <__aeabi_dadd+0x394>
 80008c4:	2501      	movs	r5, #1
 80008c6:	2a38      	cmp	r2, #56	@ 0x38
 80008c8:	dc16      	bgt.n	80008f8 <__aeabi_dadd+0x9c>
 80008ca:	2180      	movs	r1, #128	@ 0x80
 80008cc:	4653      	mov	r3, sl
 80008ce:	0409      	lsls	r1, r1, #16
 80008d0:	430b      	orrs	r3, r1
 80008d2:	469a      	mov	sl, r3
 80008d4:	2a1f      	cmp	r2, #31
 80008d6:	dd00      	ble.n	80008da <__aeabi_dadd+0x7e>
 80008d8:	e1e7      	b.n	8000caa <__aeabi_dadd+0x44e>
 80008da:	2120      	movs	r1, #32
 80008dc:	4655      	mov	r5, sl
 80008de:	1a8b      	subs	r3, r1, r2
 80008e0:	4661      	mov	r1, ip
 80008e2:	409d      	lsls	r5, r3
 80008e4:	40d1      	lsrs	r1, r2
 80008e6:	430d      	orrs	r5, r1
 80008e8:	4661      	mov	r1, ip
 80008ea:	4099      	lsls	r1, r3
 80008ec:	1e4b      	subs	r3, r1, #1
 80008ee:	4199      	sbcs	r1, r3
 80008f0:	4653      	mov	r3, sl
 80008f2:	40d3      	lsrs	r3, r2
 80008f4:	430d      	orrs	r5, r1
 80008f6:	1ae4      	subs	r4, r4, r3
 80008f8:	1b45      	subs	r5, r0, r5
 80008fa:	42a8      	cmp	r0, r5
 80008fc:	4180      	sbcs	r0, r0
 80008fe:	4240      	negs	r0, r0
 8000900:	1a24      	subs	r4, r4, r0
 8000902:	0223      	lsls	r3, r4, #8
 8000904:	d400      	bmi.n	8000908 <__aeabi_dadd+0xac>
 8000906:	e10f      	b.n	8000b28 <__aeabi_dadd+0x2cc>
 8000908:	0264      	lsls	r4, r4, #9
 800090a:	0a64      	lsrs	r4, r4, #9
 800090c:	2c00      	cmp	r4, #0
 800090e:	d100      	bne.n	8000912 <__aeabi_dadd+0xb6>
 8000910:	e139      	b.n	8000b86 <__aeabi_dadd+0x32a>
 8000912:	0020      	movs	r0, r4
 8000914:	f001 ff2a 	bl	800276c <__clzsi2>
 8000918:	0003      	movs	r3, r0
 800091a:	3b08      	subs	r3, #8
 800091c:	2120      	movs	r1, #32
 800091e:	0028      	movs	r0, r5
 8000920:	1aca      	subs	r2, r1, r3
 8000922:	40d0      	lsrs	r0, r2
 8000924:	409c      	lsls	r4, r3
 8000926:	0002      	movs	r2, r0
 8000928:	409d      	lsls	r5, r3
 800092a:	4322      	orrs	r2, r4
 800092c:	429f      	cmp	r7, r3
 800092e:	dd00      	ble.n	8000932 <__aeabi_dadd+0xd6>
 8000930:	e173      	b.n	8000c1a <__aeabi_dadd+0x3be>
 8000932:	1bd8      	subs	r0, r3, r7
 8000934:	3001      	adds	r0, #1
 8000936:	1a09      	subs	r1, r1, r0
 8000938:	002c      	movs	r4, r5
 800093a:	408d      	lsls	r5, r1
 800093c:	40c4      	lsrs	r4, r0
 800093e:	1e6b      	subs	r3, r5, #1
 8000940:	419d      	sbcs	r5, r3
 8000942:	0013      	movs	r3, r2
 8000944:	40c2      	lsrs	r2, r0
 8000946:	408b      	lsls	r3, r1
 8000948:	4325      	orrs	r5, r4
 800094a:	2700      	movs	r7, #0
 800094c:	0014      	movs	r4, r2
 800094e:	431d      	orrs	r5, r3
 8000950:	076b      	lsls	r3, r5, #29
 8000952:	d009      	beq.n	8000968 <__aeabi_dadd+0x10c>
 8000954:	230f      	movs	r3, #15
 8000956:	402b      	ands	r3, r5
 8000958:	2b04      	cmp	r3, #4
 800095a:	d005      	beq.n	8000968 <__aeabi_dadd+0x10c>
 800095c:	1d2b      	adds	r3, r5, #4
 800095e:	42ab      	cmp	r3, r5
 8000960:	41ad      	sbcs	r5, r5
 8000962:	426d      	negs	r5, r5
 8000964:	1964      	adds	r4, r4, r5
 8000966:	001d      	movs	r5, r3
 8000968:	0223      	lsls	r3, r4, #8
 800096a:	d400      	bmi.n	800096e <__aeabi_dadd+0x112>
 800096c:	e12d      	b.n	8000bca <__aeabi_dadd+0x36e>
 800096e:	4a9d      	ldr	r2, [pc, #628]	@ (8000be4 <__aeabi_dadd+0x388>)
 8000970:	3701      	adds	r7, #1
 8000972:	4297      	cmp	r7, r2
 8000974:	d100      	bne.n	8000978 <__aeabi_dadd+0x11c>
 8000976:	e0d3      	b.n	8000b20 <__aeabi_dadd+0x2c4>
 8000978:	4646      	mov	r6, r8
 800097a:	499b      	ldr	r1, [pc, #620]	@ (8000be8 <__aeabi_dadd+0x38c>)
 800097c:	08ed      	lsrs	r5, r5, #3
 800097e:	4021      	ands	r1, r4
 8000980:	074a      	lsls	r2, r1, #29
 8000982:	432a      	orrs	r2, r5
 8000984:	057c      	lsls	r4, r7, #21
 8000986:	024d      	lsls	r5, r1, #9
 8000988:	0b2d      	lsrs	r5, r5, #12
 800098a:	0d64      	lsrs	r4, r4, #21
 800098c:	0524      	lsls	r4, r4, #20
 800098e:	432c      	orrs	r4, r5
 8000990:	07f6      	lsls	r6, r6, #31
 8000992:	4334      	orrs	r4, r6
 8000994:	0010      	movs	r0, r2
 8000996:	0021      	movs	r1, r4
 8000998:	b003      	add	sp, #12
 800099a:	bcf0      	pop	{r4, r5, r6, r7}
 800099c:	46bb      	mov	fp, r7
 800099e:	46b2      	mov	sl, r6
 80009a0:	46a9      	mov	r9, r5
 80009a2:	46a0      	mov	r8, r4
 80009a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009a6:	2a00      	cmp	r2, #0
 80009a8:	d100      	bne.n	80009ac <__aeabi_dadd+0x150>
 80009aa:	e084      	b.n	8000ab6 <__aeabi_dadd+0x25a>
 80009ac:	464a      	mov	r2, r9
 80009ae:	1bd2      	subs	r2, r2, r7
 80009b0:	2f00      	cmp	r7, #0
 80009b2:	d000      	beq.n	80009b6 <__aeabi_dadd+0x15a>
 80009b4:	e16d      	b.n	8000c92 <__aeabi_dadd+0x436>
 80009b6:	0025      	movs	r5, r4
 80009b8:	4305      	orrs	r5, r0
 80009ba:	d100      	bne.n	80009be <__aeabi_dadd+0x162>
 80009bc:	e127      	b.n	8000c0e <__aeabi_dadd+0x3b2>
 80009be:	1e56      	subs	r6, r2, #1
 80009c0:	2a01      	cmp	r2, #1
 80009c2:	d100      	bne.n	80009c6 <__aeabi_dadd+0x16a>
 80009c4:	e23b      	b.n	8000e3e <__aeabi_dadd+0x5e2>
 80009c6:	4d87      	ldr	r5, [pc, #540]	@ (8000be4 <__aeabi_dadd+0x388>)
 80009c8:	42aa      	cmp	r2, r5
 80009ca:	d100      	bne.n	80009ce <__aeabi_dadd+0x172>
 80009cc:	e26a      	b.n	8000ea4 <__aeabi_dadd+0x648>
 80009ce:	2501      	movs	r5, #1
 80009d0:	2e38      	cmp	r6, #56	@ 0x38
 80009d2:	dc12      	bgt.n	80009fa <__aeabi_dadd+0x19e>
 80009d4:	0032      	movs	r2, r6
 80009d6:	2a1f      	cmp	r2, #31
 80009d8:	dd00      	ble.n	80009dc <__aeabi_dadd+0x180>
 80009da:	e1f8      	b.n	8000dce <__aeabi_dadd+0x572>
 80009dc:	2620      	movs	r6, #32
 80009de:	0025      	movs	r5, r4
 80009e0:	1ab6      	subs	r6, r6, r2
 80009e2:	0007      	movs	r7, r0
 80009e4:	4653      	mov	r3, sl
 80009e6:	40b0      	lsls	r0, r6
 80009e8:	40d4      	lsrs	r4, r2
 80009ea:	40b5      	lsls	r5, r6
 80009ec:	40d7      	lsrs	r7, r2
 80009ee:	1e46      	subs	r6, r0, #1
 80009f0:	41b0      	sbcs	r0, r6
 80009f2:	1b1b      	subs	r3, r3, r4
 80009f4:	469a      	mov	sl, r3
 80009f6:	433d      	orrs	r5, r7
 80009f8:	4305      	orrs	r5, r0
 80009fa:	4662      	mov	r2, ip
 80009fc:	1b55      	subs	r5, r2, r5
 80009fe:	45ac      	cmp	ip, r5
 8000a00:	4192      	sbcs	r2, r2
 8000a02:	4653      	mov	r3, sl
 8000a04:	4252      	negs	r2, r2
 8000a06:	000e      	movs	r6, r1
 8000a08:	464f      	mov	r7, r9
 8000a0a:	4688      	mov	r8, r1
 8000a0c:	1a9c      	subs	r4, r3, r2
 8000a0e:	e778      	b.n	8000902 <__aeabi_dadd+0xa6>
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	dc00      	bgt.n	8000a16 <__aeabi_dadd+0x1ba>
 8000a14:	e08e      	b.n	8000b34 <__aeabi_dadd+0x2d8>
 8000a16:	4649      	mov	r1, r9
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	d175      	bne.n	8000b08 <__aeabi_dadd+0x2ac>
 8000a1c:	4661      	mov	r1, ip
 8000a1e:	4653      	mov	r3, sl
 8000a20:	4319      	orrs	r1, r3
 8000a22:	d100      	bne.n	8000a26 <__aeabi_dadd+0x1ca>
 8000a24:	e0f6      	b.n	8000c14 <__aeabi_dadd+0x3b8>
 8000a26:	1e51      	subs	r1, r2, #1
 8000a28:	2a01      	cmp	r2, #1
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_dadd+0x1d2>
 8000a2c:	e191      	b.n	8000d52 <__aeabi_dadd+0x4f6>
 8000a2e:	4d6d      	ldr	r5, [pc, #436]	@ (8000be4 <__aeabi_dadd+0x388>)
 8000a30:	42aa      	cmp	r2, r5
 8000a32:	d100      	bne.n	8000a36 <__aeabi_dadd+0x1da>
 8000a34:	e0dc      	b.n	8000bf0 <__aeabi_dadd+0x394>
 8000a36:	2501      	movs	r5, #1
 8000a38:	2938      	cmp	r1, #56	@ 0x38
 8000a3a:	dc14      	bgt.n	8000a66 <__aeabi_dadd+0x20a>
 8000a3c:	000a      	movs	r2, r1
 8000a3e:	2a1f      	cmp	r2, #31
 8000a40:	dd00      	ble.n	8000a44 <__aeabi_dadd+0x1e8>
 8000a42:	e1a2      	b.n	8000d8a <__aeabi_dadd+0x52e>
 8000a44:	2120      	movs	r1, #32
 8000a46:	4653      	mov	r3, sl
 8000a48:	1a89      	subs	r1, r1, r2
 8000a4a:	408b      	lsls	r3, r1
 8000a4c:	001d      	movs	r5, r3
 8000a4e:	4663      	mov	r3, ip
 8000a50:	40d3      	lsrs	r3, r2
 8000a52:	431d      	orrs	r5, r3
 8000a54:	4663      	mov	r3, ip
 8000a56:	408b      	lsls	r3, r1
 8000a58:	0019      	movs	r1, r3
 8000a5a:	1e4b      	subs	r3, r1, #1
 8000a5c:	4199      	sbcs	r1, r3
 8000a5e:	4653      	mov	r3, sl
 8000a60:	40d3      	lsrs	r3, r2
 8000a62:	430d      	orrs	r5, r1
 8000a64:	18e4      	adds	r4, r4, r3
 8000a66:	182d      	adds	r5, r5, r0
 8000a68:	4285      	cmp	r5, r0
 8000a6a:	4180      	sbcs	r0, r0
 8000a6c:	4240      	negs	r0, r0
 8000a6e:	1824      	adds	r4, r4, r0
 8000a70:	0223      	lsls	r3, r4, #8
 8000a72:	d559      	bpl.n	8000b28 <__aeabi_dadd+0x2cc>
 8000a74:	4b5b      	ldr	r3, [pc, #364]	@ (8000be4 <__aeabi_dadd+0x388>)
 8000a76:	3701      	adds	r7, #1
 8000a78:	429f      	cmp	r7, r3
 8000a7a:	d051      	beq.n	8000b20 <__aeabi_dadd+0x2c4>
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	4b5a      	ldr	r3, [pc, #360]	@ (8000be8 <__aeabi_dadd+0x38c>)
 8000a80:	086a      	lsrs	r2, r5, #1
 8000a82:	401c      	ands	r4, r3
 8000a84:	4029      	ands	r1, r5
 8000a86:	430a      	orrs	r2, r1
 8000a88:	07e5      	lsls	r5, r4, #31
 8000a8a:	4315      	orrs	r5, r2
 8000a8c:	0864      	lsrs	r4, r4, #1
 8000a8e:	e75f      	b.n	8000950 <__aeabi_dadd+0xf4>
 8000a90:	4661      	mov	r1, ip
 8000a92:	4653      	mov	r3, sl
 8000a94:	4319      	orrs	r1, r3
 8000a96:	d100      	bne.n	8000a9a <__aeabi_dadd+0x23e>
 8000a98:	e0bc      	b.n	8000c14 <__aeabi_dadd+0x3b8>
 8000a9a:	1e51      	subs	r1, r2, #1
 8000a9c:	2a01      	cmp	r2, #1
 8000a9e:	d100      	bne.n	8000aa2 <__aeabi_dadd+0x246>
 8000aa0:	e164      	b.n	8000d6c <__aeabi_dadd+0x510>
 8000aa2:	4d50      	ldr	r5, [pc, #320]	@ (8000be4 <__aeabi_dadd+0x388>)
 8000aa4:	42aa      	cmp	r2, r5
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_dadd+0x24e>
 8000aa8:	e16a      	b.n	8000d80 <__aeabi_dadd+0x524>
 8000aaa:	2501      	movs	r5, #1
 8000aac:	2938      	cmp	r1, #56	@ 0x38
 8000aae:	dd00      	ble.n	8000ab2 <__aeabi_dadd+0x256>
 8000ab0:	e722      	b.n	80008f8 <__aeabi_dadd+0x9c>
 8000ab2:	000a      	movs	r2, r1
 8000ab4:	e70e      	b.n	80008d4 <__aeabi_dadd+0x78>
 8000ab6:	4a4d      	ldr	r2, [pc, #308]	@ (8000bec <__aeabi_dadd+0x390>)
 8000ab8:	1c7d      	adds	r5, r7, #1
 8000aba:	4215      	tst	r5, r2
 8000abc:	d000      	beq.n	8000ac0 <__aeabi_dadd+0x264>
 8000abe:	e0d0      	b.n	8000c62 <__aeabi_dadd+0x406>
 8000ac0:	0025      	movs	r5, r4
 8000ac2:	4662      	mov	r2, ip
 8000ac4:	4653      	mov	r3, sl
 8000ac6:	4305      	orrs	r5, r0
 8000ac8:	431a      	orrs	r2, r3
 8000aca:	2f00      	cmp	r7, #0
 8000acc:	d000      	beq.n	8000ad0 <__aeabi_dadd+0x274>
 8000ace:	e137      	b.n	8000d40 <__aeabi_dadd+0x4e4>
 8000ad0:	2d00      	cmp	r5, #0
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_dadd+0x27a>
 8000ad4:	e1a8      	b.n	8000e28 <__aeabi_dadd+0x5cc>
 8000ad6:	2a00      	cmp	r2, #0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_dadd+0x280>
 8000ada:	e16a      	b.n	8000db2 <__aeabi_dadd+0x556>
 8000adc:	4663      	mov	r3, ip
 8000ade:	1ac5      	subs	r5, r0, r3
 8000ae0:	4653      	mov	r3, sl
 8000ae2:	1ae2      	subs	r2, r4, r3
 8000ae4:	42a8      	cmp	r0, r5
 8000ae6:	419b      	sbcs	r3, r3
 8000ae8:	425b      	negs	r3, r3
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	021a      	lsls	r2, r3, #8
 8000aee:	d400      	bmi.n	8000af2 <__aeabi_dadd+0x296>
 8000af0:	e203      	b.n	8000efa <__aeabi_dadd+0x69e>
 8000af2:	4663      	mov	r3, ip
 8000af4:	1a1d      	subs	r5, r3, r0
 8000af6:	45ac      	cmp	ip, r5
 8000af8:	4192      	sbcs	r2, r2
 8000afa:	4653      	mov	r3, sl
 8000afc:	4252      	negs	r2, r2
 8000afe:	1b1c      	subs	r4, r3, r4
 8000b00:	000e      	movs	r6, r1
 8000b02:	4688      	mov	r8, r1
 8000b04:	1aa4      	subs	r4, r4, r2
 8000b06:	e723      	b.n	8000950 <__aeabi_dadd+0xf4>
 8000b08:	4936      	ldr	r1, [pc, #216]	@ (8000be4 <__aeabi_dadd+0x388>)
 8000b0a:	428f      	cmp	r7, r1
 8000b0c:	d070      	beq.n	8000bf0 <__aeabi_dadd+0x394>
 8000b0e:	2501      	movs	r5, #1
 8000b10:	2a38      	cmp	r2, #56	@ 0x38
 8000b12:	dca8      	bgt.n	8000a66 <__aeabi_dadd+0x20a>
 8000b14:	2180      	movs	r1, #128	@ 0x80
 8000b16:	4653      	mov	r3, sl
 8000b18:	0409      	lsls	r1, r1, #16
 8000b1a:	430b      	orrs	r3, r1
 8000b1c:	469a      	mov	sl, r3
 8000b1e:	e78e      	b.n	8000a3e <__aeabi_dadd+0x1e2>
 8000b20:	003c      	movs	r4, r7
 8000b22:	2500      	movs	r5, #0
 8000b24:	2200      	movs	r2, #0
 8000b26:	e731      	b.n	800098c <__aeabi_dadd+0x130>
 8000b28:	2307      	movs	r3, #7
 8000b2a:	402b      	ands	r3, r5
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d000      	beq.n	8000b32 <__aeabi_dadd+0x2d6>
 8000b30:	e710      	b.n	8000954 <__aeabi_dadd+0xf8>
 8000b32:	e093      	b.n	8000c5c <__aeabi_dadd+0x400>
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	d074      	beq.n	8000c22 <__aeabi_dadd+0x3c6>
 8000b38:	464a      	mov	r2, r9
 8000b3a:	1bd2      	subs	r2, r2, r7
 8000b3c:	2f00      	cmp	r7, #0
 8000b3e:	d100      	bne.n	8000b42 <__aeabi_dadd+0x2e6>
 8000b40:	e0c7      	b.n	8000cd2 <__aeabi_dadd+0x476>
 8000b42:	4928      	ldr	r1, [pc, #160]	@ (8000be4 <__aeabi_dadd+0x388>)
 8000b44:	4589      	cmp	r9, r1
 8000b46:	d100      	bne.n	8000b4a <__aeabi_dadd+0x2ee>
 8000b48:	e185      	b.n	8000e56 <__aeabi_dadd+0x5fa>
 8000b4a:	2501      	movs	r5, #1
 8000b4c:	2a38      	cmp	r2, #56	@ 0x38
 8000b4e:	dc12      	bgt.n	8000b76 <__aeabi_dadd+0x31a>
 8000b50:	2180      	movs	r1, #128	@ 0x80
 8000b52:	0409      	lsls	r1, r1, #16
 8000b54:	430c      	orrs	r4, r1
 8000b56:	2a1f      	cmp	r2, #31
 8000b58:	dd00      	ble.n	8000b5c <__aeabi_dadd+0x300>
 8000b5a:	e1ab      	b.n	8000eb4 <__aeabi_dadd+0x658>
 8000b5c:	2120      	movs	r1, #32
 8000b5e:	0025      	movs	r5, r4
 8000b60:	1a89      	subs	r1, r1, r2
 8000b62:	0007      	movs	r7, r0
 8000b64:	4088      	lsls	r0, r1
 8000b66:	408d      	lsls	r5, r1
 8000b68:	40d7      	lsrs	r7, r2
 8000b6a:	1e41      	subs	r1, r0, #1
 8000b6c:	4188      	sbcs	r0, r1
 8000b6e:	40d4      	lsrs	r4, r2
 8000b70:	433d      	orrs	r5, r7
 8000b72:	4305      	orrs	r5, r0
 8000b74:	44a2      	add	sl, r4
 8000b76:	4465      	add	r5, ip
 8000b78:	4565      	cmp	r5, ip
 8000b7a:	4192      	sbcs	r2, r2
 8000b7c:	4252      	negs	r2, r2
 8000b7e:	4452      	add	r2, sl
 8000b80:	0014      	movs	r4, r2
 8000b82:	464f      	mov	r7, r9
 8000b84:	e774      	b.n	8000a70 <__aeabi_dadd+0x214>
 8000b86:	0028      	movs	r0, r5
 8000b88:	f001 fdf0 	bl	800276c <__clzsi2>
 8000b8c:	0003      	movs	r3, r0
 8000b8e:	3318      	adds	r3, #24
 8000b90:	2b1f      	cmp	r3, #31
 8000b92:	dc00      	bgt.n	8000b96 <__aeabi_dadd+0x33a>
 8000b94:	e6c2      	b.n	800091c <__aeabi_dadd+0xc0>
 8000b96:	002a      	movs	r2, r5
 8000b98:	3808      	subs	r0, #8
 8000b9a:	4082      	lsls	r2, r0
 8000b9c:	429f      	cmp	r7, r3
 8000b9e:	dd00      	ble.n	8000ba2 <__aeabi_dadd+0x346>
 8000ba0:	e0a9      	b.n	8000cf6 <__aeabi_dadd+0x49a>
 8000ba2:	1bdb      	subs	r3, r3, r7
 8000ba4:	1c58      	adds	r0, r3, #1
 8000ba6:	281f      	cmp	r0, #31
 8000ba8:	dc00      	bgt.n	8000bac <__aeabi_dadd+0x350>
 8000baa:	e1ac      	b.n	8000f06 <__aeabi_dadd+0x6aa>
 8000bac:	0015      	movs	r5, r2
 8000bae:	3b1f      	subs	r3, #31
 8000bb0:	40dd      	lsrs	r5, r3
 8000bb2:	2820      	cmp	r0, #32
 8000bb4:	d005      	beq.n	8000bc2 <__aeabi_dadd+0x366>
 8000bb6:	2340      	movs	r3, #64	@ 0x40
 8000bb8:	1a1b      	subs	r3, r3, r0
 8000bba:	409a      	lsls	r2, r3
 8000bbc:	1e53      	subs	r3, r2, #1
 8000bbe:	419a      	sbcs	r2, r3
 8000bc0:	4315      	orrs	r5, r2
 8000bc2:	2307      	movs	r3, #7
 8000bc4:	2700      	movs	r7, #0
 8000bc6:	402b      	ands	r3, r5
 8000bc8:	e7b0      	b.n	8000b2c <__aeabi_dadd+0x2d0>
 8000bca:	08ed      	lsrs	r5, r5, #3
 8000bcc:	4b05      	ldr	r3, [pc, #20]	@ (8000be4 <__aeabi_dadd+0x388>)
 8000bce:	0762      	lsls	r2, r4, #29
 8000bd0:	432a      	orrs	r2, r5
 8000bd2:	08e4      	lsrs	r4, r4, #3
 8000bd4:	429f      	cmp	r7, r3
 8000bd6:	d00f      	beq.n	8000bf8 <__aeabi_dadd+0x39c>
 8000bd8:	0324      	lsls	r4, r4, #12
 8000bda:	0b25      	lsrs	r5, r4, #12
 8000bdc:	057c      	lsls	r4, r7, #21
 8000bde:	0d64      	lsrs	r4, r4, #21
 8000be0:	e6d4      	b.n	800098c <__aeabi_dadd+0x130>
 8000be2:	46c0      	nop			@ (mov r8, r8)
 8000be4:	000007ff 	.word	0x000007ff
 8000be8:	ff7fffff 	.word	0xff7fffff
 8000bec:	000007fe 	.word	0x000007fe
 8000bf0:	08c0      	lsrs	r0, r0, #3
 8000bf2:	0762      	lsls	r2, r4, #29
 8000bf4:	4302      	orrs	r2, r0
 8000bf6:	08e4      	lsrs	r4, r4, #3
 8000bf8:	0013      	movs	r3, r2
 8000bfa:	4323      	orrs	r3, r4
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_dadd+0x3a4>
 8000bfe:	e186      	b.n	8000f0e <__aeabi_dadd+0x6b2>
 8000c00:	2580      	movs	r5, #128	@ 0x80
 8000c02:	032d      	lsls	r5, r5, #12
 8000c04:	4325      	orrs	r5, r4
 8000c06:	032d      	lsls	r5, r5, #12
 8000c08:	4cc3      	ldr	r4, [pc, #780]	@ (8000f18 <__aeabi_dadd+0x6bc>)
 8000c0a:	0b2d      	lsrs	r5, r5, #12
 8000c0c:	e6be      	b.n	800098c <__aeabi_dadd+0x130>
 8000c0e:	4660      	mov	r0, ip
 8000c10:	4654      	mov	r4, sl
 8000c12:	000e      	movs	r6, r1
 8000c14:	0017      	movs	r7, r2
 8000c16:	08c5      	lsrs	r5, r0, #3
 8000c18:	e7d8      	b.n	8000bcc <__aeabi_dadd+0x370>
 8000c1a:	4cc0      	ldr	r4, [pc, #768]	@ (8000f1c <__aeabi_dadd+0x6c0>)
 8000c1c:	1aff      	subs	r7, r7, r3
 8000c1e:	4014      	ands	r4, r2
 8000c20:	e696      	b.n	8000950 <__aeabi_dadd+0xf4>
 8000c22:	4abf      	ldr	r2, [pc, #764]	@ (8000f20 <__aeabi_dadd+0x6c4>)
 8000c24:	1c79      	adds	r1, r7, #1
 8000c26:	4211      	tst	r1, r2
 8000c28:	d16b      	bne.n	8000d02 <__aeabi_dadd+0x4a6>
 8000c2a:	0022      	movs	r2, r4
 8000c2c:	4302      	orrs	r2, r0
 8000c2e:	2f00      	cmp	r7, #0
 8000c30:	d000      	beq.n	8000c34 <__aeabi_dadd+0x3d8>
 8000c32:	e0db      	b.n	8000dec <__aeabi_dadd+0x590>
 8000c34:	2a00      	cmp	r2, #0
 8000c36:	d100      	bne.n	8000c3a <__aeabi_dadd+0x3de>
 8000c38:	e12d      	b.n	8000e96 <__aeabi_dadd+0x63a>
 8000c3a:	4662      	mov	r2, ip
 8000c3c:	4653      	mov	r3, sl
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	d100      	bne.n	8000c44 <__aeabi_dadd+0x3e8>
 8000c42:	e0b6      	b.n	8000db2 <__aeabi_dadd+0x556>
 8000c44:	4663      	mov	r3, ip
 8000c46:	18c5      	adds	r5, r0, r3
 8000c48:	4285      	cmp	r5, r0
 8000c4a:	4180      	sbcs	r0, r0
 8000c4c:	4454      	add	r4, sl
 8000c4e:	4240      	negs	r0, r0
 8000c50:	1824      	adds	r4, r4, r0
 8000c52:	0223      	lsls	r3, r4, #8
 8000c54:	d502      	bpl.n	8000c5c <__aeabi_dadd+0x400>
 8000c56:	000f      	movs	r7, r1
 8000c58:	4bb0      	ldr	r3, [pc, #704]	@ (8000f1c <__aeabi_dadd+0x6c0>)
 8000c5a:	401c      	ands	r4, r3
 8000c5c:	003a      	movs	r2, r7
 8000c5e:	0028      	movs	r0, r5
 8000c60:	e7d8      	b.n	8000c14 <__aeabi_dadd+0x3b8>
 8000c62:	4662      	mov	r2, ip
 8000c64:	1a85      	subs	r5, r0, r2
 8000c66:	42a8      	cmp	r0, r5
 8000c68:	4192      	sbcs	r2, r2
 8000c6a:	4653      	mov	r3, sl
 8000c6c:	4252      	negs	r2, r2
 8000c6e:	4691      	mov	r9, r2
 8000c70:	1ae3      	subs	r3, r4, r3
 8000c72:	001a      	movs	r2, r3
 8000c74:	464b      	mov	r3, r9
 8000c76:	1ad2      	subs	r2, r2, r3
 8000c78:	0013      	movs	r3, r2
 8000c7a:	4691      	mov	r9, r2
 8000c7c:	021a      	lsls	r2, r3, #8
 8000c7e:	d454      	bmi.n	8000d2a <__aeabi_dadd+0x4ce>
 8000c80:	464a      	mov	r2, r9
 8000c82:	464c      	mov	r4, r9
 8000c84:	432a      	orrs	r2, r5
 8000c86:	d000      	beq.n	8000c8a <__aeabi_dadd+0x42e>
 8000c88:	e640      	b.n	800090c <__aeabi_dadd+0xb0>
 8000c8a:	2600      	movs	r6, #0
 8000c8c:	2400      	movs	r4, #0
 8000c8e:	2500      	movs	r5, #0
 8000c90:	e67c      	b.n	800098c <__aeabi_dadd+0x130>
 8000c92:	4da1      	ldr	r5, [pc, #644]	@ (8000f18 <__aeabi_dadd+0x6bc>)
 8000c94:	45a9      	cmp	r9, r5
 8000c96:	d100      	bne.n	8000c9a <__aeabi_dadd+0x43e>
 8000c98:	e090      	b.n	8000dbc <__aeabi_dadd+0x560>
 8000c9a:	2501      	movs	r5, #1
 8000c9c:	2a38      	cmp	r2, #56	@ 0x38
 8000c9e:	dd00      	ble.n	8000ca2 <__aeabi_dadd+0x446>
 8000ca0:	e6ab      	b.n	80009fa <__aeabi_dadd+0x19e>
 8000ca2:	2580      	movs	r5, #128	@ 0x80
 8000ca4:	042d      	lsls	r5, r5, #16
 8000ca6:	432c      	orrs	r4, r5
 8000ca8:	e695      	b.n	80009d6 <__aeabi_dadd+0x17a>
 8000caa:	0011      	movs	r1, r2
 8000cac:	4655      	mov	r5, sl
 8000cae:	3920      	subs	r1, #32
 8000cb0:	40cd      	lsrs	r5, r1
 8000cb2:	46a9      	mov	r9, r5
 8000cb4:	2a20      	cmp	r2, #32
 8000cb6:	d006      	beq.n	8000cc6 <__aeabi_dadd+0x46a>
 8000cb8:	2140      	movs	r1, #64	@ 0x40
 8000cba:	4653      	mov	r3, sl
 8000cbc:	1a8a      	subs	r2, r1, r2
 8000cbe:	4093      	lsls	r3, r2
 8000cc0:	4662      	mov	r2, ip
 8000cc2:	431a      	orrs	r2, r3
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	4665      	mov	r5, ip
 8000cc8:	1e6b      	subs	r3, r5, #1
 8000cca:	419d      	sbcs	r5, r3
 8000ccc:	464b      	mov	r3, r9
 8000cce:	431d      	orrs	r5, r3
 8000cd0:	e612      	b.n	80008f8 <__aeabi_dadd+0x9c>
 8000cd2:	0021      	movs	r1, r4
 8000cd4:	4301      	orrs	r1, r0
 8000cd6:	d100      	bne.n	8000cda <__aeabi_dadd+0x47e>
 8000cd8:	e0c4      	b.n	8000e64 <__aeabi_dadd+0x608>
 8000cda:	1e51      	subs	r1, r2, #1
 8000cdc:	2a01      	cmp	r2, #1
 8000cde:	d100      	bne.n	8000ce2 <__aeabi_dadd+0x486>
 8000ce0:	e0fb      	b.n	8000eda <__aeabi_dadd+0x67e>
 8000ce2:	4d8d      	ldr	r5, [pc, #564]	@ (8000f18 <__aeabi_dadd+0x6bc>)
 8000ce4:	42aa      	cmp	r2, r5
 8000ce6:	d100      	bne.n	8000cea <__aeabi_dadd+0x48e>
 8000ce8:	e0b5      	b.n	8000e56 <__aeabi_dadd+0x5fa>
 8000cea:	2501      	movs	r5, #1
 8000cec:	2938      	cmp	r1, #56	@ 0x38
 8000cee:	dd00      	ble.n	8000cf2 <__aeabi_dadd+0x496>
 8000cf0:	e741      	b.n	8000b76 <__aeabi_dadd+0x31a>
 8000cf2:	000a      	movs	r2, r1
 8000cf4:	e72f      	b.n	8000b56 <__aeabi_dadd+0x2fa>
 8000cf6:	4c89      	ldr	r4, [pc, #548]	@ (8000f1c <__aeabi_dadd+0x6c0>)
 8000cf8:	1aff      	subs	r7, r7, r3
 8000cfa:	4014      	ands	r4, r2
 8000cfc:	0762      	lsls	r2, r4, #29
 8000cfe:	08e4      	lsrs	r4, r4, #3
 8000d00:	e76a      	b.n	8000bd8 <__aeabi_dadd+0x37c>
 8000d02:	4a85      	ldr	r2, [pc, #532]	@ (8000f18 <__aeabi_dadd+0x6bc>)
 8000d04:	4291      	cmp	r1, r2
 8000d06:	d100      	bne.n	8000d0a <__aeabi_dadd+0x4ae>
 8000d08:	e0e3      	b.n	8000ed2 <__aeabi_dadd+0x676>
 8000d0a:	4663      	mov	r3, ip
 8000d0c:	18c2      	adds	r2, r0, r3
 8000d0e:	4282      	cmp	r2, r0
 8000d10:	4180      	sbcs	r0, r0
 8000d12:	0023      	movs	r3, r4
 8000d14:	4240      	negs	r0, r0
 8000d16:	4453      	add	r3, sl
 8000d18:	181b      	adds	r3, r3, r0
 8000d1a:	07dd      	lsls	r5, r3, #31
 8000d1c:	085c      	lsrs	r4, r3, #1
 8000d1e:	2307      	movs	r3, #7
 8000d20:	0852      	lsrs	r2, r2, #1
 8000d22:	4315      	orrs	r5, r2
 8000d24:	000f      	movs	r7, r1
 8000d26:	402b      	ands	r3, r5
 8000d28:	e700      	b.n	8000b2c <__aeabi_dadd+0x2d0>
 8000d2a:	4663      	mov	r3, ip
 8000d2c:	1a1d      	subs	r5, r3, r0
 8000d2e:	45ac      	cmp	ip, r5
 8000d30:	4192      	sbcs	r2, r2
 8000d32:	4653      	mov	r3, sl
 8000d34:	4252      	negs	r2, r2
 8000d36:	1b1c      	subs	r4, r3, r4
 8000d38:	000e      	movs	r6, r1
 8000d3a:	4688      	mov	r8, r1
 8000d3c:	1aa4      	subs	r4, r4, r2
 8000d3e:	e5e5      	b.n	800090c <__aeabi_dadd+0xb0>
 8000d40:	2d00      	cmp	r5, #0
 8000d42:	d000      	beq.n	8000d46 <__aeabi_dadd+0x4ea>
 8000d44:	e091      	b.n	8000e6a <__aeabi_dadd+0x60e>
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	d138      	bne.n	8000dbc <__aeabi_dadd+0x560>
 8000d4a:	2480      	movs	r4, #128	@ 0x80
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	0324      	lsls	r4, r4, #12
 8000d50:	e756      	b.n	8000c00 <__aeabi_dadd+0x3a4>
 8000d52:	4663      	mov	r3, ip
 8000d54:	18c5      	adds	r5, r0, r3
 8000d56:	4285      	cmp	r5, r0
 8000d58:	4180      	sbcs	r0, r0
 8000d5a:	4454      	add	r4, sl
 8000d5c:	4240      	negs	r0, r0
 8000d5e:	1824      	adds	r4, r4, r0
 8000d60:	2701      	movs	r7, #1
 8000d62:	0223      	lsls	r3, r4, #8
 8000d64:	d400      	bmi.n	8000d68 <__aeabi_dadd+0x50c>
 8000d66:	e6df      	b.n	8000b28 <__aeabi_dadd+0x2cc>
 8000d68:	2702      	movs	r7, #2
 8000d6a:	e687      	b.n	8000a7c <__aeabi_dadd+0x220>
 8000d6c:	4663      	mov	r3, ip
 8000d6e:	1ac5      	subs	r5, r0, r3
 8000d70:	42a8      	cmp	r0, r5
 8000d72:	4180      	sbcs	r0, r0
 8000d74:	4653      	mov	r3, sl
 8000d76:	4240      	negs	r0, r0
 8000d78:	1ae4      	subs	r4, r4, r3
 8000d7a:	2701      	movs	r7, #1
 8000d7c:	1a24      	subs	r4, r4, r0
 8000d7e:	e5c0      	b.n	8000902 <__aeabi_dadd+0xa6>
 8000d80:	0762      	lsls	r2, r4, #29
 8000d82:	08c0      	lsrs	r0, r0, #3
 8000d84:	4302      	orrs	r2, r0
 8000d86:	08e4      	lsrs	r4, r4, #3
 8000d88:	e736      	b.n	8000bf8 <__aeabi_dadd+0x39c>
 8000d8a:	0011      	movs	r1, r2
 8000d8c:	4653      	mov	r3, sl
 8000d8e:	3920      	subs	r1, #32
 8000d90:	40cb      	lsrs	r3, r1
 8000d92:	4699      	mov	r9, r3
 8000d94:	2a20      	cmp	r2, #32
 8000d96:	d006      	beq.n	8000da6 <__aeabi_dadd+0x54a>
 8000d98:	2140      	movs	r1, #64	@ 0x40
 8000d9a:	4653      	mov	r3, sl
 8000d9c:	1a8a      	subs	r2, r1, r2
 8000d9e:	4093      	lsls	r3, r2
 8000da0:	4662      	mov	r2, ip
 8000da2:	431a      	orrs	r2, r3
 8000da4:	4694      	mov	ip, r2
 8000da6:	4665      	mov	r5, ip
 8000da8:	1e6b      	subs	r3, r5, #1
 8000daa:	419d      	sbcs	r5, r3
 8000dac:	464b      	mov	r3, r9
 8000dae:	431d      	orrs	r5, r3
 8000db0:	e659      	b.n	8000a66 <__aeabi_dadd+0x20a>
 8000db2:	0762      	lsls	r2, r4, #29
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	4302      	orrs	r2, r0
 8000db8:	08e4      	lsrs	r4, r4, #3
 8000dba:	e70d      	b.n	8000bd8 <__aeabi_dadd+0x37c>
 8000dbc:	4653      	mov	r3, sl
 8000dbe:	075a      	lsls	r2, r3, #29
 8000dc0:	4663      	mov	r3, ip
 8000dc2:	08d8      	lsrs	r0, r3, #3
 8000dc4:	4653      	mov	r3, sl
 8000dc6:	000e      	movs	r6, r1
 8000dc8:	4302      	orrs	r2, r0
 8000dca:	08dc      	lsrs	r4, r3, #3
 8000dcc:	e714      	b.n	8000bf8 <__aeabi_dadd+0x39c>
 8000dce:	0015      	movs	r5, r2
 8000dd0:	0026      	movs	r6, r4
 8000dd2:	3d20      	subs	r5, #32
 8000dd4:	40ee      	lsrs	r6, r5
 8000dd6:	2a20      	cmp	r2, #32
 8000dd8:	d003      	beq.n	8000de2 <__aeabi_dadd+0x586>
 8000dda:	2540      	movs	r5, #64	@ 0x40
 8000ddc:	1aaa      	subs	r2, r5, r2
 8000dde:	4094      	lsls	r4, r2
 8000de0:	4320      	orrs	r0, r4
 8000de2:	1e42      	subs	r2, r0, #1
 8000de4:	4190      	sbcs	r0, r2
 8000de6:	0005      	movs	r5, r0
 8000de8:	4335      	orrs	r5, r6
 8000dea:	e606      	b.n	80009fa <__aeabi_dadd+0x19e>
 8000dec:	2a00      	cmp	r2, #0
 8000dee:	d07c      	beq.n	8000eea <__aeabi_dadd+0x68e>
 8000df0:	4662      	mov	r2, ip
 8000df2:	4653      	mov	r3, sl
 8000df4:	08c0      	lsrs	r0, r0, #3
 8000df6:	431a      	orrs	r2, r3
 8000df8:	d100      	bne.n	8000dfc <__aeabi_dadd+0x5a0>
 8000dfa:	e6fa      	b.n	8000bf2 <__aeabi_dadd+0x396>
 8000dfc:	0762      	lsls	r2, r4, #29
 8000dfe:	4310      	orrs	r0, r2
 8000e00:	2280      	movs	r2, #128	@ 0x80
 8000e02:	08e4      	lsrs	r4, r4, #3
 8000e04:	0312      	lsls	r2, r2, #12
 8000e06:	4214      	tst	r4, r2
 8000e08:	d008      	beq.n	8000e1c <__aeabi_dadd+0x5c0>
 8000e0a:	08d9      	lsrs	r1, r3, #3
 8000e0c:	4211      	tst	r1, r2
 8000e0e:	d105      	bne.n	8000e1c <__aeabi_dadd+0x5c0>
 8000e10:	4663      	mov	r3, ip
 8000e12:	08d8      	lsrs	r0, r3, #3
 8000e14:	4653      	mov	r3, sl
 8000e16:	000c      	movs	r4, r1
 8000e18:	075b      	lsls	r3, r3, #29
 8000e1a:	4318      	orrs	r0, r3
 8000e1c:	0f42      	lsrs	r2, r0, #29
 8000e1e:	00c0      	lsls	r0, r0, #3
 8000e20:	08c0      	lsrs	r0, r0, #3
 8000e22:	0752      	lsls	r2, r2, #29
 8000e24:	4302      	orrs	r2, r0
 8000e26:	e6e7      	b.n	8000bf8 <__aeabi_dadd+0x39c>
 8000e28:	2a00      	cmp	r2, #0
 8000e2a:	d100      	bne.n	8000e2e <__aeabi_dadd+0x5d2>
 8000e2c:	e72d      	b.n	8000c8a <__aeabi_dadd+0x42e>
 8000e2e:	4663      	mov	r3, ip
 8000e30:	08d8      	lsrs	r0, r3, #3
 8000e32:	4653      	mov	r3, sl
 8000e34:	075a      	lsls	r2, r3, #29
 8000e36:	000e      	movs	r6, r1
 8000e38:	4302      	orrs	r2, r0
 8000e3a:	08dc      	lsrs	r4, r3, #3
 8000e3c:	e6cc      	b.n	8000bd8 <__aeabi_dadd+0x37c>
 8000e3e:	4663      	mov	r3, ip
 8000e40:	1a1d      	subs	r5, r3, r0
 8000e42:	45ac      	cmp	ip, r5
 8000e44:	4192      	sbcs	r2, r2
 8000e46:	4653      	mov	r3, sl
 8000e48:	4252      	negs	r2, r2
 8000e4a:	1b1c      	subs	r4, r3, r4
 8000e4c:	000e      	movs	r6, r1
 8000e4e:	4688      	mov	r8, r1
 8000e50:	1aa4      	subs	r4, r4, r2
 8000e52:	3701      	adds	r7, #1
 8000e54:	e555      	b.n	8000902 <__aeabi_dadd+0xa6>
 8000e56:	4663      	mov	r3, ip
 8000e58:	08d9      	lsrs	r1, r3, #3
 8000e5a:	4653      	mov	r3, sl
 8000e5c:	075a      	lsls	r2, r3, #29
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	08dc      	lsrs	r4, r3, #3
 8000e62:	e6c9      	b.n	8000bf8 <__aeabi_dadd+0x39c>
 8000e64:	4660      	mov	r0, ip
 8000e66:	4654      	mov	r4, sl
 8000e68:	e6d4      	b.n	8000c14 <__aeabi_dadd+0x3b8>
 8000e6a:	08c0      	lsrs	r0, r0, #3
 8000e6c:	2a00      	cmp	r2, #0
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_dadd+0x616>
 8000e70:	e6bf      	b.n	8000bf2 <__aeabi_dadd+0x396>
 8000e72:	0762      	lsls	r2, r4, #29
 8000e74:	4310      	orrs	r0, r2
 8000e76:	2280      	movs	r2, #128	@ 0x80
 8000e78:	08e4      	lsrs	r4, r4, #3
 8000e7a:	0312      	lsls	r2, r2, #12
 8000e7c:	4214      	tst	r4, r2
 8000e7e:	d0cd      	beq.n	8000e1c <__aeabi_dadd+0x5c0>
 8000e80:	08dd      	lsrs	r5, r3, #3
 8000e82:	4215      	tst	r5, r2
 8000e84:	d1ca      	bne.n	8000e1c <__aeabi_dadd+0x5c0>
 8000e86:	4663      	mov	r3, ip
 8000e88:	08d8      	lsrs	r0, r3, #3
 8000e8a:	4653      	mov	r3, sl
 8000e8c:	075b      	lsls	r3, r3, #29
 8000e8e:	000e      	movs	r6, r1
 8000e90:	002c      	movs	r4, r5
 8000e92:	4318      	orrs	r0, r3
 8000e94:	e7c2      	b.n	8000e1c <__aeabi_dadd+0x5c0>
 8000e96:	4663      	mov	r3, ip
 8000e98:	08d9      	lsrs	r1, r3, #3
 8000e9a:	4653      	mov	r3, sl
 8000e9c:	075a      	lsls	r2, r3, #29
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	08dc      	lsrs	r4, r3, #3
 8000ea2:	e699      	b.n	8000bd8 <__aeabi_dadd+0x37c>
 8000ea4:	4663      	mov	r3, ip
 8000ea6:	08d8      	lsrs	r0, r3, #3
 8000ea8:	4653      	mov	r3, sl
 8000eaa:	075a      	lsls	r2, r3, #29
 8000eac:	000e      	movs	r6, r1
 8000eae:	4302      	orrs	r2, r0
 8000eb0:	08dc      	lsrs	r4, r3, #3
 8000eb2:	e6a1      	b.n	8000bf8 <__aeabi_dadd+0x39c>
 8000eb4:	0011      	movs	r1, r2
 8000eb6:	0027      	movs	r7, r4
 8000eb8:	3920      	subs	r1, #32
 8000eba:	40cf      	lsrs	r7, r1
 8000ebc:	2a20      	cmp	r2, #32
 8000ebe:	d003      	beq.n	8000ec8 <__aeabi_dadd+0x66c>
 8000ec0:	2140      	movs	r1, #64	@ 0x40
 8000ec2:	1a8a      	subs	r2, r1, r2
 8000ec4:	4094      	lsls	r4, r2
 8000ec6:	4320      	orrs	r0, r4
 8000ec8:	1e42      	subs	r2, r0, #1
 8000eca:	4190      	sbcs	r0, r2
 8000ecc:	0005      	movs	r5, r0
 8000ece:	433d      	orrs	r5, r7
 8000ed0:	e651      	b.n	8000b76 <__aeabi_dadd+0x31a>
 8000ed2:	000c      	movs	r4, r1
 8000ed4:	2500      	movs	r5, #0
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	e558      	b.n	800098c <__aeabi_dadd+0x130>
 8000eda:	4460      	add	r0, ip
 8000edc:	4560      	cmp	r0, ip
 8000ede:	4192      	sbcs	r2, r2
 8000ee0:	4454      	add	r4, sl
 8000ee2:	4252      	negs	r2, r2
 8000ee4:	0005      	movs	r5, r0
 8000ee6:	18a4      	adds	r4, r4, r2
 8000ee8:	e73a      	b.n	8000d60 <__aeabi_dadd+0x504>
 8000eea:	4653      	mov	r3, sl
 8000eec:	075a      	lsls	r2, r3, #29
 8000eee:	4663      	mov	r3, ip
 8000ef0:	08d9      	lsrs	r1, r3, #3
 8000ef2:	4653      	mov	r3, sl
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	08dc      	lsrs	r4, r3, #3
 8000ef8:	e67e      	b.n	8000bf8 <__aeabi_dadd+0x39c>
 8000efa:	001a      	movs	r2, r3
 8000efc:	001c      	movs	r4, r3
 8000efe:	432a      	orrs	r2, r5
 8000f00:	d000      	beq.n	8000f04 <__aeabi_dadd+0x6a8>
 8000f02:	e6ab      	b.n	8000c5c <__aeabi_dadd+0x400>
 8000f04:	e6c1      	b.n	8000c8a <__aeabi_dadd+0x42e>
 8000f06:	2120      	movs	r1, #32
 8000f08:	2500      	movs	r5, #0
 8000f0a:	1a09      	subs	r1, r1, r0
 8000f0c:	e519      	b.n	8000942 <__aeabi_dadd+0xe6>
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2500      	movs	r5, #0
 8000f12:	4c01      	ldr	r4, [pc, #4]	@ (8000f18 <__aeabi_dadd+0x6bc>)
 8000f14:	e53a      	b.n	800098c <__aeabi_dadd+0x130>
 8000f16:	46c0      	nop			@ (mov r8, r8)
 8000f18:	000007ff 	.word	0x000007ff
 8000f1c:	ff7fffff 	.word	0xff7fffff
 8000f20:	000007fe 	.word	0x000007fe

08000f24 <__aeabi_ddiv>:
 8000f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f26:	46de      	mov	lr, fp
 8000f28:	4645      	mov	r5, r8
 8000f2a:	4657      	mov	r7, sl
 8000f2c:	464e      	mov	r6, r9
 8000f2e:	b5e0      	push	{r5, r6, r7, lr}
 8000f30:	b087      	sub	sp, #28
 8000f32:	9200      	str	r2, [sp, #0]
 8000f34:	9301      	str	r3, [sp, #4]
 8000f36:	030b      	lsls	r3, r1, #12
 8000f38:	0b1b      	lsrs	r3, r3, #12
 8000f3a:	469b      	mov	fp, r3
 8000f3c:	0fca      	lsrs	r2, r1, #31
 8000f3e:	004b      	lsls	r3, r1, #1
 8000f40:	0004      	movs	r4, r0
 8000f42:	4680      	mov	r8, r0
 8000f44:	0d5b      	lsrs	r3, r3, #21
 8000f46:	9202      	str	r2, [sp, #8]
 8000f48:	d100      	bne.n	8000f4c <__aeabi_ddiv+0x28>
 8000f4a:	e16a      	b.n	8001222 <__aeabi_ddiv+0x2fe>
 8000f4c:	4ad4      	ldr	r2, [pc, #848]	@ (80012a0 <__aeabi_ddiv+0x37c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d100      	bne.n	8000f54 <__aeabi_ddiv+0x30>
 8000f52:	e18c      	b.n	800126e <__aeabi_ddiv+0x34a>
 8000f54:	4659      	mov	r1, fp
 8000f56:	0f42      	lsrs	r2, r0, #29
 8000f58:	00c9      	lsls	r1, r1, #3
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	2180      	movs	r1, #128	@ 0x80
 8000f5e:	0409      	lsls	r1, r1, #16
 8000f60:	4311      	orrs	r1, r2
 8000f62:	00c2      	lsls	r2, r0, #3
 8000f64:	4690      	mov	r8, r2
 8000f66:	4acf      	ldr	r2, [pc, #828]	@ (80012a4 <__aeabi_ddiv+0x380>)
 8000f68:	4689      	mov	r9, r1
 8000f6a:	4692      	mov	sl, r2
 8000f6c:	449a      	add	sl, r3
 8000f6e:	2300      	movs	r3, #0
 8000f70:	2400      	movs	r4, #0
 8000f72:	9303      	str	r3, [sp, #12]
 8000f74:	9e00      	ldr	r6, [sp, #0]
 8000f76:	9f01      	ldr	r7, [sp, #4]
 8000f78:	033b      	lsls	r3, r7, #12
 8000f7a:	0b1b      	lsrs	r3, r3, #12
 8000f7c:	469b      	mov	fp, r3
 8000f7e:	007b      	lsls	r3, r7, #1
 8000f80:	0030      	movs	r0, r6
 8000f82:	0d5b      	lsrs	r3, r3, #21
 8000f84:	0ffd      	lsrs	r5, r7, #31
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d100      	bne.n	8000f8c <__aeabi_ddiv+0x68>
 8000f8a:	e128      	b.n	80011de <__aeabi_ddiv+0x2ba>
 8000f8c:	4ac4      	ldr	r2, [pc, #784]	@ (80012a0 <__aeabi_ddiv+0x37c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d100      	bne.n	8000f94 <__aeabi_ddiv+0x70>
 8000f92:	e177      	b.n	8001284 <__aeabi_ddiv+0x360>
 8000f94:	4659      	mov	r1, fp
 8000f96:	0f72      	lsrs	r2, r6, #29
 8000f98:	00c9      	lsls	r1, r1, #3
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	2180      	movs	r1, #128	@ 0x80
 8000f9e:	0409      	lsls	r1, r1, #16
 8000fa0:	4311      	orrs	r1, r2
 8000fa2:	468b      	mov	fp, r1
 8000fa4:	49bf      	ldr	r1, [pc, #764]	@ (80012a4 <__aeabi_ddiv+0x380>)
 8000fa6:	00f2      	lsls	r2, r6, #3
 8000fa8:	468c      	mov	ip, r1
 8000faa:	4651      	mov	r1, sl
 8000fac:	4463      	add	r3, ip
 8000fae:	1acb      	subs	r3, r1, r3
 8000fb0:	469a      	mov	sl, r3
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	9e02      	ldr	r6, [sp, #8]
 8000fb6:	406e      	eors	r6, r5
 8000fb8:	2c0f      	cmp	r4, #15
 8000fba:	d827      	bhi.n	800100c <__aeabi_ddiv+0xe8>
 8000fbc:	49ba      	ldr	r1, [pc, #744]	@ (80012a8 <__aeabi_ddiv+0x384>)
 8000fbe:	00a4      	lsls	r4, r4, #2
 8000fc0:	5909      	ldr	r1, [r1, r4]
 8000fc2:	468f      	mov	pc, r1
 8000fc4:	46cb      	mov	fp, r9
 8000fc6:	4642      	mov	r2, r8
 8000fc8:	9e02      	ldr	r6, [sp, #8]
 8000fca:	9b03      	ldr	r3, [sp, #12]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d016      	beq.n	8000ffe <__aeabi_ddiv+0xda>
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_ddiv+0xb2>
 8000fd4:	e2a6      	b.n	8001524 <__aeabi_ddiv+0x600>
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d000      	beq.n	8000fdc <__aeabi_ddiv+0xb8>
 8000fda:	e0df      	b.n	800119c <__aeabi_ddiv+0x278>
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2300      	movs	r3, #0
 8000fe0:	2400      	movs	r4, #0
 8000fe2:	4690      	mov	r8, r2
 8000fe4:	051b      	lsls	r3, r3, #20
 8000fe6:	4323      	orrs	r3, r4
 8000fe8:	07f6      	lsls	r6, r6, #31
 8000fea:	4333      	orrs	r3, r6
 8000fec:	4640      	mov	r0, r8
 8000fee:	0019      	movs	r1, r3
 8000ff0:	b007      	add	sp, #28
 8000ff2:	bcf0      	pop	{r4, r5, r6, r7}
 8000ff4:	46bb      	mov	fp, r7
 8000ff6:	46b2      	mov	sl, r6
 8000ff8:	46a9      	mov	r9, r5
 8000ffa:	46a0      	mov	r8, r4
 8000ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ffe:	2200      	movs	r2, #0
 8001000:	2400      	movs	r4, #0
 8001002:	4690      	mov	r8, r2
 8001004:	4ba6      	ldr	r3, [pc, #664]	@ (80012a0 <__aeabi_ddiv+0x37c>)
 8001006:	e7ed      	b.n	8000fe4 <__aeabi_ddiv+0xc0>
 8001008:	002e      	movs	r6, r5
 800100a:	e7df      	b.n	8000fcc <__aeabi_ddiv+0xa8>
 800100c:	45cb      	cmp	fp, r9
 800100e:	d200      	bcs.n	8001012 <__aeabi_ddiv+0xee>
 8001010:	e1d4      	b.n	80013bc <__aeabi_ddiv+0x498>
 8001012:	d100      	bne.n	8001016 <__aeabi_ddiv+0xf2>
 8001014:	e1cf      	b.n	80013b6 <__aeabi_ddiv+0x492>
 8001016:	2301      	movs	r3, #1
 8001018:	425b      	negs	r3, r3
 800101a:	469c      	mov	ip, r3
 800101c:	4644      	mov	r4, r8
 800101e:	4648      	mov	r0, r9
 8001020:	2700      	movs	r7, #0
 8001022:	44e2      	add	sl, ip
 8001024:	465b      	mov	r3, fp
 8001026:	0e15      	lsrs	r5, r2, #24
 8001028:	021b      	lsls	r3, r3, #8
 800102a:	431d      	orrs	r5, r3
 800102c:	0c19      	lsrs	r1, r3, #16
 800102e:	042b      	lsls	r3, r5, #16
 8001030:	0212      	lsls	r2, r2, #8
 8001032:	9500      	str	r5, [sp, #0]
 8001034:	0c1d      	lsrs	r5, r3, #16
 8001036:	4691      	mov	r9, r2
 8001038:	9102      	str	r1, [sp, #8]
 800103a:	9503      	str	r5, [sp, #12]
 800103c:	f7ff f906 	bl	800024c <__aeabi_uidivmod>
 8001040:	0002      	movs	r2, r0
 8001042:	436a      	muls	r2, r5
 8001044:	040b      	lsls	r3, r1, #16
 8001046:	0c21      	lsrs	r1, r4, #16
 8001048:	4680      	mov	r8, r0
 800104a:	4319      	orrs	r1, r3
 800104c:	428a      	cmp	r2, r1
 800104e:	d909      	bls.n	8001064 <__aeabi_ddiv+0x140>
 8001050:	9d00      	ldr	r5, [sp, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	46ac      	mov	ip, r5
 8001056:	425b      	negs	r3, r3
 8001058:	4461      	add	r1, ip
 800105a:	469c      	mov	ip, r3
 800105c:	44e0      	add	r8, ip
 800105e:	428d      	cmp	r5, r1
 8001060:	d800      	bhi.n	8001064 <__aeabi_ddiv+0x140>
 8001062:	e1fb      	b.n	800145c <__aeabi_ddiv+0x538>
 8001064:	1a88      	subs	r0, r1, r2
 8001066:	9902      	ldr	r1, [sp, #8]
 8001068:	f7ff f8f0 	bl	800024c <__aeabi_uidivmod>
 800106c:	9a03      	ldr	r2, [sp, #12]
 800106e:	0424      	lsls	r4, r4, #16
 8001070:	4342      	muls	r2, r0
 8001072:	0409      	lsls	r1, r1, #16
 8001074:	0c24      	lsrs	r4, r4, #16
 8001076:	0003      	movs	r3, r0
 8001078:	430c      	orrs	r4, r1
 800107a:	42a2      	cmp	r2, r4
 800107c:	d906      	bls.n	800108c <__aeabi_ddiv+0x168>
 800107e:	9900      	ldr	r1, [sp, #0]
 8001080:	3b01      	subs	r3, #1
 8001082:	468c      	mov	ip, r1
 8001084:	4464      	add	r4, ip
 8001086:	42a1      	cmp	r1, r4
 8001088:	d800      	bhi.n	800108c <__aeabi_ddiv+0x168>
 800108a:	e1e1      	b.n	8001450 <__aeabi_ddiv+0x52c>
 800108c:	1aa0      	subs	r0, r4, r2
 800108e:	4642      	mov	r2, r8
 8001090:	0412      	lsls	r2, r2, #16
 8001092:	431a      	orrs	r2, r3
 8001094:	4693      	mov	fp, r2
 8001096:	464b      	mov	r3, r9
 8001098:	4659      	mov	r1, fp
 800109a:	0c1b      	lsrs	r3, r3, #16
 800109c:	001d      	movs	r5, r3
 800109e:	9304      	str	r3, [sp, #16]
 80010a0:	040b      	lsls	r3, r1, #16
 80010a2:	4649      	mov	r1, r9
 80010a4:	0409      	lsls	r1, r1, #16
 80010a6:	0c09      	lsrs	r1, r1, #16
 80010a8:	000c      	movs	r4, r1
 80010aa:	0c1b      	lsrs	r3, r3, #16
 80010ac:	435c      	muls	r4, r3
 80010ae:	0c12      	lsrs	r2, r2, #16
 80010b0:	436b      	muls	r3, r5
 80010b2:	4688      	mov	r8, r1
 80010b4:	4351      	muls	r1, r2
 80010b6:	436a      	muls	r2, r5
 80010b8:	0c25      	lsrs	r5, r4, #16
 80010ba:	46ac      	mov	ip, r5
 80010bc:	185b      	adds	r3, r3, r1
 80010be:	4463      	add	r3, ip
 80010c0:	4299      	cmp	r1, r3
 80010c2:	d903      	bls.n	80010cc <__aeabi_ddiv+0x1a8>
 80010c4:	2180      	movs	r1, #128	@ 0x80
 80010c6:	0249      	lsls	r1, r1, #9
 80010c8:	468c      	mov	ip, r1
 80010ca:	4462      	add	r2, ip
 80010cc:	0c19      	lsrs	r1, r3, #16
 80010ce:	0424      	lsls	r4, r4, #16
 80010d0:	041b      	lsls	r3, r3, #16
 80010d2:	0c24      	lsrs	r4, r4, #16
 80010d4:	188a      	adds	r2, r1, r2
 80010d6:	191c      	adds	r4, r3, r4
 80010d8:	4290      	cmp	r0, r2
 80010da:	d302      	bcc.n	80010e2 <__aeabi_ddiv+0x1be>
 80010dc:	d116      	bne.n	800110c <__aeabi_ddiv+0x1e8>
 80010de:	42a7      	cmp	r7, r4
 80010e0:	d214      	bcs.n	800110c <__aeabi_ddiv+0x1e8>
 80010e2:	465b      	mov	r3, fp
 80010e4:	9d00      	ldr	r5, [sp, #0]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	444f      	add	r7, r9
 80010ea:	9305      	str	r3, [sp, #20]
 80010ec:	454f      	cmp	r7, r9
 80010ee:	419b      	sbcs	r3, r3
 80010f0:	46ac      	mov	ip, r5
 80010f2:	425b      	negs	r3, r3
 80010f4:	4463      	add	r3, ip
 80010f6:	18c0      	adds	r0, r0, r3
 80010f8:	4285      	cmp	r5, r0
 80010fa:	d300      	bcc.n	80010fe <__aeabi_ddiv+0x1da>
 80010fc:	e1a1      	b.n	8001442 <__aeabi_ddiv+0x51e>
 80010fe:	4282      	cmp	r2, r0
 8001100:	d900      	bls.n	8001104 <__aeabi_ddiv+0x1e0>
 8001102:	e1f6      	b.n	80014f2 <__aeabi_ddiv+0x5ce>
 8001104:	d100      	bne.n	8001108 <__aeabi_ddiv+0x1e4>
 8001106:	e1f1      	b.n	80014ec <__aeabi_ddiv+0x5c8>
 8001108:	9b05      	ldr	r3, [sp, #20]
 800110a:	469b      	mov	fp, r3
 800110c:	1b3c      	subs	r4, r7, r4
 800110e:	42a7      	cmp	r7, r4
 8001110:	41bf      	sbcs	r7, r7
 8001112:	9d00      	ldr	r5, [sp, #0]
 8001114:	1a80      	subs	r0, r0, r2
 8001116:	427f      	negs	r7, r7
 8001118:	1bc0      	subs	r0, r0, r7
 800111a:	4285      	cmp	r5, r0
 800111c:	d100      	bne.n	8001120 <__aeabi_ddiv+0x1fc>
 800111e:	e1d0      	b.n	80014c2 <__aeabi_ddiv+0x59e>
 8001120:	9902      	ldr	r1, [sp, #8]
 8001122:	f7ff f893 	bl	800024c <__aeabi_uidivmod>
 8001126:	9a03      	ldr	r2, [sp, #12]
 8001128:	040b      	lsls	r3, r1, #16
 800112a:	4342      	muls	r2, r0
 800112c:	0c21      	lsrs	r1, r4, #16
 800112e:	0007      	movs	r7, r0
 8001130:	4319      	orrs	r1, r3
 8001132:	428a      	cmp	r2, r1
 8001134:	d900      	bls.n	8001138 <__aeabi_ddiv+0x214>
 8001136:	e178      	b.n	800142a <__aeabi_ddiv+0x506>
 8001138:	1a88      	subs	r0, r1, r2
 800113a:	9902      	ldr	r1, [sp, #8]
 800113c:	f7ff f886 	bl	800024c <__aeabi_uidivmod>
 8001140:	9a03      	ldr	r2, [sp, #12]
 8001142:	0424      	lsls	r4, r4, #16
 8001144:	4342      	muls	r2, r0
 8001146:	0409      	lsls	r1, r1, #16
 8001148:	0c24      	lsrs	r4, r4, #16
 800114a:	0003      	movs	r3, r0
 800114c:	430c      	orrs	r4, r1
 800114e:	42a2      	cmp	r2, r4
 8001150:	d900      	bls.n	8001154 <__aeabi_ddiv+0x230>
 8001152:	e15d      	b.n	8001410 <__aeabi_ddiv+0x4ec>
 8001154:	4641      	mov	r1, r8
 8001156:	1aa4      	subs	r4, r4, r2
 8001158:	043a      	lsls	r2, r7, #16
 800115a:	431a      	orrs	r2, r3
 800115c:	9d04      	ldr	r5, [sp, #16]
 800115e:	0413      	lsls	r3, r2, #16
 8001160:	0c1b      	lsrs	r3, r3, #16
 8001162:	4359      	muls	r1, r3
 8001164:	4647      	mov	r7, r8
 8001166:	436b      	muls	r3, r5
 8001168:	469c      	mov	ip, r3
 800116a:	0c10      	lsrs	r0, r2, #16
 800116c:	4347      	muls	r7, r0
 800116e:	0c0b      	lsrs	r3, r1, #16
 8001170:	44bc      	add	ip, r7
 8001172:	4463      	add	r3, ip
 8001174:	4368      	muls	r0, r5
 8001176:	429f      	cmp	r7, r3
 8001178:	d903      	bls.n	8001182 <__aeabi_ddiv+0x25e>
 800117a:	2580      	movs	r5, #128	@ 0x80
 800117c:	026d      	lsls	r5, r5, #9
 800117e:	46ac      	mov	ip, r5
 8001180:	4460      	add	r0, ip
 8001182:	0c1f      	lsrs	r7, r3, #16
 8001184:	0409      	lsls	r1, r1, #16
 8001186:	041b      	lsls	r3, r3, #16
 8001188:	0c09      	lsrs	r1, r1, #16
 800118a:	183f      	adds	r7, r7, r0
 800118c:	185b      	adds	r3, r3, r1
 800118e:	42bc      	cmp	r4, r7
 8001190:	d200      	bcs.n	8001194 <__aeabi_ddiv+0x270>
 8001192:	e102      	b.n	800139a <__aeabi_ddiv+0x476>
 8001194:	d100      	bne.n	8001198 <__aeabi_ddiv+0x274>
 8001196:	e0fd      	b.n	8001394 <__aeabi_ddiv+0x470>
 8001198:	2301      	movs	r3, #1
 800119a:	431a      	orrs	r2, r3
 800119c:	4b43      	ldr	r3, [pc, #268]	@ (80012ac <__aeabi_ddiv+0x388>)
 800119e:	4453      	add	r3, sl
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	dc00      	bgt.n	80011a6 <__aeabi_ddiv+0x282>
 80011a4:	e0ae      	b.n	8001304 <__aeabi_ddiv+0x3e0>
 80011a6:	0751      	lsls	r1, r2, #29
 80011a8:	d000      	beq.n	80011ac <__aeabi_ddiv+0x288>
 80011aa:	e198      	b.n	80014de <__aeabi_ddiv+0x5ba>
 80011ac:	4659      	mov	r1, fp
 80011ae:	01c9      	lsls	r1, r1, #7
 80011b0:	d506      	bpl.n	80011c0 <__aeabi_ddiv+0x29c>
 80011b2:	4659      	mov	r1, fp
 80011b4:	4b3e      	ldr	r3, [pc, #248]	@ (80012b0 <__aeabi_ddiv+0x38c>)
 80011b6:	4019      	ands	r1, r3
 80011b8:	2380      	movs	r3, #128	@ 0x80
 80011ba:	468b      	mov	fp, r1
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	4453      	add	r3, sl
 80011c0:	493c      	ldr	r1, [pc, #240]	@ (80012b4 <__aeabi_ddiv+0x390>)
 80011c2:	428b      	cmp	r3, r1
 80011c4:	dd00      	ble.n	80011c8 <__aeabi_ddiv+0x2a4>
 80011c6:	e71a      	b.n	8000ffe <__aeabi_ddiv+0xda>
 80011c8:	4659      	mov	r1, fp
 80011ca:	08d2      	lsrs	r2, r2, #3
 80011cc:	0749      	lsls	r1, r1, #29
 80011ce:	4311      	orrs	r1, r2
 80011d0:	465a      	mov	r2, fp
 80011d2:	055b      	lsls	r3, r3, #21
 80011d4:	0254      	lsls	r4, r2, #9
 80011d6:	4688      	mov	r8, r1
 80011d8:	0b24      	lsrs	r4, r4, #12
 80011da:	0d5b      	lsrs	r3, r3, #21
 80011dc:	e702      	b.n	8000fe4 <__aeabi_ddiv+0xc0>
 80011de:	465a      	mov	r2, fp
 80011e0:	9b00      	ldr	r3, [sp, #0]
 80011e2:	431a      	orrs	r2, r3
 80011e4:	d100      	bne.n	80011e8 <__aeabi_ddiv+0x2c4>
 80011e6:	e07e      	b.n	80012e6 <__aeabi_ddiv+0x3c2>
 80011e8:	465b      	mov	r3, fp
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d100      	bne.n	80011f0 <__aeabi_ddiv+0x2cc>
 80011ee:	e100      	b.n	80013f2 <__aeabi_ddiv+0x4ce>
 80011f0:	4658      	mov	r0, fp
 80011f2:	f001 fabb 	bl	800276c <__clzsi2>
 80011f6:	0002      	movs	r2, r0
 80011f8:	0003      	movs	r3, r0
 80011fa:	3a0b      	subs	r2, #11
 80011fc:	271d      	movs	r7, #29
 80011fe:	9e00      	ldr	r6, [sp, #0]
 8001200:	1aba      	subs	r2, r7, r2
 8001202:	0019      	movs	r1, r3
 8001204:	4658      	mov	r0, fp
 8001206:	40d6      	lsrs	r6, r2
 8001208:	3908      	subs	r1, #8
 800120a:	4088      	lsls	r0, r1
 800120c:	0032      	movs	r2, r6
 800120e:	4302      	orrs	r2, r0
 8001210:	4693      	mov	fp, r2
 8001212:	9a00      	ldr	r2, [sp, #0]
 8001214:	408a      	lsls	r2, r1
 8001216:	4928      	ldr	r1, [pc, #160]	@ (80012b8 <__aeabi_ddiv+0x394>)
 8001218:	4453      	add	r3, sl
 800121a:	468a      	mov	sl, r1
 800121c:	449a      	add	sl, r3
 800121e:	2300      	movs	r3, #0
 8001220:	e6c8      	b.n	8000fb4 <__aeabi_ddiv+0x90>
 8001222:	465b      	mov	r3, fp
 8001224:	4303      	orrs	r3, r0
 8001226:	4699      	mov	r9, r3
 8001228:	d056      	beq.n	80012d8 <__aeabi_ddiv+0x3b4>
 800122a:	465b      	mov	r3, fp
 800122c:	2b00      	cmp	r3, #0
 800122e:	d100      	bne.n	8001232 <__aeabi_ddiv+0x30e>
 8001230:	e0cd      	b.n	80013ce <__aeabi_ddiv+0x4aa>
 8001232:	4658      	mov	r0, fp
 8001234:	f001 fa9a 	bl	800276c <__clzsi2>
 8001238:	230b      	movs	r3, #11
 800123a:	425b      	negs	r3, r3
 800123c:	469c      	mov	ip, r3
 800123e:	0002      	movs	r2, r0
 8001240:	4484      	add	ip, r0
 8001242:	4666      	mov	r6, ip
 8001244:	231d      	movs	r3, #29
 8001246:	1b9b      	subs	r3, r3, r6
 8001248:	0026      	movs	r6, r4
 800124a:	0011      	movs	r1, r2
 800124c:	4658      	mov	r0, fp
 800124e:	40de      	lsrs	r6, r3
 8001250:	3908      	subs	r1, #8
 8001252:	4088      	lsls	r0, r1
 8001254:	0033      	movs	r3, r6
 8001256:	4303      	orrs	r3, r0
 8001258:	4699      	mov	r9, r3
 800125a:	0023      	movs	r3, r4
 800125c:	408b      	lsls	r3, r1
 800125e:	4698      	mov	r8, r3
 8001260:	4b16      	ldr	r3, [pc, #88]	@ (80012bc <__aeabi_ddiv+0x398>)
 8001262:	2400      	movs	r4, #0
 8001264:	1a9b      	subs	r3, r3, r2
 8001266:	469a      	mov	sl, r3
 8001268:	2300      	movs	r3, #0
 800126a:	9303      	str	r3, [sp, #12]
 800126c:	e682      	b.n	8000f74 <__aeabi_ddiv+0x50>
 800126e:	465a      	mov	r2, fp
 8001270:	4302      	orrs	r2, r0
 8001272:	4691      	mov	r9, r2
 8001274:	d12a      	bne.n	80012cc <__aeabi_ddiv+0x3a8>
 8001276:	2200      	movs	r2, #0
 8001278:	469a      	mov	sl, r3
 800127a:	2302      	movs	r3, #2
 800127c:	4690      	mov	r8, r2
 800127e:	2408      	movs	r4, #8
 8001280:	9303      	str	r3, [sp, #12]
 8001282:	e677      	b.n	8000f74 <__aeabi_ddiv+0x50>
 8001284:	465a      	mov	r2, fp
 8001286:	9b00      	ldr	r3, [sp, #0]
 8001288:	431a      	orrs	r2, r3
 800128a:	4b0d      	ldr	r3, [pc, #52]	@ (80012c0 <__aeabi_ddiv+0x39c>)
 800128c:	469c      	mov	ip, r3
 800128e:	44e2      	add	sl, ip
 8001290:	2a00      	cmp	r2, #0
 8001292:	d117      	bne.n	80012c4 <__aeabi_ddiv+0x3a0>
 8001294:	2302      	movs	r3, #2
 8001296:	431c      	orrs	r4, r3
 8001298:	2300      	movs	r3, #0
 800129a:	469b      	mov	fp, r3
 800129c:	3302      	adds	r3, #2
 800129e:	e689      	b.n	8000fb4 <__aeabi_ddiv+0x90>
 80012a0:	000007ff 	.word	0x000007ff
 80012a4:	fffffc01 	.word	0xfffffc01
 80012a8:	0800a6bc 	.word	0x0800a6bc
 80012ac:	000003ff 	.word	0x000003ff
 80012b0:	feffffff 	.word	0xfeffffff
 80012b4:	000007fe 	.word	0x000007fe
 80012b8:	000003f3 	.word	0x000003f3
 80012bc:	fffffc0d 	.word	0xfffffc0d
 80012c0:	fffff801 	.word	0xfffff801
 80012c4:	2303      	movs	r3, #3
 80012c6:	0032      	movs	r2, r6
 80012c8:	431c      	orrs	r4, r3
 80012ca:	e673      	b.n	8000fb4 <__aeabi_ddiv+0x90>
 80012cc:	469a      	mov	sl, r3
 80012ce:	2303      	movs	r3, #3
 80012d0:	46d9      	mov	r9, fp
 80012d2:	240c      	movs	r4, #12
 80012d4:	9303      	str	r3, [sp, #12]
 80012d6:	e64d      	b.n	8000f74 <__aeabi_ddiv+0x50>
 80012d8:	2300      	movs	r3, #0
 80012da:	4698      	mov	r8, r3
 80012dc:	469a      	mov	sl, r3
 80012de:	3301      	adds	r3, #1
 80012e0:	2404      	movs	r4, #4
 80012e2:	9303      	str	r3, [sp, #12]
 80012e4:	e646      	b.n	8000f74 <__aeabi_ddiv+0x50>
 80012e6:	2301      	movs	r3, #1
 80012e8:	431c      	orrs	r4, r3
 80012ea:	2300      	movs	r3, #0
 80012ec:	469b      	mov	fp, r3
 80012ee:	3301      	adds	r3, #1
 80012f0:	e660      	b.n	8000fb4 <__aeabi_ddiv+0x90>
 80012f2:	2300      	movs	r3, #0
 80012f4:	2480      	movs	r4, #128	@ 0x80
 80012f6:	4698      	mov	r8, r3
 80012f8:	2600      	movs	r6, #0
 80012fa:	4b92      	ldr	r3, [pc, #584]	@ (8001544 <__aeabi_ddiv+0x620>)
 80012fc:	0324      	lsls	r4, r4, #12
 80012fe:	e671      	b.n	8000fe4 <__aeabi_ddiv+0xc0>
 8001300:	2201      	movs	r2, #1
 8001302:	4252      	negs	r2, r2
 8001304:	2101      	movs	r1, #1
 8001306:	1ac9      	subs	r1, r1, r3
 8001308:	2938      	cmp	r1, #56	@ 0x38
 800130a:	dd00      	ble.n	800130e <__aeabi_ddiv+0x3ea>
 800130c:	e666      	b.n	8000fdc <__aeabi_ddiv+0xb8>
 800130e:	291f      	cmp	r1, #31
 8001310:	dc00      	bgt.n	8001314 <__aeabi_ddiv+0x3f0>
 8001312:	e0ab      	b.n	800146c <__aeabi_ddiv+0x548>
 8001314:	201f      	movs	r0, #31
 8001316:	4240      	negs	r0, r0
 8001318:	1ac3      	subs	r3, r0, r3
 800131a:	4658      	mov	r0, fp
 800131c:	40d8      	lsrs	r0, r3
 800131e:	0003      	movs	r3, r0
 8001320:	2920      	cmp	r1, #32
 8001322:	d004      	beq.n	800132e <__aeabi_ddiv+0x40a>
 8001324:	4658      	mov	r0, fp
 8001326:	4988      	ldr	r1, [pc, #544]	@ (8001548 <__aeabi_ddiv+0x624>)
 8001328:	4451      	add	r1, sl
 800132a:	4088      	lsls	r0, r1
 800132c:	4302      	orrs	r2, r0
 800132e:	1e51      	subs	r1, r2, #1
 8001330:	418a      	sbcs	r2, r1
 8001332:	431a      	orrs	r2, r3
 8001334:	2307      	movs	r3, #7
 8001336:	0019      	movs	r1, r3
 8001338:	2400      	movs	r4, #0
 800133a:	4011      	ands	r1, r2
 800133c:	4213      	tst	r3, r2
 800133e:	d00c      	beq.n	800135a <__aeabi_ddiv+0x436>
 8001340:	230f      	movs	r3, #15
 8001342:	4013      	ands	r3, r2
 8001344:	2b04      	cmp	r3, #4
 8001346:	d100      	bne.n	800134a <__aeabi_ddiv+0x426>
 8001348:	e0f9      	b.n	800153e <__aeabi_ddiv+0x61a>
 800134a:	1d11      	adds	r1, r2, #4
 800134c:	4291      	cmp	r1, r2
 800134e:	419b      	sbcs	r3, r3
 8001350:	000a      	movs	r2, r1
 8001352:	425b      	negs	r3, r3
 8001354:	0759      	lsls	r1, r3, #29
 8001356:	025b      	lsls	r3, r3, #9
 8001358:	0b1c      	lsrs	r4, r3, #12
 800135a:	08d2      	lsrs	r2, r2, #3
 800135c:	430a      	orrs	r2, r1
 800135e:	4690      	mov	r8, r2
 8001360:	2300      	movs	r3, #0
 8001362:	e63f      	b.n	8000fe4 <__aeabi_ddiv+0xc0>
 8001364:	2480      	movs	r4, #128	@ 0x80
 8001366:	464b      	mov	r3, r9
 8001368:	0324      	lsls	r4, r4, #12
 800136a:	4223      	tst	r3, r4
 800136c:	d009      	beq.n	8001382 <__aeabi_ddiv+0x45e>
 800136e:	465b      	mov	r3, fp
 8001370:	4223      	tst	r3, r4
 8001372:	d106      	bne.n	8001382 <__aeabi_ddiv+0x45e>
 8001374:	431c      	orrs	r4, r3
 8001376:	0324      	lsls	r4, r4, #12
 8001378:	002e      	movs	r6, r5
 800137a:	4690      	mov	r8, r2
 800137c:	4b71      	ldr	r3, [pc, #452]	@ (8001544 <__aeabi_ddiv+0x620>)
 800137e:	0b24      	lsrs	r4, r4, #12
 8001380:	e630      	b.n	8000fe4 <__aeabi_ddiv+0xc0>
 8001382:	2480      	movs	r4, #128	@ 0x80
 8001384:	464b      	mov	r3, r9
 8001386:	0324      	lsls	r4, r4, #12
 8001388:	431c      	orrs	r4, r3
 800138a:	0324      	lsls	r4, r4, #12
 800138c:	9e02      	ldr	r6, [sp, #8]
 800138e:	4b6d      	ldr	r3, [pc, #436]	@ (8001544 <__aeabi_ddiv+0x620>)
 8001390:	0b24      	lsrs	r4, r4, #12
 8001392:	e627      	b.n	8000fe4 <__aeabi_ddiv+0xc0>
 8001394:	2b00      	cmp	r3, #0
 8001396:	d100      	bne.n	800139a <__aeabi_ddiv+0x476>
 8001398:	e700      	b.n	800119c <__aeabi_ddiv+0x278>
 800139a:	9800      	ldr	r0, [sp, #0]
 800139c:	1e51      	subs	r1, r2, #1
 800139e:	4684      	mov	ip, r0
 80013a0:	4464      	add	r4, ip
 80013a2:	4284      	cmp	r4, r0
 80013a4:	d200      	bcs.n	80013a8 <__aeabi_ddiv+0x484>
 80013a6:	e084      	b.n	80014b2 <__aeabi_ddiv+0x58e>
 80013a8:	42bc      	cmp	r4, r7
 80013aa:	d200      	bcs.n	80013ae <__aeabi_ddiv+0x48a>
 80013ac:	e0ae      	b.n	800150c <__aeabi_ddiv+0x5e8>
 80013ae:	d100      	bne.n	80013b2 <__aeabi_ddiv+0x48e>
 80013b0:	e0c1      	b.n	8001536 <__aeabi_ddiv+0x612>
 80013b2:	000a      	movs	r2, r1
 80013b4:	e6f0      	b.n	8001198 <__aeabi_ddiv+0x274>
 80013b6:	4542      	cmp	r2, r8
 80013b8:	d900      	bls.n	80013bc <__aeabi_ddiv+0x498>
 80013ba:	e62c      	b.n	8001016 <__aeabi_ddiv+0xf2>
 80013bc:	464b      	mov	r3, r9
 80013be:	07dc      	lsls	r4, r3, #31
 80013c0:	0858      	lsrs	r0, r3, #1
 80013c2:	4643      	mov	r3, r8
 80013c4:	085b      	lsrs	r3, r3, #1
 80013c6:	431c      	orrs	r4, r3
 80013c8:	4643      	mov	r3, r8
 80013ca:	07df      	lsls	r7, r3, #31
 80013cc:	e62a      	b.n	8001024 <__aeabi_ddiv+0x100>
 80013ce:	f001 f9cd 	bl	800276c <__clzsi2>
 80013d2:	2315      	movs	r3, #21
 80013d4:	469c      	mov	ip, r3
 80013d6:	4484      	add	ip, r0
 80013d8:	0002      	movs	r2, r0
 80013da:	4663      	mov	r3, ip
 80013dc:	3220      	adds	r2, #32
 80013de:	2b1c      	cmp	r3, #28
 80013e0:	dc00      	bgt.n	80013e4 <__aeabi_ddiv+0x4c0>
 80013e2:	e72e      	b.n	8001242 <__aeabi_ddiv+0x31e>
 80013e4:	0023      	movs	r3, r4
 80013e6:	3808      	subs	r0, #8
 80013e8:	4083      	lsls	r3, r0
 80013ea:	4699      	mov	r9, r3
 80013ec:	2300      	movs	r3, #0
 80013ee:	4698      	mov	r8, r3
 80013f0:	e736      	b.n	8001260 <__aeabi_ddiv+0x33c>
 80013f2:	f001 f9bb 	bl	800276c <__clzsi2>
 80013f6:	0002      	movs	r2, r0
 80013f8:	0003      	movs	r3, r0
 80013fa:	3215      	adds	r2, #21
 80013fc:	3320      	adds	r3, #32
 80013fe:	2a1c      	cmp	r2, #28
 8001400:	dc00      	bgt.n	8001404 <__aeabi_ddiv+0x4e0>
 8001402:	e6fb      	b.n	80011fc <__aeabi_ddiv+0x2d8>
 8001404:	9900      	ldr	r1, [sp, #0]
 8001406:	3808      	subs	r0, #8
 8001408:	4081      	lsls	r1, r0
 800140a:	2200      	movs	r2, #0
 800140c:	468b      	mov	fp, r1
 800140e:	e702      	b.n	8001216 <__aeabi_ddiv+0x2f2>
 8001410:	9900      	ldr	r1, [sp, #0]
 8001412:	3b01      	subs	r3, #1
 8001414:	468c      	mov	ip, r1
 8001416:	4464      	add	r4, ip
 8001418:	42a1      	cmp	r1, r4
 800141a:	d900      	bls.n	800141e <__aeabi_ddiv+0x4fa>
 800141c:	e69a      	b.n	8001154 <__aeabi_ddiv+0x230>
 800141e:	42a2      	cmp	r2, r4
 8001420:	d800      	bhi.n	8001424 <__aeabi_ddiv+0x500>
 8001422:	e697      	b.n	8001154 <__aeabi_ddiv+0x230>
 8001424:	1e83      	subs	r3, r0, #2
 8001426:	4464      	add	r4, ip
 8001428:	e694      	b.n	8001154 <__aeabi_ddiv+0x230>
 800142a:	46ac      	mov	ip, r5
 800142c:	4461      	add	r1, ip
 800142e:	3f01      	subs	r7, #1
 8001430:	428d      	cmp	r5, r1
 8001432:	d900      	bls.n	8001436 <__aeabi_ddiv+0x512>
 8001434:	e680      	b.n	8001138 <__aeabi_ddiv+0x214>
 8001436:	428a      	cmp	r2, r1
 8001438:	d800      	bhi.n	800143c <__aeabi_ddiv+0x518>
 800143a:	e67d      	b.n	8001138 <__aeabi_ddiv+0x214>
 800143c:	1e87      	subs	r7, r0, #2
 800143e:	4461      	add	r1, ip
 8001440:	e67a      	b.n	8001138 <__aeabi_ddiv+0x214>
 8001442:	4285      	cmp	r5, r0
 8001444:	d000      	beq.n	8001448 <__aeabi_ddiv+0x524>
 8001446:	e65f      	b.n	8001108 <__aeabi_ddiv+0x1e4>
 8001448:	45b9      	cmp	r9, r7
 800144a:	d900      	bls.n	800144e <__aeabi_ddiv+0x52a>
 800144c:	e65c      	b.n	8001108 <__aeabi_ddiv+0x1e4>
 800144e:	e656      	b.n	80010fe <__aeabi_ddiv+0x1da>
 8001450:	42a2      	cmp	r2, r4
 8001452:	d800      	bhi.n	8001456 <__aeabi_ddiv+0x532>
 8001454:	e61a      	b.n	800108c <__aeabi_ddiv+0x168>
 8001456:	1e83      	subs	r3, r0, #2
 8001458:	4464      	add	r4, ip
 800145a:	e617      	b.n	800108c <__aeabi_ddiv+0x168>
 800145c:	428a      	cmp	r2, r1
 800145e:	d800      	bhi.n	8001462 <__aeabi_ddiv+0x53e>
 8001460:	e600      	b.n	8001064 <__aeabi_ddiv+0x140>
 8001462:	46ac      	mov	ip, r5
 8001464:	1e83      	subs	r3, r0, #2
 8001466:	4698      	mov	r8, r3
 8001468:	4461      	add	r1, ip
 800146a:	e5fb      	b.n	8001064 <__aeabi_ddiv+0x140>
 800146c:	4837      	ldr	r0, [pc, #220]	@ (800154c <__aeabi_ddiv+0x628>)
 800146e:	0014      	movs	r4, r2
 8001470:	4450      	add	r0, sl
 8001472:	4082      	lsls	r2, r0
 8001474:	465b      	mov	r3, fp
 8001476:	0017      	movs	r7, r2
 8001478:	4083      	lsls	r3, r0
 800147a:	40cc      	lsrs	r4, r1
 800147c:	1e7a      	subs	r2, r7, #1
 800147e:	4197      	sbcs	r7, r2
 8001480:	4323      	orrs	r3, r4
 8001482:	433b      	orrs	r3, r7
 8001484:	001a      	movs	r2, r3
 8001486:	465b      	mov	r3, fp
 8001488:	40cb      	lsrs	r3, r1
 800148a:	0751      	lsls	r1, r2, #29
 800148c:	d009      	beq.n	80014a2 <__aeabi_ddiv+0x57e>
 800148e:	210f      	movs	r1, #15
 8001490:	4011      	ands	r1, r2
 8001492:	2904      	cmp	r1, #4
 8001494:	d005      	beq.n	80014a2 <__aeabi_ddiv+0x57e>
 8001496:	1d11      	adds	r1, r2, #4
 8001498:	4291      	cmp	r1, r2
 800149a:	4192      	sbcs	r2, r2
 800149c:	4252      	negs	r2, r2
 800149e:	189b      	adds	r3, r3, r2
 80014a0:	000a      	movs	r2, r1
 80014a2:	0219      	lsls	r1, r3, #8
 80014a4:	d400      	bmi.n	80014a8 <__aeabi_ddiv+0x584>
 80014a6:	e755      	b.n	8001354 <__aeabi_ddiv+0x430>
 80014a8:	2200      	movs	r2, #0
 80014aa:	2301      	movs	r3, #1
 80014ac:	2400      	movs	r4, #0
 80014ae:	4690      	mov	r8, r2
 80014b0:	e598      	b.n	8000fe4 <__aeabi_ddiv+0xc0>
 80014b2:	000a      	movs	r2, r1
 80014b4:	42bc      	cmp	r4, r7
 80014b6:	d000      	beq.n	80014ba <__aeabi_ddiv+0x596>
 80014b8:	e66e      	b.n	8001198 <__aeabi_ddiv+0x274>
 80014ba:	454b      	cmp	r3, r9
 80014bc:	d000      	beq.n	80014c0 <__aeabi_ddiv+0x59c>
 80014be:	e66b      	b.n	8001198 <__aeabi_ddiv+0x274>
 80014c0:	e66c      	b.n	800119c <__aeabi_ddiv+0x278>
 80014c2:	4b23      	ldr	r3, [pc, #140]	@ (8001550 <__aeabi_ddiv+0x62c>)
 80014c4:	4a23      	ldr	r2, [pc, #140]	@ (8001554 <__aeabi_ddiv+0x630>)
 80014c6:	4453      	add	r3, sl
 80014c8:	4592      	cmp	sl, r2
 80014ca:	da00      	bge.n	80014ce <__aeabi_ddiv+0x5aa>
 80014cc:	e718      	b.n	8001300 <__aeabi_ddiv+0x3dc>
 80014ce:	2101      	movs	r1, #1
 80014d0:	4249      	negs	r1, r1
 80014d2:	1d0a      	adds	r2, r1, #4
 80014d4:	428a      	cmp	r2, r1
 80014d6:	4189      	sbcs	r1, r1
 80014d8:	4249      	negs	r1, r1
 80014da:	448b      	add	fp, r1
 80014dc:	e666      	b.n	80011ac <__aeabi_ddiv+0x288>
 80014de:	210f      	movs	r1, #15
 80014e0:	4011      	ands	r1, r2
 80014e2:	2904      	cmp	r1, #4
 80014e4:	d100      	bne.n	80014e8 <__aeabi_ddiv+0x5c4>
 80014e6:	e661      	b.n	80011ac <__aeabi_ddiv+0x288>
 80014e8:	0011      	movs	r1, r2
 80014ea:	e7f2      	b.n	80014d2 <__aeabi_ddiv+0x5ae>
 80014ec:	42bc      	cmp	r4, r7
 80014ee:	d800      	bhi.n	80014f2 <__aeabi_ddiv+0x5ce>
 80014f0:	e60a      	b.n	8001108 <__aeabi_ddiv+0x1e4>
 80014f2:	2302      	movs	r3, #2
 80014f4:	425b      	negs	r3, r3
 80014f6:	469c      	mov	ip, r3
 80014f8:	9900      	ldr	r1, [sp, #0]
 80014fa:	444f      	add	r7, r9
 80014fc:	454f      	cmp	r7, r9
 80014fe:	419b      	sbcs	r3, r3
 8001500:	44e3      	add	fp, ip
 8001502:	468c      	mov	ip, r1
 8001504:	425b      	negs	r3, r3
 8001506:	4463      	add	r3, ip
 8001508:	18c0      	adds	r0, r0, r3
 800150a:	e5ff      	b.n	800110c <__aeabi_ddiv+0x1e8>
 800150c:	4649      	mov	r1, r9
 800150e:	9d00      	ldr	r5, [sp, #0]
 8001510:	0048      	lsls	r0, r1, #1
 8001512:	4548      	cmp	r0, r9
 8001514:	4189      	sbcs	r1, r1
 8001516:	46ac      	mov	ip, r5
 8001518:	4249      	negs	r1, r1
 800151a:	4461      	add	r1, ip
 800151c:	4681      	mov	r9, r0
 800151e:	3a02      	subs	r2, #2
 8001520:	1864      	adds	r4, r4, r1
 8001522:	e7c7      	b.n	80014b4 <__aeabi_ddiv+0x590>
 8001524:	2480      	movs	r4, #128	@ 0x80
 8001526:	465b      	mov	r3, fp
 8001528:	0324      	lsls	r4, r4, #12
 800152a:	431c      	orrs	r4, r3
 800152c:	0324      	lsls	r4, r4, #12
 800152e:	4690      	mov	r8, r2
 8001530:	4b04      	ldr	r3, [pc, #16]	@ (8001544 <__aeabi_ddiv+0x620>)
 8001532:	0b24      	lsrs	r4, r4, #12
 8001534:	e556      	b.n	8000fe4 <__aeabi_ddiv+0xc0>
 8001536:	4599      	cmp	r9, r3
 8001538:	d3e8      	bcc.n	800150c <__aeabi_ddiv+0x5e8>
 800153a:	000a      	movs	r2, r1
 800153c:	e7bd      	b.n	80014ba <__aeabi_ddiv+0x596>
 800153e:	2300      	movs	r3, #0
 8001540:	e708      	b.n	8001354 <__aeabi_ddiv+0x430>
 8001542:	46c0      	nop			@ (mov r8, r8)
 8001544:	000007ff 	.word	0x000007ff
 8001548:	0000043e 	.word	0x0000043e
 800154c:	0000041e 	.word	0x0000041e
 8001550:	000003ff 	.word	0x000003ff
 8001554:	fffffc02 	.word	0xfffffc02

08001558 <__eqdf2>:
 8001558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155a:	4657      	mov	r7, sl
 800155c:	46de      	mov	lr, fp
 800155e:	464e      	mov	r6, r9
 8001560:	4645      	mov	r5, r8
 8001562:	b5e0      	push	{r5, r6, r7, lr}
 8001564:	000d      	movs	r5, r1
 8001566:	0004      	movs	r4, r0
 8001568:	0fe8      	lsrs	r0, r5, #31
 800156a:	4683      	mov	fp, r0
 800156c:	0309      	lsls	r1, r1, #12
 800156e:	0fd8      	lsrs	r0, r3, #31
 8001570:	0b09      	lsrs	r1, r1, #12
 8001572:	4682      	mov	sl, r0
 8001574:	4819      	ldr	r0, [pc, #100]	@ (80015dc <__eqdf2+0x84>)
 8001576:	468c      	mov	ip, r1
 8001578:	031f      	lsls	r7, r3, #12
 800157a:	0069      	lsls	r1, r5, #1
 800157c:	005e      	lsls	r6, r3, #1
 800157e:	0d49      	lsrs	r1, r1, #21
 8001580:	0b3f      	lsrs	r7, r7, #12
 8001582:	0d76      	lsrs	r6, r6, #21
 8001584:	4281      	cmp	r1, r0
 8001586:	d018      	beq.n	80015ba <__eqdf2+0x62>
 8001588:	4286      	cmp	r6, r0
 800158a:	d00f      	beq.n	80015ac <__eqdf2+0x54>
 800158c:	2001      	movs	r0, #1
 800158e:	42b1      	cmp	r1, r6
 8001590:	d10d      	bne.n	80015ae <__eqdf2+0x56>
 8001592:	45bc      	cmp	ip, r7
 8001594:	d10b      	bne.n	80015ae <__eqdf2+0x56>
 8001596:	4294      	cmp	r4, r2
 8001598:	d109      	bne.n	80015ae <__eqdf2+0x56>
 800159a:	45d3      	cmp	fp, sl
 800159c:	d01c      	beq.n	80015d8 <__eqdf2+0x80>
 800159e:	2900      	cmp	r1, #0
 80015a0:	d105      	bne.n	80015ae <__eqdf2+0x56>
 80015a2:	4660      	mov	r0, ip
 80015a4:	4320      	orrs	r0, r4
 80015a6:	1e43      	subs	r3, r0, #1
 80015a8:	4198      	sbcs	r0, r3
 80015aa:	e000      	b.n	80015ae <__eqdf2+0x56>
 80015ac:	2001      	movs	r0, #1
 80015ae:	bcf0      	pop	{r4, r5, r6, r7}
 80015b0:	46bb      	mov	fp, r7
 80015b2:	46b2      	mov	sl, r6
 80015b4:	46a9      	mov	r9, r5
 80015b6:	46a0      	mov	r8, r4
 80015b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015ba:	2001      	movs	r0, #1
 80015bc:	428e      	cmp	r6, r1
 80015be:	d1f6      	bne.n	80015ae <__eqdf2+0x56>
 80015c0:	4661      	mov	r1, ip
 80015c2:	4339      	orrs	r1, r7
 80015c4:	000f      	movs	r7, r1
 80015c6:	4317      	orrs	r7, r2
 80015c8:	4327      	orrs	r7, r4
 80015ca:	d1f0      	bne.n	80015ae <__eqdf2+0x56>
 80015cc:	465b      	mov	r3, fp
 80015ce:	4652      	mov	r2, sl
 80015d0:	1a98      	subs	r0, r3, r2
 80015d2:	1e43      	subs	r3, r0, #1
 80015d4:	4198      	sbcs	r0, r3
 80015d6:	e7ea      	b.n	80015ae <__eqdf2+0x56>
 80015d8:	2000      	movs	r0, #0
 80015da:	e7e8      	b.n	80015ae <__eqdf2+0x56>
 80015dc:	000007ff 	.word	0x000007ff

080015e0 <__gedf2>:
 80015e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015e2:	4657      	mov	r7, sl
 80015e4:	464e      	mov	r6, r9
 80015e6:	4645      	mov	r5, r8
 80015e8:	46de      	mov	lr, fp
 80015ea:	b5e0      	push	{r5, r6, r7, lr}
 80015ec:	000d      	movs	r5, r1
 80015ee:	030f      	lsls	r7, r1, #12
 80015f0:	0b39      	lsrs	r1, r7, #12
 80015f2:	b083      	sub	sp, #12
 80015f4:	0004      	movs	r4, r0
 80015f6:	4680      	mov	r8, r0
 80015f8:	9101      	str	r1, [sp, #4]
 80015fa:	0058      	lsls	r0, r3, #1
 80015fc:	0fe9      	lsrs	r1, r5, #31
 80015fe:	4f31      	ldr	r7, [pc, #196]	@ (80016c4 <__gedf2+0xe4>)
 8001600:	0d40      	lsrs	r0, r0, #21
 8001602:	468c      	mov	ip, r1
 8001604:	006e      	lsls	r6, r5, #1
 8001606:	0319      	lsls	r1, r3, #12
 8001608:	4682      	mov	sl, r0
 800160a:	4691      	mov	r9, r2
 800160c:	0d76      	lsrs	r6, r6, #21
 800160e:	0b09      	lsrs	r1, r1, #12
 8001610:	0fd8      	lsrs	r0, r3, #31
 8001612:	42be      	cmp	r6, r7
 8001614:	d01f      	beq.n	8001656 <__gedf2+0x76>
 8001616:	45ba      	cmp	sl, r7
 8001618:	d00f      	beq.n	800163a <__gedf2+0x5a>
 800161a:	2e00      	cmp	r6, #0
 800161c:	d12f      	bne.n	800167e <__gedf2+0x9e>
 800161e:	4655      	mov	r5, sl
 8001620:	9e01      	ldr	r6, [sp, #4]
 8001622:	4334      	orrs	r4, r6
 8001624:	2d00      	cmp	r5, #0
 8001626:	d127      	bne.n	8001678 <__gedf2+0x98>
 8001628:	430a      	orrs	r2, r1
 800162a:	d03a      	beq.n	80016a2 <__gedf2+0xc2>
 800162c:	2c00      	cmp	r4, #0
 800162e:	d145      	bne.n	80016bc <__gedf2+0xdc>
 8001630:	2800      	cmp	r0, #0
 8001632:	d11a      	bne.n	800166a <__gedf2+0x8a>
 8001634:	2001      	movs	r0, #1
 8001636:	4240      	negs	r0, r0
 8001638:	e017      	b.n	800166a <__gedf2+0x8a>
 800163a:	4311      	orrs	r1, r2
 800163c:	d13b      	bne.n	80016b6 <__gedf2+0xd6>
 800163e:	2e00      	cmp	r6, #0
 8001640:	d102      	bne.n	8001648 <__gedf2+0x68>
 8001642:	9f01      	ldr	r7, [sp, #4]
 8001644:	4327      	orrs	r7, r4
 8001646:	d0f3      	beq.n	8001630 <__gedf2+0x50>
 8001648:	4584      	cmp	ip, r0
 800164a:	d109      	bne.n	8001660 <__gedf2+0x80>
 800164c:	4663      	mov	r3, ip
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <__gedf2+0x54>
 8001652:	4660      	mov	r0, ip
 8001654:	e009      	b.n	800166a <__gedf2+0x8a>
 8001656:	9f01      	ldr	r7, [sp, #4]
 8001658:	4327      	orrs	r7, r4
 800165a:	d12c      	bne.n	80016b6 <__gedf2+0xd6>
 800165c:	45b2      	cmp	sl, r6
 800165e:	d024      	beq.n	80016aa <__gedf2+0xca>
 8001660:	4663      	mov	r3, ip
 8001662:	2002      	movs	r0, #2
 8001664:	3b01      	subs	r3, #1
 8001666:	4018      	ands	r0, r3
 8001668:	3801      	subs	r0, #1
 800166a:	b003      	add	sp, #12
 800166c:	bcf0      	pop	{r4, r5, r6, r7}
 800166e:	46bb      	mov	fp, r7
 8001670:	46b2      	mov	sl, r6
 8001672:	46a9      	mov	r9, r5
 8001674:	46a0      	mov	r8, r4
 8001676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001678:	2c00      	cmp	r4, #0
 800167a:	d0d9      	beq.n	8001630 <__gedf2+0x50>
 800167c:	e7e4      	b.n	8001648 <__gedf2+0x68>
 800167e:	4654      	mov	r4, sl
 8001680:	2c00      	cmp	r4, #0
 8001682:	d0ed      	beq.n	8001660 <__gedf2+0x80>
 8001684:	4584      	cmp	ip, r0
 8001686:	d1eb      	bne.n	8001660 <__gedf2+0x80>
 8001688:	4556      	cmp	r6, sl
 800168a:	dce9      	bgt.n	8001660 <__gedf2+0x80>
 800168c:	dbde      	blt.n	800164c <__gedf2+0x6c>
 800168e:	9b01      	ldr	r3, [sp, #4]
 8001690:	428b      	cmp	r3, r1
 8001692:	d8e5      	bhi.n	8001660 <__gedf2+0x80>
 8001694:	d1da      	bne.n	800164c <__gedf2+0x6c>
 8001696:	45c8      	cmp	r8, r9
 8001698:	d8e2      	bhi.n	8001660 <__gedf2+0x80>
 800169a:	2000      	movs	r0, #0
 800169c:	45c8      	cmp	r8, r9
 800169e:	d2e4      	bcs.n	800166a <__gedf2+0x8a>
 80016a0:	e7d4      	b.n	800164c <__gedf2+0x6c>
 80016a2:	2000      	movs	r0, #0
 80016a4:	2c00      	cmp	r4, #0
 80016a6:	d0e0      	beq.n	800166a <__gedf2+0x8a>
 80016a8:	e7da      	b.n	8001660 <__gedf2+0x80>
 80016aa:	4311      	orrs	r1, r2
 80016ac:	d103      	bne.n	80016b6 <__gedf2+0xd6>
 80016ae:	4584      	cmp	ip, r0
 80016b0:	d1d6      	bne.n	8001660 <__gedf2+0x80>
 80016b2:	2000      	movs	r0, #0
 80016b4:	e7d9      	b.n	800166a <__gedf2+0x8a>
 80016b6:	2002      	movs	r0, #2
 80016b8:	4240      	negs	r0, r0
 80016ba:	e7d6      	b.n	800166a <__gedf2+0x8a>
 80016bc:	4584      	cmp	ip, r0
 80016be:	d0e6      	beq.n	800168e <__gedf2+0xae>
 80016c0:	e7ce      	b.n	8001660 <__gedf2+0x80>
 80016c2:	46c0      	nop			@ (mov r8, r8)
 80016c4:	000007ff 	.word	0x000007ff

080016c8 <__ledf2>:
 80016c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ca:	4657      	mov	r7, sl
 80016cc:	464e      	mov	r6, r9
 80016ce:	4645      	mov	r5, r8
 80016d0:	46de      	mov	lr, fp
 80016d2:	b5e0      	push	{r5, r6, r7, lr}
 80016d4:	000d      	movs	r5, r1
 80016d6:	030f      	lsls	r7, r1, #12
 80016d8:	0004      	movs	r4, r0
 80016da:	4680      	mov	r8, r0
 80016dc:	0fe8      	lsrs	r0, r5, #31
 80016de:	0b39      	lsrs	r1, r7, #12
 80016e0:	4684      	mov	ip, r0
 80016e2:	b083      	sub	sp, #12
 80016e4:	0058      	lsls	r0, r3, #1
 80016e6:	4f30      	ldr	r7, [pc, #192]	@ (80017a8 <__ledf2+0xe0>)
 80016e8:	0d40      	lsrs	r0, r0, #21
 80016ea:	9101      	str	r1, [sp, #4]
 80016ec:	031e      	lsls	r6, r3, #12
 80016ee:	0069      	lsls	r1, r5, #1
 80016f0:	4682      	mov	sl, r0
 80016f2:	4691      	mov	r9, r2
 80016f4:	0d49      	lsrs	r1, r1, #21
 80016f6:	0b36      	lsrs	r6, r6, #12
 80016f8:	0fd8      	lsrs	r0, r3, #31
 80016fa:	42b9      	cmp	r1, r7
 80016fc:	d020      	beq.n	8001740 <__ledf2+0x78>
 80016fe:	45ba      	cmp	sl, r7
 8001700:	d00f      	beq.n	8001722 <__ledf2+0x5a>
 8001702:	2900      	cmp	r1, #0
 8001704:	d12b      	bne.n	800175e <__ledf2+0x96>
 8001706:	9901      	ldr	r1, [sp, #4]
 8001708:	430c      	orrs	r4, r1
 800170a:	4651      	mov	r1, sl
 800170c:	2900      	cmp	r1, #0
 800170e:	d137      	bne.n	8001780 <__ledf2+0xb8>
 8001710:	4332      	orrs	r2, r6
 8001712:	d038      	beq.n	8001786 <__ledf2+0xbe>
 8001714:	2c00      	cmp	r4, #0
 8001716:	d144      	bne.n	80017a2 <__ledf2+0xda>
 8001718:	2800      	cmp	r0, #0
 800171a:	d119      	bne.n	8001750 <__ledf2+0x88>
 800171c:	2001      	movs	r0, #1
 800171e:	4240      	negs	r0, r0
 8001720:	e016      	b.n	8001750 <__ledf2+0x88>
 8001722:	4316      	orrs	r6, r2
 8001724:	d113      	bne.n	800174e <__ledf2+0x86>
 8001726:	2900      	cmp	r1, #0
 8001728:	d102      	bne.n	8001730 <__ledf2+0x68>
 800172a:	9f01      	ldr	r7, [sp, #4]
 800172c:	4327      	orrs	r7, r4
 800172e:	d0f3      	beq.n	8001718 <__ledf2+0x50>
 8001730:	4584      	cmp	ip, r0
 8001732:	d020      	beq.n	8001776 <__ledf2+0xae>
 8001734:	4663      	mov	r3, ip
 8001736:	2002      	movs	r0, #2
 8001738:	3b01      	subs	r3, #1
 800173a:	4018      	ands	r0, r3
 800173c:	3801      	subs	r0, #1
 800173e:	e007      	b.n	8001750 <__ledf2+0x88>
 8001740:	9f01      	ldr	r7, [sp, #4]
 8001742:	4327      	orrs	r7, r4
 8001744:	d103      	bne.n	800174e <__ledf2+0x86>
 8001746:	458a      	cmp	sl, r1
 8001748:	d1f4      	bne.n	8001734 <__ledf2+0x6c>
 800174a:	4316      	orrs	r6, r2
 800174c:	d01f      	beq.n	800178e <__ledf2+0xc6>
 800174e:	2002      	movs	r0, #2
 8001750:	b003      	add	sp, #12
 8001752:	bcf0      	pop	{r4, r5, r6, r7}
 8001754:	46bb      	mov	fp, r7
 8001756:	46b2      	mov	sl, r6
 8001758:	46a9      	mov	r9, r5
 800175a:	46a0      	mov	r8, r4
 800175c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800175e:	4654      	mov	r4, sl
 8001760:	2c00      	cmp	r4, #0
 8001762:	d0e7      	beq.n	8001734 <__ledf2+0x6c>
 8001764:	4584      	cmp	ip, r0
 8001766:	d1e5      	bne.n	8001734 <__ledf2+0x6c>
 8001768:	4551      	cmp	r1, sl
 800176a:	dce3      	bgt.n	8001734 <__ledf2+0x6c>
 800176c:	db03      	blt.n	8001776 <__ledf2+0xae>
 800176e:	9b01      	ldr	r3, [sp, #4]
 8001770:	42b3      	cmp	r3, r6
 8001772:	d8df      	bhi.n	8001734 <__ledf2+0x6c>
 8001774:	d00f      	beq.n	8001796 <__ledf2+0xce>
 8001776:	4663      	mov	r3, ip
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0cf      	beq.n	800171c <__ledf2+0x54>
 800177c:	4660      	mov	r0, ip
 800177e:	e7e7      	b.n	8001750 <__ledf2+0x88>
 8001780:	2c00      	cmp	r4, #0
 8001782:	d0c9      	beq.n	8001718 <__ledf2+0x50>
 8001784:	e7d4      	b.n	8001730 <__ledf2+0x68>
 8001786:	2000      	movs	r0, #0
 8001788:	2c00      	cmp	r4, #0
 800178a:	d0e1      	beq.n	8001750 <__ledf2+0x88>
 800178c:	e7d2      	b.n	8001734 <__ledf2+0x6c>
 800178e:	4584      	cmp	ip, r0
 8001790:	d1d0      	bne.n	8001734 <__ledf2+0x6c>
 8001792:	2000      	movs	r0, #0
 8001794:	e7dc      	b.n	8001750 <__ledf2+0x88>
 8001796:	45c8      	cmp	r8, r9
 8001798:	d8cc      	bhi.n	8001734 <__ledf2+0x6c>
 800179a:	2000      	movs	r0, #0
 800179c:	45c8      	cmp	r8, r9
 800179e:	d2d7      	bcs.n	8001750 <__ledf2+0x88>
 80017a0:	e7e9      	b.n	8001776 <__ledf2+0xae>
 80017a2:	4584      	cmp	ip, r0
 80017a4:	d0e3      	beq.n	800176e <__ledf2+0xa6>
 80017a6:	e7c5      	b.n	8001734 <__ledf2+0x6c>
 80017a8:	000007ff 	.word	0x000007ff

080017ac <__aeabi_dmul>:
 80017ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ae:	4657      	mov	r7, sl
 80017b0:	46de      	mov	lr, fp
 80017b2:	464e      	mov	r6, r9
 80017b4:	4645      	mov	r5, r8
 80017b6:	b5e0      	push	{r5, r6, r7, lr}
 80017b8:	001f      	movs	r7, r3
 80017ba:	030b      	lsls	r3, r1, #12
 80017bc:	0b1b      	lsrs	r3, r3, #12
 80017be:	0016      	movs	r6, r2
 80017c0:	469a      	mov	sl, r3
 80017c2:	0fca      	lsrs	r2, r1, #31
 80017c4:	004b      	lsls	r3, r1, #1
 80017c6:	0004      	movs	r4, r0
 80017c8:	4693      	mov	fp, r2
 80017ca:	b087      	sub	sp, #28
 80017cc:	0d5b      	lsrs	r3, r3, #21
 80017ce:	d100      	bne.n	80017d2 <__aeabi_dmul+0x26>
 80017d0:	e0d5      	b.n	800197e <__aeabi_dmul+0x1d2>
 80017d2:	4abb      	ldr	r2, [pc, #748]	@ (8001ac0 <__aeabi_dmul+0x314>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d100      	bne.n	80017da <__aeabi_dmul+0x2e>
 80017d8:	e0f8      	b.n	80019cc <__aeabi_dmul+0x220>
 80017da:	4651      	mov	r1, sl
 80017dc:	0f42      	lsrs	r2, r0, #29
 80017de:	00c9      	lsls	r1, r1, #3
 80017e0:	430a      	orrs	r2, r1
 80017e2:	2180      	movs	r1, #128	@ 0x80
 80017e4:	0409      	lsls	r1, r1, #16
 80017e6:	4311      	orrs	r1, r2
 80017e8:	00c2      	lsls	r2, r0, #3
 80017ea:	4691      	mov	r9, r2
 80017ec:	4ab5      	ldr	r2, [pc, #724]	@ (8001ac4 <__aeabi_dmul+0x318>)
 80017ee:	468a      	mov	sl, r1
 80017f0:	189d      	adds	r5, r3, r2
 80017f2:	2300      	movs	r3, #0
 80017f4:	4698      	mov	r8, r3
 80017f6:	9302      	str	r3, [sp, #8]
 80017f8:	033c      	lsls	r4, r7, #12
 80017fa:	007b      	lsls	r3, r7, #1
 80017fc:	0ffa      	lsrs	r2, r7, #31
 80017fe:	0030      	movs	r0, r6
 8001800:	0b24      	lsrs	r4, r4, #12
 8001802:	0d5b      	lsrs	r3, r3, #21
 8001804:	9200      	str	r2, [sp, #0]
 8001806:	d100      	bne.n	800180a <__aeabi_dmul+0x5e>
 8001808:	e096      	b.n	8001938 <__aeabi_dmul+0x18c>
 800180a:	4aad      	ldr	r2, [pc, #692]	@ (8001ac0 <__aeabi_dmul+0x314>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d031      	beq.n	8001874 <__aeabi_dmul+0xc8>
 8001810:	0f72      	lsrs	r2, r6, #29
 8001812:	00e4      	lsls	r4, r4, #3
 8001814:	4322      	orrs	r2, r4
 8001816:	2480      	movs	r4, #128	@ 0x80
 8001818:	0424      	lsls	r4, r4, #16
 800181a:	4314      	orrs	r4, r2
 800181c:	4aa9      	ldr	r2, [pc, #676]	@ (8001ac4 <__aeabi_dmul+0x318>)
 800181e:	00f0      	lsls	r0, r6, #3
 8001820:	4694      	mov	ip, r2
 8001822:	4463      	add	r3, ip
 8001824:	195b      	adds	r3, r3, r5
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	9201      	str	r2, [sp, #4]
 800182a:	4642      	mov	r2, r8
 800182c:	2600      	movs	r6, #0
 800182e:	2a0a      	cmp	r2, #10
 8001830:	dc42      	bgt.n	80018b8 <__aeabi_dmul+0x10c>
 8001832:	465a      	mov	r2, fp
 8001834:	9900      	ldr	r1, [sp, #0]
 8001836:	404a      	eors	r2, r1
 8001838:	4693      	mov	fp, r2
 800183a:	4642      	mov	r2, r8
 800183c:	2a02      	cmp	r2, #2
 800183e:	dc32      	bgt.n	80018a6 <__aeabi_dmul+0xfa>
 8001840:	3a01      	subs	r2, #1
 8001842:	2a01      	cmp	r2, #1
 8001844:	d900      	bls.n	8001848 <__aeabi_dmul+0x9c>
 8001846:	e149      	b.n	8001adc <__aeabi_dmul+0x330>
 8001848:	2e02      	cmp	r6, #2
 800184a:	d100      	bne.n	800184e <__aeabi_dmul+0xa2>
 800184c:	e0ca      	b.n	80019e4 <__aeabi_dmul+0x238>
 800184e:	2e01      	cmp	r6, #1
 8001850:	d13d      	bne.n	80018ce <__aeabi_dmul+0x122>
 8001852:	2300      	movs	r3, #0
 8001854:	2400      	movs	r4, #0
 8001856:	2200      	movs	r2, #0
 8001858:	0010      	movs	r0, r2
 800185a:	465a      	mov	r2, fp
 800185c:	051b      	lsls	r3, r3, #20
 800185e:	4323      	orrs	r3, r4
 8001860:	07d2      	lsls	r2, r2, #31
 8001862:	4313      	orrs	r3, r2
 8001864:	0019      	movs	r1, r3
 8001866:	b007      	add	sp, #28
 8001868:	bcf0      	pop	{r4, r5, r6, r7}
 800186a:	46bb      	mov	fp, r7
 800186c:	46b2      	mov	sl, r6
 800186e:	46a9      	mov	r9, r5
 8001870:	46a0      	mov	r8, r4
 8001872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001874:	4b92      	ldr	r3, [pc, #584]	@ (8001ac0 <__aeabi_dmul+0x314>)
 8001876:	4326      	orrs	r6, r4
 8001878:	18eb      	adds	r3, r5, r3
 800187a:	2e00      	cmp	r6, #0
 800187c:	d100      	bne.n	8001880 <__aeabi_dmul+0xd4>
 800187e:	e0bb      	b.n	80019f8 <__aeabi_dmul+0x24c>
 8001880:	2203      	movs	r2, #3
 8001882:	4641      	mov	r1, r8
 8001884:	4311      	orrs	r1, r2
 8001886:	465a      	mov	r2, fp
 8001888:	4688      	mov	r8, r1
 800188a:	9900      	ldr	r1, [sp, #0]
 800188c:	404a      	eors	r2, r1
 800188e:	2180      	movs	r1, #128	@ 0x80
 8001890:	0109      	lsls	r1, r1, #4
 8001892:	468c      	mov	ip, r1
 8001894:	0029      	movs	r1, r5
 8001896:	4461      	add	r1, ip
 8001898:	9101      	str	r1, [sp, #4]
 800189a:	4641      	mov	r1, r8
 800189c:	290a      	cmp	r1, #10
 800189e:	dd00      	ble.n	80018a2 <__aeabi_dmul+0xf6>
 80018a0:	e233      	b.n	8001d0a <__aeabi_dmul+0x55e>
 80018a2:	4693      	mov	fp, r2
 80018a4:	2603      	movs	r6, #3
 80018a6:	4642      	mov	r2, r8
 80018a8:	2701      	movs	r7, #1
 80018aa:	4097      	lsls	r7, r2
 80018ac:	21a6      	movs	r1, #166	@ 0xa6
 80018ae:	003a      	movs	r2, r7
 80018b0:	00c9      	lsls	r1, r1, #3
 80018b2:	400a      	ands	r2, r1
 80018b4:	420f      	tst	r7, r1
 80018b6:	d031      	beq.n	800191c <__aeabi_dmul+0x170>
 80018b8:	9e02      	ldr	r6, [sp, #8]
 80018ba:	2e02      	cmp	r6, #2
 80018bc:	d100      	bne.n	80018c0 <__aeabi_dmul+0x114>
 80018be:	e235      	b.n	8001d2c <__aeabi_dmul+0x580>
 80018c0:	2e03      	cmp	r6, #3
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dmul+0x11a>
 80018c4:	e1d2      	b.n	8001c6c <__aeabi_dmul+0x4c0>
 80018c6:	4654      	mov	r4, sl
 80018c8:	4648      	mov	r0, r9
 80018ca:	2e01      	cmp	r6, #1
 80018cc:	d0c1      	beq.n	8001852 <__aeabi_dmul+0xa6>
 80018ce:	9a01      	ldr	r2, [sp, #4]
 80018d0:	4b7d      	ldr	r3, [pc, #500]	@ (8001ac8 <__aeabi_dmul+0x31c>)
 80018d2:	4694      	mov	ip, r2
 80018d4:	4463      	add	r3, ip
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	dc00      	bgt.n	80018dc <__aeabi_dmul+0x130>
 80018da:	e0c0      	b.n	8001a5e <__aeabi_dmul+0x2b2>
 80018dc:	0742      	lsls	r2, r0, #29
 80018de:	d009      	beq.n	80018f4 <__aeabi_dmul+0x148>
 80018e0:	220f      	movs	r2, #15
 80018e2:	4002      	ands	r2, r0
 80018e4:	2a04      	cmp	r2, #4
 80018e6:	d005      	beq.n	80018f4 <__aeabi_dmul+0x148>
 80018e8:	1d02      	adds	r2, r0, #4
 80018ea:	4282      	cmp	r2, r0
 80018ec:	4180      	sbcs	r0, r0
 80018ee:	4240      	negs	r0, r0
 80018f0:	1824      	adds	r4, r4, r0
 80018f2:	0010      	movs	r0, r2
 80018f4:	01e2      	lsls	r2, r4, #7
 80018f6:	d506      	bpl.n	8001906 <__aeabi_dmul+0x15a>
 80018f8:	4b74      	ldr	r3, [pc, #464]	@ (8001acc <__aeabi_dmul+0x320>)
 80018fa:	9a01      	ldr	r2, [sp, #4]
 80018fc:	401c      	ands	r4, r3
 80018fe:	2380      	movs	r3, #128	@ 0x80
 8001900:	4694      	mov	ip, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	4463      	add	r3, ip
 8001906:	4a72      	ldr	r2, [pc, #456]	@ (8001ad0 <__aeabi_dmul+0x324>)
 8001908:	4293      	cmp	r3, r2
 800190a:	dc6b      	bgt.n	80019e4 <__aeabi_dmul+0x238>
 800190c:	0762      	lsls	r2, r4, #29
 800190e:	08c0      	lsrs	r0, r0, #3
 8001910:	0264      	lsls	r4, r4, #9
 8001912:	055b      	lsls	r3, r3, #21
 8001914:	4302      	orrs	r2, r0
 8001916:	0b24      	lsrs	r4, r4, #12
 8001918:	0d5b      	lsrs	r3, r3, #21
 800191a:	e79d      	b.n	8001858 <__aeabi_dmul+0xac>
 800191c:	2190      	movs	r1, #144	@ 0x90
 800191e:	0089      	lsls	r1, r1, #2
 8001920:	420f      	tst	r7, r1
 8001922:	d163      	bne.n	80019ec <__aeabi_dmul+0x240>
 8001924:	2288      	movs	r2, #136	@ 0x88
 8001926:	423a      	tst	r2, r7
 8001928:	d100      	bne.n	800192c <__aeabi_dmul+0x180>
 800192a:	e0d7      	b.n	8001adc <__aeabi_dmul+0x330>
 800192c:	9b00      	ldr	r3, [sp, #0]
 800192e:	46a2      	mov	sl, r4
 8001930:	469b      	mov	fp, r3
 8001932:	4681      	mov	r9, r0
 8001934:	9602      	str	r6, [sp, #8]
 8001936:	e7bf      	b.n	80018b8 <__aeabi_dmul+0x10c>
 8001938:	0023      	movs	r3, r4
 800193a:	4333      	orrs	r3, r6
 800193c:	d100      	bne.n	8001940 <__aeabi_dmul+0x194>
 800193e:	e07f      	b.n	8001a40 <__aeabi_dmul+0x294>
 8001940:	2c00      	cmp	r4, #0
 8001942:	d100      	bne.n	8001946 <__aeabi_dmul+0x19a>
 8001944:	e1ad      	b.n	8001ca2 <__aeabi_dmul+0x4f6>
 8001946:	0020      	movs	r0, r4
 8001948:	f000 ff10 	bl	800276c <__clzsi2>
 800194c:	0002      	movs	r2, r0
 800194e:	0003      	movs	r3, r0
 8001950:	3a0b      	subs	r2, #11
 8001952:	201d      	movs	r0, #29
 8001954:	0019      	movs	r1, r3
 8001956:	1a82      	subs	r2, r0, r2
 8001958:	0030      	movs	r0, r6
 800195a:	3908      	subs	r1, #8
 800195c:	40d0      	lsrs	r0, r2
 800195e:	408c      	lsls	r4, r1
 8001960:	4304      	orrs	r4, r0
 8001962:	0030      	movs	r0, r6
 8001964:	4088      	lsls	r0, r1
 8001966:	4a5b      	ldr	r2, [pc, #364]	@ (8001ad4 <__aeabi_dmul+0x328>)
 8001968:	1aeb      	subs	r3, r5, r3
 800196a:	4694      	mov	ip, r2
 800196c:	4463      	add	r3, ip
 800196e:	1c5a      	adds	r2, r3, #1
 8001970:	9201      	str	r2, [sp, #4]
 8001972:	4642      	mov	r2, r8
 8001974:	2600      	movs	r6, #0
 8001976:	2a0a      	cmp	r2, #10
 8001978:	dc00      	bgt.n	800197c <__aeabi_dmul+0x1d0>
 800197a:	e75a      	b.n	8001832 <__aeabi_dmul+0x86>
 800197c:	e79c      	b.n	80018b8 <__aeabi_dmul+0x10c>
 800197e:	4653      	mov	r3, sl
 8001980:	4303      	orrs	r3, r0
 8001982:	4699      	mov	r9, r3
 8001984:	d054      	beq.n	8001a30 <__aeabi_dmul+0x284>
 8001986:	4653      	mov	r3, sl
 8001988:	2b00      	cmp	r3, #0
 800198a:	d100      	bne.n	800198e <__aeabi_dmul+0x1e2>
 800198c:	e177      	b.n	8001c7e <__aeabi_dmul+0x4d2>
 800198e:	4650      	mov	r0, sl
 8001990:	f000 feec 	bl	800276c <__clzsi2>
 8001994:	230b      	movs	r3, #11
 8001996:	425b      	negs	r3, r3
 8001998:	469c      	mov	ip, r3
 800199a:	0002      	movs	r2, r0
 800199c:	4484      	add	ip, r0
 800199e:	0011      	movs	r1, r2
 80019a0:	4650      	mov	r0, sl
 80019a2:	3908      	subs	r1, #8
 80019a4:	4088      	lsls	r0, r1
 80019a6:	231d      	movs	r3, #29
 80019a8:	4680      	mov	r8, r0
 80019aa:	4660      	mov	r0, ip
 80019ac:	1a1b      	subs	r3, r3, r0
 80019ae:	0020      	movs	r0, r4
 80019b0:	40d8      	lsrs	r0, r3
 80019b2:	0003      	movs	r3, r0
 80019b4:	4640      	mov	r0, r8
 80019b6:	4303      	orrs	r3, r0
 80019b8:	469a      	mov	sl, r3
 80019ba:	0023      	movs	r3, r4
 80019bc:	408b      	lsls	r3, r1
 80019be:	4699      	mov	r9, r3
 80019c0:	2300      	movs	r3, #0
 80019c2:	4d44      	ldr	r5, [pc, #272]	@ (8001ad4 <__aeabi_dmul+0x328>)
 80019c4:	4698      	mov	r8, r3
 80019c6:	1aad      	subs	r5, r5, r2
 80019c8:	9302      	str	r3, [sp, #8]
 80019ca:	e715      	b.n	80017f8 <__aeabi_dmul+0x4c>
 80019cc:	4652      	mov	r2, sl
 80019ce:	4302      	orrs	r2, r0
 80019d0:	4691      	mov	r9, r2
 80019d2:	d126      	bne.n	8001a22 <__aeabi_dmul+0x276>
 80019d4:	2200      	movs	r2, #0
 80019d6:	001d      	movs	r5, r3
 80019d8:	2302      	movs	r3, #2
 80019da:	4692      	mov	sl, r2
 80019dc:	3208      	adds	r2, #8
 80019de:	4690      	mov	r8, r2
 80019e0:	9302      	str	r3, [sp, #8]
 80019e2:	e709      	b.n	80017f8 <__aeabi_dmul+0x4c>
 80019e4:	2400      	movs	r4, #0
 80019e6:	2200      	movs	r2, #0
 80019e8:	4b35      	ldr	r3, [pc, #212]	@ (8001ac0 <__aeabi_dmul+0x314>)
 80019ea:	e735      	b.n	8001858 <__aeabi_dmul+0xac>
 80019ec:	2300      	movs	r3, #0
 80019ee:	2480      	movs	r4, #128	@ 0x80
 80019f0:	469b      	mov	fp, r3
 80019f2:	0324      	lsls	r4, r4, #12
 80019f4:	4b32      	ldr	r3, [pc, #200]	@ (8001ac0 <__aeabi_dmul+0x314>)
 80019f6:	e72f      	b.n	8001858 <__aeabi_dmul+0xac>
 80019f8:	2202      	movs	r2, #2
 80019fa:	4641      	mov	r1, r8
 80019fc:	4311      	orrs	r1, r2
 80019fe:	2280      	movs	r2, #128	@ 0x80
 8001a00:	0112      	lsls	r2, r2, #4
 8001a02:	4694      	mov	ip, r2
 8001a04:	002a      	movs	r2, r5
 8001a06:	4462      	add	r2, ip
 8001a08:	4688      	mov	r8, r1
 8001a0a:	9201      	str	r2, [sp, #4]
 8001a0c:	290a      	cmp	r1, #10
 8001a0e:	dd00      	ble.n	8001a12 <__aeabi_dmul+0x266>
 8001a10:	e752      	b.n	80018b8 <__aeabi_dmul+0x10c>
 8001a12:	465a      	mov	r2, fp
 8001a14:	2000      	movs	r0, #0
 8001a16:	9900      	ldr	r1, [sp, #0]
 8001a18:	0004      	movs	r4, r0
 8001a1a:	404a      	eors	r2, r1
 8001a1c:	4693      	mov	fp, r2
 8001a1e:	2602      	movs	r6, #2
 8001a20:	e70b      	b.n	800183a <__aeabi_dmul+0x8e>
 8001a22:	220c      	movs	r2, #12
 8001a24:	001d      	movs	r5, r3
 8001a26:	2303      	movs	r3, #3
 8001a28:	4681      	mov	r9, r0
 8001a2a:	4690      	mov	r8, r2
 8001a2c:	9302      	str	r3, [sp, #8]
 8001a2e:	e6e3      	b.n	80017f8 <__aeabi_dmul+0x4c>
 8001a30:	2300      	movs	r3, #0
 8001a32:	469a      	mov	sl, r3
 8001a34:	3304      	adds	r3, #4
 8001a36:	4698      	mov	r8, r3
 8001a38:	3b03      	subs	r3, #3
 8001a3a:	2500      	movs	r5, #0
 8001a3c:	9302      	str	r3, [sp, #8]
 8001a3e:	e6db      	b.n	80017f8 <__aeabi_dmul+0x4c>
 8001a40:	4642      	mov	r2, r8
 8001a42:	3301      	adds	r3, #1
 8001a44:	431a      	orrs	r2, r3
 8001a46:	002b      	movs	r3, r5
 8001a48:	4690      	mov	r8, r2
 8001a4a:	1c5a      	adds	r2, r3, #1
 8001a4c:	9201      	str	r2, [sp, #4]
 8001a4e:	4642      	mov	r2, r8
 8001a50:	2400      	movs	r4, #0
 8001a52:	2000      	movs	r0, #0
 8001a54:	2601      	movs	r6, #1
 8001a56:	2a0a      	cmp	r2, #10
 8001a58:	dc00      	bgt.n	8001a5c <__aeabi_dmul+0x2b0>
 8001a5a:	e6ea      	b.n	8001832 <__aeabi_dmul+0x86>
 8001a5c:	e72c      	b.n	80018b8 <__aeabi_dmul+0x10c>
 8001a5e:	2201      	movs	r2, #1
 8001a60:	1ad2      	subs	r2, r2, r3
 8001a62:	2a38      	cmp	r2, #56	@ 0x38
 8001a64:	dd00      	ble.n	8001a68 <__aeabi_dmul+0x2bc>
 8001a66:	e6f4      	b.n	8001852 <__aeabi_dmul+0xa6>
 8001a68:	2a1f      	cmp	r2, #31
 8001a6a:	dc00      	bgt.n	8001a6e <__aeabi_dmul+0x2c2>
 8001a6c:	e12a      	b.n	8001cc4 <__aeabi_dmul+0x518>
 8001a6e:	211f      	movs	r1, #31
 8001a70:	4249      	negs	r1, r1
 8001a72:	1acb      	subs	r3, r1, r3
 8001a74:	0021      	movs	r1, r4
 8001a76:	40d9      	lsrs	r1, r3
 8001a78:	000b      	movs	r3, r1
 8001a7a:	2a20      	cmp	r2, #32
 8001a7c:	d005      	beq.n	8001a8a <__aeabi_dmul+0x2de>
 8001a7e:	4a16      	ldr	r2, [pc, #88]	@ (8001ad8 <__aeabi_dmul+0x32c>)
 8001a80:	9d01      	ldr	r5, [sp, #4]
 8001a82:	4694      	mov	ip, r2
 8001a84:	4465      	add	r5, ip
 8001a86:	40ac      	lsls	r4, r5
 8001a88:	4320      	orrs	r0, r4
 8001a8a:	1e42      	subs	r2, r0, #1
 8001a8c:	4190      	sbcs	r0, r2
 8001a8e:	4318      	orrs	r0, r3
 8001a90:	2307      	movs	r3, #7
 8001a92:	0019      	movs	r1, r3
 8001a94:	2400      	movs	r4, #0
 8001a96:	4001      	ands	r1, r0
 8001a98:	4203      	tst	r3, r0
 8001a9a:	d00c      	beq.n	8001ab6 <__aeabi_dmul+0x30a>
 8001a9c:	230f      	movs	r3, #15
 8001a9e:	4003      	ands	r3, r0
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_dmul+0x2fa>
 8001aa4:	e140      	b.n	8001d28 <__aeabi_dmul+0x57c>
 8001aa6:	1d03      	adds	r3, r0, #4
 8001aa8:	4283      	cmp	r3, r0
 8001aaa:	41a4      	sbcs	r4, r4
 8001aac:	0018      	movs	r0, r3
 8001aae:	4264      	negs	r4, r4
 8001ab0:	0761      	lsls	r1, r4, #29
 8001ab2:	0264      	lsls	r4, r4, #9
 8001ab4:	0b24      	lsrs	r4, r4, #12
 8001ab6:	08c2      	lsrs	r2, r0, #3
 8001ab8:	2300      	movs	r3, #0
 8001aba:	430a      	orrs	r2, r1
 8001abc:	e6cc      	b.n	8001858 <__aeabi_dmul+0xac>
 8001abe:	46c0      	nop			@ (mov r8, r8)
 8001ac0:	000007ff 	.word	0x000007ff
 8001ac4:	fffffc01 	.word	0xfffffc01
 8001ac8:	000003ff 	.word	0x000003ff
 8001acc:	feffffff 	.word	0xfeffffff
 8001ad0:	000007fe 	.word	0x000007fe
 8001ad4:	fffffc0d 	.word	0xfffffc0d
 8001ad8:	0000043e 	.word	0x0000043e
 8001adc:	4649      	mov	r1, r9
 8001ade:	464a      	mov	r2, r9
 8001ae0:	0409      	lsls	r1, r1, #16
 8001ae2:	0c09      	lsrs	r1, r1, #16
 8001ae4:	000d      	movs	r5, r1
 8001ae6:	0c16      	lsrs	r6, r2, #16
 8001ae8:	0c02      	lsrs	r2, r0, #16
 8001aea:	0400      	lsls	r0, r0, #16
 8001aec:	0c00      	lsrs	r0, r0, #16
 8001aee:	4345      	muls	r5, r0
 8001af0:	46ac      	mov	ip, r5
 8001af2:	0005      	movs	r5, r0
 8001af4:	4375      	muls	r5, r6
 8001af6:	46a8      	mov	r8, r5
 8001af8:	0015      	movs	r5, r2
 8001afa:	000f      	movs	r7, r1
 8001afc:	4375      	muls	r5, r6
 8001afe:	9200      	str	r2, [sp, #0]
 8001b00:	9502      	str	r5, [sp, #8]
 8001b02:	002a      	movs	r2, r5
 8001b04:	9d00      	ldr	r5, [sp, #0]
 8001b06:	436f      	muls	r7, r5
 8001b08:	4665      	mov	r5, ip
 8001b0a:	0c2d      	lsrs	r5, r5, #16
 8001b0c:	46a9      	mov	r9, r5
 8001b0e:	4447      	add	r7, r8
 8001b10:	444f      	add	r7, r9
 8001b12:	45b8      	cmp	r8, r7
 8001b14:	d905      	bls.n	8001b22 <__aeabi_dmul+0x376>
 8001b16:	0015      	movs	r5, r2
 8001b18:	2280      	movs	r2, #128	@ 0x80
 8001b1a:	0252      	lsls	r2, r2, #9
 8001b1c:	4690      	mov	r8, r2
 8001b1e:	4445      	add	r5, r8
 8001b20:	9502      	str	r5, [sp, #8]
 8001b22:	0c3d      	lsrs	r5, r7, #16
 8001b24:	9503      	str	r5, [sp, #12]
 8001b26:	4665      	mov	r5, ip
 8001b28:	042d      	lsls	r5, r5, #16
 8001b2a:	043f      	lsls	r7, r7, #16
 8001b2c:	0c2d      	lsrs	r5, r5, #16
 8001b2e:	46ac      	mov	ip, r5
 8001b30:	003d      	movs	r5, r7
 8001b32:	4465      	add	r5, ip
 8001b34:	9504      	str	r5, [sp, #16]
 8001b36:	0c25      	lsrs	r5, r4, #16
 8001b38:	0424      	lsls	r4, r4, #16
 8001b3a:	0c24      	lsrs	r4, r4, #16
 8001b3c:	46ac      	mov	ip, r5
 8001b3e:	0025      	movs	r5, r4
 8001b40:	4375      	muls	r5, r6
 8001b42:	46a8      	mov	r8, r5
 8001b44:	4665      	mov	r5, ip
 8001b46:	000f      	movs	r7, r1
 8001b48:	4369      	muls	r1, r5
 8001b4a:	4441      	add	r1, r8
 8001b4c:	4689      	mov	r9, r1
 8001b4e:	4367      	muls	r7, r4
 8001b50:	0c39      	lsrs	r1, r7, #16
 8001b52:	4449      	add	r1, r9
 8001b54:	436e      	muls	r6, r5
 8001b56:	4588      	cmp	r8, r1
 8001b58:	d903      	bls.n	8001b62 <__aeabi_dmul+0x3b6>
 8001b5a:	2280      	movs	r2, #128	@ 0x80
 8001b5c:	0252      	lsls	r2, r2, #9
 8001b5e:	4690      	mov	r8, r2
 8001b60:	4446      	add	r6, r8
 8001b62:	0c0d      	lsrs	r5, r1, #16
 8001b64:	46a8      	mov	r8, r5
 8001b66:	0035      	movs	r5, r6
 8001b68:	4445      	add	r5, r8
 8001b6a:	9505      	str	r5, [sp, #20]
 8001b6c:	9d03      	ldr	r5, [sp, #12]
 8001b6e:	043f      	lsls	r7, r7, #16
 8001b70:	46a8      	mov	r8, r5
 8001b72:	0c3f      	lsrs	r7, r7, #16
 8001b74:	0409      	lsls	r1, r1, #16
 8001b76:	19c9      	adds	r1, r1, r7
 8001b78:	4488      	add	r8, r1
 8001b7a:	4645      	mov	r5, r8
 8001b7c:	9503      	str	r5, [sp, #12]
 8001b7e:	4655      	mov	r5, sl
 8001b80:	042e      	lsls	r6, r5, #16
 8001b82:	0c36      	lsrs	r6, r6, #16
 8001b84:	0c2f      	lsrs	r7, r5, #16
 8001b86:	0035      	movs	r5, r6
 8001b88:	4345      	muls	r5, r0
 8001b8a:	4378      	muls	r0, r7
 8001b8c:	4681      	mov	r9, r0
 8001b8e:	0038      	movs	r0, r7
 8001b90:	46a8      	mov	r8, r5
 8001b92:	0c2d      	lsrs	r5, r5, #16
 8001b94:	46aa      	mov	sl, r5
 8001b96:	9a00      	ldr	r2, [sp, #0]
 8001b98:	4350      	muls	r0, r2
 8001b9a:	4372      	muls	r2, r6
 8001b9c:	444a      	add	r2, r9
 8001b9e:	4452      	add	r2, sl
 8001ba0:	4591      	cmp	r9, r2
 8001ba2:	d903      	bls.n	8001bac <__aeabi_dmul+0x400>
 8001ba4:	2580      	movs	r5, #128	@ 0x80
 8001ba6:	026d      	lsls	r5, r5, #9
 8001ba8:	46a9      	mov	r9, r5
 8001baa:	4448      	add	r0, r9
 8001bac:	0c15      	lsrs	r5, r2, #16
 8001bae:	46a9      	mov	r9, r5
 8001bb0:	4645      	mov	r5, r8
 8001bb2:	042d      	lsls	r5, r5, #16
 8001bb4:	0c2d      	lsrs	r5, r5, #16
 8001bb6:	46a8      	mov	r8, r5
 8001bb8:	4665      	mov	r5, ip
 8001bba:	437d      	muls	r5, r7
 8001bbc:	0412      	lsls	r2, r2, #16
 8001bbe:	4448      	add	r0, r9
 8001bc0:	4490      	add	r8, r2
 8001bc2:	46a9      	mov	r9, r5
 8001bc4:	0032      	movs	r2, r6
 8001bc6:	4665      	mov	r5, ip
 8001bc8:	4362      	muls	r2, r4
 8001bca:	436e      	muls	r6, r5
 8001bcc:	437c      	muls	r4, r7
 8001bce:	0c17      	lsrs	r7, r2, #16
 8001bd0:	1936      	adds	r6, r6, r4
 8001bd2:	19bf      	adds	r7, r7, r6
 8001bd4:	42bc      	cmp	r4, r7
 8001bd6:	d903      	bls.n	8001be0 <__aeabi_dmul+0x434>
 8001bd8:	2480      	movs	r4, #128	@ 0x80
 8001bda:	0264      	lsls	r4, r4, #9
 8001bdc:	46a4      	mov	ip, r4
 8001bde:	44e1      	add	r9, ip
 8001be0:	9c02      	ldr	r4, [sp, #8]
 8001be2:	9e03      	ldr	r6, [sp, #12]
 8001be4:	46a4      	mov	ip, r4
 8001be6:	9d05      	ldr	r5, [sp, #20]
 8001be8:	4466      	add	r6, ip
 8001bea:	428e      	cmp	r6, r1
 8001bec:	4189      	sbcs	r1, r1
 8001bee:	46ac      	mov	ip, r5
 8001bf0:	0412      	lsls	r2, r2, #16
 8001bf2:	043c      	lsls	r4, r7, #16
 8001bf4:	0c12      	lsrs	r2, r2, #16
 8001bf6:	18a2      	adds	r2, r4, r2
 8001bf8:	4462      	add	r2, ip
 8001bfa:	4249      	negs	r1, r1
 8001bfc:	1854      	adds	r4, r2, r1
 8001bfe:	4446      	add	r6, r8
 8001c00:	46a4      	mov	ip, r4
 8001c02:	4546      	cmp	r6, r8
 8001c04:	41a4      	sbcs	r4, r4
 8001c06:	4682      	mov	sl, r0
 8001c08:	4264      	negs	r4, r4
 8001c0a:	46a0      	mov	r8, r4
 8001c0c:	42aa      	cmp	r2, r5
 8001c0e:	4192      	sbcs	r2, r2
 8001c10:	458c      	cmp	ip, r1
 8001c12:	4189      	sbcs	r1, r1
 8001c14:	44e2      	add	sl, ip
 8001c16:	44d0      	add	r8, sl
 8001c18:	4249      	negs	r1, r1
 8001c1a:	4252      	negs	r2, r2
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	45a0      	cmp	r8, r4
 8001c20:	41a4      	sbcs	r4, r4
 8001c22:	4582      	cmp	sl, r0
 8001c24:	4189      	sbcs	r1, r1
 8001c26:	4264      	negs	r4, r4
 8001c28:	4249      	negs	r1, r1
 8001c2a:	430c      	orrs	r4, r1
 8001c2c:	4641      	mov	r1, r8
 8001c2e:	0c3f      	lsrs	r7, r7, #16
 8001c30:	19d2      	adds	r2, r2, r7
 8001c32:	1912      	adds	r2, r2, r4
 8001c34:	0dcc      	lsrs	r4, r1, #23
 8001c36:	9904      	ldr	r1, [sp, #16]
 8001c38:	0270      	lsls	r0, r6, #9
 8001c3a:	4308      	orrs	r0, r1
 8001c3c:	1e41      	subs	r1, r0, #1
 8001c3e:	4188      	sbcs	r0, r1
 8001c40:	4641      	mov	r1, r8
 8001c42:	444a      	add	r2, r9
 8001c44:	0df6      	lsrs	r6, r6, #23
 8001c46:	0252      	lsls	r2, r2, #9
 8001c48:	4330      	orrs	r0, r6
 8001c4a:	0249      	lsls	r1, r1, #9
 8001c4c:	4314      	orrs	r4, r2
 8001c4e:	4308      	orrs	r0, r1
 8001c50:	01d2      	lsls	r2, r2, #7
 8001c52:	d535      	bpl.n	8001cc0 <__aeabi_dmul+0x514>
 8001c54:	2201      	movs	r2, #1
 8001c56:	0843      	lsrs	r3, r0, #1
 8001c58:	4002      	ands	r2, r0
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	07e0      	lsls	r0, r4, #31
 8001c5e:	4318      	orrs	r0, r3
 8001c60:	0864      	lsrs	r4, r4, #1
 8001c62:	e634      	b.n	80018ce <__aeabi_dmul+0x122>
 8001c64:	9b00      	ldr	r3, [sp, #0]
 8001c66:	46a2      	mov	sl, r4
 8001c68:	469b      	mov	fp, r3
 8001c6a:	4681      	mov	r9, r0
 8001c6c:	2480      	movs	r4, #128	@ 0x80
 8001c6e:	4653      	mov	r3, sl
 8001c70:	0324      	lsls	r4, r4, #12
 8001c72:	431c      	orrs	r4, r3
 8001c74:	0324      	lsls	r4, r4, #12
 8001c76:	464a      	mov	r2, r9
 8001c78:	4b2e      	ldr	r3, [pc, #184]	@ (8001d34 <__aeabi_dmul+0x588>)
 8001c7a:	0b24      	lsrs	r4, r4, #12
 8001c7c:	e5ec      	b.n	8001858 <__aeabi_dmul+0xac>
 8001c7e:	f000 fd75 	bl	800276c <__clzsi2>
 8001c82:	2315      	movs	r3, #21
 8001c84:	469c      	mov	ip, r3
 8001c86:	4484      	add	ip, r0
 8001c88:	0002      	movs	r2, r0
 8001c8a:	4663      	mov	r3, ip
 8001c8c:	3220      	adds	r2, #32
 8001c8e:	2b1c      	cmp	r3, #28
 8001c90:	dc00      	bgt.n	8001c94 <__aeabi_dmul+0x4e8>
 8001c92:	e684      	b.n	800199e <__aeabi_dmul+0x1f2>
 8001c94:	2300      	movs	r3, #0
 8001c96:	4699      	mov	r9, r3
 8001c98:	0023      	movs	r3, r4
 8001c9a:	3808      	subs	r0, #8
 8001c9c:	4083      	lsls	r3, r0
 8001c9e:	469a      	mov	sl, r3
 8001ca0:	e68e      	b.n	80019c0 <__aeabi_dmul+0x214>
 8001ca2:	f000 fd63 	bl	800276c <__clzsi2>
 8001ca6:	0002      	movs	r2, r0
 8001ca8:	0003      	movs	r3, r0
 8001caa:	3215      	adds	r2, #21
 8001cac:	3320      	adds	r3, #32
 8001cae:	2a1c      	cmp	r2, #28
 8001cb0:	dc00      	bgt.n	8001cb4 <__aeabi_dmul+0x508>
 8001cb2:	e64e      	b.n	8001952 <__aeabi_dmul+0x1a6>
 8001cb4:	0002      	movs	r2, r0
 8001cb6:	0034      	movs	r4, r6
 8001cb8:	3a08      	subs	r2, #8
 8001cba:	2000      	movs	r0, #0
 8001cbc:	4094      	lsls	r4, r2
 8001cbe:	e652      	b.n	8001966 <__aeabi_dmul+0x1ba>
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	e604      	b.n	80018ce <__aeabi_dmul+0x122>
 8001cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d38 <__aeabi_dmul+0x58c>)
 8001cc6:	0021      	movs	r1, r4
 8001cc8:	469c      	mov	ip, r3
 8001cca:	0003      	movs	r3, r0
 8001ccc:	9d01      	ldr	r5, [sp, #4]
 8001cce:	40d3      	lsrs	r3, r2
 8001cd0:	4465      	add	r5, ip
 8001cd2:	40a9      	lsls	r1, r5
 8001cd4:	4319      	orrs	r1, r3
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	40ab      	lsls	r3, r5
 8001cda:	1e58      	subs	r0, r3, #1
 8001cdc:	4183      	sbcs	r3, r0
 8001cde:	4319      	orrs	r1, r3
 8001ce0:	0008      	movs	r0, r1
 8001ce2:	40d4      	lsrs	r4, r2
 8001ce4:	074b      	lsls	r3, r1, #29
 8001ce6:	d009      	beq.n	8001cfc <__aeabi_dmul+0x550>
 8001ce8:	230f      	movs	r3, #15
 8001cea:	400b      	ands	r3, r1
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d005      	beq.n	8001cfc <__aeabi_dmul+0x550>
 8001cf0:	1d0b      	adds	r3, r1, #4
 8001cf2:	428b      	cmp	r3, r1
 8001cf4:	4180      	sbcs	r0, r0
 8001cf6:	4240      	negs	r0, r0
 8001cf8:	1824      	adds	r4, r4, r0
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	0223      	lsls	r3, r4, #8
 8001cfe:	d400      	bmi.n	8001d02 <__aeabi_dmul+0x556>
 8001d00:	e6d6      	b.n	8001ab0 <__aeabi_dmul+0x304>
 8001d02:	2301      	movs	r3, #1
 8001d04:	2400      	movs	r4, #0
 8001d06:	2200      	movs	r2, #0
 8001d08:	e5a6      	b.n	8001858 <__aeabi_dmul+0xac>
 8001d0a:	290f      	cmp	r1, #15
 8001d0c:	d1aa      	bne.n	8001c64 <__aeabi_dmul+0x4b8>
 8001d0e:	2380      	movs	r3, #128	@ 0x80
 8001d10:	4652      	mov	r2, sl
 8001d12:	031b      	lsls	r3, r3, #12
 8001d14:	421a      	tst	r2, r3
 8001d16:	d0a9      	beq.n	8001c6c <__aeabi_dmul+0x4c0>
 8001d18:	421c      	tst	r4, r3
 8001d1a:	d1a7      	bne.n	8001c6c <__aeabi_dmul+0x4c0>
 8001d1c:	431c      	orrs	r4, r3
 8001d1e:	9b00      	ldr	r3, [sp, #0]
 8001d20:	0002      	movs	r2, r0
 8001d22:	469b      	mov	fp, r3
 8001d24:	4b03      	ldr	r3, [pc, #12]	@ (8001d34 <__aeabi_dmul+0x588>)
 8001d26:	e597      	b.n	8001858 <__aeabi_dmul+0xac>
 8001d28:	2400      	movs	r4, #0
 8001d2a:	e6c1      	b.n	8001ab0 <__aeabi_dmul+0x304>
 8001d2c:	2400      	movs	r4, #0
 8001d2e:	4b01      	ldr	r3, [pc, #4]	@ (8001d34 <__aeabi_dmul+0x588>)
 8001d30:	0022      	movs	r2, r4
 8001d32:	e591      	b.n	8001858 <__aeabi_dmul+0xac>
 8001d34:	000007ff 	.word	0x000007ff
 8001d38:	0000041e 	.word	0x0000041e

08001d3c <__aeabi_dsub>:
 8001d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d3e:	464e      	mov	r6, r9
 8001d40:	4645      	mov	r5, r8
 8001d42:	46de      	mov	lr, fp
 8001d44:	4657      	mov	r7, sl
 8001d46:	b5e0      	push	{r5, r6, r7, lr}
 8001d48:	b085      	sub	sp, #20
 8001d4a:	9000      	str	r0, [sp, #0]
 8001d4c:	9101      	str	r1, [sp, #4]
 8001d4e:	030c      	lsls	r4, r1, #12
 8001d50:	004f      	lsls	r7, r1, #1
 8001d52:	0fce      	lsrs	r6, r1, #31
 8001d54:	0a61      	lsrs	r1, r4, #9
 8001d56:	9c00      	ldr	r4, [sp, #0]
 8001d58:	46b0      	mov	r8, r6
 8001d5a:	0f64      	lsrs	r4, r4, #29
 8001d5c:	430c      	orrs	r4, r1
 8001d5e:	9900      	ldr	r1, [sp, #0]
 8001d60:	0d7f      	lsrs	r7, r7, #21
 8001d62:	00c8      	lsls	r0, r1, #3
 8001d64:	0011      	movs	r1, r2
 8001d66:	001a      	movs	r2, r3
 8001d68:	031b      	lsls	r3, r3, #12
 8001d6a:	469c      	mov	ip, r3
 8001d6c:	9100      	str	r1, [sp, #0]
 8001d6e:	9201      	str	r2, [sp, #4]
 8001d70:	0051      	lsls	r1, r2, #1
 8001d72:	0d4b      	lsrs	r3, r1, #21
 8001d74:	4699      	mov	r9, r3
 8001d76:	9b01      	ldr	r3, [sp, #4]
 8001d78:	9d00      	ldr	r5, [sp, #0]
 8001d7a:	0fd9      	lsrs	r1, r3, #31
 8001d7c:	4663      	mov	r3, ip
 8001d7e:	0f6a      	lsrs	r2, r5, #29
 8001d80:	0a5b      	lsrs	r3, r3, #9
 8001d82:	4313      	orrs	r3, r2
 8001d84:	00ea      	lsls	r2, r5, #3
 8001d86:	4694      	mov	ip, r2
 8001d88:	4693      	mov	fp, r2
 8001d8a:	4ac1      	ldr	r2, [pc, #772]	@ (8002090 <__aeabi_dsub+0x354>)
 8001d8c:	9003      	str	r0, [sp, #12]
 8001d8e:	9302      	str	r3, [sp, #8]
 8001d90:	4591      	cmp	r9, r2
 8001d92:	d100      	bne.n	8001d96 <__aeabi_dsub+0x5a>
 8001d94:	e0cd      	b.n	8001f32 <__aeabi_dsub+0x1f6>
 8001d96:	2501      	movs	r5, #1
 8001d98:	4069      	eors	r1, r5
 8001d9a:	464d      	mov	r5, r9
 8001d9c:	1b7d      	subs	r5, r7, r5
 8001d9e:	46aa      	mov	sl, r5
 8001da0:	428e      	cmp	r6, r1
 8001da2:	d100      	bne.n	8001da6 <__aeabi_dsub+0x6a>
 8001da4:	e080      	b.n	8001ea8 <__aeabi_dsub+0x16c>
 8001da6:	2d00      	cmp	r5, #0
 8001da8:	dc00      	bgt.n	8001dac <__aeabi_dsub+0x70>
 8001daa:	e335      	b.n	8002418 <__aeabi_dsub+0x6dc>
 8001dac:	4649      	mov	r1, r9
 8001dae:	2900      	cmp	r1, #0
 8001db0:	d100      	bne.n	8001db4 <__aeabi_dsub+0x78>
 8001db2:	e0df      	b.n	8001f74 <__aeabi_dsub+0x238>
 8001db4:	4297      	cmp	r7, r2
 8001db6:	d100      	bne.n	8001dba <__aeabi_dsub+0x7e>
 8001db8:	e194      	b.n	80020e4 <__aeabi_dsub+0x3a8>
 8001dba:	4652      	mov	r2, sl
 8001dbc:	2501      	movs	r5, #1
 8001dbe:	2a38      	cmp	r2, #56	@ 0x38
 8001dc0:	dc19      	bgt.n	8001df6 <__aeabi_dsub+0xba>
 8001dc2:	2280      	movs	r2, #128	@ 0x80
 8001dc4:	9b02      	ldr	r3, [sp, #8]
 8001dc6:	0412      	lsls	r2, r2, #16
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	9302      	str	r3, [sp, #8]
 8001dcc:	4652      	mov	r2, sl
 8001dce:	2a1f      	cmp	r2, #31
 8001dd0:	dd00      	ble.n	8001dd4 <__aeabi_dsub+0x98>
 8001dd2:	e1e3      	b.n	800219c <__aeabi_dsub+0x460>
 8001dd4:	4653      	mov	r3, sl
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	4661      	mov	r1, ip
 8001dda:	9d02      	ldr	r5, [sp, #8]
 8001ddc:	1ad2      	subs	r2, r2, r3
 8001dde:	4095      	lsls	r5, r2
 8001de0:	40d9      	lsrs	r1, r3
 8001de2:	430d      	orrs	r5, r1
 8001de4:	4661      	mov	r1, ip
 8001de6:	4091      	lsls	r1, r2
 8001de8:	000a      	movs	r2, r1
 8001dea:	1e51      	subs	r1, r2, #1
 8001dec:	418a      	sbcs	r2, r1
 8001dee:	4315      	orrs	r5, r2
 8001df0:	9a02      	ldr	r2, [sp, #8]
 8001df2:	40da      	lsrs	r2, r3
 8001df4:	1aa4      	subs	r4, r4, r2
 8001df6:	1b45      	subs	r5, r0, r5
 8001df8:	42a8      	cmp	r0, r5
 8001dfa:	4180      	sbcs	r0, r0
 8001dfc:	4240      	negs	r0, r0
 8001dfe:	1a24      	subs	r4, r4, r0
 8001e00:	0223      	lsls	r3, r4, #8
 8001e02:	d400      	bmi.n	8001e06 <__aeabi_dsub+0xca>
 8001e04:	e13d      	b.n	8002082 <__aeabi_dsub+0x346>
 8001e06:	0264      	lsls	r4, r4, #9
 8001e08:	0a64      	lsrs	r4, r4, #9
 8001e0a:	2c00      	cmp	r4, #0
 8001e0c:	d100      	bne.n	8001e10 <__aeabi_dsub+0xd4>
 8001e0e:	e147      	b.n	80020a0 <__aeabi_dsub+0x364>
 8001e10:	0020      	movs	r0, r4
 8001e12:	f000 fcab 	bl	800276c <__clzsi2>
 8001e16:	0003      	movs	r3, r0
 8001e18:	3b08      	subs	r3, #8
 8001e1a:	2120      	movs	r1, #32
 8001e1c:	0028      	movs	r0, r5
 8001e1e:	1aca      	subs	r2, r1, r3
 8001e20:	40d0      	lsrs	r0, r2
 8001e22:	409c      	lsls	r4, r3
 8001e24:	0002      	movs	r2, r0
 8001e26:	409d      	lsls	r5, r3
 8001e28:	4322      	orrs	r2, r4
 8001e2a:	429f      	cmp	r7, r3
 8001e2c:	dd00      	ble.n	8001e30 <__aeabi_dsub+0xf4>
 8001e2e:	e177      	b.n	8002120 <__aeabi_dsub+0x3e4>
 8001e30:	1bd8      	subs	r0, r3, r7
 8001e32:	3001      	adds	r0, #1
 8001e34:	1a09      	subs	r1, r1, r0
 8001e36:	002c      	movs	r4, r5
 8001e38:	408d      	lsls	r5, r1
 8001e3a:	40c4      	lsrs	r4, r0
 8001e3c:	1e6b      	subs	r3, r5, #1
 8001e3e:	419d      	sbcs	r5, r3
 8001e40:	0013      	movs	r3, r2
 8001e42:	40c2      	lsrs	r2, r0
 8001e44:	408b      	lsls	r3, r1
 8001e46:	4325      	orrs	r5, r4
 8001e48:	2700      	movs	r7, #0
 8001e4a:	0014      	movs	r4, r2
 8001e4c:	431d      	orrs	r5, r3
 8001e4e:	076b      	lsls	r3, r5, #29
 8001e50:	d009      	beq.n	8001e66 <__aeabi_dsub+0x12a>
 8001e52:	230f      	movs	r3, #15
 8001e54:	402b      	ands	r3, r5
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d005      	beq.n	8001e66 <__aeabi_dsub+0x12a>
 8001e5a:	1d2b      	adds	r3, r5, #4
 8001e5c:	42ab      	cmp	r3, r5
 8001e5e:	41ad      	sbcs	r5, r5
 8001e60:	426d      	negs	r5, r5
 8001e62:	1964      	adds	r4, r4, r5
 8001e64:	001d      	movs	r5, r3
 8001e66:	0223      	lsls	r3, r4, #8
 8001e68:	d400      	bmi.n	8001e6c <__aeabi_dsub+0x130>
 8001e6a:	e140      	b.n	80020ee <__aeabi_dsub+0x3b2>
 8001e6c:	4a88      	ldr	r2, [pc, #544]	@ (8002090 <__aeabi_dsub+0x354>)
 8001e6e:	3701      	adds	r7, #1
 8001e70:	4297      	cmp	r7, r2
 8001e72:	d100      	bne.n	8001e76 <__aeabi_dsub+0x13a>
 8001e74:	e101      	b.n	800207a <__aeabi_dsub+0x33e>
 8001e76:	2601      	movs	r6, #1
 8001e78:	4643      	mov	r3, r8
 8001e7a:	4986      	ldr	r1, [pc, #536]	@ (8002094 <__aeabi_dsub+0x358>)
 8001e7c:	08ed      	lsrs	r5, r5, #3
 8001e7e:	4021      	ands	r1, r4
 8001e80:	074a      	lsls	r2, r1, #29
 8001e82:	432a      	orrs	r2, r5
 8001e84:	057c      	lsls	r4, r7, #21
 8001e86:	024d      	lsls	r5, r1, #9
 8001e88:	0b2d      	lsrs	r5, r5, #12
 8001e8a:	0d64      	lsrs	r4, r4, #21
 8001e8c:	401e      	ands	r6, r3
 8001e8e:	0524      	lsls	r4, r4, #20
 8001e90:	432c      	orrs	r4, r5
 8001e92:	07f6      	lsls	r6, r6, #31
 8001e94:	4334      	orrs	r4, r6
 8001e96:	0010      	movs	r0, r2
 8001e98:	0021      	movs	r1, r4
 8001e9a:	b005      	add	sp, #20
 8001e9c:	bcf0      	pop	{r4, r5, r6, r7}
 8001e9e:	46bb      	mov	fp, r7
 8001ea0:	46b2      	mov	sl, r6
 8001ea2:	46a9      	mov	r9, r5
 8001ea4:	46a0      	mov	r8, r4
 8001ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ea8:	2d00      	cmp	r5, #0
 8001eaa:	dc00      	bgt.n	8001eae <__aeabi_dsub+0x172>
 8001eac:	e2d0      	b.n	8002450 <__aeabi_dsub+0x714>
 8001eae:	4649      	mov	r1, r9
 8001eb0:	2900      	cmp	r1, #0
 8001eb2:	d000      	beq.n	8001eb6 <__aeabi_dsub+0x17a>
 8001eb4:	e0d4      	b.n	8002060 <__aeabi_dsub+0x324>
 8001eb6:	4661      	mov	r1, ip
 8001eb8:	9b02      	ldr	r3, [sp, #8]
 8001eba:	4319      	orrs	r1, r3
 8001ebc:	d100      	bne.n	8001ec0 <__aeabi_dsub+0x184>
 8001ebe:	e12b      	b.n	8002118 <__aeabi_dsub+0x3dc>
 8001ec0:	1e69      	subs	r1, r5, #1
 8001ec2:	2d01      	cmp	r5, #1
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_dsub+0x18c>
 8001ec6:	e1d9      	b.n	800227c <__aeabi_dsub+0x540>
 8001ec8:	4295      	cmp	r5, r2
 8001eca:	d100      	bne.n	8001ece <__aeabi_dsub+0x192>
 8001ecc:	e10a      	b.n	80020e4 <__aeabi_dsub+0x3a8>
 8001ece:	2501      	movs	r5, #1
 8001ed0:	2938      	cmp	r1, #56	@ 0x38
 8001ed2:	dc17      	bgt.n	8001f04 <__aeabi_dsub+0x1c8>
 8001ed4:	468a      	mov	sl, r1
 8001ed6:	4653      	mov	r3, sl
 8001ed8:	2b1f      	cmp	r3, #31
 8001eda:	dd00      	ble.n	8001ede <__aeabi_dsub+0x1a2>
 8001edc:	e1e7      	b.n	80022ae <__aeabi_dsub+0x572>
 8001ede:	2220      	movs	r2, #32
 8001ee0:	1ad2      	subs	r2, r2, r3
 8001ee2:	9b02      	ldr	r3, [sp, #8]
 8001ee4:	4661      	mov	r1, ip
 8001ee6:	4093      	lsls	r3, r2
 8001ee8:	001d      	movs	r5, r3
 8001eea:	4653      	mov	r3, sl
 8001eec:	40d9      	lsrs	r1, r3
 8001eee:	4663      	mov	r3, ip
 8001ef0:	4093      	lsls	r3, r2
 8001ef2:	001a      	movs	r2, r3
 8001ef4:	430d      	orrs	r5, r1
 8001ef6:	1e51      	subs	r1, r2, #1
 8001ef8:	418a      	sbcs	r2, r1
 8001efa:	4653      	mov	r3, sl
 8001efc:	4315      	orrs	r5, r2
 8001efe:	9a02      	ldr	r2, [sp, #8]
 8001f00:	40da      	lsrs	r2, r3
 8001f02:	18a4      	adds	r4, r4, r2
 8001f04:	182d      	adds	r5, r5, r0
 8001f06:	4285      	cmp	r5, r0
 8001f08:	4180      	sbcs	r0, r0
 8001f0a:	4240      	negs	r0, r0
 8001f0c:	1824      	adds	r4, r4, r0
 8001f0e:	0223      	lsls	r3, r4, #8
 8001f10:	d400      	bmi.n	8001f14 <__aeabi_dsub+0x1d8>
 8001f12:	e0b6      	b.n	8002082 <__aeabi_dsub+0x346>
 8001f14:	4b5e      	ldr	r3, [pc, #376]	@ (8002090 <__aeabi_dsub+0x354>)
 8001f16:	3701      	adds	r7, #1
 8001f18:	429f      	cmp	r7, r3
 8001f1a:	d100      	bne.n	8001f1e <__aeabi_dsub+0x1e2>
 8001f1c:	e0ad      	b.n	800207a <__aeabi_dsub+0x33e>
 8001f1e:	2101      	movs	r1, #1
 8001f20:	4b5c      	ldr	r3, [pc, #368]	@ (8002094 <__aeabi_dsub+0x358>)
 8001f22:	086a      	lsrs	r2, r5, #1
 8001f24:	401c      	ands	r4, r3
 8001f26:	4029      	ands	r1, r5
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	07e5      	lsls	r5, r4, #31
 8001f2c:	4315      	orrs	r5, r2
 8001f2e:	0864      	lsrs	r4, r4, #1
 8001f30:	e78d      	b.n	8001e4e <__aeabi_dsub+0x112>
 8001f32:	4a59      	ldr	r2, [pc, #356]	@ (8002098 <__aeabi_dsub+0x35c>)
 8001f34:	9b02      	ldr	r3, [sp, #8]
 8001f36:	4692      	mov	sl, r2
 8001f38:	4662      	mov	r2, ip
 8001f3a:	44ba      	add	sl, r7
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	d02c      	beq.n	8001f9a <__aeabi_dsub+0x25e>
 8001f40:	428e      	cmp	r6, r1
 8001f42:	d02e      	beq.n	8001fa2 <__aeabi_dsub+0x266>
 8001f44:	4652      	mov	r2, sl
 8001f46:	2a00      	cmp	r2, #0
 8001f48:	d060      	beq.n	800200c <__aeabi_dsub+0x2d0>
 8001f4a:	2f00      	cmp	r7, #0
 8001f4c:	d100      	bne.n	8001f50 <__aeabi_dsub+0x214>
 8001f4e:	e0db      	b.n	8002108 <__aeabi_dsub+0x3cc>
 8001f50:	4663      	mov	r3, ip
 8001f52:	000e      	movs	r6, r1
 8001f54:	9c02      	ldr	r4, [sp, #8]
 8001f56:	08d8      	lsrs	r0, r3, #3
 8001f58:	0762      	lsls	r2, r4, #29
 8001f5a:	4302      	orrs	r2, r0
 8001f5c:	08e4      	lsrs	r4, r4, #3
 8001f5e:	0013      	movs	r3, r2
 8001f60:	4323      	orrs	r3, r4
 8001f62:	d100      	bne.n	8001f66 <__aeabi_dsub+0x22a>
 8001f64:	e254      	b.n	8002410 <__aeabi_dsub+0x6d4>
 8001f66:	2580      	movs	r5, #128	@ 0x80
 8001f68:	032d      	lsls	r5, r5, #12
 8001f6a:	4325      	orrs	r5, r4
 8001f6c:	032d      	lsls	r5, r5, #12
 8001f6e:	4c48      	ldr	r4, [pc, #288]	@ (8002090 <__aeabi_dsub+0x354>)
 8001f70:	0b2d      	lsrs	r5, r5, #12
 8001f72:	e78c      	b.n	8001e8e <__aeabi_dsub+0x152>
 8001f74:	4661      	mov	r1, ip
 8001f76:	9b02      	ldr	r3, [sp, #8]
 8001f78:	4319      	orrs	r1, r3
 8001f7a:	d100      	bne.n	8001f7e <__aeabi_dsub+0x242>
 8001f7c:	e0cc      	b.n	8002118 <__aeabi_dsub+0x3dc>
 8001f7e:	0029      	movs	r1, r5
 8001f80:	3901      	subs	r1, #1
 8001f82:	2d01      	cmp	r5, #1
 8001f84:	d100      	bne.n	8001f88 <__aeabi_dsub+0x24c>
 8001f86:	e188      	b.n	800229a <__aeabi_dsub+0x55e>
 8001f88:	4295      	cmp	r5, r2
 8001f8a:	d100      	bne.n	8001f8e <__aeabi_dsub+0x252>
 8001f8c:	e0aa      	b.n	80020e4 <__aeabi_dsub+0x3a8>
 8001f8e:	2501      	movs	r5, #1
 8001f90:	2938      	cmp	r1, #56	@ 0x38
 8001f92:	dd00      	ble.n	8001f96 <__aeabi_dsub+0x25a>
 8001f94:	e72f      	b.n	8001df6 <__aeabi_dsub+0xba>
 8001f96:	468a      	mov	sl, r1
 8001f98:	e718      	b.n	8001dcc <__aeabi_dsub+0x90>
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	4051      	eors	r1, r2
 8001f9e:	428e      	cmp	r6, r1
 8001fa0:	d1d0      	bne.n	8001f44 <__aeabi_dsub+0x208>
 8001fa2:	4653      	mov	r3, sl
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d100      	bne.n	8001faa <__aeabi_dsub+0x26e>
 8001fa8:	e0be      	b.n	8002128 <__aeabi_dsub+0x3ec>
 8001faa:	2f00      	cmp	r7, #0
 8001fac:	d000      	beq.n	8001fb0 <__aeabi_dsub+0x274>
 8001fae:	e138      	b.n	8002222 <__aeabi_dsub+0x4e6>
 8001fb0:	46ca      	mov	sl, r9
 8001fb2:	0022      	movs	r2, r4
 8001fb4:	4302      	orrs	r2, r0
 8001fb6:	d100      	bne.n	8001fba <__aeabi_dsub+0x27e>
 8001fb8:	e1e2      	b.n	8002380 <__aeabi_dsub+0x644>
 8001fba:	4653      	mov	r3, sl
 8001fbc:	1e59      	subs	r1, r3, #1
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d100      	bne.n	8001fc4 <__aeabi_dsub+0x288>
 8001fc2:	e20d      	b.n	80023e0 <__aeabi_dsub+0x6a4>
 8001fc4:	4a32      	ldr	r2, [pc, #200]	@ (8002090 <__aeabi_dsub+0x354>)
 8001fc6:	4592      	cmp	sl, r2
 8001fc8:	d100      	bne.n	8001fcc <__aeabi_dsub+0x290>
 8001fca:	e1d2      	b.n	8002372 <__aeabi_dsub+0x636>
 8001fcc:	2701      	movs	r7, #1
 8001fce:	2938      	cmp	r1, #56	@ 0x38
 8001fd0:	dc13      	bgt.n	8001ffa <__aeabi_dsub+0x2be>
 8001fd2:	291f      	cmp	r1, #31
 8001fd4:	dd00      	ble.n	8001fd8 <__aeabi_dsub+0x29c>
 8001fd6:	e1ee      	b.n	80023b6 <__aeabi_dsub+0x67a>
 8001fd8:	2220      	movs	r2, #32
 8001fda:	9b02      	ldr	r3, [sp, #8]
 8001fdc:	1a52      	subs	r2, r2, r1
 8001fde:	0025      	movs	r5, r4
 8001fe0:	0007      	movs	r7, r0
 8001fe2:	469a      	mov	sl, r3
 8001fe4:	40cc      	lsrs	r4, r1
 8001fe6:	4090      	lsls	r0, r2
 8001fe8:	4095      	lsls	r5, r2
 8001fea:	40cf      	lsrs	r7, r1
 8001fec:	44a2      	add	sl, r4
 8001fee:	1e42      	subs	r2, r0, #1
 8001ff0:	4190      	sbcs	r0, r2
 8001ff2:	4653      	mov	r3, sl
 8001ff4:	432f      	orrs	r7, r5
 8001ff6:	4307      	orrs	r7, r0
 8001ff8:	9302      	str	r3, [sp, #8]
 8001ffa:	003d      	movs	r5, r7
 8001ffc:	4465      	add	r5, ip
 8001ffe:	4565      	cmp	r5, ip
 8002000:	4192      	sbcs	r2, r2
 8002002:	9b02      	ldr	r3, [sp, #8]
 8002004:	4252      	negs	r2, r2
 8002006:	464f      	mov	r7, r9
 8002008:	18d4      	adds	r4, r2, r3
 800200a:	e780      	b.n	8001f0e <__aeabi_dsub+0x1d2>
 800200c:	4a23      	ldr	r2, [pc, #140]	@ (800209c <__aeabi_dsub+0x360>)
 800200e:	1c7d      	adds	r5, r7, #1
 8002010:	4215      	tst	r5, r2
 8002012:	d000      	beq.n	8002016 <__aeabi_dsub+0x2da>
 8002014:	e0aa      	b.n	800216c <__aeabi_dsub+0x430>
 8002016:	4662      	mov	r2, ip
 8002018:	0025      	movs	r5, r4
 800201a:	9b02      	ldr	r3, [sp, #8]
 800201c:	4305      	orrs	r5, r0
 800201e:	431a      	orrs	r2, r3
 8002020:	2f00      	cmp	r7, #0
 8002022:	d000      	beq.n	8002026 <__aeabi_dsub+0x2ea>
 8002024:	e0f5      	b.n	8002212 <__aeabi_dsub+0x4d6>
 8002026:	2d00      	cmp	r5, #0
 8002028:	d100      	bne.n	800202c <__aeabi_dsub+0x2f0>
 800202a:	e16b      	b.n	8002304 <__aeabi_dsub+0x5c8>
 800202c:	2a00      	cmp	r2, #0
 800202e:	d100      	bne.n	8002032 <__aeabi_dsub+0x2f6>
 8002030:	e152      	b.n	80022d8 <__aeabi_dsub+0x59c>
 8002032:	4663      	mov	r3, ip
 8002034:	1ac5      	subs	r5, r0, r3
 8002036:	9b02      	ldr	r3, [sp, #8]
 8002038:	1ae2      	subs	r2, r4, r3
 800203a:	42a8      	cmp	r0, r5
 800203c:	419b      	sbcs	r3, r3
 800203e:	425b      	negs	r3, r3
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	021a      	lsls	r2, r3, #8
 8002044:	d400      	bmi.n	8002048 <__aeabi_dsub+0x30c>
 8002046:	e1d5      	b.n	80023f4 <__aeabi_dsub+0x6b8>
 8002048:	4663      	mov	r3, ip
 800204a:	1a1d      	subs	r5, r3, r0
 800204c:	45ac      	cmp	ip, r5
 800204e:	4192      	sbcs	r2, r2
 8002050:	2601      	movs	r6, #1
 8002052:	9b02      	ldr	r3, [sp, #8]
 8002054:	4252      	negs	r2, r2
 8002056:	1b1c      	subs	r4, r3, r4
 8002058:	4688      	mov	r8, r1
 800205a:	1aa4      	subs	r4, r4, r2
 800205c:	400e      	ands	r6, r1
 800205e:	e6f6      	b.n	8001e4e <__aeabi_dsub+0x112>
 8002060:	4297      	cmp	r7, r2
 8002062:	d03f      	beq.n	80020e4 <__aeabi_dsub+0x3a8>
 8002064:	4652      	mov	r2, sl
 8002066:	2501      	movs	r5, #1
 8002068:	2a38      	cmp	r2, #56	@ 0x38
 800206a:	dd00      	ble.n	800206e <__aeabi_dsub+0x332>
 800206c:	e74a      	b.n	8001f04 <__aeabi_dsub+0x1c8>
 800206e:	2280      	movs	r2, #128	@ 0x80
 8002070:	9b02      	ldr	r3, [sp, #8]
 8002072:	0412      	lsls	r2, r2, #16
 8002074:	4313      	orrs	r3, r2
 8002076:	9302      	str	r3, [sp, #8]
 8002078:	e72d      	b.n	8001ed6 <__aeabi_dsub+0x19a>
 800207a:	003c      	movs	r4, r7
 800207c:	2500      	movs	r5, #0
 800207e:	2200      	movs	r2, #0
 8002080:	e705      	b.n	8001e8e <__aeabi_dsub+0x152>
 8002082:	2307      	movs	r3, #7
 8002084:	402b      	ands	r3, r5
 8002086:	2b00      	cmp	r3, #0
 8002088:	d000      	beq.n	800208c <__aeabi_dsub+0x350>
 800208a:	e6e2      	b.n	8001e52 <__aeabi_dsub+0x116>
 800208c:	e06b      	b.n	8002166 <__aeabi_dsub+0x42a>
 800208e:	46c0      	nop			@ (mov r8, r8)
 8002090:	000007ff 	.word	0x000007ff
 8002094:	ff7fffff 	.word	0xff7fffff
 8002098:	fffff801 	.word	0xfffff801
 800209c:	000007fe 	.word	0x000007fe
 80020a0:	0028      	movs	r0, r5
 80020a2:	f000 fb63 	bl	800276c <__clzsi2>
 80020a6:	0003      	movs	r3, r0
 80020a8:	3318      	adds	r3, #24
 80020aa:	2b1f      	cmp	r3, #31
 80020ac:	dc00      	bgt.n	80020b0 <__aeabi_dsub+0x374>
 80020ae:	e6b4      	b.n	8001e1a <__aeabi_dsub+0xde>
 80020b0:	002a      	movs	r2, r5
 80020b2:	3808      	subs	r0, #8
 80020b4:	4082      	lsls	r2, r0
 80020b6:	429f      	cmp	r7, r3
 80020b8:	dd00      	ble.n	80020bc <__aeabi_dsub+0x380>
 80020ba:	e0b9      	b.n	8002230 <__aeabi_dsub+0x4f4>
 80020bc:	1bdb      	subs	r3, r3, r7
 80020be:	1c58      	adds	r0, r3, #1
 80020c0:	281f      	cmp	r0, #31
 80020c2:	dc00      	bgt.n	80020c6 <__aeabi_dsub+0x38a>
 80020c4:	e1a0      	b.n	8002408 <__aeabi_dsub+0x6cc>
 80020c6:	0015      	movs	r5, r2
 80020c8:	3b1f      	subs	r3, #31
 80020ca:	40dd      	lsrs	r5, r3
 80020cc:	2820      	cmp	r0, #32
 80020ce:	d005      	beq.n	80020dc <__aeabi_dsub+0x3a0>
 80020d0:	2340      	movs	r3, #64	@ 0x40
 80020d2:	1a1b      	subs	r3, r3, r0
 80020d4:	409a      	lsls	r2, r3
 80020d6:	1e53      	subs	r3, r2, #1
 80020d8:	419a      	sbcs	r2, r3
 80020da:	4315      	orrs	r5, r2
 80020dc:	2307      	movs	r3, #7
 80020de:	2700      	movs	r7, #0
 80020e0:	402b      	ands	r3, r5
 80020e2:	e7d0      	b.n	8002086 <__aeabi_dsub+0x34a>
 80020e4:	08c0      	lsrs	r0, r0, #3
 80020e6:	0762      	lsls	r2, r4, #29
 80020e8:	4302      	orrs	r2, r0
 80020ea:	08e4      	lsrs	r4, r4, #3
 80020ec:	e737      	b.n	8001f5e <__aeabi_dsub+0x222>
 80020ee:	08ea      	lsrs	r2, r5, #3
 80020f0:	0763      	lsls	r3, r4, #29
 80020f2:	431a      	orrs	r2, r3
 80020f4:	4bd3      	ldr	r3, [pc, #844]	@ (8002444 <__aeabi_dsub+0x708>)
 80020f6:	08e4      	lsrs	r4, r4, #3
 80020f8:	429f      	cmp	r7, r3
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x3c2>
 80020fc:	e72f      	b.n	8001f5e <__aeabi_dsub+0x222>
 80020fe:	0324      	lsls	r4, r4, #12
 8002100:	0b25      	lsrs	r5, r4, #12
 8002102:	057c      	lsls	r4, r7, #21
 8002104:	0d64      	lsrs	r4, r4, #21
 8002106:	e6c2      	b.n	8001e8e <__aeabi_dsub+0x152>
 8002108:	46ca      	mov	sl, r9
 800210a:	0022      	movs	r2, r4
 800210c:	4302      	orrs	r2, r0
 800210e:	d158      	bne.n	80021c2 <__aeabi_dsub+0x486>
 8002110:	4663      	mov	r3, ip
 8002112:	000e      	movs	r6, r1
 8002114:	9c02      	ldr	r4, [sp, #8]
 8002116:	9303      	str	r3, [sp, #12]
 8002118:	9b03      	ldr	r3, [sp, #12]
 800211a:	4657      	mov	r7, sl
 800211c:	08da      	lsrs	r2, r3, #3
 800211e:	e7e7      	b.n	80020f0 <__aeabi_dsub+0x3b4>
 8002120:	4cc9      	ldr	r4, [pc, #804]	@ (8002448 <__aeabi_dsub+0x70c>)
 8002122:	1aff      	subs	r7, r7, r3
 8002124:	4014      	ands	r4, r2
 8002126:	e692      	b.n	8001e4e <__aeabi_dsub+0x112>
 8002128:	4dc8      	ldr	r5, [pc, #800]	@ (800244c <__aeabi_dsub+0x710>)
 800212a:	1c7a      	adds	r2, r7, #1
 800212c:	422a      	tst	r2, r5
 800212e:	d000      	beq.n	8002132 <__aeabi_dsub+0x3f6>
 8002130:	e084      	b.n	800223c <__aeabi_dsub+0x500>
 8002132:	0022      	movs	r2, r4
 8002134:	4302      	orrs	r2, r0
 8002136:	2f00      	cmp	r7, #0
 8002138:	d000      	beq.n	800213c <__aeabi_dsub+0x400>
 800213a:	e0ef      	b.n	800231c <__aeabi_dsub+0x5e0>
 800213c:	2a00      	cmp	r2, #0
 800213e:	d100      	bne.n	8002142 <__aeabi_dsub+0x406>
 8002140:	e0e5      	b.n	800230e <__aeabi_dsub+0x5d2>
 8002142:	4662      	mov	r2, ip
 8002144:	9902      	ldr	r1, [sp, #8]
 8002146:	430a      	orrs	r2, r1
 8002148:	d100      	bne.n	800214c <__aeabi_dsub+0x410>
 800214a:	e0c5      	b.n	80022d8 <__aeabi_dsub+0x59c>
 800214c:	4663      	mov	r3, ip
 800214e:	18c5      	adds	r5, r0, r3
 8002150:	468c      	mov	ip, r1
 8002152:	4285      	cmp	r5, r0
 8002154:	4180      	sbcs	r0, r0
 8002156:	4464      	add	r4, ip
 8002158:	4240      	negs	r0, r0
 800215a:	1824      	adds	r4, r4, r0
 800215c:	0223      	lsls	r3, r4, #8
 800215e:	d502      	bpl.n	8002166 <__aeabi_dsub+0x42a>
 8002160:	4bb9      	ldr	r3, [pc, #740]	@ (8002448 <__aeabi_dsub+0x70c>)
 8002162:	3701      	adds	r7, #1
 8002164:	401c      	ands	r4, r3
 8002166:	46ba      	mov	sl, r7
 8002168:	9503      	str	r5, [sp, #12]
 800216a:	e7d5      	b.n	8002118 <__aeabi_dsub+0x3dc>
 800216c:	4662      	mov	r2, ip
 800216e:	1a85      	subs	r5, r0, r2
 8002170:	42a8      	cmp	r0, r5
 8002172:	4192      	sbcs	r2, r2
 8002174:	4252      	negs	r2, r2
 8002176:	4691      	mov	r9, r2
 8002178:	9b02      	ldr	r3, [sp, #8]
 800217a:	1ae3      	subs	r3, r4, r3
 800217c:	001a      	movs	r2, r3
 800217e:	464b      	mov	r3, r9
 8002180:	1ad2      	subs	r2, r2, r3
 8002182:	0013      	movs	r3, r2
 8002184:	4691      	mov	r9, r2
 8002186:	021a      	lsls	r2, r3, #8
 8002188:	d46c      	bmi.n	8002264 <__aeabi_dsub+0x528>
 800218a:	464a      	mov	r2, r9
 800218c:	464c      	mov	r4, r9
 800218e:	432a      	orrs	r2, r5
 8002190:	d000      	beq.n	8002194 <__aeabi_dsub+0x458>
 8002192:	e63a      	b.n	8001e0a <__aeabi_dsub+0xce>
 8002194:	2600      	movs	r6, #0
 8002196:	2400      	movs	r4, #0
 8002198:	2500      	movs	r5, #0
 800219a:	e678      	b.n	8001e8e <__aeabi_dsub+0x152>
 800219c:	9902      	ldr	r1, [sp, #8]
 800219e:	4653      	mov	r3, sl
 80021a0:	000d      	movs	r5, r1
 80021a2:	3a20      	subs	r2, #32
 80021a4:	40d5      	lsrs	r5, r2
 80021a6:	2b20      	cmp	r3, #32
 80021a8:	d006      	beq.n	80021b8 <__aeabi_dsub+0x47c>
 80021aa:	2240      	movs	r2, #64	@ 0x40
 80021ac:	1ad2      	subs	r2, r2, r3
 80021ae:	000b      	movs	r3, r1
 80021b0:	4093      	lsls	r3, r2
 80021b2:	4662      	mov	r2, ip
 80021b4:	431a      	orrs	r2, r3
 80021b6:	4693      	mov	fp, r2
 80021b8:	465b      	mov	r3, fp
 80021ba:	1e5a      	subs	r2, r3, #1
 80021bc:	4193      	sbcs	r3, r2
 80021be:	431d      	orrs	r5, r3
 80021c0:	e619      	b.n	8001df6 <__aeabi_dsub+0xba>
 80021c2:	4653      	mov	r3, sl
 80021c4:	1e5a      	subs	r2, r3, #1
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d100      	bne.n	80021cc <__aeabi_dsub+0x490>
 80021ca:	e0c6      	b.n	800235a <__aeabi_dsub+0x61e>
 80021cc:	4e9d      	ldr	r6, [pc, #628]	@ (8002444 <__aeabi_dsub+0x708>)
 80021ce:	45b2      	cmp	sl, r6
 80021d0:	d100      	bne.n	80021d4 <__aeabi_dsub+0x498>
 80021d2:	e6bd      	b.n	8001f50 <__aeabi_dsub+0x214>
 80021d4:	4688      	mov	r8, r1
 80021d6:	000e      	movs	r6, r1
 80021d8:	2501      	movs	r5, #1
 80021da:	2a38      	cmp	r2, #56	@ 0x38
 80021dc:	dc10      	bgt.n	8002200 <__aeabi_dsub+0x4c4>
 80021de:	2a1f      	cmp	r2, #31
 80021e0:	dc7f      	bgt.n	80022e2 <__aeabi_dsub+0x5a6>
 80021e2:	2120      	movs	r1, #32
 80021e4:	0025      	movs	r5, r4
 80021e6:	1a89      	subs	r1, r1, r2
 80021e8:	0007      	movs	r7, r0
 80021ea:	4088      	lsls	r0, r1
 80021ec:	408d      	lsls	r5, r1
 80021ee:	40d7      	lsrs	r7, r2
 80021f0:	40d4      	lsrs	r4, r2
 80021f2:	1e41      	subs	r1, r0, #1
 80021f4:	4188      	sbcs	r0, r1
 80021f6:	9b02      	ldr	r3, [sp, #8]
 80021f8:	433d      	orrs	r5, r7
 80021fa:	1b1b      	subs	r3, r3, r4
 80021fc:	4305      	orrs	r5, r0
 80021fe:	9302      	str	r3, [sp, #8]
 8002200:	4662      	mov	r2, ip
 8002202:	1b55      	subs	r5, r2, r5
 8002204:	45ac      	cmp	ip, r5
 8002206:	4192      	sbcs	r2, r2
 8002208:	9b02      	ldr	r3, [sp, #8]
 800220a:	4252      	negs	r2, r2
 800220c:	464f      	mov	r7, r9
 800220e:	1a9c      	subs	r4, r3, r2
 8002210:	e5f6      	b.n	8001e00 <__aeabi_dsub+0xc4>
 8002212:	2d00      	cmp	r5, #0
 8002214:	d000      	beq.n	8002218 <__aeabi_dsub+0x4dc>
 8002216:	e0b7      	b.n	8002388 <__aeabi_dsub+0x64c>
 8002218:	2a00      	cmp	r2, #0
 800221a:	d100      	bne.n	800221e <__aeabi_dsub+0x4e2>
 800221c:	e0f0      	b.n	8002400 <__aeabi_dsub+0x6c4>
 800221e:	2601      	movs	r6, #1
 8002220:	400e      	ands	r6, r1
 8002222:	4663      	mov	r3, ip
 8002224:	9802      	ldr	r0, [sp, #8]
 8002226:	08d9      	lsrs	r1, r3, #3
 8002228:	0742      	lsls	r2, r0, #29
 800222a:	430a      	orrs	r2, r1
 800222c:	08c4      	lsrs	r4, r0, #3
 800222e:	e696      	b.n	8001f5e <__aeabi_dsub+0x222>
 8002230:	4c85      	ldr	r4, [pc, #532]	@ (8002448 <__aeabi_dsub+0x70c>)
 8002232:	1aff      	subs	r7, r7, r3
 8002234:	4014      	ands	r4, r2
 8002236:	0762      	lsls	r2, r4, #29
 8002238:	08e4      	lsrs	r4, r4, #3
 800223a:	e760      	b.n	80020fe <__aeabi_dsub+0x3c2>
 800223c:	4981      	ldr	r1, [pc, #516]	@ (8002444 <__aeabi_dsub+0x708>)
 800223e:	428a      	cmp	r2, r1
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x508>
 8002242:	e0c9      	b.n	80023d8 <__aeabi_dsub+0x69c>
 8002244:	4663      	mov	r3, ip
 8002246:	18c1      	adds	r1, r0, r3
 8002248:	4281      	cmp	r1, r0
 800224a:	4180      	sbcs	r0, r0
 800224c:	9b02      	ldr	r3, [sp, #8]
 800224e:	4240      	negs	r0, r0
 8002250:	18e3      	adds	r3, r4, r3
 8002252:	181b      	adds	r3, r3, r0
 8002254:	07dd      	lsls	r5, r3, #31
 8002256:	085c      	lsrs	r4, r3, #1
 8002258:	2307      	movs	r3, #7
 800225a:	0849      	lsrs	r1, r1, #1
 800225c:	430d      	orrs	r5, r1
 800225e:	0017      	movs	r7, r2
 8002260:	402b      	ands	r3, r5
 8002262:	e710      	b.n	8002086 <__aeabi_dsub+0x34a>
 8002264:	4663      	mov	r3, ip
 8002266:	1a1d      	subs	r5, r3, r0
 8002268:	45ac      	cmp	ip, r5
 800226a:	4192      	sbcs	r2, r2
 800226c:	2601      	movs	r6, #1
 800226e:	9b02      	ldr	r3, [sp, #8]
 8002270:	4252      	negs	r2, r2
 8002272:	1b1c      	subs	r4, r3, r4
 8002274:	4688      	mov	r8, r1
 8002276:	1aa4      	subs	r4, r4, r2
 8002278:	400e      	ands	r6, r1
 800227a:	e5c6      	b.n	8001e0a <__aeabi_dsub+0xce>
 800227c:	4663      	mov	r3, ip
 800227e:	18c5      	adds	r5, r0, r3
 8002280:	9b02      	ldr	r3, [sp, #8]
 8002282:	4285      	cmp	r5, r0
 8002284:	4180      	sbcs	r0, r0
 8002286:	469c      	mov	ip, r3
 8002288:	4240      	negs	r0, r0
 800228a:	4464      	add	r4, ip
 800228c:	1824      	adds	r4, r4, r0
 800228e:	2701      	movs	r7, #1
 8002290:	0223      	lsls	r3, r4, #8
 8002292:	d400      	bmi.n	8002296 <__aeabi_dsub+0x55a>
 8002294:	e6f5      	b.n	8002082 <__aeabi_dsub+0x346>
 8002296:	2702      	movs	r7, #2
 8002298:	e641      	b.n	8001f1e <__aeabi_dsub+0x1e2>
 800229a:	4663      	mov	r3, ip
 800229c:	1ac5      	subs	r5, r0, r3
 800229e:	42a8      	cmp	r0, r5
 80022a0:	4180      	sbcs	r0, r0
 80022a2:	9b02      	ldr	r3, [sp, #8]
 80022a4:	4240      	negs	r0, r0
 80022a6:	1ae4      	subs	r4, r4, r3
 80022a8:	2701      	movs	r7, #1
 80022aa:	1a24      	subs	r4, r4, r0
 80022ac:	e5a8      	b.n	8001e00 <__aeabi_dsub+0xc4>
 80022ae:	9d02      	ldr	r5, [sp, #8]
 80022b0:	4652      	mov	r2, sl
 80022b2:	002b      	movs	r3, r5
 80022b4:	3a20      	subs	r2, #32
 80022b6:	40d3      	lsrs	r3, r2
 80022b8:	0019      	movs	r1, r3
 80022ba:	4653      	mov	r3, sl
 80022bc:	2b20      	cmp	r3, #32
 80022be:	d006      	beq.n	80022ce <__aeabi_dsub+0x592>
 80022c0:	2240      	movs	r2, #64	@ 0x40
 80022c2:	1ad2      	subs	r2, r2, r3
 80022c4:	002b      	movs	r3, r5
 80022c6:	4093      	lsls	r3, r2
 80022c8:	4662      	mov	r2, ip
 80022ca:	431a      	orrs	r2, r3
 80022cc:	4693      	mov	fp, r2
 80022ce:	465d      	mov	r5, fp
 80022d0:	1e6b      	subs	r3, r5, #1
 80022d2:	419d      	sbcs	r5, r3
 80022d4:	430d      	orrs	r5, r1
 80022d6:	e615      	b.n	8001f04 <__aeabi_dsub+0x1c8>
 80022d8:	0762      	lsls	r2, r4, #29
 80022da:	08c0      	lsrs	r0, r0, #3
 80022dc:	4302      	orrs	r2, r0
 80022de:	08e4      	lsrs	r4, r4, #3
 80022e0:	e70d      	b.n	80020fe <__aeabi_dsub+0x3c2>
 80022e2:	0011      	movs	r1, r2
 80022e4:	0027      	movs	r7, r4
 80022e6:	3920      	subs	r1, #32
 80022e8:	40cf      	lsrs	r7, r1
 80022ea:	2a20      	cmp	r2, #32
 80022ec:	d005      	beq.n	80022fa <__aeabi_dsub+0x5be>
 80022ee:	2140      	movs	r1, #64	@ 0x40
 80022f0:	1a8a      	subs	r2, r1, r2
 80022f2:	4094      	lsls	r4, r2
 80022f4:	0025      	movs	r5, r4
 80022f6:	4305      	orrs	r5, r0
 80022f8:	9503      	str	r5, [sp, #12]
 80022fa:	9d03      	ldr	r5, [sp, #12]
 80022fc:	1e6a      	subs	r2, r5, #1
 80022fe:	4195      	sbcs	r5, r2
 8002300:	433d      	orrs	r5, r7
 8002302:	e77d      	b.n	8002200 <__aeabi_dsub+0x4c4>
 8002304:	2a00      	cmp	r2, #0
 8002306:	d100      	bne.n	800230a <__aeabi_dsub+0x5ce>
 8002308:	e744      	b.n	8002194 <__aeabi_dsub+0x458>
 800230a:	2601      	movs	r6, #1
 800230c:	400e      	ands	r6, r1
 800230e:	4663      	mov	r3, ip
 8002310:	08d9      	lsrs	r1, r3, #3
 8002312:	9b02      	ldr	r3, [sp, #8]
 8002314:	075a      	lsls	r2, r3, #29
 8002316:	430a      	orrs	r2, r1
 8002318:	08dc      	lsrs	r4, r3, #3
 800231a:	e6f0      	b.n	80020fe <__aeabi_dsub+0x3c2>
 800231c:	2a00      	cmp	r2, #0
 800231e:	d028      	beq.n	8002372 <__aeabi_dsub+0x636>
 8002320:	4662      	mov	r2, ip
 8002322:	9f02      	ldr	r7, [sp, #8]
 8002324:	08c0      	lsrs	r0, r0, #3
 8002326:	433a      	orrs	r2, r7
 8002328:	d100      	bne.n	800232c <__aeabi_dsub+0x5f0>
 800232a:	e6dc      	b.n	80020e6 <__aeabi_dsub+0x3aa>
 800232c:	0762      	lsls	r2, r4, #29
 800232e:	4310      	orrs	r0, r2
 8002330:	2280      	movs	r2, #128	@ 0x80
 8002332:	08e4      	lsrs	r4, r4, #3
 8002334:	0312      	lsls	r2, r2, #12
 8002336:	4214      	tst	r4, r2
 8002338:	d009      	beq.n	800234e <__aeabi_dsub+0x612>
 800233a:	08fd      	lsrs	r5, r7, #3
 800233c:	4215      	tst	r5, r2
 800233e:	d106      	bne.n	800234e <__aeabi_dsub+0x612>
 8002340:	4663      	mov	r3, ip
 8002342:	2601      	movs	r6, #1
 8002344:	002c      	movs	r4, r5
 8002346:	08d8      	lsrs	r0, r3, #3
 8002348:	077b      	lsls	r3, r7, #29
 800234a:	4318      	orrs	r0, r3
 800234c:	400e      	ands	r6, r1
 800234e:	0f42      	lsrs	r2, r0, #29
 8002350:	00c0      	lsls	r0, r0, #3
 8002352:	08c0      	lsrs	r0, r0, #3
 8002354:	0752      	lsls	r2, r2, #29
 8002356:	4302      	orrs	r2, r0
 8002358:	e601      	b.n	8001f5e <__aeabi_dsub+0x222>
 800235a:	4663      	mov	r3, ip
 800235c:	1a1d      	subs	r5, r3, r0
 800235e:	45ac      	cmp	ip, r5
 8002360:	4192      	sbcs	r2, r2
 8002362:	9b02      	ldr	r3, [sp, #8]
 8002364:	4252      	negs	r2, r2
 8002366:	1b1c      	subs	r4, r3, r4
 8002368:	000e      	movs	r6, r1
 800236a:	4688      	mov	r8, r1
 800236c:	2701      	movs	r7, #1
 800236e:	1aa4      	subs	r4, r4, r2
 8002370:	e546      	b.n	8001e00 <__aeabi_dsub+0xc4>
 8002372:	4663      	mov	r3, ip
 8002374:	08d9      	lsrs	r1, r3, #3
 8002376:	9b02      	ldr	r3, [sp, #8]
 8002378:	075a      	lsls	r2, r3, #29
 800237a:	430a      	orrs	r2, r1
 800237c:	08dc      	lsrs	r4, r3, #3
 800237e:	e5ee      	b.n	8001f5e <__aeabi_dsub+0x222>
 8002380:	4663      	mov	r3, ip
 8002382:	9c02      	ldr	r4, [sp, #8]
 8002384:	9303      	str	r3, [sp, #12]
 8002386:	e6c7      	b.n	8002118 <__aeabi_dsub+0x3dc>
 8002388:	08c0      	lsrs	r0, r0, #3
 800238a:	2a00      	cmp	r2, #0
 800238c:	d100      	bne.n	8002390 <__aeabi_dsub+0x654>
 800238e:	e6aa      	b.n	80020e6 <__aeabi_dsub+0x3aa>
 8002390:	0762      	lsls	r2, r4, #29
 8002392:	4310      	orrs	r0, r2
 8002394:	2280      	movs	r2, #128	@ 0x80
 8002396:	08e4      	lsrs	r4, r4, #3
 8002398:	0312      	lsls	r2, r2, #12
 800239a:	4214      	tst	r4, r2
 800239c:	d0d7      	beq.n	800234e <__aeabi_dsub+0x612>
 800239e:	9f02      	ldr	r7, [sp, #8]
 80023a0:	08fd      	lsrs	r5, r7, #3
 80023a2:	4215      	tst	r5, r2
 80023a4:	d1d3      	bne.n	800234e <__aeabi_dsub+0x612>
 80023a6:	4663      	mov	r3, ip
 80023a8:	2601      	movs	r6, #1
 80023aa:	08d8      	lsrs	r0, r3, #3
 80023ac:	077b      	lsls	r3, r7, #29
 80023ae:	002c      	movs	r4, r5
 80023b0:	4318      	orrs	r0, r3
 80023b2:	400e      	ands	r6, r1
 80023b4:	e7cb      	b.n	800234e <__aeabi_dsub+0x612>
 80023b6:	000a      	movs	r2, r1
 80023b8:	0027      	movs	r7, r4
 80023ba:	3a20      	subs	r2, #32
 80023bc:	40d7      	lsrs	r7, r2
 80023be:	2920      	cmp	r1, #32
 80023c0:	d005      	beq.n	80023ce <__aeabi_dsub+0x692>
 80023c2:	2240      	movs	r2, #64	@ 0x40
 80023c4:	1a52      	subs	r2, r2, r1
 80023c6:	4094      	lsls	r4, r2
 80023c8:	0025      	movs	r5, r4
 80023ca:	4305      	orrs	r5, r0
 80023cc:	9503      	str	r5, [sp, #12]
 80023ce:	9d03      	ldr	r5, [sp, #12]
 80023d0:	1e6a      	subs	r2, r5, #1
 80023d2:	4195      	sbcs	r5, r2
 80023d4:	432f      	orrs	r7, r5
 80023d6:	e610      	b.n	8001ffa <__aeabi_dsub+0x2be>
 80023d8:	0014      	movs	r4, r2
 80023da:	2500      	movs	r5, #0
 80023dc:	2200      	movs	r2, #0
 80023de:	e556      	b.n	8001e8e <__aeabi_dsub+0x152>
 80023e0:	9b02      	ldr	r3, [sp, #8]
 80023e2:	4460      	add	r0, ip
 80023e4:	4699      	mov	r9, r3
 80023e6:	4560      	cmp	r0, ip
 80023e8:	4192      	sbcs	r2, r2
 80023ea:	444c      	add	r4, r9
 80023ec:	4252      	negs	r2, r2
 80023ee:	0005      	movs	r5, r0
 80023f0:	18a4      	adds	r4, r4, r2
 80023f2:	e74c      	b.n	800228e <__aeabi_dsub+0x552>
 80023f4:	001a      	movs	r2, r3
 80023f6:	001c      	movs	r4, r3
 80023f8:	432a      	orrs	r2, r5
 80023fa:	d000      	beq.n	80023fe <__aeabi_dsub+0x6c2>
 80023fc:	e6b3      	b.n	8002166 <__aeabi_dsub+0x42a>
 80023fe:	e6c9      	b.n	8002194 <__aeabi_dsub+0x458>
 8002400:	2480      	movs	r4, #128	@ 0x80
 8002402:	2600      	movs	r6, #0
 8002404:	0324      	lsls	r4, r4, #12
 8002406:	e5ae      	b.n	8001f66 <__aeabi_dsub+0x22a>
 8002408:	2120      	movs	r1, #32
 800240a:	2500      	movs	r5, #0
 800240c:	1a09      	subs	r1, r1, r0
 800240e:	e517      	b.n	8001e40 <__aeabi_dsub+0x104>
 8002410:	2200      	movs	r2, #0
 8002412:	2500      	movs	r5, #0
 8002414:	4c0b      	ldr	r4, [pc, #44]	@ (8002444 <__aeabi_dsub+0x708>)
 8002416:	e53a      	b.n	8001e8e <__aeabi_dsub+0x152>
 8002418:	2d00      	cmp	r5, #0
 800241a:	d100      	bne.n	800241e <__aeabi_dsub+0x6e2>
 800241c:	e5f6      	b.n	800200c <__aeabi_dsub+0x2d0>
 800241e:	464b      	mov	r3, r9
 8002420:	1bda      	subs	r2, r3, r7
 8002422:	4692      	mov	sl, r2
 8002424:	2f00      	cmp	r7, #0
 8002426:	d100      	bne.n	800242a <__aeabi_dsub+0x6ee>
 8002428:	e66f      	b.n	800210a <__aeabi_dsub+0x3ce>
 800242a:	2a38      	cmp	r2, #56	@ 0x38
 800242c:	dc05      	bgt.n	800243a <__aeabi_dsub+0x6fe>
 800242e:	2680      	movs	r6, #128	@ 0x80
 8002430:	0436      	lsls	r6, r6, #16
 8002432:	4334      	orrs	r4, r6
 8002434:	4688      	mov	r8, r1
 8002436:	000e      	movs	r6, r1
 8002438:	e6d1      	b.n	80021de <__aeabi_dsub+0x4a2>
 800243a:	4688      	mov	r8, r1
 800243c:	000e      	movs	r6, r1
 800243e:	2501      	movs	r5, #1
 8002440:	e6de      	b.n	8002200 <__aeabi_dsub+0x4c4>
 8002442:	46c0      	nop			@ (mov r8, r8)
 8002444:	000007ff 	.word	0x000007ff
 8002448:	ff7fffff 	.word	0xff7fffff
 800244c:	000007fe 	.word	0x000007fe
 8002450:	2d00      	cmp	r5, #0
 8002452:	d100      	bne.n	8002456 <__aeabi_dsub+0x71a>
 8002454:	e668      	b.n	8002128 <__aeabi_dsub+0x3ec>
 8002456:	464b      	mov	r3, r9
 8002458:	1bd9      	subs	r1, r3, r7
 800245a:	2f00      	cmp	r7, #0
 800245c:	d101      	bne.n	8002462 <__aeabi_dsub+0x726>
 800245e:	468a      	mov	sl, r1
 8002460:	e5a7      	b.n	8001fb2 <__aeabi_dsub+0x276>
 8002462:	2701      	movs	r7, #1
 8002464:	2938      	cmp	r1, #56	@ 0x38
 8002466:	dd00      	ble.n	800246a <__aeabi_dsub+0x72e>
 8002468:	e5c7      	b.n	8001ffa <__aeabi_dsub+0x2be>
 800246a:	2280      	movs	r2, #128	@ 0x80
 800246c:	0412      	lsls	r2, r2, #16
 800246e:	4314      	orrs	r4, r2
 8002470:	e5af      	b.n	8001fd2 <__aeabi_dsub+0x296>
 8002472:	46c0      	nop			@ (mov r8, r8)

08002474 <__aeabi_dcmpun>:
 8002474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002476:	46c6      	mov	lr, r8
 8002478:	031e      	lsls	r6, r3, #12
 800247a:	0b36      	lsrs	r6, r6, #12
 800247c:	46b0      	mov	r8, r6
 800247e:	4e0d      	ldr	r6, [pc, #52]	@ (80024b4 <__aeabi_dcmpun+0x40>)
 8002480:	030c      	lsls	r4, r1, #12
 8002482:	004d      	lsls	r5, r1, #1
 8002484:	005f      	lsls	r7, r3, #1
 8002486:	b500      	push	{lr}
 8002488:	0b24      	lsrs	r4, r4, #12
 800248a:	0d6d      	lsrs	r5, r5, #21
 800248c:	0d7f      	lsrs	r7, r7, #21
 800248e:	42b5      	cmp	r5, r6
 8002490:	d00b      	beq.n	80024aa <__aeabi_dcmpun+0x36>
 8002492:	4908      	ldr	r1, [pc, #32]	@ (80024b4 <__aeabi_dcmpun+0x40>)
 8002494:	2000      	movs	r0, #0
 8002496:	428f      	cmp	r7, r1
 8002498:	d104      	bne.n	80024a4 <__aeabi_dcmpun+0x30>
 800249a:	4646      	mov	r6, r8
 800249c:	4316      	orrs	r6, r2
 800249e:	0030      	movs	r0, r6
 80024a0:	1e43      	subs	r3, r0, #1
 80024a2:	4198      	sbcs	r0, r3
 80024a4:	bc80      	pop	{r7}
 80024a6:	46b8      	mov	r8, r7
 80024a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024aa:	4304      	orrs	r4, r0
 80024ac:	2001      	movs	r0, #1
 80024ae:	2c00      	cmp	r4, #0
 80024b0:	d1f8      	bne.n	80024a4 <__aeabi_dcmpun+0x30>
 80024b2:	e7ee      	b.n	8002492 <__aeabi_dcmpun+0x1e>
 80024b4:	000007ff 	.word	0x000007ff

080024b8 <__aeabi_d2iz>:
 80024b8:	000b      	movs	r3, r1
 80024ba:	0002      	movs	r2, r0
 80024bc:	b570      	push	{r4, r5, r6, lr}
 80024be:	4d16      	ldr	r5, [pc, #88]	@ (8002518 <__aeabi_d2iz+0x60>)
 80024c0:	030c      	lsls	r4, r1, #12
 80024c2:	b082      	sub	sp, #8
 80024c4:	0049      	lsls	r1, r1, #1
 80024c6:	2000      	movs	r0, #0
 80024c8:	9200      	str	r2, [sp, #0]
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	0b24      	lsrs	r4, r4, #12
 80024ce:	0d49      	lsrs	r1, r1, #21
 80024d0:	0fde      	lsrs	r6, r3, #31
 80024d2:	42a9      	cmp	r1, r5
 80024d4:	dd04      	ble.n	80024e0 <__aeabi_d2iz+0x28>
 80024d6:	4811      	ldr	r0, [pc, #68]	@ (800251c <__aeabi_d2iz+0x64>)
 80024d8:	4281      	cmp	r1, r0
 80024da:	dd03      	ble.n	80024e4 <__aeabi_d2iz+0x2c>
 80024dc:	4b10      	ldr	r3, [pc, #64]	@ (8002520 <__aeabi_d2iz+0x68>)
 80024de:	18f0      	adds	r0, r6, r3
 80024e0:	b002      	add	sp, #8
 80024e2:	bd70      	pop	{r4, r5, r6, pc}
 80024e4:	2080      	movs	r0, #128	@ 0x80
 80024e6:	0340      	lsls	r0, r0, #13
 80024e8:	4320      	orrs	r0, r4
 80024ea:	4c0e      	ldr	r4, [pc, #56]	@ (8002524 <__aeabi_d2iz+0x6c>)
 80024ec:	1a64      	subs	r4, r4, r1
 80024ee:	2c1f      	cmp	r4, #31
 80024f0:	dd08      	ble.n	8002504 <__aeabi_d2iz+0x4c>
 80024f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002528 <__aeabi_d2iz+0x70>)
 80024f4:	1a5b      	subs	r3, r3, r1
 80024f6:	40d8      	lsrs	r0, r3
 80024f8:	0003      	movs	r3, r0
 80024fa:	4258      	negs	r0, r3
 80024fc:	2e00      	cmp	r6, #0
 80024fe:	d1ef      	bne.n	80024e0 <__aeabi_d2iz+0x28>
 8002500:	0018      	movs	r0, r3
 8002502:	e7ed      	b.n	80024e0 <__aeabi_d2iz+0x28>
 8002504:	4b09      	ldr	r3, [pc, #36]	@ (800252c <__aeabi_d2iz+0x74>)
 8002506:	9a00      	ldr	r2, [sp, #0]
 8002508:	469c      	mov	ip, r3
 800250a:	0003      	movs	r3, r0
 800250c:	4461      	add	r1, ip
 800250e:	408b      	lsls	r3, r1
 8002510:	40e2      	lsrs	r2, r4
 8002512:	4313      	orrs	r3, r2
 8002514:	e7f1      	b.n	80024fa <__aeabi_d2iz+0x42>
 8002516:	46c0      	nop			@ (mov r8, r8)
 8002518:	000003fe 	.word	0x000003fe
 800251c:	0000041d 	.word	0x0000041d
 8002520:	7fffffff 	.word	0x7fffffff
 8002524:	00000433 	.word	0x00000433
 8002528:	00000413 	.word	0x00000413
 800252c:	fffffbed 	.word	0xfffffbed

08002530 <__aeabi_i2d>:
 8002530:	b570      	push	{r4, r5, r6, lr}
 8002532:	2800      	cmp	r0, #0
 8002534:	d016      	beq.n	8002564 <__aeabi_i2d+0x34>
 8002536:	17c3      	asrs	r3, r0, #31
 8002538:	18c5      	adds	r5, r0, r3
 800253a:	405d      	eors	r5, r3
 800253c:	0fc4      	lsrs	r4, r0, #31
 800253e:	0028      	movs	r0, r5
 8002540:	f000 f914 	bl	800276c <__clzsi2>
 8002544:	4b10      	ldr	r3, [pc, #64]	@ (8002588 <__aeabi_i2d+0x58>)
 8002546:	1a1b      	subs	r3, r3, r0
 8002548:	055b      	lsls	r3, r3, #21
 800254a:	0d5b      	lsrs	r3, r3, #21
 800254c:	280a      	cmp	r0, #10
 800254e:	dc14      	bgt.n	800257a <__aeabi_i2d+0x4a>
 8002550:	0002      	movs	r2, r0
 8002552:	002e      	movs	r6, r5
 8002554:	3215      	adds	r2, #21
 8002556:	4096      	lsls	r6, r2
 8002558:	220b      	movs	r2, #11
 800255a:	1a12      	subs	r2, r2, r0
 800255c:	40d5      	lsrs	r5, r2
 800255e:	032d      	lsls	r5, r5, #12
 8002560:	0b2d      	lsrs	r5, r5, #12
 8002562:	e003      	b.n	800256c <__aeabi_i2d+0x3c>
 8002564:	2400      	movs	r4, #0
 8002566:	2300      	movs	r3, #0
 8002568:	2500      	movs	r5, #0
 800256a:	2600      	movs	r6, #0
 800256c:	051b      	lsls	r3, r3, #20
 800256e:	432b      	orrs	r3, r5
 8002570:	07e4      	lsls	r4, r4, #31
 8002572:	4323      	orrs	r3, r4
 8002574:	0030      	movs	r0, r6
 8002576:	0019      	movs	r1, r3
 8002578:	bd70      	pop	{r4, r5, r6, pc}
 800257a:	380b      	subs	r0, #11
 800257c:	4085      	lsls	r5, r0
 800257e:	032d      	lsls	r5, r5, #12
 8002580:	2600      	movs	r6, #0
 8002582:	0b2d      	lsrs	r5, r5, #12
 8002584:	e7f2      	b.n	800256c <__aeabi_i2d+0x3c>
 8002586:	46c0      	nop			@ (mov r8, r8)
 8002588:	0000041e 	.word	0x0000041e

0800258c <__aeabi_ui2d>:
 800258c:	b510      	push	{r4, lr}
 800258e:	1e04      	subs	r4, r0, #0
 8002590:	d010      	beq.n	80025b4 <__aeabi_ui2d+0x28>
 8002592:	f000 f8eb 	bl	800276c <__clzsi2>
 8002596:	4b0e      	ldr	r3, [pc, #56]	@ (80025d0 <__aeabi_ui2d+0x44>)
 8002598:	1a1b      	subs	r3, r3, r0
 800259a:	055b      	lsls	r3, r3, #21
 800259c:	0d5b      	lsrs	r3, r3, #21
 800259e:	280a      	cmp	r0, #10
 80025a0:	dc0f      	bgt.n	80025c2 <__aeabi_ui2d+0x36>
 80025a2:	220b      	movs	r2, #11
 80025a4:	0021      	movs	r1, r4
 80025a6:	1a12      	subs	r2, r2, r0
 80025a8:	40d1      	lsrs	r1, r2
 80025aa:	3015      	adds	r0, #21
 80025ac:	030a      	lsls	r2, r1, #12
 80025ae:	4084      	lsls	r4, r0
 80025b0:	0b12      	lsrs	r2, r2, #12
 80025b2:	e001      	b.n	80025b8 <__aeabi_ui2d+0x2c>
 80025b4:	2300      	movs	r3, #0
 80025b6:	2200      	movs	r2, #0
 80025b8:	051b      	lsls	r3, r3, #20
 80025ba:	4313      	orrs	r3, r2
 80025bc:	0020      	movs	r0, r4
 80025be:	0019      	movs	r1, r3
 80025c0:	bd10      	pop	{r4, pc}
 80025c2:	0022      	movs	r2, r4
 80025c4:	380b      	subs	r0, #11
 80025c6:	4082      	lsls	r2, r0
 80025c8:	0312      	lsls	r2, r2, #12
 80025ca:	2400      	movs	r4, #0
 80025cc:	0b12      	lsrs	r2, r2, #12
 80025ce:	e7f3      	b.n	80025b8 <__aeabi_ui2d+0x2c>
 80025d0:	0000041e 	.word	0x0000041e

080025d4 <__aeabi_f2d>:
 80025d4:	b570      	push	{r4, r5, r6, lr}
 80025d6:	0242      	lsls	r2, r0, #9
 80025d8:	0043      	lsls	r3, r0, #1
 80025da:	0fc4      	lsrs	r4, r0, #31
 80025dc:	20fe      	movs	r0, #254	@ 0xfe
 80025de:	0e1b      	lsrs	r3, r3, #24
 80025e0:	1c59      	adds	r1, r3, #1
 80025e2:	0a55      	lsrs	r5, r2, #9
 80025e4:	4208      	tst	r0, r1
 80025e6:	d00c      	beq.n	8002602 <__aeabi_f2d+0x2e>
 80025e8:	21e0      	movs	r1, #224	@ 0xe0
 80025ea:	0089      	lsls	r1, r1, #2
 80025ec:	468c      	mov	ip, r1
 80025ee:	076d      	lsls	r5, r5, #29
 80025f0:	0b12      	lsrs	r2, r2, #12
 80025f2:	4463      	add	r3, ip
 80025f4:	051b      	lsls	r3, r3, #20
 80025f6:	4313      	orrs	r3, r2
 80025f8:	07e4      	lsls	r4, r4, #31
 80025fa:	4323      	orrs	r3, r4
 80025fc:	0028      	movs	r0, r5
 80025fe:	0019      	movs	r1, r3
 8002600:	bd70      	pop	{r4, r5, r6, pc}
 8002602:	2b00      	cmp	r3, #0
 8002604:	d114      	bne.n	8002630 <__aeabi_f2d+0x5c>
 8002606:	2d00      	cmp	r5, #0
 8002608:	d01b      	beq.n	8002642 <__aeabi_f2d+0x6e>
 800260a:	0028      	movs	r0, r5
 800260c:	f000 f8ae 	bl	800276c <__clzsi2>
 8002610:	280a      	cmp	r0, #10
 8002612:	dc1c      	bgt.n	800264e <__aeabi_f2d+0x7a>
 8002614:	230b      	movs	r3, #11
 8002616:	002a      	movs	r2, r5
 8002618:	1a1b      	subs	r3, r3, r0
 800261a:	40da      	lsrs	r2, r3
 800261c:	0003      	movs	r3, r0
 800261e:	3315      	adds	r3, #21
 8002620:	409d      	lsls	r5, r3
 8002622:	4b0e      	ldr	r3, [pc, #56]	@ (800265c <__aeabi_f2d+0x88>)
 8002624:	0312      	lsls	r2, r2, #12
 8002626:	1a1b      	subs	r3, r3, r0
 8002628:	055b      	lsls	r3, r3, #21
 800262a:	0b12      	lsrs	r2, r2, #12
 800262c:	0d5b      	lsrs	r3, r3, #21
 800262e:	e7e1      	b.n	80025f4 <__aeabi_f2d+0x20>
 8002630:	2d00      	cmp	r5, #0
 8002632:	d009      	beq.n	8002648 <__aeabi_f2d+0x74>
 8002634:	0b13      	lsrs	r3, r2, #12
 8002636:	2280      	movs	r2, #128	@ 0x80
 8002638:	0312      	lsls	r2, r2, #12
 800263a:	431a      	orrs	r2, r3
 800263c:	076d      	lsls	r5, r5, #29
 800263e:	4b08      	ldr	r3, [pc, #32]	@ (8002660 <__aeabi_f2d+0x8c>)
 8002640:	e7d8      	b.n	80025f4 <__aeabi_f2d+0x20>
 8002642:	2300      	movs	r3, #0
 8002644:	2200      	movs	r2, #0
 8002646:	e7d5      	b.n	80025f4 <__aeabi_f2d+0x20>
 8002648:	2200      	movs	r2, #0
 800264a:	4b05      	ldr	r3, [pc, #20]	@ (8002660 <__aeabi_f2d+0x8c>)
 800264c:	e7d2      	b.n	80025f4 <__aeabi_f2d+0x20>
 800264e:	0003      	movs	r3, r0
 8002650:	002a      	movs	r2, r5
 8002652:	3b0b      	subs	r3, #11
 8002654:	409a      	lsls	r2, r3
 8002656:	2500      	movs	r5, #0
 8002658:	e7e3      	b.n	8002622 <__aeabi_f2d+0x4e>
 800265a:	46c0      	nop			@ (mov r8, r8)
 800265c:	00000389 	.word	0x00000389
 8002660:	000007ff 	.word	0x000007ff

08002664 <__aeabi_d2f>:
 8002664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002666:	004b      	lsls	r3, r1, #1
 8002668:	030f      	lsls	r7, r1, #12
 800266a:	0d5b      	lsrs	r3, r3, #21
 800266c:	4c3b      	ldr	r4, [pc, #236]	@ (800275c <__aeabi_d2f+0xf8>)
 800266e:	0f45      	lsrs	r5, r0, #29
 8002670:	b083      	sub	sp, #12
 8002672:	0a7f      	lsrs	r7, r7, #9
 8002674:	1c5e      	adds	r6, r3, #1
 8002676:	432f      	orrs	r7, r5
 8002678:	9000      	str	r0, [sp, #0]
 800267a:	9101      	str	r1, [sp, #4]
 800267c:	0fca      	lsrs	r2, r1, #31
 800267e:	00c5      	lsls	r5, r0, #3
 8002680:	4226      	tst	r6, r4
 8002682:	d00b      	beq.n	800269c <__aeabi_d2f+0x38>
 8002684:	4936      	ldr	r1, [pc, #216]	@ (8002760 <__aeabi_d2f+0xfc>)
 8002686:	185c      	adds	r4, r3, r1
 8002688:	2cfe      	cmp	r4, #254	@ 0xfe
 800268a:	dd13      	ble.n	80026b4 <__aeabi_d2f+0x50>
 800268c:	20ff      	movs	r0, #255	@ 0xff
 800268e:	2300      	movs	r3, #0
 8002690:	05c0      	lsls	r0, r0, #23
 8002692:	4318      	orrs	r0, r3
 8002694:	07d2      	lsls	r2, r2, #31
 8002696:	4310      	orrs	r0, r2
 8002698:	b003      	add	sp, #12
 800269a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800269c:	2b00      	cmp	r3, #0
 800269e:	d102      	bne.n	80026a6 <__aeabi_d2f+0x42>
 80026a0:	2000      	movs	r0, #0
 80026a2:	2300      	movs	r3, #0
 80026a4:	e7f4      	b.n	8002690 <__aeabi_d2f+0x2c>
 80026a6:	433d      	orrs	r5, r7
 80026a8:	d0f0      	beq.n	800268c <__aeabi_d2f+0x28>
 80026aa:	2380      	movs	r3, #128	@ 0x80
 80026ac:	03db      	lsls	r3, r3, #15
 80026ae:	20ff      	movs	r0, #255	@ 0xff
 80026b0:	433b      	orrs	r3, r7
 80026b2:	e7ed      	b.n	8002690 <__aeabi_d2f+0x2c>
 80026b4:	2c00      	cmp	r4, #0
 80026b6:	dd14      	ble.n	80026e2 <__aeabi_d2f+0x7e>
 80026b8:	9b00      	ldr	r3, [sp, #0]
 80026ba:	00ff      	lsls	r7, r7, #3
 80026bc:	019b      	lsls	r3, r3, #6
 80026be:	1e58      	subs	r0, r3, #1
 80026c0:	4183      	sbcs	r3, r0
 80026c2:	0f69      	lsrs	r1, r5, #29
 80026c4:	433b      	orrs	r3, r7
 80026c6:	430b      	orrs	r3, r1
 80026c8:	0759      	lsls	r1, r3, #29
 80026ca:	d041      	beq.n	8002750 <__aeabi_d2f+0xec>
 80026cc:	210f      	movs	r1, #15
 80026ce:	4019      	ands	r1, r3
 80026d0:	2904      	cmp	r1, #4
 80026d2:	d028      	beq.n	8002726 <__aeabi_d2f+0xc2>
 80026d4:	3304      	adds	r3, #4
 80026d6:	0159      	lsls	r1, r3, #5
 80026d8:	d525      	bpl.n	8002726 <__aeabi_d2f+0xc2>
 80026da:	3401      	adds	r4, #1
 80026dc:	2300      	movs	r3, #0
 80026de:	b2e0      	uxtb	r0, r4
 80026e0:	e7d6      	b.n	8002690 <__aeabi_d2f+0x2c>
 80026e2:	0021      	movs	r1, r4
 80026e4:	3117      	adds	r1, #23
 80026e6:	dbdb      	blt.n	80026a0 <__aeabi_d2f+0x3c>
 80026e8:	2180      	movs	r1, #128	@ 0x80
 80026ea:	201e      	movs	r0, #30
 80026ec:	0409      	lsls	r1, r1, #16
 80026ee:	4339      	orrs	r1, r7
 80026f0:	1b00      	subs	r0, r0, r4
 80026f2:	281f      	cmp	r0, #31
 80026f4:	dd1b      	ble.n	800272e <__aeabi_d2f+0xca>
 80026f6:	2602      	movs	r6, #2
 80026f8:	4276      	negs	r6, r6
 80026fa:	1b34      	subs	r4, r6, r4
 80026fc:	000e      	movs	r6, r1
 80026fe:	40e6      	lsrs	r6, r4
 8002700:	0034      	movs	r4, r6
 8002702:	2820      	cmp	r0, #32
 8002704:	d004      	beq.n	8002710 <__aeabi_d2f+0xac>
 8002706:	4817      	ldr	r0, [pc, #92]	@ (8002764 <__aeabi_d2f+0x100>)
 8002708:	4684      	mov	ip, r0
 800270a:	4463      	add	r3, ip
 800270c:	4099      	lsls	r1, r3
 800270e:	430d      	orrs	r5, r1
 8002710:	002b      	movs	r3, r5
 8002712:	1e59      	subs	r1, r3, #1
 8002714:	418b      	sbcs	r3, r1
 8002716:	4323      	orrs	r3, r4
 8002718:	0759      	lsls	r1, r3, #29
 800271a:	d015      	beq.n	8002748 <__aeabi_d2f+0xe4>
 800271c:	210f      	movs	r1, #15
 800271e:	2400      	movs	r4, #0
 8002720:	4019      	ands	r1, r3
 8002722:	2904      	cmp	r1, #4
 8002724:	d117      	bne.n	8002756 <__aeabi_d2f+0xf2>
 8002726:	019b      	lsls	r3, r3, #6
 8002728:	0a5b      	lsrs	r3, r3, #9
 800272a:	b2e0      	uxtb	r0, r4
 800272c:	e7b0      	b.n	8002690 <__aeabi_d2f+0x2c>
 800272e:	4c0e      	ldr	r4, [pc, #56]	@ (8002768 <__aeabi_d2f+0x104>)
 8002730:	191c      	adds	r4, r3, r4
 8002732:	002b      	movs	r3, r5
 8002734:	40a5      	lsls	r5, r4
 8002736:	40c3      	lsrs	r3, r0
 8002738:	40a1      	lsls	r1, r4
 800273a:	1e68      	subs	r0, r5, #1
 800273c:	4185      	sbcs	r5, r0
 800273e:	4329      	orrs	r1, r5
 8002740:	430b      	orrs	r3, r1
 8002742:	2400      	movs	r4, #0
 8002744:	0759      	lsls	r1, r3, #29
 8002746:	d1c1      	bne.n	80026cc <__aeabi_d2f+0x68>
 8002748:	019b      	lsls	r3, r3, #6
 800274a:	2000      	movs	r0, #0
 800274c:	0a5b      	lsrs	r3, r3, #9
 800274e:	e79f      	b.n	8002690 <__aeabi_d2f+0x2c>
 8002750:	08db      	lsrs	r3, r3, #3
 8002752:	b2e0      	uxtb	r0, r4
 8002754:	e79c      	b.n	8002690 <__aeabi_d2f+0x2c>
 8002756:	3304      	adds	r3, #4
 8002758:	e7e5      	b.n	8002726 <__aeabi_d2f+0xc2>
 800275a:	46c0      	nop			@ (mov r8, r8)
 800275c:	000007fe 	.word	0x000007fe
 8002760:	fffffc80 	.word	0xfffffc80
 8002764:	fffffca2 	.word	0xfffffca2
 8002768:	fffffc82 	.word	0xfffffc82

0800276c <__clzsi2>:
 800276c:	211c      	movs	r1, #28
 800276e:	2301      	movs	r3, #1
 8002770:	041b      	lsls	r3, r3, #16
 8002772:	4298      	cmp	r0, r3
 8002774:	d301      	bcc.n	800277a <__clzsi2+0xe>
 8002776:	0c00      	lsrs	r0, r0, #16
 8002778:	3910      	subs	r1, #16
 800277a:	0a1b      	lsrs	r3, r3, #8
 800277c:	4298      	cmp	r0, r3
 800277e:	d301      	bcc.n	8002784 <__clzsi2+0x18>
 8002780:	0a00      	lsrs	r0, r0, #8
 8002782:	3908      	subs	r1, #8
 8002784:	091b      	lsrs	r3, r3, #4
 8002786:	4298      	cmp	r0, r3
 8002788:	d301      	bcc.n	800278e <__clzsi2+0x22>
 800278a:	0900      	lsrs	r0, r0, #4
 800278c:	3904      	subs	r1, #4
 800278e:	a202      	add	r2, pc, #8	@ (adr r2, 8002798 <__clzsi2+0x2c>)
 8002790:	5c10      	ldrb	r0, [r2, r0]
 8002792:	1840      	adds	r0, r0, r1
 8002794:	4770      	bx	lr
 8002796:	46c0      	nop			@ (mov r8, r8)
 8002798:	02020304 	.word	0x02020304
 800279c:	01010101 	.word	0x01010101
	...

080027a8 <MPU6050_Writebyte>:

static float LSB_Sensitivity_ACC;
static float LSB_Sensitivity_GYRO;

void MPU6050_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af04      	add	r7, sp, #16
 80027ae:	0002      	movs	r2, r0
 80027b0:	1dfb      	adds	r3, r7, #7
 80027b2:	701a      	strb	r2, [r3, #0]
 80027b4:	1dbb      	adds	r3, r7, #6
 80027b6:	1c0a      	adds	r2, r1, #0
 80027b8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, &val, 1, 1);
 80027ba:	1dfb      	adds	r3, r7, #7
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	b29a      	uxth	r2, r3
 80027c0:	4807      	ldr	r0, [pc, #28]	@ (80027e0 <MPU6050_Writebyte+0x38>)
 80027c2:	2301      	movs	r3, #1
 80027c4:	9302      	str	r3, [sp, #8]
 80027c6:	2301      	movs	r3, #1
 80027c8:	9301      	str	r3, [sp, #4]
 80027ca:	1dbb      	adds	r3, r7, #6
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	2301      	movs	r3, #1
 80027d0:	21d0      	movs	r1, #208	@ 0xd0
 80027d2:	f001 fa67 	bl	8003ca4 <HAL_I2C_Mem_Write>
}
 80027d6:	46c0      	nop			@ (mov r8, r8)
 80027d8:	46bd      	mov	sp, r7
 80027da:	b002      	add	sp, #8
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	46c0      	nop			@ (mov r8, r8)
 80027e0:	20000224 	.word	0x20000224

080027e4 <MPU6050_Readbyte>:
{
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 1);
}

void MPU6050_Readbyte(uint8_t reg_addr, uint8_t* data)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af04      	add	r7, sp, #16
 80027ea:	0002      	movs	r2, r0
 80027ec:	6039      	str	r1, [r7, #0]
 80027ee:	1dfb      	adds	r3, r7, #7
 80027f0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, 1, 1);
 80027f2:	1dfb      	adds	r3, r7, #7
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	4807      	ldr	r0, [pc, #28]	@ (8002818 <MPU6050_Readbyte+0x34>)
 80027fa:	2301      	movs	r3, #1
 80027fc:	9302      	str	r3, [sp, #8]
 80027fe:	2301      	movs	r3, #1
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	2301      	movs	r3, #1
 8002808:	21d0      	movs	r1, #208	@ 0xd0
 800280a:	f001 fb79 	bl	8003f00 <HAL_I2C_Mem_Read>
}
 800280e:	46c0      	nop			@ (mov r8, r8)
 8002810:	46bd      	mov	sp, r7
 8002812:	b002      	add	sp, #8
 8002814:	bd80      	pop	{r7, pc}
 8002816:	46c0      	nop			@ (mov r8, r8)
 8002818:	20000224 	.word	0x20000224

0800281c <MPU6050_Readbytes>:

void MPU6050_Readbytes(uint8_t reg_addr, uint8_t len, uint8_t* data)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af04      	add	r7, sp, #16
 8002822:	603a      	str	r2, [r7, #0]
 8002824:	1dfb      	adds	r3, r7, #7
 8002826:	1c02      	adds	r2, r0, #0
 8002828:	701a      	strb	r2, [r3, #0]
 800282a:	1dbb      	adds	r3, r7, #6
 800282c:	1c0a      	adds	r2, r1, #0
 800282e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 1);
 8002830:	1dfb      	adds	r3, r7, #7
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	b29a      	uxth	r2, r3
 8002836:	1dbb      	adds	r3, r7, #6
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	b29b      	uxth	r3, r3
 800283c:	4806      	ldr	r0, [pc, #24]	@ (8002858 <MPU6050_Readbytes+0x3c>)
 800283e:	2101      	movs	r1, #1
 8002840:	9102      	str	r1, [sp, #8]
 8002842:	9301      	str	r3, [sp, #4]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	2301      	movs	r3, #1
 800284a:	21d0      	movs	r1, #208	@ 0xd0
 800284c:	f001 fb58 	bl	8003f00 <HAL_I2C_Mem_Read>
}
 8002850:	46c0      	nop			@ (mov r8, r8)
 8002852:	46bd      	mov	sp, r7
 8002854:	b002      	add	sp, #8
 8002856:	bd80      	pop	{r7, pc}
 8002858:	20000224 	.word	0x20000224

0800285c <MPU6050_Initialization>:

void MPU6050_Initialization(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8002862:	2032      	movs	r0, #50	@ 0x32
 8002864:	f000 fde2 	bl	800342c <HAL_Delay>
	uint8_t who_am_i = 0;
 8002868:	1d7b      	adds	r3, r7, #5
 800286a:	2200      	movs	r2, #0
 800286c:	701a      	strb	r2, [r3, #0]
	printf("Checking MPU6050...\n");
 800286e:	4b37      	ldr	r3, [pc, #220]	@ (800294c <MPU6050_Initialization+0xf0>)
 8002870:	0018      	movs	r0, r3
 8002872:	f004 f965 	bl	8006b40 <puts>

	MPU6050_Readbyte(MPU6050_WHO_AM_I, &who_am_i);
 8002876:	1d7b      	adds	r3, r7, #5
 8002878:	0019      	movs	r1, r3
 800287a:	2075      	movs	r0, #117	@ 0x75
 800287c:	f7ff ffb2 	bl	80027e4 <MPU6050_Readbyte>
	if(who_am_i == 0x68)
 8002880:	1d7b      	adds	r3, r7, #5
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b68      	cmp	r3, #104	@ 0x68
 8002886:	d108      	bne.n	800289a <MPU6050_Initialization+0x3e>
	{
		printf("MPU6050 who_am_i = 0x%02x...OK\n", who_am_i);
 8002888:	1d7b      	adds	r3, r7, #5
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	001a      	movs	r2, r3
 800288e:	4b30      	ldr	r3, [pc, #192]	@ (8002950 <MPU6050_Initialization+0xf4>)
 8002890:	0011      	movs	r1, r2
 8002892:	0018      	movs	r0, r3
 8002894:	f004 f8ee 	bl	8006a74 <iprintf>
 8002898:	e014      	b.n	80028c4 <MPU6050_Initialization+0x68>
	}
	else
	{
		printf("ERROR!\n");
 800289a:	4b2e      	ldr	r3, [pc, #184]	@ (8002954 <MPU6050_Initialization+0xf8>)
 800289c:	0018      	movs	r0, r3
 800289e:	f004 f94f 	bl	8006b40 <puts>
		printf("MPU6050 who_am_i : 0x%02x should be 0x68\n", who_am_i);
 80028a2:	1d7b      	adds	r3, r7, #5
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	001a      	movs	r2, r3
 80028a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002958 <MPU6050_Initialization+0xfc>)
 80028aa:	0011      	movs	r1, r2
 80028ac:	0018      	movs	r0, r3
 80028ae:	f004 f8e1 	bl	8006a74 <iprintf>
		while(1)
		{
			printf("who am i error. Can not recognize mpu6050\n");
 80028b2:	4b2a      	ldr	r3, [pc, #168]	@ (800295c <MPU6050_Initialization+0x100>)
 80028b4:	0018      	movs	r0, r3
 80028b6:	f004 f943 	bl	8006b40 <puts>
			HAL_Delay(100);
 80028ba:	2064      	movs	r0, #100	@ 0x64
 80028bc:	f000 fdb6 	bl	800342c <HAL_Delay>
			printf("who am i error. Can not recognize mpu6050\n");
 80028c0:	46c0      	nop			@ (mov r8, r8)
 80028c2:	e7f6      	b.n	80028b2 <MPU6050_Initialization+0x56>
		}
	}

	//Reset the whole module before initialization
	MPU6050_Writebyte(MPU6050_PWR_MGMT_1, 0x1<<7);
 80028c4:	2180      	movs	r1, #128	@ 0x80
 80028c6:	206b      	movs	r0, #107	@ 0x6b
 80028c8:	f7ff ff6e 	bl	80027a8 <MPU6050_Writebyte>
	HAL_Delay(100);
 80028cc:	2064      	movs	r0, #100	@ 0x64
 80028ce:	f000 fdad 	bl	800342c <HAL_Delay>

	//Power Management setting
	/* Default is sleep mode
	 * necessary to wake up MPU6050*/
	MPU6050_Writebyte(MPU6050_PWR_MGMT_1, 0x00);
 80028d2:	2100      	movs	r1, #0
 80028d4:	206b      	movs	r0, #107	@ 0x6b
 80028d6:	f7ff ff67 	bl	80027a8 <MPU6050_Writebyte>
	HAL_Delay(50);
 80028da:	2032      	movs	r0, #50	@ 0x32
 80028dc:	f000 fda6 	bl	800342c <HAL_Delay>

	//Sample rate divider
	/*Sample Rate = Gyroscope Output Rate / (1 + SMPRT_DIV) */
	//	MPU6050_Writebyte(MPU6050_SMPRT_DIV, 0x00); // ACC output rate is 1kHz, GYRO output rate is 8kHz
	MPU6050_Writebyte(MPU6050_SMPRT_DIV, 39); // Sample Rate = 200Hz
 80028e0:	2127      	movs	r1, #39	@ 0x27
 80028e2:	2019      	movs	r0, #25
 80028e4:	f7ff ff60 	bl	80027a8 <MPU6050_Writebyte>
	HAL_Delay(50);
 80028e8:	2032      	movs	r0, #50	@ 0x32
 80028ea:	f000 fd9f 	bl	800342c <HAL_Delay>

	//FSYNC and DLPF setting
	/*DLPF is set to 0*/
	MPU6050_Writebyte(MPU6050_CONFIG, 0x00);
 80028ee:	2100      	movs	r1, #0
 80028f0:	201a      	movs	r0, #26
 80028f2:	f7ff ff59 	bl	80027a8 <MPU6050_Writebyte>
	HAL_Delay(50);
 80028f6:	2032      	movs	r0, #50	@ 0x32
 80028f8:	f000 fd98 	bl	800342c <HAL_Delay>
	/*FS_SEL  Full Scale Range
	  0    	+-250 degree/s
	  1		+-500 degree/s
	  2		+-1000 degree/s
	  3		+-2000 degree/s	*/
	uint8_t FS_SCALE_GYRO = 0x0;
 80028fc:	1dfb      	adds	r3, r7, #7
 80028fe:	2200      	movs	r2, #0
 8002900:	701a      	strb	r2, [r3, #0]
	MPU6050_Writebyte(MPU6050_GYRO_CONFIG, FS_SCALE_GYRO<<3);
 8002902:	1dfb      	adds	r3, r7, #7
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	b2db      	uxtb	r3, r3
 800290a:	0019      	movs	r1, r3
 800290c:	201b      	movs	r0, #27
 800290e:	f7ff ff4b 	bl	80027a8 <MPU6050_Writebyte>
	HAL_Delay(50);
 8002912:	2032      	movs	r0, #50	@ 0x32
 8002914:	f000 fd8a 	bl	800342c <HAL_Delay>
	/*FS_SEL  Full Scale Range
	  0    	+-2g
	  1		+-4g
	  2		+-8g
	  3		+-16g	*/
	uint8_t FS_SCALE_ACC = 0x2;
 8002918:	1dbb      	adds	r3, r7, #6
 800291a:	2202      	movs	r2, #2
 800291c:	701a      	strb	r2, [r3, #0]
	MPU6050_Writebyte(MPU6050_ACCEL_CONFIG, FS_SCALE_ACC<<3);
 800291e:	1dbb      	adds	r3, r7, #6
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	b2db      	uxtb	r3, r3
 8002926:	0019      	movs	r1, r3
 8002928:	201c      	movs	r0, #28
 800292a:	f7ff ff3d 	bl	80027a8 <MPU6050_Writebyte>
	HAL_Delay(50);
 800292e:	2032      	movs	r0, #50	@ 0x32
 8002930:	f000 fd7c 	bl	800342c <HAL_Delay>

	MPU6050_Get_LSB_Sensitivity(FS_SCALE_GYRO, FS_SCALE_ACC);
 8002934:	1dbb      	adds	r3, r7, #6
 8002936:	781a      	ldrb	r2, [r3, #0]
 8002938:	1dfb      	adds	r3, r7, #7
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	0011      	movs	r1, r2
 800293e:	0018      	movs	r0, r3
 8002940:	f000 f86c 	bl	8002a1c <MPU6050_Get_LSB_Sensitivity>
	uint8_t DATA_RDY_EN = 0x1; // 1 - enable, 0 - disable
	MPU6050_Writebyte(MPU6050_INT_ENABLE, DATA_RDY_EN);
	HAL_Delay(50);

	printf("MPU6050 setting is finished\n");*/
}
 8002944:	46c0      	nop			@ (mov r8, r8)
 8002946:	46bd      	mov	sp, r7
 8002948:	b002      	add	sp, #8
 800294a:	bd80      	pop	{r7, pc}
 800294c:	0800a5a0 	.word	0x0800a5a0
 8002950:	0800a5b4 	.word	0x0800a5b4
 8002954:	0800a5d4 	.word	0x0800a5d4
 8002958:	0800a5dc 	.word	0x0800a5dc
 800295c:	0800a608 	.word	0x0800a608

08002960 <MPU6050_Get6AxisRawData>:
/*Get Raw Data from sensor*/
void MPU6050_Get6AxisRawData(Struct_MPU6050* mpu6050)
{
 8002960:	b590      	push	{r4, r7, lr}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
	uint8_t data[14];
	MPU6050_Readbytes(MPU6050_ACCEL_XOUT_H, 14, data);
 8002968:	2408      	movs	r4, #8
 800296a:	193b      	adds	r3, r7, r4
 800296c:	001a      	movs	r2, r3
 800296e:	210e      	movs	r1, #14
 8002970:	203b      	movs	r0, #59	@ 0x3b
 8002972:	f7ff ff53 	bl	800281c <MPU6050_Readbytes>

	mpu6050->acc_x_raw = (data[0] << 8) | data[1];
 8002976:	0021      	movs	r1, r4
 8002978:	187b      	adds	r3, r7, r1
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	021b      	lsls	r3, r3, #8
 800297e:	b21a      	sxth	r2, r3
 8002980:	187b      	adds	r3, r7, r1
 8002982:	785b      	ldrb	r3, [r3, #1]
 8002984:	b21b      	sxth	r3, r3
 8002986:	4313      	orrs	r3, r2
 8002988:	b21a      	sxth	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	801a      	strh	r2, [r3, #0]
	mpu6050->acc_y_raw = (data[2] << 8) | data[3];
 800298e:	187b      	adds	r3, r7, r1
 8002990:	789b      	ldrb	r3, [r3, #2]
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	b21a      	sxth	r2, r3
 8002996:	187b      	adds	r3, r7, r1
 8002998:	78db      	ldrb	r3, [r3, #3]
 800299a:	b21b      	sxth	r3, r3
 800299c:	4313      	orrs	r3, r2
 800299e:	b21a      	sxth	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	805a      	strh	r2, [r3, #2]
	mpu6050->acc_z_raw = (data[4] << 8) | data[5];
 80029a4:	187b      	adds	r3, r7, r1
 80029a6:	791b      	ldrb	r3, [r3, #4]
 80029a8:	021b      	lsls	r3, r3, #8
 80029aa:	b21a      	sxth	r2, r3
 80029ac:	187b      	adds	r3, r7, r1
 80029ae:	795b      	ldrb	r3, [r3, #5]
 80029b0:	b21b      	sxth	r3, r3
 80029b2:	4313      	orrs	r3, r2
 80029b4:	b21a      	sxth	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	809a      	strh	r2, [r3, #4]

	mpu6050->temperature_raw = (data[6] << 8) | data[7];
 80029ba:	187b      	adds	r3, r7, r1
 80029bc:	799b      	ldrb	r3, [r3, #6]
 80029be:	021b      	lsls	r3, r3, #8
 80029c0:	b21a      	sxth	r2, r3
 80029c2:	187b      	adds	r3, r7, r1
 80029c4:	79db      	ldrb	r3, [r3, #7]
 80029c6:	b21b      	sxth	r3, r3
 80029c8:	4313      	orrs	r3, r2
 80029ca:	b21a      	sxth	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	80da      	strh	r2, [r3, #6]

	mpu6050->gyro_x_raw = ((data[8] << 8) | data[9]);
 80029d0:	187b      	adds	r3, r7, r1
 80029d2:	7a1b      	ldrb	r3, [r3, #8]
 80029d4:	021b      	lsls	r3, r3, #8
 80029d6:	b21a      	sxth	r2, r3
 80029d8:	187b      	adds	r3, r7, r1
 80029da:	7a5b      	ldrb	r3, [r3, #9]
 80029dc:	b21b      	sxth	r3, r3
 80029de:	4313      	orrs	r3, r2
 80029e0:	b21a      	sxth	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	811a      	strh	r2, [r3, #8]
	mpu6050->gyro_y_raw = ((data[10] << 8) | data[11]);
 80029e6:	187b      	adds	r3, r7, r1
 80029e8:	7a9b      	ldrb	r3, [r3, #10]
 80029ea:	021b      	lsls	r3, r3, #8
 80029ec:	b21a      	sxth	r2, r3
 80029ee:	187b      	adds	r3, r7, r1
 80029f0:	7adb      	ldrb	r3, [r3, #11]
 80029f2:	b21b      	sxth	r3, r3
 80029f4:	4313      	orrs	r3, r2
 80029f6:	b21a      	sxth	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	815a      	strh	r2, [r3, #10]
	mpu6050->gyro_z_raw = ((data[12] << 8) | data[13]);
 80029fc:	187b      	adds	r3, r7, r1
 80029fe:	7b1b      	ldrb	r3, [r3, #12]
 8002a00:	021b      	lsls	r3, r3, #8
 8002a02:	b21a      	sxth	r2, r3
 8002a04:	187b      	adds	r3, r7, r1
 8002a06:	7b5b      	ldrb	r3, [r3, #13]
 8002a08:	b21b      	sxth	r3, r3
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	b21a      	sxth	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	819a      	strh	r2, [r3, #12]
}
 8002a12:	46c0      	nop			@ (mov r8, r8)
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b007      	add	sp, #28
 8002a18:	bd90      	pop	{r4, r7, pc}
	...

08002a1c <MPU6050_Get_LSB_Sensitivity>:

void MPU6050_Get_LSB_Sensitivity(uint8_t FS_SCALE_GYRO, uint8_t FS_SCALE_ACC)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	0002      	movs	r2, r0
 8002a24:	1dfb      	adds	r3, r7, #7
 8002a26:	701a      	strb	r2, [r3, #0]
 8002a28:	1dbb      	adds	r3, r7, #6
 8002a2a:	1c0a      	adds	r2, r1, #0
 8002a2c:	701a      	strb	r2, [r3, #0]
	switch(FS_SCALE_GYRO)
 8002a2e:	1dfb      	adds	r3, r7, #7
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b03      	cmp	r3, #3
 8002a34:	d014      	beq.n	8002a60 <MPU6050_Get_LSB_Sensitivity+0x44>
 8002a36:	dc17      	bgt.n	8002a68 <MPU6050_Get_LSB_Sensitivity+0x4c>
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d00d      	beq.n	8002a58 <MPU6050_Get_LSB_Sensitivity+0x3c>
 8002a3c:	dc14      	bgt.n	8002a68 <MPU6050_Get_LSB_Sensitivity+0x4c>
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d002      	beq.n	8002a48 <MPU6050_Get_LSB_Sensitivity+0x2c>
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d004      	beq.n	8002a50 <MPU6050_Get_LSB_Sensitivity+0x34>
 8002a46:	e00f      	b.n	8002a68 <MPU6050_Get_LSB_Sensitivity+0x4c>
	{
	case 0:
		LSB_Sensitivity_GYRO = 131.f;
 8002a48:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab4 <MPU6050_Get_LSB_Sensitivity+0x98>)
 8002a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ab8 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 8002a4c:	601a      	str	r2, [r3, #0]
		break;
 8002a4e:	e00b      	b.n	8002a68 <MPU6050_Get_LSB_Sensitivity+0x4c>
	case 1:
		LSB_Sensitivity_GYRO = 65.5f;
 8002a50:	4b18      	ldr	r3, [pc, #96]	@ (8002ab4 <MPU6050_Get_LSB_Sensitivity+0x98>)
 8002a52:	4a1a      	ldr	r2, [pc, #104]	@ (8002abc <MPU6050_Get_LSB_Sensitivity+0xa0>)
 8002a54:	601a      	str	r2, [r3, #0]
		break;
 8002a56:	e007      	b.n	8002a68 <MPU6050_Get_LSB_Sensitivity+0x4c>
	case 2:
		LSB_Sensitivity_GYRO = 32.8f;
 8002a58:	4b16      	ldr	r3, [pc, #88]	@ (8002ab4 <MPU6050_Get_LSB_Sensitivity+0x98>)
 8002a5a:	4a19      	ldr	r2, [pc, #100]	@ (8002ac0 <MPU6050_Get_LSB_Sensitivity+0xa4>)
 8002a5c:	601a      	str	r2, [r3, #0]
		break;
 8002a5e:	e003      	b.n	8002a68 <MPU6050_Get_LSB_Sensitivity+0x4c>
	case 3:
		LSB_Sensitivity_GYRO = 16.4f;
 8002a60:	4b14      	ldr	r3, [pc, #80]	@ (8002ab4 <MPU6050_Get_LSB_Sensitivity+0x98>)
 8002a62:	4a18      	ldr	r2, [pc, #96]	@ (8002ac4 <MPU6050_Get_LSB_Sensitivity+0xa8>)
 8002a64:	601a      	str	r2, [r3, #0]
		break;
 8002a66:	46c0      	nop			@ (mov r8, r8)
	}
	switch(FS_SCALE_ACC)
 8002a68:	1dbb      	adds	r3, r7, #6
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d017      	beq.n	8002aa0 <MPU6050_Get_LSB_Sensitivity+0x84>
 8002a70:	dc1b      	bgt.n	8002aaa <MPU6050_Get_LSB_Sensitivity+0x8e>
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d00f      	beq.n	8002a96 <MPU6050_Get_LSB_Sensitivity+0x7a>
 8002a76:	dc18      	bgt.n	8002aaa <MPU6050_Get_LSB_Sensitivity+0x8e>
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d002      	beq.n	8002a82 <MPU6050_Get_LSB_Sensitivity+0x66>
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d005      	beq.n	8002a8c <MPU6050_Get_LSB_Sensitivity+0x70>
		break;
	case 3:
		LSB_Sensitivity_ACC = 2048.f;
		break;
	}
}
 8002a80:	e013      	b.n	8002aaa <MPU6050_Get_LSB_Sensitivity+0x8e>
		LSB_Sensitivity_ACC = 16384.f;
 8002a82:	4b11      	ldr	r3, [pc, #68]	@ (8002ac8 <MPU6050_Get_LSB_Sensitivity+0xac>)
 8002a84:	228d      	movs	r2, #141	@ 0x8d
 8002a86:	05d2      	lsls	r2, r2, #23
 8002a88:	601a      	str	r2, [r3, #0]
		break;
 8002a8a:	e00e      	b.n	8002aaa <MPU6050_Get_LSB_Sensitivity+0x8e>
		LSB_Sensitivity_ACC = 8192.f;
 8002a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac8 <MPU6050_Get_LSB_Sensitivity+0xac>)
 8002a8e:	228c      	movs	r2, #140	@ 0x8c
 8002a90:	05d2      	lsls	r2, r2, #23
 8002a92:	601a      	str	r2, [r3, #0]
		break;
 8002a94:	e009      	b.n	8002aaa <MPU6050_Get_LSB_Sensitivity+0x8e>
		LSB_Sensitivity_ACC = 4096.f;
 8002a96:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac8 <MPU6050_Get_LSB_Sensitivity+0xac>)
 8002a98:	228b      	movs	r2, #139	@ 0x8b
 8002a9a:	05d2      	lsls	r2, r2, #23
 8002a9c:	601a      	str	r2, [r3, #0]
		break;
 8002a9e:	e004      	b.n	8002aaa <MPU6050_Get_LSB_Sensitivity+0x8e>
		LSB_Sensitivity_ACC = 2048.f;
 8002aa0:	4b09      	ldr	r3, [pc, #36]	@ (8002ac8 <MPU6050_Get_LSB_Sensitivity+0xac>)
 8002aa2:	228a      	movs	r2, #138	@ 0x8a
 8002aa4:	05d2      	lsls	r2, r2, #23
 8002aa6:	601a      	str	r2, [r3, #0]
		break;
 8002aa8:	46c0      	nop			@ (mov r8, r8)
}
 8002aaa:	46c0      	nop			@ (mov r8, r8)
 8002aac:	46bd      	mov	sp, r7
 8002aae:	b002      	add	sp, #8
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	46c0      	nop			@ (mov r8, r8)
 8002ab4:	20000220 	.word	0x20000220
 8002ab8:	43030000 	.word	0x43030000
 8002abc:	42830000 	.word	0x42830000
 8002ac0:	42033333 	.word	0x42033333
 8002ac4:	41833333 	.word	0x41833333
 8002ac8:	2000021c 	.word	0x2000021c

08002acc <MPU6050_DataConvert>:

/*Convert Unit. acc_raw -> g, gyro_raw -> degree per second*/
void MPU6050_DataConvert(Struct_MPU6050* mpu6050)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
	//printf("LSB_Sensitivity_GYRO: %f, LSB_Sensitivity_ACC: %f\n",LSB_Sensitivity_GYRO,LSB_Sensitivity_ACC);
	mpu6050->acc_x = mpu6050->acc_x_raw / LSB_Sensitivity_ACC;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	5e9b      	ldrsh	r3, [r3, r2]
 8002ada:	0018      	movs	r0, r3
 8002adc:	f7fd fe72 	bl	80007c4 <__aeabi_i2f>
 8002ae0:	1c02      	adds	r2, r0, #0
 8002ae2:	4b3f      	ldr	r3, [pc, #252]	@ (8002be0 <MPU6050_DataConvert+0x114>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	1c19      	adds	r1, r3, #0
 8002ae8:	1c10      	adds	r0, r2, #0
 8002aea:	f7fd fd4b 	bl	8000584 <__aeabi_fdiv>
 8002aee:	1c03      	adds	r3, r0, #0
 8002af0:	1c1a      	adds	r2, r3, #0
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	611a      	str	r2, [r3, #16]
	mpu6050->acc_y = mpu6050->acc_y_raw / LSB_Sensitivity_ACC;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2202      	movs	r2, #2
 8002afa:	5e9b      	ldrsh	r3, [r3, r2]
 8002afc:	0018      	movs	r0, r3
 8002afe:	f7fd fe61 	bl	80007c4 <__aeabi_i2f>
 8002b02:	1c02      	adds	r2, r0, #0
 8002b04:	4b36      	ldr	r3, [pc, #216]	@ (8002be0 <MPU6050_DataConvert+0x114>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	1c19      	adds	r1, r3, #0
 8002b0a:	1c10      	adds	r0, r2, #0
 8002b0c:	f7fd fd3a 	bl	8000584 <__aeabi_fdiv>
 8002b10:	1c03      	adds	r3, r0, #0
 8002b12:	1c1a      	adds	r2, r3, #0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	615a      	str	r2, [r3, #20]
	mpu6050->acc_z = mpu6050->acc_z_raw / LSB_Sensitivity_ACC;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	5e9b      	ldrsh	r3, [r3, r2]
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f7fd fe50 	bl	80007c4 <__aeabi_i2f>
 8002b24:	1c02      	adds	r2, r0, #0
 8002b26:	4b2e      	ldr	r3, [pc, #184]	@ (8002be0 <MPU6050_DataConvert+0x114>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	1c19      	adds	r1, r3, #0
 8002b2c:	1c10      	adds	r0, r2, #0
 8002b2e:	f7fd fd29 	bl	8000584 <__aeabi_fdiv>
 8002b32:	1c03      	adds	r3, r0, #0
 8002b34:	1c1a      	adds	r2, r3, #0
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	619a      	str	r2, [r3, #24]

	mpu6050->temperature = (float)(mpu6050->temperature_raw)/340+36.53;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2206      	movs	r2, #6
 8002b3e:	5e9b      	ldrsh	r3, [r3, r2]
 8002b40:	0018      	movs	r0, r3
 8002b42:	f7fd fe3f 	bl	80007c4 <__aeabi_i2f>
 8002b46:	1c03      	adds	r3, r0, #0
 8002b48:	4926      	ldr	r1, [pc, #152]	@ (8002be4 <MPU6050_DataConvert+0x118>)
 8002b4a:	1c18      	adds	r0, r3, #0
 8002b4c:	f7fd fd1a 	bl	8000584 <__aeabi_fdiv>
 8002b50:	1c03      	adds	r3, r0, #0
 8002b52:	1c18      	adds	r0, r3, #0
 8002b54:	f7ff fd3e 	bl	80025d4 <__aeabi_f2d>
 8002b58:	4a23      	ldr	r2, [pc, #140]	@ (8002be8 <MPU6050_DataConvert+0x11c>)
 8002b5a:	4b24      	ldr	r3, [pc, #144]	@ (8002bec <MPU6050_DataConvert+0x120>)
 8002b5c:	f7fd fe7e 	bl	800085c <__aeabi_dadd>
 8002b60:	0002      	movs	r2, r0
 8002b62:	000b      	movs	r3, r1
 8002b64:	0010      	movs	r0, r2
 8002b66:	0019      	movs	r1, r3
 8002b68:	f7ff fd7c 	bl	8002664 <__aeabi_d2f>
 8002b6c:	1c02      	adds	r2, r0, #0
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	61da      	str	r2, [r3, #28]

	mpu6050->gyro_x = mpu6050->gyro_x_raw / LSB_Sensitivity_GYRO;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2208      	movs	r2, #8
 8002b76:	5e9b      	ldrsh	r3, [r3, r2]
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f7fd fe23 	bl	80007c4 <__aeabi_i2f>
 8002b7e:	1c02      	adds	r2, r0, #0
 8002b80:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf0 <MPU6050_DataConvert+0x124>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	1c19      	adds	r1, r3, #0
 8002b86:	1c10      	adds	r0, r2, #0
 8002b88:	f7fd fcfc 	bl	8000584 <__aeabi_fdiv>
 8002b8c:	1c03      	adds	r3, r0, #0
 8002b8e:	1c1a      	adds	r2, r3, #0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	621a      	str	r2, [r3, #32]
	mpu6050->gyro_y = mpu6050->gyro_y_raw / LSB_Sensitivity_GYRO;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	220a      	movs	r2, #10
 8002b98:	5e9b      	ldrsh	r3, [r3, r2]
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f7fd fe12 	bl	80007c4 <__aeabi_i2f>
 8002ba0:	1c02      	adds	r2, r0, #0
 8002ba2:	4b13      	ldr	r3, [pc, #76]	@ (8002bf0 <MPU6050_DataConvert+0x124>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	1c19      	adds	r1, r3, #0
 8002ba8:	1c10      	adds	r0, r2, #0
 8002baa:	f7fd fceb 	bl	8000584 <__aeabi_fdiv>
 8002bae:	1c03      	adds	r3, r0, #0
 8002bb0:	1c1a      	adds	r2, r3, #0
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	625a      	str	r2, [r3, #36]	@ 0x24
	mpu6050->gyro_z = mpu6050->gyro_z_raw / LSB_Sensitivity_GYRO;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	220c      	movs	r2, #12
 8002bba:	5e9b      	ldrsh	r3, [r3, r2]
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f7fd fe01 	bl	80007c4 <__aeabi_i2f>
 8002bc2:	1c02      	adds	r2, r0, #0
 8002bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf0 <MPU6050_DataConvert+0x124>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	1c19      	adds	r1, r3, #0
 8002bca:	1c10      	adds	r0, r2, #0
 8002bcc:	f7fd fcda 	bl	8000584 <__aeabi_fdiv>
 8002bd0:	1c03      	adds	r3, r0, #0
 8002bd2:	1c1a      	adds	r2, r3, #0
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002bd8:	46c0      	nop			@ (mov r8, r8)
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	b002      	add	sp, #8
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	2000021c 	.word	0x2000021c
 8002be4:	43aa0000 	.word	0x43aa0000
 8002be8:	0a3d70a4 	.word	0x0a3d70a4
 8002bec:	404243d7 	.word	0x404243d7
 8002bf0:	20000220 	.word	0x20000220

08002bf4 <MPU6050_ProcessData>:
	 */
	return HAL_GPIO_ReadPin(MPU6050_INT_PORT, MPU6050_INT_PIN);
}

void MPU6050_ProcessData(Struct_MPU6050* mpu6050)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
	MPU6050_Get6AxisRawData(mpu6050);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f7ff feae 	bl	8002960 <MPU6050_Get6AxisRawData>
	MPU6050_DataConvert(mpu6050);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	0018      	movs	r0, r3
 8002c08:	f7ff ff60 	bl	8002acc <MPU6050_DataConvert>
}
 8002c0c:	46c0      	nop			@ (mov r8, r8)
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b002      	add	sp, #8
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, uint8_t* p, int len)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart2, p, len, len) == HAL_OK )
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68b9      	ldr	r1, [r7, #8]
 8002c28:	4805      	ldr	r0, [pc, #20]	@ (8002c40 <_write+0x2c>)
 8002c2a:	f002 fbc7 	bl	80053bc <HAL_UART_Transmit>
 8002c2e:	1e03      	subs	r3, r0, #0
 8002c30:	d101      	bne.n	8002c36 <_write+0x22>
	{
		return len;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	e000      	b.n	8002c38 <_write+0x24>
	}
	return 0;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	0018      	movs	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b004      	add	sp, #16
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	20000278 	.word	0x20000278

08002c44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b0c0      	sub	sp, #256	@ 0x100
 8002c48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c4a:	f000 fb8b 	bl	8003364 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c4e:	f000 f82b 	bl	8002ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c52:	f000 f919 	bl	8002e88 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c56:	f000 f8f9 	bl	8002e4c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002c5a:	f000 f8c7 	bl	8002dec <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002c5e:	f000 f885 	bl	8002d6c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Initialization();
 8002c62:	f7ff fdfb 	bl	800285c <MPU6050_Initialization>
  while (1)
  {
    /* USER CODE END WHILE */


			MPU6050_ProcessData(&MPU6050);
 8002c66:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca0 <main+0x5c>)
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f7ff ffc3 	bl	8002bf4 <MPU6050_ProcessData>

			HAL_Delay(1);
 8002c6e:	2001      	movs	r0, #1
 8002c70:	f000 fbdc 	bl	800342c <HAL_Delay>
			//printf("%f, %f, %f\n", MPU6050.acc_x, MPU6050.acc_y, MPU6050.acc_z);
			//printf("%f, %f, %f\n", MPU6050.gyro_x, MPU6050.gyro_y, MPU6050.gyro_z);
			printf("%d, %d, %d\n", MPU6050.acc_x_raw, MPU6050.acc_y_raw, MPU6050.acc_z_raw);
 8002c74:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca0 <main+0x5c>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	5e9b      	ldrsh	r3, [r3, r2]
 8002c7a:	0019      	movs	r1, r3
 8002c7c:	4b08      	ldr	r3, [pc, #32]	@ (8002ca0 <main+0x5c>)
 8002c7e:	2202      	movs	r2, #2
 8002c80:	5e9b      	ldrsh	r3, [r3, r2]
 8002c82:	001a      	movs	r2, r3
 8002c84:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <main+0x5c>)
 8002c86:	2004      	movs	r0, #4
 8002c88:	5e1b      	ldrsh	r3, [r3, r0]
 8002c8a:	4806      	ldr	r0, [pc, #24]	@ (8002ca4 <main+0x60>)
 8002c8c:	f003 fef2 	bl	8006a74 <iprintf>
			                        "Accel: X=%.2f, Y=%.2f, Z=%.2f\nGyro: X=%.2f, Y=%.2f, Z=%.2f\n",
			                        MPU6050.acc_x, MPU6050.acc_y, MPU6050.acc_z,
			                        MPU6050.gyro_x, MPU6050.gyro_y, MPU6050.gyro_z);*/

			   // HAL_UART_Transmit(&huart2, (uint8_t *)buffer, len, HAL_MAX_DELAY);
			HAL_Delay(500);
 8002c90:	23fa      	movs	r3, #250	@ 0xfa
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	0018      	movs	r0, r3
 8002c96:	f000 fbc9 	bl	800342c <HAL_Delay>
  {
 8002c9a:	46c0      	nop			@ (mov r8, r8)
 8002c9c:	e7e3      	b.n	8002c66 <main+0x22>
 8002c9e:	46c0      	nop			@ (mov r8, r8)
 8002ca0:	200001f0 	.word	0x200001f0
 8002ca4:	0800a634 	.word	0x0800a634

08002ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ca8:	b590      	push	{r4, r7, lr}
 8002caa:	b097      	sub	sp, #92	@ 0x5c
 8002cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cae:	2428      	movs	r4, #40	@ 0x28
 8002cb0:	193b      	adds	r3, r7, r4
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	2330      	movs	r3, #48	@ 0x30
 8002cb6:	001a      	movs	r2, r3
 8002cb8:	2100      	movs	r1, #0
 8002cba:	f004 f857 	bl	8006d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cbe:	2318      	movs	r3, #24
 8002cc0:	18fb      	adds	r3, r7, r3
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	2310      	movs	r3, #16
 8002cc6:	001a      	movs	r2, r3
 8002cc8:	2100      	movs	r1, #0
 8002cca:	f004 f84f 	bl	8006d6c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cce:	1d3b      	adds	r3, r7, #4
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	2314      	movs	r3, #20
 8002cd4:	001a      	movs	r2, r3
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	f004 f848 	bl	8006d6c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cdc:	0021      	movs	r1, r4
 8002cde:	187b      	adds	r3, r7, r1
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ce4:	187b      	adds	r3, r7, r1
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cea:	187b      	adds	r3, r7, r1
 8002cec:	2210      	movs	r2, #16
 8002cee:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cf0:	187b      	adds	r3, r7, r1
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002cf6:	187b      	adds	r3, r7, r1
 8002cf8:	2280      	movs	r2, #128	@ 0x80
 8002cfa:	0212      	lsls	r2, r2, #8
 8002cfc:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002cfe:	187b      	adds	r3, r7, r1
 8002d00:	2280      	movs	r2, #128	@ 0x80
 8002d02:	0352      	lsls	r2, r2, #13
 8002d04:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002d06:	187b      	adds	r3, r7, r1
 8002d08:	2200      	movs	r2, #0
 8002d0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d0c:	187b      	adds	r3, r7, r1
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f001 fdbe 	bl	8004890 <HAL_RCC_OscConfig>
 8002d14:	1e03      	subs	r3, r0, #0
 8002d16:	d001      	beq.n	8002d1c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002d18:	f000 f93e 	bl	8002f98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d1c:	2118      	movs	r1, #24
 8002d1e:	187b      	adds	r3, r7, r1
 8002d20:	2207      	movs	r2, #7
 8002d22:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d24:	187b      	adds	r3, r7, r1
 8002d26:	2202      	movs	r2, #2
 8002d28:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d2a:	187b      	adds	r3, r7, r1
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d30:	187b      	adds	r3, r7, r1
 8002d32:	2200      	movs	r2, #0
 8002d34:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002d36:	187b      	adds	r3, r7, r1
 8002d38:	2101      	movs	r1, #1
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f002 f8c6 	bl	8004ecc <HAL_RCC_ClockConfig>
 8002d40:	1e03      	subs	r3, r0, #0
 8002d42:	d001      	beq.n	8002d48 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002d44:	f000 f928 	bl	8002f98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002d48:	1d3b      	adds	r3, r7, #4
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002d4e:	1d3b      	adds	r3, r7, #4
 8002d50:	2200      	movs	r2, #0
 8002d52:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d54:	1d3b      	adds	r3, r7, #4
 8002d56:	0018      	movs	r0, r3
 8002d58:	f002 f9fe 	bl	8005158 <HAL_RCCEx_PeriphCLKConfig>
 8002d5c:	1e03      	subs	r3, r0, #0
 8002d5e:	d001      	beq.n	8002d64 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002d60:	f000 f91a 	bl	8002f98 <Error_Handler>
  }
}
 8002d64:	46c0      	nop			@ (mov r8, r8)
 8002d66:	46bd      	mov	sp, r7
 8002d68:	b017      	add	sp, #92	@ 0x5c
 8002d6a:	bd90      	pop	{r4, r7, pc}

08002d6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d70:	4b1b      	ldr	r3, [pc, #108]	@ (8002de0 <MX_I2C1_Init+0x74>)
 8002d72:	4a1c      	ldr	r2, [pc, #112]	@ (8002de4 <MX_I2C1_Init+0x78>)
 8002d74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020A;
 8002d76:	4b1a      	ldr	r3, [pc, #104]	@ (8002de0 <MX_I2C1_Init+0x74>)
 8002d78:	4a1b      	ldr	r2, [pc, #108]	@ (8002de8 <MX_I2C1_Init+0x7c>)
 8002d7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002d7c:	4b18      	ldr	r3, [pc, #96]	@ (8002de0 <MX_I2C1_Init+0x74>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d82:	4b17      	ldr	r3, [pc, #92]	@ (8002de0 <MX_I2C1_Init+0x74>)
 8002d84:	2201      	movs	r2, #1
 8002d86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d88:	4b15      	ldr	r3, [pc, #84]	@ (8002de0 <MX_I2C1_Init+0x74>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002d8e:	4b14      	ldr	r3, [pc, #80]	@ (8002de0 <MX_I2C1_Init+0x74>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d94:	4b12      	ldr	r3, [pc, #72]	@ (8002de0 <MX_I2C1_Init+0x74>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d9a:	4b11      	ldr	r3, [pc, #68]	@ (8002de0 <MX_I2C1_Init+0x74>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002da0:	4b0f      	ldr	r3, [pc, #60]	@ (8002de0 <MX_I2C1_Init+0x74>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002da6:	4b0e      	ldr	r3, [pc, #56]	@ (8002de0 <MX_I2C1_Init+0x74>)
 8002da8:	0018      	movs	r0, r3
 8002daa:	f000 fed5 	bl	8003b58 <HAL_I2C_Init>
 8002dae:	1e03      	subs	r3, r0, #0
 8002db0:	d001      	beq.n	8002db6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002db2:	f000 f8f1 	bl	8002f98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002db6:	4b0a      	ldr	r3, [pc, #40]	@ (8002de0 <MX_I2C1_Init+0x74>)
 8002db8:	2100      	movs	r1, #0
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f001 fcd0 	bl	8004760 <HAL_I2CEx_ConfigAnalogFilter>
 8002dc0:	1e03      	subs	r3, r0, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002dc4:	f000 f8e8 	bl	8002f98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002dc8:	4b05      	ldr	r3, [pc, #20]	@ (8002de0 <MX_I2C1_Init+0x74>)
 8002dca:	2100      	movs	r1, #0
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f001 fd13 	bl	80047f8 <HAL_I2CEx_ConfigDigitalFilter>
 8002dd2:	1e03      	subs	r3, r0, #0
 8002dd4:	d001      	beq.n	8002dda <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002dd6:	f000 f8df 	bl	8002f98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002dda:	46c0      	nop			@ (mov r8, r8)
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	20000224 	.word	0x20000224
 8002de4:	40005400 	.word	0x40005400
 8002de8:	0010020a 	.word	0x0010020a

08002dec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002df0:	4b14      	ldr	r3, [pc, #80]	@ (8002e44 <MX_USART2_UART_Init+0x58>)
 8002df2:	4a15      	ldr	r2, [pc, #84]	@ (8002e48 <MX_USART2_UART_Init+0x5c>)
 8002df4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002df6:	4b13      	ldr	r3, [pc, #76]	@ (8002e44 <MX_USART2_UART_Init+0x58>)
 8002df8:	22e1      	movs	r2, #225	@ 0xe1
 8002dfa:	0252      	lsls	r2, r2, #9
 8002dfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002dfe:	4b11      	ldr	r3, [pc, #68]	@ (8002e44 <MX_USART2_UART_Init+0x58>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e04:	4b0f      	ldr	r3, [pc, #60]	@ (8002e44 <MX_USART2_UART_Init+0x58>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e44 <MX_USART2_UART_Init+0x58>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e10:	4b0c      	ldr	r3, [pc, #48]	@ (8002e44 <MX_USART2_UART_Init+0x58>)
 8002e12:	220c      	movs	r2, #12
 8002e14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e16:	4b0b      	ldr	r3, [pc, #44]	@ (8002e44 <MX_USART2_UART_Init+0x58>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e1c:	4b09      	ldr	r3, [pc, #36]	@ (8002e44 <MX_USART2_UART_Init+0x58>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e22:	4b08      	ldr	r3, [pc, #32]	@ (8002e44 <MX_USART2_UART_Init+0x58>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e28:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <MX_USART2_UART_Init+0x58>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e2e:	4b05      	ldr	r3, [pc, #20]	@ (8002e44 <MX_USART2_UART_Init+0x58>)
 8002e30:	0018      	movs	r0, r3
 8002e32:	f002 fa6f 	bl	8005314 <HAL_UART_Init>
 8002e36:	1e03      	subs	r3, r0, #0
 8002e38:	d001      	beq.n	8002e3e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002e3a:	f000 f8ad 	bl	8002f98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e3e:	46c0      	nop			@ (mov r8, r8)
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	20000278 	.word	0x20000278
 8002e48:	40004400 	.word	0x40004400

08002e4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e52:	4b0c      	ldr	r3, [pc, #48]	@ (8002e84 <MX_DMA_Init+0x38>)
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	4b0b      	ldr	r3, [pc, #44]	@ (8002e84 <MX_DMA_Init+0x38>)
 8002e58:	2101      	movs	r1, #1
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	615a      	str	r2, [r3, #20]
 8002e5e:	4b09      	ldr	r3, [pc, #36]	@ (8002e84 <MX_DMA_Init+0x38>)
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	2201      	movs	r2, #1
 8002e64:	4013      	ands	r3, r2
 8002e66:	607b      	str	r3, [r7, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	200b      	movs	r0, #11
 8002e70:	f000 fbac 	bl	80035cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8002e74:	200b      	movs	r0, #11
 8002e76:	f000 fbbe 	bl	80035f6 <HAL_NVIC_EnableIRQ>

}
 8002e7a:	46c0      	nop			@ (mov r8, r8)
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	b002      	add	sp, #8
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	46c0      	nop			@ (mov r8, r8)
 8002e84:	40021000 	.word	0x40021000

08002e88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e88:	b590      	push	{r4, r7, lr}
 8002e8a:	b08b      	sub	sp, #44	@ 0x2c
 8002e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e8e:	2414      	movs	r4, #20
 8002e90:	193b      	adds	r3, r7, r4
 8002e92:	0018      	movs	r0, r3
 8002e94:	2314      	movs	r3, #20
 8002e96:	001a      	movs	r2, r3
 8002e98:	2100      	movs	r1, #0
 8002e9a:	f003 ff67 	bl	8006d6c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e9e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f8c <MX_GPIO_Init+0x104>)
 8002ea0:	695a      	ldr	r2, [r3, #20]
 8002ea2:	4b3a      	ldr	r3, [pc, #232]	@ (8002f8c <MX_GPIO_Init+0x104>)
 8002ea4:	2180      	movs	r1, #128	@ 0x80
 8002ea6:	0309      	lsls	r1, r1, #12
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	615a      	str	r2, [r3, #20]
 8002eac:	4b37      	ldr	r3, [pc, #220]	@ (8002f8c <MX_GPIO_Init+0x104>)
 8002eae:	695a      	ldr	r2, [r3, #20]
 8002eb0:	2380      	movs	r3, #128	@ 0x80
 8002eb2:	031b      	lsls	r3, r3, #12
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002eba:	4b34      	ldr	r3, [pc, #208]	@ (8002f8c <MX_GPIO_Init+0x104>)
 8002ebc:	695a      	ldr	r2, [r3, #20]
 8002ebe:	4b33      	ldr	r3, [pc, #204]	@ (8002f8c <MX_GPIO_Init+0x104>)
 8002ec0:	2180      	movs	r1, #128	@ 0x80
 8002ec2:	03c9      	lsls	r1, r1, #15
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	615a      	str	r2, [r3, #20]
 8002ec8:	4b30      	ldr	r3, [pc, #192]	@ (8002f8c <MX_GPIO_Init+0x104>)
 8002eca:	695a      	ldr	r2, [r3, #20]
 8002ecc:	2380      	movs	r3, #128	@ 0x80
 8002ece:	03db      	lsls	r3, r3, #15
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8002f8c <MX_GPIO_Init+0x104>)
 8002ed8:	695a      	ldr	r2, [r3, #20]
 8002eda:	4b2c      	ldr	r3, [pc, #176]	@ (8002f8c <MX_GPIO_Init+0x104>)
 8002edc:	2180      	movs	r1, #128	@ 0x80
 8002ede:	0289      	lsls	r1, r1, #10
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	615a      	str	r2, [r3, #20]
 8002ee4:	4b29      	ldr	r3, [pc, #164]	@ (8002f8c <MX_GPIO_Init+0x104>)
 8002ee6:	695a      	ldr	r2, [r3, #20]
 8002ee8:	2380      	movs	r3, #128	@ 0x80
 8002eea:	029b      	lsls	r3, r3, #10
 8002eec:	4013      	ands	r3, r2
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef2:	4b26      	ldr	r3, [pc, #152]	@ (8002f8c <MX_GPIO_Init+0x104>)
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	4b25      	ldr	r3, [pc, #148]	@ (8002f8c <MX_GPIO_Init+0x104>)
 8002ef8:	2180      	movs	r1, #128	@ 0x80
 8002efa:	02c9      	lsls	r1, r1, #11
 8002efc:	430a      	orrs	r2, r1
 8002efe:	615a      	str	r2, [r3, #20]
 8002f00:	4b22      	ldr	r3, [pc, #136]	@ (8002f8c <MX_GPIO_Init+0x104>)
 8002f02:	695a      	ldr	r2, [r3, #20]
 8002f04:	2380      	movs	r3, #128	@ 0x80
 8002f06:	02db      	lsls	r3, r3, #11
 8002f08:	4013      	ands	r3, r2
 8002f0a:	607b      	str	r3, [r7, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002f0e:	2390      	movs	r3, #144	@ 0x90
 8002f10:	05db      	lsls	r3, r3, #23
 8002f12:	2200      	movs	r2, #0
 8002f14:	2120      	movs	r1, #32
 8002f16:	0018      	movs	r0, r3
 8002f18:	f000 fe00 	bl	8003b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002f1c:	193b      	adds	r3, r7, r4
 8002f1e:	2280      	movs	r2, #128	@ 0x80
 8002f20:	0192      	lsls	r2, r2, #6
 8002f22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f24:	193b      	adds	r3, r7, r4
 8002f26:	2284      	movs	r2, #132	@ 0x84
 8002f28:	0392      	lsls	r2, r2, #14
 8002f2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2c:	193b      	adds	r3, r7, r4
 8002f2e:	2200      	movs	r2, #0
 8002f30:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f32:	193b      	adds	r3, r7, r4
 8002f34:	4a16      	ldr	r2, [pc, #88]	@ (8002f90 <MX_GPIO_Init+0x108>)
 8002f36:	0019      	movs	r1, r3
 8002f38:	0010      	movs	r0, r2
 8002f3a:	f000 fc7f 	bl	800383c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002f3e:	193b      	adds	r3, r7, r4
 8002f40:	2220      	movs	r2, #32
 8002f42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f44:	193b      	adds	r3, r7, r4
 8002f46:	2201      	movs	r2, #1
 8002f48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4a:	193b      	adds	r3, r7, r4
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f50:	193b      	adds	r3, r7, r4
 8002f52:	2200      	movs	r2, #0
 8002f54:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002f56:	193a      	adds	r2, r7, r4
 8002f58:	2390      	movs	r3, #144	@ 0x90
 8002f5a:	05db      	lsls	r3, r3, #23
 8002f5c:	0011      	movs	r1, r2
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f000 fc6c 	bl	800383c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002f64:	193b      	adds	r3, r7, r4
 8002f66:	2220      	movs	r2, #32
 8002f68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f6a:	193b      	adds	r3, r7, r4
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	193b      	adds	r3, r7, r4
 8002f72:	2200      	movs	r2, #0
 8002f74:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f76:	193b      	adds	r3, r7, r4
 8002f78:	4a06      	ldr	r2, [pc, #24]	@ (8002f94 <MX_GPIO_Init+0x10c>)
 8002f7a:	0019      	movs	r1, r3
 8002f7c:	0010      	movs	r0, r2
 8002f7e:	f000 fc5d 	bl	800383c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f82:	46c0      	nop			@ (mov r8, r8)
 8002f84:	46bd      	mov	sp, r7
 8002f86:	b00b      	add	sp, #44	@ 0x2c
 8002f88:	bd90      	pop	{r4, r7, pc}
 8002f8a:	46c0      	nop			@ (mov r8, r8)
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	48000800 	.word	0x48000800
 8002f94:	48000400 	.word	0x48000400

08002f98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f9c:	b672      	cpsid	i
}
 8002f9e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fa0:	46c0      	nop			@ (mov r8, r8)
 8002fa2:	e7fd      	b.n	8002fa0 <Error_Handler+0x8>

08002fa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002faa:	4b0f      	ldr	r3, [pc, #60]	@ (8002fe8 <HAL_MspInit+0x44>)
 8002fac:	699a      	ldr	r2, [r3, #24]
 8002fae:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe8 <HAL_MspInit+0x44>)
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	619a      	str	r2, [r3, #24]
 8002fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe8 <HAL_MspInit+0x44>)
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	607b      	str	r3, [r7, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fc2:	4b09      	ldr	r3, [pc, #36]	@ (8002fe8 <HAL_MspInit+0x44>)
 8002fc4:	69da      	ldr	r2, [r3, #28]
 8002fc6:	4b08      	ldr	r3, [pc, #32]	@ (8002fe8 <HAL_MspInit+0x44>)
 8002fc8:	2180      	movs	r1, #128	@ 0x80
 8002fca:	0549      	lsls	r1, r1, #21
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	61da      	str	r2, [r3, #28]
 8002fd0:	4b05      	ldr	r3, [pc, #20]	@ (8002fe8 <HAL_MspInit+0x44>)
 8002fd2:	69da      	ldr	r2, [r3, #28]
 8002fd4:	2380      	movs	r3, #128	@ 0x80
 8002fd6:	055b      	lsls	r3, r3, #21
 8002fd8:	4013      	ands	r3, r2
 8002fda:	603b      	str	r3, [r7, #0]
 8002fdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fde:	46c0      	nop			@ (mov r8, r8)
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	b002      	add	sp, #8
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	46c0      	nop			@ (mov r8, r8)
 8002fe8:	40021000 	.word	0x40021000

08002fec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fec:	b590      	push	{r4, r7, lr}
 8002fee:	b08b      	sub	sp, #44	@ 0x2c
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff4:	2414      	movs	r4, #20
 8002ff6:	193b      	adds	r3, r7, r4
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	2314      	movs	r3, #20
 8002ffc:	001a      	movs	r2, r3
 8002ffe:	2100      	movs	r1, #0
 8003000:	f003 feb4 	bl	8006d6c <memset>
  if(hi2c->Instance==I2C1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a1c      	ldr	r2, [pc, #112]	@ (800307c <HAL_I2C_MspInit+0x90>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d131      	bne.n	8003072 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800300e:	4b1c      	ldr	r3, [pc, #112]	@ (8003080 <HAL_I2C_MspInit+0x94>)
 8003010:	695a      	ldr	r2, [r3, #20]
 8003012:	4b1b      	ldr	r3, [pc, #108]	@ (8003080 <HAL_I2C_MspInit+0x94>)
 8003014:	2180      	movs	r1, #128	@ 0x80
 8003016:	02c9      	lsls	r1, r1, #11
 8003018:	430a      	orrs	r2, r1
 800301a:	615a      	str	r2, [r3, #20]
 800301c:	4b18      	ldr	r3, [pc, #96]	@ (8003080 <HAL_I2C_MspInit+0x94>)
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	2380      	movs	r3, #128	@ 0x80
 8003022:	02db      	lsls	r3, r3, #11
 8003024:	4013      	ands	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800302a:	0021      	movs	r1, r4
 800302c:	187b      	adds	r3, r7, r1
 800302e:	22c0      	movs	r2, #192	@ 0xc0
 8003030:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003032:	187b      	adds	r3, r7, r1
 8003034:	2212      	movs	r2, #18
 8003036:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003038:	187b      	adds	r3, r7, r1
 800303a:	2200      	movs	r2, #0
 800303c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800303e:	187b      	adds	r3, r7, r1
 8003040:	2203      	movs	r2, #3
 8003042:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003044:	187b      	adds	r3, r7, r1
 8003046:	2201      	movs	r2, #1
 8003048:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800304a:	187b      	adds	r3, r7, r1
 800304c:	4a0d      	ldr	r2, [pc, #52]	@ (8003084 <HAL_I2C_MspInit+0x98>)
 800304e:	0019      	movs	r1, r3
 8003050:	0010      	movs	r0, r2
 8003052:	f000 fbf3 	bl	800383c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003056:	4b0a      	ldr	r3, [pc, #40]	@ (8003080 <HAL_I2C_MspInit+0x94>)
 8003058:	69da      	ldr	r2, [r3, #28]
 800305a:	4b09      	ldr	r3, [pc, #36]	@ (8003080 <HAL_I2C_MspInit+0x94>)
 800305c:	2180      	movs	r1, #128	@ 0x80
 800305e:	0389      	lsls	r1, r1, #14
 8003060:	430a      	orrs	r2, r1
 8003062:	61da      	str	r2, [r3, #28]
 8003064:	4b06      	ldr	r3, [pc, #24]	@ (8003080 <HAL_I2C_MspInit+0x94>)
 8003066:	69da      	ldr	r2, [r3, #28]
 8003068:	2380      	movs	r3, #128	@ 0x80
 800306a:	039b      	lsls	r3, r3, #14
 800306c:	4013      	ands	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	46bd      	mov	sp, r7
 8003076:	b00b      	add	sp, #44	@ 0x2c
 8003078:	bd90      	pop	{r4, r7, pc}
 800307a:	46c0      	nop			@ (mov r8, r8)
 800307c:	40005400 	.word	0x40005400
 8003080:	40021000 	.word	0x40021000
 8003084:	48000400 	.word	0x48000400

08003088 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003088:	b590      	push	{r4, r7, lr}
 800308a:	b08b      	sub	sp, #44	@ 0x2c
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003090:	2414      	movs	r4, #20
 8003092:	193b      	adds	r3, r7, r4
 8003094:	0018      	movs	r0, r3
 8003096:	2314      	movs	r3, #20
 8003098:	001a      	movs	r2, r3
 800309a:	2100      	movs	r1, #0
 800309c:	f003 fe66 	bl	8006d6c <memset>
  if(huart->Instance==USART2)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a2f      	ldr	r2, [pc, #188]	@ (8003164 <HAL_UART_MspInit+0xdc>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d158      	bne.n	800315c <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80030aa:	4b2f      	ldr	r3, [pc, #188]	@ (8003168 <HAL_UART_MspInit+0xe0>)
 80030ac:	69da      	ldr	r2, [r3, #28]
 80030ae:	4b2e      	ldr	r3, [pc, #184]	@ (8003168 <HAL_UART_MspInit+0xe0>)
 80030b0:	2180      	movs	r1, #128	@ 0x80
 80030b2:	0289      	lsls	r1, r1, #10
 80030b4:	430a      	orrs	r2, r1
 80030b6:	61da      	str	r2, [r3, #28]
 80030b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003168 <HAL_UART_MspInit+0xe0>)
 80030ba:	69da      	ldr	r2, [r3, #28]
 80030bc:	2380      	movs	r3, #128	@ 0x80
 80030be:	029b      	lsls	r3, r3, #10
 80030c0:	4013      	ands	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030c6:	4b28      	ldr	r3, [pc, #160]	@ (8003168 <HAL_UART_MspInit+0xe0>)
 80030c8:	695a      	ldr	r2, [r3, #20]
 80030ca:	4b27      	ldr	r3, [pc, #156]	@ (8003168 <HAL_UART_MspInit+0xe0>)
 80030cc:	2180      	movs	r1, #128	@ 0x80
 80030ce:	0289      	lsls	r1, r1, #10
 80030d0:	430a      	orrs	r2, r1
 80030d2:	615a      	str	r2, [r3, #20]
 80030d4:	4b24      	ldr	r3, [pc, #144]	@ (8003168 <HAL_UART_MspInit+0xe0>)
 80030d6:	695a      	ldr	r2, [r3, #20]
 80030d8:	2380      	movs	r3, #128	@ 0x80
 80030da:	029b      	lsls	r3, r3, #10
 80030dc:	4013      	ands	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80030e2:	0021      	movs	r1, r4
 80030e4:	187b      	adds	r3, r7, r1
 80030e6:	220c      	movs	r2, #12
 80030e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ea:	187b      	adds	r3, r7, r1
 80030ec:	2202      	movs	r2, #2
 80030ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f0:	187b      	adds	r3, r7, r1
 80030f2:	2200      	movs	r2, #0
 80030f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030f6:	187b      	adds	r3, r7, r1
 80030f8:	2203      	movs	r2, #3
 80030fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80030fc:	187b      	adds	r3, r7, r1
 80030fe:	2201      	movs	r2, #1
 8003100:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003102:	187a      	adds	r2, r7, r1
 8003104:	2390      	movs	r3, #144	@ 0x90
 8003106:	05db      	lsls	r3, r3, #23
 8003108:	0011      	movs	r1, r2
 800310a:	0018      	movs	r0, r3
 800310c:	f000 fb96 	bl	800383c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8003110:	4b16      	ldr	r3, [pc, #88]	@ (800316c <HAL_UART_MspInit+0xe4>)
 8003112:	4a17      	ldr	r2, [pc, #92]	@ (8003170 <HAL_UART_MspInit+0xe8>)
 8003114:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003116:	4b15      	ldr	r3, [pc, #84]	@ (800316c <HAL_UART_MspInit+0xe4>)
 8003118:	2210      	movs	r2, #16
 800311a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800311c:	4b13      	ldr	r3, [pc, #76]	@ (800316c <HAL_UART_MspInit+0xe4>)
 800311e:	2200      	movs	r2, #0
 8003120:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003122:	4b12      	ldr	r3, [pc, #72]	@ (800316c <HAL_UART_MspInit+0xe4>)
 8003124:	2280      	movs	r2, #128	@ 0x80
 8003126:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003128:	4b10      	ldr	r3, [pc, #64]	@ (800316c <HAL_UART_MspInit+0xe4>)
 800312a:	2200      	movs	r2, #0
 800312c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800312e:	4b0f      	ldr	r3, [pc, #60]	@ (800316c <HAL_UART_MspInit+0xe4>)
 8003130:	2200      	movs	r2, #0
 8003132:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003134:	4b0d      	ldr	r3, [pc, #52]	@ (800316c <HAL_UART_MspInit+0xe4>)
 8003136:	2200      	movs	r2, #0
 8003138:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800313a:	4b0c      	ldr	r3, [pc, #48]	@ (800316c <HAL_UART_MspInit+0xe4>)
 800313c:	2200      	movs	r2, #0
 800313e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003140:	4b0a      	ldr	r3, [pc, #40]	@ (800316c <HAL_UART_MspInit+0xe4>)
 8003142:	0018      	movs	r0, r3
 8003144:	f000 fa74 	bl	8003630 <HAL_DMA_Init>
 8003148:	1e03      	subs	r3, r0, #0
 800314a:	d001      	beq.n	8003150 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 800314c:	f7ff ff24 	bl	8002f98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a06      	ldr	r2, [pc, #24]	@ (800316c <HAL_UART_MspInit+0xe4>)
 8003154:	671a      	str	r2, [r3, #112]	@ 0x70
 8003156:	4b05      	ldr	r3, [pc, #20]	@ (800316c <HAL_UART_MspInit+0xe4>)
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800315c:	46c0      	nop			@ (mov r8, r8)
 800315e:	46bd      	mov	sp, r7
 8003160:	b00b      	add	sp, #44	@ 0x2c
 8003162:	bd90      	pop	{r4, r7, pc}
 8003164:	40004400 	.word	0x40004400
 8003168:	40021000 	.word	0x40021000
 800316c:	20000300 	.word	0x20000300
 8003170:	40020044 	.word	0x40020044

08003174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003178:	46c0      	nop			@ (mov r8, r8)
 800317a:	e7fd      	b.n	8003178 <NMI_Handler+0x4>

0800317c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003180:	46c0      	nop			@ (mov r8, r8)
 8003182:	e7fd      	b.n	8003180 <HardFault_Handler+0x4>

08003184 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003188:	46c0      	nop			@ (mov r8, r8)
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003192:	46c0      	nop			@ (mov r8, r8)
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800319c:	f000 f92a 	bl	80033f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031a0:	46c0      	nop			@ (mov r8, r8)
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80031ac:	4b03      	ldr	r3, [pc, #12]	@ (80031bc <DMA1_Channel4_5_IRQHandler+0x14>)
 80031ae:	0018      	movs	r0, r3
 80031b0:	f000 fa86 	bl	80036c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80031b4:	46c0      	nop			@ (mov r8, r8)
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	46c0      	nop			@ (mov r8, r8)
 80031bc:	20000300 	.word	0x20000300

080031c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  return 1;
 80031c4:	2301      	movs	r3, #1
}
 80031c6:	0018      	movs	r0, r3
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <_kill>:

int _kill(int pid, int sig)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031d6:	f003 fe23 	bl	8006e20 <__errno>
 80031da:	0003      	movs	r3, r0
 80031dc:	2216      	movs	r2, #22
 80031de:	601a      	str	r2, [r3, #0]
  return -1;
 80031e0:	2301      	movs	r3, #1
 80031e2:	425b      	negs	r3, r3
}
 80031e4:	0018      	movs	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	b002      	add	sp, #8
 80031ea:	bd80      	pop	{r7, pc}

080031ec <_exit>:

void _exit (int status)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031f4:	2301      	movs	r3, #1
 80031f6:	425a      	negs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	0011      	movs	r1, r2
 80031fc:	0018      	movs	r0, r3
 80031fe:	f7ff ffe5 	bl	80031cc <_kill>
  while (1) {}    /* Make sure we hang here */
 8003202:	46c0      	nop			@ (mov r8, r8)
 8003204:	e7fd      	b.n	8003202 <_exit+0x16>

08003206 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b086      	sub	sp, #24
 800320a:	af00      	add	r7, sp, #0
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
 8003216:	e00a      	b.n	800322e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003218:	e000      	b.n	800321c <_read+0x16>
 800321a:	bf00      	nop
 800321c:	0001      	movs	r1, r0
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	60ba      	str	r2, [r7, #8]
 8003224:	b2ca      	uxtb	r2, r1
 8003226:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	3301      	adds	r3, #1
 800322c:	617b      	str	r3, [r7, #20]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	429a      	cmp	r2, r3
 8003234:	dbf0      	blt.n	8003218 <_read+0x12>
  }

  return len;
 8003236:	687b      	ldr	r3, [r7, #4]
}
 8003238:	0018      	movs	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	b006      	add	sp, #24
 800323e:	bd80      	pop	{r7, pc}

08003240 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003248:	2301      	movs	r3, #1
 800324a:	425b      	negs	r3, r3
}
 800324c:	0018      	movs	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	b002      	add	sp, #8
 8003252:	bd80      	pop	{r7, pc}

08003254 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2280      	movs	r2, #128	@ 0x80
 8003262:	0192      	lsls	r2, r2, #6
 8003264:	605a      	str	r2, [r3, #4]
  return 0;
 8003266:	2300      	movs	r3, #0
}
 8003268:	0018      	movs	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	b002      	add	sp, #8
 800326e:	bd80      	pop	{r7, pc}

08003270 <_isatty>:

int _isatty(int file)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003278:	2301      	movs	r3, #1
}
 800327a:	0018      	movs	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	b002      	add	sp, #8
 8003280:	bd80      	pop	{r7, pc}

08003282 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b084      	sub	sp, #16
 8003286:	af00      	add	r7, sp, #0
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800328e:	2300      	movs	r3, #0
}
 8003290:	0018      	movs	r0, r3
 8003292:	46bd      	mov	sp, r7
 8003294:	b004      	add	sp, #16
 8003296:	bd80      	pop	{r7, pc}

08003298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032a0:	4a14      	ldr	r2, [pc, #80]	@ (80032f4 <_sbrk+0x5c>)
 80032a2:	4b15      	ldr	r3, [pc, #84]	@ (80032f8 <_sbrk+0x60>)
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032ac:	4b13      	ldr	r3, [pc, #76]	@ (80032fc <_sbrk+0x64>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d102      	bne.n	80032ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032b4:	4b11      	ldr	r3, [pc, #68]	@ (80032fc <_sbrk+0x64>)
 80032b6:	4a12      	ldr	r2, [pc, #72]	@ (8003300 <_sbrk+0x68>)
 80032b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032ba:	4b10      	ldr	r3, [pc, #64]	@ (80032fc <_sbrk+0x64>)
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	18d3      	adds	r3, r2, r3
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d207      	bcs.n	80032d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032c8:	f003 fdaa 	bl	8006e20 <__errno>
 80032cc:	0003      	movs	r3, r0
 80032ce:	220c      	movs	r2, #12
 80032d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032d2:	2301      	movs	r3, #1
 80032d4:	425b      	negs	r3, r3
 80032d6:	e009      	b.n	80032ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032d8:	4b08      	ldr	r3, [pc, #32]	@ (80032fc <_sbrk+0x64>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032de:	4b07      	ldr	r3, [pc, #28]	@ (80032fc <_sbrk+0x64>)
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	18d2      	adds	r2, r2, r3
 80032e6:	4b05      	ldr	r3, [pc, #20]	@ (80032fc <_sbrk+0x64>)
 80032e8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80032ea:	68fb      	ldr	r3, [r7, #12]
}
 80032ec:	0018      	movs	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b006      	add	sp, #24
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	20004000 	.word	0x20004000
 80032f8:	00000400 	.word	0x00000400
 80032fc:	20000344 	.word	0x20000344
 8003300:	20000498 	.word	0x20000498

08003304 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003308:	46c0      	nop			@ (mov r8, r8)
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003310:	480d      	ldr	r0, [pc, #52]	@ (8003348 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003312:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003314:	f7ff fff6 	bl	8003304 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003318:	480c      	ldr	r0, [pc, #48]	@ (800334c <LoopForever+0x6>)
  ldr r1, =_edata
 800331a:	490d      	ldr	r1, [pc, #52]	@ (8003350 <LoopForever+0xa>)
  ldr r2, =_sidata
 800331c:	4a0d      	ldr	r2, [pc, #52]	@ (8003354 <LoopForever+0xe>)
  movs r3, #0
 800331e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003320:	e002      	b.n	8003328 <LoopCopyDataInit>

08003322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003326:	3304      	adds	r3, #4

08003328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800332a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800332c:	d3f9      	bcc.n	8003322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800332e:	4a0a      	ldr	r2, [pc, #40]	@ (8003358 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003330:	4c0a      	ldr	r4, [pc, #40]	@ (800335c <LoopForever+0x16>)
  movs r3, #0
 8003332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003334:	e001      	b.n	800333a <LoopFillZerobss>

08003336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003338:	3204      	adds	r2, #4

0800333a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800333a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800333c:	d3fb      	bcc.n	8003336 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800333e:	f003 fd75 	bl	8006e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003342:	f7ff fc7f 	bl	8002c44 <main>

08003346 <LoopForever>:

LoopForever:
    b LoopForever
 8003346:	e7fe      	b.n	8003346 <LoopForever>
  ldr   r0, =_estack
 8003348:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800334c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003350:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003354:	0800ab68 	.word	0x0800ab68
  ldr r2, =_sbss
 8003358:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800335c:	20000498 	.word	0x20000498

08003360 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003360:	e7fe      	b.n	8003360 <ADC1_IRQHandler>
	...

08003364 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003368:	4b07      	ldr	r3, [pc, #28]	@ (8003388 <HAL_Init+0x24>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	4b06      	ldr	r3, [pc, #24]	@ (8003388 <HAL_Init+0x24>)
 800336e:	2110      	movs	r1, #16
 8003370:	430a      	orrs	r2, r1
 8003372:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003374:	2000      	movs	r0, #0
 8003376:	f000 f809 	bl	800338c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800337a:	f7ff fe13 	bl	8002fa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	0018      	movs	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	46c0      	nop			@ (mov r8, r8)
 8003388:	40022000 	.word	0x40022000

0800338c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800338c:	b590      	push	{r4, r7, lr}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003394:	4b14      	ldr	r3, [pc, #80]	@ (80033e8 <HAL_InitTick+0x5c>)
 8003396:	681c      	ldr	r4, [r3, #0]
 8003398:	4b14      	ldr	r3, [pc, #80]	@ (80033ec <HAL_InitTick+0x60>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	0019      	movs	r1, r3
 800339e:	23fa      	movs	r3, #250	@ 0xfa
 80033a0:	0098      	lsls	r0, r3, #2
 80033a2:	f7fc fecd 	bl	8000140 <__udivsi3>
 80033a6:	0003      	movs	r3, r0
 80033a8:	0019      	movs	r1, r3
 80033aa:	0020      	movs	r0, r4
 80033ac:	f7fc fec8 	bl	8000140 <__udivsi3>
 80033b0:	0003      	movs	r3, r0
 80033b2:	0018      	movs	r0, r3
 80033b4:	f000 f92f 	bl	8003616 <HAL_SYSTICK_Config>
 80033b8:	1e03      	subs	r3, r0, #0
 80033ba:	d001      	beq.n	80033c0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e00f      	b.n	80033e0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b03      	cmp	r3, #3
 80033c4:	d80b      	bhi.n	80033de <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	2301      	movs	r3, #1
 80033ca:	425b      	negs	r3, r3
 80033cc:	2200      	movs	r2, #0
 80033ce:	0018      	movs	r0, r3
 80033d0:	f000 f8fc 	bl	80035cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033d4:	4b06      	ldr	r3, [pc, #24]	@ (80033f0 <HAL_InitTick+0x64>)
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	e000      	b.n	80033e0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
}
 80033e0:	0018      	movs	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b003      	add	sp, #12
 80033e6:	bd90      	pop	{r4, r7, pc}
 80033e8:	20000000 	.word	0x20000000
 80033ec:	20000008 	.word	0x20000008
 80033f0:	20000004 	.word	0x20000004

080033f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033f8:	4b05      	ldr	r3, [pc, #20]	@ (8003410 <HAL_IncTick+0x1c>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	001a      	movs	r2, r3
 80033fe:	4b05      	ldr	r3, [pc, #20]	@ (8003414 <HAL_IncTick+0x20>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	18d2      	adds	r2, r2, r3
 8003404:	4b03      	ldr	r3, [pc, #12]	@ (8003414 <HAL_IncTick+0x20>)
 8003406:	601a      	str	r2, [r3, #0]
}
 8003408:	46c0      	nop			@ (mov r8, r8)
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	46c0      	nop			@ (mov r8, r8)
 8003410:	20000008 	.word	0x20000008
 8003414:	20000348 	.word	0x20000348

08003418 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  return uwTick;
 800341c:	4b02      	ldr	r3, [pc, #8]	@ (8003428 <HAL_GetTick+0x10>)
 800341e:	681b      	ldr	r3, [r3, #0]
}
 8003420:	0018      	movs	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	46c0      	nop			@ (mov r8, r8)
 8003428:	20000348 	.word	0x20000348

0800342c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003434:	f7ff fff0 	bl	8003418 <HAL_GetTick>
 8003438:	0003      	movs	r3, r0
 800343a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	3301      	adds	r3, #1
 8003444:	d005      	beq.n	8003452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003446:	4b0a      	ldr	r3, [pc, #40]	@ (8003470 <HAL_Delay+0x44>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	001a      	movs	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	189b      	adds	r3, r3, r2
 8003450:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003452:	46c0      	nop			@ (mov r8, r8)
 8003454:	f7ff ffe0 	bl	8003418 <HAL_GetTick>
 8003458:	0002      	movs	r2, r0
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	429a      	cmp	r2, r3
 8003462:	d8f7      	bhi.n	8003454 <HAL_Delay+0x28>
  {
  }
}
 8003464:	46c0      	nop			@ (mov r8, r8)
 8003466:	46c0      	nop			@ (mov r8, r8)
 8003468:	46bd      	mov	sp, r7
 800346a:	b004      	add	sp, #16
 800346c:	bd80      	pop	{r7, pc}
 800346e:	46c0      	nop			@ (mov r8, r8)
 8003470:	20000008 	.word	0x20000008

08003474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	0002      	movs	r2, r0
 800347c:	1dfb      	adds	r3, r7, #7
 800347e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003480:	1dfb      	adds	r3, r7, #7
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b7f      	cmp	r3, #127	@ 0x7f
 8003486:	d809      	bhi.n	800349c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003488:	1dfb      	adds	r3, r7, #7
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	001a      	movs	r2, r3
 800348e:	231f      	movs	r3, #31
 8003490:	401a      	ands	r2, r3
 8003492:	4b04      	ldr	r3, [pc, #16]	@ (80034a4 <__NVIC_EnableIRQ+0x30>)
 8003494:	2101      	movs	r1, #1
 8003496:	4091      	lsls	r1, r2
 8003498:	000a      	movs	r2, r1
 800349a:	601a      	str	r2, [r3, #0]
  }
}
 800349c:	46c0      	nop			@ (mov r8, r8)
 800349e:	46bd      	mov	sp, r7
 80034a0:	b002      	add	sp, #8
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	e000e100 	.word	0xe000e100

080034a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034a8:	b590      	push	{r4, r7, lr}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	0002      	movs	r2, r0
 80034b0:	6039      	str	r1, [r7, #0]
 80034b2:	1dfb      	adds	r3, r7, #7
 80034b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80034b6:	1dfb      	adds	r3, r7, #7
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80034bc:	d828      	bhi.n	8003510 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034be:	4a2f      	ldr	r2, [pc, #188]	@ (800357c <__NVIC_SetPriority+0xd4>)
 80034c0:	1dfb      	adds	r3, r7, #7
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	b25b      	sxtb	r3, r3
 80034c6:	089b      	lsrs	r3, r3, #2
 80034c8:	33c0      	adds	r3, #192	@ 0xc0
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	589b      	ldr	r3, [r3, r2]
 80034ce:	1dfa      	adds	r2, r7, #7
 80034d0:	7812      	ldrb	r2, [r2, #0]
 80034d2:	0011      	movs	r1, r2
 80034d4:	2203      	movs	r2, #3
 80034d6:	400a      	ands	r2, r1
 80034d8:	00d2      	lsls	r2, r2, #3
 80034da:	21ff      	movs	r1, #255	@ 0xff
 80034dc:	4091      	lsls	r1, r2
 80034de:	000a      	movs	r2, r1
 80034e0:	43d2      	mvns	r2, r2
 80034e2:	401a      	ands	r2, r3
 80034e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	019b      	lsls	r3, r3, #6
 80034ea:	22ff      	movs	r2, #255	@ 0xff
 80034ec:	401a      	ands	r2, r3
 80034ee:	1dfb      	adds	r3, r7, #7
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	0018      	movs	r0, r3
 80034f4:	2303      	movs	r3, #3
 80034f6:	4003      	ands	r3, r0
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034fc:	481f      	ldr	r0, [pc, #124]	@ (800357c <__NVIC_SetPriority+0xd4>)
 80034fe:	1dfb      	adds	r3, r7, #7
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	b25b      	sxtb	r3, r3
 8003504:	089b      	lsrs	r3, r3, #2
 8003506:	430a      	orrs	r2, r1
 8003508:	33c0      	adds	r3, #192	@ 0xc0
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800350e:	e031      	b.n	8003574 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003510:	4a1b      	ldr	r2, [pc, #108]	@ (8003580 <__NVIC_SetPriority+0xd8>)
 8003512:	1dfb      	adds	r3, r7, #7
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	0019      	movs	r1, r3
 8003518:	230f      	movs	r3, #15
 800351a:	400b      	ands	r3, r1
 800351c:	3b08      	subs	r3, #8
 800351e:	089b      	lsrs	r3, r3, #2
 8003520:	3306      	adds	r3, #6
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	18d3      	adds	r3, r2, r3
 8003526:	3304      	adds	r3, #4
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	1dfa      	adds	r2, r7, #7
 800352c:	7812      	ldrb	r2, [r2, #0]
 800352e:	0011      	movs	r1, r2
 8003530:	2203      	movs	r2, #3
 8003532:	400a      	ands	r2, r1
 8003534:	00d2      	lsls	r2, r2, #3
 8003536:	21ff      	movs	r1, #255	@ 0xff
 8003538:	4091      	lsls	r1, r2
 800353a:	000a      	movs	r2, r1
 800353c:	43d2      	mvns	r2, r2
 800353e:	401a      	ands	r2, r3
 8003540:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	019b      	lsls	r3, r3, #6
 8003546:	22ff      	movs	r2, #255	@ 0xff
 8003548:	401a      	ands	r2, r3
 800354a:	1dfb      	adds	r3, r7, #7
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	0018      	movs	r0, r3
 8003550:	2303      	movs	r3, #3
 8003552:	4003      	ands	r3, r0
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003558:	4809      	ldr	r0, [pc, #36]	@ (8003580 <__NVIC_SetPriority+0xd8>)
 800355a:	1dfb      	adds	r3, r7, #7
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	001c      	movs	r4, r3
 8003560:	230f      	movs	r3, #15
 8003562:	4023      	ands	r3, r4
 8003564:	3b08      	subs	r3, #8
 8003566:	089b      	lsrs	r3, r3, #2
 8003568:	430a      	orrs	r2, r1
 800356a:	3306      	adds	r3, #6
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	18c3      	adds	r3, r0, r3
 8003570:	3304      	adds	r3, #4
 8003572:	601a      	str	r2, [r3, #0]
}
 8003574:	46c0      	nop			@ (mov r8, r8)
 8003576:	46bd      	mov	sp, r7
 8003578:	b003      	add	sp, #12
 800357a:	bd90      	pop	{r4, r7, pc}
 800357c:	e000e100 	.word	0xe000e100
 8003580:	e000ed00 	.word	0xe000ed00

08003584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	1e5a      	subs	r2, r3, #1
 8003590:	2380      	movs	r3, #128	@ 0x80
 8003592:	045b      	lsls	r3, r3, #17
 8003594:	429a      	cmp	r2, r3
 8003596:	d301      	bcc.n	800359c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003598:	2301      	movs	r3, #1
 800359a:	e010      	b.n	80035be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800359c:	4b0a      	ldr	r3, [pc, #40]	@ (80035c8 <SysTick_Config+0x44>)
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	3a01      	subs	r2, #1
 80035a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035a4:	2301      	movs	r3, #1
 80035a6:	425b      	negs	r3, r3
 80035a8:	2103      	movs	r1, #3
 80035aa:	0018      	movs	r0, r3
 80035ac:	f7ff ff7c 	bl	80034a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035b0:	4b05      	ldr	r3, [pc, #20]	@ (80035c8 <SysTick_Config+0x44>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035b6:	4b04      	ldr	r3, [pc, #16]	@ (80035c8 <SysTick_Config+0x44>)
 80035b8:	2207      	movs	r2, #7
 80035ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035bc:	2300      	movs	r3, #0
}
 80035be:	0018      	movs	r0, r3
 80035c0:	46bd      	mov	sp, r7
 80035c2:	b002      	add	sp, #8
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	46c0      	nop			@ (mov r8, r8)
 80035c8:	e000e010 	.word	0xe000e010

080035cc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
 80035d6:	210f      	movs	r1, #15
 80035d8:	187b      	adds	r3, r7, r1
 80035da:	1c02      	adds	r2, r0, #0
 80035dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	187b      	adds	r3, r7, r1
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	b25b      	sxtb	r3, r3
 80035e6:	0011      	movs	r1, r2
 80035e8:	0018      	movs	r0, r3
 80035ea:	f7ff ff5d 	bl	80034a8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80035ee:	46c0      	nop			@ (mov r8, r8)
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b004      	add	sp, #16
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b082      	sub	sp, #8
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	0002      	movs	r2, r0
 80035fe:	1dfb      	adds	r3, r7, #7
 8003600:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003602:	1dfb      	adds	r3, r7, #7
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	b25b      	sxtb	r3, r3
 8003608:	0018      	movs	r0, r3
 800360a:	f7ff ff33 	bl	8003474 <__NVIC_EnableIRQ>
}
 800360e:	46c0      	nop			@ (mov r8, r8)
 8003610:	46bd      	mov	sp, r7
 8003612:	b002      	add	sp, #8
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b082      	sub	sp, #8
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	0018      	movs	r0, r3
 8003622:	f7ff ffaf 	bl	8003584 <SysTick_Config>
 8003626:	0003      	movs	r3, r0
}
 8003628:	0018      	movs	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	b002      	add	sp, #8
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e036      	b.n	80036b4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2221      	movs	r2, #33	@ 0x21
 800364a:	2102      	movs	r1, #2
 800364c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4a18      	ldr	r2, [pc, #96]	@ (80036bc <HAL_DMA_Init+0x8c>)
 800365a:	4013      	ands	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003666:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003672:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800367e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	4313      	orrs	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	0018      	movs	r0, r3
 8003698:	f000 f8b4 	bl	8003804 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2221      	movs	r2, #33	@ 0x21
 80036a6:	2101      	movs	r1, #1
 80036a8:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	2100      	movs	r1, #0
 80036b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b004      	add	sp, #16
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	ffffc00f 	.word	0xffffc00f

080036c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036dc:	2204      	movs	r2, #4
 80036de:	409a      	lsls	r2, r3
 80036e0:	0013      	movs	r3, r2
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	4013      	ands	r3, r2
 80036e6:	d024      	beq.n	8003732 <HAL_DMA_IRQHandler+0x72>
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2204      	movs	r2, #4
 80036ec:	4013      	ands	r3, r2
 80036ee:	d020      	beq.n	8003732 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2220      	movs	r2, #32
 80036f8:	4013      	ands	r3, r2
 80036fa:	d107      	bne.n	800370c <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2104      	movs	r1, #4
 8003708:	438a      	bics	r2, r1
 800370a:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003714:	2104      	movs	r1, #4
 8003716:	4091      	lsls	r1, r2
 8003718:	000a      	movs	r2, r1
 800371a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003720:	2b00      	cmp	r3, #0
 8003722:	d100      	bne.n	8003726 <HAL_DMA_IRQHandler+0x66>
 8003724:	e06a      	b.n	80037fc <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	0010      	movs	r0, r2
 800372e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003730:	e064      	b.n	80037fc <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003736:	2202      	movs	r2, #2
 8003738:	409a      	lsls	r2, r3
 800373a:	0013      	movs	r3, r2
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4013      	ands	r3, r2
 8003740:	d02b      	beq.n	800379a <HAL_DMA_IRQHandler+0xda>
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2202      	movs	r2, #2
 8003746:	4013      	ands	r3, r2
 8003748:	d027      	beq.n	800379a <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2220      	movs	r2, #32
 8003752:	4013      	ands	r3, r2
 8003754:	d10b      	bne.n	800376e <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	210a      	movs	r1, #10
 8003762:	438a      	bics	r2, r1
 8003764:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2221      	movs	r2, #33	@ 0x21
 800376a:	2101      	movs	r1, #1
 800376c:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003776:	2102      	movs	r1, #2
 8003778:	4091      	lsls	r1, r2
 800377a:	000a      	movs	r2, r1
 800377c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2220      	movs	r2, #32
 8003782:	2100      	movs	r1, #0
 8003784:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378a:	2b00      	cmp	r3, #0
 800378c:	d036      	beq.n	80037fc <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	0010      	movs	r0, r2
 8003796:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003798:	e030      	b.n	80037fc <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379e:	2208      	movs	r2, #8
 80037a0:	409a      	lsls	r2, r3
 80037a2:	0013      	movs	r3, r2
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4013      	ands	r3, r2
 80037a8:	d028      	beq.n	80037fc <HAL_DMA_IRQHandler+0x13c>
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	2208      	movs	r2, #8
 80037ae:	4013      	ands	r3, r2
 80037b0:	d024      	beq.n	80037fc <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	210e      	movs	r1, #14
 80037be:	438a      	bics	r2, r1
 80037c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ca:	2101      	movs	r1, #1
 80037cc:	4091      	lsls	r1, r2
 80037ce:	000a      	movs	r2, r1
 80037d0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2221      	movs	r2, #33	@ 0x21
 80037dc:	2101      	movs	r1, #1
 80037de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	2100      	movs	r1, #0
 80037e6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	0010      	movs	r0, r2
 80037f8:	4798      	blx	r3
    }
  }
}
 80037fa:	e7ff      	b.n	80037fc <HAL_DMA_IRQHandler+0x13c>
 80037fc:	46c0      	nop			@ (mov r8, r8)
 80037fe:	46bd      	mov	sp, r7
 8003800:	b004      	add	sp, #16
 8003802:	bd80      	pop	{r7, pc}

08003804 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a08      	ldr	r2, [pc, #32]	@ (8003834 <DMA_CalcBaseAndBitshift+0x30>)
 8003812:	4694      	mov	ip, r2
 8003814:	4463      	add	r3, ip
 8003816:	2114      	movs	r1, #20
 8003818:	0018      	movs	r0, r3
 800381a:	f7fc fc91 	bl	8000140 <__udivsi3>
 800381e:	0003      	movs	r3, r0
 8003820:	009a      	lsls	r2, r3, #2
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a03      	ldr	r2, [pc, #12]	@ (8003838 <DMA_CalcBaseAndBitshift+0x34>)
 800382a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 800382c:	46c0      	nop			@ (mov r8, r8)
 800382e:	46bd      	mov	sp, r7
 8003830:	b002      	add	sp, #8
 8003832:	bd80      	pop	{r7, pc}
 8003834:	bffdfff8 	.word	0xbffdfff8
 8003838:	40020000 	.word	0x40020000

0800383c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003846:	2300      	movs	r3, #0
 8003848:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800384a:	e14f      	b.n	8003aec <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2101      	movs	r1, #1
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4091      	lsls	r1, r2
 8003856:	000a      	movs	r2, r1
 8003858:	4013      	ands	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d100      	bne.n	8003864 <HAL_GPIO_Init+0x28>
 8003862:	e140      	b.n	8003ae6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2203      	movs	r2, #3
 800386a:	4013      	ands	r3, r2
 800386c:	2b01      	cmp	r3, #1
 800386e:	d005      	beq.n	800387c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2203      	movs	r2, #3
 8003876:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003878:	2b02      	cmp	r3, #2
 800387a:	d130      	bne.n	80038de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	2203      	movs	r2, #3
 8003888:	409a      	lsls	r2, r3
 800388a:	0013      	movs	r3, r2
 800388c:	43da      	mvns	r2, r3
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	4013      	ands	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	409a      	lsls	r2, r3
 800389e:	0013      	movs	r3, r2
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038b2:	2201      	movs	r2, #1
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	409a      	lsls	r2, r3
 80038b8:	0013      	movs	r3, r2
 80038ba:	43da      	mvns	r2, r3
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	4013      	ands	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	091b      	lsrs	r3, r3, #4
 80038c8:	2201      	movs	r2, #1
 80038ca:	401a      	ands	r2, r3
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	409a      	lsls	r2, r3
 80038d0:	0013      	movs	r3, r2
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2203      	movs	r2, #3
 80038e4:	4013      	ands	r3, r2
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	d017      	beq.n	800391a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	2203      	movs	r2, #3
 80038f6:	409a      	lsls	r2, r3
 80038f8:	0013      	movs	r3, r2
 80038fa:	43da      	mvns	r2, r3
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4013      	ands	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	689a      	ldr	r2, [r3, #8]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	409a      	lsls	r2, r3
 800390c:	0013      	movs	r3, r2
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4313      	orrs	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2203      	movs	r2, #3
 8003920:	4013      	ands	r3, r2
 8003922:	2b02      	cmp	r3, #2
 8003924:	d123      	bne.n	800396e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	08da      	lsrs	r2, r3, #3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3208      	adds	r2, #8
 800392e:	0092      	lsls	r2, r2, #2
 8003930:	58d3      	ldr	r3, [r2, r3]
 8003932:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	2207      	movs	r2, #7
 8003938:	4013      	ands	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	220f      	movs	r2, #15
 800393e:	409a      	lsls	r2, r3
 8003940:	0013      	movs	r3, r2
 8003942:	43da      	mvns	r2, r3
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4013      	ands	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	691a      	ldr	r2, [r3, #16]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2107      	movs	r1, #7
 8003952:	400b      	ands	r3, r1
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	409a      	lsls	r2, r3
 8003958:	0013      	movs	r3, r2
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	08da      	lsrs	r2, r3, #3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3208      	adds	r2, #8
 8003968:	0092      	lsls	r2, r2, #2
 800396a:	6939      	ldr	r1, [r7, #16]
 800396c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	2203      	movs	r2, #3
 800397a:	409a      	lsls	r2, r3
 800397c:	0013      	movs	r3, r2
 800397e:	43da      	mvns	r2, r3
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4013      	ands	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2203      	movs	r2, #3
 800398c:	401a      	ands	r2, r3
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	409a      	lsls	r2, r3
 8003994:	0013      	movs	r3, r2
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	23c0      	movs	r3, #192	@ 0xc0
 80039a8:	029b      	lsls	r3, r3, #10
 80039aa:	4013      	ands	r3, r2
 80039ac:	d100      	bne.n	80039b0 <HAL_GPIO_Init+0x174>
 80039ae:	e09a      	b.n	8003ae6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b0:	4b54      	ldr	r3, [pc, #336]	@ (8003b04 <HAL_GPIO_Init+0x2c8>)
 80039b2:	699a      	ldr	r2, [r3, #24]
 80039b4:	4b53      	ldr	r3, [pc, #332]	@ (8003b04 <HAL_GPIO_Init+0x2c8>)
 80039b6:	2101      	movs	r1, #1
 80039b8:	430a      	orrs	r2, r1
 80039ba:	619a      	str	r2, [r3, #24]
 80039bc:	4b51      	ldr	r3, [pc, #324]	@ (8003b04 <HAL_GPIO_Init+0x2c8>)
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	2201      	movs	r2, #1
 80039c2:	4013      	ands	r3, r2
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039c8:	4a4f      	ldr	r2, [pc, #316]	@ (8003b08 <HAL_GPIO_Init+0x2cc>)
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	089b      	lsrs	r3, r3, #2
 80039ce:	3302      	adds	r3, #2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	589b      	ldr	r3, [r3, r2]
 80039d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2203      	movs	r2, #3
 80039da:	4013      	ands	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	220f      	movs	r2, #15
 80039e0:	409a      	lsls	r2, r3
 80039e2:	0013      	movs	r3, r2
 80039e4:	43da      	mvns	r2, r3
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	4013      	ands	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	2390      	movs	r3, #144	@ 0x90
 80039f0:	05db      	lsls	r3, r3, #23
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d013      	beq.n	8003a1e <HAL_GPIO_Init+0x1e2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a44      	ldr	r2, [pc, #272]	@ (8003b0c <HAL_GPIO_Init+0x2d0>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00d      	beq.n	8003a1a <HAL_GPIO_Init+0x1de>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a43      	ldr	r2, [pc, #268]	@ (8003b10 <HAL_GPIO_Init+0x2d4>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d007      	beq.n	8003a16 <HAL_GPIO_Init+0x1da>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a42      	ldr	r2, [pc, #264]	@ (8003b14 <HAL_GPIO_Init+0x2d8>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d101      	bne.n	8003a12 <HAL_GPIO_Init+0x1d6>
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e006      	b.n	8003a20 <HAL_GPIO_Init+0x1e4>
 8003a12:	2305      	movs	r3, #5
 8003a14:	e004      	b.n	8003a20 <HAL_GPIO_Init+0x1e4>
 8003a16:	2302      	movs	r3, #2
 8003a18:	e002      	b.n	8003a20 <HAL_GPIO_Init+0x1e4>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <HAL_GPIO_Init+0x1e4>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	2103      	movs	r1, #3
 8003a24:	400a      	ands	r2, r1
 8003a26:	0092      	lsls	r2, r2, #2
 8003a28:	4093      	lsls	r3, r2
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a30:	4935      	ldr	r1, [pc, #212]	@ (8003b08 <HAL_GPIO_Init+0x2cc>)
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	089b      	lsrs	r3, r3, #2
 8003a36:	3302      	adds	r3, #2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a3e:	4b36      	ldr	r3, [pc, #216]	@ (8003b18 <HAL_GPIO_Init+0x2dc>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	43da      	mvns	r2, r3
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	2380      	movs	r3, #128	@ 0x80
 8003a54:	035b      	lsls	r3, r3, #13
 8003a56:	4013      	ands	r3, r2
 8003a58:	d003      	beq.n	8003a62 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a62:	4b2d      	ldr	r3, [pc, #180]	@ (8003b18 <HAL_GPIO_Init+0x2dc>)
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003a68:	4b2b      	ldr	r3, [pc, #172]	@ (8003b18 <HAL_GPIO_Init+0x2dc>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	43da      	mvns	r2, r3
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	4013      	ands	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	2380      	movs	r3, #128	@ 0x80
 8003a7e:	039b      	lsls	r3, r3, #14
 8003a80:	4013      	ands	r3, r2
 8003a82:	d003      	beq.n	8003a8c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a8c:	4b22      	ldr	r3, [pc, #136]	@ (8003b18 <HAL_GPIO_Init+0x2dc>)
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003a92:	4b21      	ldr	r3, [pc, #132]	@ (8003b18 <HAL_GPIO_Init+0x2dc>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	43da      	mvns	r2, r3
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	2380      	movs	r3, #128	@ 0x80
 8003aa8:	029b      	lsls	r3, r3, #10
 8003aaa:	4013      	ands	r3, r2
 8003aac:	d003      	beq.n	8003ab6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003ab6:	4b18      	ldr	r3, [pc, #96]	@ (8003b18 <HAL_GPIO_Init+0x2dc>)
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003abc:	4b16      	ldr	r3, [pc, #88]	@ (8003b18 <HAL_GPIO_Init+0x2dc>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	43da      	mvns	r2, r3
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	2380      	movs	r3, #128	@ 0x80
 8003ad2:	025b      	lsls	r3, r3, #9
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	d003      	beq.n	8003ae0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8003b18 <HAL_GPIO_Init+0x2dc>)
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	40da      	lsrs	r2, r3
 8003af4:	1e13      	subs	r3, r2, #0
 8003af6:	d000      	beq.n	8003afa <HAL_GPIO_Init+0x2be>
 8003af8:	e6a8      	b.n	800384c <HAL_GPIO_Init+0x10>
  } 
}
 8003afa:	46c0      	nop			@ (mov r8, r8)
 8003afc:	46c0      	nop			@ (mov r8, r8)
 8003afe:	46bd      	mov	sp, r7
 8003b00:	b006      	add	sp, #24
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40021000 	.word	0x40021000
 8003b08:	40010000 	.word	0x40010000
 8003b0c:	48000400 	.word	0x48000400
 8003b10:	48000800 	.word	0x48000800
 8003b14:	48000c00 	.word	0x48000c00
 8003b18:	40010400 	.word	0x40010400

08003b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	0008      	movs	r0, r1
 8003b26:	0011      	movs	r1, r2
 8003b28:	1cbb      	adds	r3, r7, #2
 8003b2a:	1c02      	adds	r2, r0, #0
 8003b2c:	801a      	strh	r2, [r3, #0]
 8003b2e:	1c7b      	adds	r3, r7, #1
 8003b30:	1c0a      	adds	r2, r1, #0
 8003b32:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b34:	1c7b      	adds	r3, r7, #1
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d004      	beq.n	8003b46 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b3c:	1cbb      	adds	r3, r7, #2
 8003b3e:	881a      	ldrh	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b44:	e003      	b.n	8003b4e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b46:	1cbb      	adds	r3, r7, #2
 8003b48:	881a      	ldrh	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b4e:	46c0      	nop			@ (mov r8, r8)
 8003b50:	46bd      	mov	sp, r7
 8003b52:	b002      	add	sp, #8
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e08f      	b.n	8003c8a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2241      	movs	r2, #65	@ 0x41
 8003b6e:	5c9b      	ldrb	r3, [r3, r2]
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d107      	bne.n	8003b86 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2240      	movs	r2, #64	@ 0x40
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	0018      	movs	r0, r3
 8003b82:	f7ff fa33 	bl	8002fec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2241      	movs	r2, #65	@ 0x41
 8003b8a:	2124      	movs	r1, #36	@ 0x24
 8003b8c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2101      	movs	r1, #1
 8003b9a:	438a      	bics	r2, r1
 8003b9c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	493b      	ldr	r1, [pc, #236]	@ (8003c94 <HAL_I2C_Init+0x13c>)
 8003ba8:	400a      	ands	r2, r1
 8003baa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4938      	ldr	r1, [pc, #224]	@ (8003c98 <HAL_I2C_Init+0x140>)
 8003bb8:	400a      	ands	r2, r1
 8003bba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d108      	bne.n	8003bd6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2180      	movs	r1, #128	@ 0x80
 8003bce:	0209      	lsls	r1, r1, #8
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	609a      	str	r2, [r3, #8]
 8003bd4:	e007      	b.n	8003be6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2184      	movs	r1, #132	@ 0x84
 8003be0:	0209      	lsls	r1, r1, #8
 8003be2:	430a      	orrs	r2, r1
 8003be4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d109      	bne.n	8003c02 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2180      	movs	r1, #128	@ 0x80
 8003bfa:	0109      	lsls	r1, r1, #4
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	605a      	str	r2, [r3, #4]
 8003c00:	e007      	b.n	8003c12 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4923      	ldr	r1, [pc, #140]	@ (8003c9c <HAL_I2C_Init+0x144>)
 8003c0e:	400a      	ands	r2, r1
 8003c10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4920      	ldr	r1, [pc, #128]	@ (8003ca0 <HAL_I2C_Init+0x148>)
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	491a      	ldr	r1, [pc, #104]	@ (8003c98 <HAL_I2C_Init+0x140>)
 8003c2e:	400a      	ands	r2, r1
 8003c30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691a      	ldr	r2, [r3, #16]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	69d9      	ldr	r1, [r3, #28]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a1a      	ldr	r2, [r3, #32]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2101      	movs	r1, #1
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2241      	movs	r2, #65	@ 0x41
 8003c76:	2120      	movs	r1, #32
 8003c78:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2242      	movs	r2, #66	@ 0x42
 8003c84:	2100      	movs	r1, #0
 8003c86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b002      	add	sp, #8
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	46c0      	nop			@ (mov r8, r8)
 8003c94:	f0ffffff 	.word	0xf0ffffff
 8003c98:	ffff7fff 	.word	0xffff7fff
 8003c9c:	fffff7ff 	.word	0xfffff7ff
 8003ca0:	02008000 	.word	0x02008000

08003ca4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ca4:	b590      	push	{r4, r7, lr}
 8003ca6:	b089      	sub	sp, #36	@ 0x24
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	000c      	movs	r4, r1
 8003cae:	0010      	movs	r0, r2
 8003cb0:	0019      	movs	r1, r3
 8003cb2:	230a      	movs	r3, #10
 8003cb4:	18fb      	adds	r3, r7, r3
 8003cb6:	1c22      	adds	r2, r4, #0
 8003cb8:	801a      	strh	r2, [r3, #0]
 8003cba:	2308      	movs	r3, #8
 8003cbc:	18fb      	adds	r3, r7, r3
 8003cbe:	1c02      	adds	r2, r0, #0
 8003cc0:	801a      	strh	r2, [r3, #0]
 8003cc2:	1dbb      	adds	r3, r7, #6
 8003cc4:	1c0a      	adds	r2, r1, #0
 8003cc6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2241      	movs	r2, #65	@ 0x41
 8003ccc:	5c9b      	ldrb	r3, [r3, r2]
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b20      	cmp	r3, #32
 8003cd2:	d000      	beq.n	8003cd6 <HAL_I2C_Mem_Write+0x32>
 8003cd4:	e10c      	b.n	8003ef0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d004      	beq.n	8003ce6 <HAL_I2C_Mem_Write+0x42>
 8003cdc:	232c      	movs	r3, #44	@ 0x2c
 8003cde:	18fb      	adds	r3, r7, r3
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d105      	bne.n	8003cf2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2280      	movs	r2, #128	@ 0x80
 8003cea:	0092      	lsls	r2, r2, #2
 8003cec:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e0ff      	b.n	8003ef2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2240      	movs	r2, #64	@ 0x40
 8003cf6:	5c9b      	ldrb	r3, [r3, r2]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_I2C_Mem_Write+0x5c>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e0f8      	b.n	8003ef2 <HAL_I2C_Mem_Write+0x24e>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2240      	movs	r2, #64	@ 0x40
 8003d04:	2101      	movs	r1, #1
 8003d06:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d08:	f7ff fb86 	bl	8003418 <HAL_GetTick>
 8003d0c:	0003      	movs	r3, r0
 8003d0e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d10:	2380      	movs	r3, #128	@ 0x80
 8003d12:	0219      	lsls	r1, r3, #8
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	2319      	movs	r3, #25
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f000 fb0b 	bl	8004338 <I2C_WaitOnFlagUntilTimeout>
 8003d22:	1e03      	subs	r3, r0, #0
 8003d24:	d001      	beq.n	8003d2a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e0e3      	b.n	8003ef2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2241      	movs	r2, #65	@ 0x41
 8003d2e:	2121      	movs	r1, #33	@ 0x21
 8003d30:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2242      	movs	r2, #66	@ 0x42
 8003d36:	2140      	movs	r1, #64	@ 0x40
 8003d38:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	222c      	movs	r2, #44	@ 0x2c
 8003d4a:	18ba      	adds	r2, r7, r2
 8003d4c:	8812      	ldrh	r2, [r2, #0]
 8003d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d56:	1dbb      	adds	r3, r7, #6
 8003d58:	881c      	ldrh	r4, [r3, #0]
 8003d5a:	2308      	movs	r3, #8
 8003d5c:	18fb      	adds	r3, r7, r3
 8003d5e:	881a      	ldrh	r2, [r3, #0]
 8003d60:	230a      	movs	r3, #10
 8003d62:	18fb      	adds	r3, r7, r3
 8003d64:	8819      	ldrh	r1, [r3, #0]
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	9301      	str	r3, [sp, #4]
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	0023      	movs	r3, r4
 8003d72:	f000 f9f9 	bl	8004168 <I2C_RequestMemoryWrite>
 8003d76:	1e03      	subs	r3, r0, #0
 8003d78:	d005      	beq.n	8003d86 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2240      	movs	r2, #64	@ 0x40
 8003d7e:	2100      	movs	r1, #0
 8003d80:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e0b5      	b.n	8003ef2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2bff      	cmp	r3, #255	@ 0xff
 8003d8e:	d911      	bls.n	8003db4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	22ff      	movs	r2, #255	@ 0xff
 8003d94:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	2380      	movs	r3, #128	@ 0x80
 8003d9e:	045c      	lsls	r4, r3, #17
 8003da0:	230a      	movs	r3, #10
 8003da2:	18fb      	adds	r3, r7, r3
 8003da4:	8819      	ldrh	r1, [r3, #0]
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	2300      	movs	r3, #0
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	0023      	movs	r3, r4
 8003dae:	f000 fc9d 	bl	80046ec <I2C_TransferConfig>
 8003db2:	e012      	b.n	8003dda <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	2380      	movs	r3, #128	@ 0x80
 8003dc6:	049c      	lsls	r4, r3, #18
 8003dc8:	230a      	movs	r3, #10
 8003dca:	18fb      	adds	r3, r7, r3
 8003dcc:	8819      	ldrh	r1, [r3, #0]
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	0023      	movs	r3, r4
 8003dd6:	f000 fc89 	bl	80046ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	0018      	movs	r0, r3
 8003de2:	f000 fb01 	bl	80043e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003de6:	1e03      	subs	r3, r0, #0
 8003de8:	d001      	beq.n	8003dee <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e081      	b.n	8003ef2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df2:	781a      	ldrb	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d03a      	beq.n	8003e9e <HAL_I2C_Mem_Write+0x1fa>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d136      	bne.n	8003e9e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	0013      	movs	r3, r2
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2180      	movs	r1, #128	@ 0x80
 8003e3e:	f000 fa7b 	bl	8004338 <I2C_WaitOnFlagUntilTimeout>
 8003e42:	1e03      	subs	r3, r0, #0
 8003e44:	d001      	beq.n	8003e4a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e053      	b.n	8003ef2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	2bff      	cmp	r3, #255	@ 0xff
 8003e52:	d911      	bls.n	8003e78 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	22ff      	movs	r2, #255	@ 0xff
 8003e58:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	2380      	movs	r3, #128	@ 0x80
 8003e62:	045c      	lsls	r4, r3, #17
 8003e64:	230a      	movs	r3, #10
 8003e66:	18fb      	adds	r3, r7, r3
 8003e68:	8819      	ldrh	r1, [r3, #0]
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	0023      	movs	r3, r4
 8003e72:	f000 fc3b 	bl	80046ec <I2C_TransferConfig>
 8003e76:	e012      	b.n	8003e9e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	2380      	movs	r3, #128	@ 0x80
 8003e8a:	049c      	lsls	r4, r3, #18
 8003e8c:	230a      	movs	r3, #10
 8003e8e:	18fb      	adds	r3, r7, r3
 8003e90:	8819      	ldrh	r1, [r3, #0]
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	2300      	movs	r3, #0
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	0023      	movs	r3, r4
 8003e9a:	f000 fc27 	bl	80046ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d198      	bne.n	8003dda <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f000 fae0 	bl	8004474 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003eb4:	1e03      	subs	r3, r0, #0
 8003eb6:	d001      	beq.n	8003ebc <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e01a      	b.n	8003ef2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	490b      	ldr	r1, [pc, #44]	@ (8003efc <HAL_I2C_Mem_Write+0x258>)
 8003ed0:	400a      	ands	r2, r1
 8003ed2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2241      	movs	r2, #65	@ 0x41
 8003ed8:	2120      	movs	r1, #32
 8003eda:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2242      	movs	r2, #66	@ 0x42
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2240      	movs	r2, #64	@ 0x40
 8003ee8:	2100      	movs	r1, #0
 8003eea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003eec:	2300      	movs	r3, #0
 8003eee:	e000      	b.n	8003ef2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003ef0:	2302      	movs	r3, #2
  }
}
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b007      	add	sp, #28
 8003ef8:	bd90      	pop	{r4, r7, pc}
 8003efa:	46c0      	nop			@ (mov r8, r8)
 8003efc:	fe00e800 	.word	0xfe00e800

08003f00 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f00:	b590      	push	{r4, r7, lr}
 8003f02:	b089      	sub	sp, #36	@ 0x24
 8003f04:	af02      	add	r7, sp, #8
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	000c      	movs	r4, r1
 8003f0a:	0010      	movs	r0, r2
 8003f0c:	0019      	movs	r1, r3
 8003f0e:	230a      	movs	r3, #10
 8003f10:	18fb      	adds	r3, r7, r3
 8003f12:	1c22      	adds	r2, r4, #0
 8003f14:	801a      	strh	r2, [r3, #0]
 8003f16:	2308      	movs	r3, #8
 8003f18:	18fb      	adds	r3, r7, r3
 8003f1a:	1c02      	adds	r2, r0, #0
 8003f1c:	801a      	strh	r2, [r3, #0]
 8003f1e:	1dbb      	adds	r3, r7, #6
 8003f20:	1c0a      	adds	r2, r1, #0
 8003f22:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2241      	movs	r2, #65	@ 0x41
 8003f28:	5c9b      	ldrb	r3, [r3, r2]
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	d000      	beq.n	8003f32 <HAL_I2C_Mem_Read+0x32>
 8003f30:	e110      	b.n	8004154 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d004      	beq.n	8003f42 <HAL_I2C_Mem_Read+0x42>
 8003f38:	232c      	movs	r3, #44	@ 0x2c
 8003f3a:	18fb      	adds	r3, r7, r3
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d105      	bne.n	8003f4e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2280      	movs	r2, #128	@ 0x80
 8003f46:	0092      	lsls	r2, r2, #2
 8003f48:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e103      	b.n	8004156 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2240      	movs	r2, #64	@ 0x40
 8003f52:	5c9b      	ldrb	r3, [r3, r2]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d101      	bne.n	8003f5c <HAL_I2C_Mem_Read+0x5c>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	e0fc      	b.n	8004156 <HAL_I2C_Mem_Read+0x256>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2240      	movs	r2, #64	@ 0x40
 8003f60:	2101      	movs	r1, #1
 8003f62:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f64:	f7ff fa58 	bl	8003418 <HAL_GetTick>
 8003f68:	0003      	movs	r3, r0
 8003f6a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f6c:	2380      	movs	r3, #128	@ 0x80
 8003f6e:	0219      	lsls	r1, r3, #8
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	2319      	movs	r3, #25
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f000 f9dd 	bl	8004338 <I2C_WaitOnFlagUntilTimeout>
 8003f7e:	1e03      	subs	r3, r0, #0
 8003f80:	d001      	beq.n	8003f86 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e0e7      	b.n	8004156 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2241      	movs	r2, #65	@ 0x41
 8003f8a:	2122      	movs	r1, #34	@ 0x22
 8003f8c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2242      	movs	r2, #66	@ 0x42
 8003f92:	2140      	movs	r1, #64	@ 0x40
 8003f94:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fa0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	222c      	movs	r2, #44	@ 0x2c
 8003fa6:	18ba      	adds	r2, r7, r2
 8003fa8:	8812      	ldrh	r2, [r2, #0]
 8003faa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fb2:	1dbb      	adds	r3, r7, #6
 8003fb4:	881c      	ldrh	r4, [r3, #0]
 8003fb6:	2308      	movs	r3, #8
 8003fb8:	18fb      	adds	r3, r7, r3
 8003fba:	881a      	ldrh	r2, [r3, #0]
 8003fbc:	230a      	movs	r3, #10
 8003fbe:	18fb      	adds	r3, r7, r3
 8003fc0:	8819      	ldrh	r1, [r3, #0]
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	9301      	str	r3, [sp, #4]
 8003fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	0023      	movs	r3, r4
 8003fce:	f000 f92f 	bl	8004230 <I2C_RequestMemoryRead>
 8003fd2:	1e03      	subs	r3, r0, #0
 8003fd4:	d005      	beq.n	8003fe2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2240      	movs	r2, #64	@ 0x40
 8003fda:	2100      	movs	r1, #0
 8003fdc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e0b9      	b.n	8004156 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	2bff      	cmp	r3, #255	@ 0xff
 8003fea:	d911      	bls.n	8004010 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	2380      	movs	r3, #128	@ 0x80
 8003ffa:	045c      	lsls	r4, r3, #17
 8003ffc:	230a      	movs	r3, #10
 8003ffe:	18fb      	adds	r3, r7, r3
 8004000:	8819      	ldrh	r1, [r3, #0]
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	4b56      	ldr	r3, [pc, #344]	@ (8004160 <HAL_I2C_Mem_Read+0x260>)
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	0023      	movs	r3, r4
 800400a:	f000 fb6f 	bl	80046ec <I2C_TransferConfig>
 800400e:	e012      	b.n	8004036 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800401e:	b2da      	uxtb	r2, r3
 8004020:	2380      	movs	r3, #128	@ 0x80
 8004022:	049c      	lsls	r4, r3, #18
 8004024:	230a      	movs	r3, #10
 8004026:	18fb      	adds	r3, r7, r3
 8004028:	8819      	ldrh	r1, [r3, #0]
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	4b4c      	ldr	r3, [pc, #304]	@ (8004160 <HAL_I2C_Mem_Read+0x260>)
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	0023      	movs	r3, r4
 8004032:	f000 fb5b 	bl	80046ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004036:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	0013      	movs	r3, r2
 8004040:	2200      	movs	r2, #0
 8004042:	2104      	movs	r1, #4
 8004044:	f000 f978 	bl	8004338 <I2C_WaitOnFlagUntilTimeout>
 8004048:	1e03      	subs	r3, r0, #0
 800404a:	d001      	beq.n	8004050 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e082      	b.n	8004156 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004062:	1c5a      	adds	r2, r3, #1
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004078:	b29b      	uxth	r3, r3
 800407a:	3b01      	subs	r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004086:	b29b      	uxth	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d03a      	beq.n	8004102 <HAL_I2C_Mem_Read+0x202>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004090:	2b00      	cmp	r3, #0
 8004092:	d136      	bne.n	8004102 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004094:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	0013      	movs	r3, r2
 800409e:	2200      	movs	r2, #0
 80040a0:	2180      	movs	r1, #128	@ 0x80
 80040a2:	f000 f949 	bl	8004338 <I2C_WaitOnFlagUntilTimeout>
 80040a6:	1e03      	subs	r3, r0, #0
 80040a8:	d001      	beq.n	80040ae <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e053      	b.n	8004156 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	2bff      	cmp	r3, #255	@ 0xff
 80040b6:	d911      	bls.n	80040dc <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2201      	movs	r2, #1
 80040bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	2380      	movs	r3, #128	@ 0x80
 80040c6:	045c      	lsls	r4, r3, #17
 80040c8:	230a      	movs	r3, #10
 80040ca:	18fb      	adds	r3, r7, r3
 80040cc:	8819      	ldrh	r1, [r3, #0]
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	2300      	movs	r3, #0
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	0023      	movs	r3, r4
 80040d6:	f000 fb09 	bl	80046ec <I2C_TransferConfig>
 80040da:	e012      	b.n	8004102 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	2380      	movs	r3, #128	@ 0x80
 80040ee:	049c      	lsls	r4, r3, #18
 80040f0:	230a      	movs	r3, #10
 80040f2:	18fb      	adds	r3, r7, r3
 80040f4:	8819      	ldrh	r1, [r3, #0]
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	2300      	movs	r3, #0
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	0023      	movs	r3, r4
 80040fe:	f000 faf5 	bl	80046ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004106:	b29b      	uxth	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d194      	bne.n	8004036 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	0018      	movs	r0, r3
 8004114:	f000 f9ae 	bl	8004474 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004118:	1e03      	subs	r3, r0, #0
 800411a:	d001      	beq.n	8004120 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e01a      	b.n	8004156 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2220      	movs	r2, #32
 8004126:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	490c      	ldr	r1, [pc, #48]	@ (8004164 <HAL_I2C_Mem_Read+0x264>)
 8004134:	400a      	ands	r2, r1
 8004136:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2241      	movs	r2, #65	@ 0x41
 800413c:	2120      	movs	r1, #32
 800413e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2242      	movs	r2, #66	@ 0x42
 8004144:	2100      	movs	r1, #0
 8004146:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2240      	movs	r2, #64	@ 0x40
 800414c:	2100      	movs	r1, #0
 800414e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004150:	2300      	movs	r3, #0
 8004152:	e000      	b.n	8004156 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004154:	2302      	movs	r3, #2
  }
}
 8004156:	0018      	movs	r0, r3
 8004158:	46bd      	mov	sp, r7
 800415a:	b007      	add	sp, #28
 800415c:	bd90      	pop	{r4, r7, pc}
 800415e:	46c0      	nop			@ (mov r8, r8)
 8004160:	80002400 	.word	0x80002400
 8004164:	fe00e800 	.word	0xfe00e800

08004168 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004168:	b5b0      	push	{r4, r5, r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af02      	add	r7, sp, #8
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	000c      	movs	r4, r1
 8004172:	0010      	movs	r0, r2
 8004174:	0019      	movs	r1, r3
 8004176:	250a      	movs	r5, #10
 8004178:	197b      	adds	r3, r7, r5
 800417a:	1c22      	adds	r2, r4, #0
 800417c:	801a      	strh	r2, [r3, #0]
 800417e:	2308      	movs	r3, #8
 8004180:	18fb      	adds	r3, r7, r3
 8004182:	1c02      	adds	r2, r0, #0
 8004184:	801a      	strh	r2, [r3, #0]
 8004186:	1dbb      	adds	r3, r7, #6
 8004188:	1c0a      	adds	r2, r1, #0
 800418a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800418c:	1dbb      	adds	r3, r7, #6
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	b2da      	uxtb	r2, r3
 8004192:	2380      	movs	r3, #128	@ 0x80
 8004194:	045c      	lsls	r4, r3, #17
 8004196:	197b      	adds	r3, r7, r5
 8004198:	8819      	ldrh	r1, [r3, #0]
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	4b23      	ldr	r3, [pc, #140]	@ (800422c <I2C_RequestMemoryWrite+0xc4>)
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	0023      	movs	r3, r4
 80041a2:	f000 faa3 	bl	80046ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041a8:	6a39      	ldr	r1, [r7, #32]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	0018      	movs	r0, r3
 80041ae:	f000 f91b 	bl	80043e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80041b2:	1e03      	subs	r3, r0, #0
 80041b4:	d001      	beq.n	80041ba <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e033      	b.n	8004222 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041ba:	1dbb      	adds	r3, r7, #6
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d107      	bne.n	80041d2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041c2:	2308      	movs	r3, #8
 80041c4:	18fb      	adds	r3, r7, r3
 80041c6:	881b      	ldrh	r3, [r3, #0]
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80041d0:	e019      	b.n	8004206 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041d2:	2308      	movs	r3, #8
 80041d4:	18fb      	adds	r3, r7, r3
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	0a1b      	lsrs	r3, r3, #8
 80041da:	b29b      	uxth	r3, r3
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e6:	6a39      	ldr	r1, [r7, #32]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	0018      	movs	r0, r3
 80041ec:	f000 f8fc 	bl	80043e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80041f0:	1e03      	subs	r3, r0, #0
 80041f2:	d001      	beq.n	80041f8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e014      	b.n	8004222 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041f8:	2308      	movs	r3, #8
 80041fa:	18fb      	adds	r3, r7, r3
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004206:	6a3a      	ldr	r2, [r7, #32]
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	0013      	movs	r3, r2
 8004210:	2200      	movs	r2, #0
 8004212:	2180      	movs	r1, #128	@ 0x80
 8004214:	f000 f890 	bl	8004338 <I2C_WaitOnFlagUntilTimeout>
 8004218:	1e03      	subs	r3, r0, #0
 800421a:	d001      	beq.n	8004220 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	0018      	movs	r0, r3
 8004224:	46bd      	mov	sp, r7
 8004226:	b004      	add	sp, #16
 8004228:	bdb0      	pop	{r4, r5, r7, pc}
 800422a:	46c0      	nop			@ (mov r8, r8)
 800422c:	80002000 	.word	0x80002000

08004230 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004230:	b5b0      	push	{r4, r5, r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af02      	add	r7, sp, #8
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	000c      	movs	r4, r1
 800423a:	0010      	movs	r0, r2
 800423c:	0019      	movs	r1, r3
 800423e:	250a      	movs	r5, #10
 8004240:	197b      	adds	r3, r7, r5
 8004242:	1c22      	adds	r2, r4, #0
 8004244:	801a      	strh	r2, [r3, #0]
 8004246:	2308      	movs	r3, #8
 8004248:	18fb      	adds	r3, r7, r3
 800424a:	1c02      	adds	r2, r0, #0
 800424c:	801a      	strh	r2, [r3, #0]
 800424e:	1dbb      	adds	r3, r7, #6
 8004250:	1c0a      	adds	r2, r1, #0
 8004252:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004254:	1dbb      	adds	r3, r7, #6
 8004256:	881b      	ldrh	r3, [r3, #0]
 8004258:	b2da      	uxtb	r2, r3
 800425a:	197b      	adds	r3, r7, r5
 800425c:	8819      	ldrh	r1, [r3, #0]
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	4b23      	ldr	r3, [pc, #140]	@ (80042f0 <I2C_RequestMemoryRead+0xc0>)
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	2300      	movs	r3, #0
 8004266:	f000 fa41 	bl	80046ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800426a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800426c:	6a39      	ldr	r1, [r7, #32]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	0018      	movs	r0, r3
 8004272:	f000 f8b9 	bl	80043e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004276:	1e03      	subs	r3, r0, #0
 8004278:	d001      	beq.n	800427e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e033      	b.n	80042e6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800427e:	1dbb      	adds	r3, r7, #6
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d107      	bne.n	8004296 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004286:	2308      	movs	r3, #8
 8004288:	18fb      	adds	r3, r7, r3
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	b2da      	uxtb	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	629a      	str	r2, [r3, #40]	@ 0x28
 8004294:	e019      	b.n	80042ca <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004296:	2308      	movs	r3, #8
 8004298:	18fb      	adds	r3, r7, r3
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	0a1b      	lsrs	r3, r3, #8
 800429e:	b29b      	uxth	r3, r3
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042aa:	6a39      	ldr	r1, [r7, #32]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	0018      	movs	r0, r3
 80042b0:	f000 f89a 	bl	80043e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80042b4:	1e03      	subs	r3, r0, #0
 80042b6:	d001      	beq.n	80042bc <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e014      	b.n	80042e6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042bc:	2308      	movs	r3, #8
 80042be:	18fb      	adds	r3, r7, r3
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80042ca:	6a3a      	ldr	r2, [r7, #32]
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	0013      	movs	r3, r2
 80042d4:	2200      	movs	r2, #0
 80042d6:	2140      	movs	r1, #64	@ 0x40
 80042d8:	f000 f82e 	bl	8004338 <I2C_WaitOnFlagUntilTimeout>
 80042dc:	1e03      	subs	r3, r0, #0
 80042de:	d001      	beq.n	80042e4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e000      	b.n	80042e6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	0018      	movs	r0, r3
 80042e8:	46bd      	mov	sp, r7
 80042ea:	b004      	add	sp, #16
 80042ec:	bdb0      	pop	{r4, r5, r7, pc}
 80042ee:	46c0      	nop			@ (mov r8, r8)
 80042f0:	80002000 	.word	0x80002000

080042f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	2202      	movs	r2, #2
 8004304:	4013      	ands	r3, r2
 8004306:	2b02      	cmp	r3, #2
 8004308:	d103      	bne.n	8004312 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2200      	movs	r2, #0
 8004310:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	2201      	movs	r2, #1
 800431a:	4013      	ands	r3, r2
 800431c:	2b01      	cmp	r3, #1
 800431e:	d007      	beq.n	8004330 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699a      	ldr	r2, [r3, #24]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2101      	movs	r1, #1
 800432c:	430a      	orrs	r2, r1
 800432e:	619a      	str	r2, [r3, #24]
  }
}
 8004330:	46c0      	nop			@ (mov r8, r8)
 8004332:	46bd      	mov	sp, r7
 8004334:	b002      	add	sp, #8
 8004336:	bd80      	pop	{r7, pc}

08004338 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	1dfb      	adds	r3, r7, #7
 8004346:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004348:	e03a      	b.n	80043c0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	6839      	ldr	r1, [r7, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	0018      	movs	r0, r3
 8004352:	f000 f8d3 	bl	80044fc <I2C_IsErrorOccurred>
 8004356:	1e03      	subs	r3, r0, #0
 8004358:	d001      	beq.n	800435e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e040      	b.n	80043e0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	3301      	adds	r3, #1
 8004362:	d02d      	beq.n	80043c0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004364:	f7ff f858 	bl	8003418 <HAL_GetTick>
 8004368:	0002      	movs	r2, r0
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	429a      	cmp	r2, r3
 8004372:	d302      	bcc.n	800437a <I2C_WaitOnFlagUntilTimeout+0x42>
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d122      	bne.n	80043c0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	4013      	ands	r3, r2
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	425a      	negs	r2, r3
 800438a:	4153      	adcs	r3, r2
 800438c:	b2db      	uxtb	r3, r3
 800438e:	001a      	movs	r2, r3
 8004390:	1dfb      	adds	r3, r7, #7
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d113      	bne.n	80043c0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800439c:	2220      	movs	r2, #32
 800439e:	431a      	orrs	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2241      	movs	r2, #65	@ 0x41
 80043a8:	2120      	movs	r1, #32
 80043aa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2242      	movs	r2, #66	@ 0x42
 80043b0:	2100      	movs	r1, #0
 80043b2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2240      	movs	r2, #64	@ 0x40
 80043b8:	2100      	movs	r1, #0
 80043ba:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e00f      	b.n	80043e0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	4013      	ands	r3, r2
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	425a      	negs	r2, r3
 80043d0:	4153      	adcs	r3, r2
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	001a      	movs	r2, r3
 80043d6:	1dfb      	adds	r3, r7, #7
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d0b5      	beq.n	800434a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	0018      	movs	r0, r3
 80043e2:	46bd      	mov	sp, r7
 80043e4:	b004      	add	sp, #16
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043f4:	e032      	b.n	800445c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	68b9      	ldr	r1, [r7, #8]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	0018      	movs	r0, r3
 80043fe:	f000 f87d 	bl	80044fc <I2C_IsErrorOccurred>
 8004402:	1e03      	subs	r3, r0, #0
 8004404:	d001      	beq.n	800440a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e030      	b.n	800446c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	3301      	adds	r3, #1
 800440e:	d025      	beq.n	800445c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004410:	f7ff f802 	bl	8003418 <HAL_GetTick>
 8004414:	0002      	movs	r2, r0
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	429a      	cmp	r2, r3
 800441e:	d302      	bcc.n	8004426 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d11a      	bne.n	800445c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	2202      	movs	r2, #2
 800442e:	4013      	ands	r3, r2
 8004430:	2b02      	cmp	r3, #2
 8004432:	d013      	beq.n	800445c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004438:	2220      	movs	r2, #32
 800443a:	431a      	orrs	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2241      	movs	r2, #65	@ 0x41
 8004444:	2120      	movs	r1, #32
 8004446:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2242      	movs	r2, #66	@ 0x42
 800444c:	2100      	movs	r1, #0
 800444e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2240      	movs	r2, #64	@ 0x40
 8004454:	2100      	movs	r1, #0
 8004456:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e007      	b.n	800446c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	2202      	movs	r2, #2
 8004464:	4013      	ands	r3, r2
 8004466:	2b02      	cmp	r3, #2
 8004468:	d1c5      	bne.n	80043f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	0018      	movs	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	b004      	add	sp, #16
 8004472:	bd80      	pop	{r7, pc}

08004474 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004480:	e02f      	b.n	80044e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	68b9      	ldr	r1, [r7, #8]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	0018      	movs	r0, r3
 800448a:	f000 f837 	bl	80044fc <I2C_IsErrorOccurred>
 800448e:	1e03      	subs	r3, r0, #0
 8004490:	d001      	beq.n	8004496 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e02d      	b.n	80044f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004496:	f7fe ffbf 	bl	8003418 <HAL_GetTick>
 800449a:	0002      	movs	r2, r0
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d302      	bcc.n	80044ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d11a      	bne.n	80044e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	2220      	movs	r2, #32
 80044b4:	4013      	ands	r3, r2
 80044b6:	2b20      	cmp	r3, #32
 80044b8:	d013      	beq.n	80044e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044be:	2220      	movs	r2, #32
 80044c0:	431a      	orrs	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2241      	movs	r2, #65	@ 0x41
 80044ca:	2120      	movs	r1, #32
 80044cc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2242      	movs	r2, #66	@ 0x42
 80044d2:	2100      	movs	r1, #0
 80044d4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2240      	movs	r2, #64	@ 0x40
 80044da:	2100      	movs	r1, #0
 80044dc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e007      	b.n	80044f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	2220      	movs	r2, #32
 80044ea:	4013      	ands	r3, r2
 80044ec:	2b20      	cmp	r3, #32
 80044ee:	d1c8      	bne.n	8004482 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	0018      	movs	r0, r3
 80044f4:	46bd      	mov	sp, r7
 80044f6:	b004      	add	sp, #16
 80044f8:	bd80      	pop	{r7, pc}
	...

080044fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b08a      	sub	sp, #40	@ 0x28
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004508:	2327      	movs	r3, #39	@ 0x27
 800450a:	18fb      	adds	r3, r7, r3
 800450c:	2200      	movs	r2, #0
 800450e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004518:	2300      	movs	r3, #0
 800451a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	2210      	movs	r2, #16
 8004524:	4013      	ands	r3, r2
 8004526:	d100      	bne.n	800452a <I2C_IsErrorOccurred+0x2e>
 8004528:	e079      	b.n	800461e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2210      	movs	r2, #16
 8004530:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004532:	e057      	b.n	80045e4 <I2C_IsErrorOccurred+0xe8>
 8004534:	2227      	movs	r2, #39	@ 0x27
 8004536:	18bb      	adds	r3, r7, r2
 8004538:	18ba      	adds	r2, r7, r2
 800453a:	7812      	ldrb	r2, [r2, #0]
 800453c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	3301      	adds	r3, #1
 8004542:	d04f      	beq.n	80045e4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004544:	f7fe ff68 	bl	8003418 <HAL_GetTick>
 8004548:	0002      	movs	r2, r0
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	429a      	cmp	r2, r3
 8004552:	d302      	bcc.n	800455a <I2C_IsErrorOccurred+0x5e>
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d144      	bne.n	80045e4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	2380      	movs	r3, #128	@ 0x80
 8004562:	01db      	lsls	r3, r3, #7
 8004564:	4013      	ands	r3, r2
 8004566:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004568:	2013      	movs	r0, #19
 800456a:	183b      	adds	r3, r7, r0
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	2142      	movs	r1, #66	@ 0x42
 8004570:	5c52      	ldrb	r2, [r2, r1]
 8004572:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699a      	ldr	r2, [r3, #24]
 800457a:	2380      	movs	r3, #128	@ 0x80
 800457c:	021b      	lsls	r3, r3, #8
 800457e:	401a      	ands	r2, r3
 8004580:	2380      	movs	r3, #128	@ 0x80
 8004582:	021b      	lsls	r3, r3, #8
 8004584:	429a      	cmp	r2, r3
 8004586:	d126      	bne.n	80045d6 <I2C_IsErrorOccurred+0xda>
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	2380      	movs	r3, #128	@ 0x80
 800458c:	01db      	lsls	r3, r3, #7
 800458e:	429a      	cmp	r2, r3
 8004590:	d021      	beq.n	80045d6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004592:	183b      	adds	r3, r7, r0
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	2b20      	cmp	r3, #32
 8004598:	d01d      	beq.n	80045d6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2180      	movs	r1, #128	@ 0x80
 80045a6:	01c9      	lsls	r1, r1, #7
 80045a8:	430a      	orrs	r2, r1
 80045aa:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80045ac:	f7fe ff34 	bl	8003418 <HAL_GetTick>
 80045b0:	0003      	movs	r3, r0
 80045b2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045b4:	e00f      	b.n	80045d6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80045b6:	f7fe ff2f 	bl	8003418 <HAL_GetTick>
 80045ba:	0002      	movs	r2, r0
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b19      	cmp	r3, #25
 80045c2:	d908      	bls.n	80045d6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	2220      	movs	r2, #32
 80045c8:	4313      	orrs	r3, r2
 80045ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80045cc:	2327      	movs	r3, #39	@ 0x27
 80045ce:	18fb      	adds	r3, r7, r3
 80045d0:	2201      	movs	r2, #1
 80045d2:	701a      	strb	r2, [r3, #0]

              break;
 80045d4:	e006      	b.n	80045e4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	2220      	movs	r2, #32
 80045de:	4013      	ands	r3, r2
 80045e0:	2b20      	cmp	r3, #32
 80045e2:	d1e8      	bne.n	80045b6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	2220      	movs	r2, #32
 80045ec:	4013      	ands	r3, r2
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	d004      	beq.n	80045fc <I2C_IsErrorOccurred+0x100>
 80045f2:	2327      	movs	r3, #39	@ 0x27
 80045f4:	18fb      	adds	r3, r7, r3
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d09b      	beq.n	8004534 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80045fc:	2327      	movs	r3, #39	@ 0x27
 80045fe:	18fb      	adds	r3, r7, r3
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d103      	bne.n	800460e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2220      	movs	r2, #32
 800460c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	2204      	movs	r2, #4
 8004612:	4313      	orrs	r3, r2
 8004614:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004616:	2327      	movs	r3, #39	@ 0x27
 8004618:	18fb      	adds	r3, r7, r3
 800461a:	2201      	movs	r2, #1
 800461c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	2380      	movs	r3, #128	@ 0x80
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	4013      	ands	r3, r2
 800462e:	d00c      	beq.n	800464a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	2201      	movs	r2, #1
 8004634:	4313      	orrs	r3, r2
 8004636:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2280      	movs	r2, #128	@ 0x80
 800463e:	0052      	lsls	r2, r2, #1
 8004640:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004642:	2327      	movs	r3, #39	@ 0x27
 8004644:	18fb      	adds	r3, r7, r3
 8004646:	2201      	movs	r2, #1
 8004648:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	2380      	movs	r3, #128	@ 0x80
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	4013      	ands	r3, r2
 8004652:	d00c      	beq.n	800466e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	2208      	movs	r2, #8
 8004658:	4313      	orrs	r3, r2
 800465a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2280      	movs	r2, #128	@ 0x80
 8004662:	00d2      	lsls	r2, r2, #3
 8004664:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004666:	2327      	movs	r3, #39	@ 0x27
 8004668:	18fb      	adds	r3, r7, r3
 800466a:	2201      	movs	r2, #1
 800466c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	2380      	movs	r3, #128	@ 0x80
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4013      	ands	r3, r2
 8004676:	d00c      	beq.n	8004692 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	2202      	movs	r2, #2
 800467c:	4313      	orrs	r3, r2
 800467e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2280      	movs	r2, #128	@ 0x80
 8004686:	0092      	lsls	r2, r2, #2
 8004688:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800468a:	2327      	movs	r3, #39	@ 0x27
 800468c:	18fb      	adds	r3, r7, r3
 800468e:	2201      	movs	r2, #1
 8004690:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004692:	2327      	movs	r3, #39	@ 0x27
 8004694:	18fb      	adds	r3, r7, r3
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d01d      	beq.n	80046d8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	0018      	movs	r0, r3
 80046a0:	f7ff fe28 	bl	80042f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	490e      	ldr	r1, [pc, #56]	@ (80046e8 <I2C_IsErrorOccurred+0x1ec>)
 80046b0:	400a      	ands	r2, r1
 80046b2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	431a      	orrs	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2241      	movs	r2, #65	@ 0x41
 80046c4:	2120      	movs	r1, #32
 80046c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2242      	movs	r2, #66	@ 0x42
 80046cc:	2100      	movs	r1, #0
 80046ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2240      	movs	r2, #64	@ 0x40
 80046d4:	2100      	movs	r1, #0
 80046d6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80046d8:	2327      	movs	r3, #39	@ 0x27
 80046da:	18fb      	adds	r3, r7, r3
 80046dc:	781b      	ldrb	r3, [r3, #0]
}
 80046de:	0018      	movs	r0, r3
 80046e0:	46bd      	mov	sp, r7
 80046e2:	b00a      	add	sp, #40	@ 0x28
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	46c0      	nop			@ (mov r8, r8)
 80046e8:	fe00e800 	.word	0xfe00e800

080046ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80046ec:	b590      	push	{r4, r7, lr}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	0008      	movs	r0, r1
 80046f6:	0011      	movs	r1, r2
 80046f8:	607b      	str	r3, [r7, #4]
 80046fa:	240a      	movs	r4, #10
 80046fc:	193b      	adds	r3, r7, r4
 80046fe:	1c02      	adds	r2, r0, #0
 8004700:	801a      	strh	r2, [r3, #0]
 8004702:	2009      	movs	r0, #9
 8004704:	183b      	adds	r3, r7, r0
 8004706:	1c0a      	adds	r2, r1, #0
 8004708:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800470a:	193b      	adds	r3, r7, r4
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	059b      	lsls	r3, r3, #22
 8004710:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004712:	183b      	adds	r3, r7, r0
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	0419      	lsls	r1, r3, #16
 8004718:	23ff      	movs	r3, #255	@ 0xff
 800471a:	041b      	lsls	r3, r3, #16
 800471c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800471e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004726:	4313      	orrs	r3, r2
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	085b      	lsrs	r3, r3, #1
 800472c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004736:	0d51      	lsrs	r1, r2, #21
 8004738:	2280      	movs	r2, #128	@ 0x80
 800473a:	00d2      	lsls	r2, r2, #3
 800473c:	400a      	ands	r2, r1
 800473e:	4907      	ldr	r1, [pc, #28]	@ (800475c <I2C_TransferConfig+0x70>)
 8004740:	430a      	orrs	r2, r1
 8004742:	43d2      	mvns	r2, r2
 8004744:	401a      	ands	r2, r3
 8004746:	0011      	movs	r1, r2
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	430a      	orrs	r2, r1
 8004750:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004752:	46c0      	nop			@ (mov r8, r8)
 8004754:	46bd      	mov	sp, r7
 8004756:	b007      	add	sp, #28
 8004758:	bd90      	pop	{r4, r7, pc}
 800475a:	46c0      	nop			@ (mov r8, r8)
 800475c:	03ff63ff 	.word	0x03ff63ff

08004760 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2241      	movs	r2, #65	@ 0x41
 800476e:	5c9b      	ldrb	r3, [r3, r2]
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b20      	cmp	r3, #32
 8004774:	d138      	bne.n	80047e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2240      	movs	r2, #64	@ 0x40
 800477a:	5c9b      	ldrb	r3, [r3, r2]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004780:	2302      	movs	r3, #2
 8004782:	e032      	b.n	80047ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2240      	movs	r2, #64	@ 0x40
 8004788:	2101      	movs	r1, #1
 800478a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2241      	movs	r2, #65	@ 0x41
 8004790:	2124      	movs	r1, #36	@ 0x24
 8004792:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2101      	movs	r1, #1
 80047a0:	438a      	bics	r2, r1
 80047a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4911      	ldr	r1, [pc, #68]	@ (80047f4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80047b0:	400a      	ands	r2, r1
 80047b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6819      	ldr	r1, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2101      	movs	r1, #1
 80047d0:	430a      	orrs	r2, r1
 80047d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2241      	movs	r2, #65	@ 0x41
 80047d8:	2120      	movs	r1, #32
 80047da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2240      	movs	r2, #64	@ 0x40
 80047e0:	2100      	movs	r1, #0
 80047e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	e000      	b.n	80047ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80047e8:	2302      	movs	r3, #2
  }
}
 80047ea:	0018      	movs	r0, r3
 80047ec:	46bd      	mov	sp, r7
 80047ee:	b002      	add	sp, #8
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	46c0      	nop			@ (mov r8, r8)
 80047f4:	ffffefff 	.word	0xffffefff

080047f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2241      	movs	r2, #65	@ 0x41
 8004806:	5c9b      	ldrb	r3, [r3, r2]
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b20      	cmp	r3, #32
 800480c:	d139      	bne.n	8004882 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2240      	movs	r2, #64	@ 0x40
 8004812:	5c9b      	ldrb	r3, [r3, r2]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004818:	2302      	movs	r3, #2
 800481a:	e033      	b.n	8004884 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2240      	movs	r2, #64	@ 0x40
 8004820:	2101      	movs	r1, #1
 8004822:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2241      	movs	r2, #65	@ 0x41
 8004828:	2124      	movs	r1, #36	@ 0x24
 800482a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2101      	movs	r1, #1
 8004838:	438a      	bics	r2, r1
 800483a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4a11      	ldr	r2, [pc, #68]	@ (800488c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004848:	4013      	ands	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	021b      	lsls	r3, r3, #8
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	4313      	orrs	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2101      	movs	r1, #1
 800486a:	430a      	orrs	r2, r1
 800486c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2241      	movs	r2, #65	@ 0x41
 8004872:	2120      	movs	r1, #32
 8004874:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2240      	movs	r2, #64	@ 0x40
 800487a:	2100      	movs	r1, #0
 800487c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	e000      	b.n	8004884 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004882:	2302      	movs	r3, #2
  }
}
 8004884:	0018      	movs	r0, r3
 8004886:	46bd      	mov	sp, r7
 8004888:	b004      	add	sp, #16
 800488a:	bd80      	pop	{r7, pc}
 800488c:	fffff0ff 	.word	0xfffff0ff

08004890 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b088      	sub	sp, #32
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e305      	b.n	8004eae <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2201      	movs	r2, #1
 80048a8:	4013      	ands	r3, r2
 80048aa:	d100      	bne.n	80048ae <HAL_RCC_OscConfig+0x1e>
 80048ac:	e08d      	b.n	80049ca <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80048ae:	4bc5      	ldr	r3, [pc, #788]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	220c      	movs	r2, #12
 80048b4:	4013      	ands	r3, r2
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d00e      	beq.n	80048d8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80048ba:	4bc2      	ldr	r3, [pc, #776]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	220c      	movs	r2, #12
 80048c0:	4013      	ands	r3, r2
 80048c2:	2b08      	cmp	r3, #8
 80048c4:	d116      	bne.n	80048f4 <HAL_RCC_OscConfig+0x64>
 80048c6:	4bbf      	ldr	r3, [pc, #764]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	23c0      	movs	r3, #192	@ 0xc0
 80048cc:	025b      	lsls	r3, r3, #9
 80048ce:	401a      	ands	r2, r3
 80048d0:	2380      	movs	r3, #128	@ 0x80
 80048d2:	025b      	lsls	r3, r3, #9
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d10d      	bne.n	80048f4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d8:	4bba      	ldr	r3, [pc, #744]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	2380      	movs	r3, #128	@ 0x80
 80048de:	029b      	lsls	r3, r3, #10
 80048e0:	4013      	ands	r3, r2
 80048e2:	d100      	bne.n	80048e6 <HAL_RCC_OscConfig+0x56>
 80048e4:	e070      	b.n	80049c8 <HAL_RCC_OscConfig+0x138>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d000      	beq.n	80048f0 <HAL_RCC_OscConfig+0x60>
 80048ee:	e06b      	b.n	80049c8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e2dc      	b.n	8004eae <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d107      	bne.n	800490c <HAL_RCC_OscConfig+0x7c>
 80048fc:	4bb1      	ldr	r3, [pc, #708]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	4bb0      	ldr	r3, [pc, #704]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004902:	2180      	movs	r1, #128	@ 0x80
 8004904:	0249      	lsls	r1, r1, #9
 8004906:	430a      	orrs	r2, r1
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	e02f      	b.n	800496c <HAL_RCC_OscConfig+0xdc>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10c      	bne.n	800492e <HAL_RCC_OscConfig+0x9e>
 8004914:	4bab      	ldr	r3, [pc, #684]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	4baa      	ldr	r3, [pc, #680]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 800491a:	49ab      	ldr	r1, [pc, #684]	@ (8004bc8 <HAL_RCC_OscConfig+0x338>)
 800491c:	400a      	ands	r2, r1
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	4ba8      	ldr	r3, [pc, #672]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	4ba7      	ldr	r3, [pc, #668]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004926:	49a9      	ldr	r1, [pc, #676]	@ (8004bcc <HAL_RCC_OscConfig+0x33c>)
 8004928:	400a      	ands	r2, r1
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	e01e      	b.n	800496c <HAL_RCC_OscConfig+0xdc>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b05      	cmp	r3, #5
 8004934:	d10e      	bne.n	8004954 <HAL_RCC_OscConfig+0xc4>
 8004936:	4ba3      	ldr	r3, [pc, #652]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	4ba2      	ldr	r3, [pc, #648]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 800493c:	2180      	movs	r1, #128	@ 0x80
 800493e:	02c9      	lsls	r1, r1, #11
 8004940:	430a      	orrs	r2, r1
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	4b9f      	ldr	r3, [pc, #636]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	4b9e      	ldr	r3, [pc, #632]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 800494a:	2180      	movs	r1, #128	@ 0x80
 800494c:	0249      	lsls	r1, r1, #9
 800494e:	430a      	orrs	r2, r1
 8004950:	601a      	str	r2, [r3, #0]
 8004952:	e00b      	b.n	800496c <HAL_RCC_OscConfig+0xdc>
 8004954:	4b9b      	ldr	r3, [pc, #620]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	4b9a      	ldr	r3, [pc, #616]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 800495a:	499b      	ldr	r1, [pc, #620]	@ (8004bc8 <HAL_RCC_OscConfig+0x338>)
 800495c:	400a      	ands	r2, r1
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	4b98      	ldr	r3, [pc, #608]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	4b97      	ldr	r3, [pc, #604]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004966:	4999      	ldr	r1, [pc, #612]	@ (8004bcc <HAL_RCC_OscConfig+0x33c>)
 8004968:	400a      	ands	r2, r1
 800496a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d014      	beq.n	800499e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004974:	f7fe fd50 	bl	8003418 <HAL_GetTick>
 8004978:	0003      	movs	r3, r0
 800497a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800497e:	f7fe fd4b 	bl	8003418 <HAL_GetTick>
 8004982:	0002      	movs	r2, r0
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b64      	cmp	r3, #100	@ 0x64
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e28e      	b.n	8004eae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004990:	4b8c      	ldr	r3, [pc, #560]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	2380      	movs	r3, #128	@ 0x80
 8004996:	029b      	lsls	r3, r3, #10
 8004998:	4013      	ands	r3, r2
 800499a:	d0f0      	beq.n	800497e <HAL_RCC_OscConfig+0xee>
 800499c:	e015      	b.n	80049ca <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800499e:	f7fe fd3b 	bl	8003418 <HAL_GetTick>
 80049a2:	0003      	movs	r3, r0
 80049a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049a8:	f7fe fd36 	bl	8003418 <HAL_GetTick>
 80049ac:	0002      	movs	r2, r0
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b64      	cmp	r3, #100	@ 0x64
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e279      	b.n	8004eae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ba:	4b82      	ldr	r3, [pc, #520]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	2380      	movs	r3, #128	@ 0x80
 80049c0:	029b      	lsls	r3, r3, #10
 80049c2:	4013      	ands	r3, r2
 80049c4:	d1f0      	bne.n	80049a8 <HAL_RCC_OscConfig+0x118>
 80049c6:	e000      	b.n	80049ca <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2202      	movs	r2, #2
 80049d0:	4013      	ands	r3, r2
 80049d2:	d100      	bne.n	80049d6 <HAL_RCC_OscConfig+0x146>
 80049d4:	e06c      	b.n	8004ab0 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80049d6:	4b7b      	ldr	r3, [pc, #492]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	220c      	movs	r2, #12
 80049dc:	4013      	ands	r3, r2
 80049de:	d00e      	beq.n	80049fe <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80049e0:	4b78      	ldr	r3, [pc, #480]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	220c      	movs	r2, #12
 80049e6:	4013      	ands	r3, r2
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d11f      	bne.n	8004a2c <HAL_RCC_OscConfig+0x19c>
 80049ec:	4b75      	ldr	r3, [pc, #468]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	23c0      	movs	r3, #192	@ 0xc0
 80049f2:	025b      	lsls	r3, r3, #9
 80049f4:	401a      	ands	r2, r3
 80049f6:	2380      	movs	r3, #128	@ 0x80
 80049f8:	021b      	lsls	r3, r3, #8
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d116      	bne.n	8004a2c <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049fe:	4b71      	ldr	r3, [pc, #452]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2202      	movs	r2, #2
 8004a04:	4013      	ands	r3, r2
 8004a06:	d005      	beq.n	8004a14 <HAL_RCC_OscConfig+0x184>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d001      	beq.n	8004a14 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e24c      	b.n	8004eae <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a14:	4b6b      	ldr	r3, [pc, #428]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	22f8      	movs	r2, #248	@ 0xf8
 8004a1a:	4393      	bics	r3, r2
 8004a1c:	0019      	movs	r1, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	00da      	lsls	r2, r3, #3
 8004a24:	4b67      	ldr	r3, [pc, #412]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004a26:	430a      	orrs	r2, r1
 8004a28:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a2a:	e041      	b.n	8004ab0 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d024      	beq.n	8004a7e <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a34:	4b63      	ldr	r3, [pc, #396]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	4b62      	ldr	r3, [pc, #392]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a40:	f7fe fcea 	bl	8003418 <HAL_GetTick>
 8004a44:	0003      	movs	r3, r0
 8004a46:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a48:	e008      	b.n	8004a5c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a4a:	f7fe fce5 	bl	8003418 <HAL_GetTick>
 8004a4e:	0002      	movs	r2, r0
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e228      	b.n	8004eae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a5c:	4b59      	ldr	r3, [pc, #356]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2202      	movs	r2, #2
 8004a62:	4013      	ands	r3, r2
 8004a64:	d0f1      	beq.n	8004a4a <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a66:	4b57      	ldr	r3, [pc, #348]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	22f8      	movs	r2, #248	@ 0xf8
 8004a6c:	4393      	bics	r3, r2
 8004a6e:	0019      	movs	r1, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	00da      	lsls	r2, r3, #3
 8004a76:	4b53      	ldr	r3, [pc, #332]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	e018      	b.n	8004ab0 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a7e:	4b51      	ldr	r3, [pc, #324]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	4b50      	ldr	r3, [pc, #320]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004a84:	2101      	movs	r1, #1
 8004a86:	438a      	bics	r2, r1
 8004a88:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a8a:	f7fe fcc5 	bl	8003418 <HAL_GetTick>
 8004a8e:	0003      	movs	r3, r0
 8004a90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a94:	f7fe fcc0 	bl	8003418 <HAL_GetTick>
 8004a98:	0002      	movs	r2, r0
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e203      	b.n	8004eae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aa6:	4b47      	ldr	r3, [pc, #284]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	4013      	ands	r3, r2
 8004aae:	d1f1      	bne.n	8004a94 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2208      	movs	r2, #8
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	d036      	beq.n	8004b28 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d019      	beq.n	8004af6 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ac2:	4b40      	ldr	r3, [pc, #256]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004ac4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ac6:	4b3f      	ldr	r3, [pc, #252]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004ac8:	2101      	movs	r1, #1
 8004aca:	430a      	orrs	r2, r1
 8004acc:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ace:	f7fe fca3 	bl	8003418 <HAL_GetTick>
 8004ad2:	0003      	movs	r3, r0
 8004ad4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ad8:	f7fe fc9e 	bl	8003418 <HAL_GetTick>
 8004adc:	0002      	movs	r2, r0
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e1e1      	b.n	8004eae <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aea:	4b36      	ldr	r3, [pc, #216]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aee:	2202      	movs	r2, #2
 8004af0:	4013      	ands	r3, r2
 8004af2:	d0f1      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x248>
 8004af4:	e018      	b.n	8004b28 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004af6:	4b33      	ldr	r3, [pc, #204]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004af8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004afa:	4b32      	ldr	r3, [pc, #200]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004afc:	2101      	movs	r1, #1
 8004afe:	438a      	bics	r2, r1
 8004b00:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b02:	f7fe fc89 	bl	8003418 <HAL_GetTick>
 8004b06:	0003      	movs	r3, r0
 8004b08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b0c:	f7fe fc84 	bl	8003418 <HAL_GetTick>
 8004b10:	0002      	movs	r2, r0
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e1c7      	b.n	8004eae <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b1e:	4b29      	ldr	r3, [pc, #164]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b22:	2202      	movs	r2, #2
 8004b24:	4013      	ands	r3, r2
 8004b26:	d1f1      	bne.n	8004b0c <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2204      	movs	r2, #4
 8004b2e:	4013      	ands	r3, r2
 8004b30:	d100      	bne.n	8004b34 <HAL_RCC_OscConfig+0x2a4>
 8004b32:	e0b5      	b.n	8004ca0 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b34:	201f      	movs	r0, #31
 8004b36:	183b      	adds	r3, r7, r0
 8004b38:	2200      	movs	r2, #0
 8004b3a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b3c:	4b21      	ldr	r3, [pc, #132]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004b3e:	69da      	ldr	r2, [r3, #28]
 8004b40:	2380      	movs	r3, #128	@ 0x80
 8004b42:	055b      	lsls	r3, r3, #21
 8004b44:	4013      	ands	r3, r2
 8004b46:	d110      	bne.n	8004b6a <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b48:	4b1e      	ldr	r3, [pc, #120]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004b4a:	69da      	ldr	r2, [r3, #28]
 8004b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004b4e:	2180      	movs	r1, #128	@ 0x80
 8004b50:	0549      	lsls	r1, r1, #21
 8004b52:	430a      	orrs	r2, r1
 8004b54:	61da      	str	r2, [r3, #28]
 8004b56:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004b58:	69da      	ldr	r2, [r3, #28]
 8004b5a:	2380      	movs	r3, #128	@ 0x80
 8004b5c:	055b      	lsls	r3, r3, #21
 8004b5e:	4013      	ands	r3, r2
 8004b60:	60fb      	str	r3, [r7, #12]
 8004b62:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b64:	183b      	adds	r3, r7, r0
 8004b66:	2201      	movs	r2, #1
 8004b68:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b6a:	4b19      	ldr	r3, [pc, #100]	@ (8004bd0 <HAL_RCC_OscConfig+0x340>)
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	2380      	movs	r3, #128	@ 0x80
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	4013      	ands	r3, r2
 8004b74:	d11a      	bne.n	8004bac <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b76:	4b16      	ldr	r3, [pc, #88]	@ (8004bd0 <HAL_RCC_OscConfig+0x340>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	4b15      	ldr	r3, [pc, #84]	@ (8004bd0 <HAL_RCC_OscConfig+0x340>)
 8004b7c:	2180      	movs	r1, #128	@ 0x80
 8004b7e:	0049      	lsls	r1, r1, #1
 8004b80:	430a      	orrs	r2, r1
 8004b82:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b84:	f7fe fc48 	bl	8003418 <HAL_GetTick>
 8004b88:	0003      	movs	r3, r0
 8004b8a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b8e:	f7fe fc43 	bl	8003418 <HAL_GetTick>
 8004b92:	0002      	movs	r2, r0
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b64      	cmp	r3, #100	@ 0x64
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e186      	b.n	8004eae <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd0 <HAL_RCC_OscConfig+0x340>)
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	2380      	movs	r3, #128	@ 0x80
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	4013      	ands	r3, r2
 8004baa:	d0f0      	beq.n	8004b8e <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d10f      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x344>
 8004bb4:	4b03      	ldr	r3, [pc, #12]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004bb6:	6a1a      	ldr	r2, [r3, #32]
 8004bb8:	4b02      	ldr	r3, [pc, #8]	@ (8004bc4 <HAL_RCC_OscConfig+0x334>)
 8004bba:	2101      	movs	r1, #1
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	621a      	str	r2, [r3, #32]
 8004bc0:	e036      	b.n	8004c30 <HAL_RCC_OscConfig+0x3a0>
 8004bc2:	46c0      	nop			@ (mov r8, r8)
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	fffeffff 	.word	0xfffeffff
 8004bcc:	fffbffff 	.word	0xfffbffff
 8004bd0:	40007000 	.word	0x40007000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10c      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x366>
 8004bdc:	4bb6      	ldr	r3, [pc, #728]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004bde:	6a1a      	ldr	r2, [r3, #32]
 8004be0:	4bb5      	ldr	r3, [pc, #724]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004be2:	2101      	movs	r1, #1
 8004be4:	438a      	bics	r2, r1
 8004be6:	621a      	str	r2, [r3, #32]
 8004be8:	4bb3      	ldr	r3, [pc, #716]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004bea:	6a1a      	ldr	r2, [r3, #32]
 8004bec:	4bb2      	ldr	r3, [pc, #712]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004bee:	2104      	movs	r1, #4
 8004bf0:	438a      	bics	r2, r1
 8004bf2:	621a      	str	r2, [r3, #32]
 8004bf4:	e01c      	b.n	8004c30 <HAL_RCC_OscConfig+0x3a0>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	2b05      	cmp	r3, #5
 8004bfc:	d10c      	bne.n	8004c18 <HAL_RCC_OscConfig+0x388>
 8004bfe:	4bae      	ldr	r3, [pc, #696]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004c00:	6a1a      	ldr	r2, [r3, #32]
 8004c02:	4bad      	ldr	r3, [pc, #692]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004c04:	2104      	movs	r1, #4
 8004c06:	430a      	orrs	r2, r1
 8004c08:	621a      	str	r2, [r3, #32]
 8004c0a:	4bab      	ldr	r3, [pc, #684]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004c0c:	6a1a      	ldr	r2, [r3, #32]
 8004c0e:	4baa      	ldr	r3, [pc, #680]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004c10:	2101      	movs	r1, #1
 8004c12:	430a      	orrs	r2, r1
 8004c14:	621a      	str	r2, [r3, #32]
 8004c16:	e00b      	b.n	8004c30 <HAL_RCC_OscConfig+0x3a0>
 8004c18:	4ba7      	ldr	r3, [pc, #668]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004c1a:	6a1a      	ldr	r2, [r3, #32]
 8004c1c:	4ba6      	ldr	r3, [pc, #664]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004c1e:	2101      	movs	r1, #1
 8004c20:	438a      	bics	r2, r1
 8004c22:	621a      	str	r2, [r3, #32]
 8004c24:	4ba4      	ldr	r3, [pc, #656]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004c26:	6a1a      	ldr	r2, [r3, #32]
 8004c28:	4ba3      	ldr	r3, [pc, #652]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004c2a:	2104      	movs	r1, #4
 8004c2c:	438a      	bics	r2, r1
 8004c2e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d014      	beq.n	8004c62 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c38:	f7fe fbee 	bl	8003418 <HAL_GetTick>
 8004c3c:	0003      	movs	r3, r0
 8004c3e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c40:	e009      	b.n	8004c56 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c42:	f7fe fbe9 	bl	8003418 <HAL_GetTick>
 8004c46:	0002      	movs	r2, r0
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	4a9b      	ldr	r2, [pc, #620]	@ (8004ebc <HAL_RCC_OscConfig+0x62c>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e12b      	b.n	8004eae <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c56:	4b98      	ldr	r3, [pc, #608]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	d0f0      	beq.n	8004c42 <HAL_RCC_OscConfig+0x3b2>
 8004c60:	e013      	b.n	8004c8a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c62:	f7fe fbd9 	bl	8003418 <HAL_GetTick>
 8004c66:	0003      	movs	r3, r0
 8004c68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c6a:	e009      	b.n	8004c80 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c6c:	f7fe fbd4 	bl	8003418 <HAL_GetTick>
 8004c70:	0002      	movs	r2, r0
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	4a91      	ldr	r2, [pc, #580]	@ (8004ebc <HAL_RCC_OscConfig+0x62c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e116      	b.n	8004eae <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c80:	4b8d      	ldr	r3, [pc, #564]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	2202      	movs	r2, #2
 8004c86:	4013      	ands	r3, r2
 8004c88:	d1f0      	bne.n	8004c6c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c8a:	231f      	movs	r3, #31
 8004c8c:	18fb      	adds	r3, r7, r3
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d105      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c94:	4b88      	ldr	r3, [pc, #544]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004c96:	69da      	ldr	r2, [r3, #28]
 8004c98:	4b87      	ldr	r3, [pc, #540]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004c9a:	4989      	ldr	r1, [pc, #548]	@ (8004ec0 <HAL_RCC_OscConfig+0x630>)
 8004c9c:	400a      	ands	r2, r1
 8004c9e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2210      	movs	r2, #16
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	d063      	beq.n	8004d72 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d12a      	bne.n	8004d08 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004cb2:	4b81      	ldr	r3, [pc, #516]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004cb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cb6:	4b80      	ldr	r3, [pc, #512]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004cb8:	2104      	movs	r1, #4
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004cbe:	4b7e      	ldr	r3, [pc, #504]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004cc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cc2:	4b7d      	ldr	r3, [pc, #500]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cca:	f7fe fba5 	bl	8003418 <HAL_GetTick>
 8004cce:	0003      	movs	r3, r0
 8004cd0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004cd4:	f7fe fba0 	bl	8003418 <HAL_GetTick>
 8004cd8:	0002      	movs	r2, r0
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e0e3      	b.n	8004eae <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004ce6:	4b74      	ldr	r3, [pc, #464]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cea:	2202      	movs	r2, #2
 8004cec:	4013      	ands	r3, r2
 8004cee:	d0f1      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004cf0:	4b71      	ldr	r3, [pc, #452]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cf4:	22f8      	movs	r2, #248	@ 0xf8
 8004cf6:	4393      	bics	r3, r2
 8004cf8:	0019      	movs	r1, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	00da      	lsls	r2, r3, #3
 8004d00:	4b6d      	ldr	r3, [pc, #436]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004d02:	430a      	orrs	r2, r1
 8004d04:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d06:	e034      	b.n	8004d72 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	3305      	adds	r3, #5
 8004d0e:	d111      	bne.n	8004d34 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004d10:	4b69      	ldr	r3, [pc, #420]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004d12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d14:	4b68      	ldr	r3, [pc, #416]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004d16:	2104      	movs	r1, #4
 8004d18:	438a      	bics	r2, r1
 8004d1a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004d1c:	4b66      	ldr	r3, [pc, #408]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d20:	22f8      	movs	r2, #248	@ 0xf8
 8004d22:	4393      	bics	r3, r2
 8004d24:	0019      	movs	r1, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	00da      	lsls	r2, r3, #3
 8004d2c:	4b62      	ldr	r3, [pc, #392]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d32:	e01e      	b.n	8004d72 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004d34:	4b60      	ldr	r3, [pc, #384]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004d36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d38:	4b5f      	ldr	r3, [pc, #380]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004d3a:	2104      	movs	r1, #4
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004d40:	4b5d      	ldr	r3, [pc, #372]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004d42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d44:	4b5c      	ldr	r3, [pc, #368]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004d46:	2101      	movs	r1, #1
 8004d48:	438a      	bics	r2, r1
 8004d4a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d4c:	f7fe fb64 	bl	8003418 <HAL_GetTick>
 8004d50:	0003      	movs	r3, r0
 8004d52:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004d54:	e008      	b.n	8004d68 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004d56:	f7fe fb5f 	bl	8003418 <HAL_GetTick>
 8004d5a:	0002      	movs	r2, r0
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e0a2      	b.n	8004eae <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004d68:	4b53      	ldr	r3, [pc, #332]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d6c:	2202      	movs	r2, #2
 8004d6e:	4013      	ands	r3, r2
 8004d70:	d1f1      	bne.n	8004d56 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d100      	bne.n	8004d7c <HAL_RCC_OscConfig+0x4ec>
 8004d7a:	e097      	b.n	8004eac <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d7c:	4b4e      	ldr	r3, [pc, #312]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	220c      	movs	r2, #12
 8004d82:	4013      	ands	r3, r2
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d100      	bne.n	8004d8a <HAL_RCC_OscConfig+0x4fa>
 8004d88:	e06b      	b.n	8004e62 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d14c      	bne.n	8004e2c <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d92:	4b49      	ldr	r3, [pc, #292]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	4b48      	ldr	r3, [pc, #288]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004d98:	494a      	ldr	r1, [pc, #296]	@ (8004ec4 <HAL_RCC_OscConfig+0x634>)
 8004d9a:	400a      	ands	r2, r1
 8004d9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d9e:	f7fe fb3b 	bl	8003418 <HAL_GetTick>
 8004da2:	0003      	movs	r3, r0
 8004da4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004da6:	e008      	b.n	8004dba <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004da8:	f7fe fb36 	bl	8003418 <HAL_GetTick>
 8004dac:	0002      	movs	r2, r0
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e079      	b.n	8004eae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dba:	4b3f      	ldr	r3, [pc, #252]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	2380      	movs	r3, #128	@ 0x80
 8004dc0:	049b      	lsls	r3, r3, #18
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	d1f0      	bne.n	8004da8 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dc6:	4b3c      	ldr	r3, [pc, #240]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dca:	220f      	movs	r2, #15
 8004dcc:	4393      	bics	r3, r2
 8004dce:	0019      	movs	r1, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dd4:	4b38      	ldr	r3, [pc, #224]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004dda:	4b37      	ldr	r3, [pc, #220]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	4a3a      	ldr	r2, [pc, #232]	@ (8004ec8 <HAL_RCC_OscConfig+0x638>)
 8004de0:	4013      	ands	r3, r2
 8004de2:	0019      	movs	r1, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dec:	431a      	orrs	r2, r3
 8004dee:	4b32      	ldr	r3, [pc, #200]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004df0:	430a      	orrs	r2, r1
 8004df2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004df4:	4b30      	ldr	r3, [pc, #192]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	4b2f      	ldr	r3, [pc, #188]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004dfa:	2180      	movs	r1, #128	@ 0x80
 8004dfc:	0449      	lsls	r1, r1, #17
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e02:	f7fe fb09 	bl	8003418 <HAL_GetTick>
 8004e06:	0003      	movs	r3, r0
 8004e08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e0c:	f7fe fb04 	bl	8003418 <HAL_GetTick>
 8004e10:	0002      	movs	r2, r0
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e047      	b.n	8004eae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e1e:	4b26      	ldr	r3, [pc, #152]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	2380      	movs	r3, #128	@ 0x80
 8004e24:	049b      	lsls	r3, r3, #18
 8004e26:	4013      	ands	r3, r2
 8004e28:	d0f0      	beq.n	8004e0c <HAL_RCC_OscConfig+0x57c>
 8004e2a:	e03f      	b.n	8004eac <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e2c:	4b22      	ldr	r3, [pc, #136]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	4b21      	ldr	r3, [pc, #132]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004e32:	4924      	ldr	r1, [pc, #144]	@ (8004ec4 <HAL_RCC_OscConfig+0x634>)
 8004e34:	400a      	ands	r2, r1
 8004e36:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e38:	f7fe faee 	bl	8003418 <HAL_GetTick>
 8004e3c:	0003      	movs	r3, r0
 8004e3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e40:	e008      	b.n	8004e54 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e42:	f7fe fae9 	bl	8003418 <HAL_GetTick>
 8004e46:	0002      	movs	r2, r0
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e02c      	b.n	8004eae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e54:	4b18      	ldr	r3, [pc, #96]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	2380      	movs	r3, #128	@ 0x80
 8004e5a:	049b      	lsls	r3, r3, #18
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d1f0      	bne.n	8004e42 <HAL_RCC_OscConfig+0x5b2>
 8004e60:	e024      	b.n	8004eac <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d101      	bne.n	8004e6e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e01f      	b.n	8004eae <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004e6e:	4b12      	ldr	r3, [pc, #72]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004e74:	4b10      	ldr	r3, [pc, #64]	@ (8004eb8 <HAL_RCC_OscConfig+0x628>)
 8004e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e78:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	23c0      	movs	r3, #192	@ 0xc0
 8004e7e:	025b      	lsls	r3, r3, #9
 8004e80:	401a      	ands	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d10e      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	220f      	movs	r2, #15
 8004e8e:	401a      	ands	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d107      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	23f0      	movs	r3, #240	@ 0xf0
 8004e9c:	039b      	lsls	r3, r3, #14
 8004e9e:	401a      	ands	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d001      	beq.n	8004eac <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e000      	b.n	8004eae <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	0018      	movs	r0, r3
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	b008      	add	sp, #32
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	46c0      	nop			@ (mov r8, r8)
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	00001388 	.word	0x00001388
 8004ec0:	efffffff 	.word	0xefffffff
 8004ec4:	feffffff 	.word	0xfeffffff
 8004ec8:	ffc27fff 	.word	0xffc27fff

08004ecc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e0b3      	b.n	8005048 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ee0:	4b5b      	ldr	r3, [pc, #364]	@ (8005050 <HAL_RCC_ClockConfig+0x184>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d911      	bls.n	8004f12 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eee:	4b58      	ldr	r3, [pc, #352]	@ (8005050 <HAL_RCC_ClockConfig+0x184>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	4393      	bics	r3, r2
 8004ef6:	0019      	movs	r1, r3
 8004ef8:	4b55      	ldr	r3, [pc, #340]	@ (8005050 <HAL_RCC_ClockConfig+0x184>)
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f00:	4b53      	ldr	r3, [pc, #332]	@ (8005050 <HAL_RCC_ClockConfig+0x184>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2201      	movs	r2, #1
 8004f06:	4013      	ands	r3, r2
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d001      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e09a      	b.n	8005048 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2202      	movs	r2, #2
 8004f18:	4013      	ands	r3, r2
 8004f1a:	d015      	beq.n	8004f48 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2204      	movs	r2, #4
 8004f22:	4013      	ands	r3, r2
 8004f24:	d006      	beq.n	8004f34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004f26:	4b4b      	ldr	r3, [pc, #300]	@ (8005054 <HAL_RCC_ClockConfig+0x188>)
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	4b4a      	ldr	r3, [pc, #296]	@ (8005054 <HAL_RCC_ClockConfig+0x188>)
 8004f2c:	21e0      	movs	r1, #224	@ 0xe0
 8004f2e:	00c9      	lsls	r1, r1, #3
 8004f30:	430a      	orrs	r2, r1
 8004f32:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f34:	4b47      	ldr	r3, [pc, #284]	@ (8005054 <HAL_RCC_ClockConfig+0x188>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	22f0      	movs	r2, #240	@ 0xf0
 8004f3a:	4393      	bics	r3, r2
 8004f3c:	0019      	movs	r1, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689a      	ldr	r2, [r3, #8]
 8004f42:	4b44      	ldr	r3, [pc, #272]	@ (8005054 <HAL_RCC_ClockConfig+0x188>)
 8004f44:	430a      	orrs	r2, r1
 8004f46:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	4013      	ands	r3, r2
 8004f50:	d040      	beq.n	8004fd4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d107      	bne.n	8004f6a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f5a:	4b3e      	ldr	r3, [pc, #248]	@ (8005054 <HAL_RCC_ClockConfig+0x188>)
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	2380      	movs	r3, #128	@ 0x80
 8004f60:	029b      	lsls	r3, r3, #10
 8004f62:	4013      	ands	r3, r2
 8004f64:	d114      	bne.n	8004f90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e06e      	b.n	8005048 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d107      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f72:	4b38      	ldr	r3, [pc, #224]	@ (8005054 <HAL_RCC_ClockConfig+0x188>)
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	2380      	movs	r3, #128	@ 0x80
 8004f78:	049b      	lsls	r3, r3, #18
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	d108      	bne.n	8004f90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e062      	b.n	8005048 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f82:	4b34      	ldr	r3, [pc, #208]	@ (8005054 <HAL_RCC_ClockConfig+0x188>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2202      	movs	r2, #2
 8004f88:	4013      	ands	r3, r2
 8004f8a:	d101      	bne.n	8004f90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e05b      	b.n	8005048 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f90:	4b30      	ldr	r3, [pc, #192]	@ (8005054 <HAL_RCC_ClockConfig+0x188>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	2203      	movs	r2, #3
 8004f96:	4393      	bics	r3, r2
 8004f98:	0019      	movs	r1, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	4b2d      	ldr	r3, [pc, #180]	@ (8005054 <HAL_RCC_ClockConfig+0x188>)
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fa4:	f7fe fa38 	bl	8003418 <HAL_GetTick>
 8004fa8:	0003      	movs	r3, r0
 8004faa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fac:	e009      	b.n	8004fc2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fae:	f7fe fa33 	bl	8003418 <HAL_GetTick>
 8004fb2:	0002      	movs	r2, r0
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	4a27      	ldr	r2, [pc, #156]	@ (8005058 <HAL_RCC_ClockConfig+0x18c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e042      	b.n	8005048 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fc2:	4b24      	ldr	r3, [pc, #144]	@ (8005054 <HAL_RCC_ClockConfig+0x188>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	220c      	movs	r2, #12
 8004fc8:	401a      	ands	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d1ec      	bne.n	8004fae <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fd4:	4b1e      	ldr	r3, [pc, #120]	@ (8005050 <HAL_RCC_ClockConfig+0x184>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	4013      	ands	r3, r2
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d211      	bcs.n	8005006 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8005050 <HAL_RCC_ClockConfig+0x184>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	4393      	bics	r3, r2
 8004fea:	0019      	movs	r1, r3
 8004fec:	4b18      	ldr	r3, [pc, #96]	@ (8005050 <HAL_RCC_ClockConfig+0x184>)
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff4:	4b16      	ldr	r3, [pc, #88]	@ (8005050 <HAL_RCC_ClockConfig+0x184>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d001      	beq.n	8005006 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e020      	b.n	8005048 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2204      	movs	r2, #4
 800500c:	4013      	ands	r3, r2
 800500e:	d009      	beq.n	8005024 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005010:	4b10      	ldr	r3, [pc, #64]	@ (8005054 <HAL_RCC_ClockConfig+0x188>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	4a11      	ldr	r2, [pc, #68]	@ (800505c <HAL_RCC_ClockConfig+0x190>)
 8005016:	4013      	ands	r3, r2
 8005018:	0019      	movs	r1, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	4b0d      	ldr	r3, [pc, #52]	@ (8005054 <HAL_RCC_ClockConfig+0x188>)
 8005020:	430a      	orrs	r2, r1
 8005022:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005024:	f000 f820 	bl	8005068 <HAL_RCC_GetSysClockFreq>
 8005028:	0001      	movs	r1, r0
 800502a:	4b0a      	ldr	r3, [pc, #40]	@ (8005054 <HAL_RCC_ClockConfig+0x188>)
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	091b      	lsrs	r3, r3, #4
 8005030:	220f      	movs	r2, #15
 8005032:	4013      	ands	r3, r2
 8005034:	4a0a      	ldr	r2, [pc, #40]	@ (8005060 <HAL_RCC_ClockConfig+0x194>)
 8005036:	5cd3      	ldrb	r3, [r2, r3]
 8005038:	000a      	movs	r2, r1
 800503a:	40da      	lsrs	r2, r3
 800503c:	4b09      	ldr	r3, [pc, #36]	@ (8005064 <HAL_RCC_ClockConfig+0x198>)
 800503e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005040:	2000      	movs	r0, #0
 8005042:	f7fe f9a3 	bl	800338c <HAL_InitTick>
  
  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	0018      	movs	r0, r3
 800504a:	46bd      	mov	sp, r7
 800504c:	b004      	add	sp, #16
 800504e:	bd80      	pop	{r7, pc}
 8005050:	40022000 	.word	0x40022000
 8005054:	40021000 	.word	0x40021000
 8005058:	00001388 	.word	0x00001388
 800505c:	fffff8ff 	.word	0xfffff8ff
 8005060:	0800a6fc 	.word	0x0800a6fc
 8005064:	20000000 	.word	0x20000000

08005068 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	2300      	movs	r3, #0
 8005074:	60bb      	str	r3, [r7, #8]
 8005076:	2300      	movs	r3, #0
 8005078:	617b      	str	r3, [r7, #20]
 800507a:	2300      	movs	r3, #0
 800507c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800507e:	2300      	movs	r3, #0
 8005080:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005082:	4b21      	ldr	r3, [pc, #132]	@ (8005108 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	220c      	movs	r2, #12
 800508c:	4013      	ands	r3, r2
 800508e:	2b04      	cmp	r3, #4
 8005090:	d002      	beq.n	8005098 <HAL_RCC_GetSysClockFreq+0x30>
 8005092:	2b08      	cmp	r3, #8
 8005094:	d003      	beq.n	800509e <HAL_RCC_GetSysClockFreq+0x36>
 8005096:	e02e      	b.n	80050f6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005098:	4b1c      	ldr	r3, [pc, #112]	@ (800510c <HAL_RCC_GetSysClockFreq+0xa4>)
 800509a:	613b      	str	r3, [r7, #16]
      break;
 800509c:	e02e      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	0c9b      	lsrs	r3, r3, #18
 80050a2:	220f      	movs	r2, #15
 80050a4:	4013      	ands	r3, r2
 80050a6:	4a1a      	ldr	r2, [pc, #104]	@ (8005110 <HAL_RCC_GetSysClockFreq+0xa8>)
 80050a8:	5cd3      	ldrb	r3, [r2, r3]
 80050aa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80050ac:	4b16      	ldr	r3, [pc, #88]	@ (8005108 <HAL_RCC_GetSysClockFreq+0xa0>)
 80050ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b0:	220f      	movs	r2, #15
 80050b2:	4013      	ands	r3, r2
 80050b4:	4a17      	ldr	r2, [pc, #92]	@ (8005114 <HAL_RCC_GetSysClockFreq+0xac>)
 80050b6:	5cd3      	ldrb	r3, [r2, r3]
 80050b8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	23c0      	movs	r3, #192	@ 0xc0
 80050be:	025b      	lsls	r3, r3, #9
 80050c0:	401a      	ands	r2, r3
 80050c2:	2380      	movs	r3, #128	@ 0x80
 80050c4:	025b      	lsls	r3, r3, #9
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d109      	bne.n	80050de <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80050ca:	68b9      	ldr	r1, [r7, #8]
 80050cc:	480f      	ldr	r0, [pc, #60]	@ (800510c <HAL_RCC_GetSysClockFreq+0xa4>)
 80050ce:	f7fb f837 	bl	8000140 <__udivsi3>
 80050d2:	0003      	movs	r3, r0
 80050d4:	001a      	movs	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4353      	muls	r3, r2
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	e008      	b.n	80050f0 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80050de:	68b9      	ldr	r1, [r7, #8]
 80050e0:	480a      	ldr	r0, [pc, #40]	@ (800510c <HAL_RCC_GetSysClockFreq+0xa4>)
 80050e2:	f7fb f82d 	bl	8000140 <__udivsi3>
 80050e6:	0003      	movs	r3, r0
 80050e8:	001a      	movs	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4353      	muls	r3, r2
 80050ee:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	613b      	str	r3, [r7, #16]
      break;
 80050f4:	e002      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80050f6:	4b05      	ldr	r3, [pc, #20]	@ (800510c <HAL_RCC_GetSysClockFreq+0xa4>)
 80050f8:	613b      	str	r3, [r7, #16]
      break;
 80050fa:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80050fc:	693b      	ldr	r3, [r7, #16]
}
 80050fe:	0018      	movs	r0, r3
 8005100:	46bd      	mov	sp, r7
 8005102:	b006      	add	sp, #24
 8005104:	bd80      	pop	{r7, pc}
 8005106:	46c0      	nop			@ (mov r8, r8)
 8005108:	40021000 	.word	0x40021000
 800510c:	007a1200 	.word	0x007a1200
 8005110:	0800a714 	.word	0x0800a714
 8005114:	0800a724 	.word	0x0800a724

08005118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800511c:	4b02      	ldr	r3, [pc, #8]	@ (8005128 <HAL_RCC_GetHCLKFreq+0x10>)
 800511e:	681b      	ldr	r3, [r3, #0]
}
 8005120:	0018      	movs	r0, r3
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	46c0      	nop			@ (mov r8, r8)
 8005128:	20000000 	.word	0x20000000

0800512c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005130:	f7ff fff2 	bl	8005118 <HAL_RCC_GetHCLKFreq>
 8005134:	0001      	movs	r1, r0
 8005136:	4b06      	ldr	r3, [pc, #24]	@ (8005150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	0a1b      	lsrs	r3, r3, #8
 800513c:	2207      	movs	r2, #7
 800513e:	4013      	ands	r3, r2
 8005140:	4a04      	ldr	r2, [pc, #16]	@ (8005154 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005142:	5cd3      	ldrb	r3, [r2, r3]
 8005144:	40d9      	lsrs	r1, r3
 8005146:	000b      	movs	r3, r1
}    
 8005148:	0018      	movs	r0, r3
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	46c0      	nop			@ (mov r8, r8)
 8005150:	40021000 	.word	0x40021000
 8005154:	0800a70c 	.word	0x0800a70c

08005158 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005164:	2300      	movs	r3, #0
 8005166:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	2380      	movs	r3, #128	@ 0x80
 800516e:	025b      	lsls	r3, r3, #9
 8005170:	4013      	ands	r3, r2
 8005172:	d100      	bne.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005174:	e08e      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005176:	2017      	movs	r0, #23
 8005178:	183b      	adds	r3, r7, r0
 800517a:	2200      	movs	r2, #0
 800517c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800517e:	4b5f      	ldr	r3, [pc, #380]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005180:	69da      	ldr	r2, [r3, #28]
 8005182:	2380      	movs	r3, #128	@ 0x80
 8005184:	055b      	lsls	r3, r3, #21
 8005186:	4013      	ands	r3, r2
 8005188:	d110      	bne.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800518a:	4b5c      	ldr	r3, [pc, #368]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800518c:	69da      	ldr	r2, [r3, #28]
 800518e:	4b5b      	ldr	r3, [pc, #364]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005190:	2180      	movs	r1, #128	@ 0x80
 8005192:	0549      	lsls	r1, r1, #21
 8005194:	430a      	orrs	r2, r1
 8005196:	61da      	str	r2, [r3, #28]
 8005198:	4b58      	ldr	r3, [pc, #352]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800519a:	69da      	ldr	r2, [r3, #28]
 800519c:	2380      	movs	r3, #128	@ 0x80
 800519e:	055b      	lsls	r3, r3, #21
 80051a0:	4013      	ands	r3, r2
 80051a2:	60bb      	str	r3, [r7, #8]
 80051a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051a6:	183b      	adds	r3, r7, r0
 80051a8:	2201      	movs	r2, #1
 80051aa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ac:	4b54      	ldr	r3, [pc, #336]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	2380      	movs	r3, #128	@ 0x80
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	4013      	ands	r3, r2
 80051b6:	d11a      	bne.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051b8:	4b51      	ldr	r3, [pc, #324]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	4b50      	ldr	r3, [pc, #320]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80051be:	2180      	movs	r1, #128	@ 0x80
 80051c0:	0049      	lsls	r1, r1, #1
 80051c2:	430a      	orrs	r2, r1
 80051c4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051c6:	f7fe f927 	bl	8003418 <HAL_GetTick>
 80051ca:	0003      	movs	r3, r0
 80051cc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ce:	e008      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051d0:	f7fe f922 	bl	8003418 <HAL_GetTick>
 80051d4:	0002      	movs	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b64      	cmp	r3, #100	@ 0x64
 80051dc:	d901      	bls.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e087      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e2:	4b47      	ldr	r3, [pc, #284]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	2380      	movs	r3, #128	@ 0x80
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	4013      	ands	r3, r2
 80051ec:	d0f0      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051ee:	4b43      	ldr	r3, [pc, #268]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80051f0:	6a1a      	ldr	r2, [r3, #32]
 80051f2:	23c0      	movs	r3, #192	@ 0xc0
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4013      	ands	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d034      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	23c0      	movs	r3, #192	@ 0xc0
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4013      	ands	r3, r2
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	429a      	cmp	r2, r3
 800520e:	d02c      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005210:	4b3a      	ldr	r3, [pc, #232]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	4a3b      	ldr	r2, [pc, #236]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005216:	4013      	ands	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800521a:	4b38      	ldr	r3, [pc, #224]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800521c:	6a1a      	ldr	r2, [r3, #32]
 800521e:	4b37      	ldr	r3, [pc, #220]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005220:	2180      	movs	r1, #128	@ 0x80
 8005222:	0249      	lsls	r1, r1, #9
 8005224:	430a      	orrs	r2, r1
 8005226:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005228:	4b34      	ldr	r3, [pc, #208]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800522a:	6a1a      	ldr	r2, [r3, #32]
 800522c:	4b33      	ldr	r3, [pc, #204]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800522e:	4936      	ldr	r1, [pc, #216]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005230:	400a      	ands	r2, r1
 8005232:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005234:	4b31      	ldr	r3, [pc, #196]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2201      	movs	r2, #1
 800523e:	4013      	ands	r3, r2
 8005240:	d013      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005242:	f7fe f8e9 	bl	8003418 <HAL_GetTick>
 8005246:	0003      	movs	r3, r0
 8005248:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800524a:	e009      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800524c:	f7fe f8e4 	bl	8003418 <HAL_GetTick>
 8005250:	0002      	movs	r2, r0
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	4a2d      	ldr	r2, [pc, #180]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d901      	bls.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e048      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005260:	4b26      	ldr	r3, [pc, #152]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	2202      	movs	r2, #2
 8005266:	4013      	ands	r3, r2
 8005268:	d0f0      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800526a:	4b24      	ldr	r3, [pc, #144]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	4a25      	ldr	r2, [pc, #148]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005270:	4013      	ands	r3, r2
 8005272:	0019      	movs	r1, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	4b20      	ldr	r3, [pc, #128]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800527a:	430a      	orrs	r2, r1
 800527c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800527e:	2317      	movs	r3, #23
 8005280:	18fb      	adds	r3, r7, r3
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d105      	bne.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005288:	4b1c      	ldr	r3, [pc, #112]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800528a:	69da      	ldr	r2, [r3, #28]
 800528c:	4b1b      	ldr	r3, [pc, #108]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800528e:	4920      	ldr	r1, [pc, #128]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005290:	400a      	ands	r2, r1
 8005292:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2201      	movs	r2, #1
 800529a:	4013      	ands	r3, r2
 800529c:	d009      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800529e:	4b17      	ldr	r3, [pc, #92]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80052a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a2:	2203      	movs	r2, #3
 80052a4:	4393      	bics	r3, r2
 80052a6:	0019      	movs	r1, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	4b13      	ldr	r3, [pc, #76]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80052ae:	430a      	orrs	r2, r1
 80052b0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2220      	movs	r2, #32
 80052b8:	4013      	ands	r3, r2
 80052ba:	d009      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052bc:	4b0f      	ldr	r3, [pc, #60]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80052be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c0:	2210      	movs	r2, #16
 80052c2:	4393      	bics	r3, r2
 80052c4:	0019      	movs	r1, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68da      	ldr	r2, [r3, #12]
 80052ca:	4b0c      	ldr	r3, [pc, #48]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80052cc:	430a      	orrs	r2, r1
 80052ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	2380      	movs	r3, #128	@ 0x80
 80052d6:	029b      	lsls	r3, r3, #10
 80052d8:	4013      	ands	r3, r2
 80052da:	d009      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052dc:	4b07      	ldr	r3, [pc, #28]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80052de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052e0:	2280      	movs	r2, #128	@ 0x80
 80052e2:	4393      	bics	r3, r2
 80052e4:	0019      	movs	r1, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	691a      	ldr	r2, [r3, #16]
 80052ea:	4b04      	ldr	r3, [pc, #16]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80052ec:	430a      	orrs	r2, r1
 80052ee:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	0018      	movs	r0, r3
 80052f4:	46bd      	mov	sp, r7
 80052f6:	b006      	add	sp, #24
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	46c0      	nop			@ (mov r8, r8)
 80052fc:	40021000 	.word	0x40021000
 8005300:	40007000 	.word	0x40007000
 8005304:	fffffcff 	.word	0xfffffcff
 8005308:	fffeffff 	.word	0xfffeffff
 800530c:	00001388 	.word	0x00001388
 8005310:	efffffff 	.word	0xefffffff

08005314 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e044      	b.n	80053b0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800532a:	2b00      	cmp	r3, #0
 800532c:	d107      	bne.n	800533e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2278      	movs	r2, #120	@ 0x78
 8005332:	2100      	movs	r1, #0
 8005334:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	0018      	movs	r0, r3
 800533a:	f7fd fea5 	bl	8003088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2224      	movs	r2, #36	@ 0x24
 8005342:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2101      	movs	r1, #1
 8005350:	438a      	bics	r2, r1
 8005352:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005358:	2b00      	cmp	r3, #0
 800535a:	d003      	beq.n	8005364 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	0018      	movs	r0, r3
 8005360:	f000 fa24 	bl	80057ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	0018      	movs	r0, r3
 8005368:	f000 f8c8 	bl	80054fc <UART_SetConfig>
 800536c:	0003      	movs	r3, r0
 800536e:	2b01      	cmp	r3, #1
 8005370:	d101      	bne.n	8005376 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e01c      	b.n	80053b0 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	490d      	ldr	r1, [pc, #52]	@ (80053b8 <HAL_UART_Init+0xa4>)
 8005382:	400a      	ands	r2, r1
 8005384:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689a      	ldr	r2, [r3, #8]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2108      	movs	r1, #8
 8005392:	438a      	bics	r2, r1
 8005394:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2101      	movs	r1, #1
 80053a2:	430a      	orrs	r2, r1
 80053a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	0018      	movs	r0, r3
 80053aa:	f000 fab3 	bl	8005914 <UART_CheckIdleState>
 80053ae:	0003      	movs	r3, r0
}
 80053b0:	0018      	movs	r0, r3
 80053b2:	46bd      	mov	sp, r7
 80053b4:	b002      	add	sp, #8
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	fffff7ff 	.word	0xfffff7ff

080053bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b08a      	sub	sp, #40	@ 0x28
 80053c0:	af02      	add	r7, sp, #8
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	603b      	str	r3, [r7, #0]
 80053c8:	1dbb      	adds	r3, r7, #6
 80053ca:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053d0:	2b20      	cmp	r3, #32
 80053d2:	d000      	beq.n	80053d6 <HAL_UART_Transmit+0x1a>
 80053d4:	e08c      	b.n	80054f0 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <HAL_UART_Transmit+0x28>
 80053dc:	1dbb      	adds	r3, r7, #6
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e084      	b.n	80054f2 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	2380      	movs	r3, #128	@ 0x80
 80053ee:	015b      	lsls	r3, r3, #5
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d109      	bne.n	8005408 <HAL_UART_Transmit+0x4c>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d105      	bne.n	8005408 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2201      	movs	r2, #1
 8005400:	4013      	ands	r3, r2
 8005402:	d001      	beq.n	8005408 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e074      	b.n	80054f2 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2284      	movs	r2, #132	@ 0x84
 800540c:	2100      	movs	r1, #0
 800540e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2221      	movs	r2, #33	@ 0x21
 8005414:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005416:	f7fd ffff 	bl	8003418 <HAL_GetTick>
 800541a:	0003      	movs	r3, r0
 800541c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	1dba      	adds	r2, r7, #6
 8005422:	2150      	movs	r1, #80	@ 0x50
 8005424:	8812      	ldrh	r2, [r2, #0]
 8005426:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	1dba      	adds	r2, r7, #6
 800542c:	2152      	movs	r1, #82	@ 0x52
 800542e:	8812      	ldrh	r2, [r2, #0]
 8005430:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	689a      	ldr	r2, [r3, #8]
 8005436:	2380      	movs	r3, #128	@ 0x80
 8005438:	015b      	lsls	r3, r3, #5
 800543a:	429a      	cmp	r2, r3
 800543c:	d108      	bne.n	8005450 <HAL_UART_Transmit+0x94>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d104      	bne.n	8005450 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8005446:	2300      	movs	r3, #0
 8005448:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	61bb      	str	r3, [r7, #24]
 800544e:	e003      	b.n	8005458 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005454:	2300      	movs	r3, #0
 8005456:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005458:	e02f      	b.n	80054ba <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	0013      	movs	r3, r2
 8005464:	2200      	movs	r2, #0
 8005466:	2180      	movs	r1, #128	@ 0x80
 8005468:	f000 fafc 	bl	8005a64 <UART_WaitOnFlagUntilTimeout>
 800546c:	1e03      	subs	r3, r0, #0
 800546e:	d004      	beq.n	800547a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2220      	movs	r2, #32
 8005474:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e03b      	b.n	80054f2 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10b      	bne.n	8005498 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	881a      	ldrh	r2, [r3, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	05d2      	lsls	r2, r2, #23
 800548a:	0dd2      	lsrs	r2, r2, #23
 800548c:	b292      	uxth	r2, r2
 800548e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	3302      	adds	r3, #2
 8005494:	61bb      	str	r3, [r7, #24]
 8005496:	e007      	b.n	80054a8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	781a      	ldrb	r2, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	3301      	adds	r3, #1
 80054a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2252      	movs	r2, #82	@ 0x52
 80054ac:	5a9b      	ldrh	r3, [r3, r2]
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	3b01      	subs	r3, #1
 80054b2:	b299      	uxth	r1, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2252      	movs	r2, #82	@ 0x52
 80054b8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2252      	movs	r2, #82	@ 0x52
 80054be:	5a9b      	ldrh	r3, [r3, r2]
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1c9      	bne.n	800545a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	0013      	movs	r3, r2
 80054d0:	2200      	movs	r2, #0
 80054d2:	2140      	movs	r1, #64	@ 0x40
 80054d4:	f000 fac6 	bl	8005a64 <UART_WaitOnFlagUntilTimeout>
 80054d8:	1e03      	subs	r3, r0, #0
 80054da:	d004      	beq.n	80054e6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2220      	movs	r2, #32
 80054e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e005      	b.n	80054f2 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2220      	movs	r2, #32
 80054ea:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80054ec:	2300      	movs	r3, #0
 80054ee:	e000      	b.n	80054f2 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80054f0:	2302      	movs	r3, #2
  }
}
 80054f2:	0018      	movs	r0, r3
 80054f4:	46bd      	mov	sp, r7
 80054f6:	b008      	add	sp, #32
 80054f8:	bd80      	pop	{r7, pc}
	...

080054fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b088      	sub	sp, #32
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005504:	231e      	movs	r3, #30
 8005506:	18fb      	adds	r3, r7, r3
 8005508:	2200      	movs	r2, #0
 800550a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	431a      	orrs	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	431a      	orrs	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	69db      	ldr	r3, [r3, #28]
 8005520:	4313      	orrs	r3, r2
 8005522:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a97      	ldr	r2, [pc, #604]	@ (8005788 <UART_SetConfig+0x28c>)
 800552c:	4013      	ands	r3, r2
 800552e:	0019      	movs	r1, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	430a      	orrs	r2, r1
 8005538:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	4a92      	ldr	r2, [pc, #584]	@ (800578c <UART_SetConfig+0x290>)
 8005542:	4013      	ands	r3, r2
 8005544:	0019      	movs	r1, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	4313      	orrs	r3, r2
 8005560:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	4a89      	ldr	r2, [pc, #548]	@ (8005790 <UART_SetConfig+0x294>)
 800556a:	4013      	ands	r3, r2
 800556c:	0019      	movs	r1, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	430a      	orrs	r2, r1
 8005576:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a85      	ldr	r2, [pc, #532]	@ (8005794 <UART_SetConfig+0x298>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d127      	bne.n	80055d2 <UART_SetConfig+0xd6>
 8005582:	4b85      	ldr	r3, [pc, #532]	@ (8005798 <UART_SetConfig+0x29c>)
 8005584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005586:	2203      	movs	r2, #3
 8005588:	4013      	ands	r3, r2
 800558a:	2b03      	cmp	r3, #3
 800558c:	d00d      	beq.n	80055aa <UART_SetConfig+0xae>
 800558e:	d81b      	bhi.n	80055c8 <UART_SetConfig+0xcc>
 8005590:	2b02      	cmp	r3, #2
 8005592:	d014      	beq.n	80055be <UART_SetConfig+0xc2>
 8005594:	d818      	bhi.n	80055c8 <UART_SetConfig+0xcc>
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <UART_SetConfig+0xa4>
 800559a:	2b01      	cmp	r3, #1
 800559c:	d00a      	beq.n	80055b4 <UART_SetConfig+0xb8>
 800559e:	e013      	b.n	80055c8 <UART_SetConfig+0xcc>
 80055a0:	231f      	movs	r3, #31
 80055a2:	18fb      	adds	r3, r7, r3
 80055a4:	2200      	movs	r2, #0
 80055a6:	701a      	strb	r2, [r3, #0]
 80055a8:	e035      	b.n	8005616 <UART_SetConfig+0x11a>
 80055aa:	231f      	movs	r3, #31
 80055ac:	18fb      	adds	r3, r7, r3
 80055ae:	2202      	movs	r2, #2
 80055b0:	701a      	strb	r2, [r3, #0]
 80055b2:	e030      	b.n	8005616 <UART_SetConfig+0x11a>
 80055b4:	231f      	movs	r3, #31
 80055b6:	18fb      	adds	r3, r7, r3
 80055b8:	2204      	movs	r2, #4
 80055ba:	701a      	strb	r2, [r3, #0]
 80055bc:	e02b      	b.n	8005616 <UART_SetConfig+0x11a>
 80055be:	231f      	movs	r3, #31
 80055c0:	18fb      	adds	r3, r7, r3
 80055c2:	2208      	movs	r2, #8
 80055c4:	701a      	strb	r2, [r3, #0]
 80055c6:	e026      	b.n	8005616 <UART_SetConfig+0x11a>
 80055c8:	231f      	movs	r3, #31
 80055ca:	18fb      	adds	r3, r7, r3
 80055cc:	2210      	movs	r2, #16
 80055ce:	701a      	strb	r2, [r3, #0]
 80055d0:	e021      	b.n	8005616 <UART_SetConfig+0x11a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a71      	ldr	r2, [pc, #452]	@ (800579c <UART_SetConfig+0x2a0>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d104      	bne.n	80055e6 <UART_SetConfig+0xea>
 80055dc:	231f      	movs	r3, #31
 80055de:	18fb      	adds	r3, r7, r3
 80055e0:	2200      	movs	r2, #0
 80055e2:	701a      	strb	r2, [r3, #0]
 80055e4:	e017      	b.n	8005616 <UART_SetConfig+0x11a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a6d      	ldr	r2, [pc, #436]	@ (80057a0 <UART_SetConfig+0x2a4>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d104      	bne.n	80055fa <UART_SetConfig+0xfe>
 80055f0:	231f      	movs	r3, #31
 80055f2:	18fb      	adds	r3, r7, r3
 80055f4:	2200      	movs	r2, #0
 80055f6:	701a      	strb	r2, [r3, #0]
 80055f8:	e00d      	b.n	8005616 <UART_SetConfig+0x11a>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a69      	ldr	r2, [pc, #420]	@ (80057a4 <UART_SetConfig+0x2a8>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d104      	bne.n	800560e <UART_SetConfig+0x112>
 8005604:	231f      	movs	r3, #31
 8005606:	18fb      	adds	r3, r7, r3
 8005608:	2200      	movs	r2, #0
 800560a:	701a      	strb	r2, [r3, #0]
 800560c:	e003      	b.n	8005616 <UART_SetConfig+0x11a>
 800560e:	231f      	movs	r3, #31
 8005610:	18fb      	adds	r3, r7, r3
 8005612:	2210      	movs	r2, #16
 8005614:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	69da      	ldr	r2, [r3, #28]
 800561a:	2380      	movs	r3, #128	@ 0x80
 800561c:	021b      	lsls	r3, r3, #8
 800561e:	429a      	cmp	r2, r3
 8005620:	d15c      	bne.n	80056dc <UART_SetConfig+0x1e0>
  {
    switch (clocksource)
 8005622:	231f      	movs	r3, #31
 8005624:	18fb      	adds	r3, r7, r3
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	2b08      	cmp	r3, #8
 800562a:	d015      	beq.n	8005658 <UART_SetConfig+0x15c>
 800562c:	dc18      	bgt.n	8005660 <UART_SetConfig+0x164>
 800562e:	2b04      	cmp	r3, #4
 8005630:	d00d      	beq.n	800564e <UART_SetConfig+0x152>
 8005632:	dc15      	bgt.n	8005660 <UART_SetConfig+0x164>
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <UART_SetConfig+0x142>
 8005638:	2b02      	cmp	r3, #2
 800563a:	d005      	beq.n	8005648 <UART_SetConfig+0x14c>
 800563c:	e010      	b.n	8005660 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800563e:	f7ff fd75 	bl	800512c <HAL_RCC_GetPCLK1Freq>
 8005642:	0003      	movs	r3, r0
 8005644:	61bb      	str	r3, [r7, #24]
        break;
 8005646:	e012      	b.n	800566e <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005648:	4b57      	ldr	r3, [pc, #348]	@ (80057a8 <UART_SetConfig+0x2ac>)
 800564a:	61bb      	str	r3, [r7, #24]
        break;
 800564c:	e00f      	b.n	800566e <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800564e:	f7ff fd0b 	bl	8005068 <HAL_RCC_GetSysClockFreq>
 8005652:	0003      	movs	r3, r0
 8005654:	61bb      	str	r3, [r7, #24]
        break;
 8005656:	e00a      	b.n	800566e <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005658:	2380      	movs	r3, #128	@ 0x80
 800565a:	021b      	lsls	r3, r3, #8
 800565c:	61bb      	str	r3, [r7, #24]
        break;
 800565e:	e006      	b.n	800566e <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005664:	231e      	movs	r3, #30
 8005666:	18fb      	adds	r3, r7, r3
 8005668:	2201      	movs	r2, #1
 800566a:	701a      	strb	r2, [r3, #0]
        break;
 800566c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d100      	bne.n	8005676 <UART_SetConfig+0x17a>
 8005674:	e07a      	b.n	800576c <UART_SetConfig+0x270>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	005a      	lsls	r2, r3, #1
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	085b      	lsrs	r3, r3, #1
 8005680:	18d2      	adds	r2, r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	0019      	movs	r1, r3
 8005688:	0010      	movs	r0, r2
 800568a:	f7fa fd59 	bl	8000140 <__udivsi3>
 800568e:	0003      	movs	r3, r0
 8005690:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	2b0f      	cmp	r3, #15
 8005696:	d91c      	bls.n	80056d2 <UART_SetConfig+0x1d6>
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	2380      	movs	r3, #128	@ 0x80
 800569c:	025b      	lsls	r3, r3, #9
 800569e:	429a      	cmp	r2, r3
 80056a0:	d217      	bcs.n	80056d2 <UART_SetConfig+0x1d6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	200e      	movs	r0, #14
 80056a8:	183b      	adds	r3, r7, r0
 80056aa:	210f      	movs	r1, #15
 80056ac:	438a      	bics	r2, r1
 80056ae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	085b      	lsrs	r3, r3, #1
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	2207      	movs	r2, #7
 80056b8:	4013      	ands	r3, r2
 80056ba:	b299      	uxth	r1, r3
 80056bc:	183b      	adds	r3, r7, r0
 80056be:	183a      	adds	r2, r7, r0
 80056c0:	8812      	ldrh	r2, [r2, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	183a      	adds	r2, r7, r0
 80056cc:	8812      	ldrh	r2, [r2, #0]
 80056ce:	60da      	str	r2, [r3, #12]
 80056d0:	e04c      	b.n	800576c <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 80056d2:	231e      	movs	r3, #30
 80056d4:	18fb      	adds	r3, r7, r3
 80056d6:	2201      	movs	r2, #1
 80056d8:	701a      	strb	r2, [r3, #0]
 80056da:	e047      	b.n	800576c <UART_SetConfig+0x270>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056dc:	231f      	movs	r3, #31
 80056de:	18fb      	adds	r3, r7, r3
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	2b08      	cmp	r3, #8
 80056e4:	d015      	beq.n	8005712 <UART_SetConfig+0x216>
 80056e6:	dc18      	bgt.n	800571a <UART_SetConfig+0x21e>
 80056e8:	2b04      	cmp	r3, #4
 80056ea:	d00d      	beq.n	8005708 <UART_SetConfig+0x20c>
 80056ec:	dc15      	bgt.n	800571a <UART_SetConfig+0x21e>
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d002      	beq.n	80056f8 <UART_SetConfig+0x1fc>
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d005      	beq.n	8005702 <UART_SetConfig+0x206>
 80056f6:	e010      	b.n	800571a <UART_SetConfig+0x21e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056f8:	f7ff fd18 	bl	800512c <HAL_RCC_GetPCLK1Freq>
 80056fc:	0003      	movs	r3, r0
 80056fe:	61bb      	str	r3, [r7, #24]
        break;
 8005700:	e012      	b.n	8005728 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005702:	4b29      	ldr	r3, [pc, #164]	@ (80057a8 <UART_SetConfig+0x2ac>)
 8005704:	61bb      	str	r3, [r7, #24]
        break;
 8005706:	e00f      	b.n	8005728 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005708:	f7ff fcae 	bl	8005068 <HAL_RCC_GetSysClockFreq>
 800570c:	0003      	movs	r3, r0
 800570e:	61bb      	str	r3, [r7, #24]
        break;
 8005710:	e00a      	b.n	8005728 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005712:	2380      	movs	r3, #128	@ 0x80
 8005714:	021b      	lsls	r3, r3, #8
 8005716:	61bb      	str	r3, [r7, #24]
        break;
 8005718:	e006      	b.n	8005728 <UART_SetConfig+0x22c>
      default:
        pclk = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800571e:	231e      	movs	r3, #30
 8005720:	18fb      	adds	r3, r7, r3
 8005722:	2201      	movs	r2, #1
 8005724:	701a      	strb	r2, [r3, #0]
        break;
 8005726:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d01e      	beq.n	800576c <UART_SetConfig+0x270>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	085a      	lsrs	r2, r3, #1
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	18d2      	adds	r2, r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	0019      	movs	r1, r3
 800573e:	0010      	movs	r0, r2
 8005740:	f7fa fcfe 	bl	8000140 <__udivsi3>
 8005744:	0003      	movs	r3, r0
 8005746:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	2b0f      	cmp	r3, #15
 800574c:	d90a      	bls.n	8005764 <UART_SetConfig+0x268>
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	2380      	movs	r3, #128	@ 0x80
 8005752:	025b      	lsls	r3, r3, #9
 8005754:	429a      	cmp	r2, r3
 8005756:	d205      	bcs.n	8005764 <UART_SetConfig+0x268>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	b29a      	uxth	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	60da      	str	r2, [r3, #12]
 8005762:	e003      	b.n	800576c <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 8005764:	231e      	movs	r3, #30
 8005766:	18fb      	adds	r3, r7, r3
 8005768:	2201      	movs	r2, #1
 800576a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005778:	231e      	movs	r3, #30
 800577a:	18fb      	adds	r3, r7, r3
 800577c:	781b      	ldrb	r3, [r3, #0]
}
 800577e:	0018      	movs	r0, r3
 8005780:	46bd      	mov	sp, r7
 8005782:	b008      	add	sp, #32
 8005784:	bd80      	pop	{r7, pc}
 8005786:	46c0      	nop			@ (mov r8, r8)
 8005788:	efff69f3 	.word	0xefff69f3
 800578c:	ffffcfff 	.word	0xffffcfff
 8005790:	fffff4ff 	.word	0xfffff4ff
 8005794:	40013800 	.word	0x40013800
 8005798:	40021000 	.word	0x40021000
 800579c:	40004400 	.word	0x40004400
 80057a0:	40004800 	.word	0x40004800
 80057a4:	40004c00 	.word	0x40004c00
 80057a8:	007a1200 	.word	0x007a1200

080057ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b8:	2208      	movs	r2, #8
 80057ba:	4013      	ands	r3, r2
 80057bc:	d00b      	beq.n	80057d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	4a4a      	ldr	r2, [pc, #296]	@ (80058f0 <UART_AdvFeatureConfig+0x144>)
 80057c6:	4013      	ands	r3, r2
 80057c8:	0019      	movs	r1, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057da:	2201      	movs	r2, #1
 80057dc:	4013      	ands	r3, r2
 80057de:	d00b      	beq.n	80057f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	4a43      	ldr	r2, [pc, #268]	@ (80058f4 <UART_AdvFeatureConfig+0x148>)
 80057e8:	4013      	ands	r3, r2
 80057ea:	0019      	movs	r1, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	430a      	orrs	r2, r1
 80057f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fc:	2202      	movs	r2, #2
 80057fe:	4013      	ands	r3, r2
 8005800:	d00b      	beq.n	800581a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	4a3b      	ldr	r2, [pc, #236]	@ (80058f8 <UART_AdvFeatureConfig+0x14c>)
 800580a:	4013      	ands	r3, r2
 800580c:	0019      	movs	r1, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581e:	2204      	movs	r2, #4
 8005820:	4013      	ands	r3, r2
 8005822:	d00b      	beq.n	800583c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	4a34      	ldr	r2, [pc, #208]	@ (80058fc <UART_AdvFeatureConfig+0x150>)
 800582c:	4013      	ands	r3, r2
 800582e:	0019      	movs	r1, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	430a      	orrs	r2, r1
 800583a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005840:	2210      	movs	r2, #16
 8005842:	4013      	ands	r3, r2
 8005844:	d00b      	beq.n	800585e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	4a2c      	ldr	r2, [pc, #176]	@ (8005900 <UART_AdvFeatureConfig+0x154>)
 800584e:	4013      	ands	r3, r2
 8005850:	0019      	movs	r1, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005862:	2220      	movs	r2, #32
 8005864:	4013      	ands	r3, r2
 8005866:	d00b      	beq.n	8005880 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	4a25      	ldr	r2, [pc, #148]	@ (8005904 <UART_AdvFeatureConfig+0x158>)
 8005870:	4013      	ands	r3, r2
 8005872:	0019      	movs	r1, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005884:	2240      	movs	r2, #64	@ 0x40
 8005886:	4013      	ands	r3, r2
 8005888:	d01d      	beq.n	80058c6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	4a1d      	ldr	r2, [pc, #116]	@ (8005908 <UART_AdvFeatureConfig+0x15c>)
 8005892:	4013      	ands	r3, r2
 8005894:	0019      	movs	r1, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058a6:	2380      	movs	r3, #128	@ 0x80
 80058a8:	035b      	lsls	r3, r3, #13
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d10b      	bne.n	80058c6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	4a15      	ldr	r2, [pc, #84]	@ (800590c <UART_AdvFeatureConfig+0x160>)
 80058b6:	4013      	ands	r3, r2
 80058b8:	0019      	movs	r1, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ca:	2280      	movs	r2, #128	@ 0x80
 80058cc:	4013      	ands	r3, r2
 80058ce:	d00b      	beq.n	80058e8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	4a0e      	ldr	r2, [pc, #56]	@ (8005910 <UART_AdvFeatureConfig+0x164>)
 80058d8:	4013      	ands	r3, r2
 80058da:	0019      	movs	r1, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	605a      	str	r2, [r3, #4]
  }
}
 80058e8:	46c0      	nop			@ (mov r8, r8)
 80058ea:	46bd      	mov	sp, r7
 80058ec:	b002      	add	sp, #8
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	ffff7fff 	.word	0xffff7fff
 80058f4:	fffdffff 	.word	0xfffdffff
 80058f8:	fffeffff 	.word	0xfffeffff
 80058fc:	fffbffff 	.word	0xfffbffff
 8005900:	ffffefff 	.word	0xffffefff
 8005904:	ffffdfff 	.word	0xffffdfff
 8005908:	ffefffff 	.word	0xffefffff
 800590c:	ff9fffff 	.word	0xff9fffff
 8005910:	fff7ffff 	.word	0xfff7ffff

08005914 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b092      	sub	sp, #72	@ 0x48
 8005918:	af02      	add	r7, sp, #8
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2284      	movs	r2, #132	@ 0x84
 8005920:	2100      	movs	r1, #0
 8005922:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005924:	f7fd fd78 	bl	8003418 <HAL_GetTick>
 8005928:	0003      	movs	r3, r0
 800592a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2208      	movs	r2, #8
 8005934:	4013      	ands	r3, r2
 8005936:	2b08      	cmp	r3, #8
 8005938:	d12c      	bne.n	8005994 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800593a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800593c:	2280      	movs	r2, #128	@ 0x80
 800593e:	0391      	lsls	r1, r2, #14
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	4a46      	ldr	r2, [pc, #280]	@ (8005a5c <UART_CheckIdleState+0x148>)
 8005944:	9200      	str	r2, [sp, #0]
 8005946:	2200      	movs	r2, #0
 8005948:	f000 f88c 	bl	8005a64 <UART_WaitOnFlagUntilTimeout>
 800594c:	1e03      	subs	r3, r0, #0
 800594e:	d021      	beq.n	8005994 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005950:	f3ef 8310 	mrs	r3, PRIMASK
 8005954:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005958:	63bb      	str	r3, [r7, #56]	@ 0x38
 800595a:	2301      	movs	r3, #1
 800595c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800595e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005960:	f383 8810 	msr	PRIMASK, r3
}
 8005964:	46c0      	nop			@ (mov r8, r8)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2180      	movs	r1, #128	@ 0x80
 8005972:	438a      	bics	r2, r1
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005978:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800597a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800597c:	f383 8810 	msr	PRIMASK, r3
}
 8005980:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2220      	movs	r2, #32
 8005986:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2278      	movs	r2, #120	@ 0x78
 800598c:	2100      	movs	r1, #0
 800598e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e05f      	b.n	8005a54 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2204      	movs	r2, #4
 800599c:	4013      	ands	r3, r2
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d146      	bne.n	8005a30 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059a4:	2280      	movs	r2, #128	@ 0x80
 80059a6:	03d1      	lsls	r1, r2, #15
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	4a2c      	ldr	r2, [pc, #176]	@ (8005a5c <UART_CheckIdleState+0x148>)
 80059ac:	9200      	str	r2, [sp, #0]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f000 f858 	bl	8005a64 <UART_WaitOnFlagUntilTimeout>
 80059b4:	1e03      	subs	r3, r0, #0
 80059b6:	d03b      	beq.n	8005a30 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059b8:	f3ef 8310 	mrs	r3, PRIMASK
 80059bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80059be:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80059c2:	2301      	movs	r3, #1
 80059c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f383 8810 	msr	PRIMASK, r3
}
 80059cc:	46c0      	nop			@ (mov r8, r8)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4921      	ldr	r1, [pc, #132]	@ (8005a60 <UART_CheckIdleState+0x14c>)
 80059da:	400a      	ands	r2, r1
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f383 8810 	msr	PRIMASK, r3
}
 80059e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ea:	f3ef 8310 	mrs	r3, PRIMASK
 80059ee:	61bb      	str	r3, [r7, #24]
  return(result);
 80059f0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80059f4:	2301      	movs	r3, #1
 80059f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	f383 8810 	msr	PRIMASK, r3
}
 80059fe:	46c0      	nop			@ (mov r8, r8)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	438a      	bics	r2, r1
 8005a0e:	609a      	str	r2, [r3, #8]
 8005a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a12:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	f383 8810 	msr	PRIMASK, r3
}
 8005a1a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2280      	movs	r2, #128	@ 0x80
 8005a20:	2120      	movs	r1, #32
 8005a22:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2278      	movs	r2, #120	@ 0x78
 8005a28:	2100      	movs	r1, #0
 8005a2a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e011      	b.n	8005a54 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2220      	movs	r2, #32
 8005a34:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2280      	movs	r2, #128	@ 0x80
 8005a3a:	2120      	movs	r1, #32
 8005a3c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2278      	movs	r2, #120	@ 0x78
 8005a4e:	2100      	movs	r1, #0
 8005a50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	0018      	movs	r0, r3
 8005a56:	46bd      	mov	sp, r7
 8005a58:	b010      	add	sp, #64	@ 0x40
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	01ffffff 	.word	0x01ffffff
 8005a60:	fffffedf 	.word	0xfffffedf

08005a64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	603b      	str	r3, [r7, #0]
 8005a70:	1dfb      	adds	r3, r7, #7
 8005a72:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a74:	e051      	b.n	8005b1a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	d04e      	beq.n	8005b1a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a7c:	f7fd fccc 	bl	8003418 <HAL_GetTick>
 8005a80:	0002      	movs	r2, r0
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	69ba      	ldr	r2, [r7, #24]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d302      	bcc.n	8005a92 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e051      	b.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2204      	movs	r2, #4
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	d03b      	beq.n	8005b1a <UART_WaitOnFlagUntilTimeout+0xb6>
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	2b80      	cmp	r3, #128	@ 0x80
 8005aa6:	d038      	beq.n	8005b1a <UART_WaitOnFlagUntilTimeout+0xb6>
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2b40      	cmp	r3, #64	@ 0x40
 8005aac:	d035      	beq.n	8005b1a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	2208      	movs	r2, #8
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	2b08      	cmp	r3, #8
 8005aba:	d111      	bne.n	8005ae0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2208      	movs	r2, #8
 8005ac2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	0018      	movs	r0, r3
 8005ac8:	f000 f83c 	bl	8005b44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2284      	movs	r2, #132	@ 0x84
 8005ad0:	2108      	movs	r1, #8
 8005ad2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2278      	movs	r2, #120	@ 0x78
 8005ad8:	2100      	movs	r1, #0
 8005ada:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e02c      	b.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	69da      	ldr	r2, [r3, #28]
 8005ae6:	2380      	movs	r3, #128	@ 0x80
 8005ae8:	011b      	lsls	r3, r3, #4
 8005aea:	401a      	ands	r2, r3
 8005aec:	2380      	movs	r3, #128	@ 0x80
 8005aee:	011b      	lsls	r3, r3, #4
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d112      	bne.n	8005b1a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2280      	movs	r2, #128	@ 0x80
 8005afa:	0112      	lsls	r2, r2, #4
 8005afc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	0018      	movs	r0, r3
 8005b02:	f000 f81f 	bl	8005b44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2284      	movs	r2, #132	@ 0x84
 8005b0a:	2120      	movs	r1, #32
 8005b0c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2278      	movs	r2, #120	@ 0x78
 8005b12:	2100      	movs	r1, #0
 8005b14:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e00f      	b.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69db      	ldr	r3, [r3, #28]
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	4013      	ands	r3, r2
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	425a      	negs	r2, r3
 8005b2a:	4153      	adcs	r3, r2
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	001a      	movs	r2, r3
 8005b30:	1dfb      	adds	r3, r7, #7
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d09e      	beq.n	8005a76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	0018      	movs	r0, r3
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	b004      	add	sp, #16
 8005b40:	bd80      	pop	{r7, pc}
	...

08005b44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b08e      	sub	sp, #56	@ 0x38
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b4c:	f3ef 8310 	mrs	r3, PRIMASK
 8005b50:	617b      	str	r3, [r7, #20]
  return(result);
 8005b52:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b54:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b56:	2301      	movs	r3, #1
 8005b58:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	f383 8810 	msr	PRIMASK, r3
}
 8005b60:	46c0      	nop			@ (mov r8, r8)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4926      	ldr	r1, [pc, #152]	@ (8005c08 <UART_EndRxTransfer+0xc4>)
 8005b6e:	400a      	ands	r2, r1
 8005b70:	601a      	str	r2, [r3, #0]
 8005b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	f383 8810 	msr	PRIMASK, r3
}
 8005b7c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b7e:	f3ef 8310 	mrs	r3, PRIMASK
 8005b82:	623b      	str	r3, [r7, #32]
  return(result);
 8005b84:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b86:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b88:	2301      	movs	r3, #1
 8005b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8e:	f383 8810 	msr	PRIMASK, r3
}
 8005b92:	46c0      	nop			@ (mov r8, r8)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689a      	ldr	r2, [r3, #8]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2101      	movs	r1, #1
 8005ba0:	438a      	bics	r2, r1
 8005ba2:	609a      	str	r2, [r3, #8]
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005baa:	f383 8810 	msr	PRIMASK, r3
}
 8005bae:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d118      	bne.n	8005bea <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bb8:	f3ef 8310 	mrs	r3, PRIMASK
 8005bbc:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bbe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f383 8810 	msr	PRIMASK, r3
}
 8005bcc:	46c0      	nop			@ (mov r8, r8)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2110      	movs	r1, #16
 8005bda:	438a      	bics	r2, r1
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f383 8810 	msr	PRIMASK, r3
}
 8005be8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2280      	movs	r2, #128	@ 0x80
 8005bee:	2120      	movs	r1, #32
 8005bf0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005bfe:	46c0      	nop			@ (mov r8, r8)
 8005c00:	46bd      	mov	sp, r7
 8005c02:	b00e      	add	sp, #56	@ 0x38
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	46c0      	nop			@ (mov r8, r8)
 8005c08:	fffffedf 	.word	0xfffffedf

08005c0c <__cvt>:
 8005c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c0e:	001f      	movs	r7, r3
 8005c10:	2300      	movs	r3, #0
 8005c12:	0016      	movs	r6, r2
 8005c14:	b08b      	sub	sp, #44	@ 0x2c
 8005c16:	429f      	cmp	r7, r3
 8005c18:	da04      	bge.n	8005c24 <__cvt+0x18>
 8005c1a:	2180      	movs	r1, #128	@ 0x80
 8005c1c:	0609      	lsls	r1, r1, #24
 8005c1e:	187b      	adds	r3, r7, r1
 8005c20:	001f      	movs	r7, r3
 8005c22:	232d      	movs	r3, #45	@ 0x2d
 8005c24:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005c26:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8005c28:	7013      	strb	r3, [r2, #0]
 8005c2a:	2320      	movs	r3, #32
 8005c2c:	2203      	movs	r2, #3
 8005c2e:	439d      	bics	r5, r3
 8005c30:	2d46      	cmp	r5, #70	@ 0x46
 8005c32:	d007      	beq.n	8005c44 <__cvt+0x38>
 8005c34:	002b      	movs	r3, r5
 8005c36:	3b45      	subs	r3, #69	@ 0x45
 8005c38:	4259      	negs	r1, r3
 8005c3a:	414b      	adcs	r3, r1
 8005c3c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005c3e:	3a01      	subs	r2, #1
 8005c40:	18cb      	adds	r3, r1, r3
 8005c42:	9310      	str	r3, [sp, #64]	@ 0x40
 8005c44:	ab09      	add	r3, sp, #36	@ 0x24
 8005c46:	9304      	str	r3, [sp, #16]
 8005c48:	ab08      	add	r3, sp, #32
 8005c4a:	9303      	str	r3, [sp, #12]
 8005c4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005c4e:	9200      	str	r2, [sp, #0]
 8005c50:	9302      	str	r3, [sp, #8]
 8005c52:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005c54:	0032      	movs	r2, r6
 8005c56:	9301      	str	r3, [sp, #4]
 8005c58:	003b      	movs	r3, r7
 8005c5a:	f001 f9ab 	bl	8006fb4 <_dtoa_r>
 8005c5e:	0004      	movs	r4, r0
 8005c60:	2d47      	cmp	r5, #71	@ 0x47
 8005c62:	d11b      	bne.n	8005c9c <__cvt+0x90>
 8005c64:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005c66:	07db      	lsls	r3, r3, #31
 8005c68:	d511      	bpl.n	8005c8e <__cvt+0x82>
 8005c6a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005c6c:	18c3      	adds	r3, r0, r3
 8005c6e:	9307      	str	r3, [sp, #28]
 8005c70:	2200      	movs	r2, #0
 8005c72:	2300      	movs	r3, #0
 8005c74:	0030      	movs	r0, r6
 8005c76:	0039      	movs	r1, r7
 8005c78:	f7fa fbe8 	bl	800044c <__aeabi_dcmpeq>
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	d001      	beq.n	8005c84 <__cvt+0x78>
 8005c80:	9b07      	ldr	r3, [sp, #28]
 8005c82:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c84:	2230      	movs	r2, #48	@ 0x30
 8005c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c88:	9907      	ldr	r1, [sp, #28]
 8005c8a:	428b      	cmp	r3, r1
 8005c8c:	d320      	bcc.n	8005cd0 <__cvt+0xc4>
 8005c8e:	0020      	movs	r0, r4
 8005c90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c92:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005c94:	1b1b      	subs	r3, r3, r4
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	b00b      	add	sp, #44	@ 0x2c
 8005c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c9c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005c9e:	18c3      	adds	r3, r0, r3
 8005ca0:	9307      	str	r3, [sp, #28]
 8005ca2:	2d46      	cmp	r5, #70	@ 0x46
 8005ca4:	d1e4      	bne.n	8005c70 <__cvt+0x64>
 8005ca6:	7803      	ldrb	r3, [r0, #0]
 8005ca8:	2b30      	cmp	r3, #48	@ 0x30
 8005caa:	d10c      	bne.n	8005cc6 <__cvt+0xba>
 8005cac:	2200      	movs	r2, #0
 8005cae:	2300      	movs	r3, #0
 8005cb0:	0030      	movs	r0, r6
 8005cb2:	0039      	movs	r1, r7
 8005cb4:	f7fa fbca 	bl	800044c <__aeabi_dcmpeq>
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	d104      	bne.n	8005cc6 <__cvt+0xba>
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8005cc0:	1a9b      	subs	r3, r3, r2
 8005cc2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005cc4:	6013      	str	r3, [r2, #0]
 8005cc6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005cc8:	9a07      	ldr	r2, [sp, #28]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	18d3      	adds	r3, r2, r3
 8005cce:	e7ce      	b.n	8005c6e <__cvt+0x62>
 8005cd0:	1c59      	adds	r1, r3, #1
 8005cd2:	9109      	str	r1, [sp, #36]	@ 0x24
 8005cd4:	701a      	strb	r2, [r3, #0]
 8005cd6:	e7d6      	b.n	8005c86 <__cvt+0x7a>

08005cd8 <__exponent>:
 8005cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cda:	232b      	movs	r3, #43	@ 0x2b
 8005cdc:	0005      	movs	r5, r0
 8005cde:	000c      	movs	r4, r1
 8005ce0:	b085      	sub	sp, #20
 8005ce2:	7002      	strb	r2, [r0, #0]
 8005ce4:	2900      	cmp	r1, #0
 8005ce6:	da01      	bge.n	8005cec <__exponent+0x14>
 8005ce8:	424c      	negs	r4, r1
 8005cea:	3302      	adds	r3, #2
 8005cec:	706b      	strb	r3, [r5, #1]
 8005cee:	2c09      	cmp	r4, #9
 8005cf0:	dd2c      	ble.n	8005d4c <__exponent+0x74>
 8005cf2:	ab02      	add	r3, sp, #8
 8005cf4:	1dde      	adds	r6, r3, #7
 8005cf6:	0020      	movs	r0, r4
 8005cf8:	210a      	movs	r1, #10
 8005cfa:	f7fa fb91 	bl	8000420 <__aeabi_idivmod>
 8005cfe:	0037      	movs	r7, r6
 8005d00:	3130      	adds	r1, #48	@ 0x30
 8005d02:	3e01      	subs	r6, #1
 8005d04:	0020      	movs	r0, r4
 8005d06:	7031      	strb	r1, [r6, #0]
 8005d08:	210a      	movs	r1, #10
 8005d0a:	9401      	str	r4, [sp, #4]
 8005d0c:	f7fa faa2 	bl	8000254 <__divsi3>
 8005d10:	9b01      	ldr	r3, [sp, #4]
 8005d12:	0004      	movs	r4, r0
 8005d14:	2b63      	cmp	r3, #99	@ 0x63
 8005d16:	dcee      	bgt.n	8005cf6 <__exponent+0x1e>
 8005d18:	1eba      	subs	r2, r7, #2
 8005d1a:	1ca8      	adds	r0, r5, #2
 8005d1c:	0001      	movs	r1, r0
 8005d1e:	0013      	movs	r3, r2
 8005d20:	3430      	adds	r4, #48	@ 0x30
 8005d22:	7014      	strb	r4, [r2, #0]
 8005d24:	ac02      	add	r4, sp, #8
 8005d26:	3407      	adds	r4, #7
 8005d28:	429c      	cmp	r4, r3
 8005d2a:	d80a      	bhi.n	8005d42 <__exponent+0x6a>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	42a2      	cmp	r2, r4
 8005d30:	d803      	bhi.n	8005d3a <__exponent+0x62>
 8005d32:	3309      	adds	r3, #9
 8005d34:	aa02      	add	r2, sp, #8
 8005d36:	189b      	adds	r3, r3, r2
 8005d38:	1bdb      	subs	r3, r3, r7
 8005d3a:	18c0      	adds	r0, r0, r3
 8005d3c:	1b40      	subs	r0, r0, r5
 8005d3e:	b005      	add	sp, #20
 8005d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d42:	781c      	ldrb	r4, [r3, #0]
 8005d44:	3301      	adds	r3, #1
 8005d46:	700c      	strb	r4, [r1, #0]
 8005d48:	3101      	adds	r1, #1
 8005d4a:	e7eb      	b.n	8005d24 <__exponent+0x4c>
 8005d4c:	2330      	movs	r3, #48	@ 0x30
 8005d4e:	18e4      	adds	r4, r4, r3
 8005d50:	70ab      	strb	r3, [r5, #2]
 8005d52:	1d28      	adds	r0, r5, #4
 8005d54:	70ec      	strb	r4, [r5, #3]
 8005d56:	e7f1      	b.n	8005d3c <__exponent+0x64>

08005d58 <_printf_float>:
 8005d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d5a:	b097      	sub	sp, #92	@ 0x5c
 8005d5c:	000d      	movs	r5, r1
 8005d5e:	920a      	str	r2, [sp, #40]	@ 0x28
 8005d60:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8005d62:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d64:	9009      	str	r0, [sp, #36]	@ 0x24
 8005d66:	f001 f809 	bl	8006d7c <_localeconv_r>
 8005d6a:	6803      	ldr	r3, [r0, #0]
 8005d6c:	0018      	movs	r0, r3
 8005d6e:	930d      	str	r3, [sp, #52]	@ 0x34
 8005d70:	f7fa f9ca 	bl	8000108 <strlen>
 8005d74:	2300      	movs	r3, #0
 8005d76:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005d78:	9314      	str	r3, [sp, #80]	@ 0x50
 8005d7a:	7e2b      	ldrb	r3, [r5, #24]
 8005d7c:	2207      	movs	r2, #7
 8005d7e:	930c      	str	r3, [sp, #48]	@ 0x30
 8005d80:	682b      	ldr	r3, [r5, #0]
 8005d82:	930e      	str	r3, [sp, #56]	@ 0x38
 8005d84:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	05c9      	lsls	r1, r1, #23
 8005d8a:	d545      	bpl.n	8005e18 <_printf_float+0xc0>
 8005d8c:	189b      	adds	r3, r3, r2
 8005d8e:	4393      	bics	r3, r2
 8005d90:	001a      	movs	r2, r3
 8005d92:	3208      	adds	r2, #8
 8005d94:	6022      	str	r2, [r4, #0]
 8005d96:	2201      	movs	r2, #1
 8005d98:	681e      	ldr	r6, [r3, #0]
 8005d9a:	685f      	ldr	r7, [r3, #4]
 8005d9c:	007b      	lsls	r3, r7, #1
 8005d9e:	085b      	lsrs	r3, r3, #1
 8005da0:	9311      	str	r3, [sp, #68]	@ 0x44
 8005da2:	9610      	str	r6, [sp, #64]	@ 0x40
 8005da4:	64ae      	str	r6, [r5, #72]	@ 0x48
 8005da6:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8005da8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005daa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005dac:	4ba7      	ldr	r3, [pc, #668]	@ (800604c <_printf_float+0x2f4>)
 8005dae:	4252      	negs	r2, r2
 8005db0:	f7fc fb60 	bl	8002474 <__aeabi_dcmpun>
 8005db4:	2800      	cmp	r0, #0
 8005db6:	d131      	bne.n	8005e1c <_printf_float+0xc4>
 8005db8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005dba:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	4ba3      	ldr	r3, [pc, #652]	@ (800604c <_printf_float+0x2f4>)
 8005dc0:	4252      	negs	r2, r2
 8005dc2:	f7fa fb53 	bl	800046c <__aeabi_dcmple>
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	d128      	bne.n	8005e1c <_printf_float+0xc4>
 8005dca:	2200      	movs	r2, #0
 8005dcc:	2300      	movs	r3, #0
 8005dce:	0030      	movs	r0, r6
 8005dd0:	0039      	movs	r1, r7
 8005dd2:	f7fa fb41 	bl	8000458 <__aeabi_dcmplt>
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	d003      	beq.n	8005de2 <_printf_float+0x8a>
 8005dda:	002b      	movs	r3, r5
 8005ddc:	222d      	movs	r2, #45	@ 0x2d
 8005dde:	3343      	adds	r3, #67	@ 0x43
 8005de0:	701a      	strb	r2, [r3, #0]
 8005de2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005de4:	4f9a      	ldr	r7, [pc, #616]	@ (8006050 <_printf_float+0x2f8>)
 8005de6:	2b47      	cmp	r3, #71	@ 0x47
 8005de8:	d900      	bls.n	8005dec <_printf_float+0x94>
 8005dea:	4f9a      	ldr	r7, [pc, #616]	@ (8006054 <_printf_float+0x2fc>)
 8005dec:	2303      	movs	r3, #3
 8005dee:	2400      	movs	r4, #0
 8005df0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005df2:	612b      	str	r3, [r5, #16]
 8005df4:	3301      	adds	r3, #1
 8005df6:	439a      	bics	r2, r3
 8005df8:	602a      	str	r2, [r5, #0]
 8005dfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005dfc:	0029      	movs	r1, r5
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e04:	aa15      	add	r2, sp, #84	@ 0x54
 8005e06:	f000 f9e5 	bl	80061d4 <_printf_common>
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	d000      	beq.n	8005e10 <_printf_float+0xb8>
 8005e0e:	e09f      	b.n	8005f50 <_printf_float+0x1f8>
 8005e10:	2001      	movs	r0, #1
 8005e12:	4240      	negs	r0, r0
 8005e14:	b017      	add	sp, #92	@ 0x5c
 8005e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e18:	3307      	adds	r3, #7
 8005e1a:	e7b8      	b.n	8005d8e <_printf_float+0x36>
 8005e1c:	0032      	movs	r2, r6
 8005e1e:	003b      	movs	r3, r7
 8005e20:	0030      	movs	r0, r6
 8005e22:	0039      	movs	r1, r7
 8005e24:	f7fc fb26 	bl	8002474 <__aeabi_dcmpun>
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	d00b      	beq.n	8005e44 <_printf_float+0xec>
 8005e2c:	2f00      	cmp	r7, #0
 8005e2e:	da03      	bge.n	8005e38 <_printf_float+0xe0>
 8005e30:	002b      	movs	r3, r5
 8005e32:	222d      	movs	r2, #45	@ 0x2d
 8005e34:	3343      	adds	r3, #67	@ 0x43
 8005e36:	701a      	strb	r2, [r3, #0]
 8005e38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005e3a:	4f87      	ldr	r7, [pc, #540]	@ (8006058 <_printf_float+0x300>)
 8005e3c:	2b47      	cmp	r3, #71	@ 0x47
 8005e3e:	d9d5      	bls.n	8005dec <_printf_float+0x94>
 8005e40:	4f86      	ldr	r7, [pc, #536]	@ (800605c <_printf_float+0x304>)
 8005e42:	e7d3      	b.n	8005dec <_printf_float+0x94>
 8005e44:	2220      	movs	r2, #32
 8005e46:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8005e48:	686b      	ldr	r3, [r5, #4]
 8005e4a:	4394      	bics	r4, r2
 8005e4c:	1c5a      	adds	r2, r3, #1
 8005e4e:	d146      	bne.n	8005ede <_printf_float+0x186>
 8005e50:	3307      	adds	r3, #7
 8005e52:	606b      	str	r3, [r5, #4]
 8005e54:	2380      	movs	r3, #128	@ 0x80
 8005e56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	602b      	str	r3, [r5, #0]
 8005e60:	9206      	str	r2, [sp, #24]
 8005e62:	aa14      	add	r2, sp, #80	@ 0x50
 8005e64:	9205      	str	r2, [sp, #20]
 8005e66:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005e68:	a90a      	add	r1, sp, #40	@ 0x28
 8005e6a:	9204      	str	r2, [sp, #16]
 8005e6c:	aa13      	add	r2, sp, #76	@ 0x4c
 8005e6e:	9203      	str	r2, [sp, #12]
 8005e70:	2223      	movs	r2, #35	@ 0x23
 8005e72:	1852      	adds	r2, r2, r1
 8005e74:	9202      	str	r2, [sp, #8]
 8005e76:	9301      	str	r3, [sp, #4]
 8005e78:	686b      	ldr	r3, [r5, #4]
 8005e7a:	0032      	movs	r2, r6
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e80:	003b      	movs	r3, r7
 8005e82:	f7ff fec3 	bl	8005c0c <__cvt>
 8005e86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005e88:	0007      	movs	r7, r0
 8005e8a:	2c47      	cmp	r4, #71	@ 0x47
 8005e8c:	d12d      	bne.n	8005eea <_printf_float+0x192>
 8005e8e:	1cd3      	adds	r3, r2, #3
 8005e90:	db02      	blt.n	8005e98 <_printf_float+0x140>
 8005e92:	686b      	ldr	r3, [r5, #4]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	dd48      	ble.n	8005f2a <_printf_float+0x1d2>
 8005e98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005e9a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005e9c:	3b02      	subs	r3, #2
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	930c      	str	r3, [sp, #48]	@ 0x30
 8005ea2:	0028      	movs	r0, r5
 8005ea4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005ea6:	3901      	subs	r1, #1
 8005ea8:	3050      	adds	r0, #80	@ 0x50
 8005eaa:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005eac:	f7ff ff14 	bl	8005cd8 <__exponent>
 8005eb0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005eb2:	0004      	movs	r4, r0
 8005eb4:	1813      	adds	r3, r2, r0
 8005eb6:	612b      	str	r3, [r5, #16]
 8005eb8:	2a01      	cmp	r2, #1
 8005eba:	dc02      	bgt.n	8005ec2 <_printf_float+0x16a>
 8005ebc:	682a      	ldr	r2, [r5, #0]
 8005ebe:	07d2      	lsls	r2, r2, #31
 8005ec0:	d501      	bpl.n	8005ec6 <_printf_float+0x16e>
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	612b      	str	r3, [r5, #16]
 8005ec6:	2323      	movs	r3, #35	@ 0x23
 8005ec8:	aa0a      	add	r2, sp, #40	@ 0x28
 8005eca:	189b      	adds	r3, r3, r2
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d100      	bne.n	8005ed4 <_printf_float+0x17c>
 8005ed2:	e792      	b.n	8005dfa <_printf_float+0xa2>
 8005ed4:	002b      	movs	r3, r5
 8005ed6:	222d      	movs	r2, #45	@ 0x2d
 8005ed8:	3343      	adds	r3, #67	@ 0x43
 8005eda:	701a      	strb	r2, [r3, #0]
 8005edc:	e78d      	b.n	8005dfa <_printf_float+0xa2>
 8005ede:	2c47      	cmp	r4, #71	@ 0x47
 8005ee0:	d1b8      	bne.n	8005e54 <_printf_float+0xfc>
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1b6      	bne.n	8005e54 <_printf_float+0xfc>
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	e7b3      	b.n	8005e52 <_printf_float+0xfa>
 8005eea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005eec:	0011      	movs	r1, r2
 8005eee:	2b65      	cmp	r3, #101	@ 0x65
 8005ef0:	d9d7      	bls.n	8005ea2 <_printf_float+0x14a>
 8005ef2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005ef4:	2b66      	cmp	r3, #102	@ 0x66
 8005ef6:	d11a      	bne.n	8005f2e <_printf_float+0x1d6>
 8005ef8:	686b      	ldr	r3, [r5, #4]
 8005efa:	2a00      	cmp	r2, #0
 8005efc:	dd09      	ble.n	8005f12 <_printf_float+0x1ba>
 8005efe:	612a      	str	r2, [r5, #16]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d102      	bne.n	8005f0a <_printf_float+0x1b2>
 8005f04:	6829      	ldr	r1, [r5, #0]
 8005f06:	07c9      	lsls	r1, r1, #31
 8005f08:	d50b      	bpl.n	8005f22 <_printf_float+0x1ca>
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	189b      	adds	r3, r3, r2
 8005f0e:	612b      	str	r3, [r5, #16]
 8005f10:	e007      	b.n	8005f22 <_printf_float+0x1ca>
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d103      	bne.n	8005f1e <_printf_float+0x1c6>
 8005f16:	2201      	movs	r2, #1
 8005f18:	6829      	ldr	r1, [r5, #0]
 8005f1a:	4211      	tst	r1, r2
 8005f1c:	d000      	beq.n	8005f20 <_printf_float+0x1c8>
 8005f1e:	1c9a      	adds	r2, r3, #2
 8005f20:	612a      	str	r2, [r5, #16]
 8005f22:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005f24:	2400      	movs	r4, #0
 8005f26:	65ab      	str	r3, [r5, #88]	@ 0x58
 8005f28:	e7cd      	b.n	8005ec6 <_printf_float+0x16e>
 8005f2a:	2367      	movs	r3, #103	@ 0x67
 8005f2c:	930c      	str	r3, [sp, #48]	@ 0x30
 8005f2e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005f30:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005f32:	4299      	cmp	r1, r3
 8005f34:	db06      	blt.n	8005f44 <_printf_float+0x1ec>
 8005f36:	682b      	ldr	r3, [r5, #0]
 8005f38:	6129      	str	r1, [r5, #16]
 8005f3a:	07db      	lsls	r3, r3, #31
 8005f3c:	d5f1      	bpl.n	8005f22 <_printf_float+0x1ca>
 8005f3e:	3101      	adds	r1, #1
 8005f40:	6129      	str	r1, [r5, #16]
 8005f42:	e7ee      	b.n	8005f22 <_printf_float+0x1ca>
 8005f44:	2201      	movs	r2, #1
 8005f46:	2900      	cmp	r1, #0
 8005f48:	dce0      	bgt.n	8005f0c <_printf_float+0x1b4>
 8005f4a:	1892      	adds	r2, r2, r2
 8005f4c:	1a52      	subs	r2, r2, r1
 8005f4e:	e7dd      	b.n	8005f0c <_printf_float+0x1b4>
 8005f50:	682a      	ldr	r2, [r5, #0]
 8005f52:	0553      	lsls	r3, r2, #21
 8005f54:	d408      	bmi.n	8005f68 <_printf_float+0x210>
 8005f56:	692b      	ldr	r3, [r5, #16]
 8005f58:	003a      	movs	r2, r7
 8005f5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005f5c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f5e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005f60:	47a0      	blx	r4
 8005f62:	3001      	adds	r0, #1
 8005f64:	d129      	bne.n	8005fba <_printf_float+0x262>
 8005f66:	e753      	b.n	8005e10 <_printf_float+0xb8>
 8005f68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f6a:	2b65      	cmp	r3, #101	@ 0x65
 8005f6c:	d800      	bhi.n	8005f70 <_printf_float+0x218>
 8005f6e:	e0da      	b.n	8006126 <_printf_float+0x3ce>
 8005f70:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8005f72:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8005f74:	2200      	movs	r2, #0
 8005f76:	2300      	movs	r3, #0
 8005f78:	f7fa fa68 	bl	800044c <__aeabi_dcmpeq>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	d033      	beq.n	8005fe8 <_printf_float+0x290>
 8005f80:	2301      	movs	r3, #1
 8005f82:	4a37      	ldr	r2, [pc, #220]	@ (8006060 <_printf_float+0x308>)
 8005f84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005f86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f88:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005f8a:	47a0      	blx	r4
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	d100      	bne.n	8005f92 <_printf_float+0x23a>
 8005f90:	e73e      	b.n	8005e10 <_printf_float+0xb8>
 8005f92:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8005f94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005f96:	42b3      	cmp	r3, r6
 8005f98:	db02      	blt.n	8005fa0 <_printf_float+0x248>
 8005f9a:	682b      	ldr	r3, [r5, #0]
 8005f9c:	07db      	lsls	r3, r3, #31
 8005f9e:	d50c      	bpl.n	8005fba <_printf_float+0x262>
 8005fa0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005fa2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fa4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005fa6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005fa8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005faa:	47a0      	blx	r4
 8005fac:	2400      	movs	r4, #0
 8005fae:	3001      	adds	r0, #1
 8005fb0:	d100      	bne.n	8005fb4 <_printf_float+0x25c>
 8005fb2:	e72d      	b.n	8005e10 <_printf_float+0xb8>
 8005fb4:	1e73      	subs	r3, r6, #1
 8005fb6:	42a3      	cmp	r3, r4
 8005fb8:	dc0a      	bgt.n	8005fd0 <_printf_float+0x278>
 8005fba:	682b      	ldr	r3, [r5, #0]
 8005fbc:	079b      	lsls	r3, r3, #30
 8005fbe:	d500      	bpl.n	8005fc2 <_printf_float+0x26a>
 8005fc0:	e105      	b.n	80061ce <_printf_float+0x476>
 8005fc2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005fc4:	68e8      	ldr	r0, [r5, #12]
 8005fc6:	4298      	cmp	r0, r3
 8005fc8:	db00      	blt.n	8005fcc <_printf_float+0x274>
 8005fca:	e723      	b.n	8005e14 <_printf_float+0xbc>
 8005fcc:	0018      	movs	r0, r3
 8005fce:	e721      	b.n	8005e14 <_printf_float+0xbc>
 8005fd0:	002a      	movs	r2, r5
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005fd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fd8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005fda:	321a      	adds	r2, #26
 8005fdc:	47b8      	blx	r7
 8005fde:	3001      	adds	r0, #1
 8005fe0:	d100      	bne.n	8005fe4 <_printf_float+0x28c>
 8005fe2:	e715      	b.n	8005e10 <_printf_float+0xb8>
 8005fe4:	3401      	adds	r4, #1
 8005fe6:	e7e5      	b.n	8005fb4 <_printf_float+0x25c>
 8005fe8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	dc3a      	bgt.n	8006064 <_printf_float+0x30c>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8006060 <_printf_float+0x308>)
 8005ff2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005ff4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ff6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005ff8:	47a0      	blx	r4
 8005ffa:	3001      	adds	r0, #1
 8005ffc:	d100      	bne.n	8006000 <_printf_float+0x2a8>
 8005ffe:	e707      	b.n	8005e10 <_printf_float+0xb8>
 8006000:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8006002:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006004:	4333      	orrs	r3, r6
 8006006:	d102      	bne.n	800600e <_printf_float+0x2b6>
 8006008:	682b      	ldr	r3, [r5, #0]
 800600a:	07db      	lsls	r3, r3, #31
 800600c:	d5d5      	bpl.n	8005fba <_printf_float+0x262>
 800600e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006010:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006012:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006014:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006016:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006018:	47a0      	blx	r4
 800601a:	2300      	movs	r3, #0
 800601c:	3001      	adds	r0, #1
 800601e:	d100      	bne.n	8006022 <_printf_float+0x2ca>
 8006020:	e6f6      	b.n	8005e10 <_printf_float+0xb8>
 8006022:	930c      	str	r3, [sp, #48]	@ 0x30
 8006024:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006026:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006028:	425b      	negs	r3, r3
 800602a:	4293      	cmp	r3, r2
 800602c:	dc01      	bgt.n	8006032 <_printf_float+0x2da>
 800602e:	0033      	movs	r3, r6
 8006030:	e792      	b.n	8005f58 <_printf_float+0x200>
 8006032:	002a      	movs	r2, r5
 8006034:	2301      	movs	r3, #1
 8006036:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006038:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800603a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800603c:	321a      	adds	r2, #26
 800603e:	47a0      	blx	r4
 8006040:	3001      	adds	r0, #1
 8006042:	d100      	bne.n	8006046 <_printf_float+0x2ee>
 8006044:	e6e4      	b.n	8005e10 <_printf_float+0xb8>
 8006046:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006048:	3301      	adds	r3, #1
 800604a:	e7ea      	b.n	8006022 <_printf_float+0x2ca>
 800604c:	7fefffff 	.word	0x7fefffff
 8006050:	0800a734 	.word	0x0800a734
 8006054:	0800a738 	.word	0x0800a738
 8006058:	0800a73c 	.word	0x0800a73c
 800605c:	0800a740 	.word	0x0800a740
 8006060:	0800a744 	.word	0x0800a744
 8006064:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006066:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8006068:	930c      	str	r3, [sp, #48]	@ 0x30
 800606a:	429e      	cmp	r6, r3
 800606c:	dd00      	ble.n	8006070 <_printf_float+0x318>
 800606e:	001e      	movs	r6, r3
 8006070:	2e00      	cmp	r6, #0
 8006072:	dc31      	bgt.n	80060d8 <_printf_float+0x380>
 8006074:	43f3      	mvns	r3, r6
 8006076:	2400      	movs	r4, #0
 8006078:	17db      	asrs	r3, r3, #31
 800607a:	4033      	ands	r3, r6
 800607c:	930e      	str	r3, [sp, #56]	@ 0x38
 800607e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8006080:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006082:	1af3      	subs	r3, r6, r3
 8006084:	42a3      	cmp	r3, r4
 8006086:	dc30      	bgt.n	80060ea <_printf_float+0x392>
 8006088:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800608a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800608c:	429a      	cmp	r2, r3
 800608e:	dc38      	bgt.n	8006102 <_printf_float+0x3aa>
 8006090:	682b      	ldr	r3, [r5, #0]
 8006092:	07db      	lsls	r3, r3, #31
 8006094:	d435      	bmi.n	8006102 <_printf_float+0x3aa>
 8006096:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8006098:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800609a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800609c:	1b9b      	subs	r3, r3, r6
 800609e:	1b14      	subs	r4, r2, r4
 80060a0:	429c      	cmp	r4, r3
 80060a2:	dd00      	ble.n	80060a6 <_printf_float+0x34e>
 80060a4:	001c      	movs	r4, r3
 80060a6:	2c00      	cmp	r4, #0
 80060a8:	dc34      	bgt.n	8006114 <_printf_float+0x3bc>
 80060aa:	43e3      	mvns	r3, r4
 80060ac:	2600      	movs	r6, #0
 80060ae:	17db      	asrs	r3, r3, #31
 80060b0:	401c      	ands	r4, r3
 80060b2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80060b4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	1b1b      	subs	r3, r3, r4
 80060ba:	42b3      	cmp	r3, r6
 80060bc:	dc00      	bgt.n	80060c0 <_printf_float+0x368>
 80060be:	e77c      	b.n	8005fba <_printf_float+0x262>
 80060c0:	002a      	movs	r2, r5
 80060c2:	2301      	movs	r3, #1
 80060c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060c8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80060ca:	321a      	adds	r2, #26
 80060cc:	47b8      	blx	r7
 80060ce:	3001      	adds	r0, #1
 80060d0:	d100      	bne.n	80060d4 <_printf_float+0x37c>
 80060d2:	e69d      	b.n	8005e10 <_printf_float+0xb8>
 80060d4:	3601      	adds	r6, #1
 80060d6:	e7ec      	b.n	80060b2 <_printf_float+0x35a>
 80060d8:	0033      	movs	r3, r6
 80060da:	003a      	movs	r2, r7
 80060dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060e0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80060e2:	47a0      	blx	r4
 80060e4:	3001      	adds	r0, #1
 80060e6:	d1c5      	bne.n	8006074 <_printf_float+0x31c>
 80060e8:	e692      	b.n	8005e10 <_printf_float+0xb8>
 80060ea:	002a      	movs	r2, r5
 80060ec:	2301      	movs	r3, #1
 80060ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060f0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060f2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80060f4:	321a      	adds	r2, #26
 80060f6:	47b0      	blx	r6
 80060f8:	3001      	adds	r0, #1
 80060fa:	d100      	bne.n	80060fe <_printf_float+0x3a6>
 80060fc:	e688      	b.n	8005e10 <_printf_float+0xb8>
 80060fe:	3401      	adds	r4, #1
 8006100:	e7bd      	b.n	800607e <_printf_float+0x326>
 8006102:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006104:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006106:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006108:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800610a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800610c:	47a0      	blx	r4
 800610e:	3001      	adds	r0, #1
 8006110:	d1c1      	bne.n	8006096 <_printf_float+0x33e>
 8006112:	e67d      	b.n	8005e10 <_printf_float+0xb8>
 8006114:	19ba      	adds	r2, r7, r6
 8006116:	0023      	movs	r3, r4
 8006118:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800611a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800611c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800611e:	47b0      	blx	r6
 8006120:	3001      	adds	r0, #1
 8006122:	d1c2      	bne.n	80060aa <_printf_float+0x352>
 8006124:	e674      	b.n	8005e10 <_printf_float+0xb8>
 8006126:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006128:	930c      	str	r3, [sp, #48]	@ 0x30
 800612a:	2b01      	cmp	r3, #1
 800612c:	dc02      	bgt.n	8006134 <_printf_float+0x3dc>
 800612e:	2301      	movs	r3, #1
 8006130:	421a      	tst	r2, r3
 8006132:	d039      	beq.n	80061a8 <_printf_float+0x450>
 8006134:	2301      	movs	r3, #1
 8006136:	003a      	movs	r2, r7
 8006138:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800613a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800613c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800613e:	47b0      	blx	r6
 8006140:	3001      	adds	r0, #1
 8006142:	d100      	bne.n	8006146 <_printf_float+0x3ee>
 8006144:	e664      	b.n	8005e10 <_printf_float+0xb8>
 8006146:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006148:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800614a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800614c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800614e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006150:	47b0      	blx	r6
 8006152:	3001      	adds	r0, #1
 8006154:	d100      	bne.n	8006158 <_printf_float+0x400>
 8006156:	e65b      	b.n	8005e10 <_printf_float+0xb8>
 8006158:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800615a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800615c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800615e:	2200      	movs	r2, #0
 8006160:	3b01      	subs	r3, #1
 8006162:	930c      	str	r3, [sp, #48]	@ 0x30
 8006164:	2300      	movs	r3, #0
 8006166:	f7fa f971 	bl	800044c <__aeabi_dcmpeq>
 800616a:	2800      	cmp	r0, #0
 800616c:	d11a      	bne.n	80061a4 <_printf_float+0x44c>
 800616e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006170:	1c7a      	adds	r2, r7, #1
 8006172:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006174:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006176:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006178:	47b0      	blx	r6
 800617a:	3001      	adds	r0, #1
 800617c:	d10e      	bne.n	800619c <_printf_float+0x444>
 800617e:	e647      	b.n	8005e10 <_printf_float+0xb8>
 8006180:	002a      	movs	r2, r5
 8006182:	2301      	movs	r3, #1
 8006184:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006186:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006188:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800618a:	321a      	adds	r2, #26
 800618c:	47b8      	blx	r7
 800618e:	3001      	adds	r0, #1
 8006190:	d100      	bne.n	8006194 <_printf_float+0x43c>
 8006192:	e63d      	b.n	8005e10 <_printf_float+0xb8>
 8006194:	3601      	adds	r6, #1
 8006196:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006198:	429e      	cmp	r6, r3
 800619a:	dbf1      	blt.n	8006180 <_printf_float+0x428>
 800619c:	002a      	movs	r2, r5
 800619e:	0023      	movs	r3, r4
 80061a0:	3250      	adds	r2, #80	@ 0x50
 80061a2:	e6da      	b.n	8005f5a <_printf_float+0x202>
 80061a4:	2600      	movs	r6, #0
 80061a6:	e7f6      	b.n	8006196 <_printf_float+0x43e>
 80061a8:	003a      	movs	r2, r7
 80061aa:	e7e2      	b.n	8006172 <_printf_float+0x41a>
 80061ac:	002a      	movs	r2, r5
 80061ae:	2301      	movs	r3, #1
 80061b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061b4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80061b6:	3219      	adds	r2, #25
 80061b8:	47b0      	blx	r6
 80061ba:	3001      	adds	r0, #1
 80061bc:	d100      	bne.n	80061c0 <_printf_float+0x468>
 80061be:	e627      	b.n	8005e10 <_printf_float+0xb8>
 80061c0:	3401      	adds	r4, #1
 80061c2:	68eb      	ldr	r3, [r5, #12]
 80061c4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80061c6:	1a9b      	subs	r3, r3, r2
 80061c8:	42a3      	cmp	r3, r4
 80061ca:	dcef      	bgt.n	80061ac <_printf_float+0x454>
 80061cc:	e6f9      	b.n	8005fc2 <_printf_float+0x26a>
 80061ce:	2400      	movs	r4, #0
 80061d0:	e7f7      	b.n	80061c2 <_printf_float+0x46a>
 80061d2:	46c0      	nop			@ (mov r8, r8)

080061d4 <_printf_common>:
 80061d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061d6:	0016      	movs	r6, r2
 80061d8:	9301      	str	r3, [sp, #4]
 80061da:	688a      	ldr	r2, [r1, #8]
 80061dc:	690b      	ldr	r3, [r1, #16]
 80061de:	000c      	movs	r4, r1
 80061e0:	9000      	str	r0, [sp, #0]
 80061e2:	4293      	cmp	r3, r2
 80061e4:	da00      	bge.n	80061e8 <_printf_common+0x14>
 80061e6:	0013      	movs	r3, r2
 80061e8:	0022      	movs	r2, r4
 80061ea:	6033      	str	r3, [r6, #0]
 80061ec:	3243      	adds	r2, #67	@ 0x43
 80061ee:	7812      	ldrb	r2, [r2, #0]
 80061f0:	2a00      	cmp	r2, #0
 80061f2:	d001      	beq.n	80061f8 <_printf_common+0x24>
 80061f4:	3301      	adds	r3, #1
 80061f6:	6033      	str	r3, [r6, #0]
 80061f8:	6823      	ldr	r3, [r4, #0]
 80061fa:	069b      	lsls	r3, r3, #26
 80061fc:	d502      	bpl.n	8006204 <_printf_common+0x30>
 80061fe:	6833      	ldr	r3, [r6, #0]
 8006200:	3302      	adds	r3, #2
 8006202:	6033      	str	r3, [r6, #0]
 8006204:	6822      	ldr	r2, [r4, #0]
 8006206:	2306      	movs	r3, #6
 8006208:	0015      	movs	r5, r2
 800620a:	401d      	ands	r5, r3
 800620c:	421a      	tst	r2, r3
 800620e:	d027      	beq.n	8006260 <_printf_common+0x8c>
 8006210:	0023      	movs	r3, r4
 8006212:	3343      	adds	r3, #67	@ 0x43
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	1e5a      	subs	r2, r3, #1
 8006218:	4193      	sbcs	r3, r2
 800621a:	6822      	ldr	r2, [r4, #0]
 800621c:	0692      	lsls	r2, r2, #26
 800621e:	d430      	bmi.n	8006282 <_printf_common+0xae>
 8006220:	0022      	movs	r2, r4
 8006222:	9901      	ldr	r1, [sp, #4]
 8006224:	9800      	ldr	r0, [sp, #0]
 8006226:	9d08      	ldr	r5, [sp, #32]
 8006228:	3243      	adds	r2, #67	@ 0x43
 800622a:	47a8      	blx	r5
 800622c:	3001      	adds	r0, #1
 800622e:	d025      	beq.n	800627c <_printf_common+0xa8>
 8006230:	2206      	movs	r2, #6
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	2500      	movs	r5, #0
 8006236:	4013      	ands	r3, r2
 8006238:	2b04      	cmp	r3, #4
 800623a:	d105      	bne.n	8006248 <_printf_common+0x74>
 800623c:	6833      	ldr	r3, [r6, #0]
 800623e:	68e5      	ldr	r5, [r4, #12]
 8006240:	1aed      	subs	r5, r5, r3
 8006242:	43eb      	mvns	r3, r5
 8006244:	17db      	asrs	r3, r3, #31
 8006246:	401d      	ands	r5, r3
 8006248:	68a3      	ldr	r3, [r4, #8]
 800624a:	6922      	ldr	r2, [r4, #16]
 800624c:	4293      	cmp	r3, r2
 800624e:	dd01      	ble.n	8006254 <_printf_common+0x80>
 8006250:	1a9b      	subs	r3, r3, r2
 8006252:	18ed      	adds	r5, r5, r3
 8006254:	2600      	movs	r6, #0
 8006256:	42b5      	cmp	r5, r6
 8006258:	d120      	bne.n	800629c <_printf_common+0xc8>
 800625a:	2000      	movs	r0, #0
 800625c:	e010      	b.n	8006280 <_printf_common+0xac>
 800625e:	3501      	adds	r5, #1
 8006260:	68e3      	ldr	r3, [r4, #12]
 8006262:	6832      	ldr	r2, [r6, #0]
 8006264:	1a9b      	subs	r3, r3, r2
 8006266:	42ab      	cmp	r3, r5
 8006268:	ddd2      	ble.n	8006210 <_printf_common+0x3c>
 800626a:	0022      	movs	r2, r4
 800626c:	2301      	movs	r3, #1
 800626e:	9901      	ldr	r1, [sp, #4]
 8006270:	9800      	ldr	r0, [sp, #0]
 8006272:	9f08      	ldr	r7, [sp, #32]
 8006274:	3219      	adds	r2, #25
 8006276:	47b8      	blx	r7
 8006278:	3001      	adds	r0, #1
 800627a:	d1f0      	bne.n	800625e <_printf_common+0x8a>
 800627c:	2001      	movs	r0, #1
 800627e:	4240      	negs	r0, r0
 8006280:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006282:	2030      	movs	r0, #48	@ 0x30
 8006284:	18e1      	adds	r1, r4, r3
 8006286:	3143      	adds	r1, #67	@ 0x43
 8006288:	7008      	strb	r0, [r1, #0]
 800628a:	0021      	movs	r1, r4
 800628c:	1c5a      	adds	r2, r3, #1
 800628e:	3145      	adds	r1, #69	@ 0x45
 8006290:	7809      	ldrb	r1, [r1, #0]
 8006292:	18a2      	adds	r2, r4, r2
 8006294:	3243      	adds	r2, #67	@ 0x43
 8006296:	3302      	adds	r3, #2
 8006298:	7011      	strb	r1, [r2, #0]
 800629a:	e7c1      	b.n	8006220 <_printf_common+0x4c>
 800629c:	0022      	movs	r2, r4
 800629e:	2301      	movs	r3, #1
 80062a0:	9901      	ldr	r1, [sp, #4]
 80062a2:	9800      	ldr	r0, [sp, #0]
 80062a4:	9f08      	ldr	r7, [sp, #32]
 80062a6:	321a      	adds	r2, #26
 80062a8:	47b8      	blx	r7
 80062aa:	3001      	adds	r0, #1
 80062ac:	d0e6      	beq.n	800627c <_printf_common+0xa8>
 80062ae:	3601      	adds	r6, #1
 80062b0:	e7d1      	b.n	8006256 <_printf_common+0x82>
	...

080062b4 <_printf_i>:
 80062b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062b6:	b08b      	sub	sp, #44	@ 0x2c
 80062b8:	9206      	str	r2, [sp, #24]
 80062ba:	000a      	movs	r2, r1
 80062bc:	3243      	adds	r2, #67	@ 0x43
 80062be:	9307      	str	r3, [sp, #28]
 80062c0:	9005      	str	r0, [sp, #20]
 80062c2:	9203      	str	r2, [sp, #12]
 80062c4:	7e0a      	ldrb	r2, [r1, #24]
 80062c6:	000c      	movs	r4, r1
 80062c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80062ca:	2a78      	cmp	r2, #120	@ 0x78
 80062cc:	d809      	bhi.n	80062e2 <_printf_i+0x2e>
 80062ce:	2a62      	cmp	r2, #98	@ 0x62
 80062d0:	d80b      	bhi.n	80062ea <_printf_i+0x36>
 80062d2:	2a00      	cmp	r2, #0
 80062d4:	d100      	bne.n	80062d8 <_printf_i+0x24>
 80062d6:	e0bc      	b.n	8006452 <_printf_i+0x19e>
 80062d8:	497b      	ldr	r1, [pc, #492]	@ (80064c8 <_printf_i+0x214>)
 80062da:	9104      	str	r1, [sp, #16]
 80062dc:	2a58      	cmp	r2, #88	@ 0x58
 80062de:	d100      	bne.n	80062e2 <_printf_i+0x2e>
 80062e0:	e090      	b.n	8006404 <_printf_i+0x150>
 80062e2:	0025      	movs	r5, r4
 80062e4:	3542      	adds	r5, #66	@ 0x42
 80062e6:	702a      	strb	r2, [r5, #0]
 80062e8:	e022      	b.n	8006330 <_printf_i+0x7c>
 80062ea:	0010      	movs	r0, r2
 80062ec:	3863      	subs	r0, #99	@ 0x63
 80062ee:	2815      	cmp	r0, #21
 80062f0:	d8f7      	bhi.n	80062e2 <_printf_i+0x2e>
 80062f2:	f7f9 ff1b 	bl	800012c <__gnu_thumb1_case_shi>
 80062f6:	0016      	.short	0x0016
 80062f8:	fff6001f 	.word	0xfff6001f
 80062fc:	fff6fff6 	.word	0xfff6fff6
 8006300:	001ffff6 	.word	0x001ffff6
 8006304:	fff6fff6 	.word	0xfff6fff6
 8006308:	fff6fff6 	.word	0xfff6fff6
 800630c:	003600a1 	.word	0x003600a1
 8006310:	fff60080 	.word	0xfff60080
 8006314:	00b2fff6 	.word	0x00b2fff6
 8006318:	0036fff6 	.word	0x0036fff6
 800631c:	fff6fff6 	.word	0xfff6fff6
 8006320:	0084      	.short	0x0084
 8006322:	0025      	movs	r5, r4
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	3542      	adds	r5, #66	@ 0x42
 8006328:	1d11      	adds	r1, r2, #4
 800632a:	6019      	str	r1, [r3, #0]
 800632c:	6813      	ldr	r3, [r2, #0]
 800632e:	702b      	strb	r3, [r5, #0]
 8006330:	2301      	movs	r3, #1
 8006332:	e0a0      	b.n	8006476 <_printf_i+0x1c2>
 8006334:	6818      	ldr	r0, [r3, #0]
 8006336:	6809      	ldr	r1, [r1, #0]
 8006338:	1d02      	adds	r2, r0, #4
 800633a:	060d      	lsls	r5, r1, #24
 800633c:	d50b      	bpl.n	8006356 <_printf_i+0xa2>
 800633e:	6806      	ldr	r6, [r0, #0]
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	2e00      	cmp	r6, #0
 8006344:	da03      	bge.n	800634e <_printf_i+0x9a>
 8006346:	232d      	movs	r3, #45	@ 0x2d
 8006348:	9a03      	ldr	r2, [sp, #12]
 800634a:	4276      	negs	r6, r6
 800634c:	7013      	strb	r3, [r2, #0]
 800634e:	4b5e      	ldr	r3, [pc, #376]	@ (80064c8 <_printf_i+0x214>)
 8006350:	270a      	movs	r7, #10
 8006352:	9304      	str	r3, [sp, #16]
 8006354:	e018      	b.n	8006388 <_printf_i+0xd4>
 8006356:	6806      	ldr	r6, [r0, #0]
 8006358:	601a      	str	r2, [r3, #0]
 800635a:	0649      	lsls	r1, r1, #25
 800635c:	d5f1      	bpl.n	8006342 <_printf_i+0x8e>
 800635e:	b236      	sxth	r6, r6
 8006360:	e7ef      	b.n	8006342 <_printf_i+0x8e>
 8006362:	6808      	ldr	r0, [r1, #0]
 8006364:	6819      	ldr	r1, [r3, #0]
 8006366:	c940      	ldmia	r1!, {r6}
 8006368:	0605      	lsls	r5, r0, #24
 800636a:	d402      	bmi.n	8006372 <_printf_i+0xbe>
 800636c:	0640      	lsls	r0, r0, #25
 800636e:	d500      	bpl.n	8006372 <_printf_i+0xbe>
 8006370:	b2b6      	uxth	r6, r6
 8006372:	6019      	str	r1, [r3, #0]
 8006374:	4b54      	ldr	r3, [pc, #336]	@ (80064c8 <_printf_i+0x214>)
 8006376:	270a      	movs	r7, #10
 8006378:	9304      	str	r3, [sp, #16]
 800637a:	2a6f      	cmp	r2, #111	@ 0x6f
 800637c:	d100      	bne.n	8006380 <_printf_i+0xcc>
 800637e:	3f02      	subs	r7, #2
 8006380:	0023      	movs	r3, r4
 8006382:	2200      	movs	r2, #0
 8006384:	3343      	adds	r3, #67	@ 0x43
 8006386:	701a      	strb	r2, [r3, #0]
 8006388:	6863      	ldr	r3, [r4, #4]
 800638a:	60a3      	str	r3, [r4, #8]
 800638c:	2b00      	cmp	r3, #0
 800638e:	db03      	blt.n	8006398 <_printf_i+0xe4>
 8006390:	2104      	movs	r1, #4
 8006392:	6822      	ldr	r2, [r4, #0]
 8006394:	438a      	bics	r2, r1
 8006396:	6022      	str	r2, [r4, #0]
 8006398:	2e00      	cmp	r6, #0
 800639a:	d102      	bne.n	80063a2 <_printf_i+0xee>
 800639c:	9d03      	ldr	r5, [sp, #12]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00c      	beq.n	80063bc <_printf_i+0x108>
 80063a2:	9d03      	ldr	r5, [sp, #12]
 80063a4:	0030      	movs	r0, r6
 80063a6:	0039      	movs	r1, r7
 80063a8:	f7f9 ff50 	bl	800024c <__aeabi_uidivmod>
 80063ac:	9b04      	ldr	r3, [sp, #16]
 80063ae:	3d01      	subs	r5, #1
 80063b0:	5c5b      	ldrb	r3, [r3, r1]
 80063b2:	702b      	strb	r3, [r5, #0]
 80063b4:	0033      	movs	r3, r6
 80063b6:	0006      	movs	r6, r0
 80063b8:	429f      	cmp	r7, r3
 80063ba:	d9f3      	bls.n	80063a4 <_printf_i+0xf0>
 80063bc:	2f08      	cmp	r7, #8
 80063be:	d109      	bne.n	80063d4 <_printf_i+0x120>
 80063c0:	6823      	ldr	r3, [r4, #0]
 80063c2:	07db      	lsls	r3, r3, #31
 80063c4:	d506      	bpl.n	80063d4 <_printf_i+0x120>
 80063c6:	6862      	ldr	r2, [r4, #4]
 80063c8:	6923      	ldr	r3, [r4, #16]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	dc02      	bgt.n	80063d4 <_printf_i+0x120>
 80063ce:	2330      	movs	r3, #48	@ 0x30
 80063d0:	3d01      	subs	r5, #1
 80063d2:	702b      	strb	r3, [r5, #0]
 80063d4:	9b03      	ldr	r3, [sp, #12]
 80063d6:	1b5b      	subs	r3, r3, r5
 80063d8:	6123      	str	r3, [r4, #16]
 80063da:	9b07      	ldr	r3, [sp, #28]
 80063dc:	0021      	movs	r1, r4
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	9805      	ldr	r0, [sp, #20]
 80063e2:	9b06      	ldr	r3, [sp, #24]
 80063e4:	aa09      	add	r2, sp, #36	@ 0x24
 80063e6:	f7ff fef5 	bl	80061d4 <_printf_common>
 80063ea:	3001      	adds	r0, #1
 80063ec:	d148      	bne.n	8006480 <_printf_i+0x1cc>
 80063ee:	2001      	movs	r0, #1
 80063f0:	4240      	negs	r0, r0
 80063f2:	b00b      	add	sp, #44	@ 0x2c
 80063f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063f6:	2220      	movs	r2, #32
 80063f8:	6809      	ldr	r1, [r1, #0]
 80063fa:	430a      	orrs	r2, r1
 80063fc:	6022      	str	r2, [r4, #0]
 80063fe:	2278      	movs	r2, #120	@ 0x78
 8006400:	4932      	ldr	r1, [pc, #200]	@ (80064cc <_printf_i+0x218>)
 8006402:	9104      	str	r1, [sp, #16]
 8006404:	0021      	movs	r1, r4
 8006406:	3145      	adds	r1, #69	@ 0x45
 8006408:	700a      	strb	r2, [r1, #0]
 800640a:	6819      	ldr	r1, [r3, #0]
 800640c:	6822      	ldr	r2, [r4, #0]
 800640e:	c940      	ldmia	r1!, {r6}
 8006410:	0610      	lsls	r0, r2, #24
 8006412:	d402      	bmi.n	800641a <_printf_i+0x166>
 8006414:	0650      	lsls	r0, r2, #25
 8006416:	d500      	bpl.n	800641a <_printf_i+0x166>
 8006418:	b2b6      	uxth	r6, r6
 800641a:	6019      	str	r1, [r3, #0]
 800641c:	07d3      	lsls	r3, r2, #31
 800641e:	d502      	bpl.n	8006426 <_printf_i+0x172>
 8006420:	2320      	movs	r3, #32
 8006422:	4313      	orrs	r3, r2
 8006424:	6023      	str	r3, [r4, #0]
 8006426:	2e00      	cmp	r6, #0
 8006428:	d001      	beq.n	800642e <_printf_i+0x17a>
 800642a:	2710      	movs	r7, #16
 800642c:	e7a8      	b.n	8006380 <_printf_i+0xcc>
 800642e:	2220      	movs	r2, #32
 8006430:	6823      	ldr	r3, [r4, #0]
 8006432:	4393      	bics	r3, r2
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	e7f8      	b.n	800642a <_printf_i+0x176>
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	680d      	ldr	r5, [r1, #0]
 800643c:	1d10      	adds	r0, r2, #4
 800643e:	6949      	ldr	r1, [r1, #20]
 8006440:	6018      	str	r0, [r3, #0]
 8006442:	6813      	ldr	r3, [r2, #0]
 8006444:	062e      	lsls	r6, r5, #24
 8006446:	d501      	bpl.n	800644c <_printf_i+0x198>
 8006448:	6019      	str	r1, [r3, #0]
 800644a:	e002      	b.n	8006452 <_printf_i+0x19e>
 800644c:	066d      	lsls	r5, r5, #25
 800644e:	d5fb      	bpl.n	8006448 <_printf_i+0x194>
 8006450:	8019      	strh	r1, [r3, #0]
 8006452:	2300      	movs	r3, #0
 8006454:	9d03      	ldr	r5, [sp, #12]
 8006456:	6123      	str	r3, [r4, #16]
 8006458:	e7bf      	b.n	80063da <_printf_i+0x126>
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	1d11      	adds	r1, r2, #4
 800645e:	6019      	str	r1, [r3, #0]
 8006460:	6815      	ldr	r5, [r2, #0]
 8006462:	2100      	movs	r1, #0
 8006464:	0028      	movs	r0, r5
 8006466:	6862      	ldr	r2, [r4, #4]
 8006468:	f000 fd07 	bl	8006e7a <memchr>
 800646c:	2800      	cmp	r0, #0
 800646e:	d001      	beq.n	8006474 <_printf_i+0x1c0>
 8006470:	1b40      	subs	r0, r0, r5
 8006472:	6060      	str	r0, [r4, #4]
 8006474:	6863      	ldr	r3, [r4, #4]
 8006476:	6123      	str	r3, [r4, #16]
 8006478:	2300      	movs	r3, #0
 800647a:	9a03      	ldr	r2, [sp, #12]
 800647c:	7013      	strb	r3, [r2, #0]
 800647e:	e7ac      	b.n	80063da <_printf_i+0x126>
 8006480:	002a      	movs	r2, r5
 8006482:	6923      	ldr	r3, [r4, #16]
 8006484:	9906      	ldr	r1, [sp, #24]
 8006486:	9805      	ldr	r0, [sp, #20]
 8006488:	9d07      	ldr	r5, [sp, #28]
 800648a:	47a8      	blx	r5
 800648c:	3001      	adds	r0, #1
 800648e:	d0ae      	beq.n	80063ee <_printf_i+0x13a>
 8006490:	6823      	ldr	r3, [r4, #0]
 8006492:	079b      	lsls	r3, r3, #30
 8006494:	d415      	bmi.n	80064c2 <_printf_i+0x20e>
 8006496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006498:	68e0      	ldr	r0, [r4, #12]
 800649a:	4298      	cmp	r0, r3
 800649c:	daa9      	bge.n	80063f2 <_printf_i+0x13e>
 800649e:	0018      	movs	r0, r3
 80064a0:	e7a7      	b.n	80063f2 <_printf_i+0x13e>
 80064a2:	0022      	movs	r2, r4
 80064a4:	2301      	movs	r3, #1
 80064a6:	9906      	ldr	r1, [sp, #24]
 80064a8:	9805      	ldr	r0, [sp, #20]
 80064aa:	9e07      	ldr	r6, [sp, #28]
 80064ac:	3219      	adds	r2, #25
 80064ae:	47b0      	blx	r6
 80064b0:	3001      	adds	r0, #1
 80064b2:	d09c      	beq.n	80063ee <_printf_i+0x13a>
 80064b4:	3501      	adds	r5, #1
 80064b6:	68e3      	ldr	r3, [r4, #12]
 80064b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064ba:	1a9b      	subs	r3, r3, r2
 80064bc:	42ab      	cmp	r3, r5
 80064be:	dcf0      	bgt.n	80064a2 <_printf_i+0x1ee>
 80064c0:	e7e9      	b.n	8006496 <_printf_i+0x1e2>
 80064c2:	2500      	movs	r5, #0
 80064c4:	e7f7      	b.n	80064b6 <_printf_i+0x202>
 80064c6:	46c0      	nop			@ (mov r8, r8)
 80064c8:	0800a746 	.word	0x0800a746
 80064cc:	0800a757 	.word	0x0800a757

080064d0 <_scanf_float>:
 80064d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064d2:	b08b      	sub	sp, #44	@ 0x2c
 80064d4:	0016      	movs	r6, r2
 80064d6:	9003      	str	r0, [sp, #12]
 80064d8:	22ae      	movs	r2, #174	@ 0xae
 80064da:	2000      	movs	r0, #0
 80064dc:	9307      	str	r3, [sp, #28]
 80064de:	688b      	ldr	r3, [r1, #8]
 80064e0:	000c      	movs	r4, r1
 80064e2:	1e59      	subs	r1, r3, #1
 80064e4:	0052      	lsls	r2, r2, #1
 80064e6:	9006      	str	r0, [sp, #24]
 80064e8:	4291      	cmp	r1, r2
 80064ea:	d905      	bls.n	80064f8 <_scanf_float+0x28>
 80064ec:	3b5e      	subs	r3, #94	@ 0x5e
 80064ee:	3bff      	subs	r3, #255	@ 0xff
 80064f0:	9306      	str	r3, [sp, #24]
 80064f2:	235e      	movs	r3, #94	@ 0x5e
 80064f4:	33ff      	adds	r3, #255	@ 0xff
 80064f6:	60a3      	str	r3, [r4, #8]
 80064f8:	23f0      	movs	r3, #240	@ 0xf0
 80064fa:	6822      	ldr	r2, [r4, #0]
 80064fc:	00db      	lsls	r3, r3, #3
 80064fe:	4313      	orrs	r3, r2
 8006500:	6023      	str	r3, [r4, #0]
 8006502:	0023      	movs	r3, r4
 8006504:	2500      	movs	r5, #0
 8006506:	331c      	adds	r3, #28
 8006508:	001f      	movs	r7, r3
 800650a:	9304      	str	r3, [sp, #16]
 800650c:	9502      	str	r5, [sp, #8]
 800650e:	9509      	str	r5, [sp, #36]	@ 0x24
 8006510:	9508      	str	r5, [sp, #32]
 8006512:	9501      	str	r5, [sp, #4]
 8006514:	9505      	str	r5, [sp, #20]
 8006516:	68a2      	ldr	r2, [r4, #8]
 8006518:	2a00      	cmp	r2, #0
 800651a:	d00a      	beq.n	8006532 <_scanf_float+0x62>
 800651c:	6833      	ldr	r3, [r6, #0]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b4e      	cmp	r3, #78	@ 0x4e
 8006522:	d844      	bhi.n	80065ae <_scanf_float+0xde>
 8006524:	0018      	movs	r0, r3
 8006526:	2b40      	cmp	r3, #64	@ 0x40
 8006528:	d82c      	bhi.n	8006584 <_scanf_float+0xb4>
 800652a:	382b      	subs	r0, #43	@ 0x2b
 800652c:	b2c1      	uxtb	r1, r0
 800652e:	290e      	cmp	r1, #14
 8006530:	d92a      	bls.n	8006588 <_scanf_float+0xb8>
 8006532:	9b01      	ldr	r3, [sp, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d003      	beq.n	8006540 <_scanf_float+0x70>
 8006538:	6823      	ldr	r3, [r4, #0]
 800653a:	4aa6      	ldr	r2, [pc, #664]	@ (80067d4 <_scanf_float+0x304>)
 800653c:	4013      	ands	r3, r2
 800653e:	6023      	str	r3, [r4, #0]
 8006540:	9b02      	ldr	r3, [sp, #8]
 8006542:	3b01      	subs	r3, #1
 8006544:	2b01      	cmp	r3, #1
 8006546:	d900      	bls.n	800654a <_scanf_float+0x7a>
 8006548:	e0fe      	b.n	8006748 <_scanf_float+0x278>
 800654a:	25be      	movs	r5, #190	@ 0xbe
 800654c:	006d      	lsls	r5, r5, #1
 800654e:	9b04      	ldr	r3, [sp, #16]
 8006550:	429f      	cmp	r7, r3
 8006552:	d900      	bls.n	8006556 <_scanf_float+0x86>
 8006554:	e0ee      	b.n	8006734 <_scanf_float+0x264>
 8006556:	2001      	movs	r0, #1
 8006558:	b00b      	add	sp, #44	@ 0x2c
 800655a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800655c:	0018      	movs	r0, r3
 800655e:	3861      	subs	r0, #97	@ 0x61
 8006560:	280d      	cmp	r0, #13
 8006562:	d8e6      	bhi.n	8006532 <_scanf_float+0x62>
 8006564:	f7f9 fde2 	bl	800012c <__gnu_thumb1_case_shi>
 8006568:	ffe50089 	.word	0xffe50089
 800656c:	ffe5ffe5 	.word	0xffe5ffe5
 8006570:	00a700bb 	.word	0x00a700bb
 8006574:	ffe5ffe5 	.word	0xffe5ffe5
 8006578:	ffe5008f 	.word	0xffe5008f
 800657c:	ffe5ffe5 	.word	0xffe5ffe5
 8006580:	006bffe5 	.word	0x006bffe5
 8006584:	3841      	subs	r0, #65	@ 0x41
 8006586:	e7eb      	b.n	8006560 <_scanf_float+0x90>
 8006588:	280e      	cmp	r0, #14
 800658a:	d8d2      	bhi.n	8006532 <_scanf_float+0x62>
 800658c:	f7f9 fdce 	bl	800012c <__gnu_thumb1_case_shi>
 8006590:	ffd1004f 	.word	0xffd1004f
 8006594:	009d004f 	.word	0x009d004f
 8006598:	0021ffd1 	.word	0x0021ffd1
 800659c:	00410041 	.word	0x00410041
 80065a0:	00410041 	.word	0x00410041
 80065a4:	00410041 	.word	0x00410041
 80065a8:	00410041 	.word	0x00410041
 80065ac:	0041      	.short	0x0041
 80065ae:	2b6e      	cmp	r3, #110	@ 0x6e
 80065b0:	d80a      	bhi.n	80065c8 <_scanf_float+0xf8>
 80065b2:	2b60      	cmp	r3, #96	@ 0x60
 80065b4:	d8d2      	bhi.n	800655c <_scanf_float+0x8c>
 80065b6:	2b54      	cmp	r3, #84	@ 0x54
 80065b8:	d100      	bne.n	80065bc <_scanf_float+0xec>
 80065ba:	e081      	b.n	80066c0 <_scanf_float+0x1f0>
 80065bc:	2b59      	cmp	r3, #89	@ 0x59
 80065be:	d1b8      	bne.n	8006532 <_scanf_float+0x62>
 80065c0:	2d07      	cmp	r5, #7
 80065c2:	d1b6      	bne.n	8006532 <_scanf_float+0x62>
 80065c4:	2508      	movs	r5, #8
 80065c6:	e02f      	b.n	8006628 <_scanf_float+0x158>
 80065c8:	2b74      	cmp	r3, #116	@ 0x74
 80065ca:	d079      	beq.n	80066c0 <_scanf_float+0x1f0>
 80065cc:	2b79      	cmp	r3, #121	@ 0x79
 80065ce:	d0f7      	beq.n	80065c0 <_scanf_float+0xf0>
 80065d0:	e7af      	b.n	8006532 <_scanf_float+0x62>
 80065d2:	6821      	ldr	r1, [r4, #0]
 80065d4:	05c8      	lsls	r0, r1, #23
 80065d6:	d51c      	bpl.n	8006612 <_scanf_float+0x142>
 80065d8:	2380      	movs	r3, #128	@ 0x80
 80065da:	4399      	bics	r1, r3
 80065dc:	9b01      	ldr	r3, [sp, #4]
 80065de:	6021      	str	r1, [r4, #0]
 80065e0:	3301      	adds	r3, #1
 80065e2:	9301      	str	r3, [sp, #4]
 80065e4:	9b06      	ldr	r3, [sp, #24]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <_scanf_float+0x122>
 80065ea:	3b01      	subs	r3, #1
 80065ec:	3201      	adds	r2, #1
 80065ee:	9306      	str	r3, [sp, #24]
 80065f0:	60a2      	str	r2, [r4, #8]
 80065f2:	68a3      	ldr	r3, [r4, #8]
 80065f4:	3b01      	subs	r3, #1
 80065f6:	60a3      	str	r3, [r4, #8]
 80065f8:	6923      	ldr	r3, [r4, #16]
 80065fa:	3301      	adds	r3, #1
 80065fc:	6123      	str	r3, [r4, #16]
 80065fe:	6873      	ldr	r3, [r6, #4]
 8006600:	3b01      	subs	r3, #1
 8006602:	6073      	str	r3, [r6, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	dc00      	bgt.n	800660a <_scanf_float+0x13a>
 8006608:	e08a      	b.n	8006720 <_scanf_float+0x250>
 800660a:	6833      	ldr	r3, [r6, #0]
 800660c:	3301      	adds	r3, #1
 800660e:	6033      	str	r3, [r6, #0]
 8006610:	e781      	b.n	8006516 <_scanf_float+0x46>
 8006612:	9a02      	ldr	r2, [sp, #8]
 8006614:	1951      	adds	r1, r2, r5
 8006616:	2900      	cmp	r1, #0
 8006618:	d000      	beq.n	800661c <_scanf_float+0x14c>
 800661a:	e78a      	b.n	8006532 <_scanf_float+0x62>
 800661c:	000d      	movs	r5, r1
 800661e:	6822      	ldr	r2, [r4, #0]
 8006620:	486d      	ldr	r0, [pc, #436]	@ (80067d8 <_scanf_float+0x308>)
 8006622:	9102      	str	r1, [sp, #8]
 8006624:	4002      	ands	r2, r0
 8006626:	6022      	str	r2, [r4, #0]
 8006628:	703b      	strb	r3, [r7, #0]
 800662a:	3701      	adds	r7, #1
 800662c:	e7e1      	b.n	80065f2 <_scanf_float+0x122>
 800662e:	2180      	movs	r1, #128	@ 0x80
 8006630:	6822      	ldr	r2, [r4, #0]
 8006632:	420a      	tst	r2, r1
 8006634:	d100      	bne.n	8006638 <_scanf_float+0x168>
 8006636:	e77c      	b.n	8006532 <_scanf_float+0x62>
 8006638:	438a      	bics	r2, r1
 800663a:	6022      	str	r2, [r4, #0]
 800663c:	e7f4      	b.n	8006628 <_scanf_float+0x158>
 800663e:	9a02      	ldr	r2, [sp, #8]
 8006640:	2a00      	cmp	r2, #0
 8006642:	d10f      	bne.n	8006664 <_scanf_float+0x194>
 8006644:	9a01      	ldr	r2, [sp, #4]
 8006646:	2a00      	cmp	r2, #0
 8006648:	d10f      	bne.n	800666a <_scanf_float+0x19a>
 800664a:	6822      	ldr	r2, [r4, #0]
 800664c:	21e0      	movs	r1, #224	@ 0xe0
 800664e:	0010      	movs	r0, r2
 8006650:	00c9      	lsls	r1, r1, #3
 8006652:	4008      	ands	r0, r1
 8006654:	4288      	cmp	r0, r1
 8006656:	d108      	bne.n	800666a <_scanf_float+0x19a>
 8006658:	4960      	ldr	r1, [pc, #384]	@ (80067dc <_scanf_float+0x30c>)
 800665a:	400a      	ands	r2, r1
 800665c:	6022      	str	r2, [r4, #0]
 800665e:	2201      	movs	r2, #1
 8006660:	9202      	str	r2, [sp, #8]
 8006662:	e7e1      	b.n	8006628 <_scanf_float+0x158>
 8006664:	9a02      	ldr	r2, [sp, #8]
 8006666:	2a02      	cmp	r2, #2
 8006668:	d058      	beq.n	800671c <_scanf_float+0x24c>
 800666a:	2d01      	cmp	r5, #1
 800666c:	d002      	beq.n	8006674 <_scanf_float+0x1a4>
 800666e:	2d04      	cmp	r5, #4
 8006670:	d000      	beq.n	8006674 <_scanf_float+0x1a4>
 8006672:	e75e      	b.n	8006532 <_scanf_float+0x62>
 8006674:	3501      	adds	r5, #1
 8006676:	b2ed      	uxtb	r5, r5
 8006678:	e7d6      	b.n	8006628 <_scanf_float+0x158>
 800667a:	9a02      	ldr	r2, [sp, #8]
 800667c:	2a01      	cmp	r2, #1
 800667e:	d000      	beq.n	8006682 <_scanf_float+0x1b2>
 8006680:	e757      	b.n	8006532 <_scanf_float+0x62>
 8006682:	2202      	movs	r2, #2
 8006684:	e7ec      	b.n	8006660 <_scanf_float+0x190>
 8006686:	2d00      	cmp	r5, #0
 8006688:	d110      	bne.n	80066ac <_scanf_float+0x1dc>
 800668a:	9a01      	ldr	r2, [sp, #4]
 800668c:	2a00      	cmp	r2, #0
 800668e:	d000      	beq.n	8006692 <_scanf_float+0x1c2>
 8006690:	e752      	b.n	8006538 <_scanf_float+0x68>
 8006692:	6822      	ldr	r2, [r4, #0]
 8006694:	21e0      	movs	r1, #224	@ 0xe0
 8006696:	0010      	movs	r0, r2
 8006698:	00c9      	lsls	r1, r1, #3
 800669a:	4008      	ands	r0, r1
 800669c:	4288      	cmp	r0, r1
 800669e:	d000      	beq.n	80066a2 <_scanf_float+0x1d2>
 80066a0:	e11d      	b.n	80068de <_scanf_float+0x40e>
 80066a2:	494e      	ldr	r1, [pc, #312]	@ (80067dc <_scanf_float+0x30c>)
 80066a4:	3501      	adds	r5, #1
 80066a6:	400a      	ands	r2, r1
 80066a8:	6022      	str	r2, [r4, #0]
 80066aa:	e7bd      	b.n	8006628 <_scanf_float+0x158>
 80066ac:	21fd      	movs	r1, #253	@ 0xfd
 80066ae:	1eea      	subs	r2, r5, #3
 80066b0:	420a      	tst	r2, r1
 80066b2:	d0df      	beq.n	8006674 <_scanf_float+0x1a4>
 80066b4:	e73d      	b.n	8006532 <_scanf_float+0x62>
 80066b6:	2d02      	cmp	r5, #2
 80066b8:	d000      	beq.n	80066bc <_scanf_float+0x1ec>
 80066ba:	e73a      	b.n	8006532 <_scanf_float+0x62>
 80066bc:	2503      	movs	r5, #3
 80066be:	e7b3      	b.n	8006628 <_scanf_float+0x158>
 80066c0:	2d06      	cmp	r5, #6
 80066c2:	d000      	beq.n	80066c6 <_scanf_float+0x1f6>
 80066c4:	e735      	b.n	8006532 <_scanf_float+0x62>
 80066c6:	2507      	movs	r5, #7
 80066c8:	e7ae      	b.n	8006628 <_scanf_float+0x158>
 80066ca:	6822      	ldr	r2, [r4, #0]
 80066cc:	0591      	lsls	r1, r2, #22
 80066ce:	d400      	bmi.n	80066d2 <_scanf_float+0x202>
 80066d0:	e72f      	b.n	8006532 <_scanf_float+0x62>
 80066d2:	4943      	ldr	r1, [pc, #268]	@ (80067e0 <_scanf_float+0x310>)
 80066d4:	400a      	ands	r2, r1
 80066d6:	6022      	str	r2, [r4, #0]
 80066d8:	9a01      	ldr	r2, [sp, #4]
 80066da:	9205      	str	r2, [sp, #20]
 80066dc:	e7a4      	b.n	8006628 <_scanf_float+0x158>
 80066de:	21a0      	movs	r1, #160	@ 0xa0
 80066e0:	2080      	movs	r0, #128	@ 0x80
 80066e2:	6822      	ldr	r2, [r4, #0]
 80066e4:	00c9      	lsls	r1, r1, #3
 80066e6:	4011      	ands	r1, r2
 80066e8:	00c0      	lsls	r0, r0, #3
 80066ea:	4281      	cmp	r1, r0
 80066ec:	d006      	beq.n	80066fc <_scanf_float+0x22c>
 80066ee:	4202      	tst	r2, r0
 80066f0:	d100      	bne.n	80066f4 <_scanf_float+0x224>
 80066f2:	e71e      	b.n	8006532 <_scanf_float+0x62>
 80066f4:	9901      	ldr	r1, [sp, #4]
 80066f6:	2900      	cmp	r1, #0
 80066f8:	d100      	bne.n	80066fc <_scanf_float+0x22c>
 80066fa:	e0f0      	b.n	80068de <_scanf_float+0x40e>
 80066fc:	0591      	lsls	r1, r2, #22
 80066fe:	d404      	bmi.n	800670a <_scanf_float+0x23a>
 8006700:	9901      	ldr	r1, [sp, #4]
 8006702:	9805      	ldr	r0, [sp, #20]
 8006704:	9709      	str	r7, [sp, #36]	@ 0x24
 8006706:	1a09      	subs	r1, r1, r0
 8006708:	9108      	str	r1, [sp, #32]
 800670a:	4934      	ldr	r1, [pc, #208]	@ (80067dc <_scanf_float+0x30c>)
 800670c:	400a      	ands	r2, r1
 800670e:	21c0      	movs	r1, #192	@ 0xc0
 8006710:	0049      	lsls	r1, r1, #1
 8006712:	430a      	orrs	r2, r1
 8006714:	6022      	str	r2, [r4, #0]
 8006716:	2200      	movs	r2, #0
 8006718:	9201      	str	r2, [sp, #4]
 800671a:	e785      	b.n	8006628 <_scanf_float+0x158>
 800671c:	2203      	movs	r2, #3
 800671e:	e79f      	b.n	8006660 <_scanf_float+0x190>
 8006720:	23c0      	movs	r3, #192	@ 0xc0
 8006722:	005b      	lsls	r3, r3, #1
 8006724:	0031      	movs	r1, r6
 8006726:	58e3      	ldr	r3, [r4, r3]
 8006728:	9803      	ldr	r0, [sp, #12]
 800672a:	4798      	blx	r3
 800672c:	2800      	cmp	r0, #0
 800672e:	d100      	bne.n	8006732 <_scanf_float+0x262>
 8006730:	e6f1      	b.n	8006516 <_scanf_float+0x46>
 8006732:	e6fe      	b.n	8006532 <_scanf_float+0x62>
 8006734:	3f01      	subs	r7, #1
 8006736:	5963      	ldr	r3, [r4, r5]
 8006738:	0032      	movs	r2, r6
 800673a:	7839      	ldrb	r1, [r7, #0]
 800673c:	9803      	ldr	r0, [sp, #12]
 800673e:	4798      	blx	r3
 8006740:	6923      	ldr	r3, [r4, #16]
 8006742:	3b01      	subs	r3, #1
 8006744:	6123      	str	r3, [r4, #16]
 8006746:	e702      	b.n	800654e <_scanf_float+0x7e>
 8006748:	1e6b      	subs	r3, r5, #1
 800674a:	2b06      	cmp	r3, #6
 800674c:	d80e      	bhi.n	800676c <_scanf_float+0x29c>
 800674e:	9702      	str	r7, [sp, #8]
 8006750:	2d02      	cmp	r5, #2
 8006752:	d920      	bls.n	8006796 <_scanf_float+0x2c6>
 8006754:	1beb      	subs	r3, r5, r7
 8006756:	b2db      	uxtb	r3, r3
 8006758:	9306      	str	r3, [sp, #24]
 800675a:	9b02      	ldr	r3, [sp, #8]
 800675c:	9a06      	ldr	r2, [sp, #24]
 800675e:	189b      	adds	r3, r3, r2
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b03      	cmp	r3, #3
 8006764:	d127      	bne.n	80067b6 <_scanf_float+0x2e6>
 8006766:	3d03      	subs	r5, #3
 8006768:	b2ed      	uxtb	r5, r5
 800676a:	1b7f      	subs	r7, r7, r5
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	05da      	lsls	r2, r3, #23
 8006770:	d553      	bpl.n	800681a <_scanf_float+0x34a>
 8006772:	055b      	lsls	r3, r3, #21
 8006774:	d536      	bpl.n	80067e4 <_scanf_float+0x314>
 8006776:	25be      	movs	r5, #190	@ 0xbe
 8006778:	006d      	lsls	r5, r5, #1
 800677a:	9b04      	ldr	r3, [sp, #16]
 800677c:	429f      	cmp	r7, r3
 800677e:	d800      	bhi.n	8006782 <_scanf_float+0x2b2>
 8006780:	e6e9      	b.n	8006556 <_scanf_float+0x86>
 8006782:	3f01      	subs	r7, #1
 8006784:	5963      	ldr	r3, [r4, r5]
 8006786:	0032      	movs	r2, r6
 8006788:	7839      	ldrb	r1, [r7, #0]
 800678a:	9803      	ldr	r0, [sp, #12]
 800678c:	4798      	blx	r3
 800678e:	6923      	ldr	r3, [r4, #16]
 8006790:	3b01      	subs	r3, #1
 8006792:	6123      	str	r3, [r4, #16]
 8006794:	e7f1      	b.n	800677a <_scanf_float+0x2aa>
 8006796:	25be      	movs	r5, #190	@ 0xbe
 8006798:	006d      	lsls	r5, r5, #1
 800679a:	9b04      	ldr	r3, [sp, #16]
 800679c:	429f      	cmp	r7, r3
 800679e:	d800      	bhi.n	80067a2 <_scanf_float+0x2d2>
 80067a0:	e6d9      	b.n	8006556 <_scanf_float+0x86>
 80067a2:	3f01      	subs	r7, #1
 80067a4:	5963      	ldr	r3, [r4, r5]
 80067a6:	0032      	movs	r2, r6
 80067a8:	7839      	ldrb	r1, [r7, #0]
 80067aa:	9803      	ldr	r0, [sp, #12]
 80067ac:	4798      	blx	r3
 80067ae:	6923      	ldr	r3, [r4, #16]
 80067b0:	3b01      	subs	r3, #1
 80067b2:	6123      	str	r3, [r4, #16]
 80067b4:	e7f1      	b.n	800679a <_scanf_float+0x2ca>
 80067b6:	9b02      	ldr	r3, [sp, #8]
 80067b8:	0032      	movs	r2, r6
 80067ba:	3b01      	subs	r3, #1
 80067bc:	7819      	ldrb	r1, [r3, #0]
 80067be:	9302      	str	r3, [sp, #8]
 80067c0:	23be      	movs	r3, #190	@ 0xbe
 80067c2:	005b      	lsls	r3, r3, #1
 80067c4:	58e3      	ldr	r3, [r4, r3]
 80067c6:	9803      	ldr	r0, [sp, #12]
 80067c8:	4798      	blx	r3
 80067ca:	6923      	ldr	r3, [r4, #16]
 80067cc:	3b01      	subs	r3, #1
 80067ce:	6123      	str	r3, [r4, #16]
 80067d0:	e7c3      	b.n	800675a <_scanf_float+0x28a>
 80067d2:	46c0      	nop			@ (mov r8, r8)
 80067d4:	fffffeff 	.word	0xfffffeff
 80067d8:	fffffe7f 	.word	0xfffffe7f
 80067dc:	fffff87f 	.word	0xfffff87f
 80067e0:	fffffd7f 	.word	0xfffffd7f
 80067e4:	6923      	ldr	r3, [r4, #16]
 80067e6:	1e7d      	subs	r5, r7, #1
 80067e8:	7829      	ldrb	r1, [r5, #0]
 80067ea:	3b01      	subs	r3, #1
 80067ec:	6123      	str	r3, [r4, #16]
 80067ee:	2965      	cmp	r1, #101	@ 0x65
 80067f0:	d00c      	beq.n	800680c <_scanf_float+0x33c>
 80067f2:	2945      	cmp	r1, #69	@ 0x45
 80067f4:	d00a      	beq.n	800680c <_scanf_float+0x33c>
 80067f6:	23be      	movs	r3, #190	@ 0xbe
 80067f8:	005b      	lsls	r3, r3, #1
 80067fa:	58e3      	ldr	r3, [r4, r3]
 80067fc:	0032      	movs	r2, r6
 80067fe:	9803      	ldr	r0, [sp, #12]
 8006800:	4798      	blx	r3
 8006802:	6923      	ldr	r3, [r4, #16]
 8006804:	1ebd      	subs	r5, r7, #2
 8006806:	3b01      	subs	r3, #1
 8006808:	7829      	ldrb	r1, [r5, #0]
 800680a:	6123      	str	r3, [r4, #16]
 800680c:	23be      	movs	r3, #190	@ 0xbe
 800680e:	005b      	lsls	r3, r3, #1
 8006810:	0032      	movs	r2, r6
 8006812:	58e3      	ldr	r3, [r4, r3]
 8006814:	9803      	ldr	r0, [sp, #12]
 8006816:	4798      	blx	r3
 8006818:	002f      	movs	r7, r5
 800681a:	6821      	ldr	r1, [r4, #0]
 800681c:	2310      	movs	r3, #16
 800681e:	000a      	movs	r2, r1
 8006820:	401a      	ands	r2, r3
 8006822:	4219      	tst	r1, r3
 8006824:	d001      	beq.n	800682a <_scanf_float+0x35a>
 8006826:	2000      	movs	r0, #0
 8006828:	e696      	b.n	8006558 <_scanf_float+0x88>
 800682a:	21c0      	movs	r1, #192	@ 0xc0
 800682c:	703a      	strb	r2, [r7, #0]
 800682e:	6823      	ldr	r3, [r4, #0]
 8006830:	00c9      	lsls	r1, r1, #3
 8006832:	400b      	ands	r3, r1
 8006834:	2180      	movs	r1, #128	@ 0x80
 8006836:	00c9      	lsls	r1, r1, #3
 8006838:	428b      	cmp	r3, r1
 800683a:	d11c      	bne.n	8006876 <_scanf_float+0x3a6>
 800683c:	9b05      	ldr	r3, [sp, #20]
 800683e:	9a01      	ldr	r2, [sp, #4]
 8006840:	9905      	ldr	r1, [sp, #20]
 8006842:	1a9a      	subs	r2, r3, r2
 8006844:	9b01      	ldr	r3, [sp, #4]
 8006846:	428b      	cmp	r3, r1
 8006848:	d121      	bne.n	800688e <_scanf_float+0x3be>
 800684a:	2200      	movs	r2, #0
 800684c:	9904      	ldr	r1, [sp, #16]
 800684e:	9803      	ldr	r0, [sp, #12]
 8006850:	f002 fd7e 	bl	8009350 <_strtod_r>
 8006854:	9b07      	ldr	r3, [sp, #28]
 8006856:	6822      	ldr	r2, [r4, #0]
 8006858:	0006      	movs	r6, r0
 800685a:	000f      	movs	r7, r1
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	0791      	lsls	r1, r2, #30
 8006860:	d522      	bpl.n	80068a8 <_scanf_float+0x3d8>
 8006862:	9907      	ldr	r1, [sp, #28]
 8006864:	1d1a      	adds	r2, r3, #4
 8006866:	600a      	str	r2, [r1, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	601e      	str	r6, [r3, #0]
 800686c:	605f      	str	r7, [r3, #4]
 800686e:	68e3      	ldr	r3, [r4, #12]
 8006870:	3301      	adds	r3, #1
 8006872:	60e3      	str	r3, [r4, #12]
 8006874:	e7d7      	b.n	8006826 <_scanf_float+0x356>
 8006876:	9b08      	ldr	r3, [sp, #32]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d0e6      	beq.n	800684a <_scanf_float+0x37a>
 800687c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800687e:	9803      	ldr	r0, [sp, #12]
 8006880:	1c59      	adds	r1, r3, #1
 8006882:	230a      	movs	r3, #10
 8006884:	f002 fdf6 	bl	8009474 <_strtol_r>
 8006888:	9b08      	ldr	r3, [sp, #32]
 800688a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800688c:	1ac2      	subs	r2, r0, r3
 800688e:	0023      	movs	r3, r4
 8006890:	3370      	adds	r3, #112	@ 0x70
 8006892:	33ff      	adds	r3, #255	@ 0xff
 8006894:	429f      	cmp	r7, r3
 8006896:	d302      	bcc.n	800689e <_scanf_float+0x3ce>
 8006898:	0027      	movs	r7, r4
 800689a:	376f      	adds	r7, #111	@ 0x6f
 800689c:	37ff      	adds	r7, #255	@ 0xff
 800689e:	0038      	movs	r0, r7
 80068a0:	4910      	ldr	r1, [pc, #64]	@ (80068e4 <_scanf_float+0x414>)
 80068a2:	f000 f957 	bl	8006b54 <siprintf>
 80068a6:	e7d0      	b.n	800684a <_scanf_float+0x37a>
 80068a8:	1d19      	adds	r1, r3, #4
 80068aa:	0752      	lsls	r2, r2, #29
 80068ac:	d502      	bpl.n	80068b4 <_scanf_float+0x3e4>
 80068ae:	9a07      	ldr	r2, [sp, #28]
 80068b0:	6011      	str	r1, [r2, #0]
 80068b2:	e7d9      	b.n	8006868 <_scanf_float+0x398>
 80068b4:	9a07      	ldr	r2, [sp, #28]
 80068b6:	0030      	movs	r0, r6
 80068b8:	6011      	str	r1, [r2, #0]
 80068ba:	681d      	ldr	r5, [r3, #0]
 80068bc:	0032      	movs	r2, r6
 80068be:	003b      	movs	r3, r7
 80068c0:	0039      	movs	r1, r7
 80068c2:	f7fb fdd7 	bl	8002474 <__aeabi_dcmpun>
 80068c6:	2800      	cmp	r0, #0
 80068c8:	d004      	beq.n	80068d4 <_scanf_float+0x404>
 80068ca:	4807      	ldr	r0, [pc, #28]	@ (80068e8 <_scanf_float+0x418>)
 80068cc:	f000 fae0 	bl	8006e90 <nanf>
 80068d0:	6028      	str	r0, [r5, #0]
 80068d2:	e7cc      	b.n	800686e <_scanf_float+0x39e>
 80068d4:	0030      	movs	r0, r6
 80068d6:	0039      	movs	r1, r7
 80068d8:	f7fb fec4 	bl	8002664 <__aeabi_d2f>
 80068dc:	e7f8      	b.n	80068d0 <_scanf_float+0x400>
 80068de:	2300      	movs	r3, #0
 80068e0:	9301      	str	r3, [sp, #4]
 80068e2:	e62d      	b.n	8006540 <_scanf_float+0x70>
 80068e4:	0800a768 	.word	0x0800a768
 80068e8:	0800aafd 	.word	0x0800aafd

080068ec <std>:
 80068ec:	2300      	movs	r3, #0
 80068ee:	b510      	push	{r4, lr}
 80068f0:	0004      	movs	r4, r0
 80068f2:	6003      	str	r3, [r0, #0]
 80068f4:	6043      	str	r3, [r0, #4]
 80068f6:	6083      	str	r3, [r0, #8]
 80068f8:	8181      	strh	r1, [r0, #12]
 80068fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80068fc:	81c2      	strh	r2, [r0, #14]
 80068fe:	6103      	str	r3, [r0, #16]
 8006900:	6143      	str	r3, [r0, #20]
 8006902:	6183      	str	r3, [r0, #24]
 8006904:	0019      	movs	r1, r3
 8006906:	2208      	movs	r2, #8
 8006908:	305c      	adds	r0, #92	@ 0x5c
 800690a:	f000 fa2f 	bl	8006d6c <memset>
 800690e:	4b0b      	ldr	r3, [pc, #44]	@ (800693c <std+0x50>)
 8006910:	6224      	str	r4, [r4, #32]
 8006912:	6263      	str	r3, [r4, #36]	@ 0x24
 8006914:	4b0a      	ldr	r3, [pc, #40]	@ (8006940 <std+0x54>)
 8006916:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006918:	4b0a      	ldr	r3, [pc, #40]	@ (8006944 <std+0x58>)
 800691a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800691c:	4b0a      	ldr	r3, [pc, #40]	@ (8006948 <std+0x5c>)
 800691e:	6323      	str	r3, [r4, #48]	@ 0x30
 8006920:	4b0a      	ldr	r3, [pc, #40]	@ (800694c <std+0x60>)
 8006922:	429c      	cmp	r4, r3
 8006924:	d005      	beq.n	8006932 <std+0x46>
 8006926:	4b0a      	ldr	r3, [pc, #40]	@ (8006950 <std+0x64>)
 8006928:	429c      	cmp	r4, r3
 800692a:	d002      	beq.n	8006932 <std+0x46>
 800692c:	4b09      	ldr	r3, [pc, #36]	@ (8006954 <std+0x68>)
 800692e:	429c      	cmp	r4, r3
 8006930:	d103      	bne.n	800693a <std+0x4e>
 8006932:	0020      	movs	r0, r4
 8006934:	3058      	adds	r0, #88	@ 0x58
 8006936:	f000 fa9d 	bl	8006e74 <__retarget_lock_init_recursive>
 800693a:	bd10      	pop	{r4, pc}
 800693c:	08006b95 	.word	0x08006b95
 8006940:	08006bbd 	.word	0x08006bbd
 8006944:	08006bf5 	.word	0x08006bf5
 8006948:	08006c21 	.word	0x08006c21
 800694c:	2000034c 	.word	0x2000034c
 8006950:	200003b4 	.word	0x200003b4
 8006954:	2000041c 	.word	0x2000041c

08006958 <stdio_exit_handler>:
 8006958:	b510      	push	{r4, lr}
 800695a:	4a03      	ldr	r2, [pc, #12]	@ (8006968 <stdio_exit_handler+0x10>)
 800695c:	4903      	ldr	r1, [pc, #12]	@ (800696c <stdio_exit_handler+0x14>)
 800695e:	4804      	ldr	r0, [pc, #16]	@ (8006970 <stdio_exit_handler+0x18>)
 8006960:	f000 f86c 	bl	8006a3c <_fwalk_sglue>
 8006964:	bd10      	pop	{r4, pc}
 8006966:	46c0      	nop			@ (mov r8, r8)
 8006968:	2000000c 	.word	0x2000000c
 800696c:	08009acd 	.word	0x08009acd
 8006970:	2000001c 	.word	0x2000001c

08006974 <cleanup_stdio>:
 8006974:	6841      	ldr	r1, [r0, #4]
 8006976:	4b0b      	ldr	r3, [pc, #44]	@ (80069a4 <cleanup_stdio+0x30>)
 8006978:	b510      	push	{r4, lr}
 800697a:	0004      	movs	r4, r0
 800697c:	4299      	cmp	r1, r3
 800697e:	d001      	beq.n	8006984 <cleanup_stdio+0x10>
 8006980:	f003 f8a4 	bl	8009acc <_fflush_r>
 8006984:	68a1      	ldr	r1, [r4, #8]
 8006986:	4b08      	ldr	r3, [pc, #32]	@ (80069a8 <cleanup_stdio+0x34>)
 8006988:	4299      	cmp	r1, r3
 800698a:	d002      	beq.n	8006992 <cleanup_stdio+0x1e>
 800698c:	0020      	movs	r0, r4
 800698e:	f003 f89d 	bl	8009acc <_fflush_r>
 8006992:	68e1      	ldr	r1, [r4, #12]
 8006994:	4b05      	ldr	r3, [pc, #20]	@ (80069ac <cleanup_stdio+0x38>)
 8006996:	4299      	cmp	r1, r3
 8006998:	d002      	beq.n	80069a0 <cleanup_stdio+0x2c>
 800699a:	0020      	movs	r0, r4
 800699c:	f003 f896 	bl	8009acc <_fflush_r>
 80069a0:	bd10      	pop	{r4, pc}
 80069a2:	46c0      	nop			@ (mov r8, r8)
 80069a4:	2000034c 	.word	0x2000034c
 80069a8:	200003b4 	.word	0x200003b4
 80069ac:	2000041c 	.word	0x2000041c

080069b0 <global_stdio_init.part.0>:
 80069b0:	b510      	push	{r4, lr}
 80069b2:	4b09      	ldr	r3, [pc, #36]	@ (80069d8 <global_stdio_init.part.0+0x28>)
 80069b4:	4a09      	ldr	r2, [pc, #36]	@ (80069dc <global_stdio_init.part.0+0x2c>)
 80069b6:	2104      	movs	r1, #4
 80069b8:	601a      	str	r2, [r3, #0]
 80069ba:	4809      	ldr	r0, [pc, #36]	@ (80069e0 <global_stdio_init.part.0+0x30>)
 80069bc:	2200      	movs	r2, #0
 80069be:	f7ff ff95 	bl	80068ec <std>
 80069c2:	2201      	movs	r2, #1
 80069c4:	2109      	movs	r1, #9
 80069c6:	4807      	ldr	r0, [pc, #28]	@ (80069e4 <global_stdio_init.part.0+0x34>)
 80069c8:	f7ff ff90 	bl	80068ec <std>
 80069cc:	2202      	movs	r2, #2
 80069ce:	2112      	movs	r1, #18
 80069d0:	4805      	ldr	r0, [pc, #20]	@ (80069e8 <global_stdio_init.part.0+0x38>)
 80069d2:	f7ff ff8b 	bl	80068ec <std>
 80069d6:	bd10      	pop	{r4, pc}
 80069d8:	20000484 	.word	0x20000484
 80069dc:	08006959 	.word	0x08006959
 80069e0:	2000034c 	.word	0x2000034c
 80069e4:	200003b4 	.word	0x200003b4
 80069e8:	2000041c 	.word	0x2000041c

080069ec <__sfp_lock_acquire>:
 80069ec:	b510      	push	{r4, lr}
 80069ee:	4802      	ldr	r0, [pc, #8]	@ (80069f8 <__sfp_lock_acquire+0xc>)
 80069f0:	f000 fa41 	bl	8006e76 <__retarget_lock_acquire_recursive>
 80069f4:	bd10      	pop	{r4, pc}
 80069f6:	46c0      	nop			@ (mov r8, r8)
 80069f8:	2000048d 	.word	0x2000048d

080069fc <__sfp_lock_release>:
 80069fc:	b510      	push	{r4, lr}
 80069fe:	4802      	ldr	r0, [pc, #8]	@ (8006a08 <__sfp_lock_release+0xc>)
 8006a00:	f000 fa3a 	bl	8006e78 <__retarget_lock_release_recursive>
 8006a04:	bd10      	pop	{r4, pc}
 8006a06:	46c0      	nop			@ (mov r8, r8)
 8006a08:	2000048d 	.word	0x2000048d

08006a0c <__sinit>:
 8006a0c:	b510      	push	{r4, lr}
 8006a0e:	0004      	movs	r4, r0
 8006a10:	f7ff ffec 	bl	80069ec <__sfp_lock_acquire>
 8006a14:	6a23      	ldr	r3, [r4, #32]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d002      	beq.n	8006a20 <__sinit+0x14>
 8006a1a:	f7ff ffef 	bl	80069fc <__sfp_lock_release>
 8006a1e:	bd10      	pop	{r4, pc}
 8006a20:	4b04      	ldr	r3, [pc, #16]	@ (8006a34 <__sinit+0x28>)
 8006a22:	6223      	str	r3, [r4, #32]
 8006a24:	4b04      	ldr	r3, [pc, #16]	@ (8006a38 <__sinit+0x2c>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1f6      	bne.n	8006a1a <__sinit+0xe>
 8006a2c:	f7ff ffc0 	bl	80069b0 <global_stdio_init.part.0>
 8006a30:	e7f3      	b.n	8006a1a <__sinit+0xe>
 8006a32:	46c0      	nop			@ (mov r8, r8)
 8006a34:	08006975 	.word	0x08006975
 8006a38:	20000484 	.word	0x20000484

08006a3c <_fwalk_sglue>:
 8006a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a3e:	0014      	movs	r4, r2
 8006a40:	2600      	movs	r6, #0
 8006a42:	9000      	str	r0, [sp, #0]
 8006a44:	9101      	str	r1, [sp, #4]
 8006a46:	68a5      	ldr	r5, [r4, #8]
 8006a48:	6867      	ldr	r7, [r4, #4]
 8006a4a:	3f01      	subs	r7, #1
 8006a4c:	d504      	bpl.n	8006a58 <_fwalk_sglue+0x1c>
 8006a4e:	6824      	ldr	r4, [r4, #0]
 8006a50:	2c00      	cmp	r4, #0
 8006a52:	d1f8      	bne.n	8006a46 <_fwalk_sglue+0xa>
 8006a54:	0030      	movs	r0, r6
 8006a56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a58:	89ab      	ldrh	r3, [r5, #12]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d908      	bls.n	8006a70 <_fwalk_sglue+0x34>
 8006a5e:	220e      	movs	r2, #14
 8006a60:	5eab      	ldrsh	r3, [r5, r2]
 8006a62:	3301      	adds	r3, #1
 8006a64:	d004      	beq.n	8006a70 <_fwalk_sglue+0x34>
 8006a66:	0029      	movs	r1, r5
 8006a68:	9800      	ldr	r0, [sp, #0]
 8006a6a:	9b01      	ldr	r3, [sp, #4]
 8006a6c:	4798      	blx	r3
 8006a6e:	4306      	orrs	r6, r0
 8006a70:	3568      	adds	r5, #104	@ 0x68
 8006a72:	e7ea      	b.n	8006a4a <_fwalk_sglue+0xe>

08006a74 <iprintf>:
 8006a74:	b40f      	push	{r0, r1, r2, r3}
 8006a76:	b507      	push	{r0, r1, r2, lr}
 8006a78:	4905      	ldr	r1, [pc, #20]	@ (8006a90 <iprintf+0x1c>)
 8006a7a:	ab04      	add	r3, sp, #16
 8006a7c:	6808      	ldr	r0, [r1, #0]
 8006a7e:	cb04      	ldmia	r3!, {r2}
 8006a80:	6881      	ldr	r1, [r0, #8]
 8006a82:	9301      	str	r3, [sp, #4]
 8006a84:	f002 fe80 	bl	8009788 <_vfiprintf_r>
 8006a88:	b003      	add	sp, #12
 8006a8a:	bc08      	pop	{r3}
 8006a8c:	b004      	add	sp, #16
 8006a8e:	4718      	bx	r3
 8006a90:	20000018 	.word	0x20000018

08006a94 <_puts_r>:
 8006a94:	6a03      	ldr	r3, [r0, #32]
 8006a96:	b570      	push	{r4, r5, r6, lr}
 8006a98:	0005      	movs	r5, r0
 8006a9a:	000e      	movs	r6, r1
 8006a9c:	6884      	ldr	r4, [r0, #8]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <_puts_r+0x12>
 8006aa2:	f7ff ffb3 	bl	8006a0c <__sinit>
 8006aa6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006aa8:	07db      	lsls	r3, r3, #31
 8006aaa:	d405      	bmi.n	8006ab8 <_puts_r+0x24>
 8006aac:	89a3      	ldrh	r3, [r4, #12]
 8006aae:	059b      	lsls	r3, r3, #22
 8006ab0:	d402      	bmi.n	8006ab8 <_puts_r+0x24>
 8006ab2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ab4:	f000 f9df 	bl	8006e76 <__retarget_lock_acquire_recursive>
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	071b      	lsls	r3, r3, #28
 8006abc:	d502      	bpl.n	8006ac4 <_puts_r+0x30>
 8006abe:	6923      	ldr	r3, [r4, #16]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d11f      	bne.n	8006b04 <_puts_r+0x70>
 8006ac4:	0021      	movs	r1, r4
 8006ac6:	0028      	movs	r0, r5
 8006ac8:	f000 f8f2 	bl	8006cb0 <__swsetup_r>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d019      	beq.n	8006b04 <_puts_r+0x70>
 8006ad0:	2501      	movs	r5, #1
 8006ad2:	426d      	negs	r5, r5
 8006ad4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ad6:	07db      	lsls	r3, r3, #31
 8006ad8:	d405      	bmi.n	8006ae6 <_puts_r+0x52>
 8006ada:	89a3      	ldrh	r3, [r4, #12]
 8006adc:	059b      	lsls	r3, r3, #22
 8006ade:	d402      	bmi.n	8006ae6 <_puts_r+0x52>
 8006ae0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ae2:	f000 f9c9 	bl	8006e78 <__retarget_lock_release_recursive>
 8006ae6:	0028      	movs	r0, r5
 8006ae8:	bd70      	pop	{r4, r5, r6, pc}
 8006aea:	3601      	adds	r6, #1
 8006aec:	60a3      	str	r3, [r4, #8]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	da04      	bge.n	8006afc <_puts_r+0x68>
 8006af2:	69a2      	ldr	r2, [r4, #24]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	dc16      	bgt.n	8006b26 <_puts_r+0x92>
 8006af8:	290a      	cmp	r1, #10
 8006afa:	d014      	beq.n	8006b26 <_puts_r+0x92>
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	1c5a      	adds	r2, r3, #1
 8006b00:	6022      	str	r2, [r4, #0]
 8006b02:	7019      	strb	r1, [r3, #0]
 8006b04:	68a3      	ldr	r3, [r4, #8]
 8006b06:	7831      	ldrb	r1, [r6, #0]
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	2900      	cmp	r1, #0
 8006b0c:	d1ed      	bne.n	8006aea <_puts_r+0x56>
 8006b0e:	60a3      	str	r3, [r4, #8]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	da0f      	bge.n	8006b34 <_puts_r+0xa0>
 8006b14:	0022      	movs	r2, r4
 8006b16:	0028      	movs	r0, r5
 8006b18:	310a      	adds	r1, #10
 8006b1a:	f000 f887 	bl	8006c2c <__swbuf_r>
 8006b1e:	3001      	adds	r0, #1
 8006b20:	d0d6      	beq.n	8006ad0 <_puts_r+0x3c>
 8006b22:	250a      	movs	r5, #10
 8006b24:	e7d6      	b.n	8006ad4 <_puts_r+0x40>
 8006b26:	0022      	movs	r2, r4
 8006b28:	0028      	movs	r0, r5
 8006b2a:	f000 f87f 	bl	8006c2c <__swbuf_r>
 8006b2e:	3001      	adds	r0, #1
 8006b30:	d1e8      	bne.n	8006b04 <_puts_r+0x70>
 8006b32:	e7cd      	b.n	8006ad0 <_puts_r+0x3c>
 8006b34:	6823      	ldr	r3, [r4, #0]
 8006b36:	1c5a      	adds	r2, r3, #1
 8006b38:	6022      	str	r2, [r4, #0]
 8006b3a:	220a      	movs	r2, #10
 8006b3c:	701a      	strb	r2, [r3, #0]
 8006b3e:	e7f0      	b.n	8006b22 <_puts_r+0x8e>

08006b40 <puts>:
 8006b40:	b510      	push	{r4, lr}
 8006b42:	4b03      	ldr	r3, [pc, #12]	@ (8006b50 <puts+0x10>)
 8006b44:	0001      	movs	r1, r0
 8006b46:	6818      	ldr	r0, [r3, #0]
 8006b48:	f7ff ffa4 	bl	8006a94 <_puts_r>
 8006b4c:	bd10      	pop	{r4, pc}
 8006b4e:	46c0      	nop			@ (mov r8, r8)
 8006b50:	20000018 	.word	0x20000018

08006b54 <siprintf>:
 8006b54:	b40e      	push	{r1, r2, r3}
 8006b56:	b500      	push	{lr}
 8006b58:	490b      	ldr	r1, [pc, #44]	@ (8006b88 <siprintf+0x34>)
 8006b5a:	b09c      	sub	sp, #112	@ 0x70
 8006b5c:	ab1d      	add	r3, sp, #116	@ 0x74
 8006b5e:	9002      	str	r0, [sp, #8]
 8006b60:	9006      	str	r0, [sp, #24]
 8006b62:	9107      	str	r1, [sp, #28]
 8006b64:	9104      	str	r1, [sp, #16]
 8006b66:	4809      	ldr	r0, [pc, #36]	@ (8006b8c <siprintf+0x38>)
 8006b68:	4909      	ldr	r1, [pc, #36]	@ (8006b90 <siprintf+0x3c>)
 8006b6a:	cb04      	ldmia	r3!, {r2}
 8006b6c:	9105      	str	r1, [sp, #20]
 8006b6e:	6800      	ldr	r0, [r0, #0]
 8006b70:	a902      	add	r1, sp, #8
 8006b72:	9301      	str	r3, [sp, #4]
 8006b74:	f002 fce2 	bl	800953c <_svfiprintf_r>
 8006b78:	2200      	movs	r2, #0
 8006b7a:	9b02      	ldr	r3, [sp, #8]
 8006b7c:	701a      	strb	r2, [r3, #0]
 8006b7e:	b01c      	add	sp, #112	@ 0x70
 8006b80:	bc08      	pop	{r3}
 8006b82:	b003      	add	sp, #12
 8006b84:	4718      	bx	r3
 8006b86:	46c0      	nop			@ (mov r8, r8)
 8006b88:	7fffffff 	.word	0x7fffffff
 8006b8c:	20000018 	.word	0x20000018
 8006b90:	ffff0208 	.word	0xffff0208

08006b94 <__sread>:
 8006b94:	b570      	push	{r4, r5, r6, lr}
 8006b96:	000c      	movs	r4, r1
 8006b98:	250e      	movs	r5, #14
 8006b9a:	5f49      	ldrsh	r1, [r1, r5]
 8006b9c:	f000 f918 	bl	8006dd0 <_read_r>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	db03      	blt.n	8006bac <__sread+0x18>
 8006ba4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006ba6:	181b      	adds	r3, r3, r0
 8006ba8:	6563      	str	r3, [r4, #84]	@ 0x54
 8006baa:	bd70      	pop	{r4, r5, r6, pc}
 8006bac:	89a3      	ldrh	r3, [r4, #12]
 8006bae:	4a02      	ldr	r2, [pc, #8]	@ (8006bb8 <__sread+0x24>)
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	81a3      	strh	r3, [r4, #12]
 8006bb4:	e7f9      	b.n	8006baa <__sread+0x16>
 8006bb6:	46c0      	nop			@ (mov r8, r8)
 8006bb8:	ffffefff 	.word	0xffffefff

08006bbc <__swrite>:
 8006bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bbe:	001f      	movs	r7, r3
 8006bc0:	898b      	ldrh	r3, [r1, #12]
 8006bc2:	0005      	movs	r5, r0
 8006bc4:	000c      	movs	r4, r1
 8006bc6:	0016      	movs	r6, r2
 8006bc8:	05db      	lsls	r3, r3, #23
 8006bca:	d505      	bpl.n	8006bd8 <__swrite+0x1c>
 8006bcc:	230e      	movs	r3, #14
 8006bce:	5ec9      	ldrsh	r1, [r1, r3]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	f000 f8e8 	bl	8006da8 <_lseek_r>
 8006bd8:	89a3      	ldrh	r3, [r4, #12]
 8006bda:	4a05      	ldr	r2, [pc, #20]	@ (8006bf0 <__swrite+0x34>)
 8006bdc:	0028      	movs	r0, r5
 8006bde:	4013      	ands	r3, r2
 8006be0:	81a3      	strh	r3, [r4, #12]
 8006be2:	0032      	movs	r2, r6
 8006be4:	230e      	movs	r3, #14
 8006be6:	5ee1      	ldrsh	r1, [r4, r3]
 8006be8:	003b      	movs	r3, r7
 8006bea:	f000 f905 	bl	8006df8 <_write_r>
 8006bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bf0:	ffffefff 	.word	0xffffefff

08006bf4 <__sseek>:
 8006bf4:	b570      	push	{r4, r5, r6, lr}
 8006bf6:	000c      	movs	r4, r1
 8006bf8:	250e      	movs	r5, #14
 8006bfa:	5f49      	ldrsh	r1, [r1, r5]
 8006bfc:	f000 f8d4 	bl	8006da8 <_lseek_r>
 8006c00:	89a3      	ldrh	r3, [r4, #12]
 8006c02:	1c42      	adds	r2, r0, #1
 8006c04:	d103      	bne.n	8006c0e <__sseek+0x1a>
 8006c06:	4a05      	ldr	r2, [pc, #20]	@ (8006c1c <__sseek+0x28>)
 8006c08:	4013      	ands	r3, r2
 8006c0a:	81a3      	strh	r3, [r4, #12]
 8006c0c:	bd70      	pop	{r4, r5, r6, pc}
 8006c0e:	2280      	movs	r2, #128	@ 0x80
 8006c10:	0152      	lsls	r2, r2, #5
 8006c12:	4313      	orrs	r3, r2
 8006c14:	81a3      	strh	r3, [r4, #12]
 8006c16:	6560      	str	r0, [r4, #84]	@ 0x54
 8006c18:	e7f8      	b.n	8006c0c <__sseek+0x18>
 8006c1a:	46c0      	nop			@ (mov r8, r8)
 8006c1c:	ffffefff 	.word	0xffffefff

08006c20 <__sclose>:
 8006c20:	b510      	push	{r4, lr}
 8006c22:	230e      	movs	r3, #14
 8006c24:	5ec9      	ldrsh	r1, [r1, r3]
 8006c26:	f000 f8ad 	bl	8006d84 <_close_r>
 8006c2a:	bd10      	pop	{r4, pc}

08006c2c <__swbuf_r>:
 8006c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2e:	0006      	movs	r6, r0
 8006c30:	000d      	movs	r5, r1
 8006c32:	0014      	movs	r4, r2
 8006c34:	2800      	cmp	r0, #0
 8006c36:	d004      	beq.n	8006c42 <__swbuf_r+0x16>
 8006c38:	6a03      	ldr	r3, [r0, #32]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <__swbuf_r+0x16>
 8006c3e:	f7ff fee5 	bl	8006a0c <__sinit>
 8006c42:	69a3      	ldr	r3, [r4, #24]
 8006c44:	60a3      	str	r3, [r4, #8]
 8006c46:	89a3      	ldrh	r3, [r4, #12]
 8006c48:	071b      	lsls	r3, r3, #28
 8006c4a:	d502      	bpl.n	8006c52 <__swbuf_r+0x26>
 8006c4c:	6923      	ldr	r3, [r4, #16]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d109      	bne.n	8006c66 <__swbuf_r+0x3a>
 8006c52:	0021      	movs	r1, r4
 8006c54:	0030      	movs	r0, r6
 8006c56:	f000 f82b 	bl	8006cb0 <__swsetup_r>
 8006c5a:	2800      	cmp	r0, #0
 8006c5c:	d003      	beq.n	8006c66 <__swbuf_r+0x3a>
 8006c5e:	2501      	movs	r5, #1
 8006c60:	426d      	negs	r5, r5
 8006c62:	0028      	movs	r0, r5
 8006c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c66:	6923      	ldr	r3, [r4, #16]
 8006c68:	6820      	ldr	r0, [r4, #0]
 8006c6a:	b2ef      	uxtb	r7, r5
 8006c6c:	1ac0      	subs	r0, r0, r3
 8006c6e:	6963      	ldr	r3, [r4, #20]
 8006c70:	b2ed      	uxtb	r5, r5
 8006c72:	4283      	cmp	r3, r0
 8006c74:	dc05      	bgt.n	8006c82 <__swbuf_r+0x56>
 8006c76:	0021      	movs	r1, r4
 8006c78:	0030      	movs	r0, r6
 8006c7a:	f002 ff27 	bl	8009acc <_fflush_r>
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	d1ed      	bne.n	8006c5e <__swbuf_r+0x32>
 8006c82:	68a3      	ldr	r3, [r4, #8]
 8006c84:	3001      	adds	r0, #1
 8006c86:	3b01      	subs	r3, #1
 8006c88:	60a3      	str	r3, [r4, #8]
 8006c8a:	6823      	ldr	r3, [r4, #0]
 8006c8c:	1c5a      	adds	r2, r3, #1
 8006c8e:	6022      	str	r2, [r4, #0]
 8006c90:	701f      	strb	r7, [r3, #0]
 8006c92:	6963      	ldr	r3, [r4, #20]
 8006c94:	4283      	cmp	r3, r0
 8006c96:	d004      	beq.n	8006ca2 <__swbuf_r+0x76>
 8006c98:	89a3      	ldrh	r3, [r4, #12]
 8006c9a:	07db      	lsls	r3, r3, #31
 8006c9c:	d5e1      	bpl.n	8006c62 <__swbuf_r+0x36>
 8006c9e:	2d0a      	cmp	r5, #10
 8006ca0:	d1df      	bne.n	8006c62 <__swbuf_r+0x36>
 8006ca2:	0021      	movs	r1, r4
 8006ca4:	0030      	movs	r0, r6
 8006ca6:	f002 ff11 	bl	8009acc <_fflush_r>
 8006caa:	2800      	cmp	r0, #0
 8006cac:	d0d9      	beq.n	8006c62 <__swbuf_r+0x36>
 8006cae:	e7d6      	b.n	8006c5e <__swbuf_r+0x32>

08006cb0 <__swsetup_r>:
 8006cb0:	4b2d      	ldr	r3, [pc, #180]	@ (8006d68 <__swsetup_r+0xb8>)
 8006cb2:	b570      	push	{r4, r5, r6, lr}
 8006cb4:	0005      	movs	r5, r0
 8006cb6:	6818      	ldr	r0, [r3, #0]
 8006cb8:	000c      	movs	r4, r1
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	d004      	beq.n	8006cc8 <__swsetup_r+0x18>
 8006cbe:	6a03      	ldr	r3, [r0, #32]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d101      	bne.n	8006cc8 <__swsetup_r+0x18>
 8006cc4:	f7ff fea2 	bl	8006a0c <__sinit>
 8006cc8:	230c      	movs	r3, #12
 8006cca:	5ee2      	ldrsh	r2, [r4, r3]
 8006ccc:	0713      	lsls	r3, r2, #28
 8006cce:	d423      	bmi.n	8006d18 <__swsetup_r+0x68>
 8006cd0:	06d3      	lsls	r3, r2, #27
 8006cd2:	d407      	bmi.n	8006ce4 <__swsetup_r+0x34>
 8006cd4:	2309      	movs	r3, #9
 8006cd6:	602b      	str	r3, [r5, #0]
 8006cd8:	2340      	movs	r3, #64	@ 0x40
 8006cda:	2001      	movs	r0, #1
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	81a3      	strh	r3, [r4, #12]
 8006ce0:	4240      	negs	r0, r0
 8006ce2:	e03a      	b.n	8006d5a <__swsetup_r+0xaa>
 8006ce4:	0752      	lsls	r2, r2, #29
 8006ce6:	d513      	bpl.n	8006d10 <__swsetup_r+0x60>
 8006ce8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006cea:	2900      	cmp	r1, #0
 8006cec:	d008      	beq.n	8006d00 <__swsetup_r+0x50>
 8006cee:	0023      	movs	r3, r4
 8006cf0:	3344      	adds	r3, #68	@ 0x44
 8006cf2:	4299      	cmp	r1, r3
 8006cf4:	d002      	beq.n	8006cfc <__swsetup_r+0x4c>
 8006cf6:	0028      	movs	r0, r5
 8006cf8:	f000 ff50 	bl	8007b9c <_free_r>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d00:	2224      	movs	r2, #36	@ 0x24
 8006d02:	89a3      	ldrh	r3, [r4, #12]
 8006d04:	4393      	bics	r3, r2
 8006d06:	81a3      	strh	r3, [r4, #12]
 8006d08:	2300      	movs	r3, #0
 8006d0a:	6063      	str	r3, [r4, #4]
 8006d0c:	6923      	ldr	r3, [r4, #16]
 8006d0e:	6023      	str	r3, [r4, #0]
 8006d10:	2308      	movs	r3, #8
 8006d12:	89a2      	ldrh	r2, [r4, #12]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	81a3      	strh	r3, [r4, #12]
 8006d18:	6923      	ldr	r3, [r4, #16]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10b      	bne.n	8006d36 <__swsetup_r+0x86>
 8006d1e:	21a0      	movs	r1, #160	@ 0xa0
 8006d20:	2280      	movs	r2, #128	@ 0x80
 8006d22:	89a3      	ldrh	r3, [r4, #12]
 8006d24:	0089      	lsls	r1, r1, #2
 8006d26:	0092      	lsls	r2, r2, #2
 8006d28:	400b      	ands	r3, r1
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d003      	beq.n	8006d36 <__swsetup_r+0x86>
 8006d2e:	0021      	movs	r1, r4
 8006d30:	0028      	movs	r0, r5
 8006d32:	f002 ff21 	bl	8009b78 <__smakebuf_r>
 8006d36:	230c      	movs	r3, #12
 8006d38:	5ee2      	ldrsh	r2, [r4, r3]
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	0013      	movs	r3, r2
 8006d3e:	400b      	ands	r3, r1
 8006d40:	420a      	tst	r2, r1
 8006d42:	d00b      	beq.n	8006d5c <__swsetup_r+0xac>
 8006d44:	2300      	movs	r3, #0
 8006d46:	60a3      	str	r3, [r4, #8]
 8006d48:	6963      	ldr	r3, [r4, #20]
 8006d4a:	425b      	negs	r3, r3
 8006d4c:	61a3      	str	r3, [r4, #24]
 8006d4e:	2000      	movs	r0, #0
 8006d50:	6923      	ldr	r3, [r4, #16]
 8006d52:	4283      	cmp	r3, r0
 8006d54:	d101      	bne.n	8006d5a <__swsetup_r+0xaa>
 8006d56:	0613      	lsls	r3, r2, #24
 8006d58:	d4be      	bmi.n	8006cd8 <__swsetup_r+0x28>
 8006d5a:	bd70      	pop	{r4, r5, r6, pc}
 8006d5c:	0791      	lsls	r1, r2, #30
 8006d5e:	d400      	bmi.n	8006d62 <__swsetup_r+0xb2>
 8006d60:	6963      	ldr	r3, [r4, #20]
 8006d62:	60a3      	str	r3, [r4, #8]
 8006d64:	e7f3      	b.n	8006d4e <__swsetup_r+0x9e>
 8006d66:	46c0      	nop			@ (mov r8, r8)
 8006d68:	20000018 	.word	0x20000018

08006d6c <memset>:
 8006d6c:	0003      	movs	r3, r0
 8006d6e:	1882      	adds	r2, r0, r2
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d100      	bne.n	8006d76 <memset+0xa>
 8006d74:	4770      	bx	lr
 8006d76:	7019      	strb	r1, [r3, #0]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	e7f9      	b.n	8006d70 <memset+0x4>

08006d7c <_localeconv_r>:
 8006d7c:	4800      	ldr	r0, [pc, #0]	@ (8006d80 <_localeconv_r+0x4>)
 8006d7e:	4770      	bx	lr
 8006d80:	20000158 	.word	0x20000158

08006d84 <_close_r>:
 8006d84:	2300      	movs	r3, #0
 8006d86:	b570      	push	{r4, r5, r6, lr}
 8006d88:	4d06      	ldr	r5, [pc, #24]	@ (8006da4 <_close_r+0x20>)
 8006d8a:	0004      	movs	r4, r0
 8006d8c:	0008      	movs	r0, r1
 8006d8e:	602b      	str	r3, [r5, #0]
 8006d90:	f7fc fa56 	bl	8003240 <_close>
 8006d94:	1c43      	adds	r3, r0, #1
 8006d96:	d103      	bne.n	8006da0 <_close_r+0x1c>
 8006d98:	682b      	ldr	r3, [r5, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d000      	beq.n	8006da0 <_close_r+0x1c>
 8006d9e:	6023      	str	r3, [r4, #0]
 8006da0:	bd70      	pop	{r4, r5, r6, pc}
 8006da2:	46c0      	nop			@ (mov r8, r8)
 8006da4:	20000488 	.word	0x20000488

08006da8 <_lseek_r>:
 8006da8:	b570      	push	{r4, r5, r6, lr}
 8006daa:	0004      	movs	r4, r0
 8006dac:	0008      	movs	r0, r1
 8006dae:	0011      	movs	r1, r2
 8006db0:	001a      	movs	r2, r3
 8006db2:	2300      	movs	r3, #0
 8006db4:	4d05      	ldr	r5, [pc, #20]	@ (8006dcc <_lseek_r+0x24>)
 8006db6:	602b      	str	r3, [r5, #0]
 8006db8:	f7fc fa63 	bl	8003282 <_lseek>
 8006dbc:	1c43      	adds	r3, r0, #1
 8006dbe:	d103      	bne.n	8006dc8 <_lseek_r+0x20>
 8006dc0:	682b      	ldr	r3, [r5, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d000      	beq.n	8006dc8 <_lseek_r+0x20>
 8006dc6:	6023      	str	r3, [r4, #0]
 8006dc8:	bd70      	pop	{r4, r5, r6, pc}
 8006dca:	46c0      	nop			@ (mov r8, r8)
 8006dcc:	20000488 	.word	0x20000488

08006dd0 <_read_r>:
 8006dd0:	b570      	push	{r4, r5, r6, lr}
 8006dd2:	0004      	movs	r4, r0
 8006dd4:	0008      	movs	r0, r1
 8006dd6:	0011      	movs	r1, r2
 8006dd8:	001a      	movs	r2, r3
 8006dda:	2300      	movs	r3, #0
 8006ddc:	4d05      	ldr	r5, [pc, #20]	@ (8006df4 <_read_r+0x24>)
 8006dde:	602b      	str	r3, [r5, #0]
 8006de0:	f7fc fa11 	bl	8003206 <_read>
 8006de4:	1c43      	adds	r3, r0, #1
 8006de6:	d103      	bne.n	8006df0 <_read_r+0x20>
 8006de8:	682b      	ldr	r3, [r5, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d000      	beq.n	8006df0 <_read_r+0x20>
 8006dee:	6023      	str	r3, [r4, #0]
 8006df0:	bd70      	pop	{r4, r5, r6, pc}
 8006df2:	46c0      	nop			@ (mov r8, r8)
 8006df4:	20000488 	.word	0x20000488

08006df8 <_write_r>:
 8006df8:	b570      	push	{r4, r5, r6, lr}
 8006dfa:	0004      	movs	r4, r0
 8006dfc:	0008      	movs	r0, r1
 8006dfe:	0011      	movs	r1, r2
 8006e00:	001a      	movs	r2, r3
 8006e02:	2300      	movs	r3, #0
 8006e04:	4d05      	ldr	r5, [pc, #20]	@ (8006e1c <_write_r+0x24>)
 8006e06:	602b      	str	r3, [r5, #0]
 8006e08:	f7fb ff04 	bl	8002c14 <_write>
 8006e0c:	1c43      	adds	r3, r0, #1
 8006e0e:	d103      	bne.n	8006e18 <_write_r+0x20>
 8006e10:	682b      	ldr	r3, [r5, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d000      	beq.n	8006e18 <_write_r+0x20>
 8006e16:	6023      	str	r3, [r4, #0]
 8006e18:	bd70      	pop	{r4, r5, r6, pc}
 8006e1a:	46c0      	nop			@ (mov r8, r8)
 8006e1c:	20000488 	.word	0x20000488

08006e20 <__errno>:
 8006e20:	4b01      	ldr	r3, [pc, #4]	@ (8006e28 <__errno+0x8>)
 8006e22:	6818      	ldr	r0, [r3, #0]
 8006e24:	4770      	bx	lr
 8006e26:	46c0      	nop			@ (mov r8, r8)
 8006e28:	20000018 	.word	0x20000018

08006e2c <__libc_init_array>:
 8006e2c:	b570      	push	{r4, r5, r6, lr}
 8006e2e:	2600      	movs	r6, #0
 8006e30:	4c0c      	ldr	r4, [pc, #48]	@ (8006e64 <__libc_init_array+0x38>)
 8006e32:	4d0d      	ldr	r5, [pc, #52]	@ (8006e68 <__libc_init_array+0x3c>)
 8006e34:	1b64      	subs	r4, r4, r5
 8006e36:	10a4      	asrs	r4, r4, #2
 8006e38:	42a6      	cmp	r6, r4
 8006e3a:	d109      	bne.n	8006e50 <__libc_init_array+0x24>
 8006e3c:	2600      	movs	r6, #0
 8006e3e:	f003 fba3 	bl	800a588 <_init>
 8006e42:	4c0a      	ldr	r4, [pc, #40]	@ (8006e6c <__libc_init_array+0x40>)
 8006e44:	4d0a      	ldr	r5, [pc, #40]	@ (8006e70 <__libc_init_array+0x44>)
 8006e46:	1b64      	subs	r4, r4, r5
 8006e48:	10a4      	asrs	r4, r4, #2
 8006e4a:	42a6      	cmp	r6, r4
 8006e4c:	d105      	bne.n	8006e5a <__libc_init_array+0x2e>
 8006e4e:	bd70      	pop	{r4, r5, r6, pc}
 8006e50:	00b3      	lsls	r3, r6, #2
 8006e52:	58eb      	ldr	r3, [r5, r3]
 8006e54:	4798      	blx	r3
 8006e56:	3601      	adds	r6, #1
 8006e58:	e7ee      	b.n	8006e38 <__libc_init_array+0xc>
 8006e5a:	00b3      	lsls	r3, r6, #2
 8006e5c:	58eb      	ldr	r3, [r5, r3]
 8006e5e:	4798      	blx	r3
 8006e60:	3601      	adds	r6, #1
 8006e62:	e7f2      	b.n	8006e4a <__libc_init_array+0x1e>
 8006e64:	0800ab60 	.word	0x0800ab60
 8006e68:	0800ab60 	.word	0x0800ab60
 8006e6c:	0800ab64 	.word	0x0800ab64
 8006e70:	0800ab60 	.word	0x0800ab60

08006e74 <__retarget_lock_init_recursive>:
 8006e74:	4770      	bx	lr

08006e76 <__retarget_lock_acquire_recursive>:
 8006e76:	4770      	bx	lr

08006e78 <__retarget_lock_release_recursive>:
 8006e78:	4770      	bx	lr

08006e7a <memchr>:
 8006e7a:	b2c9      	uxtb	r1, r1
 8006e7c:	1882      	adds	r2, r0, r2
 8006e7e:	4290      	cmp	r0, r2
 8006e80:	d101      	bne.n	8006e86 <memchr+0xc>
 8006e82:	2000      	movs	r0, #0
 8006e84:	4770      	bx	lr
 8006e86:	7803      	ldrb	r3, [r0, #0]
 8006e88:	428b      	cmp	r3, r1
 8006e8a:	d0fb      	beq.n	8006e84 <memchr+0xa>
 8006e8c:	3001      	adds	r0, #1
 8006e8e:	e7f6      	b.n	8006e7e <memchr+0x4>

08006e90 <nanf>:
 8006e90:	4800      	ldr	r0, [pc, #0]	@ (8006e94 <nanf+0x4>)
 8006e92:	4770      	bx	lr
 8006e94:	7fc00000 	.word	0x7fc00000

08006e98 <quorem>:
 8006e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e9a:	6902      	ldr	r2, [r0, #16]
 8006e9c:	690f      	ldr	r7, [r1, #16]
 8006e9e:	b087      	sub	sp, #28
 8006ea0:	0006      	movs	r6, r0
 8006ea2:	000b      	movs	r3, r1
 8006ea4:	2000      	movs	r0, #0
 8006ea6:	9102      	str	r1, [sp, #8]
 8006ea8:	42ba      	cmp	r2, r7
 8006eaa:	db6d      	blt.n	8006f88 <quorem+0xf0>
 8006eac:	3f01      	subs	r7, #1
 8006eae:	00bc      	lsls	r4, r7, #2
 8006eb0:	3314      	adds	r3, #20
 8006eb2:	9305      	str	r3, [sp, #20]
 8006eb4:	191b      	adds	r3, r3, r4
 8006eb6:	9303      	str	r3, [sp, #12]
 8006eb8:	0033      	movs	r3, r6
 8006eba:	3314      	adds	r3, #20
 8006ebc:	191c      	adds	r4, r3, r4
 8006ebe:	9301      	str	r3, [sp, #4]
 8006ec0:	6823      	ldr	r3, [r4, #0]
 8006ec2:	9304      	str	r3, [sp, #16]
 8006ec4:	9b03      	ldr	r3, [sp, #12]
 8006ec6:	9804      	ldr	r0, [sp, #16]
 8006ec8:	681d      	ldr	r5, [r3, #0]
 8006eca:	3501      	adds	r5, #1
 8006ecc:	0029      	movs	r1, r5
 8006ece:	f7f9 f937 	bl	8000140 <__udivsi3>
 8006ed2:	9b04      	ldr	r3, [sp, #16]
 8006ed4:	9000      	str	r0, [sp, #0]
 8006ed6:	42ab      	cmp	r3, r5
 8006ed8:	d32b      	bcc.n	8006f32 <quorem+0x9a>
 8006eda:	9b05      	ldr	r3, [sp, #20]
 8006edc:	9d01      	ldr	r5, [sp, #4]
 8006ede:	469c      	mov	ip, r3
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	9305      	str	r3, [sp, #20]
 8006ee4:	9304      	str	r3, [sp, #16]
 8006ee6:	4662      	mov	r2, ip
 8006ee8:	ca08      	ldmia	r2!, {r3}
 8006eea:	6828      	ldr	r0, [r5, #0]
 8006eec:	4694      	mov	ip, r2
 8006eee:	9a00      	ldr	r2, [sp, #0]
 8006ef0:	b299      	uxth	r1, r3
 8006ef2:	4351      	muls	r1, r2
 8006ef4:	9a05      	ldr	r2, [sp, #20]
 8006ef6:	0c1b      	lsrs	r3, r3, #16
 8006ef8:	1889      	adds	r1, r1, r2
 8006efa:	9a00      	ldr	r2, [sp, #0]
 8006efc:	4353      	muls	r3, r2
 8006efe:	0c0a      	lsrs	r2, r1, #16
 8006f00:	189b      	adds	r3, r3, r2
 8006f02:	0c1a      	lsrs	r2, r3, #16
 8006f04:	b289      	uxth	r1, r1
 8006f06:	9205      	str	r2, [sp, #20]
 8006f08:	b282      	uxth	r2, r0
 8006f0a:	1a52      	subs	r2, r2, r1
 8006f0c:	9904      	ldr	r1, [sp, #16]
 8006f0e:	0c00      	lsrs	r0, r0, #16
 8006f10:	1852      	adds	r2, r2, r1
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	1411      	asrs	r1, r2, #16
 8006f16:	1ac3      	subs	r3, r0, r3
 8006f18:	185b      	adds	r3, r3, r1
 8006f1a:	1419      	asrs	r1, r3, #16
 8006f1c:	b292      	uxth	r2, r2
 8006f1e:	041b      	lsls	r3, r3, #16
 8006f20:	431a      	orrs	r2, r3
 8006f22:	9b03      	ldr	r3, [sp, #12]
 8006f24:	9104      	str	r1, [sp, #16]
 8006f26:	c504      	stmia	r5!, {r2}
 8006f28:	4563      	cmp	r3, ip
 8006f2a:	d2dc      	bcs.n	8006ee6 <quorem+0x4e>
 8006f2c:	6823      	ldr	r3, [r4, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d030      	beq.n	8006f94 <quorem+0xfc>
 8006f32:	0030      	movs	r0, r6
 8006f34:	9902      	ldr	r1, [sp, #8]
 8006f36:	f001 fa11 	bl	800835c <__mcmp>
 8006f3a:	2800      	cmp	r0, #0
 8006f3c:	db23      	blt.n	8006f86 <quorem+0xee>
 8006f3e:	0034      	movs	r4, r6
 8006f40:	2500      	movs	r5, #0
 8006f42:	9902      	ldr	r1, [sp, #8]
 8006f44:	3414      	adds	r4, #20
 8006f46:	3114      	adds	r1, #20
 8006f48:	6823      	ldr	r3, [r4, #0]
 8006f4a:	c901      	ldmia	r1!, {r0}
 8006f4c:	9302      	str	r3, [sp, #8]
 8006f4e:	466b      	mov	r3, sp
 8006f50:	891b      	ldrh	r3, [r3, #8]
 8006f52:	b282      	uxth	r2, r0
 8006f54:	1a9a      	subs	r2, r3, r2
 8006f56:	9b02      	ldr	r3, [sp, #8]
 8006f58:	1952      	adds	r2, r2, r5
 8006f5a:	0c00      	lsrs	r0, r0, #16
 8006f5c:	0c1b      	lsrs	r3, r3, #16
 8006f5e:	1a1b      	subs	r3, r3, r0
 8006f60:	1410      	asrs	r0, r2, #16
 8006f62:	181b      	adds	r3, r3, r0
 8006f64:	141d      	asrs	r5, r3, #16
 8006f66:	b292      	uxth	r2, r2
 8006f68:	041b      	lsls	r3, r3, #16
 8006f6a:	431a      	orrs	r2, r3
 8006f6c:	9b03      	ldr	r3, [sp, #12]
 8006f6e:	c404      	stmia	r4!, {r2}
 8006f70:	428b      	cmp	r3, r1
 8006f72:	d2e9      	bcs.n	8006f48 <quorem+0xb0>
 8006f74:	9a01      	ldr	r2, [sp, #4]
 8006f76:	00bb      	lsls	r3, r7, #2
 8006f78:	18d3      	adds	r3, r2, r3
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	2a00      	cmp	r2, #0
 8006f7e:	d013      	beq.n	8006fa8 <quorem+0x110>
 8006f80:	9b00      	ldr	r3, [sp, #0]
 8006f82:	3301      	adds	r3, #1
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	9800      	ldr	r0, [sp, #0]
 8006f88:	b007      	add	sp, #28
 8006f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f8c:	6823      	ldr	r3, [r4, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d104      	bne.n	8006f9c <quorem+0x104>
 8006f92:	3f01      	subs	r7, #1
 8006f94:	9b01      	ldr	r3, [sp, #4]
 8006f96:	3c04      	subs	r4, #4
 8006f98:	42a3      	cmp	r3, r4
 8006f9a:	d3f7      	bcc.n	8006f8c <quorem+0xf4>
 8006f9c:	6137      	str	r7, [r6, #16]
 8006f9e:	e7c8      	b.n	8006f32 <quorem+0x9a>
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	2a00      	cmp	r2, #0
 8006fa4:	d104      	bne.n	8006fb0 <quorem+0x118>
 8006fa6:	3f01      	subs	r7, #1
 8006fa8:	9a01      	ldr	r2, [sp, #4]
 8006faa:	3b04      	subs	r3, #4
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d3f7      	bcc.n	8006fa0 <quorem+0x108>
 8006fb0:	6137      	str	r7, [r6, #16]
 8006fb2:	e7e5      	b.n	8006f80 <quorem+0xe8>

08006fb4 <_dtoa_r>:
 8006fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fb6:	0014      	movs	r4, r2
 8006fb8:	001d      	movs	r5, r3
 8006fba:	69c6      	ldr	r6, [r0, #28]
 8006fbc:	b09d      	sub	sp, #116	@ 0x74
 8006fbe:	940a      	str	r4, [sp, #40]	@ 0x28
 8006fc0:	950b      	str	r5, [sp, #44]	@ 0x2c
 8006fc2:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8006fc4:	9003      	str	r0, [sp, #12]
 8006fc6:	2e00      	cmp	r6, #0
 8006fc8:	d10f      	bne.n	8006fea <_dtoa_r+0x36>
 8006fca:	2010      	movs	r0, #16
 8006fcc:	f000 fe30 	bl	8007c30 <malloc>
 8006fd0:	9b03      	ldr	r3, [sp, #12]
 8006fd2:	1e02      	subs	r2, r0, #0
 8006fd4:	61d8      	str	r0, [r3, #28]
 8006fd6:	d104      	bne.n	8006fe2 <_dtoa_r+0x2e>
 8006fd8:	21ef      	movs	r1, #239	@ 0xef
 8006fda:	4bc7      	ldr	r3, [pc, #796]	@ (80072f8 <_dtoa_r+0x344>)
 8006fdc:	48c7      	ldr	r0, [pc, #796]	@ (80072fc <_dtoa_r+0x348>)
 8006fde:	f002 fe77 	bl	8009cd0 <__assert_func>
 8006fe2:	6046      	str	r6, [r0, #4]
 8006fe4:	6086      	str	r6, [r0, #8]
 8006fe6:	6006      	str	r6, [r0, #0]
 8006fe8:	60c6      	str	r6, [r0, #12]
 8006fea:	9b03      	ldr	r3, [sp, #12]
 8006fec:	69db      	ldr	r3, [r3, #28]
 8006fee:	6819      	ldr	r1, [r3, #0]
 8006ff0:	2900      	cmp	r1, #0
 8006ff2:	d00b      	beq.n	800700c <_dtoa_r+0x58>
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	4093      	lsls	r3, r2
 8006ffa:	604a      	str	r2, [r1, #4]
 8006ffc:	608b      	str	r3, [r1, #8]
 8006ffe:	9803      	ldr	r0, [sp, #12]
 8007000:	f000 ff16 	bl	8007e30 <_Bfree>
 8007004:	2200      	movs	r2, #0
 8007006:	9b03      	ldr	r3, [sp, #12]
 8007008:	69db      	ldr	r3, [r3, #28]
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	2d00      	cmp	r5, #0
 800700e:	da1e      	bge.n	800704e <_dtoa_r+0x9a>
 8007010:	2301      	movs	r3, #1
 8007012:	603b      	str	r3, [r7, #0]
 8007014:	006b      	lsls	r3, r5, #1
 8007016:	085b      	lsrs	r3, r3, #1
 8007018:	930b      	str	r3, [sp, #44]	@ 0x2c
 800701a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800701c:	4bb8      	ldr	r3, [pc, #736]	@ (8007300 <_dtoa_r+0x34c>)
 800701e:	4ab8      	ldr	r2, [pc, #736]	@ (8007300 <_dtoa_r+0x34c>)
 8007020:	403b      	ands	r3, r7
 8007022:	4293      	cmp	r3, r2
 8007024:	d116      	bne.n	8007054 <_dtoa_r+0xa0>
 8007026:	4bb7      	ldr	r3, [pc, #732]	@ (8007304 <_dtoa_r+0x350>)
 8007028:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800702a:	6013      	str	r3, [r2, #0]
 800702c:	033b      	lsls	r3, r7, #12
 800702e:	0b1b      	lsrs	r3, r3, #12
 8007030:	4323      	orrs	r3, r4
 8007032:	d101      	bne.n	8007038 <_dtoa_r+0x84>
 8007034:	f000 fd83 	bl	8007b3e <_dtoa_r+0xb8a>
 8007038:	4bb3      	ldr	r3, [pc, #716]	@ (8007308 <_dtoa_r+0x354>)
 800703a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800703c:	9308      	str	r3, [sp, #32]
 800703e:	2a00      	cmp	r2, #0
 8007040:	d002      	beq.n	8007048 <_dtoa_r+0x94>
 8007042:	4bb2      	ldr	r3, [pc, #712]	@ (800730c <_dtoa_r+0x358>)
 8007044:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007046:	6013      	str	r3, [r2, #0]
 8007048:	9808      	ldr	r0, [sp, #32]
 800704a:	b01d      	add	sp, #116	@ 0x74
 800704c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800704e:	2300      	movs	r3, #0
 8007050:	603b      	str	r3, [r7, #0]
 8007052:	e7e2      	b.n	800701a <_dtoa_r+0x66>
 8007054:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007056:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007058:	9212      	str	r2, [sp, #72]	@ 0x48
 800705a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800705c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800705e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007060:	2200      	movs	r2, #0
 8007062:	2300      	movs	r3, #0
 8007064:	f7f9 f9f2 	bl	800044c <__aeabi_dcmpeq>
 8007068:	1e06      	subs	r6, r0, #0
 800706a:	d00b      	beq.n	8007084 <_dtoa_r+0xd0>
 800706c:	2301      	movs	r3, #1
 800706e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <_dtoa_r+0xca>
 8007078:	4ba5      	ldr	r3, [pc, #660]	@ (8007310 <_dtoa_r+0x35c>)
 800707a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	4ba5      	ldr	r3, [pc, #660]	@ (8007314 <_dtoa_r+0x360>)
 8007080:	9308      	str	r3, [sp, #32]
 8007082:	e7e1      	b.n	8007048 <_dtoa_r+0x94>
 8007084:	ab1a      	add	r3, sp, #104	@ 0x68
 8007086:	9301      	str	r3, [sp, #4]
 8007088:	ab1b      	add	r3, sp, #108	@ 0x6c
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	9803      	ldr	r0, [sp, #12]
 800708e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007090:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007092:	f001 fa85 	bl	80085a0 <__d2b>
 8007096:	007a      	lsls	r2, r7, #1
 8007098:	9005      	str	r0, [sp, #20]
 800709a:	0d52      	lsrs	r2, r2, #21
 800709c:	d100      	bne.n	80070a0 <_dtoa_r+0xec>
 800709e:	e07b      	b.n	8007198 <_dtoa_r+0x1e4>
 80070a0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80070a2:	9618      	str	r6, [sp, #96]	@ 0x60
 80070a4:	0319      	lsls	r1, r3, #12
 80070a6:	4b9c      	ldr	r3, [pc, #624]	@ (8007318 <_dtoa_r+0x364>)
 80070a8:	0b09      	lsrs	r1, r1, #12
 80070aa:	430b      	orrs	r3, r1
 80070ac:	499b      	ldr	r1, [pc, #620]	@ (800731c <_dtoa_r+0x368>)
 80070ae:	1857      	adds	r7, r2, r1
 80070b0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80070b2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80070b4:	0019      	movs	r1, r3
 80070b6:	2200      	movs	r2, #0
 80070b8:	4b99      	ldr	r3, [pc, #612]	@ (8007320 <_dtoa_r+0x36c>)
 80070ba:	f7fa fe3f 	bl	8001d3c <__aeabi_dsub>
 80070be:	4a99      	ldr	r2, [pc, #612]	@ (8007324 <_dtoa_r+0x370>)
 80070c0:	4b99      	ldr	r3, [pc, #612]	@ (8007328 <_dtoa_r+0x374>)
 80070c2:	f7fa fb73 	bl	80017ac <__aeabi_dmul>
 80070c6:	4a99      	ldr	r2, [pc, #612]	@ (800732c <_dtoa_r+0x378>)
 80070c8:	4b99      	ldr	r3, [pc, #612]	@ (8007330 <_dtoa_r+0x37c>)
 80070ca:	f7f9 fbc7 	bl	800085c <__aeabi_dadd>
 80070ce:	0004      	movs	r4, r0
 80070d0:	0038      	movs	r0, r7
 80070d2:	000d      	movs	r5, r1
 80070d4:	f7fb fa2c 	bl	8002530 <__aeabi_i2d>
 80070d8:	4a96      	ldr	r2, [pc, #600]	@ (8007334 <_dtoa_r+0x380>)
 80070da:	4b97      	ldr	r3, [pc, #604]	@ (8007338 <_dtoa_r+0x384>)
 80070dc:	f7fa fb66 	bl	80017ac <__aeabi_dmul>
 80070e0:	0002      	movs	r2, r0
 80070e2:	000b      	movs	r3, r1
 80070e4:	0020      	movs	r0, r4
 80070e6:	0029      	movs	r1, r5
 80070e8:	f7f9 fbb8 	bl	800085c <__aeabi_dadd>
 80070ec:	0004      	movs	r4, r0
 80070ee:	000d      	movs	r5, r1
 80070f0:	f7fb f9e2 	bl	80024b8 <__aeabi_d2iz>
 80070f4:	2200      	movs	r2, #0
 80070f6:	9004      	str	r0, [sp, #16]
 80070f8:	2300      	movs	r3, #0
 80070fa:	0020      	movs	r0, r4
 80070fc:	0029      	movs	r1, r5
 80070fe:	f7f9 f9ab 	bl	8000458 <__aeabi_dcmplt>
 8007102:	2800      	cmp	r0, #0
 8007104:	d00b      	beq.n	800711e <_dtoa_r+0x16a>
 8007106:	9804      	ldr	r0, [sp, #16]
 8007108:	f7fb fa12 	bl	8002530 <__aeabi_i2d>
 800710c:	002b      	movs	r3, r5
 800710e:	0022      	movs	r2, r4
 8007110:	f7f9 f99c 	bl	800044c <__aeabi_dcmpeq>
 8007114:	4243      	negs	r3, r0
 8007116:	4158      	adcs	r0, r3
 8007118:	9b04      	ldr	r3, [sp, #16]
 800711a:	1a1b      	subs	r3, r3, r0
 800711c:	9304      	str	r3, [sp, #16]
 800711e:	2301      	movs	r3, #1
 8007120:	9315      	str	r3, [sp, #84]	@ 0x54
 8007122:	9b04      	ldr	r3, [sp, #16]
 8007124:	2b16      	cmp	r3, #22
 8007126:	d810      	bhi.n	800714a <_dtoa_r+0x196>
 8007128:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800712a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800712c:	9a04      	ldr	r2, [sp, #16]
 800712e:	4b83      	ldr	r3, [pc, #524]	@ (800733c <_dtoa_r+0x388>)
 8007130:	00d2      	lsls	r2, r2, #3
 8007132:	189b      	adds	r3, r3, r2
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f7f9 f98e 	bl	8000458 <__aeabi_dcmplt>
 800713c:	2800      	cmp	r0, #0
 800713e:	d047      	beq.n	80071d0 <_dtoa_r+0x21c>
 8007140:	9b04      	ldr	r3, [sp, #16]
 8007142:	3b01      	subs	r3, #1
 8007144:	9304      	str	r3, [sp, #16]
 8007146:	2300      	movs	r3, #0
 8007148:	9315      	str	r3, [sp, #84]	@ 0x54
 800714a:	2200      	movs	r2, #0
 800714c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800714e:	9206      	str	r2, [sp, #24]
 8007150:	1bdb      	subs	r3, r3, r7
 8007152:	1e5a      	subs	r2, r3, #1
 8007154:	d53e      	bpl.n	80071d4 <_dtoa_r+0x220>
 8007156:	2201      	movs	r2, #1
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	9306      	str	r3, [sp, #24]
 800715c:	2300      	movs	r3, #0
 800715e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007160:	9b04      	ldr	r3, [sp, #16]
 8007162:	2b00      	cmp	r3, #0
 8007164:	db38      	blt.n	80071d8 <_dtoa_r+0x224>
 8007166:	9a04      	ldr	r2, [sp, #16]
 8007168:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800716a:	4694      	mov	ip, r2
 800716c:	4463      	add	r3, ip
 800716e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007170:	2300      	movs	r3, #0
 8007172:	9214      	str	r2, [sp, #80]	@ 0x50
 8007174:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007176:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007178:	2401      	movs	r4, #1
 800717a:	2b09      	cmp	r3, #9
 800717c:	d867      	bhi.n	800724e <_dtoa_r+0x29a>
 800717e:	2b05      	cmp	r3, #5
 8007180:	dd02      	ble.n	8007188 <_dtoa_r+0x1d4>
 8007182:	2400      	movs	r4, #0
 8007184:	3b04      	subs	r3, #4
 8007186:	9322      	str	r3, [sp, #136]	@ 0x88
 8007188:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800718a:	1e98      	subs	r0, r3, #2
 800718c:	2803      	cmp	r0, #3
 800718e:	d867      	bhi.n	8007260 <_dtoa_r+0x2ac>
 8007190:	f7f8 ffc2 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007194:	5b383a2b 	.word	0x5b383a2b
 8007198:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800719a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800719c:	18f6      	adds	r6, r6, r3
 800719e:	4b68      	ldr	r3, [pc, #416]	@ (8007340 <_dtoa_r+0x38c>)
 80071a0:	18f2      	adds	r2, r6, r3
 80071a2:	2a20      	cmp	r2, #32
 80071a4:	dd0f      	ble.n	80071c6 <_dtoa_r+0x212>
 80071a6:	2340      	movs	r3, #64	@ 0x40
 80071a8:	1a9b      	subs	r3, r3, r2
 80071aa:	409f      	lsls	r7, r3
 80071ac:	4b65      	ldr	r3, [pc, #404]	@ (8007344 <_dtoa_r+0x390>)
 80071ae:	0038      	movs	r0, r7
 80071b0:	18f3      	adds	r3, r6, r3
 80071b2:	40dc      	lsrs	r4, r3
 80071b4:	4320      	orrs	r0, r4
 80071b6:	f7fb f9e9 	bl	800258c <__aeabi_ui2d>
 80071ba:	2201      	movs	r2, #1
 80071bc:	4b62      	ldr	r3, [pc, #392]	@ (8007348 <_dtoa_r+0x394>)
 80071be:	1e77      	subs	r7, r6, #1
 80071c0:	18cb      	adds	r3, r1, r3
 80071c2:	9218      	str	r2, [sp, #96]	@ 0x60
 80071c4:	e776      	b.n	80070b4 <_dtoa_r+0x100>
 80071c6:	2320      	movs	r3, #32
 80071c8:	0020      	movs	r0, r4
 80071ca:	1a9b      	subs	r3, r3, r2
 80071cc:	4098      	lsls	r0, r3
 80071ce:	e7f2      	b.n	80071b6 <_dtoa_r+0x202>
 80071d0:	9015      	str	r0, [sp, #84]	@ 0x54
 80071d2:	e7ba      	b.n	800714a <_dtoa_r+0x196>
 80071d4:	920d      	str	r2, [sp, #52]	@ 0x34
 80071d6:	e7c3      	b.n	8007160 <_dtoa_r+0x1ac>
 80071d8:	9b06      	ldr	r3, [sp, #24]
 80071da:	9a04      	ldr	r2, [sp, #16]
 80071dc:	1a9b      	subs	r3, r3, r2
 80071de:	9306      	str	r3, [sp, #24]
 80071e0:	4253      	negs	r3, r2
 80071e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80071e4:	2300      	movs	r3, #0
 80071e6:	9314      	str	r3, [sp, #80]	@ 0x50
 80071e8:	e7c5      	b.n	8007176 <_dtoa_r+0x1c2>
 80071ea:	2300      	movs	r3, #0
 80071ec:	9310      	str	r3, [sp, #64]	@ 0x40
 80071ee:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80071f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80071f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	dc13      	bgt.n	8007220 <_dtoa_r+0x26c>
 80071f8:	2301      	movs	r3, #1
 80071fa:	001a      	movs	r2, r3
 80071fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80071fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007200:	9223      	str	r2, [sp, #140]	@ 0x8c
 8007202:	e00d      	b.n	8007220 <_dtoa_r+0x26c>
 8007204:	2301      	movs	r3, #1
 8007206:	e7f1      	b.n	80071ec <_dtoa_r+0x238>
 8007208:	2300      	movs	r3, #0
 800720a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800720c:	9310      	str	r3, [sp, #64]	@ 0x40
 800720e:	4694      	mov	ip, r2
 8007210:	9b04      	ldr	r3, [sp, #16]
 8007212:	4463      	add	r3, ip
 8007214:	930e      	str	r3, [sp, #56]	@ 0x38
 8007216:	3301      	adds	r3, #1
 8007218:	9309      	str	r3, [sp, #36]	@ 0x24
 800721a:	2b00      	cmp	r3, #0
 800721c:	dc00      	bgt.n	8007220 <_dtoa_r+0x26c>
 800721e:	2301      	movs	r3, #1
 8007220:	9a03      	ldr	r2, [sp, #12]
 8007222:	2100      	movs	r1, #0
 8007224:	69d0      	ldr	r0, [r2, #28]
 8007226:	2204      	movs	r2, #4
 8007228:	0015      	movs	r5, r2
 800722a:	3514      	adds	r5, #20
 800722c:	429d      	cmp	r5, r3
 800722e:	d91b      	bls.n	8007268 <_dtoa_r+0x2b4>
 8007230:	6041      	str	r1, [r0, #4]
 8007232:	9803      	ldr	r0, [sp, #12]
 8007234:	f000 fdb8 	bl	8007da8 <_Balloc>
 8007238:	9008      	str	r0, [sp, #32]
 800723a:	2800      	cmp	r0, #0
 800723c:	d117      	bne.n	800726e <_dtoa_r+0x2ba>
 800723e:	21b0      	movs	r1, #176	@ 0xb0
 8007240:	4b42      	ldr	r3, [pc, #264]	@ (800734c <_dtoa_r+0x398>)
 8007242:	482e      	ldr	r0, [pc, #184]	@ (80072fc <_dtoa_r+0x348>)
 8007244:	9a08      	ldr	r2, [sp, #32]
 8007246:	31ff      	adds	r1, #255	@ 0xff
 8007248:	e6c9      	b.n	8006fde <_dtoa_r+0x2a>
 800724a:	2301      	movs	r3, #1
 800724c:	e7dd      	b.n	800720a <_dtoa_r+0x256>
 800724e:	2300      	movs	r3, #0
 8007250:	9410      	str	r4, [sp, #64]	@ 0x40
 8007252:	9322      	str	r3, [sp, #136]	@ 0x88
 8007254:	3b01      	subs	r3, #1
 8007256:	930e      	str	r3, [sp, #56]	@ 0x38
 8007258:	9309      	str	r3, [sp, #36]	@ 0x24
 800725a:	2200      	movs	r2, #0
 800725c:	3313      	adds	r3, #19
 800725e:	e7cf      	b.n	8007200 <_dtoa_r+0x24c>
 8007260:	2301      	movs	r3, #1
 8007262:	9310      	str	r3, [sp, #64]	@ 0x40
 8007264:	3b02      	subs	r3, #2
 8007266:	e7f6      	b.n	8007256 <_dtoa_r+0x2a2>
 8007268:	3101      	adds	r1, #1
 800726a:	0052      	lsls	r2, r2, #1
 800726c:	e7dc      	b.n	8007228 <_dtoa_r+0x274>
 800726e:	9b03      	ldr	r3, [sp, #12]
 8007270:	9a08      	ldr	r2, [sp, #32]
 8007272:	69db      	ldr	r3, [r3, #28]
 8007274:	601a      	str	r2, [r3, #0]
 8007276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007278:	2b0e      	cmp	r3, #14
 800727a:	d900      	bls.n	800727e <_dtoa_r+0x2ca>
 800727c:	e0d9      	b.n	8007432 <_dtoa_r+0x47e>
 800727e:	2c00      	cmp	r4, #0
 8007280:	d100      	bne.n	8007284 <_dtoa_r+0x2d0>
 8007282:	e0d6      	b.n	8007432 <_dtoa_r+0x47e>
 8007284:	9b04      	ldr	r3, [sp, #16]
 8007286:	2b00      	cmp	r3, #0
 8007288:	dd64      	ble.n	8007354 <_dtoa_r+0x3a0>
 800728a:	210f      	movs	r1, #15
 800728c:	9a04      	ldr	r2, [sp, #16]
 800728e:	4b2b      	ldr	r3, [pc, #172]	@ (800733c <_dtoa_r+0x388>)
 8007290:	400a      	ands	r2, r1
 8007292:	00d2      	lsls	r2, r2, #3
 8007294:	189b      	adds	r3, r3, r2
 8007296:	681e      	ldr	r6, [r3, #0]
 8007298:	685f      	ldr	r7, [r3, #4]
 800729a:	9b04      	ldr	r3, [sp, #16]
 800729c:	2402      	movs	r4, #2
 800729e:	111d      	asrs	r5, r3, #4
 80072a0:	05db      	lsls	r3, r3, #23
 80072a2:	d50a      	bpl.n	80072ba <_dtoa_r+0x306>
 80072a4:	4b2a      	ldr	r3, [pc, #168]	@ (8007350 <_dtoa_r+0x39c>)
 80072a6:	400d      	ands	r5, r1
 80072a8:	6a1a      	ldr	r2, [r3, #32]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ac:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80072ae:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80072b0:	f7f9 fe38 	bl	8000f24 <__aeabi_ddiv>
 80072b4:	900a      	str	r0, [sp, #40]	@ 0x28
 80072b6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80072b8:	3401      	adds	r4, #1
 80072ba:	4b25      	ldr	r3, [pc, #148]	@ (8007350 <_dtoa_r+0x39c>)
 80072bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80072be:	2d00      	cmp	r5, #0
 80072c0:	d108      	bne.n	80072d4 <_dtoa_r+0x320>
 80072c2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80072c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80072c6:	0032      	movs	r2, r6
 80072c8:	003b      	movs	r3, r7
 80072ca:	f7f9 fe2b 	bl	8000f24 <__aeabi_ddiv>
 80072ce:	900a      	str	r0, [sp, #40]	@ 0x28
 80072d0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80072d2:	e05a      	b.n	800738a <_dtoa_r+0x3d6>
 80072d4:	2301      	movs	r3, #1
 80072d6:	421d      	tst	r5, r3
 80072d8:	d009      	beq.n	80072ee <_dtoa_r+0x33a>
 80072da:	18e4      	adds	r4, r4, r3
 80072dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072de:	0030      	movs	r0, r6
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	0039      	movs	r1, r7
 80072e6:	f7fa fa61 	bl	80017ac <__aeabi_dmul>
 80072ea:	0006      	movs	r6, r0
 80072ec:	000f      	movs	r7, r1
 80072ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072f0:	106d      	asrs	r5, r5, #1
 80072f2:	3308      	adds	r3, #8
 80072f4:	e7e2      	b.n	80072bc <_dtoa_r+0x308>
 80072f6:	46c0      	nop			@ (mov r8, r8)
 80072f8:	0800a77a 	.word	0x0800a77a
 80072fc:	0800a791 	.word	0x0800a791
 8007300:	7ff00000 	.word	0x7ff00000
 8007304:	0000270f 	.word	0x0000270f
 8007308:	0800a776 	.word	0x0800a776
 800730c:	0800a779 	.word	0x0800a779
 8007310:	0800a745 	.word	0x0800a745
 8007314:	0800a744 	.word	0x0800a744
 8007318:	3ff00000 	.word	0x3ff00000
 800731c:	fffffc01 	.word	0xfffffc01
 8007320:	3ff80000 	.word	0x3ff80000
 8007324:	636f4361 	.word	0x636f4361
 8007328:	3fd287a7 	.word	0x3fd287a7
 800732c:	8b60c8b3 	.word	0x8b60c8b3
 8007330:	3fc68a28 	.word	0x3fc68a28
 8007334:	509f79fb 	.word	0x509f79fb
 8007338:	3fd34413 	.word	0x3fd34413
 800733c:	0800a888 	.word	0x0800a888
 8007340:	00000432 	.word	0x00000432
 8007344:	00000412 	.word	0x00000412
 8007348:	fe100000 	.word	0xfe100000
 800734c:	0800a7e9 	.word	0x0800a7e9
 8007350:	0800a860 	.word	0x0800a860
 8007354:	9b04      	ldr	r3, [sp, #16]
 8007356:	2402      	movs	r4, #2
 8007358:	2b00      	cmp	r3, #0
 800735a:	d016      	beq.n	800738a <_dtoa_r+0x3d6>
 800735c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800735e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007360:	220f      	movs	r2, #15
 8007362:	425d      	negs	r5, r3
 8007364:	402a      	ands	r2, r5
 8007366:	4bd7      	ldr	r3, [pc, #860]	@ (80076c4 <_dtoa_r+0x710>)
 8007368:	00d2      	lsls	r2, r2, #3
 800736a:	189b      	adds	r3, r3, r2
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	f7fa fa1c 	bl	80017ac <__aeabi_dmul>
 8007374:	2701      	movs	r7, #1
 8007376:	2300      	movs	r3, #0
 8007378:	900a      	str	r0, [sp, #40]	@ 0x28
 800737a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800737c:	4ed2      	ldr	r6, [pc, #840]	@ (80076c8 <_dtoa_r+0x714>)
 800737e:	112d      	asrs	r5, r5, #4
 8007380:	2d00      	cmp	r5, #0
 8007382:	d000      	beq.n	8007386 <_dtoa_r+0x3d2>
 8007384:	e0ba      	b.n	80074fc <_dtoa_r+0x548>
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1a1      	bne.n	80072ce <_dtoa_r+0x31a>
 800738a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800738c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800738e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007390:	2b00      	cmp	r3, #0
 8007392:	d100      	bne.n	8007396 <_dtoa_r+0x3e2>
 8007394:	e0bd      	b.n	8007512 <_dtoa_r+0x55e>
 8007396:	2200      	movs	r2, #0
 8007398:	0030      	movs	r0, r6
 800739a:	0039      	movs	r1, r7
 800739c:	4bcb      	ldr	r3, [pc, #812]	@ (80076cc <_dtoa_r+0x718>)
 800739e:	f7f9 f85b 	bl	8000458 <__aeabi_dcmplt>
 80073a2:	2800      	cmp	r0, #0
 80073a4:	d100      	bne.n	80073a8 <_dtoa_r+0x3f4>
 80073a6:	e0b4      	b.n	8007512 <_dtoa_r+0x55e>
 80073a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d100      	bne.n	80073b0 <_dtoa_r+0x3fc>
 80073ae:	e0b0      	b.n	8007512 <_dtoa_r+0x55e>
 80073b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	dd39      	ble.n	800742a <_dtoa_r+0x476>
 80073b6:	9b04      	ldr	r3, [sp, #16]
 80073b8:	2200      	movs	r2, #0
 80073ba:	3b01      	subs	r3, #1
 80073bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80073be:	0030      	movs	r0, r6
 80073c0:	4bc3      	ldr	r3, [pc, #780]	@ (80076d0 <_dtoa_r+0x71c>)
 80073c2:	0039      	movs	r1, r7
 80073c4:	f7fa f9f2 	bl	80017ac <__aeabi_dmul>
 80073c8:	900a      	str	r0, [sp, #40]	@ 0x28
 80073ca:	910b      	str	r1, [sp, #44]	@ 0x2c
 80073cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073ce:	3401      	adds	r4, #1
 80073d0:	0020      	movs	r0, r4
 80073d2:	9311      	str	r3, [sp, #68]	@ 0x44
 80073d4:	f7fb f8ac 	bl	8002530 <__aeabi_i2d>
 80073d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80073da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073dc:	f7fa f9e6 	bl	80017ac <__aeabi_dmul>
 80073e0:	4bbc      	ldr	r3, [pc, #752]	@ (80076d4 <_dtoa_r+0x720>)
 80073e2:	2200      	movs	r2, #0
 80073e4:	f7f9 fa3a 	bl	800085c <__aeabi_dadd>
 80073e8:	4bbb      	ldr	r3, [pc, #748]	@ (80076d8 <_dtoa_r+0x724>)
 80073ea:	0006      	movs	r6, r0
 80073ec:	18cf      	adds	r7, r1, r3
 80073ee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d000      	beq.n	80073f6 <_dtoa_r+0x442>
 80073f4:	e091      	b.n	800751a <_dtoa_r+0x566>
 80073f6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80073f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80073fa:	2200      	movs	r2, #0
 80073fc:	4bb7      	ldr	r3, [pc, #732]	@ (80076dc <_dtoa_r+0x728>)
 80073fe:	f7fa fc9d 	bl	8001d3c <__aeabi_dsub>
 8007402:	0032      	movs	r2, r6
 8007404:	003b      	movs	r3, r7
 8007406:	0004      	movs	r4, r0
 8007408:	000d      	movs	r5, r1
 800740a:	f7f9 f839 	bl	8000480 <__aeabi_dcmpgt>
 800740e:	2800      	cmp	r0, #0
 8007410:	d000      	beq.n	8007414 <_dtoa_r+0x460>
 8007412:	e29d      	b.n	8007950 <_dtoa_r+0x99c>
 8007414:	2180      	movs	r1, #128	@ 0x80
 8007416:	0609      	lsls	r1, r1, #24
 8007418:	187b      	adds	r3, r7, r1
 800741a:	0032      	movs	r2, r6
 800741c:	0020      	movs	r0, r4
 800741e:	0029      	movs	r1, r5
 8007420:	f7f9 f81a 	bl	8000458 <__aeabi_dcmplt>
 8007424:	2800      	cmp	r0, #0
 8007426:	d000      	beq.n	800742a <_dtoa_r+0x476>
 8007428:	e130      	b.n	800768c <_dtoa_r+0x6d8>
 800742a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800742c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800742e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007430:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007432:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007434:	2b00      	cmp	r3, #0
 8007436:	da00      	bge.n	800743a <_dtoa_r+0x486>
 8007438:	e177      	b.n	800772a <_dtoa_r+0x776>
 800743a:	9a04      	ldr	r2, [sp, #16]
 800743c:	2a0e      	cmp	r2, #14
 800743e:	dd00      	ble.n	8007442 <_dtoa_r+0x48e>
 8007440:	e173      	b.n	800772a <_dtoa_r+0x776>
 8007442:	4ba0      	ldr	r3, [pc, #640]	@ (80076c4 <_dtoa_r+0x710>)
 8007444:	00d2      	lsls	r2, r2, #3
 8007446:	189b      	adds	r3, r3, r2
 8007448:	685c      	ldr	r4, [r3, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	9306      	str	r3, [sp, #24]
 800744e:	9407      	str	r4, [sp, #28]
 8007450:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007452:	2b00      	cmp	r3, #0
 8007454:	da03      	bge.n	800745e <_dtoa_r+0x4aa>
 8007456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007458:	2b00      	cmp	r3, #0
 800745a:	dc00      	bgt.n	800745e <_dtoa_r+0x4aa>
 800745c:	e106      	b.n	800766c <_dtoa_r+0x6b8>
 800745e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007460:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007464:	9d08      	ldr	r5, [sp, #32]
 8007466:	3b01      	subs	r3, #1
 8007468:	195b      	adds	r3, r3, r5
 800746a:	930a      	str	r3, [sp, #40]	@ 0x28
 800746c:	9a06      	ldr	r2, [sp, #24]
 800746e:	9b07      	ldr	r3, [sp, #28]
 8007470:	0030      	movs	r0, r6
 8007472:	0039      	movs	r1, r7
 8007474:	f7f9 fd56 	bl	8000f24 <__aeabi_ddiv>
 8007478:	f7fb f81e 	bl	80024b8 <__aeabi_d2iz>
 800747c:	9009      	str	r0, [sp, #36]	@ 0x24
 800747e:	f7fb f857 	bl	8002530 <__aeabi_i2d>
 8007482:	9a06      	ldr	r2, [sp, #24]
 8007484:	9b07      	ldr	r3, [sp, #28]
 8007486:	f7fa f991 	bl	80017ac <__aeabi_dmul>
 800748a:	0002      	movs	r2, r0
 800748c:	000b      	movs	r3, r1
 800748e:	0030      	movs	r0, r6
 8007490:	0039      	movs	r1, r7
 8007492:	f7fa fc53 	bl	8001d3c <__aeabi_dsub>
 8007496:	002b      	movs	r3, r5
 8007498:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800749a:	3501      	adds	r5, #1
 800749c:	3230      	adds	r2, #48	@ 0x30
 800749e:	701a      	strb	r2, [r3, #0]
 80074a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80074a2:	002c      	movs	r4, r5
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d000      	beq.n	80074aa <_dtoa_r+0x4f6>
 80074a8:	e131      	b.n	800770e <_dtoa_r+0x75a>
 80074aa:	0002      	movs	r2, r0
 80074ac:	000b      	movs	r3, r1
 80074ae:	f7f9 f9d5 	bl	800085c <__aeabi_dadd>
 80074b2:	9a06      	ldr	r2, [sp, #24]
 80074b4:	9b07      	ldr	r3, [sp, #28]
 80074b6:	0006      	movs	r6, r0
 80074b8:	000f      	movs	r7, r1
 80074ba:	f7f8 ffe1 	bl	8000480 <__aeabi_dcmpgt>
 80074be:	2800      	cmp	r0, #0
 80074c0:	d000      	beq.n	80074c4 <_dtoa_r+0x510>
 80074c2:	e10f      	b.n	80076e4 <_dtoa_r+0x730>
 80074c4:	9a06      	ldr	r2, [sp, #24]
 80074c6:	9b07      	ldr	r3, [sp, #28]
 80074c8:	0030      	movs	r0, r6
 80074ca:	0039      	movs	r1, r7
 80074cc:	f7f8 ffbe 	bl	800044c <__aeabi_dcmpeq>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	d003      	beq.n	80074dc <_dtoa_r+0x528>
 80074d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074d6:	07dd      	lsls	r5, r3, #31
 80074d8:	d500      	bpl.n	80074dc <_dtoa_r+0x528>
 80074da:	e103      	b.n	80076e4 <_dtoa_r+0x730>
 80074dc:	9905      	ldr	r1, [sp, #20]
 80074de:	9803      	ldr	r0, [sp, #12]
 80074e0:	f000 fca6 	bl	8007e30 <_Bfree>
 80074e4:	2300      	movs	r3, #0
 80074e6:	7023      	strb	r3, [r4, #0]
 80074e8:	9b04      	ldr	r3, [sp, #16]
 80074ea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80074ec:	3301      	adds	r3, #1
 80074ee:	6013      	str	r3, [r2, #0]
 80074f0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d100      	bne.n	80074f8 <_dtoa_r+0x544>
 80074f6:	e5a7      	b.n	8007048 <_dtoa_r+0x94>
 80074f8:	601c      	str	r4, [r3, #0]
 80074fa:	e5a5      	b.n	8007048 <_dtoa_r+0x94>
 80074fc:	423d      	tst	r5, r7
 80074fe:	d005      	beq.n	800750c <_dtoa_r+0x558>
 8007500:	6832      	ldr	r2, [r6, #0]
 8007502:	6873      	ldr	r3, [r6, #4]
 8007504:	f7fa f952 	bl	80017ac <__aeabi_dmul>
 8007508:	003b      	movs	r3, r7
 800750a:	3401      	adds	r4, #1
 800750c:	106d      	asrs	r5, r5, #1
 800750e:	3608      	adds	r6, #8
 8007510:	e736      	b.n	8007380 <_dtoa_r+0x3cc>
 8007512:	9b04      	ldr	r3, [sp, #16]
 8007514:	930c      	str	r3, [sp, #48]	@ 0x30
 8007516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007518:	e75a      	b.n	80073d0 <_dtoa_r+0x41c>
 800751a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800751c:	4b69      	ldr	r3, [pc, #420]	@ (80076c4 <_dtoa_r+0x710>)
 800751e:	3a01      	subs	r2, #1
 8007520:	00d2      	lsls	r2, r2, #3
 8007522:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8007524:	189b      	adds	r3, r3, r2
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	2900      	cmp	r1, #0
 800752c:	d04c      	beq.n	80075c8 <_dtoa_r+0x614>
 800752e:	2000      	movs	r0, #0
 8007530:	496b      	ldr	r1, [pc, #428]	@ (80076e0 <_dtoa_r+0x72c>)
 8007532:	f7f9 fcf7 	bl	8000f24 <__aeabi_ddiv>
 8007536:	0032      	movs	r2, r6
 8007538:	003b      	movs	r3, r7
 800753a:	f7fa fbff 	bl	8001d3c <__aeabi_dsub>
 800753e:	9a08      	ldr	r2, [sp, #32]
 8007540:	0006      	movs	r6, r0
 8007542:	4694      	mov	ip, r2
 8007544:	000f      	movs	r7, r1
 8007546:	9b08      	ldr	r3, [sp, #32]
 8007548:	9316      	str	r3, [sp, #88]	@ 0x58
 800754a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800754c:	4463      	add	r3, ip
 800754e:	9311      	str	r3, [sp, #68]	@ 0x44
 8007550:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007552:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007554:	f7fa ffb0 	bl	80024b8 <__aeabi_d2iz>
 8007558:	0005      	movs	r5, r0
 800755a:	f7fa ffe9 	bl	8002530 <__aeabi_i2d>
 800755e:	0002      	movs	r2, r0
 8007560:	000b      	movs	r3, r1
 8007562:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007564:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007566:	f7fa fbe9 	bl	8001d3c <__aeabi_dsub>
 800756a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800756c:	3530      	adds	r5, #48	@ 0x30
 800756e:	1c5c      	adds	r4, r3, #1
 8007570:	701d      	strb	r5, [r3, #0]
 8007572:	0032      	movs	r2, r6
 8007574:	003b      	movs	r3, r7
 8007576:	900a      	str	r0, [sp, #40]	@ 0x28
 8007578:	910b      	str	r1, [sp, #44]	@ 0x2c
 800757a:	f7f8 ff6d 	bl	8000458 <__aeabi_dcmplt>
 800757e:	2800      	cmp	r0, #0
 8007580:	d16a      	bne.n	8007658 <_dtoa_r+0x6a4>
 8007582:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007584:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007586:	2000      	movs	r0, #0
 8007588:	4950      	ldr	r1, [pc, #320]	@ (80076cc <_dtoa_r+0x718>)
 800758a:	f7fa fbd7 	bl	8001d3c <__aeabi_dsub>
 800758e:	0032      	movs	r2, r6
 8007590:	003b      	movs	r3, r7
 8007592:	f7f8 ff61 	bl	8000458 <__aeabi_dcmplt>
 8007596:	2800      	cmp	r0, #0
 8007598:	d000      	beq.n	800759c <_dtoa_r+0x5e8>
 800759a:	e0a5      	b.n	80076e8 <_dtoa_r+0x734>
 800759c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800759e:	42a3      	cmp	r3, r4
 80075a0:	d100      	bne.n	80075a4 <_dtoa_r+0x5f0>
 80075a2:	e742      	b.n	800742a <_dtoa_r+0x476>
 80075a4:	2200      	movs	r2, #0
 80075a6:	0030      	movs	r0, r6
 80075a8:	0039      	movs	r1, r7
 80075aa:	4b49      	ldr	r3, [pc, #292]	@ (80076d0 <_dtoa_r+0x71c>)
 80075ac:	f7fa f8fe 	bl	80017ac <__aeabi_dmul>
 80075b0:	2200      	movs	r2, #0
 80075b2:	0006      	movs	r6, r0
 80075b4:	000f      	movs	r7, r1
 80075b6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80075b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80075ba:	4b45      	ldr	r3, [pc, #276]	@ (80076d0 <_dtoa_r+0x71c>)
 80075bc:	f7fa f8f6 	bl	80017ac <__aeabi_dmul>
 80075c0:	9416      	str	r4, [sp, #88]	@ 0x58
 80075c2:	900a      	str	r0, [sp, #40]	@ 0x28
 80075c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80075c6:	e7c3      	b.n	8007550 <_dtoa_r+0x59c>
 80075c8:	0030      	movs	r0, r6
 80075ca:	0039      	movs	r1, r7
 80075cc:	f7fa f8ee 	bl	80017ac <__aeabi_dmul>
 80075d0:	9d08      	ldr	r5, [sp, #32]
 80075d2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80075d4:	002b      	movs	r3, r5
 80075d6:	4694      	mov	ip, r2
 80075d8:	9016      	str	r0, [sp, #88]	@ 0x58
 80075da:	9117      	str	r1, [sp, #92]	@ 0x5c
 80075dc:	4463      	add	r3, ip
 80075de:	9319      	str	r3, [sp, #100]	@ 0x64
 80075e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80075e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80075e4:	f7fa ff68 	bl	80024b8 <__aeabi_d2iz>
 80075e8:	0004      	movs	r4, r0
 80075ea:	f7fa ffa1 	bl	8002530 <__aeabi_i2d>
 80075ee:	000b      	movs	r3, r1
 80075f0:	0002      	movs	r2, r0
 80075f2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80075f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80075f6:	f7fa fba1 	bl	8001d3c <__aeabi_dsub>
 80075fa:	3430      	adds	r4, #48	@ 0x30
 80075fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80075fe:	702c      	strb	r4, [r5, #0]
 8007600:	3501      	adds	r5, #1
 8007602:	0006      	movs	r6, r0
 8007604:	000f      	movs	r7, r1
 8007606:	42ab      	cmp	r3, r5
 8007608:	d129      	bne.n	800765e <_dtoa_r+0x6aa>
 800760a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800760c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800760e:	9b08      	ldr	r3, [sp, #32]
 8007610:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8007612:	469c      	mov	ip, r3
 8007614:	2200      	movs	r2, #0
 8007616:	4b32      	ldr	r3, [pc, #200]	@ (80076e0 <_dtoa_r+0x72c>)
 8007618:	4464      	add	r4, ip
 800761a:	f7f9 f91f 	bl	800085c <__aeabi_dadd>
 800761e:	0002      	movs	r2, r0
 8007620:	000b      	movs	r3, r1
 8007622:	0030      	movs	r0, r6
 8007624:	0039      	movs	r1, r7
 8007626:	f7f8 ff2b 	bl	8000480 <__aeabi_dcmpgt>
 800762a:	2800      	cmp	r0, #0
 800762c:	d15c      	bne.n	80076e8 <_dtoa_r+0x734>
 800762e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007630:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007632:	2000      	movs	r0, #0
 8007634:	492a      	ldr	r1, [pc, #168]	@ (80076e0 <_dtoa_r+0x72c>)
 8007636:	f7fa fb81 	bl	8001d3c <__aeabi_dsub>
 800763a:	0002      	movs	r2, r0
 800763c:	000b      	movs	r3, r1
 800763e:	0030      	movs	r0, r6
 8007640:	0039      	movs	r1, r7
 8007642:	f7f8 ff09 	bl	8000458 <__aeabi_dcmplt>
 8007646:	2800      	cmp	r0, #0
 8007648:	d100      	bne.n	800764c <_dtoa_r+0x698>
 800764a:	e6ee      	b.n	800742a <_dtoa_r+0x476>
 800764c:	0023      	movs	r3, r4
 800764e:	3c01      	subs	r4, #1
 8007650:	7822      	ldrb	r2, [r4, #0]
 8007652:	2a30      	cmp	r2, #48	@ 0x30
 8007654:	d0fa      	beq.n	800764c <_dtoa_r+0x698>
 8007656:	001c      	movs	r4, r3
 8007658:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800765a:	9304      	str	r3, [sp, #16]
 800765c:	e73e      	b.n	80074dc <_dtoa_r+0x528>
 800765e:	2200      	movs	r2, #0
 8007660:	4b1b      	ldr	r3, [pc, #108]	@ (80076d0 <_dtoa_r+0x71c>)
 8007662:	f7fa f8a3 	bl	80017ac <__aeabi_dmul>
 8007666:	900a      	str	r0, [sp, #40]	@ 0x28
 8007668:	910b      	str	r1, [sp, #44]	@ 0x2c
 800766a:	e7b9      	b.n	80075e0 <_dtoa_r+0x62c>
 800766c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10c      	bne.n	800768c <_dtoa_r+0x6d8>
 8007672:	9806      	ldr	r0, [sp, #24]
 8007674:	9907      	ldr	r1, [sp, #28]
 8007676:	2200      	movs	r2, #0
 8007678:	4b18      	ldr	r3, [pc, #96]	@ (80076dc <_dtoa_r+0x728>)
 800767a:	f7fa f897 	bl	80017ac <__aeabi_dmul>
 800767e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007680:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007682:	f7f8 ff07 	bl	8000494 <__aeabi_dcmpge>
 8007686:	2800      	cmp	r0, #0
 8007688:	d100      	bne.n	800768c <_dtoa_r+0x6d8>
 800768a:	e164      	b.n	8007956 <_dtoa_r+0x9a2>
 800768c:	2600      	movs	r6, #0
 800768e:	0037      	movs	r7, r6
 8007690:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007692:	9c08      	ldr	r4, [sp, #32]
 8007694:	43db      	mvns	r3, r3
 8007696:	930c      	str	r3, [sp, #48]	@ 0x30
 8007698:	2300      	movs	r3, #0
 800769a:	9304      	str	r3, [sp, #16]
 800769c:	0031      	movs	r1, r6
 800769e:	9803      	ldr	r0, [sp, #12]
 80076a0:	f000 fbc6 	bl	8007e30 <_Bfree>
 80076a4:	2f00      	cmp	r7, #0
 80076a6:	d0d7      	beq.n	8007658 <_dtoa_r+0x6a4>
 80076a8:	9b04      	ldr	r3, [sp, #16]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d005      	beq.n	80076ba <_dtoa_r+0x706>
 80076ae:	42bb      	cmp	r3, r7
 80076b0:	d003      	beq.n	80076ba <_dtoa_r+0x706>
 80076b2:	0019      	movs	r1, r3
 80076b4:	9803      	ldr	r0, [sp, #12]
 80076b6:	f000 fbbb 	bl	8007e30 <_Bfree>
 80076ba:	0039      	movs	r1, r7
 80076bc:	9803      	ldr	r0, [sp, #12]
 80076be:	f000 fbb7 	bl	8007e30 <_Bfree>
 80076c2:	e7c9      	b.n	8007658 <_dtoa_r+0x6a4>
 80076c4:	0800a888 	.word	0x0800a888
 80076c8:	0800a860 	.word	0x0800a860
 80076cc:	3ff00000 	.word	0x3ff00000
 80076d0:	40240000 	.word	0x40240000
 80076d4:	401c0000 	.word	0x401c0000
 80076d8:	fcc00000 	.word	0xfcc00000
 80076dc:	40140000 	.word	0x40140000
 80076e0:	3fe00000 	.word	0x3fe00000
 80076e4:	9b04      	ldr	r3, [sp, #16]
 80076e6:	930c      	str	r3, [sp, #48]	@ 0x30
 80076e8:	0023      	movs	r3, r4
 80076ea:	001c      	movs	r4, r3
 80076ec:	3b01      	subs	r3, #1
 80076ee:	781a      	ldrb	r2, [r3, #0]
 80076f0:	2a39      	cmp	r2, #57	@ 0x39
 80076f2:	d108      	bne.n	8007706 <_dtoa_r+0x752>
 80076f4:	9a08      	ldr	r2, [sp, #32]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d1f7      	bne.n	80076ea <_dtoa_r+0x736>
 80076fa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80076fc:	9908      	ldr	r1, [sp, #32]
 80076fe:	3201      	adds	r2, #1
 8007700:	920c      	str	r2, [sp, #48]	@ 0x30
 8007702:	2230      	movs	r2, #48	@ 0x30
 8007704:	700a      	strb	r2, [r1, #0]
 8007706:	781a      	ldrb	r2, [r3, #0]
 8007708:	3201      	adds	r2, #1
 800770a:	701a      	strb	r2, [r3, #0]
 800770c:	e7a4      	b.n	8007658 <_dtoa_r+0x6a4>
 800770e:	2200      	movs	r2, #0
 8007710:	4bc6      	ldr	r3, [pc, #792]	@ (8007a2c <_dtoa_r+0xa78>)
 8007712:	f7fa f84b 	bl	80017ac <__aeabi_dmul>
 8007716:	2200      	movs	r2, #0
 8007718:	2300      	movs	r3, #0
 800771a:	0006      	movs	r6, r0
 800771c:	000f      	movs	r7, r1
 800771e:	f7f8 fe95 	bl	800044c <__aeabi_dcmpeq>
 8007722:	2800      	cmp	r0, #0
 8007724:	d100      	bne.n	8007728 <_dtoa_r+0x774>
 8007726:	e6a1      	b.n	800746c <_dtoa_r+0x4b8>
 8007728:	e6d8      	b.n	80074dc <_dtoa_r+0x528>
 800772a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800772c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800772e:	9c06      	ldr	r4, [sp, #24]
 8007730:	2f00      	cmp	r7, #0
 8007732:	d014      	beq.n	800775e <_dtoa_r+0x7aa>
 8007734:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007736:	2a01      	cmp	r2, #1
 8007738:	dd00      	ble.n	800773c <_dtoa_r+0x788>
 800773a:	e0c8      	b.n	80078ce <_dtoa_r+0x91a>
 800773c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800773e:	2a00      	cmp	r2, #0
 8007740:	d100      	bne.n	8007744 <_dtoa_r+0x790>
 8007742:	e0be      	b.n	80078c2 <_dtoa_r+0x90e>
 8007744:	4aba      	ldr	r2, [pc, #744]	@ (8007a30 <_dtoa_r+0xa7c>)
 8007746:	189b      	adds	r3, r3, r2
 8007748:	9a06      	ldr	r2, [sp, #24]
 800774a:	2101      	movs	r1, #1
 800774c:	18d2      	adds	r2, r2, r3
 800774e:	9206      	str	r2, [sp, #24]
 8007750:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007752:	9803      	ldr	r0, [sp, #12]
 8007754:	18d3      	adds	r3, r2, r3
 8007756:	930d      	str	r3, [sp, #52]	@ 0x34
 8007758:	f000 fc6e 	bl	8008038 <__i2b>
 800775c:	0007      	movs	r7, r0
 800775e:	2c00      	cmp	r4, #0
 8007760:	d00e      	beq.n	8007780 <_dtoa_r+0x7cc>
 8007762:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007764:	2b00      	cmp	r3, #0
 8007766:	dd0b      	ble.n	8007780 <_dtoa_r+0x7cc>
 8007768:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800776a:	0023      	movs	r3, r4
 800776c:	4294      	cmp	r4, r2
 800776e:	dd00      	ble.n	8007772 <_dtoa_r+0x7be>
 8007770:	0013      	movs	r3, r2
 8007772:	9a06      	ldr	r2, [sp, #24]
 8007774:	1ae4      	subs	r4, r4, r3
 8007776:	1ad2      	subs	r2, r2, r3
 8007778:	9206      	str	r2, [sp, #24]
 800777a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007780:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007782:	2b00      	cmp	r3, #0
 8007784:	d01f      	beq.n	80077c6 <_dtoa_r+0x812>
 8007786:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007788:	2b00      	cmp	r3, #0
 800778a:	d100      	bne.n	800778e <_dtoa_r+0x7da>
 800778c:	e0b5      	b.n	80078fa <_dtoa_r+0x946>
 800778e:	2d00      	cmp	r5, #0
 8007790:	d010      	beq.n	80077b4 <_dtoa_r+0x800>
 8007792:	0039      	movs	r1, r7
 8007794:	002a      	movs	r2, r5
 8007796:	9803      	ldr	r0, [sp, #12]
 8007798:	f000 fd18 	bl	80081cc <__pow5mult>
 800779c:	9a05      	ldr	r2, [sp, #20]
 800779e:	0001      	movs	r1, r0
 80077a0:	0007      	movs	r7, r0
 80077a2:	9803      	ldr	r0, [sp, #12]
 80077a4:	f000 fc60 	bl	8008068 <__multiply>
 80077a8:	0006      	movs	r6, r0
 80077aa:	9905      	ldr	r1, [sp, #20]
 80077ac:	9803      	ldr	r0, [sp, #12]
 80077ae:	f000 fb3f 	bl	8007e30 <_Bfree>
 80077b2:	9605      	str	r6, [sp, #20]
 80077b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077b6:	1b5a      	subs	r2, r3, r5
 80077b8:	42ab      	cmp	r3, r5
 80077ba:	d004      	beq.n	80077c6 <_dtoa_r+0x812>
 80077bc:	9905      	ldr	r1, [sp, #20]
 80077be:	9803      	ldr	r0, [sp, #12]
 80077c0:	f000 fd04 	bl	80081cc <__pow5mult>
 80077c4:	9005      	str	r0, [sp, #20]
 80077c6:	2101      	movs	r1, #1
 80077c8:	9803      	ldr	r0, [sp, #12]
 80077ca:	f000 fc35 	bl	8008038 <__i2b>
 80077ce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80077d0:	0006      	movs	r6, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d100      	bne.n	80077d8 <_dtoa_r+0x824>
 80077d6:	e1bc      	b.n	8007b52 <_dtoa_r+0xb9e>
 80077d8:	001a      	movs	r2, r3
 80077da:	0001      	movs	r1, r0
 80077dc:	9803      	ldr	r0, [sp, #12]
 80077de:	f000 fcf5 	bl	80081cc <__pow5mult>
 80077e2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80077e4:	0006      	movs	r6, r0
 80077e6:	2500      	movs	r5, #0
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	dc16      	bgt.n	800781a <_dtoa_r+0x866>
 80077ec:	2500      	movs	r5, #0
 80077ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077f0:	42ab      	cmp	r3, r5
 80077f2:	d10e      	bne.n	8007812 <_dtoa_r+0x85e>
 80077f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077f6:	031b      	lsls	r3, r3, #12
 80077f8:	42ab      	cmp	r3, r5
 80077fa:	d10a      	bne.n	8007812 <_dtoa_r+0x85e>
 80077fc:	4b8d      	ldr	r3, [pc, #564]	@ (8007a34 <_dtoa_r+0xa80>)
 80077fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007800:	4213      	tst	r3, r2
 8007802:	d006      	beq.n	8007812 <_dtoa_r+0x85e>
 8007804:	9b06      	ldr	r3, [sp, #24]
 8007806:	3501      	adds	r5, #1
 8007808:	3301      	adds	r3, #1
 800780a:	9306      	str	r3, [sp, #24]
 800780c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800780e:	3301      	adds	r3, #1
 8007810:	930d      	str	r3, [sp, #52]	@ 0x34
 8007812:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007814:	2001      	movs	r0, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	d008      	beq.n	800782c <_dtoa_r+0x878>
 800781a:	6933      	ldr	r3, [r6, #16]
 800781c:	3303      	adds	r3, #3
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	18f3      	adds	r3, r6, r3
 8007822:	6858      	ldr	r0, [r3, #4]
 8007824:	f000 fbb8 	bl	8007f98 <__hi0bits>
 8007828:	2320      	movs	r3, #32
 800782a:	1a18      	subs	r0, r3, r0
 800782c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800782e:	1818      	adds	r0, r3, r0
 8007830:	0002      	movs	r2, r0
 8007832:	231f      	movs	r3, #31
 8007834:	401a      	ands	r2, r3
 8007836:	4218      	tst	r0, r3
 8007838:	d065      	beq.n	8007906 <_dtoa_r+0x952>
 800783a:	3301      	adds	r3, #1
 800783c:	1a9b      	subs	r3, r3, r2
 800783e:	2b04      	cmp	r3, #4
 8007840:	dd5d      	ble.n	80078fe <_dtoa_r+0x94a>
 8007842:	231c      	movs	r3, #28
 8007844:	1a9b      	subs	r3, r3, r2
 8007846:	9a06      	ldr	r2, [sp, #24]
 8007848:	18e4      	adds	r4, r4, r3
 800784a:	18d2      	adds	r2, r2, r3
 800784c:	9206      	str	r2, [sp, #24]
 800784e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007850:	18d3      	adds	r3, r2, r3
 8007852:	930d      	str	r3, [sp, #52]	@ 0x34
 8007854:	9b06      	ldr	r3, [sp, #24]
 8007856:	2b00      	cmp	r3, #0
 8007858:	dd05      	ble.n	8007866 <_dtoa_r+0x8b2>
 800785a:	001a      	movs	r2, r3
 800785c:	9905      	ldr	r1, [sp, #20]
 800785e:	9803      	ldr	r0, [sp, #12]
 8007860:	f000 fd10 	bl	8008284 <__lshift>
 8007864:	9005      	str	r0, [sp, #20]
 8007866:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007868:	2b00      	cmp	r3, #0
 800786a:	dd05      	ble.n	8007878 <_dtoa_r+0x8c4>
 800786c:	0031      	movs	r1, r6
 800786e:	001a      	movs	r2, r3
 8007870:	9803      	ldr	r0, [sp, #12]
 8007872:	f000 fd07 	bl	8008284 <__lshift>
 8007876:	0006      	movs	r6, r0
 8007878:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800787a:	2b00      	cmp	r3, #0
 800787c:	d045      	beq.n	800790a <_dtoa_r+0x956>
 800787e:	0031      	movs	r1, r6
 8007880:	9805      	ldr	r0, [sp, #20]
 8007882:	f000 fd6b 	bl	800835c <__mcmp>
 8007886:	2800      	cmp	r0, #0
 8007888:	da3f      	bge.n	800790a <_dtoa_r+0x956>
 800788a:	9b04      	ldr	r3, [sp, #16]
 800788c:	220a      	movs	r2, #10
 800788e:	3b01      	subs	r3, #1
 8007890:	930c      	str	r3, [sp, #48]	@ 0x30
 8007892:	9905      	ldr	r1, [sp, #20]
 8007894:	2300      	movs	r3, #0
 8007896:	9803      	ldr	r0, [sp, #12]
 8007898:	f000 faee 	bl	8007e78 <__multadd>
 800789c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800789e:	9005      	str	r0, [sp, #20]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d100      	bne.n	80078a6 <_dtoa_r+0x8f2>
 80078a4:	e15c      	b.n	8007b60 <_dtoa_r+0xbac>
 80078a6:	2300      	movs	r3, #0
 80078a8:	0039      	movs	r1, r7
 80078aa:	220a      	movs	r2, #10
 80078ac:	9803      	ldr	r0, [sp, #12]
 80078ae:	f000 fae3 	bl	8007e78 <__multadd>
 80078b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078b4:	0007      	movs	r7, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	dc55      	bgt.n	8007966 <_dtoa_r+0x9b2>
 80078ba:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80078bc:	2b02      	cmp	r3, #2
 80078be:	dc2d      	bgt.n	800791c <_dtoa_r+0x968>
 80078c0:	e051      	b.n	8007966 <_dtoa_r+0x9b2>
 80078c2:	2336      	movs	r3, #54	@ 0x36
 80078c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80078c6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80078c8:	9c06      	ldr	r4, [sp, #24]
 80078ca:	1a9b      	subs	r3, r3, r2
 80078cc:	e73c      	b.n	8007748 <_dtoa_r+0x794>
 80078ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078d0:	1e5d      	subs	r5, r3, #1
 80078d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078d4:	42ab      	cmp	r3, r5
 80078d6:	db08      	blt.n	80078ea <_dtoa_r+0x936>
 80078d8:	1b5d      	subs	r5, r3, r5
 80078da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078dc:	9c06      	ldr	r4, [sp, #24]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	db00      	blt.n	80078e4 <_dtoa_r+0x930>
 80078e2:	e731      	b.n	8007748 <_dtoa_r+0x794>
 80078e4:	1ae4      	subs	r4, r4, r3
 80078e6:	2300      	movs	r3, #0
 80078e8:	e72e      	b.n	8007748 <_dtoa_r+0x794>
 80078ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078ec:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80078ee:	1aeb      	subs	r3, r5, r3
 80078f0:	18d3      	adds	r3, r2, r3
 80078f2:	950f      	str	r5, [sp, #60]	@ 0x3c
 80078f4:	9314      	str	r3, [sp, #80]	@ 0x50
 80078f6:	2500      	movs	r5, #0
 80078f8:	e7ef      	b.n	80078da <_dtoa_r+0x926>
 80078fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80078fc:	e75e      	b.n	80077bc <_dtoa_r+0x808>
 80078fe:	2b04      	cmp	r3, #4
 8007900:	d0a8      	beq.n	8007854 <_dtoa_r+0x8a0>
 8007902:	331c      	adds	r3, #28
 8007904:	e79f      	b.n	8007846 <_dtoa_r+0x892>
 8007906:	0013      	movs	r3, r2
 8007908:	e7fb      	b.n	8007902 <_dtoa_r+0x94e>
 800790a:	9b04      	ldr	r3, [sp, #16]
 800790c:	930c      	str	r3, [sp, #48]	@ 0x30
 800790e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007910:	930e      	str	r3, [sp, #56]	@ 0x38
 8007912:	2b00      	cmp	r3, #0
 8007914:	dc23      	bgt.n	800795e <_dtoa_r+0x9aa>
 8007916:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007918:	2b02      	cmp	r3, #2
 800791a:	dd20      	ble.n	800795e <_dtoa_r+0x9aa>
 800791c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800791e:	2b00      	cmp	r3, #0
 8007920:	d000      	beq.n	8007924 <_dtoa_r+0x970>
 8007922:	e6b5      	b.n	8007690 <_dtoa_r+0x6dc>
 8007924:	0031      	movs	r1, r6
 8007926:	2205      	movs	r2, #5
 8007928:	9803      	ldr	r0, [sp, #12]
 800792a:	f000 faa5 	bl	8007e78 <__multadd>
 800792e:	0006      	movs	r6, r0
 8007930:	0001      	movs	r1, r0
 8007932:	9805      	ldr	r0, [sp, #20]
 8007934:	f000 fd12 	bl	800835c <__mcmp>
 8007938:	2800      	cmp	r0, #0
 800793a:	dc00      	bgt.n	800793e <_dtoa_r+0x98a>
 800793c:	e6a8      	b.n	8007690 <_dtoa_r+0x6dc>
 800793e:	9b08      	ldr	r3, [sp, #32]
 8007940:	9a08      	ldr	r2, [sp, #32]
 8007942:	1c5c      	adds	r4, r3, #1
 8007944:	2331      	movs	r3, #49	@ 0x31
 8007946:	7013      	strb	r3, [r2, #0]
 8007948:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800794a:	3301      	adds	r3, #1
 800794c:	930c      	str	r3, [sp, #48]	@ 0x30
 800794e:	e6a3      	b.n	8007698 <_dtoa_r+0x6e4>
 8007950:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8007952:	0037      	movs	r7, r6
 8007954:	e7f3      	b.n	800793e <_dtoa_r+0x98a>
 8007956:	9b04      	ldr	r3, [sp, #16]
 8007958:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800795a:	930c      	str	r3, [sp, #48]	@ 0x30
 800795c:	e7f9      	b.n	8007952 <_dtoa_r+0x99e>
 800795e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007960:	2b00      	cmp	r3, #0
 8007962:	d100      	bne.n	8007966 <_dtoa_r+0x9b2>
 8007964:	e100      	b.n	8007b68 <_dtoa_r+0xbb4>
 8007966:	2c00      	cmp	r4, #0
 8007968:	dd05      	ble.n	8007976 <_dtoa_r+0x9c2>
 800796a:	0039      	movs	r1, r7
 800796c:	0022      	movs	r2, r4
 800796e:	9803      	ldr	r0, [sp, #12]
 8007970:	f000 fc88 	bl	8008284 <__lshift>
 8007974:	0007      	movs	r7, r0
 8007976:	0038      	movs	r0, r7
 8007978:	2d00      	cmp	r5, #0
 800797a:	d018      	beq.n	80079ae <_dtoa_r+0x9fa>
 800797c:	6879      	ldr	r1, [r7, #4]
 800797e:	9803      	ldr	r0, [sp, #12]
 8007980:	f000 fa12 	bl	8007da8 <_Balloc>
 8007984:	1e04      	subs	r4, r0, #0
 8007986:	d105      	bne.n	8007994 <_dtoa_r+0x9e0>
 8007988:	0022      	movs	r2, r4
 800798a:	4b2b      	ldr	r3, [pc, #172]	@ (8007a38 <_dtoa_r+0xa84>)
 800798c:	482b      	ldr	r0, [pc, #172]	@ (8007a3c <_dtoa_r+0xa88>)
 800798e:	492c      	ldr	r1, [pc, #176]	@ (8007a40 <_dtoa_r+0xa8c>)
 8007990:	f7ff fb25 	bl	8006fde <_dtoa_r+0x2a>
 8007994:	0039      	movs	r1, r7
 8007996:	693a      	ldr	r2, [r7, #16]
 8007998:	310c      	adds	r1, #12
 800799a:	3202      	adds	r2, #2
 800799c:	0092      	lsls	r2, r2, #2
 800799e:	300c      	adds	r0, #12
 80079a0:	f002 f986 	bl	8009cb0 <memcpy>
 80079a4:	2201      	movs	r2, #1
 80079a6:	0021      	movs	r1, r4
 80079a8:	9803      	ldr	r0, [sp, #12]
 80079aa:	f000 fc6b 	bl	8008284 <__lshift>
 80079ae:	9b08      	ldr	r3, [sp, #32]
 80079b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079b2:	9306      	str	r3, [sp, #24]
 80079b4:	3b01      	subs	r3, #1
 80079b6:	189b      	adds	r3, r3, r2
 80079b8:	2201      	movs	r2, #1
 80079ba:	9704      	str	r7, [sp, #16]
 80079bc:	0007      	movs	r7, r0
 80079be:	930f      	str	r3, [sp, #60]	@ 0x3c
 80079c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079c2:	4013      	ands	r3, r2
 80079c4:	930e      	str	r3, [sp, #56]	@ 0x38
 80079c6:	0031      	movs	r1, r6
 80079c8:	9805      	ldr	r0, [sp, #20]
 80079ca:	f7ff fa65 	bl	8006e98 <quorem>
 80079ce:	9904      	ldr	r1, [sp, #16]
 80079d0:	0005      	movs	r5, r0
 80079d2:	900a      	str	r0, [sp, #40]	@ 0x28
 80079d4:	9805      	ldr	r0, [sp, #20]
 80079d6:	f000 fcc1 	bl	800835c <__mcmp>
 80079da:	003a      	movs	r2, r7
 80079dc:	900d      	str	r0, [sp, #52]	@ 0x34
 80079de:	0031      	movs	r1, r6
 80079e0:	9803      	ldr	r0, [sp, #12]
 80079e2:	f000 fcd7 	bl	8008394 <__mdiff>
 80079e6:	2201      	movs	r2, #1
 80079e8:	68c3      	ldr	r3, [r0, #12]
 80079ea:	0004      	movs	r4, r0
 80079ec:	3530      	adds	r5, #48	@ 0x30
 80079ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d104      	bne.n	80079fe <_dtoa_r+0xa4a>
 80079f4:	0001      	movs	r1, r0
 80079f6:	9805      	ldr	r0, [sp, #20]
 80079f8:	f000 fcb0 	bl	800835c <__mcmp>
 80079fc:	9009      	str	r0, [sp, #36]	@ 0x24
 80079fe:	0021      	movs	r1, r4
 8007a00:	9803      	ldr	r0, [sp, #12]
 8007a02:	f000 fa15 	bl	8007e30 <_Bfree>
 8007a06:	9b06      	ldr	r3, [sp, #24]
 8007a08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a0a:	1c5c      	adds	r4, r3, #1
 8007a0c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a12:	4313      	orrs	r3, r2
 8007a14:	d116      	bne.n	8007a44 <_dtoa_r+0xa90>
 8007a16:	2d39      	cmp	r5, #57	@ 0x39
 8007a18:	d02f      	beq.n	8007a7a <_dtoa_r+0xac6>
 8007a1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	dd01      	ble.n	8007a24 <_dtoa_r+0xa70>
 8007a20:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8007a22:	3531      	adds	r5, #49	@ 0x31
 8007a24:	9b06      	ldr	r3, [sp, #24]
 8007a26:	701d      	strb	r5, [r3, #0]
 8007a28:	e638      	b.n	800769c <_dtoa_r+0x6e8>
 8007a2a:	46c0      	nop			@ (mov r8, r8)
 8007a2c:	40240000 	.word	0x40240000
 8007a30:	00000433 	.word	0x00000433
 8007a34:	7ff00000 	.word	0x7ff00000
 8007a38:	0800a7e9 	.word	0x0800a7e9
 8007a3c:	0800a791 	.word	0x0800a791
 8007a40:	000002ef 	.word	0x000002ef
 8007a44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	db04      	blt.n	8007a54 <_dtoa_r+0xaa0>
 8007a4a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a50:	4313      	orrs	r3, r2
 8007a52:	d11e      	bne.n	8007a92 <_dtoa_r+0xade>
 8007a54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	dde4      	ble.n	8007a24 <_dtoa_r+0xa70>
 8007a5a:	9905      	ldr	r1, [sp, #20]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	9803      	ldr	r0, [sp, #12]
 8007a60:	f000 fc10 	bl	8008284 <__lshift>
 8007a64:	0031      	movs	r1, r6
 8007a66:	9005      	str	r0, [sp, #20]
 8007a68:	f000 fc78 	bl	800835c <__mcmp>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	dc02      	bgt.n	8007a76 <_dtoa_r+0xac2>
 8007a70:	d1d8      	bne.n	8007a24 <_dtoa_r+0xa70>
 8007a72:	07eb      	lsls	r3, r5, #31
 8007a74:	d5d6      	bpl.n	8007a24 <_dtoa_r+0xa70>
 8007a76:	2d39      	cmp	r5, #57	@ 0x39
 8007a78:	d1d2      	bne.n	8007a20 <_dtoa_r+0xa6c>
 8007a7a:	2339      	movs	r3, #57	@ 0x39
 8007a7c:	9a06      	ldr	r2, [sp, #24]
 8007a7e:	7013      	strb	r3, [r2, #0]
 8007a80:	0023      	movs	r3, r4
 8007a82:	001c      	movs	r4, r3
 8007a84:	3b01      	subs	r3, #1
 8007a86:	781a      	ldrb	r2, [r3, #0]
 8007a88:	2a39      	cmp	r2, #57	@ 0x39
 8007a8a:	d04f      	beq.n	8007b2c <_dtoa_r+0xb78>
 8007a8c:	3201      	adds	r2, #1
 8007a8e:	701a      	strb	r2, [r3, #0]
 8007a90:	e604      	b.n	800769c <_dtoa_r+0x6e8>
 8007a92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	dd03      	ble.n	8007aa0 <_dtoa_r+0xaec>
 8007a98:	2d39      	cmp	r5, #57	@ 0x39
 8007a9a:	d0ee      	beq.n	8007a7a <_dtoa_r+0xac6>
 8007a9c:	3501      	adds	r5, #1
 8007a9e:	e7c1      	b.n	8007a24 <_dtoa_r+0xa70>
 8007aa0:	9b06      	ldr	r3, [sp, #24]
 8007aa2:	9a06      	ldr	r2, [sp, #24]
 8007aa4:	701d      	strb	r5, [r3, #0]
 8007aa6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d02a      	beq.n	8007b02 <_dtoa_r+0xb4e>
 8007aac:	2300      	movs	r3, #0
 8007aae:	220a      	movs	r2, #10
 8007ab0:	9905      	ldr	r1, [sp, #20]
 8007ab2:	9803      	ldr	r0, [sp, #12]
 8007ab4:	f000 f9e0 	bl	8007e78 <__multadd>
 8007ab8:	9b04      	ldr	r3, [sp, #16]
 8007aba:	9005      	str	r0, [sp, #20]
 8007abc:	42bb      	cmp	r3, r7
 8007abe:	d109      	bne.n	8007ad4 <_dtoa_r+0xb20>
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	220a      	movs	r2, #10
 8007ac4:	9904      	ldr	r1, [sp, #16]
 8007ac6:	9803      	ldr	r0, [sp, #12]
 8007ac8:	f000 f9d6 	bl	8007e78 <__multadd>
 8007acc:	9004      	str	r0, [sp, #16]
 8007ace:	0007      	movs	r7, r0
 8007ad0:	9406      	str	r4, [sp, #24]
 8007ad2:	e778      	b.n	80079c6 <_dtoa_r+0xa12>
 8007ad4:	9904      	ldr	r1, [sp, #16]
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	220a      	movs	r2, #10
 8007ada:	9803      	ldr	r0, [sp, #12]
 8007adc:	f000 f9cc 	bl	8007e78 <__multadd>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	9004      	str	r0, [sp, #16]
 8007ae4:	220a      	movs	r2, #10
 8007ae6:	0039      	movs	r1, r7
 8007ae8:	9803      	ldr	r0, [sp, #12]
 8007aea:	f000 f9c5 	bl	8007e78 <__multadd>
 8007aee:	e7ee      	b.n	8007ace <_dtoa_r+0xb1a>
 8007af0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007af2:	2401      	movs	r4, #1
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	dd00      	ble.n	8007afa <_dtoa_r+0xb46>
 8007af8:	001c      	movs	r4, r3
 8007afa:	9b08      	ldr	r3, [sp, #32]
 8007afc:	191c      	adds	r4, r3, r4
 8007afe:	2300      	movs	r3, #0
 8007b00:	9304      	str	r3, [sp, #16]
 8007b02:	9905      	ldr	r1, [sp, #20]
 8007b04:	2201      	movs	r2, #1
 8007b06:	9803      	ldr	r0, [sp, #12]
 8007b08:	f000 fbbc 	bl	8008284 <__lshift>
 8007b0c:	0031      	movs	r1, r6
 8007b0e:	9005      	str	r0, [sp, #20]
 8007b10:	f000 fc24 	bl	800835c <__mcmp>
 8007b14:	2800      	cmp	r0, #0
 8007b16:	dcb3      	bgt.n	8007a80 <_dtoa_r+0xacc>
 8007b18:	d101      	bne.n	8007b1e <_dtoa_r+0xb6a>
 8007b1a:	07ed      	lsls	r5, r5, #31
 8007b1c:	d4b0      	bmi.n	8007a80 <_dtoa_r+0xacc>
 8007b1e:	0023      	movs	r3, r4
 8007b20:	001c      	movs	r4, r3
 8007b22:	3b01      	subs	r3, #1
 8007b24:	781a      	ldrb	r2, [r3, #0]
 8007b26:	2a30      	cmp	r2, #48	@ 0x30
 8007b28:	d0fa      	beq.n	8007b20 <_dtoa_r+0xb6c>
 8007b2a:	e5b7      	b.n	800769c <_dtoa_r+0x6e8>
 8007b2c:	9a08      	ldr	r2, [sp, #32]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d1a7      	bne.n	8007a82 <_dtoa_r+0xace>
 8007b32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b34:	3301      	adds	r3, #1
 8007b36:	930c      	str	r3, [sp, #48]	@ 0x30
 8007b38:	2331      	movs	r3, #49	@ 0x31
 8007b3a:	7013      	strb	r3, [r2, #0]
 8007b3c:	e5ae      	b.n	800769c <_dtoa_r+0x6e8>
 8007b3e:	4b15      	ldr	r3, [pc, #84]	@ (8007b94 <_dtoa_r+0xbe0>)
 8007b40:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007b42:	9308      	str	r3, [sp, #32]
 8007b44:	4b14      	ldr	r3, [pc, #80]	@ (8007b98 <_dtoa_r+0xbe4>)
 8007b46:	2a00      	cmp	r2, #0
 8007b48:	d001      	beq.n	8007b4e <_dtoa_r+0xb9a>
 8007b4a:	f7ff fa7b 	bl	8007044 <_dtoa_r+0x90>
 8007b4e:	f7ff fa7b 	bl	8007048 <_dtoa_r+0x94>
 8007b52:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	dc00      	bgt.n	8007b5a <_dtoa_r+0xba6>
 8007b58:	e648      	b.n	80077ec <_dtoa_r+0x838>
 8007b5a:	2001      	movs	r0, #1
 8007b5c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8007b5e:	e665      	b.n	800782c <_dtoa_r+0x878>
 8007b60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	dc00      	bgt.n	8007b68 <_dtoa_r+0xbb4>
 8007b66:	e6d6      	b.n	8007916 <_dtoa_r+0x962>
 8007b68:	2400      	movs	r4, #0
 8007b6a:	0031      	movs	r1, r6
 8007b6c:	9805      	ldr	r0, [sp, #20]
 8007b6e:	f7ff f993 	bl	8006e98 <quorem>
 8007b72:	9b08      	ldr	r3, [sp, #32]
 8007b74:	3030      	adds	r0, #48	@ 0x30
 8007b76:	5518      	strb	r0, [r3, r4]
 8007b78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b7a:	3401      	adds	r4, #1
 8007b7c:	0005      	movs	r5, r0
 8007b7e:	429c      	cmp	r4, r3
 8007b80:	dab6      	bge.n	8007af0 <_dtoa_r+0xb3c>
 8007b82:	2300      	movs	r3, #0
 8007b84:	220a      	movs	r2, #10
 8007b86:	9905      	ldr	r1, [sp, #20]
 8007b88:	9803      	ldr	r0, [sp, #12]
 8007b8a:	f000 f975 	bl	8007e78 <__multadd>
 8007b8e:	9005      	str	r0, [sp, #20]
 8007b90:	e7eb      	b.n	8007b6a <_dtoa_r+0xbb6>
 8007b92:	46c0      	nop			@ (mov r8, r8)
 8007b94:	0800a76d 	.word	0x0800a76d
 8007b98:	0800a775 	.word	0x0800a775

08007b9c <_free_r>:
 8007b9c:	b570      	push	{r4, r5, r6, lr}
 8007b9e:	0005      	movs	r5, r0
 8007ba0:	1e0c      	subs	r4, r1, #0
 8007ba2:	d010      	beq.n	8007bc6 <_free_r+0x2a>
 8007ba4:	3c04      	subs	r4, #4
 8007ba6:	6823      	ldr	r3, [r4, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	da00      	bge.n	8007bae <_free_r+0x12>
 8007bac:	18e4      	adds	r4, r4, r3
 8007bae:	0028      	movs	r0, r5
 8007bb0:	f000 f8ea 	bl	8007d88 <__malloc_lock>
 8007bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8007c2c <_free_r+0x90>)
 8007bb6:	6813      	ldr	r3, [r2, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d105      	bne.n	8007bc8 <_free_r+0x2c>
 8007bbc:	6063      	str	r3, [r4, #4]
 8007bbe:	6014      	str	r4, [r2, #0]
 8007bc0:	0028      	movs	r0, r5
 8007bc2:	f000 f8e9 	bl	8007d98 <__malloc_unlock>
 8007bc6:	bd70      	pop	{r4, r5, r6, pc}
 8007bc8:	42a3      	cmp	r3, r4
 8007bca:	d908      	bls.n	8007bde <_free_r+0x42>
 8007bcc:	6820      	ldr	r0, [r4, #0]
 8007bce:	1821      	adds	r1, r4, r0
 8007bd0:	428b      	cmp	r3, r1
 8007bd2:	d1f3      	bne.n	8007bbc <_free_r+0x20>
 8007bd4:	6819      	ldr	r1, [r3, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	1809      	adds	r1, r1, r0
 8007bda:	6021      	str	r1, [r4, #0]
 8007bdc:	e7ee      	b.n	8007bbc <_free_r+0x20>
 8007bde:	001a      	movs	r2, r3
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d001      	beq.n	8007bea <_free_r+0x4e>
 8007be6:	42a3      	cmp	r3, r4
 8007be8:	d9f9      	bls.n	8007bde <_free_r+0x42>
 8007bea:	6811      	ldr	r1, [r2, #0]
 8007bec:	1850      	adds	r0, r2, r1
 8007bee:	42a0      	cmp	r0, r4
 8007bf0:	d10b      	bne.n	8007c0a <_free_r+0x6e>
 8007bf2:	6820      	ldr	r0, [r4, #0]
 8007bf4:	1809      	adds	r1, r1, r0
 8007bf6:	1850      	adds	r0, r2, r1
 8007bf8:	6011      	str	r1, [r2, #0]
 8007bfa:	4283      	cmp	r3, r0
 8007bfc:	d1e0      	bne.n	8007bc0 <_free_r+0x24>
 8007bfe:	6818      	ldr	r0, [r3, #0]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	1841      	adds	r1, r0, r1
 8007c04:	6011      	str	r1, [r2, #0]
 8007c06:	6053      	str	r3, [r2, #4]
 8007c08:	e7da      	b.n	8007bc0 <_free_r+0x24>
 8007c0a:	42a0      	cmp	r0, r4
 8007c0c:	d902      	bls.n	8007c14 <_free_r+0x78>
 8007c0e:	230c      	movs	r3, #12
 8007c10:	602b      	str	r3, [r5, #0]
 8007c12:	e7d5      	b.n	8007bc0 <_free_r+0x24>
 8007c14:	6820      	ldr	r0, [r4, #0]
 8007c16:	1821      	adds	r1, r4, r0
 8007c18:	428b      	cmp	r3, r1
 8007c1a:	d103      	bne.n	8007c24 <_free_r+0x88>
 8007c1c:	6819      	ldr	r1, [r3, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	1809      	adds	r1, r1, r0
 8007c22:	6021      	str	r1, [r4, #0]
 8007c24:	6063      	str	r3, [r4, #4]
 8007c26:	6054      	str	r4, [r2, #4]
 8007c28:	e7ca      	b.n	8007bc0 <_free_r+0x24>
 8007c2a:	46c0      	nop			@ (mov r8, r8)
 8007c2c:	20000494 	.word	0x20000494

08007c30 <malloc>:
 8007c30:	b510      	push	{r4, lr}
 8007c32:	4b03      	ldr	r3, [pc, #12]	@ (8007c40 <malloc+0x10>)
 8007c34:	0001      	movs	r1, r0
 8007c36:	6818      	ldr	r0, [r3, #0]
 8007c38:	f000 f826 	bl	8007c88 <_malloc_r>
 8007c3c:	bd10      	pop	{r4, pc}
 8007c3e:	46c0      	nop			@ (mov r8, r8)
 8007c40:	20000018 	.word	0x20000018

08007c44 <sbrk_aligned>:
 8007c44:	b570      	push	{r4, r5, r6, lr}
 8007c46:	4e0f      	ldr	r6, [pc, #60]	@ (8007c84 <sbrk_aligned+0x40>)
 8007c48:	000d      	movs	r5, r1
 8007c4a:	6831      	ldr	r1, [r6, #0]
 8007c4c:	0004      	movs	r4, r0
 8007c4e:	2900      	cmp	r1, #0
 8007c50:	d102      	bne.n	8007c58 <sbrk_aligned+0x14>
 8007c52:	f002 f81b 	bl	8009c8c <_sbrk_r>
 8007c56:	6030      	str	r0, [r6, #0]
 8007c58:	0029      	movs	r1, r5
 8007c5a:	0020      	movs	r0, r4
 8007c5c:	f002 f816 	bl	8009c8c <_sbrk_r>
 8007c60:	1c43      	adds	r3, r0, #1
 8007c62:	d103      	bne.n	8007c6c <sbrk_aligned+0x28>
 8007c64:	2501      	movs	r5, #1
 8007c66:	426d      	negs	r5, r5
 8007c68:	0028      	movs	r0, r5
 8007c6a:	bd70      	pop	{r4, r5, r6, pc}
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	1cc5      	adds	r5, r0, #3
 8007c70:	439d      	bics	r5, r3
 8007c72:	42a8      	cmp	r0, r5
 8007c74:	d0f8      	beq.n	8007c68 <sbrk_aligned+0x24>
 8007c76:	1a29      	subs	r1, r5, r0
 8007c78:	0020      	movs	r0, r4
 8007c7a:	f002 f807 	bl	8009c8c <_sbrk_r>
 8007c7e:	3001      	adds	r0, #1
 8007c80:	d1f2      	bne.n	8007c68 <sbrk_aligned+0x24>
 8007c82:	e7ef      	b.n	8007c64 <sbrk_aligned+0x20>
 8007c84:	20000490 	.word	0x20000490

08007c88 <_malloc_r>:
 8007c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c8a:	2203      	movs	r2, #3
 8007c8c:	1ccb      	adds	r3, r1, #3
 8007c8e:	4393      	bics	r3, r2
 8007c90:	3308      	adds	r3, #8
 8007c92:	0005      	movs	r5, r0
 8007c94:	001f      	movs	r7, r3
 8007c96:	2b0c      	cmp	r3, #12
 8007c98:	d234      	bcs.n	8007d04 <_malloc_r+0x7c>
 8007c9a:	270c      	movs	r7, #12
 8007c9c:	42b9      	cmp	r1, r7
 8007c9e:	d833      	bhi.n	8007d08 <_malloc_r+0x80>
 8007ca0:	0028      	movs	r0, r5
 8007ca2:	f000 f871 	bl	8007d88 <__malloc_lock>
 8007ca6:	4e37      	ldr	r6, [pc, #220]	@ (8007d84 <_malloc_r+0xfc>)
 8007ca8:	6833      	ldr	r3, [r6, #0]
 8007caa:	001c      	movs	r4, r3
 8007cac:	2c00      	cmp	r4, #0
 8007cae:	d12f      	bne.n	8007d10 <_malloc_r+0x88>
 8007cb0:	0039      	movs	r1, r7
 8007cb2:	0028      	movs	r0, r5
 8007cb4:	f7ff ffc6 	bl	8007c44 <sbrk_aligned>
 8007cb8:	0004      	movs	r4, r0
 8007cba:	1c43      	adds	r3, r0, #1
 8007cbc:	d15f      	bne.n	8007d7e <_malloc_r+0xf6>
 8007cbe:	6834      	ldr	r4, [r6, #0]
 8007cc0:	9400      	str	r4, [sp, #0]
 8007cc2:	9b00      	ldr	r3, [sp, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d14a      	bne.n	8007d5e <_malloc_r+0xd6>
 8007cc8:	2c00      	cmp	r4, #0
 8007cca:	d052      	beq.n	8007d72 <_malloc_r+0xea>
 8007ccc:	6823      	ldr	r3, [r4, #0]
 8007cce:	0028      	movs	r0, r5
 8007cd0:	18e3      	adds	r3, r4, r3
 8007cd2:	9900      	ldr	r1, [sp, #0]
 8007cd4:	9301      	str	r3, [sp, #4]
 8007cd6:	f001 ffd9 	bl	8009c8c <_sbrk_r>
 8007cda:	9b01      	ldr	r3, [sp, #4]
 8007cdc:	4283      	cmp	r3, r0
 8007cde:	d148      	bne.n	8007d72 <_malloc_r+0xea>
 8007ce0:	6823      	ldr	r3, [r4, #0]
 8007ce2:	0028      	movs	r0, r5
 8007ce4:	1aff      	subs	r7, r7, r3
 8007ce6:	0039      	movs	r1, r7
 8007ce8:	f7ff ffac 	bl	8007c44 <sbrk_aligned>
 8007cec:	3001      	adds	r0, #1
 8007cee:	d040      	beq.n	8007d72 <_malloc_r+0xea>
 8007cf0:	6823      	ldr	r3, [r4, #0]
 8007cf2:	19db      	adds	r3, r3, r7
 8007cf4:	6023      	str	r3, [r4, #0]
 8007cf6:	6833      	ldr	r3, [r6, #0]
 8007cf8:	685a      	ldr	r2, [r3, #4]
 8007cfa:	2a00      	cmp	r2, #0
 8007cfc:	d133      	bne.n	8007d66 <_malloc_r+0xde>
 8007cfe:	9b00      	ldr	r3, [sp, #0]
 8007d00:	6033      	str	r3, [r6, #0]
 8007d02:	e019      	b.n	8007d38 <_malloc_r+0xb0>
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	dac9      	bge.n	8007c9c <_malloc_r+0x14>
 8007d08:	230c      	movs	r3, #12
 8007d0a:	602b      	str	r3, [r5, #0]
 8007d0c:	2000      	movs	r0, #0
 8007d0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d10:	6821      	ldr	r1, [r4, #0]
 8007d12:	1bc9      	subs	r1, r1, r7
 8007d14:	d420      	bmi.n	8007d58 <_malloc_r+0xd0>
 8007d16:	290b      	cmp	r1, #11
 8007d18:	d90a      	bls.n	8007d30 <_malloc_r+0xa8>
 8007d1a:	19e2      	adds	r2, r4, r7
 8007d1c:	6027      	str	r7, [r4, #0]
 8007d1e:	42a3      	cmp	r3, r4
 8007d20:	d104      	bne.n	8007d2c <_malloc_r+0xa4>
 8007d22:	6032      	str	r2, [r6, #0]
 8007d24:	6863      	ldr	r3, [r4, #4]
 8007d26:	6011      	str	r1, [r2, #0]
 8007d28:	6053      	str	r3, [r2, #4]
 8007d2a:	e005      	b.n	8007d38 <_malloc_r+0xb0>
 8007d2c:	605a      	str	r2, [r3, #4]
 8007d2e:	e7f9      	b.n	8007d24 <_malloc_r+0x9c>
 8007d30:	6862      	ldr	r2, [r4, #4]
 8007d32:	42a3      	cmp	r3, r4
 8007d34:	d10e      	bne.n	8007d54 <_malloc_r+0xcc>
 8007d36:	6032      	str	r2, [r6, #0]
 8007d38:	0028      	movs	r0, r5
 8007d3a:	f000 f82d 	bl	8007d98 <__malloc_unlock>
 8007d3e:	0020      	movs	r0, r4
 8007d40:	2207      	movs	r2, #7
 8007d42:	300b      	adds	r0, #11
 8007d44:	1d23      	adds	r3, r4, #4
 8007d46:	4390      	bics	r0, r2
 8007d48:	1ac2      	subs	r2, r0, r3
 8007d4a:	4298      	cmp	r0, r3
 8007d4c:	d0df      	beq.n	8007d0e <_malloc_r+0x86>
 8007d4e:	1a1b      	subs	r3, r3, r0
 8007d50:	50a3      	str	r3, [r4, r2]
 8007d52:	e7dc      	b.n	8007d0e <_malloc_r+0x86>
 8007d54:	605a      	str	r2, [r3, #4]
 8007d56:	e7ef      	b.n	8007d38 <_malloc_r+0xb0>
 8007d58:	0023      	movs	r3, r4
 8007d5a:	6864      	ldr	r4, [r4, #4]
 8007d5c:	e7a6      	b.n	8007cac <_malloc_r+0x24>
 8007d5e:	9c00      	ldr	r4, [sp, #0]
 8007d60:	6863      	ldr	r3, [r4, #4]
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	e7ad      	b.n	8007cc2 <_malloc_r+0x3a>
 8007d66:	001a      	movs	r2, r3
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	42a3      	cmp	r3, r4
 8007d6c:	d1fb      	bne.n	8007d66 <_malloc_r+0xde>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	e7da      	b.n	8007d28 <_malloc_r+0xa0>
 8007d72:	230c      	movs	r3, #12
 8007d74:	0028      	movs	r0, r5
 8007d76:	602b      	str	r3, [r5, #0]
 8007d78:	f000 f80e 	bl	8007d98 <__malloc_unlock>
 8007d7c:	e7c6      	b.n	8007d0c <_malloc_r+0x84>
 8007d7e:	6007      	str	r7, [r0, #0]
 8007d80:	e7da      	b.n	8007d38 <_malloc_r+0xb0>
 8007d82:	46c0      	nop			@ (mov r8, r8)
 8007d84:	20000494 	.word	0x20000494

08007d88 <__malloc_lock>:
 8007d88:	b510      	push	{r4, lr}
 8007d8a:	4802      	ldr	r0, [pc, #8]	@ (8007d94 <__malloc_lock+0xc>)
 8007d8c:	f7ff f873 	bl	8006e76 <__retarget_lock_acquire_recursive>
 8007d90:	bd10      	pop	{r4, pc}
 8007d92:	46c0      	nop			@ (mov r8, r8)
 8007d94:	2000048c 	.word	0x2000048c

08007d98 <__malloc_unlock>:
 8007d98:	b510      	push	{r4, lr}
 8007d9a:	4802      	ldr	r0, [pc, #8]	@ (8007da4 <__malloc_unlock+0xc>)
 8007d9c:	f7ff f86c 	bl	8006e78 <__retarget_lock_release_recursive>
 8007da0:	bd10      	pop	{r4, pc}
 8007da2:	46c0      	nop			@ (mov r8, r8)
 8007da4:	2000048c 	.word	0x2000048c

08007da8 <_Balloc>:
 8007da8:	b570      	push	{r4, r5, r6, lr}
 8007daa:	69c5      	ldr	r5, [r0, #28]
 8007dac:	0006      	movs	r6, r0
 8007dae:	000c      	movs	r4, r1
 8007db0:	2d00      	cmp	r5, #0
 8007db2:	d10e      	bne.n	8007dd2 <_Balloc+0x2a>
 8007db4:	2010      	movs	r0, #16
 8007db6:	f7ff ff3b 	bl	8007c30 <malloc>
 8007dba:	1e02      	subs	r2, r0, #0
 8007dbc:	61f0      	str	r0, [r6, #28]
 8007dbe:	d104      	bne.n	8007dca <_Balloc+0x22>
 8007dc0:	216b      	movs	r1, #107	@ 0x6b
 8007dc2:	4b19      	ldr	r3, [pc, #100]	@ (8007e28 <_Balloc+0x80>)
 8007dc4:	4819      	ldr	r0, [pc, #100]	@ (8007e2c <_Balloc+0x84>)
 8007dc6:	f001 ff83 	bl	8009cd0 <__assert_func>
 8007dca:	6045      	str	r5, [r0, #4]
 8007dcc:	6085      	str	r5, [r0, #8]
 8007dce:	6005      	str	r5, [r0, #0]
 8007dd0:	60c5      	str	r5, [r0, #12]
 8007dd2:	69f5      	ldr	r5, [r6, #28]
 8007dd4:	68eb      	ldr	r3, [r5, #12]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d013      	beq.n	8007e02 <_Balloc+0x5a>
 8007dda:	69f3      	ldr	r3, [r6, #28]
 8007ddc:	00a2      	lsls	r2, r4, #2
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	189b      	adds	r3, r3, r2
 8007de2:	6818      	ldr	r0, [r3, #0]
 8007de4:	2800      	cmp	r0, #0
 8007de6:	d118      	bne.n	8007e1a <_Balloc+0x72>
 8007de8:	2101      	movs	r1, #1
 8007dea:	000d      	movs	r5, r1
 8007dec:	40a5      	lsls	r5, r4
 8007dee:	1d6a      	adds	r2, r5, #5
 8007df0:	0030      	movs	r0, r6
 8007df2:	0092      	lsls	r2, r2, #2
 8007df4:	f001 ff8a 	bl	8009d0c <_calloc_r>
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	d00c      	beq.n	8007e16 <_Balloc+0x6e>
 8007dfc:	6044      	str	r4, [r0, #4]
 8007dfe:	6085      	str	r5, [r0, #8]
 8007e00:	e00d      	b.n	8007e1e <_Balloc+0x76>
 8007e02:	2221      	movs	r2, #33	@ 0x21
 8007e04:	2104      	movs	r1, #4
 8007e06:	0030      	movs	r0, r6
 8007e08:	f001 ff80 	bl	8009d0c <_calloc_r>
 8007e0c:	69f3      	ldr	r3, [r6, #28]
 8007e0e:	60e8      	str	r0, [r5, #12]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1e1      	bne.n	8007dda <_Balloc+0x32>
 8007e16:	2000      	movs	r0, #0
 8007e18:	bd70      	pop	{r4, r5, r6, pc}
 8007e1a:	6802      	ldr	r2, [r0, #0]
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	2300      	movs	r3, #0
 8007e20:	6103      	str	r3, [r0, #16]
 8007e22:	60c3      	str	r3, [r0, #12]
 8007e24:	e7f8      	b.n	8007e18 <_Balloc+0x70>
 8007e26:	46c0      	nop			@ (mov r8, r8)
 8007e28:	0800a77a 	.word	0x0800a77a
 8007e2c:	0800a7fa 	.word	0x0800a7fa

08007e30 <_Bfree>:
 8007e30:	b570      	push	{r4, r5, r6, lr}
 8007e32:	69c6      	ldr	r6, [r0, #28]
 8007e34:	0005      	movs	r5, r0
 8007e36:	000c      	movs	r4, r1
 8007e38:	2e00      	cmp	r6, #0
 8007e3a:	d10e      	bne.n	8007e5a <_Bfree+0x2a>
 8007e3c:	2010      	movs	r0, #16
 8007e3e:	f7ff fef7 	bl	8007c30 <malloc>
 8007e42:	1e02      	subs	r2, r0, #0
 8007e44:	61e8      	str	r0, [r5, #28]
 8007e46:	d104      	bne.n	8007e52 <_Bfree+0x22>
 8007e48:	218f      	movs	r1, #143	@ 0x8f
 8007e4a:	4b09      	ldr	r3, [pc, #36]	@ (8007e70 <_Bfree+0x40>)
 8007e4c:	4809      	ldr	r0, [pc, #36]	@ (8007e74 <_Bfree+0x44>)
 8007e4e:	f001 ff3f 	bl	8009cd0 <__assert_func>
 8007e52:	6046      	str	r6, [r0, #4]
 8007e54:	6086      	str	r6, [r0, #8]
 8007e56:	6006      	str	r6, [r0, #0]
 8007e58:	60c6      	str	r6, [r0, #12]
 8007e5a:	2c00      	cmp	r4, #0
 8007e5c:	d007      	beq.n	8007e6e <_Bfree+0x3e>
 8007e5e:	69eb      	ldr	r3, [r5, #28]
 8007e60:	6862      	ldr	r2, [r4, #4]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	0092      	lsls	r2, r2, #2
 8007e66:	189b      	adds	r3, r3, r2
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	6022      	str	r2, [r4, #0]
 8007e6c:	601c      	str	r4, [r3, #0]
 8007e6e:	bd70      	pop	{r4, r5, r6, pc}
 8007e70:	0800a77a 	.word	0x0800a77a
 8007e74:	0800a7fa 	.word	0x0800a7fa

08007e78 <__multadd>:
 8007e78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e7a:	000f      	movs	r7, r1
 8007e7c:	9001      	str	r0, [sp, #4]
 8007e7e:	000c      	movs	r4, r1
 8007e80:	001e      	movs	r6, r3
 8007e82:	2000      	movs	r0, #0
 8007e84:	690d      	ldr	r5, [r1, #16]
 8007e86:	3714      	adds	r7, #20
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	3001      	adds	r0, #1
 8007e8c:	b299      	uxth	r1, r3
 8007e8e:	4351      	muls	r1, r2
 8007e90:	0c1b      	lsrs	r3, r3, #16
 8007e92:	4353      	muls	r3, r2
 8007e94:	1989      	adds	r1, r1, r6
 8007e96:	0c0e      	lsrs	r6, r1, #16
 8007e98:	199b      	adds	r3, r3, r6
 8007e9a:	0c1e      	lsrs	r6, r3, #16
 8007e9c:	b289      	uxth	r1, r1
 8007e9e:	041b      	lsls	r3, r3, #16
 8007ea0:	185b      	adds	r3, r3, r1
 8007ea2:	c708      	stmia	r7!, {r3}
 8007ea4:	4285      	cmp	r5, r0
 8007ea6:	dcef      	bgt.n	8007e88 <__multadd+0x10>
 8007ea8:	2e00      	cmp	r6, #0
 8007eaa:	d022      	beq.n	8007ef2 <__multadd+0x7a>
 8007eac:	68a3      	ldr	r3, [r4, #8]
 8007eae:	42ab      	cmp	r3, r5
 8007eb0:	dc19      	bgt.n	8007ee6 <__multadd+0x6e>
 8007eb2:	6861      	ldr	r1, [r4, #4]
 8007eb4:	9801      	ldr	r0, [sp, #4]
 8007eb6:	3101      	adds	r1, #1
 8007eb8:	f7ff ff76 	bl	8007da8 <_Balloc>
 8007ebc:	1e07      	subs	r7, r0, #0
 8007ebe:	d105      	bne.n	8007ecc <__multadd+0x54>
 8007ec0:	003a      	movs	r2, r7
 8007ec2:	21ba      	movs	r1, #186	@ 0xba
 8007ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ef8 <__multadd+0x80>)
 8007ec6:	480d      	ldr	r0, [pc, #52]	@ (8007efc <__multadd+0x84>)
 8007ec8:	f001 ff02 	bl	8009cd0 <__assert_func>
 8007ecc:	0021      	movs	r1, r4
 8007ece:	6922      	ldr	r2, [r4, #16]
 8007ed0:	310c      	adds	r1, #12
 8007ed2:	3202      	adds	r2, #2
 8007ed4:	0092      	lsls	r2, r2, #2
 8007ed6:	300c      	adds	r0, #12
 8007ed8:	f001 feea 	bl	8009cb0 <memcpy>
 8007edc:	0021      	movs	r1, r4
 8007ede:	9801      	ldr	r0, [sp, #4]
 8007ee0:	f7ff ffa6 	bl	8007e30 <_Bfree>
 8007ee4:	003c      	movs	r4, r7
 8007ee6:	1d2b      	adds	r3, r5, #4
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	18e3      	adds	r3, r4, r3
 8007eec:	3501      	adds	r5, #1
 8007eee:	605e      	str	r6, [r3, #4]
 8007ef0:	6125      	str	r5, [r4, #16]
 8007ef2:	0020      	movs	r0, r4
 8007ef4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007ef6:	46c0      	nop			@ (mov r8, r8)
 8007ef8:	0800a7e9 	.word	0x0800a7e9
 8007efc:	0800a7fa 	.word	0x0800a7fa

08007f00 <__s2b>:
 8007f00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f02:	0007      	movs	r7, r0
 8007f04:	0018      	movs	r0, r3
 8007f06:	000c      	movs	r4, r1
 8007f08:	3008      	adds	r0, #8
 8007f0a:	2109      	movs	r1, #9
 8007f0c:	9301      	str	r3, [sp, #4]
 8007f0e:	0015      	movs	r5, r2
 8007f10:	f7f8 f9a0 	bl	8000254 <__divsi3>
 8007f14:	2301      	movs	r3, #1
 8007f16:	2100      	movs	r1, #0
 8007f18:	4283      	cmp	r3, r0
 8007f1a:	db0a      	blt.n	8007f32 <__s2b+0x32>
 8007f1c:	0038      	movs	r0, r7
 8007f1e:	f7ff ff43 	bl	8007da8 <_Balloc>
 8007f22:	1e01      	subs	r1, r0, #0
 8007f24:	d108      	bne.n	8007f38 <__s2b+0x38>
 8007f26:	000a      	movs	r2, r1
 8007f28:	4b19      	ldr	r3, [pc, #100]	@ (8007f90 <__s2b+0x90>)
 8007f2a:	481a      	ldr	r0, [pc, #104]	@ (8007f94 <__s2b+0x94>)
 8007f2c:	31d3      	adds	r1, #211	@ 0xd3
 8007f2e:	f001 fecf 	bl	8009cd0 <__assert_func>
 8007f32:	005b      	lsls	r3, r3, #1
 8007f34:	3101      	adds	r1, #1
 8007f36:	e7ef      	b.n	8007f18 <__s2b+0x18>
 8007f38:	9b08      	ldr	r3, [sp, #32]
 8007f3a:	6143      	str	r3, [r0, #20]
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	6103      	str	r3, [r0, #16]
 8007f40:	2d09      	cmp	r5, #9
 8007f42:	dd18      	ble.n	8007f76 <__s2b+0x76>
 8007f44:	0023      	movs	r3, r4
 8007f46:	3309      	adds	r3, #9
 8007f48:	001e      	movs	r6, r3
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	1964      	adds	r4, r4, r5
 8007f4e:	7833      	ldrb	r3, [r6, #0]
 8007f50:	220a      	movs	r2, #10
 8007f52:	0038      	movs	r0, r7
 8007f54:	3b30      	subs	r3, #48	@ 0x30
 8007f56:	f7ff ff8f 	bl	8007e78 <__multadd>
 8007f5a:	3601      	adds	r6, #1
 8007f5c:	0001      	movs	r1, r0
 8007f5e:	42a6      	cmp	r6, r4
 8007f60:	d1f5      	bne.n	8007f4e <__s2b+0x4e>
 8007f62:	002c      	movs	r4, r5
 8007f64:	9b00      	ldr	r3, [sp, #0]
 8007f66:	3c08      	subs	r4, #8
 8007f68:	191c      	adds	r4, r3, r4
 8007f6a:	002e      	movs	r6, r5
 8007f6c:	9b01      	ldr	r3, [sp, #4]
 8007f6e:	429e      	cmp	r6, r3
 8007f70:	db04      	blt.n	8007f7c <__s2b+0x7c>
 8007f72:	0008      	movs	r0, r1
 8007f74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f76:	2509      	movs	r5, #9
 8007f78:	340a      	adds	r4, #10
 8007f7a:	e7f6      	b.n	8007f6a <__s2b+0x6a>
 8007f7c:	1b63      	subs	r3, r4, r5
 8007f7e:	5d9b      	ldrb	r3, [r3, r6]
 8007f80:	220a      	movs	r2, #10
 8007f82:	0038      	movs	r0, r7
 8007f84:	3b30      	subs	r3, #48	@ 0x30
 8007f86:	f7ff ff77 	bl	8007e78 <__multadd>
 8007f8a:	3601      	adds	r6, #1
 8007f8c:	0001      	movs	r1, r0
 8007f8e:	e7ed      	b.n	8007f6c <__s2b+0x6c>
 8007f90:	0800a7e9 	.word	0x0800a7e9
 8007f94:	0800a7fa 	.word	0x0800a7fa

08007f98 <__hi0bits>:
 8007f98:	2280      	movs	r2, #128	@ 0x80
 8007f9a:	0003      	movs	r3, r0
 8007f9c:	0252      	lsls	r2, r2, #9
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d201      	bcs.n	8007fa8 <__hi0bits+0x10>
 8007fa4:	041b      	lsls	r3, r3, #16
 8007fa6:	3010      	adds	r0, #16
 8007fa8:	2280      	movs	r2, #128	@ 0x80
 8007faa:	0452      	lsls	r2, r2, #17
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d201      	bcs.n	8007fb4 <__hi0bits+0x1c>
 8007fb0:	3008      	adds	r0, #8
 8007fb2:	021b      	lsls	r3, r3, #8
 8007fb4:	2280      	movs	r2, #128	@ 0x80
 8007fb6:	0552      	lsls	r2, r2, #21
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d201      	bcs.n	8007fc0 <__hi0bits+0x28>
 8007fbc:	3004      	adds	r0, #4
 8007fbe:	011b      	lsls	r3, r3, #4
 8007fc0:	2280      	movs	r2, #128	@ 0x80
 8007fc2:	05d2      	lsls	r2, r2, #23
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d201      	bcs.n	8007fcc <__hi0bits+0x34>
 8007fc8:	3002      	adds	r0, #2
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	db03      	blt.n	8007fd8 <__hi0bits+0x40>
 8007fd0:	3001      	adds	r0, #1
 8007fd2:	4213      	tst	r3, r2
 8007fd4:	d100      	bne.n	8007fd8 <__hi0bits+0x40>
 8007fd6:	2020      	movs	r0, #32
 8007fd8:	4770      	bx	lr

08007fda <__lo0bits>:
 8007fda:	6803      	ldr	r3, [r0, #0]
 8007fdc:	0001      	movs	r1, r0
 8007fde:	2207      	movs	r2, #7
 8007fe0:	0018      	movs	r0, r3
 8007fe2:	4010      	ands	r0, r2
 8007fe4:	4213      	tst	r3, r2
 8007fe6:	d00d      	beq.n	8008004 <__lo0bits+0x2a>
 8007fe8:	3a06      	subs	r2, #6
 8007fea:	2000      	movs	r0, #0
 8007fec:	4213      	tst	r3, r2
 8007fee:	d105      	bne.n	8007ffc <__lo0bits+0x22>
 8007ff0:	3002      	adds	r0, #2
 8007ff2:	4203      	tst	r3, r0
 8007ff4:	d003      	beq.n	8007ffe <__lo0bits+0x24>
 8007ff6:	40d3      	lsrs	r3, r2
 8007ff8:	0010      	movs	r0, r2
 8007ffa:	600b      	str	r3, [r1, #0]
 8007ffc:	4770      	bx	lr
 8007ffe:	089b      	lsrs	r3, r3, #2
 8008000:	600b      	str	r3, [r1, #0]
 8008002:	e7fb      	b.n	8007ffc <__lo0bits+0x22>
 8008004:	b29a      	uxth	r2, r3
 8008006:	2a00      	cmp	r2, #0
 8008008:	d101      	bne.n	800800e <__lo0bits+0x34>
 800800a:	2010      	movs	r0, #16
 800800c:	0c1b      	lsrs	r3, r3, #16
 800800e:	b2da      	uxtb	r2, r3
 8008010:	2a00      	cmp	r2, #0
 8008012:	d101      	bne.n	8008018 <__lo0bits+0x3e>
 8008014:	3008      	adds	r0, #8
 8008016:	0a1b      	lsrs	r3, r3, #8
 8008018:	071a      	lsls	r2, r3, #28
 800801a:	d101      	bne.n	8008020 <__lo0bits+0x46>
 800801c:	3004      	adds	r0, #4
 800801e:	091b      	lsrs	r3, r3, #4
 8008020:	079a      	lsls	r2, r3, #30
 8008022:	d101      	bne.n	8008028 <__lo0bits+0x4e>
 8008024:	3002      	adds	r0, #2
 8008026:	089b      	lsrs	r3, r3, #2
 8008028:	07da      	lsls	r2, r3, #31
 800802a:	d4e9      	bmi.n	8008000 <__lo0bits+0x26>
 800802c:	3001      	adds	r0, #1
 800802e:	085b      	lsrs	r3, r3, #1
 8008030:	d1e6      	bne.n	8008000 <__lo0bits+0x26>
 8008032:	2020      	movs	r0, #32
 8008034:	e7e2      	b.n	8007ffc <__lo0bits+0x22>
	...

08008038 <__i2b>:
 8008038:	b510      	push	{r4, lr}
 800803a:	000c      	movs	r4, r1
 800803c:	2101      	movs	r1, #1
 800803e:	f7ff feb3 	bl	8007da8 <_Balloc>
 8008042:	2800      	cmp	r0, #0
 8008044:	d107      	bne.n	8008056 <__i2b+0x1e>
 8008046:	2146      	movs	r1, #70	@ 0x46
 8008048:	4c05      	ldr	r4, [pc, #20]	@ (8008060 <__i2b+0x28>)
 800804a:	0002      	movs	r2, r0
 800804c:	4b05      	ldr	r3, [pc, #20]	@ (8008064 <__i2b+0x2c>)
 800804e:	0020      	movs	r0, r4
 8008050:	31ff      	adds	r1, #255	@ 0xff
 8008052:	f001 fe3d 	bl	8009cd0 <__assert_func>
 8008056:	2301      	movs	r3, #1
 8008058:	6144      	str	r4, [r0, #20]
 800805a:	6103      	str	r3, [r0, #16]
 800805c:	bd10      	pop	{r4, pc}
 800805e:	46c0      	nop			@ (mov r8, r8)
 8008060:	0800a7fa 	.word	0x0800a7fa
 8008064:	0800a7e9 	.word	0x0800a7e9

08008068 <__multiply>:
 8008068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800806a:	0014      	movs	r4, r2
 800806c:	690a      	ldr	r2, [r1, #16]
 800806e:	6923      	ldr	r3, [r4, #16]
 8008070:	000d      	movs	r5, r1
 8008072:	b08b      	sub	sp, #44	@ 0x2c
 8008074:	429a      	cmp	r2, r3
 8008076:	db02      	blt.n	800807e <__multiply+0x16>
 8008078:	0023      	movs	r3, r4
 800807a:	000c      	movs	r4, r1
 800807c:	001d      	movs	r5, r3
 800807e:	6927      	ldr	r7, [r4, #16]
 8008080:	692e      	ldr	r6, [r5, #16]
 8008082:	6861      	ldr	r1, [r4, #4]
 8008084:	19bb      	adds	r3, r7, r6
 8008086:	9303      	str	r3, [sp, #12]
 8008088:	68a3      	ldr	r3, [r4, #8]
 800808a:	19ba      	adds	r2, r7, r6
 800808c:	4293      	cmp	r3, r2
 800808e:	da00      	bge.n	8008092 <__multiply+0x2a>
 8008090:	3101      	adds	r1, #1
 8008092:	f7ff fe89 	bl	8007da8 <_Balloc>
 8008096:	9002      	str	r0, [sp, #8]
 8008098:	2800      	cmp	r0, #0
 800809a:	d106      	bne.n	80080aa <__multiply+0x42>
 800809c:	21b1      	movs	r1, #177	@ 0xb1
 800809e:	4b49      	ldr	r3, [pc, #292]	@ (80081c4 <__multiply+0x15c>)
 80080a0:	4849      	ldr	r0, [pc, #292]	@ (80081c8 <__multiply+0x160>)
 80080a2:	9a02      	ldr	r2, [sp, #8]
 80080a4:	0049      	lsls	r1, r1, #1
 80080a6:	f001 fe13 	bl	8009cd0 <__assert_func>
 80080aa:	9b02      	ldr	r3, [sp, #8]
 80080ac:	2200      	movs	r2, #0
 80080ae:	3314      	adds	r3, #20
 80080b0:	469c      	mov	ip, r3
 80080b2:	19bb      	adds	r3, r7, r6
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4463      	add	r3, ip
 80080b8:	9304      	str	r3, [sp, #16]
 80080ba:	4663      	mov	r3, ip
 80080bc:	9904      	ldr	r1, [sp, #16]
 80080be:	428b      	cmp	r3, r1
 80080c0:	d32a      	bcc.n	8008118 <__multiply+0xb0>
 80080c2:	0023      	movs	r3, r4
 80080c4:	00bf      	lsls	r7, r7, #2
 80080c6:	3314      	adds	r3, #20
 80080c8:	3514      	adds	r5, #20
 80080ca:	9308      	str	r3, [sp, #32]
 80080cc:	00b6      	lsls	r6, r6, #2
 80080ce:	19db      	adds	r3, r3, r7
 80080d0:	9305      	str	r3, [sp, #20]
 80080d2:	19ab      	adds	r3, r5, r6
 80080d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80080d6:	2304      	movs	r3, #4
 80080d8:	9306      	str	r3, [sp, #24]
 80080da:	0023      	movs	r3, r4
 80080dc:	9a05      	ldr	r2, [sp, #20]
 80080de:	3315      	adds	r3, #21
 80080e0:	9501      	str	r5, [sp, #4]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d305      	bcc.n	80080f2 <__multiply+0x8a>
 80080e6:	1b13      	subs	r3, r2, r4
 80080e8:	3b15      	subs	r3, #21
 80080ea:	089b      	lsrs	r3, r3, #2
 80080ec:	3301      	adds	r3, #1
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	9306      	str	r3, [sp, #24]
 80080f2:	9b01      	ldr	r3, [sp, #4]
 80080f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d310      	bcc.n	800811c <__multiply+0xb4>
 80080fa:	9b03      	ldr	r3, [sp, #12]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	dd05      	ble.n	800810c <__multiply+0xa4>
 8008100:	9b04      	ldr	r3, [sp, #16]
 8008102:	3b04      	subs	r3, #4
 8008104:	9304      	str	r3, [sp, #16]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d056      	beq.n	80081ba <__multiply+0x152>
 800810c:	9b02      	ldr	r3, [sp, #8]
 800810e:	9a03      	ldr	r2, [sp, #12]
 8008110:	0018      	movs	r0, r3
 8008112:	611a      	str	r2, [r3, #16]
 8008114:	b00b      	add	sp, #44	@ 0x2c
 8008116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008118:	c304      	stmia	r3!, {r2}
 800811a:	e7cf      	b.n	80080bc <__multiply+0x54>
 800811c:	9b01      	ldr	r3, [sp, #4]
 800811e:	6818      	ldr	r0, [r3, #0]
 8008120:	b280      	uxth	r0, r0
 8008122:	2800      	cmp	r0, #0
 8008124:	d01e      	beq.n	8008164 <__multiply+0xfc>
 8008126:	4667      	mov	r7, ip
 8008128:	2500      	movs	r5, #0
 800812a:	9e08      	ldr	r6, [sp, #32]
 800812c:	ce02      	ldmia	r6!, {r1}
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	9307      	str	r3, [sp, #28]
 8008132:	b28b      	uxth	r3, r1
 8008134:	4343      	muls	r3, r0
 8008136:	001a      	movs	r2, r3
 8008138:	466b      	mov	r3, sp
 800813a:	0c09      	lsrs	r1, r1, #16
 800813c:	8b9b      	ldrh	r3, [r3, #28]
 800813e:	4341      	muls	r1, r0
 8008140:	18d3      	adds	r3, r2, r3
 8008142:	9a07      	ldr	r2, [sp, #28]
 8008144:	195b      	adds	r3, r3, r5
 8008146:	0c12      	lsrs	r2, r2, #16
 8008148:	1889      	adds	r1, r1, r2
 800814a:	0c1a      	lsrs	r2, r3, #16
 800814c:	188a      	adds	r2, r1, r2
 800814e:	b29b      	uxth	r3, r3
 8008150:	0c15      	lsrs	r5, r2, #16
 8008152:	0412      	lsls	r2, r2, #16
 8008154:	431a      	orrs	r2, r3
 8008156:	9b05      	ldr	r3, [sp, #20]
 8008158:	c704      	stmia	r7!, {r2}
 800815a:	42b3      	cmp	r3, r6
 800815c:	d8e6      	bhi.n	800812c <__multiply+0xc4>
 800815e:	4663      	mov	r3, ip
 8008160:	9a06      	ldr	r2, [sp, #24]
 8008162:	509d      	str	r5, [r3, r2]
 8008164:	9b01      	ldr	r3, [sp, #4]
 8008166:	6818      	ldr	r0, [r3, #0]
 8008168:	0c00      	lsrs	r0, r0, #16
 800816a:	d020      	beq.n	80081ae <__multiply+0x146>
 800816c:	4663      	mov	r3, ip
 800816e:	0025      	movs	r5, r4
 8008170:	4661      	mov	r1, ip
 8008172:	2700      	movs	r7, #0
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	3514      	adds	r5, #20
 8008178:	682a      	ldr	r2, [r5, #0]
 800817a:	680e      	ldr	r6, [r1, #0]
 800817c:	b292      	uxth	r2, r2
 800817e:	4342      	muls	r2, r0
 8008180:	0c36      	lsrs	r6, r6, #16
 8008182:	1992      	adds	r2, r2, r6
 8008184:	19d2      	adds	r2, r2, r7
 8008186:	0416      	lsls	r6, r2, #16
 8008188:	b29b      	uxth	r3, r3
 800818a:	431e      	orrs	r6, r3
 800818c:	600e      	str	r6, [r1, #0]
 800818e:	cd40      	ldmia	r5!, {r6}
 8008190:	684b      	ldr	r3, [r1, #4]
 8008192:	0c36      	lsrs	r6, r6, #16
 8008194:	4346      	muls	r6, r0
 8008196:	b29b      	uxth	r3, r3
 8008198:	0c12      	lsrs	r2, r2, #16
 800819a:	18f3      	adds	r3, r6, r3
 800819c:	189b      	adds	r3, r3, r2
 800819e:	9a05      	ldr	r2, [sp, #20]
 80081a0:	0c1f      	lsrs	r7, r3, #16
 80081a2:	3104      	adds	r1, #4
 80081a4:	42aa      	cmp	r2, r5
 80081a6:	d8e7      	bhi.n	8008178 <__multiply+0x110>
 80081a8:	4662      	mov	r2, ip
 80081aa:	9906      	ldr	r1, [sp, #24]
 80081ac:	5053      	str	r3, [r2, r1]
 80081ae:	9b01      	ldr	r3, [sp, #4]
 80081b0:	3304      	adds	r3, #4
 80081b2:	9301      	str	r3, [sp, #4]
 80081b4:	2304      	movs	r3, #4
 80081b6:	449c      	add	ip, r3
 80081b8:	e79b      	b.n	80080f2 <__multiply+0x8a>
 80081ba:	9b03      	ldr	r3, [sp, #12]
 80081bc:	3b01      	subs	r3, #1
 80081be:	9303      	str	r3, [sp, #12]
 80081c0:	e79b      	b.n	80080fa <__multiply+0x92>
 80081c2:	46c0      	nop			@ (mov r8, r8)
 80081c4:	0800a7e9 	.word	0x0800a7e9
 80081c8:	0800a7fa 	.word	0x0800a7fa

080081cc <__pow5mult>:
 80081cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081ce:	2303      	movs	r3, #3
 80081d0:	0015      	movs	r5, r2
 80081d2:	0007      	movs	r7, r0
 80081d4:	000e      	movs	r6, r1
 80081d6:	401a      	ands	r2, r3
 80081d8:	421d      	tst	r5, r3
 80081da:	d008      	beq.n	80081ee <__pow5mult+0x22>
 80081dc:	4925      	ldr	r1, [pc, #148]	@ (8008274 <__pow5mult+0xa8>)
 80081de:	3a01      	subs	r2, #1
 80081e0:	0092      	lsls	r2, r2, #2
 80081e2:	5852      	ldr	r2, [r2, r1]
 80081e4:	2300      	movs	r3, #0
 80081e6:	0031      	movs	r1, r6
 80081e8:	f7ff fe46 	bl	8007e78 <__multadd>
 80081ec:	0006      	movs	r6, r0
 80081ee:	10ad      	asrs	r5, r5, #2
 80081f0:	d03d      	beq.n	800826e <__pow5mult+0xa2>
 80081f2:	69fc      	ldr	r4, [r7, #28]
 80081f4:	2c00      	cmp	r4, #0
 80081f6:	d10f      	bne.n	8008218 <__pow5mult+0x4c>
 80081f8:	2010      	movs	r0, #16
 80081fa:	f7ff fd19 	bl	8007c30 <malloc>
 80081fe:	1e02      	subs	r2, r0, #0
 8008200:	61f8      	str	r0, [r7, #28]
 8008202:	d105      	bne.n	8008210 <__pow5mult+0x44>
 8008204:	21b4      	movs	r1, #180	@ 0xb4
 8008206:	4b1c      	ldr	r3, [pc, #112]	@ (8008278 <__pow5mult+0xac>)
 8008208:	481c      	ldr	r0, [pc, #112]	@ (800827c <__pow5mult+0xb0>)
 800820a:	31ff      	adds	r1, #255	@ 0xff
 800820c:	f001 fd60 	bl	8009cd0 <__assert_func>
 8008210:	6044      	str	r4, [r0, #4]
 8008212:	6084      	str	r4, [r0, #8]
 8008214:	6004      	str	r4, [r0, #0]
 8008216:	60c4      	str	r4, [r0, #12]
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	689c      	ldr	r4, [r3, #8]
 800821c:	9301      	str	r3, [sp, #4]
 800821e:	2c00      	cmp	r4, #0
 8008220:	d108      	bne.n	8008234 <__pow5mult+0x68>
 8008222:	0038      	movs	r0, r7
 8008224:	4916      	ldr	r1, [pc, #88]	@ (8008280 <__pow5mult+0xb4>)
 8008226:	f7ff ff07 	bl	8008038 <__i2b>
 800822a:	9b01      	ldr	r3, [sp, #4]
 800822c:	0004      	movs	r4, r0
 800822e:	6098      	str	r0, [r3, #8]
 8008230:	2300      	movs	r3, #0
 8008232:	6003      	str	r3, [r0, #0]
 8008234:	2301      	movs	r3, #1
 8008236:	421d      	tst	r5, r3
 8008238:	d00a      	beq.n	8008250 <__pow5mult+0x84>
 800823a:	0031      	movs	r1, r6
 800823c:	0022      	movs	r2, r4
 800823e:	0038      	movs	r0, r7
 8008240:	f7ff ff12 	bl	8008068 <__multiply>
 8008244:	0031      	movs	r1, r6
 8008246:	9001      	str	r0, [sp, #4]
 8008248:	0038      	movs	r0, r7
 800824a:	f7ff fdf1 	bl	8007e30 <_Bfree>
 800824e:	9e01      	ldr	r6, [sp, #4]
 8008250:	106d      	asrs	r5, r5, #1
 8008252:	d00c      	beq.n	800826e <__pow5mult+0xa2>
 8008254:	6820      	ldr	r0, [r4, #0]
 8008256:	2800      	cmp	r0, #0
 8008258:	d107      	bne.n	800826a <__pow5mult+0x9e>
 800825a:	0022      	movs	r2, r4
 800825c:	0021      	movs	r1, r4
 800825e:	0038      	movs	r0, r7
 8008260:	f7ff ff02 	bl	8008068 <__multiply>
 8008264:	2300      	movs	r3, #0
 8008266:	6020      	str	r0, [r4, #0]
 8008268:	6003      	str	r3, [r0, #0]
 800826a:	0004      	movs	r4, r0
 800826c:	e7e2      	b.n	8008234 <__pow5mult+0x68>
 800826e:	0030      	movs	r0, r6
 8008270:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008272:	46c0      	nop			@ (mov r8, r8)
 8008274:	0800a854 	.word	0x0800a854
 8008278:	0800a77a 	.word	0x0800a77a
 800827c:	0800a7fa 	.word	0x0800a7fa
 8008280:	00000271 	.word	0x00000271

08008284 <__lshift>:
 8008284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008286:	000c      	movs	r4, r1
 8008288:	0016      	movs	r6, r2
 800828a:	6923      	ldr	r3, [r4, #16]
 800828c:	1157      	asrs	r7, r2, #5
 800828e:	b085      	sub	sp, #20
 8008290:	18fb      	adds	r3, r7, r3
 8008292:	9301      	str	r3, [sp, #4]
 8008294:	3301      	adds	r3, #1
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	6849      	ldr	r1, [r1, #4]
 800829a:	68a3      	ldr	r3, [r4, #8]
 800829c:	9002      	str	r0, [sp, #8]
 800829e:	9a00      	ldr	r2, [sp, #0]
 80082a0:	4293      	cmp	r3, r2
 80082a2:	db10      	blt.n	80082c6 <__lshift+0x42>
 80082a4:	9802      	ldr	r0, [sp, #8]
 80082a6:	f7ff fd7f 	bl	8007da8 <_Balloc>
 80082aa:	2300      	movs	r3, #0
 80082ac:	0001      	movs	r1, r0
 80082ae:	0005      	movs	r5, r0
 80082b0:	001a      	movs	r2, r3
 80082b2:	3114      	adds	r1, #20
 80082b4:	4298      	cmp	r0, r3
 80082b6:	d10c      	bne.n	80082d2 <__lshift+0x4e>
 80082b8:	21ef      	movs	r1, #239	@ 0xef
 80082ba:	002a      	movs	r2, r5
 80082bc:	4b25      	ldr	r3, [pc, #148]	@ (8008354 <__lshift+0xd0>)
 80082be:	4826      	ldr	r0, [pc, #152]	@ (8008358 <__lshift+0xd4>)
 80082c0:	0049      	lsls	r1, r1, #1
 80082c2:	f001 fd05 	bl	8009cd0 <__assert_func>
 80082c6:	3101      	adds	r1, #1
 80082c8:	005b      	lsls	r3, r3, #1
 80082ca:	e7e8      	b.n	800829e <__lshift+0x1a>
 80082cc:	0098      	lsls	r0, r3, #2
 80082ce:	500a      	str	r2, [r1, r0]
 80082d0:	3301      	adds	r3, #1
 80082d2:	42bb      	cmp	r3, r7
 80082d4:	dbfa      	blt.n	80082cc <__lshift+0x48>
 80082d6:	43fb      	mvns	r3, r7
 80082d8:	17db      	asrs	r3, r3, #31
 80082da:	401f      	ands	r7, r3
 80082dc:	00bf      	lsls	r7, r7, #2
 80082de:	0023      	movs	r3, r4
 80082e0:	201f      	movs	r0, #31
 80082e2:	19c9      	adds	r1, r1, r7
 80082e4:	0037      	movs	r7, r6
 80082e6:	6922      	ldr	r2, [r4, #16]
 80082e8:	3314      	adds	r3, #20
 80082ea:	0092      	lsls	r2, r2, #2
 80082ec:	189a      	adds	r2, r3, r2
 80082ee:	4007      	ands	r7, r0
 80082f0:	4206      	tst	r6, r0
 80082f2:	d029      	beq.n	8008348 <__lshift+0xc4>
 80082f4:	3001      	adds	r0, #1
 80082f6:	1bc0      	subs	r0, r0, r7
 80082f8:	9003      	str	r0, [sp, #12]
 80082fa:	468c      	mov	ip, r1
 80082fc:	2000      	movs	r0, #0
 80082fe:	681e      	ldr	r6, [r3, #0]
 8008300:	40be      	lsls	r6, r7
 8008302:	4306      	orrs	r6, r0
 8008304:	4660      	mov	r0, ip
 8008306:	c040      	stmia	r0!, {r6}
 8008308:	4684      	mov	ip, r0
 800830a:	9e03      	ldr	r6, [sp, #12]
 800830c:	cb01      	ldmia	r3!, {r0}
 800830e:	40f0      	lsrs	r0, r6
 8008310:	429a      	cmp	r2, r3
 8008312:	d8f4      	bhi.n	80082fe <__lshift+0x7a>
 8008314:	0026      	movs	r6, r4
 8008316:	3615      	adds	r6, #21
 8008318:	2304      	movs	r3, #4
 800831a:	42b2      	cmp	r2, r6
 800831c:	d304      	bcc.n	8008328 <__lshift+0xa4>
 800831e:	1b13      	subs	r3, r2, r4
 8008320:	3b15      	subs	r3, #21
 8008322:	089b      	lsrs	r3, r3, #2
 8008324:	3301      	adds	r3, #1
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	50c8      	str	r0, [r1, r3]
 800832a:	2800      	cmp	r0, #0
 800832c:	d002      	beq.n	8008334 <__lshift+0xb0>
 800832e:	9b01      	ldr	r3, [sp, #4]
 8008330:	3302      	adds	r3, #2
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	9b00      	ldr	r3, [sp, #0]
 8008336:	9802      	ldr	r0, [sp, #8]
 8008338:	3b01      	subs	r3, #1
 800833a:	0021      	movs	r1, r4
 800833c:	612b      	str	r3, [r5, #16]
 800833e:	f7ff fd77 	bl	8007e30 <_Bfree>
 8008342:	0028      	movs	r0, r5
 8008344:	b005      	add	sp, #20
 8008346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008348:	cb01      	ldmia	r3!, {r0}
 800834a:	c101      	stmia	r1!, {r0}
 800834c:	429a      	cmp	r2, r3
 800834e:	d8fb      	bhi.n	8008348 <__lshift+0xc4>
 8008350:	e7f0      	b.n	8008334 <__lshift+0xb0>
 8008352:	46c0      	nop			@ (mov r8, r8)
 8008354:	0800a7e9 	.word	0x0800a7e9
 8008358:	0800a7fa 	.word	0x0800a7fa

0800835c <__mcmp>:
 800835c:	b530      	push	{r4, r5, lr}
 800835e:	690b      	ldr	r3, [r1, #16]
 8008360:	6904      	ldr	r4, [r0, #16]
 8008362:	0002      	movs	r2, r0
 8008364:	1ae0      	subs	r0, r4, r3
 8008366:	429c      	cmp	r4, r3
 8008368:	d10f      	bne.n	800838a <__mcmp+0x2e>
 800836a:	3214      	adds	r2, #20
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	3114      	adds	r1, #20
 8008370:	0014      	movs	r4, r2
 8008372:	18c9      	adds	r1, r1, r3
 8008374:	18d2      	adds	r2, r2, r3
 8008376:	3a04      	subs	r2, #4
 8008378:	3904      	subs	r1, #4
 800837a:	6815      	ldr	r5, [r2, #0]
 800837c:	680b      	ldr	r3, [r1, #0]
 800837e:	429d      	cmp	r5, r3
 8008380:	d004      	beq.n	800838c <__mcmp+0x30>
 8008382:	2001      	movs	r0, #1
 8008384:	429d      	cmp	r5, r3
 8008386:	d200      	bcs.n	800838a <__mcmp+0x2e>
 8008388:	3802      	subs	r0, #2
 800838a:	bd30      	pop	{r4, r5, pc}
 800838c:	4294      	cmp	r4, r2
 800838e:	d3f2      	bcc.n	8008376 <__mcmp+0x1a>
 8008390:	e7fb      	b.n	800838a <__mcmp+0x2e>
	...

08008394 <__mdiff>:
 8008394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008396:	000c      	movs	r4, r1
 8008398:	b087      	sub	sp, #28
 800839a:	9000      	str	r0, [sp, #0]
 800839c:	0011      	movs	r1, r2
 800839e:	0020      	movs	r0, r4
 80083a0:	0017      	movs	r7, r2
 80083a2:	f7ff ffdb 	bl	800835c <__mcmp>
 80083a6:	1e05      	subs	r5, r0, #0
 80083a8:	d110      	bne.n	80083cc <__mdiff+0x38>
 80083aa:	0001      	movs	r1, r0
 80083ac:	9800      	ldr	r0, [sp, #0]
 80083ae:	f7ff fcfb 	bl	8007da8 <_Balloc>
 80083b2:	1e02      	subs	r2, r0, #0
 80083b4:	d104      	bne.n	80083c0 <__mdiff+0x2c>
 80083b6:	4b40      	ldr	r3, [pc, #256]	@ (80084b8 <__mdiff+0x124>)
 80083b8:	4840      	ldr	r0, [pc, #256]	@ (80084bc <__mdiff+0x128>)
 80083ba:	4941      	ldr	r1, [pc, #260]	@ (80084c0 <__mdiff+0x12c>)
 80083bc:	f001 fc88 	bl	8009cd0 <__assert_func>
 80083c0:	2301      	movs	r3, #1
 80083c2:	6145      	str	r5, [r0, #20]
 80083c4:	6103      	str	r3, [r0, #16]
 80083c6:	0010      	movs	r0, r2
 80083c8:	b007      	add	sp, #28
 80083ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083cc:	2600      	movs	r6, #0
 80083ce:	42b0      	cmp	r0, r6
 80083d0:	da03      	bge.n	80083da <__mdiff+0x46>
 80083d2:	0023      	movs	r3, r4
 80083d4:	003c      	movs	r4, r7
 80083d6:	001f      	movs	r7, r3
 80083d8:	3601      	adds	r6, #1
 80083da:	6861      	ldr	r1, [r4, #4]
 80083dc:	9800      	ldr	r0, [sp, #0]
 80083de:	f7ff fce3 	bl	8007da8 <_Balloc>
 80083e2:	1e02      	subs	r2, r0, #0
 80083e4:	d103      	bne.n	80083ee <__mdiff+0x5a>
 80083e6:	4b34      	ldr	r3, [pc, #208]	@ (80084b8 <__mdiff+0x124>)
 80083e8:	4834      	ldr	r0, [pc, #208]	@ (80084bc <__mdiff+0x128>)
 80083ea:	4936      	ldr	r1, [pc, #216]	@ (80084c4 <__mdiff+0x130>)
 80083ec:	e7e6      	b.n	80083bc <__mdiff+0x28>
 80083ee:	6923      	ldr	r3, [r4, #16]
 80083f0:	3414      	adds	r4, #20
 80083f2:	9300      	str	r3, [sp, #0]
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	18e3      	adds	r3, r4, r3
 80083f8:	0021      	movs	r1, r4
 80083fa:	9401      	str	r4, [sp, #4]
 80083fc:	003c      	movs	r4, r7
 80083fe:	9302      	str	r3, [sp, #8]
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	3414      	adds	r4, #20
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	18e3      	adds	r3, r4, r3
 8008408:	9303      	str	r3, [sp, #12]
 800840a:	0003      	movs	r3, r0
 800840c:	60c6      	str	r6, [r0, #12]
 800840e:	468c      	mov	ip, r1
 8008410:	2000      	movs	r0, #0
 8008412:	3314      	adds	r3, #20
 8008414:	9304      	str	r3, [sp, #16]
 8008416:	9305      	str	r3, [sp, #20]
 8008418:	4663      	mov	r3, ip
 800841a:	cb20      	ldmia	r3!, {r5}
 800841c:	b2a9      	uxth	r1, r5
 800841e:	000e      	movs	r6, r1
 8008420:	469c      	mov	ip, r3
 8008422:	cc08      	ldmia	r4!, {r3}
 8008424:	0c2d      	lsrs	r5, r5, #16
 8008426:	b299      	uxth	r1, r3
 8008428:	1a71      	subs	r1, r6, r1
 800842a:	1809      	adds	r1, r1, r0
 800842c:	0c1b      	lsrs	r3, r3, #16
 800842e:	1408      	asrs	r0, r1, #16
 8008430:	1aeb      	subs	r3, r5, r3
 8008432:	181b      	adds	r3, r3, r0
 8008434:	1418      	asrs	r0, r3, #16
 8008436:	b289      	uxth	r1, r1
 8008438:	041b      	lsls	r3, r3, #16
 800843a:	4319      	orrs	r1, r3
 800843c:	9b05      	ldr	r3, [sp, #20]
 800843e:	c302      	stmia	r3!, {r1}
 8008440:	9305      	str	r3, [sp, #20]
 8008442:	9b03      	ldr	r3, [sp, #12]
 8008444:	42a3      	cmp	r3, r4
 8008446:	d8e7      	bhi.n	8008418 <__mdiff+0x84>
 8008448:	0039      	movs	r1, r7
 800844a:	9c03      	ldr	r4, [sp, #12]
 800844c:	3115      	adds	r1, #21
 800844e:	2304      	movs	r3, #4
 8008450:	428c      	cmp	r4, r1
 8008452:	d304      	bcc.n	800845e <__mdiff+0xca>
 8008454:	1be3      	subs	r3, r4, r7
 8008456:	3b15      	subs	r3, #21
 8008458:	089b      	lsrs	r3, r3, #2
 800845a:	3301      	adds	r3, #1
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	9901      	ldr	r1, [sp, #4]
 8008460:	18cd      	adds	r5, r1, r3
 8008462:	9904      	ldr	r1, [sp, #16]
 8008464:	002e      	movs	r6, r5
 8008466:	18cb      	adds	r3, r1, r3
 8008468:	001f      	movs	r7, r3
 800846a:	9902      	ldr	r1, [sp, #8]
 800846c:	428e      	cmp	r6, r1
 800846e:	d311      	bcc.n	8008494 <__mdiff+0x100>
 8008470:	9c02      	ldr	r4, [sp, #8]
 8008472:	1ee9      	subs	r1, r5, #3
 8008474:	2000      	movs	r0, #0
 8008476:	428c      	cmp	r4, r1
 8008478:	d304      	bcc.n	8008484 <__mdiff+0xf0>
 800847a:	0021      	movs	r1, r4
 800847c:	3103      	adds	r1, #3
 800847e:	1b49      	subs	r1, r1, r5
 8008480:	0889      	lsrs	r1, r1, #2
 8008482:	0088      	lsls	r0, r1, #2
 8008484:	181b      	adds	r3, r3, r0
 8008486:	3b04      	subs	r3, #4
 8008488:	6819      	ldr	r1, [r3, #0]
 800848a:	2900      	cmp	r1, #0
 800848c:	d010      	beq.n	80084b0 <__mdiff+0x11c>
 800848e:	9b00      	ldr	r3, [sp, #0]
 8008490:	6113      	str	r3, [r2, #16]
 8008492:	e798      	b.n	80083c6 <__mdiff+0x32>
 8008494:	4684      	mov	ip, r0
 8008496:	ce02      	ldmia	r6!, {r1}
 8008498:	b288      	uxth	r0, r1
 800849a:	4460      	add	r0, ip
 800849c:	1400      	asrs	r0, r0, #16
 800849e:	0c0c      	lsrs	r4, r1, #16
 80084a0:	1904      	adds	r4, r0, r4
 80084a2:	4461      	add	r1, ip
 80084a4:	1420      	asrs	r0, r4, #16
 80084a6:	b289      	uxth	r1, r1
 80084a8:	0424      	lsls	r4, r4, #16
 80084aa:	4321      	orrs	r1, r4
 80084ac:	c702      	stmia	r7!, {r1}
 80084ae:	e7dc      	b.n	800846a <__mdiff+0xd6>
 80084b0:	9900      	ldr	r1, [sp, #0]
 80084b2:	3901      	subs	r1, #1
 80084b4:	9100      	str	r1, [sp, #0]
 80084b6:	e7e6      	b.n	8008486 <__mdiff+0xf2>
 80084b8:	0800a7e9 	.word	0x0800a7e9
 80084bc:	0800a7fa 	.word	0x0800a7fa
 80084c0:	00000237 	.word	0x00000237
 80084c4:	00000245 	.word	0x00000245

080084c8 <__ulp>:
 80084c8:	b510      	push	{r4, lr}
 80084ca:	2400      	movs	r4, #0
 80084cc:	4b0c      	ldr	r3, [pc, #48]	@ (8008500 <__ulp+0x38>)
 80084ce:	4a0d      	ldr	r2, [pc, #52]	@ (8008504 <__ulp+0x3c>)
 80084d0:	400b      	ands	r3, r1
 80084d2:	189b      	adds	r3, r3, r2
 80084d4:	42a3      	cmp	r3, r4
 80084d6:	dc06      	bgt.n	80084e6 <__ulp+0x1e>
 80084d8:	425b      	negs	r3, r3
 80084da:	151a      	asrs	r2, r3, #20
 80084dc:	2a13      	cmp	r2, #19
 80084de:	dc05      	bgt.n	80084ec <__ulp+0x24>
 80084e0:	2380      	movs	r3, #128	@ 0x80
 80084e2:	031b      	lsls	r3, r3, #12
 80084e4:	4113      	asrs	r3, r2
 80084e6:	0019      	movs	r1, r3
 80084e8:	0020      	movs	r0, r4
 80084ea:	bd10      	pop	{r4, pc}
 80084ec:	3a14      	subs	r2, #20
 80084ee:	2401      	movs	r4, #1
 80084f0:	2a1e      	cmp	r2, #30
 80084f2:	dc02      	bgt.n	80084fa <__ulp+0x32>
 80084f4:	2480      	movs	r4, #128	@ 0x80
 80084f6:	0624      	lsls	r4, r4, #24
 80084f8:	40d4      	lsrs	r4, r2
 80084fa:	2300      	movs	r3, #0
 80084fc:	e7f3      	b.n	80084e6 <__ulp+0x1e>
 80084fe:	46c0      	nop			@ (mov r8, r8)
 8008500:	7ff00000 	.word	0x7ff00000
 8008504:	fcc00000 	.word	0xfcc00000

08008508 <__b2d>:
 8008508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800850a:	0006      	movs	r6, r0
 800850c:	6903      	ldr	r3, [r0, #16]
 800850e:	3614      	adds	r6, #20
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	18f3      	adds	r3, r6, r3
 8008514:	1f1d      	subs	r5, r3, #4
 8008516:	682c      	ldr	r4, [r5, #0]
 8008518:	000f      	movs	r7, r1
 800851a:	0020      	movs	r0, r4
 800851c:	9301      	str	r3, [sp, #4]
 800851e:	f7ff fd3b 	bl	8007f98 <__hi0bits>
 8008522:	2220      	movs	r2, #32
 8008524:	1a12      	subs	r2, r2, r0
 8008526:	603a      	str	r2, [r7, #0]
 8008528:	0003      	movs	r3, r0
 800852a:	4a1c      	ldr	r2, [pc, #112]	@ (800859c <__b2d+0x94>)
 800852c:	280a      	cmp	r0, #10
 800852e:	dc15      	bgt.n	800855c <__b2d+0x54>
 8008530:	210b      	movs	r1, #11
 8008532:	0027      	movs	r7, r4
 8008534:	1a09      	subs	r1, r1, r0
 8008536:	40cf      	lsrs	r7, r1
 8008538:	433a      	orrs	r2, r7
 800853a:	468c      	mov	ip, r1
 800853c:	0011      	movs	r1, r2
 800853e:	2200      	movs	r2, #0
 8008540:	42ae      	cmp	r6, r5
 8008542:	d202      	bcs.n	800854a <__b2d+0x42>
 8008544:	9a01      	ldr	r2, [sp, #4]
 8008546:	3a08      	subs	r2, #8
 8008548:	6812      	ldr	r2, [r2, #0]
 800854a:	3315      	adds	r3, #21
 800854c:	409c      	lsls	r4, r3
 800854e:	4663      	mov	r3, ip
 8008550:	0027      	movs	r7, r4
 8008552:	40da      	lsrs	r2, r3
 8008554:	4317      	orrs	r7, r2
 8008556:	0038      	movs	r0, r7
 8008558:	b003      	add	sp, #12
 800855a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800855c:	2700      	movs	r7, #0
 800855e:	42ae      	cmp	r6, r5
 8008560:	d202      	bcs.n	8008568 <__b2d+0x60>
 8008562:	9d01      	ldr	r5, [sp, #4]
 8008564:	3d08      	subs	r5, #8
 8008566:	682f      	ldr	r7, [r5, #0]
 8008568:	210b      	movs	r1, #11
 800856a:	4249      	negs	r1, r1
 800856c:	468c      	mov	ip, r1
 800856e:	449c      	add	ip, r3
 8008570:	2b0b      	cmp	r3, #11
 8008572:	d010      	beq.n	8008596 <__b2d+0x8e>
 8008574:	4661      	mov	r1, ip
 8008576:	2320      	movs	r3, #32
 8008578:	408c      	lsls	r4, r1
 800857a:	1a5b      	subs	r3, r3, r1
 800857c:	0039      	movs	r1, r7
 800857e:	40d9      	lsrs	r1, r3
 8008580:	430c      	orrs	r4, r1
 8008582:	4322      	orrs	r2, r4
 8008584:	0011      	movs	r1, r2
 8008586:	2200      	movs	r2, #0
 8008588:	42b5      	cmp	r5, r6
 800858a:	d901      	bls.n	8008590 <__b2d+0x88>
 800858c:	3d04      	subs	r5, #4
 800858e:	682a      	ldr	r2, [r5, #0]
 8008590:	4664      	mov	r4, ip
 8008592:	40a7      	lsls	r7, r4
 8008594:	e7dd      	b.n	8008552 <__b2d+0x4a>
 8008596:	4322      	orrs	r2, r4
 8008598:	0011      	movs	r1, r2
 800859a:	e7dc      	b.n	8008556 <__b2d+0x4e>
 800859c:	3ff00000 	.word	0x3ff00000

080085a0 <__d2b>:
 80085a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085a2:	2101      	movs	r1, #1
 80085a4:	0016      	movs	r6, r2
 80085a6:	001f      	movs	r7, r3
 80085a8:	f7ff fbfe 	bl	8007da8 <_Balloc>
 80085ac:	1e04      	subs	r4, r0, #0
 80085ae:	d105      	bne.n	80085bc <__d2b+0x1c>
 80085b0:	0022      	movs	r2, r4
 80085b2:	4b25      	ldr	r3, [pc, #148]	@ (8008648 <__d2b+0xa8>)
 80085b4:	4825      	ldr	r0, [pc, #148]	@ (800864c <__d2b+0xac>)
 80085b6:	4926      	ldr	r1, [pc, #152]	@ (8008650 <__d2b+0xb0>)
 80085b8:	f001 fb8a 	bl	8009cd0 <__assert_func>
 80085bc:	033b      	lsls	r3, r7, #12
 80085be:	007d      	lsls	r5, r7, #1
 80085c0:	0b1b      	lsrs	r3, r3, #12
 80085c2:	0d6d      	lsrs	r5, r5, #21
 80085c4:	d002      	beq.n	80085cc <__d2b+0x2c>
 80085c6:	2280      	movs	r2, #128	@ 0x80
 80085c8:	0352      	lsls	r2, r2, #13
 80085ca:	4313      	orrs	r3, r2
 80085cc:	9301      	str	r3, [sp, #4]
 80085ce:	2e00      	cmp	r6, #0
 80085d0:	d025      	beq.n	800861e <__d2b+0x7e>
 80085d2:	4668      	mov	r0, sp
 80085d4:	9600      	str	r6, [sp, #0]
 80085d6:	f7ff fd00 	bl	8007fda <__lo0bits>
 80085da:	9b01      	ldr	r3, [sp, #4]
 80085dc:	9900      	ldr	r1, [sp, #0]
 80085de:	2800      	cmp	r0, #0
 80085e0:	d01b      	beq.n	800861a <__d2b+0x7a>
 80085e2:	2220      	movs	r2, #32
 80085e4:	001e      	movs	r6, r3
 80085e6:	1a12      	subs	r2, r2, r0
 80085e8:	4096      	lsls	r6, r2
 80085ea:	0032      	movs	r2, r6
 80085ec:	40c3      	lsrs	r3, r0
 80085ee:	430a      	orrs	r2, r1
 80085f0:	6162      	str	r2, [r4, #20]
 80085f2:	9301      	str	r3, [sp, #4]
 80085f4:	9e01      	ldr	r6, [sp, #4]
 80085f6:	61a6      	str	r6, [r4, #24]
 80085f8:	1e73      	subs	r3, r6, #1
 80085fa:	419e      	sbcs	r6, r3
 80085fc:	3601      	adds	r6, #1
 80085fe:	6126      	str	r6, [r4, #16]
 8008600:	2d00      	cmp	r5, #0
 8008602:	d014      	beq.n	800862e <__d2b+0x8e>
 8008604:	2635      	movs	r6, #53	@ 0x35
 8008606:	4b13      	ldr	r3, [pc, #76]	@ (8008654 <__d2b+0xb4>)
 8008608:	18ed      	adds	r5, r5, r3
 800860a:	9b08      	ldr	r3, [sp, #32]
 800860c:	182d      	adds	r5, r5, r0
 800860e:	601d      	str	r5, [r3, #0]
 8008610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008612:	1a36      	subs	r6, r6, r0
 8008614:	601e      	str	r6, [r3, #0]
 8008616:	0020      	movs	r0, r4
 8008618:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800861a:	6161      	str	r1, [r4, #20]
 800861c:	e7ea      	b.n	80085f4 <__d2b+0x54>
 800861e:	a801      	add	r0, sp, #4
 8008620:	f7ff fcdb 	bl	8007fda <__lo0bits>
 8008624:	9b01      	ldr	r3, [sp, #4]
 8008626:	2601      	movs	r6, #1
 8008628:	6163      	str	r3, [r4, #20]
 800862a:	3020      	adds	r0, #32
 800862c:	e7e7      	b.n	80085fe <__d2b+0x5e>
 800862e:	4b0a      	ldr	r3, [pc, #40]	@ (8008658 <__d2b+0xb8>)
 8008630:	18c0      	adds	r0, r0, r3
 8008632:	9b08      	ldr	r3, [sp, #32]
 8008634:	6018      	str	r0, [r3, #0]
 8008636:	4b09      	ldr	r3, [pc, #36]	@ (800865c <__d2b+0xbc>)
 8008638:	18f3      	adds	r3, r6, r3
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	18e3      	adds	r3, r4, r3
 800863e:	6958      	ldr	r0, [r3, #20]
 8008640:	f7ff fcaa 	bl	8007f98 <__hi0bits>
 8008644:	0176      	lsls	r6, r6, #5
 8008646:	e7e3      	b.n	8008610 <__d2b+0x70>
 8008648:	0800a7e9 	.word	0x0800a7e9
 800864c:	0800a7fa 	.word	0x0800a7fa
 8008650:	0000030f 	.word	0x0000030f
 8008654:	fffffbcd 	.word	0xfffffbcd
 8008658:	fffffbce 	.word	0xfffffbce
 800865c:	3fffffff 	.word	0x3fffffff

08008660 <__ratio>:
 8008660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008662:	b087      	sub	sp, #28
 8008664:	000f      	movs	r7, r1
 8008666:	a904      	add	r1, sp, #16
 8008668:	0006      	movs	r6, r0
 800866a:	f7ff ff4d 	bl	8008508 <__b2d>
 800866e:	9000      	str	r0, [sp, #0]
 8008670:	9101      	str	r1, [sp, #4]
 8008672:	9b00      	ldr	r3, [sp, #0]
 8008674:	9c01      	ldr	r4, [sp, #4]
 8008676:	0038      	movs	r0, r7
 8008678:	a905      	add	r1, sp, #20
 800867a:	9302      	str	r3, [sp, #8]
 800867c:	9403      	str	r4, [sp, #12]
 800867e:	f7ff ff43 	bl	8008508 <__b2d>
 8008682:	000d      	movs	r5, r1
 8008684:	0002      	movs	r2, r0
 8008686:	000b      	movs	r3, r1
 8008688:	6930      	ldr	r0, [r6, #16]
 800868a:	6939      	ldr	r1, [r7, #16]
 800868c:	9e04      	ldr	r6, [sp, #16]
 800868e:	1a40      	subs	r0, r0, r1
 8008690:	9905      	ldr	r1, [sp, #20]
 8008692:	0140      	lsls	r0, r0, #5
 8008694:	1a71      	subs	r1, r6, r1
 8008696:	1841      	adds	r1, r0, r1
 8008698:	0508      	lsls	r0, r1, #20
 800869a:	2900      	cmp	r1, #0
 800869c:	dd08      	ble.n	80086b0 <__ratio+0x50>
 800869e:	9901      	ldr	r1, [sp, #4]
 80086a0:	1841      	adds	r1, r0, r1
 80086a2:	9103      	str	r1, [sp, #12]
 80086a4:	9802      	ldr	r0, [sp, #8]
 80086a6:	9903      	ldr	r1, [sp, #12]
 80086a8:	f7f8 fc3c 	bl	8000f24 <__aeabi_ddiv>
 80086ac:	b007      	add	sp, #28
 80086ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086b0:	1a2b      	subs	r3, r5, r0
 80086b2:	e7f7      	b.n	80086a4 <__ratio+0x44>

080086b4 <__copybits>:
 80086b4:	b570      	push	{r4, r5, r6, lr}
 80086b6:	0014      	movs	r4, r2
 80086b8:	0005      	movs	r5, r0
 80086ba:	3901      	subs	r1, #1
 80086bc:	6913      	ldr	r3, [r2, #16]
 80086be:	1149      	asrs	r1, r1, #5
 80086c0:	3101      	adds	r1, #1
 80086c2:	0089      	lsls	r1, r1, #2
 80086c4:	3414      	adds	r4, #20
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	1841      	adds	r1, r0, r1
 80086ca:	18e3      	adds	r3, r4, r3
 80086cc:	42a3      	cmp	r3, r4
 80086ce:	d80d      	bhi.n	80086ec <__copybits+0x38>
 80086d0:	0014      	movs	r4, r2
 80086d2:	3411      	adds	r4, #17
 80086d4:	2500      	movs	r5, #0
 80086d6:	429c      	cmp	r4, r3
 80086d8:	d803      	bhi.n	80086e2 <__copybits+0x2e>
 80086da:	1a9b      	subs	r3, r3, r2
 80086dc:	3b11      	subs	r3, #17
 80086de:	089b      	lsrs	r3, r3, #2
 80086e0:	009d      	lsls	r5, r3, #2
 80086e2:	2300      	movs	r3, #0
 80086e4:	1940      	adds	r0, r0, r5
 80086e6:	4281      	cmp	r1, r0
 80086e8:	d803      	bhi.n	80086f2 <__copybits+0x3e>
 80086ea:	bd70      	pop	{r4, r5, r6, pc}
 80086ec:	cc40      	ldmia	r4!, {r6}
 80086ee:	c540      	stmia	r5!, {r6}
 80086f0:	e7ec      	b.n	80086cc <__copybits+0x18>
 80086f2:	c008      	stmia	r0!, {r3}
 80086f4:	e7f7      	b.n	80086e6 <__copybits+0x32>

080086f6 <__any_on>:
 80086f6:	0002      	movs	r2, r0
 80086f8:	6900      	ldr	r0, [r0, #16]
 80086fa:	b510      	push	{r4, lr}
 80086fc:	3214      	adds	r2, #20
 80086fe:	114b      	asrs	r3, r1, #5
 8008700:	4298      	cmp	r0, r3
 8008702:	db13      	blt.n	800872c <__any_on+0x36>
 8008704:	dd0c      	ble.n	8008720 <__any_on+0x2a>
 8008706:	241f      	movs	r4, #31
 8008708:	0008      	movs	r0, r1
 800870a:	4020      	ands	r0, r4
 800870c:	4221      	tst	r1, r4
 800870e:	d007      	beq.n	8008720 <__any_on+0x2a>
 8008710:	0099      	lsls	r1, r3, #2
 8008712:	588c      	ldr	r4, [r1, r2]
 8008714:	0021      	movs	r1, r4
 8008716:	40c1      	lsrs	r1, r0
 8008718:	4081      	lsls	r1, r0
 800871a:	2001      	movs	r0, #1
 800871c:	428c      	cmp	r4, r1
 800871e:	d104      	bne.n	800872a <__any_on+0x34>
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	18d3      	adds	r3, r2, r3
 8008724:	4293      	cmp	r3, r2
 8008726:	d803      	bhi.n	8008730 <__any_on+0x3a>
 8008728:	2000      	movs	r0, #0
 800872a:	bd10      	pop	{r4, pc}
 800872c:	0003      	movs	r3, r0
 800872e:	e7f7      	b.n	8008720 <__any_on+0x2a>
 8008730:	3b04      	subs	r3, #4
 8008732:	6819      	ldr	r1, [r3, #0]
 8008734:	2900      	cmp	r1, #0
 8008736:	d0f5      	beq.n	8008724 <__any_on+0x2e>
 8008738:	2001      	movs	r0, #1
 800873a:	e7f6      	b.n	800872a <__any_on+0x34>

0800873c <sulp>:
 800873c:	b570      	push	{r4, r5, r6, lr}
 800873e:	0016      	movs	r6, r2
 8008740:	000d      	movs	r5, r1
 8008742:	f7ff fec1 	bl	80084c8 <__ulp>
 8008746:	2e00      	cmp	r6, #0
 8008748:	d00d      	beq.n	8008766 <sulp+0x2a>
 800874a:	236b      	movs	r3, #107	@ 0x6b
 800874c:	006a      	lsls	r2, r5, #1
 800874e:	0d52      	lsrs	r2, r2, #21
 8008750:	1a9b      	subs	r3, r3, r2
 8008752:	2b00      	cmp	r3, #0
 8008754:	dd07      	ble.n	8008766 <sulp+0x2a>
 8008756:	2400      	movs	r4, #0
 8008758:	4a03      	ldr	r2, [pc, #12]	@ (8008768 <sulp+0x2c>)
 800875a:	051b      	lsls	r3, r3, #20
 800875c:	189d      	adds	r5, r3, r2
 800875e:	002b      	movs	r3, r5
 8008760:	0022      	movs	r2, r4
 8008762:	f7f9 f823 	bl	80017ac <__aeabi_dmul>
 8008766:	bd70      	pop	{r4, r5, r6, pc}
 8008768:	3ff00000 	.word	0x3ff00000

0800876c <_strtod_l>:
 800876c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800876e:	b0a3      	sub	sp, #140	@ 0x8c
 8008770:	921b      	str	r2, [sp, #108]	@ 0x6c
 8008772:	2200      	movs	r2, #0
 8008774:	2600      	movs	r6, #0
 8008776:	2700      	movs	r7, #0
 8008778:	9005      	str	r0, [sp, #20]
 800877a:	9109      	str	r1, [sp, #36]	@ 0x24
 800877c:	921e      	str	r2, [sp, #120]	@ 0x78
 800877e:	911d      	str	r1, [sp, #116]	@ 0x74
 8008780:	780a      	ldrb	r2, [r1, #0]
 8008782:	2a2b      	cmp	r2, #43	@ 0x2b
 8008784:	d053      	beq.n	800882e <_strtod_l+0xc2>
 8008786:	d83f      	bhi.n	8008808 <_strtod_l+0x9c>
 8008788:	2a0d      	cmp	r2, #13
 800878a:	d839      	bhi.n	8008800 <_strtod_l+0x94>
 800878c:	2a08      	cmp	r2, #8
 800878e:	d839      	bhi.n	8008804 <_strtod_l+0x98>
 8008790:	2a00      	cmp	r2, #0
 8008792:	d042      	beq.n	800881a <_strtod_l+0xae>
 8008794:	2200      	movs	r2, #0
 8008796:	9212      	str	r2, [sp, #72]	@ 0x48
 8008798:	2100      	movs	r1, #0
 800879a:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 800879c:	910c      	str	r1, [sp, #48]	@ 0x30
 800879e:	782a      	ldrb	r2, [r5, #0]
 80087a0:	2a30      	cmp	r2, #48	@ 0x30
 80087a2:	d000      	beq.n	80087a6 <_strtod_l+0x3a>
 80087a4:	e083      	b.n	80088ae <_strtod_l+0x142>
 80087a6:	786a      	ldrb	r2, [r5, #1]
 80087a8:	3120      	adds	r1, #32
 80087aa:	438a      	bics	r2, r1
 80087ac:	2a58      	cmp	r2, #88	@ 0x58
 80087ae:	d000      	beq.n	80087b2 <_strtod_l+0x46>
 80087b0:	e073      	b.n	800889a <_strtod_l+0x12e>
 80087b2:	9302      	str	r3, [sp, #8]
 80087b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80087b6:	4a95      	ldr	r2, [pc, #596]	@ (8008a0c <_strtod_l+0x2a0>)
 80087b8:	9301      	str	r3, [sp, #4]
 80087ba:	ab1e      	add	r3, sp, #120	@ 0x78
 80087bc:	9300      	str	r3, [sp, #0]
 80087be:	9805      	ldr	r0, [sp, #20]
 80087c0:	ab1f      	add	r3, sp, #124	@ 0x7c
 80087c2:	a91d      	add	r1, sp, #116	@ 0x74
 80087c4:	f001 fb38 	bl	8009e38 <__gethex>
 80087c8:	230f      	movs	r3, #15
 80087ca:	0002      	movs	r2, r0
 80087cc:	401a      	ands	r2, r3
 80087ce:	0004      	movs	r4, r0
 80087d0:	9206      	str	r2, [sp, #24]
 80087d2:	4218      	tst	r0, r3
 80087d4:	d005      	beq.n	80087e2 <_strtod_l+0x76>
 80087d6:	2a06      	cmp	r2, #6
 80087d8:	d12b      	bne.n	8008832 <_strtod_l+0xc6>
 80087da:	2300      	movs	r3, #0
 80087dc:	3501      	adds	r5, #1
 80087de:	951d      	str	r5, [sp, #116]	@ 0x74
 80087e0:	9312      	str	r3, [sp, #72]	@ 0x48
 80087e2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d002      	beq.n	80087ee <_strtod_l+0x82>
 80087e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80087ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80087ec:	6013      	str	r3, [r2, #0]
 80087ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d019      	beq.n	8008828 <_strtod_l+0xbc>
 80087f4:	2380      	movs	r3, #128	@ 0x80
 80087f6:	0030      	movs	r0, r6
 80087f8:	061b      	lsls	r3, r3, #24
 80087fa:	18f9      	adds	r1, r7, r3
 80087fc:	b023      	add	sp, #140	@ 0x8c
 80087fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008800:	2a20      	cmp	r2, #32
 8008802:	d1c7      	bne.n	8008794 <_strtod_l+0x28>
 8008804:	3101      	adds	r1, #1
 8008806:	e7ba      	b.n	800877e <_strtod_l+0x12>
 8008808:	2a2d      	cmp	r2, #45	@ 0x2d
 800880a:	d1c3      	bne.n	8008794 <_strtod_l+0x28>
 800880c:	3a2c      	subs	r2, #44	@ 0x2c
 800880e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008810:	1c4a      	adds	r2, r1, #1
 8008812:	921d      	str	r2, [sp, #116]	@ 0x74
 8008814:	784a      	ldrb	r2, [r1, #1]
 8008816:	2a00      	cmp	r2, #0
 8008818:	d1be      	bne.n	8008798 <_strtod_l+0x2c>
 800881a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800881c:	931d      	str	r3, [sp, #116]	@ 0x74
 800881e:	2300      	movs	r3, #0
 8008820:	9312      	str	r3, [sp, #72]	@ 0x48
 8008822:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1df      	bne.n	80087e8 <_strtod_l+0x7c>
 8008828:	0030      	movs	r0, r6
 800882a:	0039      	movs	r1, r7
 800882c:	e7e6      	b.n	80087fc <_strtod_l+0x90>
 800882e:	2200      	movs	r2, #0
 8008830:	e7ed      	b.n	800880e <_strtod_l+0xa2>
 8008832:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8008834:	2a00      	cmp	r2, #0
 8008836:	d007      	beq.n	8008848 <_strtod_l+0xdc>
 8008838:	2135      	movs	r1, #53	@ 0x35
 800883a:	a820      	add	r0, sp, #128	@ 0x80
 800883c:	f7ff ff3a 	bl	80086b4 <__copybits>
 8008840:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008842:	9805      	ldr	r0, [sp, #20]
 8008844:	f7ff faf4 	bl	8007e30 <_Bfree>
 8008848:	9806      	ldr	r0, [sp, #24]
 800884a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800884c:	3801      	subs	r0, #1
 800884e:	2804      	cmp	r0, #4
 8008850:	d806      	bhi.n	8008860 <_strtod_l+0xf4>
 8008852:	f7f7 fc61 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008856:	0312      	.short	0x0312
 8008858:	1e1c      	.short	0x1e1c
 800885a:	12          	.byte	0x12
 800885b:	00          	.byte	0x00
 800885c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800885e:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8008860:	05e4      	lsls	r4, r4, #23
 8008862:	d502      	bpl.n	800886a <_strtod_l+0xfe>
 8008864:	2380      	movs	r3, #128	@ 0x80
 8008866:	061b      	lsls	r3, r3, #24
 8008868:	431f      	orrs	r7, r3
 800886a:	4b69      	ldr	r3, [pc, #420]	@ (8008a10 <_strtod_l+0x2a4>)
 800886c:	423b      	tst	r3, r7
 800886e:	d1b8      	bne.n	80087e2 <_strtod_l+0x76>
 8008870:	f7fe fad6 	bl	8006e20 <__errno>
 8008874:	2322      	movs	r3, #34	@ 0x22
 8008876:	6003      	str	r3, [r0, #0]
 8008878:	e7b3      	b.n	80087e2 <_strtod_l+0x76>
 800887a:	4966      	ldr	r1, [pc, #408]	@ (8008a14 <_strtod_l+0x2a8>)
 800887c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800887e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008880:	400a      	ands	r2, r1
 8008882:	4965      	ldr	r1, [pc, #404]	@ (8008a18 <_strtod_l+0x2ac>)
 8008884:	185b      	adds	r3, r3, r1
 8008886:	051b      	lsls	r3, r3, #20
 8008888:	431a      	orrs	r2, r3
 800888a:	0017      	movs	r7, r2
 800888c:	e7e8      	b.n	8008860 <_strtod_l+0xf4>
 800888e:	4f60      	ldr	r7, [pc, #384]	@ (8008a10 <_strtod_l+0x2a4>)
 8008890:	e7e6      	b.n	8008860 <_strtod_l+0xf4>
 8008892:	2601      	movs	r6, #1
 8008894:	4f61      	ldr	r7, [pc, #388]	@ (8008a1c <_strtod_l+0x2b0>)
 8008896:	4276      	negs	r6, r6
 8008898:	e7e2      	b.n	8008860 <_strtod_l+0xf4>
 800889a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800889c:	1c5a      	adds	r2, r3, #1
 800889e:	921d      	str	r2, [sp, #116]	@ 0x74
 80088a0:	785b      	ldrb	r3, [r3, #1]
 80088a2:	2b30      	cmp	r3, #48	@ 0x30
 80088a4:	d0f9      	beq.n	800889a <_strtod_l+0x12e>
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d09b      	beq.n	80087e2 <_strtod_l+0x76>
 80088aa:	2301      	movs	r3, #1
 80088ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80088ae:	2500      	movs	r5, #0
 80088b0:	220a      	movs	r2, #10
 80088b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80088b4:	950d      	str	r5, [sp, #52]	@ 0x34
 80088b6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80088b8:	9508      	str	r5, [sp, #32]
 80088ba:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80088bc:	7804      	ldrb	r4, [r0, #0]
 80088be:	0023      	movs	r3, r4
 80088c0:	3b30      	subs	r3, #48	@ 0x30
 80088c2:	b2d9      	uxtb	r1, r3
 80088c4:	2909      	cmp	r1, #9
 80088c6:	d927      	bls.n	8008918 <_strtod_l+0x1ac>
 80088c8:	2201      	movs	r2, #1
 80088ca:	4955      	ldr	r1, [pc, #340]	@ (8008a20 <_strtod_l+0x2b4>)
 80088cc:	f001 f9a8 	bl	8009c20 <strncmp>
 80088d0:	2800      	cmp	r0, #0
 80088d2:	d031      	beq.n	8008938 <_strtod_l+0x1cc>
 80088d4:	2000      	movs	r0, #0
 80088d6:	0023      	movs	r3, r4
 80088d8:	4684      	mov	ip, r0
 80088da:	9a08      	ldr	r2, [sp, #32]
 80088dc:	900e      	str	r0, [sp, #56]	@ 0x38
 80088de:	9206      	str	r2, [sp, #24]
 80088e0:	2220      	movs	r2, #32
 80088e2:	0019      	movs	r1, r3
 80088e4:	4391      	bics	r1, r2
 80088e6:	000a      	movs	r2, r1
 80088e8:	2100      	movs	r1, #0
 80088ea:	9107      	str	r1, [sp, #28]
 80088ec:	2a45      	cmp	r2, #69	@ 0x45
 80088ee:	d000      	beq.n	80088f2 <_strtod_l+0x186>
 80088f0:	e0c0      	b.n	8008a74 <_strtod_l+0x308>
 80088f2:	9b06      	ldr	r3, [sp, #24]
 80088f4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80088f6:	4303      	orrs	r3, r0
 80088f8:	4313      	orrs	r3, r2
 80088fa:	428b      	cmp	r3, r1
 80088fc:	d08d      	beq.n	800881a <_strtod_l+0xae>
 80088fe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008900:	9309      	str	r3, [sp, #36]	@ 0x24
 8008902:	3301      	adds	r3, #1
 8008904:	931d      	str	r3, [sp, #116]	@ 0x74
 8008906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008908:	785b      	ldrb	r3, [r3, #1]
 800890a:	2b2b      	cmp	r3, #43	@ 0x2b
 800890c:	d070      	beq.n	80089f0 <_strtod_l+0x284>
 800890e:	000c      	movs	r4, r1
 8008910:	2b2d      	cmp	r3, #45	@ 0x2d
 8008912:	d173      	bne.n	80089fc <_strtod_l+0x290>
 8008914:	2401      	movs	r4, #1
 8008916:	e06c      	b.n	80089f2 <_strtod_l+0x286>
 8008918:	9908      	ldr	r1, [sp, #32]
 800891a:	2908      	cmp	r1, #8
 800891c:	dc09      	bgt.n	8008932 <_strtod_l+0x1c6>
 800891e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008920:	4351      	muls	r1, r2
 8008922:	185b      	adds	r3, r3, r1
 8008924:	930d      	str	r3, [sp, #52]	@ 0x34
 8008926:	9b08      	ldr	r3, [sp, #32]
 8008928:	3001      	adds	r0, #1
 800892a:	3301      	adds	r3, #1
 800892c:	9308      	str	r3, [sp, #32]
 800892e:	901d      	str	r0, [sp, #116]	@ 0x74
 8008930:	e7c3      	b.n	80088ba <_strtod_l+0x14e>
 8008932:	4355      	muls	r5, r2
 8008934:	195d      	adds	r5, r3, r5
 8008936:	e7f6      	b.n	8008926 <_strtod_l+0x1ba>
 8008938:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800893a:	1c5a      	adds	r2, r3, #1
 800893c:	921d      	str	r2, [sp, #116]	@ 0x74
 800893e:	9a08      	ldr	r2, [sp, #32]
 8008940:	785b      	ldrb	r3, [r3, #1]
 8008942:	2a00      	cmp	r2, #0
 8008944:	d03a      	beq.n	80089bc <_strtod_l+0x250>
 8008946:	900e      	str	r0, [sp, #56]	@ 0x38
 8008948:	9206      	str	r2, [sp, #24]
 800894a:	001a      	movs	r2, r3
 800894c:	3a30      	subs	r2, #48	@ 0x30
 800894e:	2a09      	cmp	r2, #9
 8008950:	d912      	bls.n	8008978 <_strtod_l+0x20c>
 8008952:	2201      	movs	r2, #1
 8008954:	4694      	mov	ip, r2
 8008956:	e7c3      	b.n	80088e0 <_strtod_l+0x174>
 8008958:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800895a:	3001      	adds	r0, #1
 800895c:	1c5a      	adds	r2, r3, #1
 800895e:	921d      	str	r2, [sp, #116]	@ 0x74
 8008960:	785b      	ldrb	r3, [r3, #1]
 8008962:	2b30      	cmp	r3, #48	@ 0x30
 8008964:	d0f8      	beq.n	8008958 <_strtod_l+0x1ec>
 8008966:	001a      	movs	r2, r3
 8008968:	3a31      	subs	r2, #49	@ 0x31
 800896a:	2a08      	cmp	r2, #8
 800896c:	d83b      	bhi.n	80089e6 <_strtod_l+0x27a>
 800896e:	900e      	str	r0, [sp, #56]	@ 0x38
 8008970:	2000      	movs	r0, #0
 8008972:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8008974:	9006      	str	r0, [sp, #24]
 8008976:	9213      	str	r2, [sp, #76]	@ 0x4c
 8008978:	001a      	movs	r2, r3
 800897a:	1c41      	adds	r1, r0, #1
 800897c:	3a30      	subs	r2, #48	@ 0x30
 800897e:	2b30      	cmp	r3, #48	@ 0x30
 8008980:	d016      	beq.n	80089b0 <_strtod_l+0x244>
 8008982:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008984:	185b      	adds	r3, r3, r1
 8008986:	930e      	str	r3, [sp, #56]	@ 0x38
 8008988:	9b06      	ldr	r3, [sp, #24]
 800898a:	210a      	movs	r1, #10
 800898c:	469c      	mov	ip, r3
 800898e:	4484      	add	ip, r0
 8008990:	459c      	cmp	ip, r3
 8008992:	d115      	bne.n	80089c0 <_strtod_l+0x254>
 8008994:	9906      	ldr	r1, [sp, #24]
 8008996:	9b06      	ldr	r3, [sp, #24]
 8008998:	3101      	adds	r1, #1
 800899a:	1809      	adds	r1, r1, r0
 800899c:	181b      	adds	r3, r3, r0
 800899e:	9106      	str	r1, [sp, #24]
 80089a0:	2b08      	cmp	r3, #8
 80089a2:	dc19      	bgt.n	80089d8 <_strtod_l+0x26c>
 80089a4:	230a      	movs	r3, #10
 80089a6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80089a8:	434b      	muls	r3, r1
 80089aa:	2100      	movs	r1, #0
 80089ac:	18d3      	adds	r3, r2, r3
 80089ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80089b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80089b2:	0008      	movs	r0, r1
 80089b4:	1c5a      	adds	r2, r3, #1
 80089b6:	921d      	str	r2, [sp, #116]	@ 0x74
 80089b8:	785b      	ldrb	r3, [r3, #1]
 80089ba:	e7c6      	b.n	800894a <_strtod_l+0x1de>
 80089bc:	9808      	ldr	r0, [sp, #32]
 80089be:	e7d0      	b.n	8008962 <_strtod_l+0x1f6>
 80089c0:	1c5c      	adds	r4, r3, #1
 80089c2:	2b08      	cmp	r3, #8
 80089c4:	dc04      	bgt.n	80089d0 <_strtod_l+0x264>
 80089c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089c8:	434b      	muls	r3, r1
 80089ca:	930d      	str	r3, [sp, #52]	@ 0x34
 80089cc:	0023      	movs	r3, r4
 80089ce:	e7df      	b.n	8008990 <_strtod_l+0x224>
 80089d0:	2c10      	cmp	r4, #16
 80089d2:	dcfb      	bgt.n	80089cc <_strtod_l+0x260>
 80089d4:	434d      	muls	r5, r1
 80089d6:	e7f9      	b.n	80089cc <_strtod_l+0x260>
 80089d8:	2100      	movs	r1, #0
 80089da:	2b0f      	cmp	r3, #15
 80089dc:	dce8      	bgt.n	80089b0 <_strtod_l+0x244>
 80089de:	230a      	movs	r3, #10
 80089e0:	435d      	muls	r5, r3
 80089e2:	1955      	adds	r5, r2, r5
 80089e4:	e7e4      	b.n	80089b0 <_strtod_l+0x244>
 80089e6:	2200      	movs	r2, #0
 80089e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80089ea:	9206      	str	r2, [sp, #24]
 80089ec:	3201      	adds	r2, #1
 80089ee:	e7b1      	b.n	8008954 <_strtod_l+0x1e8>
 80089f0:	2400      	movs	r4, #0
 80089f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089f4:	3302      	adds	r3, #2
 80089f6:	931d      	str	r3, [sp, #116]	@ 0x74
 80089f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089fa:	789b      	ldrb	r3, [r3, #2]
 80089fc:	001a      	movs	r2, r3
 80089fe:	3a30      	subs	r2, #48	@ 0x30
 8008a00:	2a09      	cmp	r2, #9
 8008a02:	d913      	bls.n	8008a2c <_strtod_l+0x2c0>
 8008a04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a06:	921d      	str	r2, [sp, #116]	@ 0x74
 8008a08:	2200      	movs	r2, #0
 8008a0a:	e032      	b.n	8008a72 <_strtod_l+0x306>
 8008a0c:	0800a968 	.word	0x0800a968
 8008a10:	7ff00000 	.word	0x7ff00000
 8008a14:	ffefffff 	.word	0xffefffff
 8008a18:	00000433 	.word	0x00000433
 8008a1c:	7fffffff 	.word	0x7fffffff
 8008a20:	0800a950 	.word	0x0800a950
 8008a24:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008a26:	1c5a      	adds	r2, r3, #1
 8008a28:	921d      	str	r2, [sp, #116]	@ 0x74
 8008a2a:	785b      	ldrb	r3, [r3, #1]
 8008a2c:	2b30      	cmp	r3, #48	@ 0x30
 8008a2e:	d0f9      	beq.n	8008a24 <_strtod_l+0x2b8>
 8008a30:	2200      	movs	r2, #0
 8008a32:	9207      	str	r2, [sp, #28]
 8008a34:	001a      	movs	r2, r3
 8008a36:	3a31      	subs	r2, #49	@ 0x31
 8008a38:	2a08      	cmp	r2, #8
 8008a3a:	d81b      	bhi.n	8008a74 <_strtod_l+0x308>
 8008a3c:	3b30      	subs	r3, #48	@ 0x30
 8008a3e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008a40:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008a42:	9307      	str	r3, [sp, #28]
 8008a44:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008a46:	1c59      	adds	r1, r3, #1
 8008a48:	911d      	str	r1, [sp, #116]	@ 0x74
 8008a4a:	785b      	ldrb	r3, [r3, #1]
 8008a4c:	001a      	movs	r2, r3
 8008a4e:	3a30      	subs	r2, #48	@ 0x30
 8008a50:	2a09      	cmp	r2, #9
 8008a52:	d93a      	bls.n	8008aca <_strtod_l+0x35e>
 8008a54:	9a07      	ldr	r2, [sp, #28]
 8008a56:	1a8a      	subs	r2, r1, r2
 8008a58:	49b4      	ldr	r1, [pc, #720]	@ (8008d2c <_strtod_l+0x5c0>)
 8008a5a:	9107      	str	r1, [sp, #28]
 8008a5c:	2a08      	cmp	r2, #8
 8008a5e:	dc04      	bgt.n	8008a6a <_strtod_l+0x2fe>
 8008a60:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8008a62:	9207      	str	r2, [sp, #28]
 8008a64:	428a      	cmp	r2, r1
 8008a66:	dd00      	ble.n	8008a6a <_strtod_l+0x2fe>
 8008a68:	9107      	str	r1, [sp, #28]
 8008a6a:	2c00      	cmp	r4, #0
 8008a6c:	d002      	beq.n	8008a74 <_strtod_l+0x308>
 8008a6e:	9a07      	ldr	r2, [sp, #28]
 8008a70:	4252      	negs	r2, r2
 8008a72:	9207      	str	r2, [sp, #28]
 8008a74:	9a06      	ldr	r2, [sp, #24]
 8008a76:	2a00      	cmp	r2, #0
 8008a78:	d14d      	bne.n	8008b16 <_strtod_l+0x3aa>
 8008a7a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008a7c:	4310      	orrs	r0, r2
 8008a7e:	d000      	beq.n	8008a82 <_strtod_l+0x316>
 8008a80:	e6af      	b.n	80087e2 <_strtod_l+0x76>
 8008a82:	4662      	mov	r2, ip
 8008a84:	2a00      	cmp	r2, #0
 8008a86:	d000      	beq.n	8008a8a <_strtod_l+0x31e>
 8008a88:	e6c7      	b.n	800881a <_strtod_l+0xae>
 8008a8a:	2b69      	cmp	r3, #105	@ 0x69
 8008a8c:	d027      	beq.n	8008ade <_strtod_l+0x372>
 8008a8e:	dc23      	bgt.n	8008ad8 <_strtod_l+0x36c>
 8008a90:	2b49      	cmp	r3, #73	@ 0x49
 8008a92:	d024      	beq.n	8008ade <_strtod_l+0x372>
 8008a94:	2b4e      	cmp	r3, #78	@ 0x4e
 8008a96:	d000      	beq.n	8008a9a <_strtod_l+0x32e>
 8008a98:	e6bf      	b.n	800881a <_strtod_l+0xae>
 8008a9a:	49a5      	ldr	r1, [pc, #660]	@ (8008d30 <_strtod_l+0x5c4>)
 8008a9c:	a81d      	add	r0, sp, #116	@ 0x74
 8008a9e:	f001 fc01 	bl	800a2a4 <__match>
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	d100      	bne.n	8008aa8 <_strtod_l+0x33c>
 8008aa6:	e6b8      	b.n	800881a <_strtod_l+0xae>
 8008aa8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	2b28      	cmp	r3, #40	@ 0x28
 8008aae:	d12c      	bne.n	8008b0a <_strtod_l+0x39e>
 8008ab0:	49a0      	ldr	r1, [pc, #640]	@ (8008d34 <_strtod_l+0x5c8>)
 8008ab2:	aa20      	add	r2, sp, #128	@ 0x80
 8008ab4:	a81d      	add	r0, sp, #116	@ 0x74
 8008ab6:	f001 fc09 	bl	800a2cc <__hexnan>
 8008aba:	2805      	cmp	r0, #5
 8008abc:	d125      	bne.n	8008b0a <_strtod_l+0x39e>
 8008abe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008ac0:	4a9d      	ldr	r2, [pc, #628]	@ (8008d38 <_strtod_l+0x5cc>)
 8008ac2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008ac4:	431a      	orrs	r2, r3
 8008ac6:	0017      	movs	r7, r2
 8008ac8:	e68b      	b.n	80087e2 <_strtod_l+0x76>
 8008aca:	220a      	movs	r2, #10
 8008acc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8008ace:	434a      	muls	r2, r1
 8008ad0:	18d2      	adds	r2, r2, r3
 8008ad2:	3a30      	subs	r2, #48	@ 0x30
 8008ad4:	9210      	str	r2, [sp, #64]	@ 0x40
 8008ad6:	e7b5      	b.n	8008a44 <_strtod_l+0x2d8>
 8008ad8:	2b6e      	cmp	r3, #110	@ 0x6e
 8008ada:	d0de      	beq.n	8008a9a <_strtod_l+0x32e>
 8008adc:	e69d      	b.n	800881a <_strtod_l+0xae>
 8008ade:	4997      	ldr	r1, [pc, #604]	@ (8008d3c <_strtod_l+0x5d0>)
 8008ae0:	a81d      	add	r0, sp, #116	@ 0x74
 8008ae2:	f001 fbdf 	bl	800a2a4 <__match>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d100      	bne.n	8008aec <_strtod_l+0x380>
 8008aea:	e696      	b.n	800881a <_strtod_l+0xae>
 8008aec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008aee:	4994      	ldr	r1, [pc, #592]	@ (8008d40 <_strtod_l+0x5d4>)
 8008af0:	3b01      	subs	r3, #1
 8008af2:	a81d      	add	r0, sp, #116	@ 0x74
 8008af4:	931d      	str	r3, [sp, #116]	@ 0x74
 8008af6:	f001 fbd5 	bl	800a2a4 <__match>
 8008afa:	2800      	cmp	r0, #0
 8008afc:	d102      	bne.n	8008b04 <_strtod_l+0x398>
 8008afe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008b00:	3301      	adds	r3, #1
 8008b02:	931d      	str	r3, [sp, #116]	@ 0x74
 8008b04:	2600      	movs	r6, #0
 8008b06:	4f8c      	ldr	r7, [pc, #560]	@ (8008d38 <_strtod_l+0x5cc>)
 8008b08:	e66b      	b.n	80087e2 <_strtod_l+0x76>
 8008b0a:	488e      	ldr	r0, [pc, #568]	@ (8008d44 <_strtod_l+0x5d8>)
 8008b0c:	f001 f8da 	bl	8009cc4 <nan>
 8008b10:	0006      	movs	r6, r0
 8008b12:	000f      	movs	r7, r1
 8008b14:	e665      	b.n	80087e2 <_strtod_l+0x76>
 8008b16:	9b07      	ldr	r3, [sp, #28]
 8008b18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b1a:	1a9b      	subs	r3, r3, r2
 8008b1c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b1e:	9b08      	ldr	r3, [sp, #32]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d101      	bne.n	8008b28 <_strtod_l+0x3bc>
 8008b24:	9b06      	ldr	r3, [sp, #24]
 8008b26:	9308      	str	r3, [sp, #32]
 8008b28:	9c06      	ldr	r4, [sp, #24]
 8008b2a:	2c10      	cmp	r4, #16
 8008b2c:	dd00      	ble.n	8008b30 <_strtod_l+0x3c4>
 8008b2e:	2410      	movs	r4, #16
 8008b30:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008b32:	f7f9 fd2b 	bl	800258c <__aeabi_ui2d>
 8008b36:	9b06      	ldr	r3, [sp, #24]
 8008b38:	0006      	movs	r6, r0
 8008b3a:	000f      	movs	r7, r1
 8008b3c:	2b09      	cmp	r3, #9
 8008b3e:	dc13      	bgt.n	8008b68 <_strtod_l+0x3fc>
 8008b40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d100      	bne.n	8008b48 <_strtod_l+0x3dc>
 8008b46:	e64c      	b.n	80087e2 <_strtod_l+0x76>
 8008b48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	dc00      	bgt.n	8008b50 <_strtod_l+0x3e4>
 8008b4e:	e07e      	b.n	8008c4e <_strtod_l+0x4e2>
 8008b50:	2b16      	cmp	r3, #22
 8008b52:	dc63      	bgt.n	8008c1c <_strtod_l+0x4b0>
 8008b54:	497c      	ldr	r1, [pc, #496]	@ (8008d48 <_strtod_l+0x5dc>)
 8008b56:	00db      	lsls	r3, r3, #3
 8008b58:	18c9      	adds	r1, r1, r3
 8008b5a:	0032      	movs	r2, r6
 8008b5c:	6808      	ldr	r0, [r1, #0]
 8008b5e:	6849      	ldr	r1, [r1, #4]
 8008b60:	003b      	movs	r3, r7
 8008b62:	f7f8 fe23 	bl	80017ac <__aeabi_dmul>
 8008b66:	e7d3      	b.n	8008b10 <_strtod_l+0x3a4>
 8008b68:	0022      	movs	r2, r4
 8008b6a:	4b77      	ldr	r3, [pc, #476]	@ (8008d48 <_strtod_l+0x5dc>)
 8008b6c:	3a09      	subs	r2, #9
 8008b6e:	00d2      	lsls	r2, r2, #3
 8008b70:	189b      	adds	r3, r3, r2
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	f7f8 fe19 	bl	80017ac <__aeabi_dmul>
 8008b7a:	0006      	movs	r6, r0
 8008b7c:	0028      	movs	r0, r5
 8008b7e:	000f      	movs	r7, r1
 8008b80:	f7f9 fd04 	bl	800258c <__aeabi_ui2d>
 8008b84:	000b      	movs	r3, r1
 8008b86:	0002      	movs	r2, r0
 8008b88:	0039      	movs	r1, r7
 8008b8a:	0030      	movs	r0, r6
 8008b8c:	f7f7 fe66 	bl	800085c <__aeabi_dadd>
 8008b90:	9b06      	ldr	r3, [sp, #24]
 8008b92:	0006      	movs	r6, r0
 8008b94:	000f      	movs	r7, r1
 8008b96:	2b0f      	cmp	r3, #15
 8008b98:	ddd2      	ble.n	8008b40 <_strtod_l+0x3d4>
 8008b9a:	9b06      	ldr	r3, [sp, #24]
 8008b9c:	1b1c      	subs	r4, r3, r4
 8008b9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008ba0:	18e4      	adds	r4, r4, r3
 8008ba2:	2c00      	cmp	r4, #0
 8008ba4:	dc00      	bgt.n	8008ba8 <_strtod_l+0x43c>
 8008ba6:	e09b      	b.n	8008ce0 <_strtod_l+0x574>
 8008ba8:	220f      	movs	r2, #15
 8008baa:	0023      	movs	r3, r4
 8008bac:	4013      	ands	r3, r2
 8008bae:	4214      	tst	r4, r2
 8008bb0:	d00a      	beq.n	8008bc8 <_strtod_l+0x45c>
 8008bb2:	4965      	ldr	r1, [pc, #404]	@ (8008d48 <_strtod_l+0x5dc>)
 8008bb4:	00db      	lsls	r3, r3, #3
 8008bb6:	18c9      	adds	r1, r1, r3
 8008bb8:	0032      	movs	r2, r6
 8008bba:	6808      	ldr	r0, [r1, #0]
 8008bbc:	6849      	ldr	r1, [r1, #4]
 8008bbe:	003b      	movs	r3, r7
 8008bc0:	f7f8 fdf4 	bl	80017ac <__aeabi_dmul>
 8008bc4:	0006      	movs	r6, r0
 8008bc6:	000f      	movs	r7, r1
 8008bc8:	230f      	movs	r3, #15
 8008bca:	439c      	bics	r4, r3
 8008bcc:	d073      	beq.n	8008cb6 <_strtod_l+0x54a>
 8008bce:	3326      	adds	r3, #38	@ 0x26
 8008bd0:	33ff      	adds	r3, #255	@ 0xff
 8008bd2:	429c      	cmp	r4, r3
 8008bd4:	dd4b      	ble.n	8008c6e <_strtod_l+0x502>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	9306      	str	r3, [sp, #24]
 8008bda:	9307      	str	r3, [sp, #28]
 8008bdc:	930d      	str	r3, [sp, #52]	@ 0x34
 8008bde:	9308      	str	r3, [sp, #32]
 8008be0:	2322      	movs	r3, #34	@ 0x22
 8008be2:	2600      	movs	r6, #0
 8008be4:	9a05      	ldr	r2, [sp, #20]
 8008be6:	4f54      	ldr	r7, [pc, #336]	@ (8008d38 <_strtod_l+0x5cc>)
 8008be8:	6013      	str	r3, [r2, #0]
 8008bea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008bec:	42b3      	cmp	r3, r6
 8008bee:	d100      	bne.n	8008bf2 <_strtod_l+0x486>
 8008bf0:	e5f7      	b.n	80087e2 <_strtod_l+0x76>
 8008bf2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008bf4:	9805      	ldr	r0, [sp, #20]
 8008bf6:	f7ff f91b 	bl	8007e30 <_Bfree>
 8008bfa:	9908      	ldr	r1, [sp, #32]
 8008bfc:	9805      	ldr	r0, [sp, #20]
 8008bfe:	f7ff f917 	bl	8007e30 <_Bfree>
 8008c02:	9907      	ldr	r1, [sp, #28]
 8008c04:	9805      	ldr	r0, [sp, #20]
 8008c06:	f7ff f913 	bl	8007e30 <_Bfree>
 8008c0a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008c0c:	9805      	ldr	r0, [sp, #20]
 8008c0e:	f7ff f90f 	bl	8007e30 <_Bfree>
 8008c12:	9906      	ldr	r1, [sp, #24]
 8008c14:	9805      	ldr	r0, [sp, #20]
 8008c16:	f7ff f90b 	bl	8007e30 <_Bfree>
 8008c1a:	e5e2      	b.n	80087e2 <_strtod_l+0x76>
 8008c1c:	2325      	movs	r3, #37	@ 0x25
 8008c1e:	9a06      	ldr	r2, [sp, #24]
 8008c20:	1a9b      	subs	r3, r3, r2
 8008c22:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008c24:	4293      	cmp	r3, r2
 8008c26:	dbb8      	blt.n	8008b9a <_strtod_l+0x42e>
 8008c28:	240f      	movs	r4, #15
 8008c2a:	9b06      	ldr	r3, [sp, #24]
 8008c2c:	4d46      	ldr	r5, [pc, #280]	@ (8008d48 <_strtod_l+0x5dc>)
 8008c2e:	1ae4      	subs	r4, r4, r3
 8008c30:	00e1      	lsls	r1, r4, #3
 8008c32:	1869      	adds	r1, r5, r1
 8008c34:	0032      	movs	r2, r6
 8008c36:	6808      	ldr	r0, [r1, #0]
 8008c38:	6849      	ldr	r1, [r1, #4]
 8008c3a:	003b      	movs	r3, r7
 8008c3c:	f7f8 fdb6 	bl	80017ac <__aeabi_dmul>
 8008c40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c42:	1b1c      	subs	r4, r3, r4
 8008c44:	00e4      	lsls	r4, r4, #3
 8008c46:	192d      	adds	r5, r5, r4
 8008c48:	682a      	ldr	r2, [r5, #0]
 8008c4a:	686b      	ldr	r3, [r5, #4]
 8008c4c:	e789      	b.n	8008b62 <_strtod_l+0x3f6>
 8008c4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c50:	3316      	adds	r3, #22
 8008c52:	dba2      	blt.n	8008b9a <_strtod_l+0x42e>
 8008c54:	9907      	ldr	r1, [sp, #28]
 8008c56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c58:	4b3b      	ldr	r3, [pc, #236]	@ (8008d48 <_strtod_l+0x5dc>)
 8008c5a:	1a52      	subs	r2, r2, r1
 8008c5c:	00d2      	lsls	r2, r2, #3
 8008c5e:	189b      	adds	r3, r3, r2
 8008c60:	0030      	movs	r0, r6
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	0039      	movs	r1, r7
 8008c68:	f7f8 f95c 	bl	8000f24 <__aeabi_ddiv>
 8008c6c:	e750      	b.n	8008b10 <_strtod_l+0x3a4>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	0030      	movs	r0, r6
 8008c72:	0039      	movs	r1, r7
 8008c74:	4d35      	ldr	r5, [pc, #212]	@ (8008d4c <_strtod_l+0x5e0>)
 8008c76:	1124      	asrs	r4, r4, #4
 8008c78:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c7a:	2c01      	cmp	r4, #1
 8008c7c:	dc1e      	bgt.n	8008cbc <_strtod_l+0x550>
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d001      	beq.n	8008c86 <_strtod_l+0x51a>
 8008c82:	0006      	movs	r6, r0
 8008c84:	000f      	movs	r7, r1
 8008c86:	4b32      	ldr	r3, [pc, #200]	@ (8008d50 <_strtod_l+0x5e4>)
 8008c88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c8a:	18ff      	adds	r7, r7, r3
 8008c8c:	4b2f      	ldr	r3, [pc, #188]	@ (8008d4c <_strtod_l+0x5e0>)
 8008c8e:	00d5      	lsls	r5, r2, #3
 8008c90:	195d      	adds	r5, r3, r5
 8008c92:	0032      	movs	r2, r6
 8008c94:	6828      	ldr	r0, [r5, #0]
 8008c96:	6869      	ldr	r1, [r5, #4]
 8008c98:	003b      	movs	r3, r7
 8008c9a:	f7f8 fd87 	bl	80017ac <__aeabi_dmul>
 8008c9e:	4b26      	ldr	r3, [pc, #152]	@ (8008d38 <_strtod_l+0x5cc>)
 8008ca0:	4a2c      	ldr	r2, [pc, #176]	@ (8008d54 <_strtod_l+0x5e8>)
 8008ca2:	0006      	movs	r6, r0
 8008ca4:	400b      	ands	r3, r1
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d895      	bhi.n	8008bd6 <_strtod_l+0x46a>
 8008caa:	4a2b      	ldr	r2, [pc, #172]	@ (8008d58 <_strtod_l+0x5ec>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d913      	bls.n	8008cd8 <_strtod_l+0x56c>
 8008cb0:	2601      	movs	r6, #1
 8008cb2:	4f2a      	ldr	r7, [pc, #168]	@ (8008d5c <_strtod_l+0x5f0>)
 8008cb4:	4276      	negs	r6, r6
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cba:	e086      	b.n	8008dca <_strtod_l+0x65e>
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	4214      	tst	r4, r2
 8008cc0:	d004      	beq.n	8008ccc <_strtod_l+0x560>
 8008cc2:	682a      	ldr	r2, [r5, #0]
 8008cc4:	686b      	ldr	r3, [r5, #4]
 8008cc6:	f7f8 fd71 	bl	80017ac <__aeabi_dmul>
 8008cca:	2301      	movs	r3, #1
 8008ccc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cce:	1064      	asrs	r4, r4, #1
 8008cd0:	3201      	adds	r2, #1
 8008cd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8008cd4:	3508      	adds	r5, #8
 8008cd6:	e7d0      	b.n	8008c7a <_strtod_l+0x50e>
 8008cd8:	23d4      	movs	r3, #212	@ 0xd4
 8008cda:	049b      	lsls	r3, r3, #18
 8008cdc:	18cf      	adds	r7, r1, r3
 8008cde:	e7ea      	b.n	8008cb6 <_strtod_l+0x54a>
 8008ce0:	2c00      	cmp	r4, #0
 8008ce2:	d0e8      	beq.n	8008cb6 <_strtod_l+0x54a>
 8008ce4:	4264      	negs	r4, r4
 8008ce6:	230f      	movs	r3, #15
 8008ce8:	0022      	movs	r2, r4
 8008cea:	401a      	ands	r2, r3
 8008cec:	421c      	tst	r4, r3
 8008cee:	d00a      	beq.n	8008d06 <_strtod_l+0x59a>
 8008cf0:	4b15      	ldr	r3, [pc, #84]	@ (8008d48 <_strtod_l+0x5dc>)
 8008cf2:	00d2      	lsls	r2, r2, #3
 8008cf4:	189b      	adds	r3, r3, r2
 8008cf6:	0030      	movs	r0, r6
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	0039      	movs	r1, r7
 8008cfe:	f7f8 f911 	bl	8000f24 <__aeabi_ddiv>
 8008d02:	0006      	movs	r6, r0
 8008d04:	000f      	movs	r7, r1
 8008d06:	1124      	asrs	r4, r4, #4
 8008d08:	d0d5      	beq.n	8008cb6 <_strtod_l+0x54a>
 8008d0a:	2c1f      	cmp	r4, #31
 8008d0c:	dd28      	ble.n	8008d60 <_strtod_l+0x5f4>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	9306      	str	r3, [sp, #24]
 8008d12:	9307      	str	r3, [sp, #28]
 8008d14:	930d      	str	r3, [sp, #52]	@ 0x34
 8008d16:	9308      	str	r3, [sp, #32]
 8008d18:	2322      	movs	r3, #34	@ 0x22
 8008d1a:	9a05      	ldr	r2, [sp, #20]
 8008d1c:	2600      	movs	r6, #0
 8008d1e:	6013      	str	r3, [r2, #0]
 8008d20:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d22:	2700      	movs	r7, #0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d000      	beq.n	8008d2a <_strtod_l+0x5be>
 8008d28:	e763      	b.n	8008bf2 <_strtod_l+0x486>
 8008d2a:	e55a      	b.n	80087e2 <_strtod_l+0x76>
 8008d2c:	00004e1f 	.word	0x00004e1f
 8008d30:	0800a741 	.word	0x0800a741
 8008d34:	0800a954 	.word	0x0800a954
 8008d38:	7ff00000 	.word	0x7ff00000
 8008d3c:	0800a739 	.word	0x0800a739
 8008d40:	0800a770 	.word	0x0800a770
 8008d44:	0800aafd 	.word	0x0800aafd
 8008d48:	0800a888 	.word	0x0800a888
 8008d4c:	0800a860 	.word	0x0800a860
 8008d50:	fcb00000 	.word	0xfcb00000
 8008d54:	7ca00000 	.word	0x7ca00000
 8008d58:	7c900000 	.word	0x7c900000
 8008d5c:	7fefffff 	.word	0x7fefffff
 8008d60:	2310      	movs	r3, #16
 8008d62:	0022      	movs	r2, r4
 8008d64:	401a      	ands	r2, r3
 8008d66:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d68:	421c      	tst	r4, r3
 8008d6a:	d001      	beq.n	8008d70 <_strtod_l+0x604>
 8008d6c:	335a      	adds	r3, #90	@ 0x5a
 8008d6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d70:	0030      	movs	r0, r6
 8008d72:	0039      	movs	r1, r7
 8008d74:	2300      	movs	r3, #0
 8008d76:	4dbf      	ldr	r5, [pc, #764]	@ (8009074 <_strtod_l+0x908>)
 8008d78:	2201      	movs	r2, #1
 8008d7a:	4214      	tst	r4, r2
 8008d7c:	d004      	beq.n	8008d88 <_strtod_l+0x61c>
 8008d7e:	682a      	ldr	r2, [r5, #0]
 8008d80:	686b      	ldr	r3, [r5, #4]
 8008d82:	f7f8 fd13 	bl	80017ac <__aeabi_dmul>
 8008d86:	2301      	movs	r3, #1
 8008d88:	1064      	asrs	r4, r4, #1
 8008d8a:	3508      	adds	r5, #8
 8008d8c:	2c00      	cmp	r4, #0
 8008d8e:	d1f3      	bne.n	8008d78 <_strtod_l+0x60c>
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d001      	beq.n	8008d98 <_strtod_l+0x62c>
 8008d94:	0006      	movs	r6, r0
 8008d96:	000f      	movs	r7, r1
 8008d98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00d      	beq.n	8008dba <_strtod_l+0x64e>
 8008d9e:	236b      	movs	r3, #107	@ 0x6b
 8008da0:	007a      	lsls	r2, r7, #1
 8008da2:	0d52      	lsrs	r2, r2, #21
 8008da4:	0039      	movs	r1, r7
 8008da6:	1a9b      	subs	r3, r3, r2
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	dd06      	ble.n	8008dba <_strtod_l+0x64e>
 8008dac:	2b1f      	cmp	r3, #31
 8008dae:	dd5a      	ble.n	8008e66 <_strtod_l+0x6fa>
 8008db0:	2600      	movs	r6, #0
 8008db2:	2b34      	cmp	r3, #52	@ 0x34
 8008db4:	dd50      	ble.n	8008e58 <_strtod_l+0x6ec>
 8008db6:	27dc      	movs	r7, #220	@ 0xdc
 8008db8:	04bf      	lsls	r7, r7, #18
 8008dba:	2200      	movs	r2, #0
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	0030      	movs	r0, r6
 8008dc0:	0039      	movs	r1, r7
 8008dc2:	f7f7 fb43 	bl	800044c <__aeabi_dcmpeq>
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	d1a1      	bne.n	8008d0e <_strtod_l+0x5a2>
 8008dca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008dcc:	9a08      	ldr	r2, [sp, #32]
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008dd2:	9b06      	ldr	r3, [sp, #24]
 8008dd4:	9805      	ldr	r0, [sp, #20]
 8008dd6:	f7ff f893 	bl	8007f00 <__s2b>
 8008dda:	900d      	str	r0, [sp, #52]	@ 0x34
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	d100      	bne.n	8008de2 <_strtod_l+0x676>
 8008de0:	e6f9      	b.n	8008bd6 <_strtod_l+0x46a>
 8008de2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008de4:	9907      	ldr	r1, [sp, #28]
 8008de6:	17da      	asrs	r2, r3, #31
 8008de8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dea:	1a5b      	subs	r3, r3, r1
 8008dec:	401a      	ands	r2, r3
 8008dee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008df0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008df2:	43db      	mvns	r3, r3
 8008df4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008df6:	17db      	asrs	r3, r3, #31
 8008df8:	401a      	ands	r2, r3
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	921a      	str	r2, [sp, #104]	@ 0x68
 8008dfe:	9306      	str	r3, [sp, #24]
 8008e00:	9307      	str	r3, [sp, #28]
 8008e02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e04:	9805      	ldr	r0, [sp, #20]
 8008e06:	6859      	ldr	r1, [r3, #4]
 8008e08:	f7fe ffce 	bl	8007da8 <_Balloc>
 8008e0c:	9008      	str	r0, [sp, #32]
 8008e0e:	2800      	cmp	r0, #0
 8008e10:	d100      	bne.n	8008e14 <_strtod_l+0x6a8>
 8008e12:	e6e5      	b.n	8008be0 <_strtod_l+0x474>
 8008e14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e16:	300c      	adds	r0, #12
 8008e18:	0019      	movs	r1, r3
 8008e1a:	691a      	ldr	r2, [r3, #16]
 8008e1c:	310c      	adds	r1, #12
 8008e1e:	3202      	adds	r2, #2
 8008e20:	0092      	lsls	r2, r2, #2
 8008e22:	f000 ff45 	bl	8009cb0 <memcpy>
 8008e26:	ab20      	add	r3, sp, #128	@ 0x80
 8008e28:	9301      	str	r3, [sp, #4]
 8008e2a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	0032      	movs	r2, r6
 8008e30:	003b      	movs	r3, r7
 8008e32:	9805      	ldr	r0, [sp, #20]
 8008e34:	9610      	str	r6, [sp, #64]	@ 0x40
 8008e36:	9711      	str	r7, [sp, #68]	@ 0x44
 8008e38:	f7ff fbb2 	bl	80085a0 <__d2b>
 8008e3c:	901e      	str	r0, [sp, #120]	@ 0x78
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	d100      	bne.n	8008e44 <_strtod_l+0x6d8>
 8008e42:	e6cd      	b.n	8008be0 <_strtod_l+0x474>
 8008e44:	2101      	movs	r1, #1
 8008e46:	9805      	ldr	r0, [sp, #20]
 8008e48:	f7ff f8f6 	bl	8008038 <__i2b>
 8008e4c:	9007      	str	r0, [sp, #28]
 8008e4e:	2800      	cmp	r0, #0
 8008e50:	d10e      	bne.n	8008e70 <_strtod_l+0x704>
 8008e52:	2300      	movs	r3, #0
 8008e54:	9307      	str	r3, [sp, #28]
 8008e56:	e6c3      	b.n	8008be0 <_strtod_l+0x474>
 8008e58:	234b      	movs	r3, #75	@ 0x4b
 8008e5a:	1a9a      	subs	r2, r3, r2
 8008e5c:	3b4c      	subs	r3, #76	@ 0x4c
 8008e5e:	4093      	lsls	r3, r2
 8008e60:	4019      	ands	r1, r3
 8008e62:	000f      	movs	r7, r1
 8008e64:	e7a9      	b.n	8008dba <_strtod_l+0x64e>
 8008e66:	2201      	movs	r2, #1
 8008e68:	4252      	negs	r2, r2
 8008e6a:	409a      	lsls	r2, r3
 8008e6c:	4016      	ands	r6, r2
 8008e6e:	e7a4      	b.n	8008dba <_strtod_l+0x64e>
 8008e70:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8008e72:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008e74:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8008e76:	1ad4      	subs	r4, r2, r3
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	db01      	blt.n	8008e80 <_strtod_l+0x714>
 8008e7c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8008e7e:	195d      	adds	r5, r3, r5
 8008e80:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008e82:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008e84:	1a5b      	subs	r3, r3, r1
 8008e86:	2136      	movs	r1, #54	@ 0x36
 8008e88:	189b      	adds	r3, r3, r2
 8008e8a:	1a8a      	subs	r2, r1, r2
 8008e8c:	497a      	ldr	r1, [pc, #488]	@ (8009078 <_strtod_l+0x90c>)
 8008e8e:	2001      	movs	r0, #1
 8008e90:	468c      	mov	ip, r1
 8008e92:	2100      	movs	r1, #0
 8008e94:	3b01      	subs	r3, #1
 8008e96:	9116      	str	r1, [sp, #88]	@ 0x58
 8008e98:	9014      	str	r0, [sp, #80]	@ 0x50
 8008e9a:	4563      	cmp	r3, ip
 8008e9c:	da06      	bge.n	8008eac <_strtod_l+0x740>
 8008e9e:	4661      	mov	r1, ip
 8008ea0:	1ac9      	subs	r1, r1, r3
 8008ea2:	1a52      	subs	r2, r2, r1
 8008ea4:	291f      	cmp	r1, #31
 8008ea6:	dc3f      	bgt.n	8008f28 <_strtod_l+0x7bc>
 8008ea8:	4088      	lsls	r0, r1
 8008eaa:	9014      	str	r0, [sp, #80]	@ 0x50
 8008eac:	18ab      	adds	r3, r5, r2
 8008eae:	930e      	str	r3, [sp, #56]	@ 0x38
 8008eb0:	18a4      	adds	r4, r4, r2
 8008eb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008eb6:	191c      	adds	r4, r3, r4
 8008eb8:	002b      	movs	r3, r5
 8008eba:	4295      	cmp	r5, r2
 8008ebc:	dd00      	ble.n	8008ec0 <_strtod_l+0x754>
 8008ebe:	0013      	movs	r3, r2
 8008ec0:	42a3      	cmp	r3, r4
 8008ec2:	dd00      	ble.n	8008ec6 <_strtod_l+0x75a>
 8008ec4:	0023      	movs	r3, r4
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	dd04      	ble.n	8008ed4 <_strtod_l+0x768>
 8008eca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ecc:	1ae4      	subs	r4, r4, r3
 8008ece:	1ad2      	subs	r2, r2, r3
 8008ed0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008ed2:	1aed      	subs	r5, r5, r3
 8008ed4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	dd16      	ble.n	8008f08 <_strtod_l+0x79c>
 8008eda:	001a      	movs	r2, r3
 8008edc:	9907      	ldr	r1, [sp, #28]
 8008ede:	9805      	ldr	r0, [sp, #20]
 8008ee0:	f7ff f974 	bl	80081cc <__pow5mult>
 8008ee4:	9007      	str	r0, [sp, #28]
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	d0b3      	beq.n	8008e52 <_strtod_l+0x6e6>
 8008eea:	0001      	movs	r1, r0
 8008eec:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8008eee:	9805      	ldr	r0, [sp, #20]
 8008ef0:	f7ff f8ba 	bl	8008068 <__multiply>
 8008ef4:	9013      	str	r0, [sp, #76]	@ 0x4c
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	d100      	bne.n	8008efc <_strtod_l+0x790>
 8008efa:	e671      	b.n	8008be0 <_strtod_l+0x474>
 8008efc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008efe:	9805      	ldr	r0, [sp, #20]
 8008f00:	f7fe ff96 	bl	8007e30 <_Bfree>
 8008f04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008f06:	931e      	str	r3, [sp, #120]	@ 0x78
 8008f08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	dc12      	bgt.n	8008f34 <_strtod_l+0x7c8>
 8008f0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	dd18      	ble.n	8008f46 <_strtod_l+0x7da>
 8008f14:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008f16:	9908      	ldr	r1, [sp, #32]
 8008f18:	9805      	ldr	r0, [sp, #20]
 8008f1a:	f7ff f957 	bl	80081cc <__pow5mult>
 8008f1e:	9008      	str	r0, [sp, #32]
 8008f20:	2800      	cmp	r0, #0
 8008f22:	d110      	bne.n	8008f46 <_strtod_l+0x7da>
 8008f24:	2300      	movs	r3, #0
 8008f26:	e65a      	b.n	8008bde <_strtod_l+0x472>
 8008f28:	4954      	ldr	r1, [pc, #336]	@ (800907c <_strtod_l+0x910>)
 8008f2a:	1acb      	subs	r3, r1, r3
 8008f2c:	0001      	movs	r1, r0
 8008f2e:	4099      	lsls	r1, r3
 8008f30:	9116      	str	r1, [sp, #88]	@ 0x58
 8008f32:	e7ba      	b.n	8008eaa <_strtod_l+0x73e>
 8008f34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f36:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008f38:	9805      	ldr	r0, [sp, #20]
 8008f3a:	f7ff f9a3 	bl	8008284 <__lshift>
 8008f3e:	901e      	str	r0, [sp, #120]	@ 0x78
 8008f40:	2800      	cmp	r0, #0
 8008f42:	d1e4      	bne.n	8008f0e <_strtod_l+0x7a2>
 8008f44:	e64c      	b.n	8008be0 <_strtod_l+0x474>
 8008f46:	2c00      	cmp	r4, #0
 8008f48:	dd07      	ble.n	8008f5a <_strtod_l+0x7ee>
 8008f4a:	0022      	movs	r2, r4
 8008f4c:	9908      	ldr	r1, [sp, #32]
 8008f4e:	9805      	ldr	r0, [sp, #20]
 8008f50:	f7ff f998 	bl	8008284 <__lshift>
 8008f54:	9008      	str	r0, [sp, #32]
 8008f56:	2800      	cmp	r0, #0
 8008f58:	d0e4      	beq.n	8008f24 <_strtod_l+0x7b8>
 8008f5a:	2d00      	cmp	r5, #0
 8008f5c:	dd08      	ble.n	8008f70 <_strtod_l+0x804>
 8008f5e:	002a      	movs	r2, r5
 8008f60:	9907      	ldr	r1, [sp, #28]
 8008f62:	9805      	ldr	r0, [sp, #20]
 8008f64:	f7ff f98e 	bl	8008284 <__lshift>
 8008f68:	9007      	str	r0, [sp, #28]
 8008f6a:	2800      	cmp	r0, #0
 8008f6c:	d100      	bne.n	8008f70 <_strtod_l+0x804>
 8008f6e:	e637      	b.n	8008be0 <_strtod_l+0x474>
 8008f70:	9a08      	ldr	r2, [sp, #32]
 8008f72:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008f74:	9805      	ldr	r0, [sp, #20]
 8008f76:	f7ff fa0d 	bl	8008394 <__mdiff>
 8008f7a:	9006      	str	r0, [sp, #24]
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	d100      	bne.n	8008f82 <_strtod_l+0x816>
 8008f80:	e62e      	b.n	8008be0 <_strtod_l+0x474>
 8008f82:	68c3      	ldr	r3, [r0, #12]
 8008f84:	9907      	ldr	r1, [sp, #28]
 8008f86:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008f88:	2300      	movs	r3, #0
 8008f8a:	60c3      	str	r3, [r0, #12]
 8008f8c:	f7ff f9e6 	bl	800835c <__mcmp>
 8008f90:	2800      	cmp	r0, #0
 8008f92:	da3b      	bge.n	800900c <_strtod_l+0x8a0>
 8008f94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008f96:	4333      	orrs	r3, r6
 8008f98:	d167      	bne.n	800906a <_strtod_l+0x8fe>
 8008f9a:	033b      	lsls	r3, r7, #12
 8008f9c:	d165      	bne.n	800906a <_strtod_l+0x8fe>
 8008f9e:	22d6      	movs	r2, #214	@ 0xd6
 8008fa0:	4b37      	ldr	r3, [pc, #220]	@ (8009080 <_strtod_l+0x914>)
 8008fa2:	04d2      	lsls	r2, r2, #19
 8008fa4:	403b      	ands	r3, r7
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d95f      	bls.n	800906a <_strtod_l+0x8fe>
 8008faa:	9b06      	ldr	r3, [sp, #24]
 8008fac:	695b      	ldr	r3, [r3, #20]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d103      	bne.n	8008fba <_strtod_l+0x84e>
 8008fb2:	9b06      	ldr	r3, [sp, #24]
 8008fb4:	691b      	ldr	r3, [r3, #16]
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	dd57      	ble.n	800906a <_strtod_l+0x8fe>
 8008fba:	9906      	ldr	r1, [sp, #24]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	9805      	ldr	r0, [sp, #20]
 8008fc0:	f7ff f960 	bl	8008284 <__lshift>
 8008fc4:	9907      	ldr	r1, [sp, #28]
 8008fc6:	9006      	str	r0, [sp, #24]
 8008fc8:	f7ff f9c8 	bl	800835c <__mcmp>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	dd4c      	ble.n	800906a <_strtod_l+0x8fe>
 8008fd0:	4b2b      	ldr	r3, [pc, #172]	@ (8009080 <_strtod_l+0x914>)
 8008fd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fd4:	403b      	ands	r3, r7
 8008fd6:	2a00      	cmp	r2, #0
 8008fd8:	d074      	beq.n	80090c4 <_strtod_l+0x958>
 8008fda:	22d6      	movs	r2, #214	@ 0xd6
 8008fdc:	04d2      	lsls	r2, r2, #19
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d870      	bhi.n	80090c4 <_strtod_l+0x958>
 8008fe2:	22dc      	movs	r2, #220	@ 0xdc
 8008fe4:	0492      	lsls	r2, r2, #18
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d800      	bhi.n	8008fec <_strtod_l+0x880>
 8008fea:	e695      	b.n	8008d18 <_strtod_l+0x5ac>
 8008fec:	0030      	movs	r0, r6
 8008fee:	0039      	movs	r1, r7
 8008ff0:	4b24      	ldr	r3, [pc, #144]	@ (8009084 <_strtod_l+0x918>)
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f7f8 fbda 	bl	80017ac <__aeabi_dmul>
 8008ff8:	4b21      	ldr	r3, [pc, #132]	@ (8009080 <_strtod_l+0x914>)
 8008ffa:	0006      	movs	r6, r0
 8008ffc:	000f      	movs	r7, r1
 8008ffe:	420b      	tst	r3, r1
 8009000:	d000      	beq.n	8009004 <_strtod_l+0x898>
 8009002:	e5f6      	b.n	8008bf2 <_strtod_l+0x486>
 8009004:	2322      	movs	r3, #34	@ 0x22
 8009006:	9a05      	ldr	r2, [sp, #20]
 8009008:	6013      	str	r3, [r2, #0]
 800900a:	e5f2      	b.n	8008bf2 <_strtod_l+0x486>
 800900c:	970e      	str	r7, [sp, #56]	@ 0x38
 800900e:	2800      	cmp	r0, #0
 8009010:	d175      	bne.n	80090fe <_strtod_l+0x992>
 8009012:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009014:	033b      	lsls	r3, r7, #12
 8009016:	0b1b      	lsrs	r3, r3, #12
 8009018:	2a00      	cmp	r2, #0
 800901a:	d039      	beq.n	8009090 <_strtod_l+0x924>
 800901c:	4a1a      	ldr	r2, [pc, #104]	@ (8009088 <_strtod_l+0x91c>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d138      	bne.n	8009094 <_strtod_l+0x928>
 8009022:	2101      	movs	r1, #1
 8009024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009026:	4249      	negs	r1, r1
 8009028:	0032      	movs	r2, r6
 800902a:	0008      	movs	r0, r1
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00b      	beq.n	8009048 <_strtod_l+0x8dc>
 8009030:	24d4      	movs	r4, #212	@ 0xd4
 8009032:	4b13      	ldr	r3, [pc, #76]	@ (8009080 <_strtod_l+0x914>)
 8009034:	0008      	movs	r0, r1
 8009036:	403b      	ands	r3, r7
 8009038:	04e4      	lsls	r4, r4, #19
 800903a:	42a3      	cmp	r3, r4
 800903c:	d804      	bhi.n	8009048 <_strtod_l+0x8dc>
 800903e:	306c      	adds	r0, #108	@ 0x6c
 8009040:	0d1b      	lsrs	r3, r3, #20
 8009042:	1ac3      	subs	r3, r0, r3
 8009044:	4099      	lsls	r1, r3
 8009046:	0008      	movs	r0, r1
 8009048:	4282      	cmp	r2, r0
 800904a:	d123      	bne.n	8009094 <_strtod_l+0x928>
 800904c:	4b0f      	ldr	r3, [pc, #60]	@ (800908c <_strtod_l+0x920>)
 800904e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009050:	4299      	cmp	r1, r3
 8009052:	d102      	bne.n	800905a <_strtod_l+0x8ee>
 8009054:	3201      	adds	r2, #1
 8009056:	d100      	bne.n	800905a <_strtod_l+0x8ee>
 8009058:	e5c2      	b.n	8008be0 <_strtod_l+0x474>
 800905a:	4b09      	ldr	r3, [pc, #36]	@ (8009080 <_strtod_l+0x914>)
 800905c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800905e:	2600      	movs	r6, #0
 8009060:	401a      	ands	r2, r3
 8009062:	0013      	movs	r3, r2
 8009064:	2280      	movs	r2, #128	@ 0x80
 8009066:	0352      	lsls	r2, r2, #13
 8009068:	189f      	adds	r7, r3, r2
 800906a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800906c:	2b00      	cmp	r3, #0
 800906e:	d1bd      	bne.n	8008fec <_strtod_l+0x880>
 8009070:	e5bf      	b.n	8008bf2 <_strtod_l+0x486>
 8009072:	46c0      	nop			@ (mov r8, r8)
 8009074:	0800a980 	.word	0x0800a980
 8009078:	fffffc02 	.word	0xfffffc02
 800907c:	fffffbe2 	.word	0xfffffbe2
 8009080:	7ff00000 	.word	0x7ff00000
 8009084:	39500000 	.word	0x39500000
 8009088:	000fffff 	.word	0x000fffff
 800908c:	7fefffff 	.word	0x7fefffff
 8009090:	4333      	orrs	r3, r6
 8009092:	d09d      	beq.n	8008fd0 <_strtod_l+0x864>
 8009094:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009096:	2b00      	cmp	r3, #0
 8009098:	d01c      	beq.n	80090d4 <_strtod_l+0x968>
 800909a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800909c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800909e:	4213      	tst	r3, r2
 80090a0:	d0e3      	beq.n	800906a <_strtod_l+0x8fe>
 80090a2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80090a4:	0030      	movs	r0, r6
 80090a6:	0039      	movs	r1, r7
 80090a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d016      	beq.n	80090dc <_strtod_l+0x970>
 80090ae:	f7ff fb45 	bl	800873c <sulp>
 80090b2:	0002      	movs	r2, r0
 80090b4:	000b      	movs	r3, r1
 80090b6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80090b8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80090ba:	f7f7 fbcf 	bl	800085c <__aeabi_dadd>
 80090be:	0006      	movs	r6, r0
 80090c0:	000f      	movs	r7, r1
 80090c2:	e7d2      	b.n	800906a <_strtod_l+0x8fe>
 80090c4:	2601      	movs	r6, #1
 80090c6:	4a92      	ldr	r2, [pc, #584]	@ (8009310 <_strtod_l+0xba4>)
 80090c8:	4276      	negs	r6, r6
 80090ca:	189b      	adds	r3, r3, r2
 80090cc:	4a91      	ldr	r2, [pc, #580]	@ (8009314 <_strtod_l+0xba8>)
 80090ce:	431a      	orrs	r2, r3
 80090d0:	0017      	movs	r7, r2
 80090d2:	e7ca      	b.n	800906a <_strtod_l+0x8fe>
 80090d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80090d6:	4233      	tst	r3, r6
 80090d8:	d0c7      	beq.n	800906a <_strtod_l+0x8fe>
 80090da:	e7e2      	b.n	80090a2 <_strtod_l+0x936>
 80090dc:	f7ff fb2e 	bl	800873c <sulp>
 80090e0:	0002      	movs	r2, r0
 80090e2:	000b      	movs	r3, r1
 80090e4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80090e6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80090e8:	f7f8 fe28 	bl	8001d3c <__aeabi_dsub>
 80090ec:	2200      	movs	r2, #0
 80090ee:	2300      	movs	r3, #0
 80090f0:	0006      	movs	r6, r0
 80090f2:	000f      	movs	r7, r1
 80090f4:	f7f7 f9aa 	bl	800044c <__aeabi_dcmpeq>
 80090f8:	2800      	cmp	r0, #0
 80090fa:	d0b6      	beq.n	800906a <_strtod_l+0x8fe>
 80090fc:	e60c      	b.n	8008d18 <_strtod_l+0x5ac>
 80090fe:	9907      	ldr	r1, [sp, #28]
 8009100:	9806      	ldr	r0, [sp, #24]
 8009102:	f7ff faad 	bl	8008660 <__ratio>
 8009106:	2380      	movs	r3, #128	@ 0x80
 8009108:	2200      	movs	r2, #0
 800910a:	05db      	lsls	r3, r3, #23
 800910c:	0004      	movs	r4, r0
 800910e:	000d      	movs	r5, r1
 8009110:	f7f7 f9ac 	bl	800046c <__aeabi_dcmple>
 8009114:	2800      	cmp	r0, #0
 8009116:	d06c      	beq.n	80091f2 <_strtod_l+0xa86>
 8009118:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800911a:	2b00      	cmp	r3, #0
 800911c:	d177      	bne.n	800920e <_strtod_l+0xaa2>
 800911e:	2e00      	cmp	r6, #0
 8009120:	d157      	bne.n	80091d2 <_strtod_l+0xa66>
 8009122:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009124:	031b      	lsls	r3, r3, #12
 8009126:	d15a      	bne.n	80091de <_strtod_l+0xa72>
 8009128:	2200      	movs	r2, #0
 800912a:	0020      	movs	r0, r4
 800912c:	0029      	movs	r1, r5
 800912e:	4b7a      	ldr	r3, [pc, #488]	@ (8009318 <_strtod_l+0xbac>)
 8009130:	f7f7 f992 	bl	8000458 <__aeabi_dcmplt>
 8009134:	2800      	cmp	r0, #0
 8009136:	d159      	bne.n	80091ec <_strtod_l+0xa80>
 8009138:	0020      	movs	r0, r4
 800913a:	0029      	movs	r1, r5
 800913c:	2200      	movs	r2, #0
 800913e:	4b77      	ldr	r3, [pc, #476]	@ (800931c <_strtod_l+0xbb0>)
 8009140:	f7f8 fb34 	bl	80017ac <__aeabi_dmul>
 8009144:	0004      	movs	r4, r0
 8009146:	000d      	movs	r5, r1
 8009148:	2380      	movs	r3, #128	@ 0x80
 800914a:	061b      	lsls	r3, r3, #24
 800914c:	18eb      	adds	r3, r5, r3
 800914e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009150:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009152:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009154:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009156:	9214      	str	r2, [sp, #80]	@ 0x50
 8009158:	9315      	str	r3, [sp, #84]	@ 0x54
 800915a:	4a71      	ldr	r2, [pc, #452]	@ (8009320 <_strtod_l+0xbb4>)
 800915c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800915e:	4013      	ands	r3, r2
 8009160:	9316      	str	r3, [sp, #88]	@ 0x58
 8009162:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009164:	4b6f      	ldr	r3, [pc, #444]	@ (8009324 <_strtod_l+0xbb8>)
 8009166:	429a      	cmp	r2, r3
 8009168:	d000      	beq.n	800916c <_strtod_l+0xa00>
 800916a:	e087      	b.n	800927c <_strtod_l+0xb10>
 800916c:	4a6e      	ldr	r2, [pc, #440]	@ (8009328 <_strtod_l+0xbbc>)
 800916e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009170:	4694      	mov	ip, r2
 8009172:	4463      	add	r3, ip
 8009174:	001f      	movs	r7, r3
 8009176:	0030      	movs	r0, r6
 8009178:	0019      	movs	r1, r3
 800917a:	f7ff f9a5 	bl	80084c8 <__ulp>
 800917e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009180:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009182:	f7f8 fb13 	bl	80017ac <__aeabi_dmul>
 8009186:	0032      	movs	r2, r6
 8009188:	003b      	movs	r3, r7
 800918a:	f7f7 fb67 	bl	800085c <__aeabi_dadd>
 800918e:	4a64      	ldr	r2, [pc, #400]	@ (8009320 <_strtod_l+0xbb4>)
 8009190:	4b66      	ldr	r3, [pc, #408]	@ (800932c <_strtod_l+0xbc0>)
 8009192:	0006      	movs	r6, r0
 8009194:	400a      	ands	r2, r1
 8009196:	429a      	cmp	r2, r3
 8009198:	d940      	bls.n	800921c <_strtod_l+0xab0>
 800919a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800919c:	4a64      	ldr	r2, [pc, #400]	@ (8009330 <_strtod_l+0xbc4>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d103      	bne.n	80091aa <_strtod_l+0xa3e>
 80091a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80091a4:	3301      	adds	r3, #1
 80091a6:	d100      	bne.n	80091aa <_strtod_l+0xa3e>
 80091a8:	e51a      	b.n	8008be0 <_strtod_l+0x474>
 80091aa:	2601      	movs	r6, #1
 80091ac:	4f60      	ldr	r7, [pc, #384]	@ (8009330 <_strtod_l+0xbc4>)
 80091ae:	4276      	negs	r6, r6
 80091b0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80091b2:	9805      	ldr	r0, [sp, #20]
 80091b4:	f7fe fe3c 	bl	8007e30 <_Bfree>
 80091b8:	9908      	ldr	r1, [sp, #32]
 80091ba:	9805      	ldr	r0, [sp, #20]
 80091bc:	f7fe fe38 	bl	8007e30 <_Bfree>
 80091c0:	9907      	ldr	r1, [sp, #28]
 80091c2:	9805      	ldr	r0, [sp, #20]
 80091c4:	f7fe fe34 	bl	8007e30 <_Bfree>
 80091c8:	9906      	ldr	r1, [sp, #24]
 80091ca:	9805      	ldr	r0, [sp, #20]
 80091cc:	f7fe fe30 	bl	8007e30 <_Bfree>
 80091d0:	e617      	b.n	8008e02 <_strtod_l+0x696>
 80091d2:	2e01      	cmp	r6, #1
 80091d4:	d103      	bne.n	80091de <_strtod_l+0xa72>
 80091d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d100      	bne.n	80091de <_strtod_l+0xa72>
 80091dc:	e59c      	b.n	8008d18 <_strtod_l+0x5ac>
 80091de:	2300      	movs	r3, #0
 80091e0:	4c54      	ldr	r4, [pc, #336]	@ (8009334 <_strtod_l+0xbc8>)
 80091e2:	4d4d      	ldr	r5, [pc, #308]	@ (8009318 <_strtod_l+0xbac>)
 80091e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80091e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80091e8:	2400      	movs	r4, #0
 80091ea:	e7b2      	b.n	8009152 <_strtod_l+0x9e6>
 80091ec:	2400      	movs	r4, #0
 80091ee:	4d4b      	ldr	r5, [pc, #300]	@ (800931c <_strtod_l+0xbb0>)
 80091f0:	e7aa      	b.n	8009148 <_strtod_l+0x9dc>
 80091f2:	0020      	movs	r0, r4
 80091f4:	0029      	movs	r1, r5
 80091f6:	4b49      	ldr	r3, [pc, #292]	@ (800931c <_strtod_l+0xbb0>)
 80091f8:	2200      	movs	r2, #0
 80091fa:	f7f8 fad7 	bl	80017ac <__aeabi_dmul>
 80091fe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009200:	0004      	movs	r4, r0
 8009202:	000d      	movs	r5, r1
 8009204:	2b00      	cmp	r3, #0
 8009206:	d09f      	beq.n	8009148 <_strtod_l+0x9dc>
 8009208:	940a      	str	r4, [sp, #40]	@ 0x28
 800920a:	950b      	str	r5, [sp, #44]	@ 0x2c
 800920c:	e7a1      	b.n	8009152 <_strtod_l+0x9e6>
 800920e:	2300      	movs	r3, #0
 8009210:	4c41      	ldr	r4, [pc, #260]	@ (8009318 <_strtod_l+0xbac>)
 8009212:	0025      	movs	r5, r4
 8009214:	930a      	str	r3, [sp, #40]	@ 0x28
 8009216:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009218:	001c      	movs	r4, r3
 800921a:	e79a      	b.n	8009152 <_strtod_l+0x9e6>
 800921c:	23d4      	movs	r3, #212	@ 0xd4
 800921e:	049b      	lsls	r3, r3, #18
 8009220:	18cf      	adds	r7, r1, r3
 8009222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009224:	9710      	str	r7, [sp, #64]	@ 0x40
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1c2      	bne.n	80091b0 <_strtod_l+0xa44>
 800922a:	4b3d      	ldr	r3, [pc, #244]	@ (8009320 <_strtod_l+0xbb4>)
 800922c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800922e:	403b      	ands	r3, r7
 8009230:	429a      	cmp	r2, r3
 8009232:	d1bd      	bne.n	80091b0 <_strtod_l+0xa44>
 8009234:	0020      	movs	r0, r4
 8009236:	0029      	movs	r1, r5
 8009238:	f7f7 f954 	bl	80004e4 <__aeabi_d2lz>
 800923c:	f7f7 f98c 	bl	8000558 <__aeabi_l2d>
 8009240:	0002      	movs	r2, r0
 8009242:	000b      	movs	r3, r1
 8009244:	0020      	movs	r0, r4
 8009246:	0029      	movs	r1, r5
 8009248:	f7f8 fd78 	bl	8001d3c <__aeabi_dsub>
 800924c:	033c      	lsls	r4, r7, #12
 800924e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009250:	0b24      	lsrs	r4, r4, #12
 8009252:	4334      	orrs	r4, r6
 8009254:	900e      	str	r0, [sp, #56]	@ 0x38
 8009256:	910f      	str	r1, [sp, #60]	@ 0x3c
 8009258:	4a37      	ldr	r2, [pc, #220]	@ (8009338 <_strtod_l+0xbcc>)
 800925a:	431c      	orrs	r4, r3
 800925c:	d052      	beq.n	8009304 <_strtod_l+0xb98>
 800925e:	4b37      	ldr	r3, [pc, #220]	@ (800933c <_strtod_l+0xbd0>)
 8009260:	f7f7 f8fa 	bl	8000458 <__aeabi_dcmplt>
 8009264:	2800      	cmp	r0, #0
 8009266:	d000      	beq.n	800926a <_strtod_l+0xafe>
 8009268:	e4c3      	b.n	8008bf2 <_strtod_l+0x486>
 800926a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800926c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800926e:	4a34      	ldr	r2, [pc, #208]	@ (8009340 <_strtod_l+0xbd4>)
 8009270:	4b2a      	ldr	r3, [pc, #168]	@ (800931c <_strtod_l+0xbb0>)
 8009272:	f7f7 f905 	bl	8000480 <__aeabi_dcmpgt>
 8009276:	2800      	cmp	r0, #0
 8009278:	d09a      	beq.n	80091b0 <_strtod_l+0xa44>
 800927a:	e4ba      	b.n	8008bf2 <_strtod_l+0x486>
 800927c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800927e:	2b00      	cmp	r3, #0
 8009280:	d02a      	beq.n	80092d8 <_strtod_l+0xb6c>
 8009282:	23d4      	movs	r3, #212	@ 0xd4
 8009284:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009286:	04db      	lsls	r3, r3, #19
 8009288:	429a      	cmp	r2, r3
 800928a:	d825      	bhi.n	80092d8 <_strtod_l+0xb6c>
 800928c:	0020      	movs	r0, r4
 800928e:	0029      	movs	r1, r5
 8009290:	4a2c      	ldr	r2, [pc, #176]	@ (8009344 <_strtod_l+0xbd8>)
 8009292:	4b2d      	ldr	r3, [pc, #180]	@ (8009348 <_strtod_l+0xbdc>)
 8009294:	f7f7 f8ea 	bl	800046c <__aeabi_dcmple>
 8009298:	2800      	cmp	r0, #0
 800929a:	d016      	beq.n	80092ca <_strtod_l+0xb5e>
 800929c:	0020      	movs	r0, r4
 800929e:	0029      	movs	r1, r5
 80092a0:	f7f7 f902 	bl	80004a8 <__aeabi_d2uiz>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d100      	bne.n	80092aa <_strtod_l+0xb3e>
 80092a8:	3001      	adds	r0, #1
 80092aa:	f7f9 f96f 	bl	800258c <__aeabi_ui2d>
 80092ae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80092b0:	0004      	movs	r4, r0
 80092b2:	000d      	movs	r5, r1
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d122      	bne.n	80092fe <_strtod_l+0xb92>
 80092b8:	2380      	movs	r3, #128	@ 0x80
 80092ba:	061b      	lsls	r3, r3, #24
 80092bc:	18cb      	adds	r3, r1, r3
 80092be:	9018      	str	r0, [sp, #96]	@ 0x60
 80092c0:	9319      	str	r3, [sp, #100]	@ 0x64
 80092c2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80092c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092c6:	9214      	str	r2, [sp, #80]	@ 0x50
 80092c8:	9315      	str	r3, [sp, #84]	@ 0x54
 80092ca:	22d6      	movs	r2, #214	@ 0xd6
 80092cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80092ce:	04d2      	lsls	r2, r2, #19
 80092d0:	189b      	adds	r3, r3, r2
 80092d2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80092d4:	1a9b      	subs	r3, r3, r2
 80092d6:	9315      	str	r3, [sp, #84]	@ 0x54
 80092d8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80092da:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80092dc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80092de:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 80092e0:	f7ff f8f2 	bl	80084c8 <__ulp>
 80092e4:	0002      	movs	r2, r0
 80092e6:	000b      	movs	r3, r1
 80092e8:	0030      	movs	r0, r6
 80092ea:	0039      	movs	r1, r7
 80092ec:	f7f8 fa5e 	bl	80017ac <__aeabi_dmul>
 80092f0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80092f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80092f4:	f7f7 fab2 	bl	800085c <__aeabi_dadd>
 80092f8:	0006      	movs	r6, r0
 80092fa:	000f      	movs	r7, r1
 80092fc:	e791      	b.n	8009222 <_strtod_l+0xab6>
 80092fe:	9418      	str	r4, [sp, #96]	@ 0x60
 8009300:	9519      	str	r5, [sp, #100]	@ 0x64
 8009302:	e7de      	b.n	80092c2 <_strtod_l+0xb56>
 8009304:	4b11      	ldr	r3, [pc, #68]	@ (800934c <_strtod_l+0xbe0>)
 8009306:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8009308:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800930a:	f7f7 f8a5 	bl	8000458 <__aeabi_dcmplt>
 800930e:	e7b2      	b.n	8009276 <_strtod_l+0xb0a>
 8009310:	fff00000 	.word	0xfff00000
 8009314:	000fffff 	.word	0x000fffff
 8009318:	3ff00000 	.word	0x3ff00000
 800931c:	3fe00000 	.word	0x3fe00000
 8009320:	7ff00000 	.word	0x7ff00000
 8009324:	7fe00000 	.word	0x7fe00000
 8009328:	fcb00000 	.word	0xfcb00000
 800932c:	7c9fffff 	.word	0x7c9fffff
 8009330:	7fefffff 	.word	0x7fefffff
 8009334:	bff00000 	.word	0xbff00000
 8009338:	94a03595 	.word	0x94a03595
 800933c:	3fdfffff 	.word	0x3fdfffff
 8009340:	35afe535 	.word	0x35afe535
 8009344:	ffc00000 	.word	0xffc00000
 8009348:	41dfffff 	.word	0x41dfffff
 800934c:	3fcfffff 	.word	0x3fcfffff

08009350 <_strtod_r>:
 8009350:	b510      	push	{r4, lr}
 8009352:	4b02      	ldr	r3, [pc, #8]	@ (800935c <_strtod_r+0xc>)
 8009354:	f7ff fa0a 	bl	800876c <_strtod_l>
 8009358:	bd10      	pop	{r4, pc}
 800935a:	46c0      	nop			@ (mov r8, r8)
 800935c:	20000068 	.word	0x20000068

08009360 <_strtol_l.constprop.0>:
 8009360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009362:	b085      	sub	sp, #20
 8009364:	0017      	movs	r7, r2
 8009366:	001e      	movs	r6, r3
 8009368:	9003      	str	r0, [sp, #12]
 800936a:	9101      	str	r1, [sp, #4]
 800936c:	2b24      	cmp	r3, #36	@ 0x24
 800936e:	d844      	bhi.n	80093fa <_strtol_l.constprop.0+0x9a>
 8009370:	000c      	movs	r4, r1
 8009372:	2b01      	cmp	r3, #1
 8009374:	d041      	beq.n	80093fa <_strtol_l.constprop.0+0x9a>
 8009376:	4b3d      	ldr	r3, [pc, #244]	@ (800946c <_strtol_l.constprop.0+0x10c>)
 8009378:	2208      	movs	r2, #8
 800937a:	469c      	mov	ip, r3
 800937c:	0023      	movs	r3, r4
 800937e:	4661      	mov	r1, ip
 8009380:	781d      	ldrb	r5, [r3, #0]
 8009382:	3401      	adds	r4, #1
 8009384:	5d48      	ldrb	r0, [r1, r5]
 8009386:	0001      	movs	r1, r0
 8009388:	4011      	ands	r1, r2
 800938a:	4210      	tst	r0, r2
 800938c:	d1f6      	bne.n	800937c <_strtol_l.constprop.0+0x1c>
 800938e:	2d2d      	cmp	r5, #45	@ 0x2d
 8009390:	d13a      	bne.n	8009408 <_strtol_l.constprop.0+0xa8>
 8009392:	7825      	ldrb	r5, [r4, #0]
 8009394:	1c9c      	adds	r4, r3, #2
 8009396:	2301      	movs	r3, #1
 8009398:	9300      	str	r3, [sp, #0]
 800939a:	2210      	movs	r2, #16
 800939c:	0033      	movs	r3, r6
 800939e:	4393      	bics	r3, r2
 80093a0:	d109      	bne.n	80093b6 <_strtol_l.constprop.0+0x56>
 80093a2:	2d30      	cmp	r5, #48	@ 0x30
 80093a4:	d136      	bne.n	8009414 <_strtol_l.constprop.0+0xb4>
 80093a6:	2120      	movs	r1, #32
 80093a8:	7823      	ldrb	r3, [r4, #0]
 80093aa:	438b      	bics	r3, r1
 80093ac:	2b58      	cmp	r3, #88	@ 0x58
 80093ae:	d131      	bne.n	8009414 <_strtol_l.constprop.0+0xb4>
 80093b0:	0016      	movs	r6, r2
 80093b2:	7865      	ldrb	r5, [r4, #1]
 80093b4:	3402      	adds	r4, #2
 80093b6:	4a2e      	ldr	r2, [pc, #184]	@ (8009470 <_strtol_l.constprop.0+0x110>)
 80093b8:	9b00      	ldr	r3, [sp, #0]
 80093ba:	4694      	mov	ip, r2
 80093bc:	4463      	add	r3, ip
 80093be:	0031      	movs	r1, r6
 80093c0:	0018      	movs	r0, r3
 80093c2:	9302      	str	r3, [sp, #8]
 80093c4:	f7f6 ff42 	bl	800024c <__aeabi_uidivmod>
 80093c8:	2200      	movs	r2, #0
 80093ca:	4684      	mov	ip, r0
 80093cc:	0010      	movs	r0, r2
 80093ce:	002b      	movs	r3, r5
 80093d0:	3b30      	subs	r3, #48	@ 0x30
 80093d2:	2b09      	cmp	r3, #9
 80093d4:	d825      	bhi.n	8009422 <_strtol_l.constprop.0+0xc2>
 80093d6:	001d      	movs	r5, r3
 80093d8:	42ae      	cmp	r6, r5
 80093da:	dd31      	ble.n	8009440 <_strtol_l.constprop.0+0xe0>
 80093dc:	1c53      	adds	r3, r2, #1
 80093de:	d009      	beq.n	80093f4 <_strtol_l.constprop.0+0x94>
 80093e0:	2201      	movs	r2, #1
 80093e2:	4252      	negs	r2, r2
 80093e4:	4584      	cmp	ip, r0
 80093e6:	d305      	bcc.n	80093f4 <_strtol_l.constprop.0+0x94>
 80093e8:	d101      	bne.n	80093ee <_strtol_l.constprop.0+0x8e>
 80093ea:	42a9      	cmp	r1, r5
 80093ec:	db25      	blt.n	800943a <_strtol_l.constprop.0+0xda>
 80093ee:	2201      	movs	r2, #1
 80093f0:	4370      	muls	r0, r6
 80093f2:	1828      	adds	r0, r5, r0
 80093f4:	7825      	ldrb	r5, [r4, #0]
 80093f6:	3401      	adds	r4, #1
 80093f8:	e7e9      	b.n	80093ce <_strtol_l.constprop.0+0x6e>
 80093fa:	f7fd fd11 	bl	8006e20 <__errno>
 80093fe:	2316      	movs	r3, #22
 8009400:	6003      	str	r3, [r0, #0]
 8009402:	2000      	movs	r0, #0
 8009404:	b005      	add	sp, #20
 8009406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009408:	9100      	str	r1, [sp, #0]
 800940a:	2d2b      	cmp	r5, #43	@ 0x2b
 800940c:	d1c5      	bne.n	800939a <_strtol_l.constprop.0+0x3a>
 800940e:	7825      	ldrb	r5, [r4, #0]
 8009410:	1c9c      	adds	r4, r3, #2
 8009412:	e7c2      	b.n	800939a <_strtol_l.constprop.0+0x3a>
 8009414:	2e00      	cmp	r6, #0
 8009416:	d1ce      	bne.n	80093b6 <_strtol_l.constprop.0+0x56>
 8009418:	3608      	adds	r6, #8
 800941a:	2d30      	cmp	r5, #48	@ 0x30
 800941c:	d0cb      	beq.n	80093b6 <_strtol_l.constprop.0+0x56>
 800941e:	3602      	adds	r6, #2
 8009420:	e7c9      	b.n	80093b6 <_strtol_l.constprop.0+0x56>
 8009422:	002b      	movs	r3, r5
 8009424:	3b41      	subs	r3, #65	@ 0x41
 8009426:	2b19      	cmp	r3, #25
 8009428:	d801      	bhi.n	800942e <_strtol_l.constprop.0+0xce>
 800942a:	3d37      	subs	r5, #55	@ 0x37
 800942c:	e7d4      	b.n	80093d8 <_strtol_l.constprop.0+0x78>
 800942e:	002b      	movs	r3, r5
 8009430:	3b61      	subs	r3, #97	@ 0x61
 8009432:	2b19      	cmp	r3, #25
 8009434:	d804      	bhi.n	8009440 <_strtol_l.constprop.0+0xe0>
 8009436:	3d57      	subs	r5, #87	@ 0x57
 8009438:	e7ce      	b.n	80093d8 <_strtol_l.constprop.0+0x78>
 800943a:	2201      	movs	r2, #1
 800943c:	4252      	negs	r2, r2
 800943e:	e7d9      	b.n	80093f4 <_strtol_l.constprop.0+0x94>
 8009440:	1c53      	adds	r3, r2, #1
 8009442:	d108      	bne.n	8009456 <_strtol_l.constprop.0+0xf6>
 8009444:	2322      	movs	r3, #34	@ 0x22
 8009446:	9a03      	ldr	r2, [sp, #12]
 8009448:	9802      	ldr	r0, [sp, #8]
 800944a:	6013      	str	r3, [r2, #0]
 800944c:	2f00      	cmp	r7, #0
 800944e:	d0d9      	beq.n	8009404 <_strtol_l.constprop.0+0xa4>
 8009450:	1e63      	subs	r3, r4, #1
 8009452:	9301      	str	r3, [sp, #4]
 8009454:	e007      	b.n	8009466 <_strtol_l.constprop.0+0x106>
 8009456:	9b00      	ldr	r3, [sp, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d000      	beq.n	800945e <_strtol_l.constprop.0+0xfe>
 800945c:	4240      	negs	r0, r0
 800945e:	2f00      	cmp	r7, #0
 8009460:	d0d0      	beq.n	8009404 <_strtol_l.constprop.0+0xa4>
 8009462:	2a00      	cmp	r2, #0
 8009464:	d1f4      	bne.n	8009450 <_strtol_l.constprop.0+0xf0>
 8009466:	9b01      	ldr	r3, [sp, #4]
 8009468:	603b      	str	r3, [r7, #0]
 800946a:	e7cb      	b.n	8009404 <_strtol_l.constprop.0+0xa4>
 800946c:	0800a9a9 	.word	0x0800a9a9
 8009470:	7fffffff 	.word	0x7fffffff

08009474 <_strtol_r>:
 8009474:	b510      	push	{r4, lr}
 8009476:	f7ff ff73 	bl	8009360 <_strtol_l.constprop.0>
 800947a:	bd10      	pop	{r4, pc}

0800947c <__ssputs_r>:
 800947c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800947e:	688e      	ldr	r6, [r1, #8]
 8009480:	b085      	sub	sp, #20
 8009482:	001f      	movs	r7, r3
 8009484:	000c      	movs	r4, r1
 8009486:	680b      	ldr	r3, [r1, #0]
 8009488:	9002      	str	r0, [sp, #8]
 800948a:	9203      	str	r2, [sp, #12]
 800948c:	42be      	cmp	r6, r7
 800948e:	d830      	bhi.n	80094f2 <__ssputs_r+0x76>
 8009490:	210c      	movs	r1, #12
 8009492:	5e62      	ldrsh	r2, [r4, r1]
 8009494:	2190      	movs	r1, #144	@ 0x90
 8009496:	00c9      	lsls	r1, r1, #3
 8009498:	420a      	tst	r2, r1
 800949a:	d028      	beq.n	80094ee <__ssputs_r+0x72>
 800949c:	2003      	movs	r0, #3
 800949e:	6921      	ldr	r1, [r4, #16]
 80094a0:	1a5b      	subs	r3, r3, r1
 80094a2:	9301      	str	r3, [sp, #4]
 80094a4:	6963      	ldr	r3, [r4, #20]
 80094a6:	4343      	muls	r3, r0
 80094a8:	9801      	ldr	r0, [sp, #4]
 80094aa:	0fdd      	lsrs	r5, r3, #31
 80094ac:	18ed      	adds	r5, r5, r3
 80094ae:	1c7b      	adds	r3, r7, #1
 80094b0:	181b      	adds	r3, r3, r0
 80094b2:	106d      	asrs	r5, r5, #1
 80094b4:	42ab      	cmp	r3, r5
 80094b6:	d900      	bls.n	80094ba <__ssputs_r+0x3e>
 80094b8:	001d      	movs	r5, r3
 80094ba:	0552      	lsls	r2, r2, #21
 80094bc:	d528      	bpl.n	8009510 <__ssputs_r+0x94>
 80094be:	0029      	movs	r1, r5
 80094c0:	9802      	ldr	r0, [sp, #8]
 80094c2:	f7fe fbe1 	bl	8007c88 <_malloc_r>
 80094c6:	1e06      	subs	r6, r0, #0
 80094c8:	d02c      	beq.n	8009524 <__ssputs_r+0xa8>
 80094ca:	9a01      	ldr	r2, [sp, #4]
 80094cc:	6921      	ldr	r1, [r4, #16]
 80094ce:	f000 fbef 	bl	8009cb0 <memcpy>
 80094d2:	89a2      	ldrh	r2, [r4, #12]
 80094d4:	4b18      	ldr	r3, [pc, #96]	@ (8009538 <__ssputs_r+0xbc>)
 80094d6:	401a      	ands	r2, r3
 80094d8:	2380      	movs	r3, #128	@ 0x80
 80094da:	4313      	orrs	r3, r2
 80094dc:	81a3      	strh	r3, [r4, #12]
 80094de:	9b01      	ldr	r3, [sp, #4]
 80094e0:	6126      	str	r6, [r4, #16]
 80094e2:	18f6      	adds	r6, r6, r3
 80094e4:	6026      	str	r6, [r4, #0]
 80094e6:	003e      	movs	r6, r7
 80094e8:	6165      	str	r5, [r4, #20]
 80094ea:	1aed      	subs	r5, r5, r3
 80094ec:	60a5      	str	r5, [r4, #8]
 80094ee:	42be      	cmp	r6, r7
 80094f0:	d900      	bls.n	80094f4 <__ssputs_r+0x78>
 80094f2:	003e      	movs	r6, r7
 80094f4:	0032      	movs	r2, r6
 80094f6:	9903      	ldr	r1, [sp, #12]
 80094f8:	6820      	ldr	r0, [r4, #0]
 80094fa:	f000 fb7e 	bl	8009bfa <memmove>
 80094fe:	2000      	movs	r0, #0
 8009500:	68a3      	ldr	r3, [r4, #8]
 8009502:	1b9b      	subs	r3, r3, r6
 8009504:	60a3      	str	r3, [r4, #8]
 8009506:	6823      	ldr	r3, [r4, #0]
 8009508:	199b      	adds	r3, r3, r6
 800950a:	6023      	str	r3, [r4, #0]
 800950c:	b005      	add	sp, #20
 800950e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009510:	002a      	movs	r2, r5
 8009512:	9802      	ldr	r0, [sp, #8]
 8009514:	f000 ff94 	bl	800a440 <_realloc_r>
 8009518:	1e06      	subs	r6, r0, #0
 800951a:	d1e0      	bne.n	80094de <__ssputs_r+0x62>
 800951c:	6921      	ldr	r1, [r4, #16]
 800951e:	9802      	ldr	r0, [sp, #8]
 8009520:	f7fe fb3c 	bl	8007b9c <_free_r>
 8009524:	230c      	movs	r3, #12
 8009526:	2001      	movs	r0, #1
 8009528:	9a02      	ldr	r2, [sp, #8]
 800952a:	4240      	negs	r0, r0
 800952c:	6013      	str	r3, [r2, #0]
 800952e:	89a2      	ldrh	r2, [r4, #12]
 8009530:	3334      	adds	r3, #52	@ 0x34
 8009532:	4313      	orrs	r3, r2
 8009534:	81a3      	strh	r3, [r4, #12]
 8009536:	e7e9      	b.n	800950c <__ssputs_r+0x90>
 8009538:	fffffb7f 	.word	0xfffffb7f

0800953c <_svfiprintf_r>:
 800953c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800953e:	b0a1      	sub	sp, #132	@ 0x84
 8009540:	9003      	str	r0, [sp, #12]
 8009542:	001d      	movs	r5, r3
 8009544:	898b      	ldrh	r3, [r1, #12]
 8009546:	000f      	movs	r7, r1
 8009548:	0016      	movs	r6, r2
 800954a:	061b      	lsls	r3, r3, #24
 800954c:	d511      	bpl.n	8009572 <_svfiprintf_r+0x36>
 800954e:	690b      	ldr	r3, [r1, #16]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d10e      	bne.n	8009572 <_svfiprintf_r+0x36>
 8009554:	2140      	movs	r1, #64	@ 0x40
 8009556:	f7fe fb97 	bl	8007c88 <_malloc_r>
 800955a:	6038      	str	r0, [r7, #0]
 800955c:	6138      	str	r0, [r7, #16]
 800955e:	2800      	cmp	r0, #0
 8009560:	d105      	bne.n	800956e <_svfiprintf_r+0x32>
 8009562:	230c      	movs	r3, #12
 8009564:	9a03      	ldr	r2, [sp, #12]
 8009566:	6013      	str	r3, [r2, #0]
 8009568:	2001      	movs	r0, #1
 800956a:	4240      	negs	r0, r0
 800956c:	e0cf      	b.n	800970e <_svfiprintf_r+0x1d2>
 800956e:	2340      	movs	r3, #64	@ 0x40
 8009570:	617b      	str	r3, [r7, #20]
 8009572:	2300      	movs	r3, #0
 8009574:	ac08      	add	r4, sp, #32
 8009576:	6163      	str	r3, [r4, #20]
 8009578:	3320      	adds	r3, #32
 800957a:	7663      	strb	r3, [r4, #25]
 800957c:	3310      	adds	r3, #16
 800957e:	76a3      	strb	r3, [r4, #26]
 8009580:	9507      	str	r5, [sp, #28]
 8009582:	0035      	movs	r5, r6
 8009584:	782b      	ldrb	r3, [r5, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <_svfiprintf_r+0x52>
 800958a:	2b25      	cmp	r3, #37	@ 0x25
 800958c:	d148      	bne.n	8009620 <_svfiprintf_r+0xe4>
 800958e:	1bab      	subs	r3, r5, r6
 8009590:	9305      	str	r3, [sp, #20]
 8009592:	42b5      	cmp	r5, r6
 8009594:	d00b      	beq.n	80095ae <_svfiprintf_r+0x72>
 8009596:	0032      	movs	r2, r6
 8009598:	0039      	movs	r1, r7
 800959a:	9803      	ldr	r0, [sp, #12]
 800959c:	f7ff ff6e 	bl	800947c <__ssputs_r>
 80095a0:	3001      	adds	r0, #1
 80095a2:	d100      	bne.n	80095a6 <_svfiprintf_r+0x6a>
 80095a4:	e0ae      	b.n	8009704 <_svfiprintf_r+0x1c8>
 80095a6:	6963      	ldr	r3, [r4, #20]
 80095a8:	9a05      	ldr	r2, [sp, #20]
 80095aa:	189b      	adds	r3, r3, r2
 80095ac:	6163      	str	r3, [r4, #20]
 80095ae:	782b      	ldrb	r3, [r5, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d100      	bne.n	80095b6 <_svfiprintf_r+0x7a>
 80095b4:	e0a6      	b.n	8009704 <_svfiprintf_r+0x1c8>
 80095b6:	2201      	movs	r2, #1
 80095b8:	2300      	movs	r3, #0
 80095ba:	4252      	negs	r2, r2
 80095bc:	6062      	str	r2, [r4, #4]
 80095be:	a904      	add	r1, sp, #16
 80095c0:	3254      	adds	r2, #84	@ 0x54
 80095c2:	1852      	adds	r2, r2, r1
 80095c4:	1c6e      	adds	r6, r5, #1
 80095c6:	6023      	str	r3, [r4, #0]
 80095c8:	60e3      	str	r3, [r4, #12]
 80095ca:	60a3      	str	r3, [r4, #8]
 80095cc:	7013      	strb	r3, [r2, #0]
 80095ce:	65a3      	str	r3, [r4, #88]	@ 0x58
 80095d0:	4b54      	ldr	r3, [pc, #336]	@ (8009724 <_svfiprintf_r+0x1e8>)
 80095d2:	2205      	movs	r2, #5
 80095d4:	0018      	movs	r0, r3
 80095d6:	7831      	ldrb	r1, [r6, #0]
 80095d8:	9305      	str	r3, [sp, #20]
 80095da:	f7fd fc4e 	bl	8006e7a <memchr>
 80095de:	1c75      	adds	r5, r6, #1
 80095e0:	2800      	cmp	r0, #0
 80095e2:	d11f      	bne.n	8009624 <_svfiprintf_r+0xe8>
 80095e4:	6822      	ldr	r2, [r4, #0]
 80095e6:	06d3      	lsls	r3, r2, #27
 80095e8:	d504      	bpl.n	80095f4 <_svfiprintf_r+0xb8>
 80095ea:	2353      	movs	r3, #83	@ 0x53
 80095ec:	a904      	add	r1, sp, #16
 80095ee:	185b      	adds	r3, r3, r1
 80095f0:	2120      	movs	r1, #32
 80095f2:	7019      	strb	r1, [r3, #0]
 80095f4:	0713      	lsls	r3, r2, #28
 80095f6:	d504      	bpl.n	8009602 <_svfiprintf_r+0xc6>
 80095f8:	2353      	movs	r3, #83	@ 0x53
 80095fa:	a904      	add	r1, sp, #16
 80095fc:	185b      	adds	r3, r3, r1
 80095fe:	212b      	movs	r1, #43	@ 0x2b
 8009600:	7019      	strb	r1, [r3, #0]
 8009602:	7833      	ldrb	r3, [r6, #0]
 8009604:	2b2a      	cmp	r3, #42	@ 0x2a
 8009606:	d016      	beq.n	8009636 <_svfiprintf_r+0xfa>
 8009608:	0035      	movs	r5, r6
 800960a:	2100      	movs	r1, #0
 800960c:	200a      	movs	r0, #10
 800960e:	68e3      	ldr	r3, [r4, #12]
 8009610:	782a      	ldrb	r2, [r5, #0]
 8009612:	1c6e      	adds	r6, r5, #1
 8009614:	3a30      	subs	r2, #48	@ 0x30
 8009616:	2a09      	cmp	r2, #9
 8009618:	d950      	bls.n	80096bc <_svfiprintf_r+0x180>
 800961a:	2900      	cmp	r1, #0
 800961c:	d111      	bne.n	8009642 <_svfiprintf_r+0x106>
 800961e:	e017      	b.n	8009650 <_svfiprintf_r+0x114>
 8009620:	3501      	adds	r5, #1
 8009622:	e7af      	b.n	8009584 <_svfiprintf_r+0x48>
 8009624:	9b05      	ldr	r3, [sp, #20]
 8009626:	6822      	ldr	r2, [r4, #0]
 8009628:	1ac0      	subs	r0, r0, r3
 800962a:	2301      	movs	r3, #1
 800962c:	4083      	lsls	r3, r0
 800962e:	4313      	orrs	r3, r2
 8009630:	002e      	movs	r6, r5
 8009632:	6023      	str	r3, [r4, #0]
 8009634:	e7cc      	b.n	80095d0 <_svfiprintf_r+0x94>
 8009636:	9b07      	ldr	r3, [sp, #28]
 8009638:	1d19      	adds	r1, r3, #4
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	9107      	str	r1, [sp, #28]
 800963e:	2b00      	cmp	r3, #0
 8009640:	db01      	blt.n	8009646 <_svfiprintf_r+0x10a>
 8009642:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009644:	e004      	b.n	8009650 <_svfiprintf_r+0x114>
 8009646:	425b      	negs	r3, r3
 8009648:	60e3      	str	r3, [r4, #12]
 800964a:	2302      	movs	r3, #2
 800964c:	4313      	orrs	r3, r2
 800964e:	6023      	str	r3, [r4, #0]
 8009650:	782b      	ldrb	r3, [r5, #0]
 8009652:	2b2e      	cmp	r3, #46	@ 0x2e
 8009654:	d10c      	bne.n	8009670 <_svfiprintf_r+0x134>
 8009656:	786b      	ldrb	r3, [r5, #1]
 8009658:	2b2a      	cmp	r3, #42	@ 0x2a
 800965a:	d134      	bne.n	80096c6 <_svfiprintf_r+0x18a>
 800965c:	9b07      	ldr	r3, [sp, #28]
 800965e:	3502      	adds	r5, #2
 8009660:	1d1a      	adds	r2, r3, #4
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	9207      	str	r2, [sp, #28]
 8009666:	2b00      	cmp	r3, #0
 8009668:	da01      	bge.n	800966e <_svfiprintf_r+0x132>
 800966a:	2301      	movs	r3, #1
 800966c:	425b      	negs	r3, r3
 800966e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009670:	4e2d      	ldr	r6, [pc, #180]	@ (8009728 <_svfiprintf_r+0x1ec>)
 8009672:	2203      	movs	r2, #3
 8009674:	0030      	movs	r0, r6
 8009676:	7829      	ldrb	r1, [r5, #0]
 8009678:	f7fd fbff 	bl	8006e7a <memchr>
 800967c:	2800      	cmp	r0, #0
 800967e:	d006      	beq.n	800968e <_svfiprintf_r+0x152>
 8009680:	2340      	movs	r3, #64	@ 0x40
 8009682:	1b80      	subs	r0, r0, r6
 8009684:	4083      	lsls	r3, r0
 8009686:	6822      	ldr	r2, [r4, #0]
 8009688:	3501      	adds	r5, #1
 800968a:	4313      	orrs	r3, r2
 800968c:	6023      	str	r3, [r4, #0]
 800968e:	7829      	ldrb	r1, [r5, #0]
 8009690:	2206      	movs	r2, #6
 8009692:	4826      	ldr	r0, [pc, #152]	@ (800972c <_svfiprintf_r+0x1f0>)
 8009694:	1c6e      	adds	r6, r5, #1
 8009696:	7621      	strb	r1, [r4, #24]
 8009698:	f7fd fbef 	bl	8006e7a <memchr>
 800969c:	2800      	cmp	r0, #0
 800969e:	d038      	beq.n	8009712 <_svfiprintf_r+0x1d6>
 80096a0:	4b23      	ldr	r3, [pc, #140]	@ (8009730 <_svfiprintf_r+0x1f4>)
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d122      	bne.n	80096ec <_svfiprintf_r+0x1b0>
 80096a6:	2207      	movs	r2, #7
 80096a8:	9b07      	ldr	r3, [sp, #28]
 80096aa:	3307      	adds	r3, #7
 80096ac:	4393      	bics	r3, r2
 80096ae:	3308      	adds	r3, #8
 80096b0:	9307      	str	r3, [sp, #28]
 80096b2:	6963      	ldr	r3, [r4, #20]
 80096b4:	9a04      	ldr	r2, [sp, #16]
 80096b6:	189b      	adds	r3, r3, r2
 80096b8:	6163      	str	r3, [r4, #20]
 80096ba:	e762      	b.n	8009582 <_svfiprintf_r+0x46>
 80096bc:	4343      	muls	r3, r0
 80096be:	0035      	movs	r5, r6
 80096c0:	2101      	movs	r1, #1
 80096c2:	189b      	adds	r3, r3, r2
 80096c4:	e7a4      	b.n	8009610 <_svfiprintf_r+0xd4>
 80096c6:	2300      	movs	r3, #0
 80096c8:	200a      	movs	r0, #10
 80096ca:	0019      	movs	r1, r3
 80096cc:	3501      	adds	r5, #1
 80096ce:	6063      	str	r3, [r4, #4]
 80096d0:	782a      	ldrb	r2, [r5, #0]
 80096d2:	1c6e      	adds	r6, r5, #1
 80096d4:	3a30      	subs	r2, #48	@ 0x30
 80096d6:	2a09      	cmp	r2, #9
 80096d8:	d903      	bls.n	80096e2 <_svfiprintf_r+0x1a6>
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d0c8      	beq.n	8009670 <_svfiprintf_r+0x134>
 80096de:	9109      	str	r1, [sp, #36]	@ 0x24
 80096e0:	e7c6      	b.n	8009670 <_svfiprintf_r+0x134>
 80096e2:	4341      	muls	r1, r0
 80096e4:	0035      	movs	r5, r6
 80096e6:	2301      	movs	r3, #1
 80096e8:	1889      	adds	r1, r1, r2
 80096ea:	e7f1      	b.n	80096d0 <_svfiprintf_r+0x194>
 80096ec:	aa07      	add	r2, sp, #28
 80096ee:	9200      	str	r2, [sp, #0]
 80096f0:	0021      	movs	r1, r4
 80096f2:	003a      	movs	r2, r7
 80096f4:	4b0f      	ldr	r3, [pc, #60]	@ (8009734 <_svfiprintf_r+0x1f8>)
 80096f6:	9803      	ldr	r0, [sp, #12]
 80096f8:	f7fc fb2e 	bl	8005d58 <_printf_float>
 80096fc:	9004      	str	r0, [sp, #16]
 80096fe:	9b04      	ldr	r3, [sp, #16]
 8009700:	3301      	adds	r3, #1
 8009702:	d1d6      	bne.n	80096b2 <_svfiprintf_r+0x176>
 8009704:	89bb      	ldrh	r3, [r7, #12]
 8009706:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009708:	065b      	lsls	r3, r3, #25
 800970a:	d500      	bpl.n	800970e <_svfiprintf_r+0x1d2>
 800970c:	e72c      	b.n	8009568 <_svfiprintf_r+0x2c>
 800970e:	b021      	add	sp, #132	@ 0x84
 8009710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009712:	aa07      	add	r2, sp, #28
 8009714:	9200      	str	r2, [sp, #0]
 8009716:	0021      	movs	r1, r4
 8009718:	003a      	movs	r2, r7
 800971a:	4b06      	ldr	r3, [pc, #24]	@ (8009734 <_svfiprintf_r+0x1f8>)
 800971c:	9803      	ldr	r0, [sp, #12]
 800971e:	f7fc fdc9 	bl	80062b4 <_printf_i>
 8009722:	e7eb      	b.n	80096fc <_svfiprintf_r+0x1c0>
 8009724:	0800aaa9 	.word	0x0800aaa9
 8009728:	0800aaaf 	.word	0x0800aaaf
 800972c:	0800aab3 	.word	0x0800aab3
 8009730:	08005d59 	.word	0x08005d59
 8009734:	0800947d 	.word	0x0800947d

08009738 <__sfputc_r>:
 8009738:	6893      	ldr	r3, [r2, #8]
 800973a:	b510      	push	{r4, lr}
 800973c:	3b01      	subs	r3, #1
 800973e:	6093      	str	r3, [r2, #8]
 8009740:	2b00      	cmp	r3, #0
 8009742:	da04      	bge.n	800974e <__sfputc_r+0x16>
 8009744:	6994      	ldr	r4, [r2, #24]
 8009746:	42a3      	cmp	r3, r4
 8009748:	db07      	blt.n	800975a <__sfputc_r+0x22>
 800974a:	290a      	cmp	r1, #10
 800974c:	d005      	beq.n	800975a <__sfputc_r+0x22>
 800974e:	6813      	ldr	r3, [r2, #0]
 8009750:	1c58      	adds	r0, r3, #1
 8009752:	6010      	str	r0, [r2, #0]
 8009754:	7019      	strb	r1, [r3, #0]
 8009756:	0008      	movs	r0, r1
 8009758:	bd10      	pop	{r4, pc}
 800975a:	f7fd fa67 	bl	8006c2c <__swbuf_r>
 800975e:	0001      	movs	r1, r0
 8009760:	e7f9      	b.n	8009756 <__sfputc_r+0x1e>

08009762 <__sfputs_r>:
 8009762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009764:	0006      	movs	r6, r0
 8009766:	000f      	movs	r7, r1
 8009768:	0014      	movs	r4, r2
 800976a:	18d5      	adds	r5, r2, r3
 800976c:	42ac      	cmp	r4, r5
 800976e:	d101      	bne.n	8009774 <__sfputs_r+0x12>
 8009770:	2000      	movs	r0, #0
 8009772:	e007      	b.n	8009784 <__sfputs_r+0x22>
 8009774:	7821      	ldrb	r1, [r4, #0]
 8009776:	003a      	movs	r2, r7
 8009778:	0030      	movs	r0, r6
 800977a:	f7ff ffdd 	bl	8009738 <__sfputc_r>
 800977e:	3401      	adds	r4, #1
 8009780:	1c43      	adds	r3, r0, #1
 8009782:	d1f3      	bne.n	800976c <__sfputs_r+0xa>
 8009784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009788 <_vfiprintf_r>:
 8009788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800978a:	b0a1      	sub	sp, #132	@ 0x84
 800978c:	000f      	movs	r7, r1
 800978e:	0015      	movs	r5, r2
 8009790:	001e      	movs	r6, r3
 8009792:	9003      	str	r0, [sp, #12]
 8009794:	2800      	cmp	r0, #0
 8009796:	d004      	beq.n	80097a2 <_vfiprintf_r+0x1a>
 8009798:	6a03      	ldr	r3, [r0, #32]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d101      	bne.n	80097a2 <_vfiprintf_r+0x1a>
 800979e:	f7fd f935 	bl	8006a0c <__sinit>
 80097a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80097a4:	07db      	lsls	r3, r3, #31
 80097a6:	d405      	bmi.n	80097b4 <_vfiprintf_r+0x2c>
 80097a8:	89bb      	ldrh	r3, [r7, #12]
 80097aa:	059b      	lsls	r3, r3, #22
 80097ac:	d402      	bmi.n	80097b4 <_vfiprintf_r+0x2c>
 80097ae:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80097b0:	f7fd fb61 	bl	8006e76 <__retarget_lock_acquire_recursive>
 80097b4:	89bb      	ldrh	r3, [r7, #12]
 80097b6:	071b      	lsls	r3, r3, #28
 80097b8:	d502      	bpl.n	80097c0 <_vfiprintf_r+0x38>
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d113      	bne.n	80097e8 <_vfiprintf_r+0x60>
 80097c0:	0039      	movs	r1, r7
 80097c2:	9803      	ldr	r0, [sp, #12]
 80097c4:	f7fd fa74 	bl	8006cb0 <__swsetup_r>
 80097c8:	2800      	cmp	r0, #0
 80097ca:	d00d      	beq.n	80097e8 <_vfiprintf_r+0x60>
 80097cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80097ce:	07db      	lsls	r3, r3, #31
 80097d0:	d503      	bpl.n	80097da <_vfiprintf_r+0x52>
 80097d2:	2001      	movs	r0, #1
 80097d4:	4240      	negs	r0, r0
 80097d6:	b021      	add	sp, #132	@ 0x84
 80097d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097da:	89bb      	ldrh	r3, [r7, #12]
 80097dc:	059b      	lsls	r3, r3, #22
 80097de:	d4f8      	bmi.n	80097d2 <_vfiprintf_r+0x4a>
 80097e0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80097e2:	f7fd fb49 	bl	8006e78 <__retarget_lock_release_recursive>
 80097e6:	e7f4      	b.n	80097d2 <_vfiprintf_r+0x4a>
 80097e8:	2300      	movs	r3, #0
 80097ea:	ac08      	add	r4, sp, #32
 80097ec:	6163      	str	r3, [r4, #20]
 80097ee:	3320      	adds	r3, #32
 80097f0:	7663      	strb	r3, [r4, #25]
 80097f2:	3310      	adds	r3, #16
 80097f4:	76a3      	strb	r3, [r4, #26]
 80097f6:	9607      	str	r6, [sp, #28]
 80097f8:	002e      	movs	r6, r5
 80097fa:	7833      	ldrb	r3, [r6, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d001      	beq.n	8009804 <_vfiprintf_r+0x7c>
 8009800:	2b25      	cmp	r3, #37	@ 0x25
 8009802:	d148      	bne.n	8009896 <_vfiprintf_r+0x10e>
 8009804:	1b73      	subs	r3, r6, r5
 8009806:	9305      	str	r3, [sp, #20]
 8009808:	42ae      	cmp	r6, r5
 800980a:	d00b      	beq.n	8009824 <_vfiprintf_r+0x9c>
 800980c:	002a      	movs	r2, r5
 800980e:	0039      	movs	r1, r7
 8009810:	9803      	ldr	r0, [sp, #12]
 8009812:	f7ff ffa6 	bl	8009762 <__sfputs_r>
 8009816:	3001      	adds	r0, #1
 8009818:	d100      	bne.n	800981c <_vfiprintf_r+0x94>
 800981a:	e0ae      	b.n	800997a <_vfiprintf_r+0x1f2>
 800981c:	6963      	ldr	r3, [r4, #20]
 800981e:	9a05      	ldr	r2, [sp, #20]
 8009820:	189b      	adds	r3, r3, r2
 8009822:	6163      	str	r3, [r4, #20]
 8009824:	7833      	ldrb	r3, [r6, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d100      	bne.n	800982c <_vfiprintf_r+0xa4>
 800982a:	e0a6      	b.n	800997a <_vfiprintf_r+0x1f2>
 800982c:	2201      	movs	r2, #1
 800982e:	2300      	movs	r3, #0
 8009830:	4252      	negs	r2, r2
 8009832:	6062      	str	r2, [r4, #4]
 8009834:	a904      	add	r1, sp, #16
 8009836:	3254      	adds	r2, #84	@ 0x54
 8009838:	1852      	adds	r2, r2, r1
 800983a:	1c75      	adds	r5, r6, #1
 800983c:	6023      	str	r3, [r4, #0]
 800983e:	60e3      	str	r3, [r4, #12]
 8009840:	60a3      	str	r3, [r4, #8]
 8009842:	7013      	strb	r3, [r2, #0]
 8009844:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009846:	4b59      	ldr	r3, [pc, #356]	@ (80099ac <_vfiprintf_r+0x224>)
 8009848:	2205      	movs	r2, #5
 800984a:	0018      	movs	r0, r3
 800984c:	7829      	ldrb	r1, [r5, #0]
 800984e:	9305      	str	r3, [sp, #20]
 8009850:	f7fd fb13 	bl	8006e7a <memchr>
 8009854:	1c6e      	adds	r6, r5, #1
 8009856:	2800      	cmp	r0, #0
 8009858:	d11f      	bne.n	800989a <_vfiprintf_r+0x112>
 800985a:	6822      	ldr	r2, [r4, #0]
 800985c:	06d3      	lsls	r3, r2, #27
 800985e:	d504      	bpl.n	800986a <_vfiprintf_r+0xe2>
 8009860:	2353      	movs	r3, #83	@ 0x53
 8009862:	a904      	add	r1, sp, #16
 8009864:	185b      	adds	r3, r3, r1
 8009866:	2120      	movs	r1, #32
 8009868:	7019      	strb	r1, [r3, #0]
 800986a:	0713      	lsls	r3, r2, #28
 800986c:	d504      	bpl.n	8009878 <_vfiprintf_r+0xf0>
 800986e:	2353      	movs	r3, #83	@ 0x53
 8009870:	a904      	add	r1, sp, #16
 8009872:	185b      	adds	r3, r3, r1
 8009874:	212b      	movs	r1, #43	@ 0x2b
 8009876:	7019      	strb	r1, [r3, #0]
 8009878:	782b      	ldrb	r3, [r5, #0]
 800987a:	2b2a      	cmp	r3, #42	@ 0x2a
 800987c:	d016      	beq.n	80098ac <_vfiprintf_r+0x124>
 800987e:	002e      	movs	r6, r5
 8009880:	2100      	movs	r1, #0
 8009882:	200a      	movs	r0, #10
 8009884:	68e3      	ldr	r3, [r4, #12]
 8009886:	7832      	ldrb	r2, [r6, #0]
 8009888:	1c75      	adds	r5, r6, #1
 800988a:	3a30      	subs	r2, #48	@ 0x30
 800988c:	2a09      	cmp	r2, #9
 800988e:	d950      	bls.n	8009932 <_vfiprintf_r+0x1aa>
 8009890:	2900      	cmp	r1, #0
 8009892:	d111      	bne.n	80098b8 <_vfiprintf_r+0x130>
 8009894:	e017      	b.n	80098c6 <_vfiprintf_r+0x13e>
 8009896:	3601      	adds	r6, #1
 8009898:	e7af      	b.n	80097fa <_vfiprintf_r+0x72>
 800989a:	9b05      	ldr	r3, [sp, #20]
 800989c:	6822      	ldr	r2, [r4, #0]
 800989e:	1ac0      	subs	r0, r0, r3
 80098a0:	2301      	movs	r3, #1
 80098a2:	4083      	lsls	r3, r0
 80098a4:	4313      	orrs	r3, r2
 80098a6:	0035      	movs	r5, r6
 80098a8:	6023      	str	r3, [r4, #0]
 80098aa:	e7cc      	b.n	8009846 <_vfiprintf_r+0xbe>
 80098ac:	9b07      	ldr	r3, [sp, #28]
 80098ae:	1d19      	adds	r1, r3, #4
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	9107      	str	r1, [sp, #28]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	db01      	blt.n	80098bc <_vfiprintf_r+0x134>
 80098b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098ba:	e004      	b.n	80098c6 <_vfiprintf_r+0x13e>
 80098bc:	425b      	negs	r3, r3
 80098be:	60e3      	str	r3, [r4, #12]
 80098c0:	2302      	movs	r3, #2
 80098c2:	4313      	orrs	r3, r2
 80098c4:	6023      	str	r3, [r4, #0]
 80098c6:	7833      	ldrb	r3, [r6, #0]
 80098c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80098ca:	d10c      	bne.n	80098e6 <_vfiprintf_r+0x15e>
 80098cc:	7873      	ldrb	r3, [r6, #1]
 80098ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80098d0:	d134      	bne.n	800993c <_vfiprintf_r+0x1b4>
 80098d2:	9b07      	ldr	r3, [sp, #28]
 80098d4:	3602      	adds	r6, #2
 80098d6:	1d1a      	adds	r2, r3, #4
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	9207      	str	r2, [sp, #28]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	da01      	bge.n	80098e4 <_vfiprintf_r+0x15c>
 80098e0:	2301      	movs	r3, #1
 80098e2:	425b      	negs	r3, r3
 80098e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80098e6:	4d32      	ldr	r5, [pc, #200]	@ (80099b0 <_vfiprintf_r+0x228>)
 80098e8:	2203      	movs	r2, #3
 80098ea:	0028      	movs	r0, r5
 80098ec:	7831      	ldrb	r1, [r6, #0]
 80098ee:	f7fd fac4 	bl	8006e7a <memchr>
 80098f2:	2800      	cmp	r0, #0
 80098f4:	d006      	beq.n	8009904 <_vfiprintf_r+0x17c>
 80098f6:	2340      	movs	r3, #64	@ 0x40
 80098f8:	1b40      	subs	r0, r0, r5
 80098fa:	4083      	lsls	r3, r0
 80098fc:	6822      	ldr	r2, [r4, #0]
 80098fe:	3601      	adds	r6, #1
 8009900:	4313      	orrs	r3, r2
 8009902:	6023      	str	r3, [r4, #0]
 8009904:	7831      	ldrb	r1, [r6, #0]
 8009906:	2206      	movs	r2, #6
 8009908:	482a      	ldr	r0, [pc, #168]	@ (80099b4 <_vfiprintf_r+0x22c>)
 800990a:	1c75      	adds	r5, r6, #1
 800990c:	7621      	strb	r1, [r4, #24]
 800990e:	f7fd fab4 	bl	8006e7a <memchr>
 8009912:	2800      	cmp	r0, #0
 8009914:	d040      	beq.n	8009998 <_vfiprintf_r+0x210>
 8009916:	4b28      	ldr	r3, [pc, #160]	@ (80099b8 <_vfiprintf_r+0x230>)
 8009918:	2b00      	cmp	r3, #0
 800991a:	d122      	bne.n	8009962 <_vfiprintf_r+0x1da>
 800991c:	2207      	movs	r2, #7
 800991e:	9b07      	ldr	r3, [sp, #28]
 8009920:	3307      	adds	r3, #7
 8009922:	4393      	bics	r3, r2
 8009924:	3308      	adds	r3, #8
 8009926:	9307      	str	r3, [sp, #28]
 8009928:	6963      	ldr	r3, [r4, #20]
 800992a:	9a04      	ldr	r2, [sp, #16]
 800992c:	189b      	adds	r3, r3, r2
 800992e:	6163      	str	r3, [r4, #20]
 8009930:	e762      	b.n	80097f8 <_vfiprintf_r+0x70>
 8009932:	4343      	muls	r3, r0
 8009934:	002e      	movs	r6, r5
 8009936:	2101      	movs	r1, #1
 8009938:	189b      	adds	r3, r3, r2
 800993a:	e7a4      	b.n	8009886 <_vfiprintf_r+0xfe>
 800993c:	2300      	movs	r3, #0
 800993e:	200a      	movs	r0, #10
 8009940:	0019      	movs	r1, r3
 8009942:	3601      	adds	r6, #1
 8009944:	6063      	str	r3, [r4, #4]
 8009946:	7832      	ldrb	r2, [r6, #0]
 8009948:	1c75      	adds	r5, r6, #1
 800994a:	3a30      	subs	r2, #48	@ 0x30
 800994c:	2a09      	cmp	r2, #9
 800994e:	d903      	bls.n	8009958 <_vfiprintf_r+0x1d0>
 8009950:	2b00      	cmp	r3, #0
 8009952:	d0c8      	beq.n	80098e6 <_vfiprintf_r+0x15e>
 8009954:	9109      	str	r1, [sp, #36]	@ 0x24
 8009956:	e7c6      	b.n	80098e6 <_vfiprintf_r+0x15e>
 8009958:	4341      	muls	r1, r0
 800995a:	002e      	movs	r6, r5
 800995c:	2301      	movs	r3, #1
 800995e:	1889      	adds	r1, r1, r2
 8009960:	e7f1      	b.n	8009946 <_vfiprintf_r+0x1be>
 8009962:	aa07      	add	r2, sp, #28
 8009964:	9200      	str	r2, [sp, #0]
 8009966:	0021      	movs	r1, r4
 8009968:	003a      	movs	r2, r7
 800996a:	4b14      	ldr	r3, [pc, #80]	@ (80099bc <_vfiprintf_r+0x234>)
 800996c:	9803      	ldr	r0, [sp, #12]
 800996e:	f7fc f9f3 	bl	8005d58 <_printf_float>
 8009972:	9004      	str	r0, [sp, #16]
 8009974:	9b04      	ldr	r3, [sp, #16]
 8009976:	3301      	adds	r3, #1
 8009978:	d1d6      	bne.n	8009928 <_vfiprintf_r+0x1a0>
 800997a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800997c:	07db      	lsls	r3, r3, #31
 800997e:	d405      	bmi.n	800998c <_vfiprintf_r+0x204>
 8009980:	89bb      	ldrh	r3, [r7, #12]
 8009982:	059b      	lsls	r3, r3, #22
 8009984:	d402      	bmi.n	800998c <_vfiprintf_r+0x204>
 8009986:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009988:	f7fd fa76 	bl	8006e78 <__retarget_lock_release_recursive>
 800998c:	89bb      	ldrh	r3, [r7, #12]
 800998e:	065b      	lsls	r3, r3, #25
 8009990:	d500      	bpl.n	8009994 <_vfiprintf_r+0x20c>
 8009992:	e71e      	b.n	80097d2 <_vfiprintf_r+0x4a>
 8009994:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009996:	e71e      	b.n	80097d6 <_vfiprintf_r+0x4e>
 8009998:	aa07      	add	r2, sp, #28
 800999a:	9200      	str	r2, [sp, #0]
 800999c:	0021      	movs	r1, r4
 800999e:	003a      	movs	r2, r7
 80099a0:	4b06      	ldr	r3, [pc, #24]	@ (80099bc <_vfiprintf_r+0x234>)
 80099a2:	9803      	ldr	r0, [sp, #12]
 80099a4:	f7fc fc86 	bl	80062b4 <_printf_i>
 80099a8:	e7e3      	b.n	8009972 <_vfiprintf_r+0x1ea>
 80099aa:	46c0      	nop			@ (mov r8, r8)
 80099ac:	0800aaa9 	.word	0x0800aaa9
 80099b0:	0800aaaf 	.word	0x0800aaaf
 80099b4:	0800aab3 	.word	0x0800aab3
 80099b8:	08005d59 	.word	0x08005d59
 80099bc:	08009763 	.word	0x08009763

080099c0 <__sflush_r>:
 80099c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099c2:	220c      	movs	r2, #12
 80099c4:	5e8b      	ldrsh	r3, [r1, r2]
 80099c6:	0005      	movs	r5, r0
 80099c8:	000c      	movs	r4, r1
 80099ca:	071a      	lsls	r2, r3, #28
 80099cc:	d456      	bmi.n	8009a7c <__sflush_r+0xbc>
 80099ce:	684a      	ldr	r2, [r1, #4]
 80099d0:	2a00      	cmp	r2, #0
 80099d2:	dc02      	bgt.n	80099da <__sflush_r+0x1a>
 80099d4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80099d6:	2a00      	cmp	r2, #0
 80099d8:	dd4e      	ble.n	8009a78 <__sflush_r+0xb8>
 80099da:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80099dc:	2f00      	cmp	r7, #0
 80099de:	d04b      	beq.n	8009a78 <__sflush_r+0xb8>
 80099e0:	2200      	movs	r2, #0
 80099e2:	2080      	movs	r0, #128	@ 0x80
 80099e4:	682e      	ldr	r6, [r5, #0]
 80099e6:	602a      	str	r2, [r5, #0]
 80099e8:	001a      	movs	r2, r3
 80099ea:	0140      	lsls	r0, r0, #5
 80099ec:	6a21      	ldr	r1, [r4, #32]
 80099ee:	4002      	ands	r2, r0
 80099f0:	4203      	tst	r3, r0
 80099f2:	d033      	beq.n	8009a5c <__sflush_r+0x9c>
 80099f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80099f6:	89a3      	ldrh	r3, [r4, #12]
 80099f8:	075b      	lsls	r3, r3, #29
 80099fa:	d506      	bpl.n	8009a0a <__sflush_r+0x4a>
 80099fc:	6863      	ldr	r3, [r4, #4]
 80099fe:	1ad2      	subs	r2, r2, r3
 8009a00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d001      	beq.n	8009a0a <__sflush_r+0x4a>
 8009a06:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009a08:	1ad2      	subs	r2, r2, r3
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	0028      	movs	r0, r5
 8009a0e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8009a10:	6a21      	ldr	r1, [r4, #32]
 8009a12:	47b8      	blx	r7
 8009a14:	89a2      	ldrh	r2, [r4, #12]
 8009a16:	1c43      	adds	r3, r0, #1
 8009a18:	d106      	bne.n	8009a28 <__sflush_r+0x68>
 8009a1a:	6829      	ldr	r1, [r5, #0]
 8009a1c:	291d      	cmp	r1, #29
 8009a1e:	d846      	bhi.n	8009aae <__sflush_r+0xee>
 8009a20:	4b29      	ldr	r3, [pc, #164]	@ (8009ac8 <__sflush_r+0x108>)
 8009a22:	410b      	asrs	r3, r1
 8009a24:	07db      	lsls	r3, r3, #31
 8009a26:	d442      	bmi.n	8009aae <__sflush_r+0xee>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	6063      	str	r3, [r4, #4]
 8009a2c:	6923      	ldr	r3, [r4, #16]
 8009a2e:	6023      	str	r3, [r4, #0]
 8009a30:	04d2      	lsls	r2, r2, #19
 8009a32:	d505      	bpl.n	8009a40 <__sflush_r+0x80>
 8009a34:	1c43      	adds	r3, r0, #1
 8009a36:	d102      	bne.n	8009a3e <__sflush_r+0x7e>
 8009a38:	682b      	ldr	r3, [r5, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d100      	bne.n	8009a40 <__sflush_r+0x80>
 8009a3e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009a40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a42:	602e      	str	r6, [r5, #0]
 8009a44:	2900      	cmp	r1, #0
 8009a46:	d017      	beq.n	8009a78 <__sflush_r+0xb8>
 8009a48:	0023      	movs	r3, r4
 8009a4a:	3344      	adds	r3, #68	@ 0x44
 8009a4c:	4299      	cmp	r1, r3
 8009a4e:	d002      	beq.n	8009a56 <__sflush_r+0x96>
 8009a50:	0028      	movs	r0, r5
 8009a52:	f7fe f8a3 	bl	8007b9c <_free_r>
 8009a56:	2300      	movs	r3, #0
 8009a58:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a5a:	e00d      	b.n	8009a78 <__sflush_r+0xb8>
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	0028      	movs	r0, r5
 8009a60:	47b8      	blx	r7
 8009a62:	0002      	movs	r2, r0
 8009a64:	1c43      	adds	r3, r0, #1
 8009a66:	d1c6      	bne.n	80099f6 <__sflush_r+0x36>
 8009a68:	682b      	ldr	r3, [r5, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d0c3      	beq.n	80099f6 <__sflush_r+0x36>
 8009a6e:	2b1d      	cmp	r3, #29
 8009a70:	d001      	beq.n	8009a76 <__sflush_r+0xb6>
 8009a72:	2b16      	cmp	r3, #22
 8009a74:	d11a      	bne.n	8009aac <__sflush_r+0xec>
 8009a76:	602e      	str	r6, [r5, #0]
 8009a78:	2000      	movs	r0, #0
 8009a7a:	e01e      	b.n	8009aba <__sflush_r+0xfa>
 8009a7c:	690e      	ldr	r6, [r1, #16]
 8009a7e:	2e00      	cmp	r6, #0
 8009a80:	d0fa      	beq.n	8009a78 <__sflush_r+0xb8>
 8009a82:	680f      	ldr	r7, [r1, #0]
 8009a84:	600e      	str	r6, [r1, #0]
 8009a86:	1bba      	subs	r2, r7, r6
 8009a88:	9201      	str	r2, [sp, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	079b      	lsls	r3, r3, #30
 8009a8e:	d100      	bne.n	8009a92 <__sflush_r+0xd2>
 8009a90:	694a      	ldr	r2, [r1, #20]
 8009a92:	60a2      	str	r2, [r4, #8]
 8009a94:	9b01      	ldr	r3, [sp, #4]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	ddee      	ble.n	8009a78 <__sflush_r+0xb8>
 8009a9a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009a9c:	0032      	movs	r2, r6
 8009a9e:	001f      	movs	r7, r3
 8009aa0:	0028      	movs	r0, r5
 8009aa2:	9b01      	ldr	r3, [sp, #4]
 8009aa4:	6a21      	ldr	r1, [r4, #32]
 8009aa6:	47b8      	blx	r7
 8009aa8:	2800      	cmp	r0, #0
 8009aaa:	dc07      	bgt.n	8009abc <__sflush_r+0xfc>
 8009aac:	89a2      	ldrh	r2, [r4, #12]
 8009aae:	2340      	movs	r3, #64	@ 0x40
 8009ab0:	2001      	movs	r0, #1
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	b21b      	sxth	r3, r3
 8009ab6:	81a3      	strh	r3, [r4, #12]
 8009ab8:	4240      	negs	r0, r0
 8009aba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009abc:	9b01      	ldr	r3, [sp, #4]
 8009abe:	1836      	adds	r6, r6, r0
 8009ac0:	1a1b      	subs	r3, r3, r0
 8009ac2:	9301      	str	r3, [sp, #4]
 8009ac4:	e7e6      	b.n	8009a94 <__sflush_r+0xd4>
 8009ac6:	46c0      	nop			@ (mov r8, r8)
 8009ac8:	dfbffffe 	.word	0xdfbffffe

08009acc <_fflush_r>:
 8009acc:	690b      	ldr	r3, [r1, #16]
 8009ace:	b570      	push	{r4, r5, r6, lr}
 8009ad0:	0005      	movs	r5, r0
 8009ad2:	000c      	movs	r4, r1
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d102      	bne.n	8009ade <_fflush_r+0x12>
 8009ad8:	2500      	movs	r5, #0
 8009ada:	0028      	movs	r0, r5
 8009adc:	bd70      	pop	{r4, r5, r6, pc}
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	d004      	beq.n	8009aec <_fflush_r+0x20>
 8009ae2:	6a03      	ldr	r3, [r0, #32]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d101      	bne.n	8009aec <_fflush_r+0x20>
 8009ae8:	f7fc ff90 	bl	8006a0c <__sinit>
 8009aec:	220c      	movs	r2, #12
 8009aee:	5ea3      	ldrsh	r3, [r4, r2]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d0f1      	beq.n	8009ad8 <_fflush_r+0xc>
 8009af4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009af6:	07d2      	lsls	r2, r2, #31
 8009af8:	d404      	bmi.n	8009b04 <_fflush_r+0x38>
 8009afa:	059b      	lsls	r3, r3, #22
 8009afc:	d402      	bmi.n	8009b04 <_fflush_r+0x38>
 8009afe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b00:	f7fd f9b9 	bl	8006e76 <__retarget_lock_acquire_recursive>
 8009b04:	0028      	movs	r0, r5
 8009b06:	0021      	movs	r1, r4
 8009b08:	f7ff ff5a 	bl	80099c0 <__sflush_r>
 8009b0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b0e:	0005      	movs	r5, r0
 8009b10:	07db      	lsls	r3, r3, #31
 8009b12:	d4e2      	bmi.n	8009ada <_fflush_r+0xe>
 8009b14:	89a3      	ldrh	r3, [r4, #12]
 8009b16:	059b      	lsls	r3, r3, #22
 8009b18:	d4df      	bmi.n	8009ada <_fflush_r+0xe>
 8009b1a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b1c:	f7fd f9ac 	bl	8006e78 <__retarget_lock_release_recursive>
 8009b20:	e7db      	b.n	8009ada <_fflush_r+0xe>
	...

08009b24 <__swhatbuf_r>:
 8009b24:	b570      	push	{r4, r5, r6, lr}
 8009b26:	000e      	movs	r6, r1
 8009b28:	001d      	movs	r5, r3
 8009b2a:	230e      	movs	r3, #14
 8009b2c:	5ec9      	ldrsh	r1, [r1, r3]
 8009b2e:	0014      	movs	r4, r2
 8009b30:	b096      	sub	sp, #88	@ 0x58
 8009b32:	2900      	cmp	r1, #0
 8009b34:	da0c      	bge.n	8009b50 <__swhatbuf_r+0x2c>
 8009b36:	89b2      	ldrh	r2, [r6, #12]
 8009b38:	2380      	movs	r3, #128	@ 0x80
 8009b3a:	0011      	movs	r1, r2
 8009b3c:	4019      	ands	r1, r3
 8009b3e:	421a      	tst	r2, r3
 8009b40:	d114      	bne.n	8009b6c <__swhatbuf_r+0x48>
 8009b42:	2380      	movs	r3, #128	@ 0x80
 8009b44:	00db      	lsls	r3, r3, #3
 8009b46:	2000      	movs	r0, #0
 8009b48:	6029      	str	r1, [r5, #0]
 8009b4a:	6023      	str	r3, [r4, #0]
 8009b4c:	b016      	add	sp, #88	@ 0x58
 8009b4e:	bd70      	pop	{r4, r5, r6, pc}
 8009b50:	466a      	mov	r2, sp
 8009b52:	f000 f877 	bl	8009c44 <_fstat_r>
 8009b56:	2800      	cmp	r0, #0
 8009b58:	dbed      	blt.n	8009b36 <__swhatbuf_r+0x12>
 8009b5a:	23f0      	movs	r3, #240	@ 0xf0
 8009b5c:	9901      	ldr	r1, [sp, #4]
 8009b5e:	021b      	lsls	r3, r3, #8
 8009b60:	4019      	ands	r1, r3
 8009b62:	4b04      	ldr	r3, [pc, #16]	@ (8009b74 <__swhatbuf_r+0x50>)
 8009b64:	18c9      	adds	r1, r1, r3
 8009b66:	424b      	negs	r3, r1
 8009b68:	4159      	adcs	r1, r3
 8009b6a:	e7ea      	b.n	8009b42 <__swhatbuf_r+0x1e>
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	2340      	movs	r3, #64	@ 0x40
 8009b70:	e7e9      	b.n	8009b46 <__swhatbuf_r+0x22>
 8009b72:	46c0      	nop			@ (mov r8, r8)
 8009b74:	ffffe000 	.word	0xffffe000

08009b78 <__smakebuf_r>:
 8009b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b7a:	2602      	movs	r6, #2
 8009b7c:	898b      	ldrh	r3, [r1, #12]
 8009b7e:	0005      	movs	r5, r0
 8009b80:	000c      	movs	r4, r1
 8009b82:	b085      	sub	sp, #20
 8009b84:	4233      	tst	r3, r6
 8009b86:	d007      	beq.n	8009b98 <__smakebuf_r+0x20>
 8009b88:	0023      	movs	r3, r4
 8009b8a:	3347      	adds	r3, #71	@ 0x47
 8009b8c:	6023      	str	r3, [r4, #0]
 8009b8e:	6123      	str	r3, [r4, #16]
 8009b90:	2301      	movs	r3, #1
 8009b92:	6163      	str	r3, [r4, #20]
 8009b94:	b005      	add	sp, #20
 8009b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b98:	ab03      	add	r3, sp, #12
 8009b9a:	aa02      	add	r2, sp, #8
 8009b9c:	f7ff ffc2 	bl	8009b24 <__swhatbuf_r>
 8009ba0:	9f02      	ldr	r7, [sp, #8]
 8009ba2:	9001      	str	r0, [sp, #4]
 8009ba4:	0039      	movs	r1, r7
 8009ba6:	0028      	movs	r0, r5
 8009ba8:	f7fe f86e 	bl	8007c88 <_malloc_r>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	d108      	bne.n	8009bc2 <__smakebuf_r+0x4a>
 8009bb0:	220c      	movs	r2, #12
 8009bb2:	5ea3      	ldrsh	r3, [r4, r2]
 8009bb4:	059a      	lsls	r2, r3, #22
 8009bb6:	d4ed      	bmi.n	8009b94 <__smakebuf_r+0x1c>
 8009bb8:	2203      	movs	r2, #3
 8009bba:	4393      	bics	r3, r2
 8009bbc:	431e      	orrs	r6, r3
 8009bbe:	81a6      	strh	r6, [r4, #12]
 8009bc0:	e7e2      	b.n	8009b88 <__smakebuf_r+0x10>
 8009bc2:	2380      	movs	r3, #128	@ 0x80
 8009bc4:	89a2      	ldrh	r2, [r4, #12]
 8009bc6:	6020      	str	r0, [r4, #0]
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	81a3      	strh	r3, [r4, #12]
 8009bcc:	9b03      	ldr	r3, [sp, #12]
 8009bce:	6120      	str	r0, [r4, #16]
 8009bd0:	6167      	str	r7, [r4, #20]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00c      	beq.n	8009bf0 <__smakebuf_r+0x78>
 8009bd6:	0028      	movs	r0, r5
 8009bd8:	230e      	movs	r3, #14
 8009bda:	5ee1      	ldrsh	r1, [r4, r3]
 8009bdc:	f000 f844 	bl	8009c68 <_isatty_r>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	d005      	beq.n	8009bf0 <__smakebuf_r+0x78>
 8009be4:	2303      	movs	r3, #3
 8009be6:	89a2      	ldrh	r2, [r4, #12]
 8009be8:	439a      	bics	r2, r3
 8009bea:	3b02      	subs	r3, #2
 8009bec:	4313      	orrs	r3, r2
 8009bee:	81a3      	strh	r3, [r4, #12]
 8009bf0:	89a3      	ldrh	r3, [r4, #12]
 8009bf2:	9a01      	ldr	r2, [sp, #4]
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	81a3      	strh	r3, [r4, #12]
 8009bf8:	e7cc      	b.n	8009b94 <__smakebuf_r+0x1c>

08009bfa <memmove>:
 8009bfa:	b510      	push	{r4, lr}
 8009bfc:	4288      	cmp	r0, r1
 8009bfe:	d806      	bhi.n	8009c0e <memmove+0x14>
 8009c00:	2300      	movs	r3, #0
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d008      	beq.n	8009c18 <memmove+0x1e>
 8009c06:	5ccc      	ldrb	r4, [r1, r3]
 8009c08:	54c4      	strb	r4, [r0, r3]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	e7f9      	b.n	8009c02 <memmove+0x8>
 8009c0e:	188b      	adds	r3, r1, r2
 8009c10:	4298      	cmp	r0, r3
 8009c12:	d2f5      	bcs.n	8009c00 <memmove+0x6>
 8009c14:	3a01      	subs	r2, #1
 8009c16:	d200      	bcs.n	8009c1a <memmove+0x20>
 8009c18:	bd10      	pop	{r4, pc}
 8009c1a:	5c8b      	ldrb	r3, [r1, r2]
 8009c1c:	5483      	strb	r3, [r0, r2]
 8009c1e:	e7f9      	b.n	8009c14 <memmove+0x1a>

08009c20 <strncmp>:
 8009c20:	b530      	push	{r4, r5, lr}
 8009c22:	0005      	movs	r5, r0
 8009c24:	1e10      	subs	r0, r2, #0
 8009c26:	d00b      	beq.n	8009c40 <strncmp+0x20>
 8009c28:	2400      	movs	r4, #0
 8009c2a:	3a01      	subs	r2, #1
 8009c2c:	5d2b      	ldrb	r3, [r5, r4]
 8009c2e:	5d08      	ldrb	r0, [r1, r4]
 8009c30:	4283      	cmp	r3, r0
 8009c32:	d104      	bne.n	8009c3e <strncmp+0x1e>
 8009c34:	42a2      	cmp	r2, r4
 8009c36:	d002      	beq.n	8009c3e <strncmp+0x1e>
 8009c38:	3401      	adds	r4, #1
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d1f6      	bne.n	8009c2c <strncmp+0xc>
 8009c3e:	1a18      	subs	r0, r3, r0
 8009c40:	bd30      	pop	{r4, r5, pc}
	...

08009c44 <_fstat_r>:
 8009c44:	2300      	movs	r3, #0
 8009c46:	b570      	push	{r4, r5, r6, lr}
 8009c48:	4d06      	ldr	r5, [pc, #24]	@ (8009c64 <_fstat_r+0x20>)
 8009c4a:	0004      	movs	r4, r0
 8009c4c:	0008      	movs	r0, r1
 8009c4e:	0011      	movs	r1, r2
 8009c50:	602b      	str	r3, [r5, #0]
 8009c52:	f7f9 faff 	bl	8003254 <_fstat>
 8009c56:	1c43      	adds	r3, r0, #1
 8009c58:	d103      	bne.n	8009c62 <_fstat_r+0x1e>
 8009c5a:	682b      	ldr	r3, [r5, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d000      	beq.n	8009c62 <_fstat_r+0x1e>
 8009c60:	6023      	str	r3, [r4, #0]
 8009c62:	bd70      	pop	{r4, r5, r6, pc}
 8009c64:	20000488 	.word	0x20000488

08009c68 <_isatty_r>:
 8009c68:	2300      	movs	r3, #0
 8009c6a:	b570      	push	{r4, r5, r6, lr}
 8009c6c:	4d06      	ldr	r5, [pc, #24]	@ (8009c88 <_isatty_r+0x20>)
 8009c6e:	0004      	movs	r4, r0
 8009c70:	0008      	movs	r0, r1
 8009c72:	602b      	str	r3, [r5, #0]
 8009c74:	f7f9 fafc 	bl	8003270 <_isatty>
 8009c78:	1c43      	adds	r3, r0, #1
 8009c7a:	d103      	bne.n	8009c84 <_isatty_r+0x1c>
 8009c7c:	682b      	ldr	r3, [r5, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d000      	beq.n	8009c84 <_isatty_r+0x1c>
 8009c82:	6023      	str	r3, [r4, #0]
 8009c84:	bd70      	pop	{r4, r5, r6, pc}
 8009c86:	46c0      	nop			@ (mov r8, r8)
 8009c88:	20000488 	.word	0x20000488

08009c8c <_sbrk_r>:
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	b570      	push	{r4, r5, r6, lr}
 8009c90:	4d06      	ldr	r5, [pc, #24]	@ (8009cac <_sbrk_r+0x20>)
 8009c92:	0004      	movs	r4, r0
 8009c94:	0008      	movs	r0, r1
 8009c96:	602b      	str	r3, [r5, #0]
 8009c98:	f7f9 fafe 	bl	8003298 <_sbrk>
 8009c9c:	1c43      	adds	r3, r0, #1
 8009c9e:	d103      	bne.n	8009ca8 <_sbrk_r+0x1c>
 8009ca0:	682b      	ldr	r3, [r5, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d000      	beq.n	8009ca8 <_sbrk_r+0x1c>
 8009ca6:	6023      	str	r3, [r4, #0]
 8009ca8:	bd70      	pop	{r4, r5, r6, pc}
 8009caa:	46c0      	nop			@ (mov r8, r8)
 8009cac:	20000488 	.word	0x20000488

08009cb0 <memcpy>:
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	b510      	push	{r4, lr}
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d100      	bne.n	8009cba <memcpy+0xa>
 8009cb8:	bd10      	pop	{r4, pc}
 8009cba:	5ccc      	ldrb	r4, [r1, r3]
 8009cbc:	54c4      	strb	r4, [r0, r3]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	e7f8      	b.n	8009cb4 <memcpy+0x4>
	...

08009cc4 <nan>:
 8009cc4:	2000      	movs	r0, #0
 8009cc6:	4901      	ldr	r1, [pc, #4]	@ (8009ccc <nan+0x8>)
 8009cc8:	4770      	bx	lr
 8009cca:	46c0      	nop			@ (mov r8, r8)
 8009ccc:	7ff80000 	.word	0x7ff80000

08009cd0 <__assert_func>:
 8009cd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009cd2:	0014      	movs	r4, r2
 8009cd4:	001a      	movs	r2, r3
 8009cd6:	4b09      	ldr	r3, [pc, #36]	@ (8009cfc <__assert_func+0x2c>)
 8009cd8:	0005      	movs	r5, r0
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	000e      	movs	r6, r1
 8009cde:	68d8      	ldr	r0, [r3, #12]
 8009ce0:	4b07      	ldr	r3, [pc, #28]	@ (8009d00 <__assert_func+0x30>)
 8009ce2:	2c00      	cmp	r4, #0
 8009ce4:	d101      	bne.n	8009cea <__assert_func+0x1a>
 8009ce6:	4b07      	ldr	r3, [pc, #28]	@ (8009d04 <__assert_func+0x34>)
 8009ce8:	001c      	movs	r4, r3
 8009cea:	4907      	ldr	r1, [pc, #28]	@ (8009d08 <__assert_func+0x38>)
 8009cec:	9301      	str	r3, [sp, #4]
 8009cee:	9402      	str	r4, [sp, #8]
 8009cf0:	002b      	movs	r3, r5
 8009cf2:	9600      	str	r6, [sp, #0]
 8009cf4:	f000 fbe0 	bl	800a4b8 <fiprintf>
 8009cf8:	f000 fbee 	bl	800a4d8 <abort>
 8009cfc:	20000018 	.word	0x20000018
 8009d00:	0800aac2 	.word	0x0800aac2
 8009d04:	0800aafd 	.word	0x0800aafd
 8009d08:	0800aacf 	.word	0x0800aacf

08009d0c <_calloc_r>:
 8009d0c:	b570      	push	{r4, r5, r6, lr}
 8009d0e:	0c0b      	lsrs	r3, r1, #16
 8009d10:	0c15      	lsrs	r5, r2, #16
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d11e      	bne.n	8009d54 <_calloc_r+0x48>
 8009d16:	2d00      	cmp	r5, #0
 8009d18:	d10c      	bne.n	8009d34 <_calloc_r+0x28>
 8009d1a:	b289      	uxth	r1, r1
 8009d1c:	b294      	uxth	r4, r2
 8009d1e:	434c      	muls	r4, r1
 8009d20:	0021      	movs	r1, r4
 8009d22:	f7fd ffb1 	bl	8007c88 <_malloc_r>
 8009d26:	1e05      	subs	r5, r0, #0
 8009d28:	d01a      	beq.n	8009d60 <_calloc_r+0x54>
 8009d2a:	0022      	movs	r2, r4
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	f7fd f81d 	bl	8006d6c <memset>
 8009d32:	e016      	b.n	8009d62 <_calloc_r+0x56>
 8009d34:	1c2b      	adds	r3, r5, #0
 8009d36:	1c0c      	adds	r4, r1, #0
 8009d38:	b289      	uxth	r1, r1
 8009d3a:	b292      	uxth	r2, r2
 8009d3c:	434a      	muls	r2, r1
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	b2a1      	uxth	r1, r4
 8009d42:	4359      	muls	r1, r3
 8009d44:	0c14      	lsrs	r4, r2, #16
 8009d46:	190c      	adds	r4, r1, r4
 8009d48:	0c23      	lsrs	r3, r4, #16
 8009d4a:	d107      	bne.n	8009d5c <_calloc_r+0x50>
 8009d4c:	0424      	lsls	r4, r4, #16
 8009d4e:	b292      	uxth	r2, r2
 8009d50:	4314      	orrs	r4, r2
 8009d52:	e7e5      	b.n	8009d20 <_calloc_r+0x14>
 8009d54:	2d00      	cmp	r5, #0
 8009d56:	d101      	bne.n	8009d5c <_calloc_r+0x50>
 8009d58:	1c14      	adds	r4, r2, #0
 8009d5a:	e7ed      	b.n	8009d38 <_calloc_r+0x2c>
 8009d5c:	230c      	movs	r3, #12
 8009d5e:	6003      	str	r3, [r0, #0]
 8009d60:	2500      	movs	r5, #0
 8009d62:	0028      	movs	r0, r5
 8009d64:	bd70      	pop	{r4, r5, r6, pc}

08009d66 <rshift>:
 8009d66:	0002      	movs	r2, r0
 8009d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d6a:	6904      	ldr	r4, [r0, #16]
 8009d6c:	b085      	sub	sp, #20
 8009d6e:	3214      	adds	r2, #20
 8009d70:	114b      	asrs	r3, r1, #5
 8009d72:	0016      	movs	r6, r2
 8009d74:	9302      	str	r3, [sp, #8]
 8009d76:	429c      	cmp	r4, r3
 8009d78:	dd31      	ble.n	8009dde <rshift+0x78>
 8009d7a:	261f      	movs	r6, #31
 8009d7c:	000f      	movs	r7, r1
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	00a5      	lsls	r5, r4, #2
 8009d82:	18d3      	adds	r3, r2, r3
 8009d84:	4037      	ands	r7, r6
 8009d86:	1955      	adds	r5, r2, r5
 8009d88:	9300      	str	r3, [sp, #0]
 8009d8a:	9701      	str	r7, [sp, #4]
 8009d8c:	4231      	tst	r1, r6
 8009d8e:	d10d      	bne.n	8009dac <rshift+0x46>
 8009d90:	0016      	movs	r6, r2
 8009d92:	0019      	movs	r1, r3
 8009d94:	428d      	cmp	r5, r1
 8009d96:	d836      	bhi.n	8009e06 <rshift+0xa0>
 8009d98:	9b00      	ldr	r3, [sp, #0]
 8009d9a:	2600      	movs	r6, #0
 8009d9c:	3b03      	subs	r3, #3
 8009d9e:	429d      	cmp	r5, r3
 8009da0:	d302      	bcc.n	8009da8 <rshift+0x42>
 8009da2:	9b02      	ldr	r3, [sp, #8]
 8009da4:	1ae4      	subs	r4, r4, r3
 8009da6:	00a6      	lsls	r6, r4, #2
 8009da8:	1996      	adds	r6, r2, r6
 8009daa:	e018      	b.n	8009dde <rshift+0x78>
 8009dac:	2120      	movs	r1, #32
 8009dae:	9e01      	ldr	r6, [sp, #4]
 8009db0:	9f01      	ldr	r7, [sp, #4]
 8009db2:	1b89      	subs	r1, r1, r6
 8009db4:	9e00      	ldr	r6, [sp, #0]
 8009db6:	9103      	str	r1, [sp, #12]
 8009db8:	ce02      	ldmia	r6!, {r1}
 8009dba:	4694      	mov	ip, r2
 8009dbc:	40f9      	lsrs	r1, r7
 8009dbe:	42b5      	cmp	r5, r6
 8009dc0:	d816      	bhi.n	8009df0 <rshift+0x8a>
 8009dc2:	9b00      	ldr	r3, [sp, #0]
 8009dc4:	2600      	movs	r6, #0
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	429d      	cmp	r5, r3
 8009dca:	d303      	bcc.n	8009dd4 <rshift+0x6e>
 8009dcc:	9b02      	ldr	r3, [sp, #8]
 8009dce:	1ae4      	subs	r4, r4, r3
 8009dd0:	00a6      	lsls	r6, r4, #2
 8009dd2:	3e04      	subs	r6, #4
 8009dd4:	1996      	adds	r6, r2, r6
 8009dd6:	6031      	str	r1, [r6, #0]
 8009dd8:	2900      	cmp	r1, #0
 8009dda:	d000      	beq.n	8009dde <rshift+0x78>
 8009ddc:	3604      	adds	r6, #4
 8009dde:	1ab1      	subs	r1, r6, r2
 8009de0:	1089      	asrs	r1, r1, #2
 8009de2:	6101      	str	r1, [r0, #16]
 8009de4:	4296      	cmp	r6, r2
 8009de6:	d101      	bne.n	8009dec <rshift+0x86>
 8009de8:	2300      	movs	r3, #0
 8009dea:	6143      	str	r3, [r0, #20]
 8009dec:	b005      	add	sp, #20
 8009dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009df0:	6837      	ldr	r7, [r6, #0]
 8009df2:	9b03      	ldr	r3, [sp, #12]
 8009df4:	409f      	lsls	r7, r3
 8009df6:	430f      	orrs	r7, r1
 8009df8:	4661      	mov	r1, ip
 8009dfa:	c180      	stmia	r1!, {r7}
 8009dfc:	468c      	mov	ip, r1
 8009dfe:	9b01      	ldr	r3, [sp, #4]
 8009e00:	ce02      	ldmia	r6!, {r1}
 8009e02:	40d9      	lsrs	r1, r3
 8009e04:	e7db      	b.n	8009dbe <rshift+0x58>
 8009e06:	c980      	ldmia	r1!, {r7}
 8009e08:	c680      	stmia	r6!, {r7}
 8009e0a:	e7c3      	b.n	8009d94 <rshift+0x2e>

08009e0c <__hexdig_fun>:
 8009e0c:	0002      	movs	r2, r0
 8009e0e:	3a30      	subs	r2, #48	@ 0x30
 8009e10:	0003      	movs	r3, r0
 8009e12:	2a09      	cmp	r2, #9
 8009e14:	d802      	bhi.n	8009e1c <__hexdig_fun+0x10>
 8009e16:	3b20      	subs	r3, #32
 8009e18:	b2d8      	uxtb	r0, r3
 8009e1a:	4770      	bx	lr
 8009e1c:	0002      	movs	r2, r0
 8009e1e:	3a61      	subs	r2, #97	@ 0x61
 8009e20:	2a05      	cmp	r2, #5
 8009e22:	d801      	bhi.n	8009e28 <__hexdig_fun+0x1c>
 8009e24:	3b47      	subs	r3, #71	@ 0x47
 8009e26:	e7f7      	b.n	8009e18 <__hexdig_fun+0xc>
 8009e28:	001a      	movs	r2, r3
 8009e2a:	3a41      	subs	r2, #65	@ 0x41
 8009e2c:	2000      	movs	r0, #0
 8009e2e:	2a05      	cmp	r2, #5
 8009e30:	d8f3      	bhi.n	8009e1a <__hexdig_fun+0xe>
 8009e32:	3b27      	subs	r3, #39	@ 0x27
 8009e34:	e7f0      	b.n	8009e18 <__hexdig_fun+0xc>
	...

08009e38 <__gethex>:
 8009e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e3a:	b089      	sub	sp, #36	@ 0x24
 8009e3c:	9307      	str	r3, [sp, #28]
 8009e3e:	680b      	ldr	r3, [r1, #0]
 8009e40:	9201      	str	r2, [sp, #4]
 8009e42:	9003      	str	r0, [sp, #12]
 8009e44:	9106      	str	r1, [sp, #24]
 8009e46:	1c9a      	adds	r2, r3, #2
 8009e48:	0011      	movs	r1, r2
 8009e4a:	3201      	adds	r2, #1
 8009e4c:	1e50      	subs	r0, r2, #1
 8009e4e:	7800      	ldrb	r0, [r0, #0]
 8009e50:	2830      	cmp	r0, #48	@ 0x30
 8009e52:	d0f9      	beq.n	8009e48 <__gethex+0x10>
 8009e54:	1acb      	subs	r3, r1, r3
 8009e56:	3b02      	subs	r3, #2
 8009e58:	9305      	str	r3, [sp, #20]
 8009e5a:	9100      	str	r1, [sp, #0]
 8009e5c:	f7ff ffd6 	bl	8009e0c <__hexdig_fun>
 8009e60:	2300      	movs	r3, #0
 8009e62:	001d      	movs	r5, r3
 8009e64:	9302      	str	r3, [sp, #8]
 8009e66:	4298      	cmp	r0, r3
 8009e68:	d11e      	bne.n	8009ea8 <__gethex+0x70>
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	49a6      	ldr	r1, [pc, #664]	@ (800a108 <__gethex+0x2d0>)
 8009e6e:	9800      	ldr	r0, [sp, #0]
 8009e70:	f7ff fed6 	bl	8009c20 <strncmp>
 8009e74:	0007      	movs	r7, r0
 8009e76:	42a8      	cmp	r0, r5
 8009e78:	d000      	beq.n	8009e7c <__gethex+0x44>
 8009e7a:	e06a      	b.n	8009f52 <__gethex+0x11a>
 8009e7c:	9b00      	ldr	r3, [sp, #0]
 8009e7e:	7858      	ldrb	r0, [r3, #1]
 8009e80:	1c5c      	adds	r4, r3, #1
 8009e82:	f7ff ffc3 	bl	8009e0c <__hexdig_fun>
 8009e86:	2301      	movs	r3, #1
 8009e88:	9302      	str	r3, [sp, #8]
 8009e8a:	42a8      	cmp	r0, r5
 8009e8c:	d02f      	beq.n	8009eee <__gethex+0xb6>
 8009e8e:	9400      	str	r4, [sp, #0]
 8009e90:	9b00      	ldr	r3, [sp, #0]
 8009e92:	7818      	ldrb	r0, [r3, #0]
 8009e94:	2830      	cmp	r0, #48	@ 0x30
 8009e96:	d009      	beq.n	8009eac <__gethex+0x74>
 8009e98:	f7ff ffb8 	bl	8009e0c <__hexdig_fun>
 8009e9c:	4242      	negs	r2, r0
 8009e9e:	4142      	adcs	r2, r0
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	0025      	movs	r5, r4
 8009ea4:	9202      	str	r2, [sp, #8]
 8009ea6:	9305      	str	r3, [sp, #20]
 8009ea8:	9c00      	ldr	r4, [sp, #0]
 8009eaa:	e004      	b.n	8009eb6 <__gethex+0x7e>
 8009eac:	9b00      	ldr	r3, [sp, #0]
 8009eae:	3301      	adds	r3, #1
 8009eb0:	9300      	str	r3, [sp, #0]
 8009eb2:	e7ed      	b.n	8009e90 <__gethex+0x58>
 8009eb4:	3401      	adds	r4, #1
 8009eb6:	7820      	ldrb	r0, [r4, #0]
 8009eb8:	f7ff ffa8 	bl	8009e0c <__hexdig_fun>
 8009ebc:	1e07      	subs	r7, r0, #0
 8009ebe:	d1f9      	bne.n	8009eb4 <__gethex+0x7c>
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	0020      	movs	r0, r4
 8009ec4:	4990      	ldr	r1, [pc, #576]	@ (800a108 <__gethex+0x2d0>)
 8009ec6:	f7ff feab 	bl	8009c20 <strncmp>
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	d10d      	bne.n	8009eea <__gethex+0xb2>
 8009ece:	2d00      	cmp	r5, #0
 8009ed0:	d106      	bne.n	8009ee0 <__gethex+0xa8>
 8009ed2:	3401      	adds	r4, #1
 8009ed4:	0025      	movs	r5, r4
 8009ed6:	7820      	ldrb	r0, [r4, #0]
 8009ed8:	f7ff ff98 	bl	8009e0c <__hexdig_fun>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d102      	bne.n	8009ee6 <__gethex+0xae>
 8009ee0:	1b2d      	subs	r5, r5, r4
 8009ee2:	00af      	lsls	r7, r5, #2
 8009ee4:	e003      	b.n	8009eee <__gethex+0xb6>
 8009ee6:	3401      	adds	r4, #1
 8009ee8:	e7f5      	b.n	8009ed6 <__gethex+0x9e>
 8009eea:	2d00      	cmp	r5, #0
 8009eec:	d1f8      	bne.n	8009ee0 <__gethex+0xa8>
 8009eee:	2220      	movs	r2, #32
 8009ef0:	7823      	ldrb	r3, [r4, #0]
 8009ef2:	0026      	movs	r6, r4
 8009ef4:	4393      	bics	r3, r2
 8009ef6:	2b50      	cmp	r3, #80	@ 0x50
 8009ef8:	d11d      	bne.n	8009f36 <__gethex+0xfe>
 8009efa:	7863      	ldrb	r3, [r4, #1]
 8009efc:	2b2b      	cmp	r3, #43	@ 0x2b
 8009efe:	d02d      	beq.n	8009f5c <__gethex+0x124>
 8009f00:	2b2d      	cmp	r3, #45	@ 0x2d
 8009f02:	d02f      	beq.n	8009f64 <__gethex+0x12c>
 8009f04:	2300      	movs	r3, #0
 8009f06:	1c66      	adds	r6, r4, #1
 8009f08:	9304      	str	r3, [sp, #16]
 8009f0a:	7830      	ldrb	r0, [r6, #0]
 8009f0c:	f7ff ff7e 	bl	8009e0c <__hexdig_fun>
 8009f10:	1e43      	subs	r3, r0, #1
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	0005      	movs	r5, r0
 8009f16:	2b18      	cmp	r3, #24
 8009f18:	d82a      	bhi.n	8009f70 <__gethex+0x138>
 8009f1a:	7870      	ldrb	r0, [r6, #1]
 8009f1c:	f7ff ff76 	bl	8009e0c <__hexdig_fun>
 8009f20:	1e43      	subs	r3, r0, #1
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	3601      	adds	r6, #1
 8009f26:	3d10      	subs	r5, #16
 8009f28:	2b18      	cmp	r3, #24
 8009f2a:	d91d      	bls.n	8009f68 <__gethex+0x130>
 8009f2c:	9b04      	ldr	r3, [sp, #16]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d000      	beq.n	8009f34 <__gethex+0xfc>
 8009f32:	426d      	negs	r5, r5
 8009f34:	197f      	adds	r7, r7, r5
 8009f36:	9b06      	ldr	r3, [sp, #24]
 8009f38:	601e      	str	r6, [r3, #0]
 8009f3a:	9b02      	ldr	r3, [sp, #8]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d019      	beq.n	8009f74 <__gethex+0x13c>
 8009f40:	9b05      	ldr	r3, [sp, #20]
 8009f42:	2606      	movs	r6, #6
 8009f44:	425a      	negs	r2, r3
 8009f46:	4153      	adcs	r3, r2
 8009f48:	425b      	negs	r3, r3
 8009f4a:	401e      	ands	r6, r3
 8009f4c:	0030      	movs	r0, r6
 8009f4e:	b009      	add	sp, #36	@ 0x24
 8009f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f52:	2301      	movs	r3, #1
 8009f54:	2700      	movs	r7, #0
 8009f56:	9c00      	ldr	r4, [sp, #0]
 8009f58:	9302      	str	r3, [sp, #8]
 8009f5a:	e7c8      	b.n	8009eee <__gethex+0xb6>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	9304      	str	r3, [sp, #16]
 8009f60:	1ca6      	adds	r6, r4, #2
 8009f62:	e7d2      	b.n	8009f0a <__gethex+0xd2>
 8009f64:	2301      	movs	r3, #1
 8009f66:	e7fa      	b.n	8009f5e <__gethex+0x126>
 8009f68:	230a      	movs	r3, #10
 8009f6a:	435d      	muls	r5, r3
 8009f6c:	182d      	adds	r5, r5, r0
 8009f6e:	e7d4      	b.n	8009f1a <__gethex+0xe2>
 8009f70:	0026      	movs	r6, r4
 8009f72:	e7e0      	b.n	8009f36 <__gethex+0xfe>
 8009f74:	9b00      	ldr	r3, [sp, #0]
 8009f76:	9902      	ldr	r1, [sp, #8]
 8009f78:	1ae3      	subs	r3, r4, r3
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	2b07      	cmp	r3, #7
 8009f7e:	dc0a      	bgt.n	8009f96 <__gethex+0x15e>
 8009f80:	9803      	ldr	r0, [sp, #12]
 8009f82:	f7fd ff11 	bl	8007da8 <_Balloc>
 8009f86:	1e05      	subs	r5, r0, #0
 8009f88:	d108      	bne.n	8009f9c <__gethex+0x164>
 8009f8a:	002a      	movs	r2, r5
 8009f8c:	21e4      	movs	r1, #228	@ 0xe4
 8009f8e:	4b5f      	ldr	r3, [pc, #380]	@ (800a10c <__gethex+0x2d4>)
 8009f90:	485f      	ldr	r0, [pc, #380]	@ (800a110 <__gethex+0x2d8>)
 8009f92:	f7ff fe9d 	bl	8009cd0 <__assert_func>
 8009f96:	3101      	adds	r1, #1
 8009f98:	105b      	asrs	r3, r3, #1
 8009f9a:	e7ef      	b.n	8009f7c <__gethex+0x144>
 8009f9c:	0003      	movs	r3, r0
 8009f9e:	3314      	adds	r3, #20
 8009fa0:	9302      	str	r3, [sp, #8]
 8009fa2:	9305      	str	r3, [sp, #20]
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	001e      	movs	r6, r3
 8009fa8:	9304      	str	r3, [sp, #16]
 8009faa:	9b00      	ldr	r3, [sp, #0]
 8009fac:	42a3      	cmp	r3, r4
 8009fae:	d338      	bcc.n	800a022 <__gethex+0x1ea>
 8009fb0:	9c05      	ldr	r4, [sp, #20]
 8009fb2:	9b02      	ldr	r3, [sp, #8]
 8009fb4:	c440      	stmia	r4!, {r6}
 8009fb6:	1ae4      	subs	r4, r4, r3
 8009fb8:	10a4      	asrs	r4, r4, #2
 8009fba:	0030      	movs	r0, r6
 8009fbc:	612c      	str	r4, [r5, #16]
 8009fbe:	f7fd ffeb 	bl	8007f98 <__hi0bits>
 8009fc2:	9b01      	ldr	r3, [sp, #4]
 8009fc4:	0164      	lsls	r4, r4, #5
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	1a26      	subs	r6, r4, r0
 8009fca:	9300      	str	r3, [sp, #0]
 8009fcc:	429e      	cmp	r6, r3
 8009fce:	dd52      	ble.n	800a076 <__gethex+0x23e>
 8009fd0:	1af6      	subs	r6, r6, r3
 8009fd2:	0031      	movs	r1, r6
 8009fd4:	0028      	movs	r0, r5
 8009fd6:	f7fe fb8e 	bl	80086f6 <__any_on>
 8009fda:	1e04      	subs	r4, r0, #0
 8009fdc:	d00f      	beq.n	8009ffe <__gethex+0x1c6>
 8009fde:	2401      	movs	r4, #1
 8009fe0:	231f      	movs	r3, #31
 8009fe2:	0020      	movs	r0, r4
 8009fe4:	1e72      	subs	r2, r6, #1
 8009fe6:	4013      	ands	r3, r2
 8009fe8:	4098      	lsls	r0, r3
 8009fea:	0003      	movs	r3, r0
 8009fec:	1151      	asrs	r1, r2, #5
 8009fee:	9802      	ldr	r0, [sp, #8]
 8009ff0:	0089      	lsls	r1, r1, #2
 8009ff2:	5809      	ldr	r1, [r1, r0]
 8009ff4:	4219      	tst	r1, r3
 8009ff6:	d002      	beq.n	8009ffe <__gethex+0x1c6>
 8009ff8:	42a2      	cmp	r2, r4
 8009ffa:	dc34      	bgt.n	800a066 <__gethex+0x22e>
 8009ffc:	2402      	movs	r4, #2
 8009ffe:	0031      	movs	r1, r6
 800a000:	0028      	movs	r0, r5
 800a002:	f7ff feb0 	bl	8009d66 <rshift>
 800a006:	19bf      	adds	r7, r7, r6
 800a008:	9b01      	ldr	r3, [sp, #4]
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	42bb      	cmp	r3, r7
 800a00e:	da42      	bge.n	800a096 <__gethex+0x25e>
 800a010:	0029      	movs	r1, r5
 800a012:	9803      	ldr	r0, [sp, #12]
 800a014:	f7fd ff0c 	bl	8007e30 <_Bfree>
 800a018:	2300      	movs	r3, #0
 800a01a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a01c:	26a3      	movs	r6, #163	@ 0xa3
 800a01e:	6013      	str	r3, [r2, #0]
 800a020:	e794      	b.n	8009f4c <__gethex+0x114>
 800a022:	3c01      	subs	r4, #1
 800a024:	7823      	ldrb	r3, [r4, #0]
 800a026:	2b2e      	cmp	r3, #46	@ 0x2e
 800a028:	d012      	beq.n	800a050 <__gethex+0x218>
 800a02a:	9b04      	ldr	r3, [sp, #16]
 800a02c:	2b20      	cmp	r3, #32
 800a02e:	d104      	bne.n	800a03a <__gethex+0x202>
 800a030:	9b05      	ldr	r3, [sp, #20]
 800a032:	c340      	stmia	r3!, {r6}
 800a034:	2600      	movs	r6, #0
 800a036:	9305      	str	r3, [sp, #20]
 800a038:	9604      	str	r6, [sp, #16]
 800a03a:	7820      	ldrb	r0, [r4, #0]
 800a03c:	f7ff fee6 	bl	8009e0c <__hexdig_fun>
 800a040:	230f      	movs	r3, #15
 800a042:	4018      	ands	r0, r3
 800a044:	9b04      	ldr	r3, [sp, #16]
 800a046:	4098      	lsls	r0, r3
 800a048:	3304      	adds	r3, #4
 800a04a:	4306      	orrs	r6, r0
 800a04c:	9304      	str	r3, [sp, #16]
 800a04e:	e7ac      	b.n	8009faa <__gethex+0x172>
 800a050:	9b00      	ldr	r3, [sp, #0]
 800a052:	42a3      	cmp	r3, r4
 800a054:	d8e9      	bhi.n	800a02a <__gethex+0x1f2>
 800a056:	2201      	movs	r2, #1
 800a058:	0020      	movs	r0, r4
 800a05a:	492b      	ldr	r1, [pc, #172]	@ (800a108 <__gethex+0x2d0>)
 800a05c:	f7ff fde0 	bl	8009c20 <strncmp>
 800a060:	2800      	cmp	r0, #0
 800a062:	d1e2      	bne.n	800a02a <__gethex+0x1f2>
 800a064:	e7a1      	b.n	8009faa <__gethex+0x172>
 800a066:	0028      	movs	r0, r5
 800a068:	1eb1      	subs	r1, r6, #2
 800a06a:	f7fe fb44 	bl	80086f6 <__any_on>
 800a06e:	2800      	cmp	r0, #0
 800a070:	d0c4      	beq.n	8009ffc <__gethex+0x1c4>
 800a072:	2403      	movs	r4, #3
 800a074:	e7c3      	b.n	8009ffe <__gethex+0x1c6>
 800a076:	9b00      	ldr	r3, [sp, #0]
 800a078:	2400      	movs	r4, #0
 800a07a:	429e      	cmp	r6, r3
 800a07c:	dac4      	bge.n	800a008 <__gethex+0x1d0>
 800a07e:	1b9e      	subs	r6, r3, r6
 800a080:	0029      	movs	r1, r5
 800a082:	0032      	movs	r2, r6
 800a084:	9803      	ldr	r0, [sp, #12]
 800a086:	f7fe f8fd 	bl	8008284 <__lshift>
 800a08a:	0003      	movs	r3, r0
 800a08c:	3314      	adds	r3, #20
 800a08e:	0005      	movs	r5, r0
 800a090:	1bbf      	subs	r7, r7, r6
 800a092:	9302      	str	r3, [sp, #8]
 800a094:	e7b8      	b.n	800a008 <__gethex+0x1d0>
 800a096:	9b01      	ldr	r3, [sp, #4]
 800a098:	685e      	ldr	r6, [r3, #4]
 800a09a:	42be      	cmp	r6, r7
 800a09c:	dd6f      	ble.n	800a17e <__gethex+0x346>
 800a09e:	9b00      	ldr	r3, [sp, #0]
 800a0a0:	1bf6      	subs	r6, r6, r7
 800a0a2:	42b3      	cmp	r3, r6
 800a0a4:	dc36      	bgt.n	800a114 <__gethex+0x2dc>
 800a0a6:	9b01      	ldr	r3, [sp, #4]
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	2b02      	cmp	r3, #2
 800a0ac:	d024      	beq.n	800a0f8 <__gethex+0x2c0>
 800a0ae:	2b03      	cmp	r3, #3
 800a0b0:	d026      	beq.n	800a100 <__gethex+0x2c8>
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d117      	bne.n	800a0e6 <__gethex+0x2ae>
 800a0b6:	9b00      	ldr	r3, [sp, #0]
 800a0b8:	42b3      	cmp	r3, r6
 800a0ba:	d114      	bne.n	800a0e6 <__gethex+0x2ae>
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d10b      	bne.n	800a0d8 <__gethex+0x2a0>
 800a0c0:	9b01      	ldr	r3, [sp, #4]
 800a0c2:	9a07      	ldr	r2, [sp, #28]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	2662      	movs	r6, #98	@ 0x62
 800a0c8:	6013      	str	r3, [r2, #0]
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	9a02      	ldr	r2, [sp, #8]
 800a0ce:	612b      	str	r3, [r5, #16]
 800a0d0:	6013      	str	r3, [r2, #0]
 800a0d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0d4:	601d      	str	r5, [r3, #0]
 800a0d6:	e739      	b.n	8009f4c <__gethex+0x114>
 800a0d8:	9900      	ldr	r1, [sp, #0]
 800a0da:	0028      	movs	r0, r5
 800a0dc:	3901      	subs	r1, #1
 800a0de:	f7fe fb0a 	bl	80086f6 <__any_on>
 800a0e2:	2800      	cmp	r0, #0
 800a0e4:	d1ec      	bne.n	800a0c0 <__gethex+0x288>
 800a0e6:	0029      	movs	r1, r5
 800a0e8:	9803      	ldr	r0, [sp, #12]
 800a0ea:	f7fd fea1 	bl	8007e30 <_Bfree>
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0f2:	2650      	movs	r6, #80	@ 0x50
 800a0f4:	6013      	str	r3, [r2, #0]
 800a0f6:	e729      	b.n	8009f4c <__gethex+0x114>
 800a0f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1f3      	bne.n	800a0e6 <__gethex+0x2ae>
 800a0fe:	e7df      	b.n	800a0c0 <__gethex+0x288>
 800a100:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1dc      	bne.n	800a0c0 <__gethex+0x288>
 800a106:	e7ee      	b.n	800a0e6 <__gethex+0x2ae>
 800a108:	0800a950 	.word	0x0800a950
 800a10c:	0800a7e9 	.word	0x0800a7e9
 800a110:	0800aafe 	.word	0x0800aafe
 800a114:	1e77      	subs	r7, r6, #1
 800a116:	2c00      	cmp	r4, #0
 800a118:	d12f      	bne.n	800a17a <__gethex+0x342>
 800a11a:	2f00      	cmp	r7, #0
 800a11c:	d004      	beq.n	800a128 <__gethex+0x2f0>
 800a11e:	0039      	movs	r1, r7
 800a120:	0028      	movs	r0, r5
 800a122:	f7fe fae8 	bl	80086f6 <__any_on>
 800a126:	0004      	movs	r4, r0
 800a128:	231f      	movs	r3, #31
 800a12a:	117a      	asrs	r2, r7, #5
 800a12c:	401f      	ands	r7, r3
 800a12e:	3b1e      	subs	r3, #30
 800a130:	40bb      	lsls	r3, r7
 800a132:	9902      	ldr	r1, [sp, #8]
 800a134:	0092      	lsls	r2, r2, #2
 800a136:	5852      	ldr	r2, [r2, r1]
 800a138:	421a      	tst	r2, r3
 800a13a:	d001      	beq.n	800a140 <__gethex+0x308>
 800a13c:	2302      	movs	r3, #2
 800a13e:	431c      	orrs	r4, r3
 800a140:	9b00      	ldr	r3, [sp, #0]
 800a142:	0031      	movs	r1, r6
 800a144:	1b9b      	subs	r3, r3, r6
 800a146:	2602      	movs	r6, #2
 800a148:	0028      	movs	r0, r5
 800a14a:	9300      	str	r3, [sp, #0]
 800a14c:	f7ff fe0b 	bl	8009d66 <rshift>
 800a150:	9b01      	ldr	r3, [sp, #4]
 800a152:	685f      	ldr	r7, [r3, #4]
 800a154:	2c00      	cmp	r4, #0
 800a156:	d03f      	beq.n	800a1d8 <__gethex+0x3a0>
 800a158:	9b01      	ldr	r3, [sp, #4]
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	2b02      	cmp	r3, #2
 800a15e:	d010      	beq.n	800a182 <__gethex+0x34a>
 800a160:	2b03      	cmp	r3, #3
 800a162:	d012      	beq.n	800a18a <__gethex+0x352>
 800a164:	2b01      	cmp	r3, #1
 800a166:	d106      	bne.n	800a176 <__gethex+0x33e>
 800a168:	07a2      	lsls	r2, r4, #30
 800a16a:	d504      	bpl.n	800a176 <__gethex+0x33e>
 800a16c:	9a02      	ldr	r2, [sp, #8]
 800a16e:	6812      	ldr	r2, [r2, #0]
 800a170:	4314      	orrs	r4, r2
 800a172:	421c      	tst	r4, r3
 800a174:	d10c      	bne.n	800a190 <__gethex+0x358>
 800a176:	2310      	movs	r3, #16
 800a178:	e02d      	b.n	800a1d6 <__gethex+0x39e>
 800a17a:	2401      	movs	r4, #1
 800a17c:	e7d4      	b.n	800a128 <__gethex+0x2f0>
 800a17e:	2601      	movs	r6, #1
 800a180:	e7e8      	b.n	800a154 <__gethex+0x31c>
 800a182:	2301      	movs	r3, #1
 800a184:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a186:	1a9b      	subs	r3, r3, r2
 800a188:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a18a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d0f2      	beq.n	800a176 <__gethex+0x33e>
 800a190:	692b      	ldr	r3, [r5, #16]
 800a192:	2000      	movs	r0, #0
 800a194:	9302      	str	r3, [sp, #8]
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	9304      	str	r3, [sp, #16]
 800a19a:	002b      	movs	r3, r5
 800a19c:	9a04      	ldr	r2, [sp, #16]
 800a19e:	3314      	adds	r3, #20
 800a1a0:	1899      	adds	r1, r3, r2
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	1c54      	adds	r4, r2, #1
 800a1a6:	d01c      	beq.n	800a1e2 <__gethex+0x3aa>
 800a1a8:	3201      	adds	r2, #1
 800a1aa:	601a      	str	r2, [r3, #0]
 800a1ac:	002b      	movs	r3, r5
 800a1ae:	3314      	adds	r3, #20
 800a1b0:	2e02      	cmp	r6, #2
 800a1b2:	d13f      	bne.n	800a234 <__gethex+0x3fc>
 800a1b4:	9a01      	ldr	r2, [sp, #4]
 800a1b6:	9900      	ldr	r1, [sp, #0]
 800a1b8:	6812      	ldr	r2, [r2, #0]
 800a1ba:	3a01      	subs	r2, #1
 800a1bc:	428a      	cmp	r2, r1
 800a1be:	d109      	bne.n	800a1d4 <__gethex+0x39c>
 800a1c0:	000a      	movs	r2, r1
 800a1c2:	201f      	movs	r0, #31
 800a1c4:	4010      	ands	r0, r2
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	4082      	lsls	r2, r0
 800a1ca:	1149      	asrs	r1, r1, #5
 800a1cc:	0089      	lsls	r1, r1, #2
 800a1ce:	58cb      	ldr	r3, [r1, r3]
 800a1d0:	4213      	tst	r3, r2
 800a1d2:	d13d      	bne.n	800a250 <__gethex+0x418>
 800a1d4:	2320      	movs	r3, #32
 800a1d6:	431e      	orrs	r6, r3
 800a1d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1da:	601d      	str	r5, [r3, #0]
 800a1dc:	9b07      	ldr	r3, [sp, #28]
 800a1de:	601f      	str	r7, [r3, #0]
 800a1e0:	e6b4      	b.n	8009f4c <__gethex+0x114>
 800a1e2:	c301      	stmia	r3!, {r0}
 800a1e4:	4299      	cmp	r1, r3
 800a1e6:	d8dc      	bhi.n	800a1a2 <__gethex+0x36a>
 800a1e8:	68ab      	ldr	r3, [r5, #8]
 800a1ea:	9a02      	ldr	r2, [sp, #8]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	db18      	blt.n	800a222 <__gethex+0x3ea>
 800a1f0:	6869      	ldr	r1, [r5, #4]
 800a1f2:	9803      	ldr	r0, [sp, #12]
 800a1f4:	3101      	adds	r1, #1
 800a1f6:	f7fd fdd7 	bl	8007da8 <_Balloc>
 800a1fa:	1e04      	subs	r4, r0, #0
 800a1fc:	d104      	bne.n	800a208 <__gethex+0x3d0>
 800a1fe:	0022      	movs	r2, r4
 800a200:	2184      	movs	r1, #132	@ 0x84
 800a202:	4b1d      	ldr	r3, [pc, #116]	@ (800a278 <__gethex+0x440>)
 800a204:	481d      	ldr	r0, [pc, #116]	@ (800a27c <__gethex+0x444>)
 800a206:	e6c4      	b.n	8009f92 <__gethex+0x15a>
 800a208:	0029      	movs	r1, r5
 800a20a:	692a      	ldr	r2, [r5, #16]
 800a20c:	310c      	adds	r1, #12
 800a20e:	3202      	adds	r2, #2
 800a210:	0092      	lsls	r2, r2, #2
 800a212:	300c      	adds	r0, #12
 800a214:	f7ff fd4c 	bl	8009cb0 <memcpy>
 800a218:	0029      	movs	r1, r5
 800a21a:	9803      	ldr	r0, [sp, #12]
 800a21c:	f7fd fe08 	bl	8007e30 <_Bfree>
 800a220:	0025      	movs	r5, r4
 800a222:	692b      	ldr	r3, [r5, #16]
 800a224:	1c5a      	adds	r2, r3, #1
 800a226:	612a      	str	r2, [r5, #16]
 800a228:	2201      	movs	r2, #1
 800a22a:	3304      	adds	r3, #4
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	18eb      	adds	r3, r5, r3
 800a230:	605a      	str	r2, [r3, #4]
 800a232:	e7bb      	b.n	800a1ac <__gethex+0x374>
 800a234:	692a      	ldr	r2, [r5, #16]
 800a236:	9902      	ldr	r1, [sp, #8]
 800a238:	428a      	cmp	r2, r1
 800a23a:	dd0b      	ble.n	800a254 <__gethex+0x41c>
 800a23c:	2101      	movs	r1, #1
 800a23e:	0028      	movs	r0, r5
 800a240:	f7ff fd91 	bl	8009d66 <rshift>
 800a244:	9b01      	ldr	r3, [sp, #4]
 800a246:	3701      	adds	r7, #1
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	42bb      	cmp	r3, r7
 800a24c:	da00      	bge.n	800a250 <__gethex+0x418>
 800a24e:	e6df      	b.n	800a010 <__gethex+0x1d8>
 800a250:	2601      	movs	r6, #1
 800a252:	e7bf      	b.n	800a1d4 <__gethex+0x39c>
 800a254:	221f      	movs	r2, #31
 800a256:	9c00      	ldr	r4, [sp, #0]
 800a258:	9900      	ldr	r1, [sp, #0]
 800a25a:	4014      	ands	r4, r2
 800a25c:	4211      	tst	r1, r2
 800a25e:	d0f7      	beq.n	800a250 <__gethex+0x418>
 800a260:	9a04      	ldr	r2, [sp, #16]
 800a262:	189b      	adds	r3, r3, r2
 800a264:	3b04      	subs	r3, #4
 800a266:	6818      	ldr	r0, [r3, #0]
 800a268:	f7fd fe96 	bl	8007f98 <__hi0bits>
 800a26c:	2320      	movs	r3, #32
 800a26e:	1b1b      	subs	r3, r3, r4
 800a270:	4298      	cmp	r0, r3
 800a272:	dbe3      	blt.n	800a23c <__gethex+0x404>
 800a274:	e7ec      	b.n	800a250 <__gethex+0x418>
 800a276:	46c0      	nop			@ (mov r8, r8)
 800a278:	0800a7e9 	.word	0x0800a7e9
 800a27c:	0800aafe 	.word	0x0800aafe

0800a280 <L_shift>:
 800a280:	2308      	movs	r3, #8
 800a282:	b570      	push	{r4, r5, r6, lr}
 800a284:	2520      	movs	r5, #32
 800a286:	1a9a      	subs	r2, r3, r2
 800a288:	0092      	lsls	r2, r2, #2
 800a28a:	1aad      	subs	r5, r5, r2
 800a28c:	6843      	ldr	r3, [r0, #4]
 800a28e:	6804      	ldr	r4, [r0, #0]
 800a290:	001e      	movs	r6, r3
 800a292:	40ae      	lsls	r6, r5
 800a294:	40d3      	lsrs	r3, r2
 800a296:	4334      	orrs	r4, r6
 800a298:	6004      	str	r4, [r0, #0]
 800a29a:	6043      	str	r3, [r0, #4]
 800a29c:	3004      	adds	r0, #4
 800a29e:	4288      	cmp	r0, r1
 800a2a0:	d3f4      	bcc.n	800a28c <L_shift+0xc>
 800a2a2:	bd70      	pop	{r4, r5, r6, pc}

0800a2a4 <__match>:
 800a2a4:	b530      	push	{r4, r5, lr}
 800a2a6:	6803      	ldr	r3, [r0, #0]
 800a2a8:	780c      	ldrb	r4, [r1, #0]
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	2c00      	cmp	r4, #0
 800a2ae:	d102      	bne.n	800a2b6 <__match+0x12>
 800a2b0:	6003      	str	r3, [r0, #0]
 800a2b2:	2001      	movs	r0, #1
 800a2b4:	bd30      	pop	{r4, r5, pc}
 800a2b6:	781a      	ldrb	r2, [r3, #0]
 800a2b8:	0015      	movs	r5, r2
 800a2ba:	3d41      	subs	r5, #65	@ 0x41
 800a2bc:	2d19      	cmp	r5, #25
 800a2be:	d800      	bhi.n	800a2c2 <__match+0x1e>
 800a2c0:	3220      	adds	r2, #32
 800a2c2:	3101      	adds	r1, #1
 800a2c4:	42a2      	cmp	r2, r4
 800a2c6:	d0ef      	beq.n	800a2a8 <__match+0x4>
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	e7f3      	b.n	800a2b4 <__match+0x10>

0800a2cc <__hexnan>:
 800a2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2ce:	680b      	ldr	r3, [r1, #0]
 800a2d0:	b08b      	sub	sp, #44	@ 0x2c
 800a2d2:	9201      	str	r2, [sp, #4]
 800a2d4:	9901      	ldr	r1, [sp, #4]
 800a2d6:	115a      	asrs	r2, r3, #5
 800a2d8:	0092      	lsls	r2, r2, #2
 800a2da:	188a      	adds	r2, r1, r2
 800a2dc:	9202      	str	r2, [sp, #8]
 800a2de:	0019      	movs	r1, r3
 800a2e0:	221f      	movs	r2, #31
 800a2e2:	4011      	ands	r1, r2
 800a2e4:	9008      	str	r0, [sp, #32]
 800a2e6:	9106      	str	r1, [sp, #24]
 800a2e8:	4213      	tst	r3, r2
 800a2ea:	d002      	beq.n	800a2f2 <__hexnan+0x26>
 800a2ec:	9b02      	ldr	r3, [sp, #8]
 800a2ee:	3304      	adds	r3, #4
 800a2f0:	9302      	str	r3, [sp, #8]
 800a2f2:	9b02      	ldr	r3, [sp, #8]
 800a2f4:	2500      	movs	r5, #0
 800a2f6:	1f1f      	subs	r7, r3, #4
 800a2f8:	003e      	movs	r6, r7
 800a2fa:	003c      	movs	r4, r7
 800a2fc:	9b08      	ldr	r3, [sp, #32]
 800a2fe:	603d      	str	r5, [r7, #0]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	9507      	str	r5, [sp, #28]
 800a304:	9305      	str	r3, [sp, #20]
 800a306:	9503      	str	r5, [sp, #12]
 800a308:	9b05      	ldr	r3, [sp, #20]
 800a30a:	3301      	adds	r3, #1
 800a30c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a30e:	9b05      	ldr	r3, [sp, #20]
 800a310:	785b      	ldrb	r3, [r3, #1]
 800a312:	9304      	str	r3, [sp, #16]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d028      	beq.n	800a36a <__hexnan+0x9e>
 800a318:	9804      	ldr	r0, [sp, #16]
 800a31a:	f7ff fd77 	bl	8009e0c <__hexdig_fun>
 800a31e:	2800      	cmp	r0, #0
 800a320:	d155      	bne.n	800a3ce <__hexnan+0x102>
 800a322:	9b04      	ldr	r3, [sp, #16]
 800a324:	2b20      	cmp	r3, #32
 800a326:	d819      	bhi.n	800a35c <__hexnan+0x90>
 800a328:	9b03      	ldr	r3, [sp, #12]
 800a32a:	9a07      	ldr	r2, [sp, #28]
 800a32c:	4293      	cmp	r3, r2
 800a32e:	dd12      	ble.n	800a356 <__hexnan+0x8a>
 800a330:	42b4      	cmp	r4, r6
 800a332:	d206      	bcs.n	800a342 <__hexnan+0x76>
 800a334:	2d07      	cmp	r5, #7
 800a336:	dc04      	bgt.n	800a342 <__hexnan+0x76>
 800a338:	002a      	movs	r2, r5
 800a33a:	0031      	movs	r1, r6
 800a33c:	0020      	movs	r0, r4
 800a33e:	f7ff ff9f 	bl	800a280 <L_shift>
 800a342:	9b01      	ldr	r3, [sp, #4]
 800a344:	2508      	movs	r5, #8
 800a346:	429c      	cmp	r4, r3
 800a348:	d905      	bls.n	800a356 <__hexnan+0x8a>
 800a34a:	1f26      	subs	r6, r4, #4
 800a34c:	2500      	movs	r5, #0
 800a34e:	0034      	movs	r4, r6
 800a350:	9b03      	ldr	r3, [sp, #12]
 800a352:	6035      	str	r5, [r6, #0]
 800a354:	9307      	str	r3, [sp, #28]
 800a356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a358:	9305      	str	r3, [sp, #20]
 800a35a:	e7d5      	b.n	800a308 <__hexnan+0x3c>
 800a35c:	9b04      	ldr	r3, [sp, #16]
 800a35e:	2b29      	cmp	r3, #41	@ 0x29
 800a360:	d15a      	bne.n	800a418 <__hexnan+0x14c>
 800a362:	9b05      	ldr	r3, [sp, #20]
 800a364:	9a08      	ldr	r2, [sp, #32]
 800a366:	3302      	adds	r3, #2
 800a368:	6013      	str	r3, [r2, #0]
 800a36a:	9b03      	ldr	r3, [sp, #12]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d053      	beq.n	800a418 <__hexnan+0x14c>
 800a370:	42b4      	cmp	r4, r6
 800a372:	d206      	bcs.n	800a382 <__hexnan+0xb6>
 800a374:	2d07      	cmp	r5, #7
 800a376:	dc04      	bgt.n	800a382 <__hexnan+0xb6>
 800a378:	002a      	movs	r2, r5
 800a37a:	0031      	movs	r1, r6
 800a37c:	0020      	movs	r0, r4
 800a37e:	f7ff ff7f 	bl	800a280 <L_shift>
 800a382:	9b01      	ldr	r3, [sp, #4]
 800a384:	429c      	cmp	r4, r3
 800a386:	d936      	bls.n	800a3f6 <__hexnan+0x12a>
 800a388:	001a      	movs	r2, r3
 800a38a:	0023      	movs	r3, r4
 800a38c:	cb02      	ldmia	r3!, {r1}
 800a38e:	c202      	stmia	r2!, {r1}
 800a390:	429f      	cmp	r7, r3
 800a392:	d2fb      	bcs.n	800a38c <__hexnan+0xc0>
 800a394:	9b02      	ldr	r3, [sp, #8]
 800a396:	1c61      	adds	r1, r4, #1
 800a398:	1eda      	subs	r2, r3, #3
 800a39a:	2304      	movs	r3, #4
 800a39c:	4291      	cmp	r1, r2
 800a39e:	d805      	bhi.n	800a3ac <__hexnan+0xe0>
 800a3a0:	9b02      	ldr	r3, [sp, #8]
 800a3a2:	3b04      	subs	r3, #4
 800a3a4:	1b1b      	subs	r3, r3, r4
 800a3a6:	089b      	lsrs	r3, r3, #2
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	9a01      	ldr	r2, [sp, #4]
 800a3ae:	18d3      	adds	r3, r2, r3
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	c304      	stmia	r3!, {r2}
 800a3b4:	429f      	cmp	r7, r3
 800a3b6:	d2fc      	bcs.n	800a3b2 <__hexnan+0xe6>
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d104      	bne.n	800a3c8 <__hexnan+0xfc>
 800a3be:	9b01      	ldr	r3, [sp, #4]
 800a3c0:	429f      	cmp	r7, r3
 800a3c2:	d127      	bne.n	800a414 <__hexnan+0x148>
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	603b      	str	r3, [r7, #0]
 800a3c8:	2005      	movs	r0, #5
 800a3ca:	b00b      	add	sp, #44	@ 0x2c
 800a3cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3ce:	9b03      	ldr	r3, [sp, #12]
 800a3d0:	3501      	adds	r5, #1
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	9303      	str	r3, [sp, #12]
 800a3d6:	2d08      	cmp	r5, #8
 800a3d8:	dd06      	ble.n	800a3e8 <__hexnan+0x11c>
 800a3da:	9b01      	ldr	r3, [sp, #4]
 800a3dc:	429c      	cmp	r4, r3
 800a3de:	d9ba      	bls.n	800a356 <__hexnan+0x8a>
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	2501      	movs	r5, #1
 800a3e4:	3c04      	subs	r4, #4
 800a3e6:	6023      	str	r3, [r4, #0]
 800a3e8:	220f      	movs	r2, #15
 800a3ea:	6823      	ldr	r3, [r4, #0]
 800a3ec:	4010      	ands	r0, r2
 800a3ee:	011b      	lsls	r3, r3, #4
 800a3f0:	4303      	orrs	r3, r0
 800a3f2:	6023      	str	r3, [r4, #0]
 800a3f4:	e7af      	b.n	800a356 <__hexnan+0x8a>
 800a3f6:	9b06      	ldr	r3, [sp, #24]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d0dd      	beq.n	800a3b8 <__hexnan+0xec>
 800a3fc:	2320      	movs	r3, #32
 800a3fe:	9a06      	ldr	r2, [sp, #24]
 800a400:	9902      	ldr	r1, [sp, #8]
 800a402:	1a9b      	subs	r3, r3, r2
 800a404:	2201      	movs	r2, #1
 800a406:	4252      	negs	r2, r2
 800a408:	40da      	lsrs	r2, r3
 800a40a:	3904      	subs	r1, #4
 800a40c:	680b      	ldr	r3, [r1, #0]
 800a40e:	4013      	ands	r3, r2
 800a410:	600b      	str	r3, [r1, #0]
 800a412:	e7d1      	b.n	800a3b8 <__hexnan+0xec>
 800a414:	3f04      	subs	r7, #4
 800a416:	e7cf      	b.n	800a3b8 <__hexnan+0xec>
 800a418:	2004      	movs	r0, #4
 800a41a:	e7d6      	b.n	800a3ca <__hexnan+0xfe>

0800a41c <__ascii_mbtowc>:
 800a41c:	b082      	sub	sp, #8
 800a41e:	2900      	cmp	r1, #0
 800a420:	d100      	bne.n	800a424 <__ascii_mbtowc+0x8>
 800a422:	a901      	add	r1, sp, #4
 800a424:	1e10      	subs	r0, r2, #0
 800a426:	d006      	beq.n	800a436 <__ascii_mbtowc+0x1a>
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d006      	beq.n	800a43a <__ascii_mbtowc+0x1e>
 800a42c:	7813      	ldrb	r3, [r2, #0]
 800a42e:	600b      	str	r3, [r1, #0]
 800a430:	7810      	ldrb	r0, [r2, #0]
 800a432:	1e43      	subs	r3, r0, #1
 800a434:	4198      	sbcs	r0, r3
 800a436:	b002      	add	sp, #8
 800a438:	4770      	bx	lr
 800a43a:	2002      	movs	r0, #2
 800a43c:	4240      	negs	r0, r0
 800a43e:	e7fa      	b.n	800a436 <__ascii_mbtowc+0x1a>

0800a440 <_realloc_r>:
 800a440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a442:	0006      	movs	r6, r0
 800a444:	000c      	movs	r4, r1
 800a446:	0015      	movs	r5, r2
 800a448:	2900      	cmp	r1, #0
 800a44a:	d105      	bne.n	800a458 <_realloc_r+0x18>
 800a44c:	0011      	movs	r1, r2
 800a44e:	f7fd fc1b 	bl	8007c88 <_malloc_r>
 800a452:	0004      	movs	r4, r0
 800a454:	0020      	movs	r0, r4
 800a456:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a458:	2a00      	cmp	r2, #0
 800a45a:	d103      	bne.n	800a464 <_realloc_r+0x24>
 800a45c:	f7fd fb9e 	bl	8007b9c <_free_r>
 800a460:	2400      	movs	r4, #0
 800a462:	e7f7      	b.n	800a454 <_realloc_r+0x14>
 800a464:	f000 f83f 	bl	800a4e6 <_malloc_usable_size_r>
 800a468:	0007      	movs	r7, r0
 800a46a:	4285      	cmp	r5, r0
 800a46c:	d802      	bhi.n	800a474 <_realloc_r+0x34>
 800a46e:	0843      	lsrs	r3, r0, #1
 800a470:	42ab      	cmp	r3, r5
 800a472:	d3ef      	bcc.n	800a454 <_realloc_r+0x14>
 800a474:	0029      	movs	r1, r5
 800a476:	0030      	movs	r0, r6
 800a478:	f7fd fc06 	bl	8007c88 <_malloc_r>
 800a47c:	9001      	str	r0, [sp, #4]
 800a47e:	2800      	cmp	r0, #0
 800a480:	d0ee      	beq.n	800a460 <_realloc_r+0x20>
 800a482:	002a      	movs	r2, r5
 800a484:	42bd      	cmp	r5, r7
 800a486:	d900      	bls.n	800a48a <_realloc_r+0x4a>
 800a488:	003a      	movs	r2, r7
 800a48a:	0021      	movs	r1, r4
 800a48c:	9801      	ldr	r0, [sp, #4]
 800a48e:	f7ff fc0f 	bl	8009cb0 <memcpy>
 800a492:	0021      	movs	r1, r4
 800a494:	0030      	movs	r0, r6
 800a496:	f7fd fb81 	bl	8007b9c <_free_r>
 800a49a:	9c01      	ldr	r4, [sp, #4]
 800a49c:	e7da      	b.n	800a454 <_realloc_r+0x14>

0800a49e <__ascii_wctomb>:
 800a49e:	0003      	movs	r3, r0
 800a4a0:	1e08      	subs	r0, r1, #0
 800a4a2:	d005      	beq.n	800a4b0 <__ascii_wctomb+0x12>
 800a4a4:	2aff      	cmp	r2, #255	@ 0xff
 800a4a6:	d904      	bls.n	800a4b2 <__ascii_wctomb+0x14>
 800a4a8:	228a      	movs	r2, #138	@ 0x8a
 800a4aa:	2001      	movs	r0, #1
 800a4ac:	601a      	str	r2, [r3, #0]
 800a4ae:	4240      	negs	r0, r0
 800a4b0:	4770      	bx	lr
 800a4b2:	2001      	movs	r0, #1
 800a4b4:	700a      	strb	r2, [r1, #0]
 800a4b6:	e7fb      	b.n	800a4b0 <__ascii_wctomb+0x12>

0800a4b8 <fiprintf>:
 800a4b8:	b40e      	push	{r1, r2, r3}
 800a4ba:	b517      	push	{r0, r1, r2, r4, lr}
 800a4bc:	4c05      	ldr	r4, [pc, #20]	@ (800a4d4 <fiprintf+0x1c>)
 800a4be:	ab05      	add	r3, sp, #20
 800a4c0:	cb04      	ldmia	r3!, {r2}
 800a4c2:	0001      	movs	r1, r0
 800a4c4:	6820      	ldr	r0, [r4, #0]
 800a4c6:	9301      	str	r3, [sp, #4]
 800a4c8:	f7ff f95e 	bl	8009788 <_vfiprintf_r>
 800a4cc:	bc1e      	pop	{r1, r2, r3, r4}
 800a4ce:	bc08      	pop	{r3}
 800a4d0:	b003      	add	sp, #12
 800a4d2:	4718      	bx	r3
 800a4d4:	20000018 	.word	0x20000018

0800a4d8 <abort>:
 800a4d8:	2006      	movs	r0, #6
 800a4da:	b510      	push	{r4, lr}
 800a4dc:	f000 f834 	bl	800a548 <raise>
 800a4e0:	2001      	movs	r0, #1
 800a4e2:	f7f8 fe83 	bl	80031ec <_exit>

0800a4e6 <_malloc_usable_size_r>:
 800a4e6:	1f0b      	subs	r3, r1, #4
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	1f18      	subs	r0, r3, #4
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	da01      	bge.n	800a4f4 <_malloc_usable_size_r+0xe>
 800a4f0:	580b      	ldr	r3, [r1, r0]
 800a4f2:	18c0      	adds	r0, r0, r3
 800a4f4:	4770      	bx	lr

0800a4f6 <_raise_r>:
 800a4f6:	b570      	push	{r4, r5, r6, lr}
 800a4f8:	0004      	movs	r4, r0
 800a4fa:	000d      	movs	r5, r1
 800a4fc:	291f      	cmp	r1, #31
 800a4fe:	d904      	bls.n	800a50a <_raise_r+0x14>
 800a500:	2316      	movs	r3, #22
 800a502:	6003      	str	r3, [r0, #0]
 800a504:	2001      	movs	r0, #1
 800a506:	4240      	negs	r0, r0
 800a508:	bd70      	pop	{r4, r5, r6, pc}
 800a50a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d004      	beq.n	800a51a <_raise_r+0x24>
 800a510:	008a      	lsls	r2, r1, #2
 800a512:	189b      	adds	r3, r3, r2
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	2a00      	cmp	r2, #0
 800a518:	d108      	bne.n	800a52c <_raise_r+0x36>
 800a51a:	0020      	movs	r0, r4
 800a51c:	f000 f830 	bl	800a580 <_getpid_r>
 800a520:	002a      	movs	r2, r5
 800a522:	0001      	movs	r1, r0
 800a524:	0020      	movs	r0, r4
 800a526:	f000 f819 	bl	800a55c <_kill_r>
 800a52a:	e7ed      	b.n	800a508 <_raise_r+0x12>
 800a52c:	2a01      	cmp	r2, #1
 800a52e:	d009      	beq.n	800a544 <_raise_r+0x4e>
 800a530:	1c51      	adds	r1, r2, #1
 800a532:	d103      	bne.n	800a53c <_raise_r+0x46>
 800a534:	2316      	movs	r3, #22
 800a536:	6003      	str	r3, [r0, #0]
 800a538:	2001      	movs	r0, #1
 800a53a:	e7e5      	b.n	800a508 <_raise_r+0x12>
 800a53c:	2100      	movs	r1, #0
 800a53e:	0028      	movs	r0, r5
 800a540:	6019      	str	r1, [r3, #0]
 800a542:	4790      	blx	r2
 800a544:	2000      	movs	r0, #0
 800a546:	e7df      	b.n	800a508 <_raise_r+0x12>

0800a548 <raise>:
 800a548:	b510      	push	{r4, lr}
 800a54a:	4b03      	ldr	r3, [pc, #12]	@ (800a558 <raise+0x10>)
 800a54c:	0001      	movs	r1, r0
 800a54e:	6818      	ldr	r0, [r3, #0]
 800a550:	f7ff ffd1 	bl	800a4f6 <_raise_r>
 800a554:	bd10      	pop	{r4, pc}
 800a556:	46c0      	nop			@ (mov r8, r8)
 800a558:	20000018 	.word	0x20000018

0800a55c <_kill_r>:
 800a55c:	2300      	movs	r3, #0
 800a55e:	b570      	push	{r4, r5, r6, lr}
 800a560:	4d06      	ldr	r5, [pc, #24]	@ (800a57c <_kill_r+0x20>)
 800a562:	0004      	movs	r4, r0
 800a564:	0008      	movs	r0, r1
 800a566:	0011      	movs	r1, r2
 800a568:	602b      	str	r3, [r5, #0]
 800a56a:	f7f8 fe2f 	bl	80031cc <_kill>
 800a56e:	1c43      	adds	r3, r0, #1
 800a570:	d103      	bne.n	800a57a <_kill_r+0x1e>
 800a572:	682b      	ldr	r3, [r5, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d000      	beq.n	800a57a <_kill_r+0x1e>
 800a578:	6023      	str	r3, [r4, #0]
 800a57a:	bd70      	pop	{r4, r5, r6, pc}
 800a57c:	20000488 	.word	0x20000488

0800a580 <_getpid_r>:
 800a580:	b510      	push	{r4, lr}
 800a582:	f7f8 fe1d 	bl	80031c0 <_getpid>
 800a586:	bd10      	pop	{r4, pc}

0800a588 <_init>:
 800a588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a58a:	46c0      	nop			@ (mov r8, r8)
 800a58c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a58e:	bc08      	pop	{r3}
 800a590:	469e      	mov	lr, r3
 800a592:	4770      	bx	lr

0800a594 <_fini>:
 800a594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a596:	46c0      	nop			@ (mov r8, r8)
 800a598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a59a:	bc08      	pop	{r3}
 800a59c:	469e      	mov	lr, r3
 800a59e:	4770      	bx	lr
