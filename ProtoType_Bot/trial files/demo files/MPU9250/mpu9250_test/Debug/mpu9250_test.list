
mpu9250_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b68  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003d2c  08003d2c  00004d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d50  08003d50  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d50  08003d50  00004d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d58  08003d58  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d58  08003d58  00004d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d5c  08003d5c  00004d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003d60  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  08003d6c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08003d6c  0000511c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc09  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b73  00000000  00000000  00010c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  000127b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000080c  00000000  00000000  00013200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021bee  00000000  00000000  00013a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0aa  00000000  00000000  000355fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb49c  00000000  00000000  000436a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010eb40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a70  00000000  00000000  0010eb84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001115f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003d14 	.word	0x08003d14

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003d14 	.word	0x08003d14

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MPU9250_Init>:
extern I2C_HandleTypeDef hi2c1;

static inline float deg2rad(float x);

MPU9250_Result_t MPU9250_Init(MPU9250_t *MPU9250, MPU9250_Device_t dev, MPU9250_Accel_Scale_t accScale, MPU9250_Gyro_Scale_t gyroScale, MPU9250_Mag_Scale_t magScale)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	4608      	mov	r0, r1
 80004fe:	4611      	mov	r1, r2
 8000500:	461a      	mov	r2, r3
 8000502:	4603      	mov	r3, r0
 8000504:	70fb      	strb	r3, [r7, #3]
 8000506:	460b      	mov	r3, r1
 8000508:	70bb      	strb	r3, [r7, #2]
 800050a:	4613      	mov	r3, r2
 800050c:	707b      	strb	r3, [r7, #1]
	uint8_t data;
	MPU9250->I2C_Addr = MPU9250_I2C_ADDR | (uint8_t)dev;
 800050e:	78fb      	ldrb	r3, [r7, #3]
 8000510:	f043 0369 	orr.w	r3, r3, #105	@ 0x69
 8000514:	b2da      	uxtb	r2, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	MPU9250->I2C_Addr_Mag = MPU9250_I2C_ADDR_MAG;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2218      	movs	r2, #24
 8000520:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

	/* Gyro & Acc Device Connection Check */
	if (isMPU9250Ready(&hi2c1, MPU9250->I2C_Addr) != MPU9250_RESULT_OK)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800052a:	4619      	mov	r1, r3
 800052c:	48c1      	ldr	r0, [pc, #772]	@ (8000834 <MPU9250_Init+0x340>)
 800052e:	f000 f9ef 	bl	8000910 <isMPU9250Ready>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MPU9250_Init+0x48>
		return MPU9250_RESULT_NC;
 8000538:	2302      	movs	r3, #2
 800053a:	e177      	b.n	800082c <MPU9250_Init+0x338>

	/* Who Am I Check */
	readByte(&hi2c1, MPU9250->I2C_Addr, WHO_AM_I, &data);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	f893 104c 	ldrb.w	r1, [r3, #76]	@ 0x4c
 8000542:	f107 030f 	add.w	r3, r7, #15
 8000546:	2275      	movs	r2, #117	@ 0x75
 8000548:	48ba      	ldr	r0, [pc, #744]	@ (8000834 <MPU9250_Init+0x340>)
 800054a:	f000 f9ae 	bl	80008aa <readByte>
	if (data != 0x71)
 800054e:	7bfb      	ldrb	r3, [r7, #15]
 8000550:	2b71      	cmp	r3, #113	@ 0x71
 8000552:	d001      	beq.n	8000558 <MPU9250_Init+0x64>
		return MPU9250_RESULT_NC;
 8000554:	2302      	movs	r3, #2
 8000556:	e169      	b.n	800082c <MPU9250_Init+0x338>

	/* Device Wake Up */
	writeByte(&hi2c1, MPU9250->I2C_Addr, PWR_MGMT_1, 0x00);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f893 104c 	ldrb.w	r1, [r3, #76]	@ 0x4c
 800055e:	2300      	movs	r3, #0
 8000560:	226b      	movs	r2, #107	@ 0x6b
 8000562:	48b4      	ldr	r0, [pc, #720]	@ (8000834 <MPU9250_Init+0x340>)
 8000564:	f000 f978 	bl	8000858 <writeByte>
	HAL_Delay(100);
 8000568:	2064      	movs	r0, #100	@ 0x64
 800056a:	f000 fd77 	bl	800105c <HAL_Delay>

	/* Auto-select best (stable) available clock source */
	writeByte(&hi2c1, MPU9250->I2C_Addr, PWR_MGMT_1, 0x01);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f893 104c 	ldrb.w	r1, [r3, #76]	@ 0x4c
 8000574:	2301      	movs	r3, #1
 8000576:	226b      	movs	r2, #107	@ 0x6b
 8000578:	48ae      	ldr	r0, [pc, #696]	@ (8000834 <MPU9250_Init+0x340>)
 800057a:	f000 f96d 	bl	8000858 <writeByte>
	HAL_Delay(200);
 800057e:	20c8      	movs	r0, #200	@ 0xc8
 8000580:	f000 fd6c 	bl	800105c <HAL_Delay>
	 * @Fs = 1000 Hz
	 * @Gyro BW: 41 Hz
	 * @Temperature BW: 42 Hz
	 * @Note: Sensor fusion update rate cannot be higher than (1/5.9ms) = 170 Hz
	 */
	writeByte(&hi2c1, MPU9250->I2C_Addr, CONFIG, 0x03);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f893 104c 	ldrb.w	r1, [r3, #76]	@ 0x4c
 800058a:	2303      	movs	r3, #3
 800058c:	221a      	movs	r2, #26
 800058e:	48a9      	ldr	r0, [pc, #676]	@ (8000834 <MPU9250_Init+0x340>)
 8000590:	f000 f962 	bl	8000858 <writeByte>

	/* Sample Rate = Fs / (1 + SMPLRT_DIV)
	 * @Sample Rate = 1000 / (1 + 4) = 200 Hz
	 */
	writeByte(&hi2c1, MPU9250->I2C_Addr, SMPLRT_DIV, 0x04);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	f893 104c 	ldrb.w	r1, [r3, #76]	@ 0x4c
 800059a:	2304      	movs	r3, #4
 800059c:	2219      	movs	r2, #25
 800059e:	48a5      	ldr	r0, [pc, #660]	@ (8000834 <MPU9250_Init+0x340>)
 80005a0:	f000 f95a 	bl	8000858 <writeByte>

	/* Gyro Configuration */
	readByte(&hi2c1, MPU9250->I2C_Addr, GYRO_CONFIG, &data);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f893 104c 	ldrb.w	r1, [r3, #76]	@ 0x4c
 80005aa:	f107 030f 	add.w	r3, r7, #15
 80005ae:	221b      	movs	r2, #27
 80005b0:	48a0      	ldr	r0, [pc, #640]	@ (8000834 <MPU9250_Init+0x340>)
 80005b2:	f000 f97a 	bl	80008aa <readByte>
	data &= ~0x02;		/* [1:0] - Clear Fchoice_b[1:0] bits */
 80005b6:	7bfb      	ldrb	r3, [r7, #15]
 80005b8:	f023 0302 	bic.w	r3, r3, #2
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	73fb      	strb	r3, [r7, #15]
	data &= ~0x18;		/* [4:3] - Clear GYRO_FS_SEL[1:0] bits */
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	f023 0318 	bic.w	r3, r3, #24
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	73fb      	strb	r3, [r7, #15]
	data |= gyroScale;
 80005ca:	7bfa      	ldrb	r2, [r7, #15]
 80005cc:	787b      	ldrb	r3, [r7, #1]
 80005ce:	4313      	orrs	r3, r2
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	73fb      	strb	r3, [r7, #15]
	writeByte(&hi2c1, MPU9250->I2C_Addr, GYRO_CONFIG, data);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f893 104c 	ldrb.w	r1, [r3, #76]	@ 0x4c
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	221b      	movs	r2, #27
 80005de:	4895      	ldr	r0, [pc, #596]	@ (8000834 <MPU9250_Init+0x340>)
 80005e0:	f000 f93a 	bl	8000858 <writeByte>

	/* Accel Configuraiton */
	readByte(&hi2c1, MPU9250->I2C_Addr, ACCEL_CONFIG, &data);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f893 104c 	ldrb.w	r1, [r3, #76]	@ 0x4c
 80005ea:	f107 030f 	add.w	r3, r7, #15
 80005ee:	221c      	movs	r2, #28
 80005f0:	4890      	ldr	r0, [pc, #576]	@ (8000834 <MPU9250_Init+0x340>)
 80005f2:	f000 f95a 	bl	80008aa <readByte>
	data &= ~0x18;		/* [4:3] - Clear ACCEL_FS_SEL[1:0] bits */
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	f023 0318 	bic.w	r3, r3, #24
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	73fb      	strb	r3, [r7, #15]
	data |= accScale;
 8000600:	7bfa      	ldrb	r2, [r7, #15]
 8000602:	78bb      	ldrb	r3, [r7, #2]
 8000604:	4313      	orrs	r3, r2
 8000606:	b2db      	uxtb	r3, r3
 8000608:	73fb      	strb	r3, [r7, #15]
	writeByte(&hi2c1, MPU9250->I2C_Addr, ACCEL_CONFIG, data);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f893 104c 	ldrb.w	r1, [r3, #76]	@ 0x4c
 8000610:	7bfb      	ldrb	r3, [r7, #15]
 8000612:	221c      	movs	r2, #28
 8000614:	4887      	ldr	r0, [pc, #540]	@ (8000834 <MPU9250_Init+0x340>)
 8000616:	f000 f91f 	bl	8000858 <writeByte>

	/* Accel_2 Configuration
	 * @Accel BW: 44.8 Hz
	 */
	readByte(&hi2c1, MPU9250->I2C_Addr, ACCEL_CONFIG_2, &data);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f893 104c 	ldrb.w	r1, [r3, #76]	@ 0x4c
 8000620:	f107 030f 	add.w	r3, r7, #15
 8000624:	221d      	movs	r2, #29
 8000626:	4883      	ldr	r0, [pc, #524]	@ (8000834 <MPU9250_Init+0x340>)
 8000628:	f000 f93f 	bl	80008aa <readByte>
	data &= ~0x0F;		/* Clear ACCEL_CONFIG_2[3:0] Bits */
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	f023 030f 	bic.w	r3, r3, #15
 8000632:	b2db      	uxtb	r3, r3
 8000634:	73fb      	strb	r3, [r7, #15]
	data |= 0x03;		/* A_DLPFCFG[2:0] bits are set to 011 */
 8000636:	7bfb      	ldrb	r3, [r7, #15]
 8000638:	f043 0303 	orr.w	r3, r3, #3
 800063c:	b2db      	uxtb	r3, r3
 800063e:	73fb      	strb	r3, [r7, #15]
	writeByte(&hi2c1, MPU9250->I2C_Addr, ACCEL_CONFIG_2, data);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f893 104c 	ldrb.w	r1, [r3, #76]	@ 0x4c
 8000646:	7bfb      	ldrb	r3, [r7, #15]
 8000648:	221d      	movs	r2, #29
 800064a:	487a      	ldr	r0, [pc, #488]	@ (8000834 <MPU9250_Init+0x340>)
 800064c:	f000 f904 	bl	8000858 <writeByte>

	/* Interrupt Pin/Bypass Pin Configuration
	 * @INT Pin: push-pull (active high)
	 * Interrupt on raw sensor data ready
	 */
	writeByte(&hi2c1, MPU9250->I2C_Addr, INT_PIN_CFG, 0x22);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f893 104c 	ldrb.w	r1, [r3, #76]	@ 0x4c
 8000656:	2322      	movs	r3, #34	@ 0x22
 8000658:	2237      	movs	r2, #55	@ 0x37
 800065a:	4876      	ldr	r0, [pc, #472]	@ (8000834 <MPU9250_Init+0x340>)
 800065c:	f000 f8fc 	bl	8000858 <writeByte>
	writeByte(&hi2c1, MPU9250->I2C_Addr, INT_ENABLE, 0x01);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f893 104c 	ldrb.w	r1, [r3, #76]	@ 0x4c
 8000666:	2301      	movs	r3, #1
 8000668:	2238      	movs	r2, #56	@ 0x38
 800066a:	4872      	ldr	r0, [pc, #456]	@ (8000834 <MPU9250_Init+0x340>)
 800066c:	f000 f8f4 	bl	8000858 <writeByte>

	/* Magnetometer Device Connection Check */
	if (isMPU9250Ready(&hi2c1, MPU9250->I2C_Addr_Mag) != MPU9250_RESULT_OK)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8000676:	4619      	mov	r1, r3
 8000678:	486e      	ldr	r0, [pc, #440]	@ (8000834 <MPU9250_Init+0x340>)
 800067a:	f000 f949 	bl	8000910 <isMPU9250Ready>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MPU9250_Init+0x194>
		return MPU9250_RESULT_NC;
 8000684:	2302      	movs	r3, #2
 8000686:	e0d1      	b.n	800082c <MPU9250_Init+0x338>

	/* Magnetometer Power Down */
	writeByte(&hi2c1, MPU9250->I2C_Addr_Mag, CNTL, 0x00);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f893 104d 	ldrb.w	r1, [r3, #77]	@ 0x4d
 800068e:	2300      	movs	r3, #0
 8000690:	220a      	movs	r2, #10
 8000692:	4868      	ldr	r0, [pc, #416]	@ (8000834 <MPU9250_Init+0x340>)
 8000694:	f000 f8e0 	bl	8000858 <writeByte>
	HAL_Delay(10);
 8000698:	200a      	movs	r0, #10
 800069a:	f000 fcdf 	bl	800105c <HAL_Delay>
	/* Magnetometer Fuse ROM Access Mode ON */
	writeByte(&hi2c1, MPU9250->I2C_Addr_Mag, CNTL, 0x0F);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f893 104d 	ldrb.w	r1, [r3, #77]	@ 0x4d
 80006a4:	230f      	movs	r3, #15
 80006a6:	220a      	movs	r2, #10
 80006a8:	4862      	ldr	r0, [pc, #392]	@ (8000834 <MPU9250_Init+0x340>)
 80006aa:	f000 f8d5 	bl	8000858 <writeByte>
	HAL_Delay(10);
 80006ae:	200a      	movs	r0, #10
 80006b0:	f000 fcd4 	bl	800105c <HAL_Delay>
	/* Magnetometer Power Down */
	writeByte(&hi2c1, MPU9250->I2C_Addr_Mag, CNTL, 0x00);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f893 104d 	ldrb.w	r1, [r3, #77]	@ 0x4d
 80006ba:	2300      	movs	r3, #0
 80006bc:	220a      	movs	r2, #10
 80006be:	485d      	ldr	r0, [pc, #372]	@ (8000834 <MPU9250_Init+0x340>)
 80006c0:	f000 f8ca 	bl	8000858 <writeByte>
	HAL_Delay(10);
 80006c4:	200a      	movs	r0, #10
 80006c6:	f000 fcc9 	bl	800105c <HAL_Delay>
	 * @Mode Configuration
	 * 		- 0010: 8 Hz
	 * 		- 0110: 100 Hz
	 * @BIT Output Bit Setting: 16-bit output
	 */
	writeByte(&hi2c1, MPU9250->I2C_Addr_Mag, CNTL, (1 << 4) | 2);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	f893 104d 	ldrb.w	r1, [r3, #77]	@ 0x4d
 80006d0:	2312      	movs	r3, #18
 80006d2:	220a      	movs	r2, #10
 80006d4:	4857      	ldr	r0, [pc, #348]	@ (8000834 <MPU9250_Init+0x340>)
 80006d6:	f000 f8bf 	bl	8000858 <writeByte>
	HAL_Delay(10);
 80006da:	200a      	movs	r0, #10
 80006dc:	f000 fcbe 	bl	800105c <HAL_Delay>
	 * Gyroscope Full Scale:		±2000 degree/s
	 * Magnetometer Full Scale:		±4912 uT
	 */

	/* Accelerometer Resolution Multiplicator: LSB / g 			*/
	switch (accScale) {
 80006e0:	78bb      	ldrb	r3, [r7, #2]
 80006e2:	2b18      	cmp	r3, #24
 80006e4:	d847      	bhi.n	8000776 <MPU9250_Init+0x282>
 80006e6:	a201      	add	r2, pc, #4	@ (adr r2, 80006ec <MPU9250_Init+0x1f8>)
 80006e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ec:	08000751 	.word	0x08000751
 80006f0:	08000777 	.word	0x08000777
 80006f4:	08000777 	.word	0x08000777
 80006f8:	08000777 	.word	0x08000777
 80006fc:	08000777 	.word	0x08000777
 8000700:	08000777 	.word	0x08000777
 8000704:	08000777 	.word	0x08000777
 8000708:	08000777 	.word	0x08000777
 800070c:	08000759 	.word	0x08000759
 8000710:	08000777 	.word	0x08000777
 8000714:	08000777 	.word	0x08000777
 8000718:	08000777 	.word	0x08000777
 800071c:	08000777 	.word	0x08000777
 8000720:	08000777 	.word	0x08000777
 8000724:	08000777 	.word	0x08000777
 8000728:	08000777 	.word	0x08000777
 800072c:	08000763 	.word	0x08000763
 8000730:	08000777 	.word	0x08000777
 8000734:	08000777 	.word	0x08000777
 8000738:	08000777 	.word	0x08000777
 800073c:	08000777 	.word	0x08000777
 8000740:	08000777 	.word	0x08000777
 8000744:	08000777 	.word	0x08000777
 8000748:	08000777 	.word	0x08000777
 800074c:	0800076d 	.word	0x0800076d
		case ACCEL_SCALE_2G:
			MPU9250->accMult = 16834.0f;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4a39      	ldr	r2, [pc, #228]	@ (8000838 <MPU9250_Init+0x344>)
 8000754:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8000756:	e00e      	b.n	8000776 <MPU9250_Init+0x282>
		case ACCEL_SCALE_4G:
			MPU9250->accMult = 8192.0f;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 800075e:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8000760:	e009      	b.n	8000776 <MPU9250_Init+0x282>
		case ACCEL_SCALE_8G:
			MPU9250->accMult = 4096.0f;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8000768:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 800076a:	e004      	b.n	8000776 <MPU9250_Init+0x282>
		case ACCEL_SCALE_16G:
			MPU9250->accMult = 2048.0f;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8000772:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8000774:	bf00      	nop
	}

	/* Gyroscope Resolution Multiplicator: LSB / (degree/s) 	*/
	switch (gyroScale) {
 8000776:	787b      	ldrb	r3, [r7, #1]
 8000778:	2b18      	cmp	r3, #24
 800077a:	d845      	bhi.n	8000808 <MPU9250_Init+0x314>
 800077c:	a201      	add	r2, pc, #4	@ (adr r2, 8000784 <MPU9250_Init+0x290>)
 800077e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000782:	bf00      	nop
 8000784:	080007e9 	.word	0x080007e9
 8000788:	08000809 	.word	0x08000809
 800078c:	08000809 	.word	0x08000809
 8000790:	08000809 	.word	0x08000809
 8000794:	08000809 	.word	0x08000809
 8000798:	08000809 	.word	0x08000809
 800079c:	08000809 	.word	0x08000809
 80007a0:	08000809 	.word	0x08000809
 80007a4:	080007f1 	.word	0x080007f1
 80007a8:	08000809 	.word	0x08000809
 80007ac:	08000809 	.word	0x08000809
 80007b0:	08000809 	.word	0x08000809
 80007b4:	08000809 	.word	0x08000809
 80007b8:	08000809 	.word	0x08000809
 80007bc:	08000809 	.word	0x08000809
 80007c0:	08000809 	.word	0x08000809
 80007c4:	080007f9 	.word	0x080007f9
 80007c8:	08000809 	.word	0x08000809
 80007cc:	08000809 	.word	0x08000809
 80007d0:	08000809 	.word	0x08000809
 80007d4:	08000809 	.word	0x08000809
 80007d8:	08000809 	.word	0x08000809
 80007dc:	08000809 	.word	0x08000809
 80007e0:	08000809 	.word	0x08000809
 80007e4:	08000801 	.word	0x08000801
		case GYRO_SCALE_250dps:
			MPU9250->gyroMult = 131.0f;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4a14      	ldr	r2, [pc, #80]	@ (800083c <MPU9250_Init+0x348>)
 80007ec:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 80007ee:	e00b      	b.n	8000808 <MPU9250_Init+0x314>
		case GYRO_SCALE_500dps:
			MPU9250->gyroMult = 65.5f;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4a13      	ldr	r2, [pc, #76]	@ (8000840 <MPU9250_Init+0x34c>)
 80007f4:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 80007f6:	e007      	b.n	8000808 <MPU9250_Init+0x314>
		case GYRO_SCALE_1000dps:
			MPU9250->gyroMult = 32.8f;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4a12      	ldr	r2, [pc, #72]	@ (8000844 <MPU9250_Init+0x350>)
 80007fc:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 80007fe:	e003      	b.n	8000808 <MPU9250_Init+0x314>
		case GYRO_SCALE_2000dps:
			MPU9250->gyroMult = 16.4f;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a11      	ldr	r2, [pc, #68]	@ (8000848 <MPU9250_Init+0x354>)
 8000804:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8000806:	bf00      	nop
	}

	/* Magnetometer Resolution Multiplicator: LSB / 0.15uT 		*/
	switch (magScale) {
 8000808:	7e3b      	ldrb	r3, [r7, #24]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d002      	beq.n	8000814 <MPU9250_Init+0x320>
 800080e:	2b01      	cmp	r3, #1
 8000810:	d004      	beq.n	800081c <MPU9250_Init+0x328>
 8000812:	e007      	b.n	8000824 <MPU9250_Init+0x330>
		case MAG_SCALE_14bit:
			MPU9250->magMult = 0.6f;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4a0d      	ldr	r2, [pc, #52]	@ (800084c <MPU9250_Init+0x358>)
 8000818:	645a      	str	r2, [r3, #68]	@ 0x44
			break;
 800081a:	e003      	b.n	8000824 <MPU9250_Init+0x330>
		case MAG_SCALE_16bit:
			MPU9250->magMult = 0.15f;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4a0c      	ldr	r2, [pc, #48]	@ (8000850 <MPU9250_Init+0x35c>)
 8000820:	645a      	str	r2, [r3, #68]	@ 0x44
			break;
 8000822:	bf00      	nop
	}

	/* Temperature Resolution Multiplicator: LSB / degreeC		*/
	MPU9250->tempMult = 333.87f;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4a0b      	ldr	r2, [pc, #44]	@ (8000854 <MPU9250_Init+0x360>)
 8000828:	649a      	str	r2, [r3, #72]	@ 0x48

	return MPU9250_RESULT_OK;
 800082a:	2300      	movs	r3, #0
}
 800082c:	4618      	mov	r0, r3
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000028 	.word	0x20000028
 8000838:	46838400 	.word	0x46838400
 800083c:	43030000 	.word	0x43030000
 8000840:	42830000 	.word	0x42830000
 8000844:	42033333 	.word	0x42033333
 8000848:	41833333 	.word	0x41833333
 800084c:	3f19999a 	.word	0x3f19999a
 8000850:	3e19999a 	.word	0x3e19999a
 8000854:	43a6ef5c 	.word	0x43a6ef5c

08000858 <writeByte>:

	return MPU9250_RESULT_ERROR;
}

HAL_StatusTypeDef writeByte(I2C_HandleTypeDef *hi2c1, uint8_t device_addr, uint8_t register_addr, uint8_t data)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af02      	add	r7, sp, #8
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	4608      	mov	r0, r1
 8000862:	4611      	mov	r1, r2
 8000864:	461a      	mov	r2, r3
 8000866:	4603      	mov	r3, r0
 8000868:	70fb      	strb	r3, [r7, #3]
 800086a:	460b      	mov	r3, r1
 800086c:	70bb      	strb	r3, [r7, #2]
 800086e:	4613      	mov	r3, r2
 8000870:	707b      	strb	r3, [r7, #1]
	uint8_t buffer[2];
	buffer[0] = register_addr;
 8000872:	78bb      	ldrb	r3, [r7, #2]
 8000874:	733b      	strb	r3, [r7, #12]
	buffer[1] = data;
 8000876:	787b      	ldrb	r3, [r7, #1]
 8000878:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(hi2c1, (uint16_t)device_addr, (uint8_t *)buffer, 2, 1000) != HAL_OK)
 800087a:	78fb      	ldrb	r3, [r7, #3]
 800087c:	b299      	uxth	r1, r3
 800087e:	f107 020c 	add.w	r2, r7, #12
 8000882:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	2302      	movs	r3, #2
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f000 ffe2 	bl	8001854 <HAL_I2C_Master_Transmit>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d004      	beq.n	80008a0 <writeByte+0x48>
	{
		if (HAL_I2C_GetError(hi2c1) != HAL_I2C_ERROR_AF) {}
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f001 fc3a 	bl	8002110 <HAL_I2C_GetError>
		return HAL_ERROR;
 800089c:	2301      	movs	r3, #1
 800089e:	e000      	b.n	80008a2 <writeByte+0x4a>
	}
	return HAL_OK;
 80008a0:	2300      	movs	r3, #0

}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <readByte>:

HAL_StatusTypeDef readByte(I2C_HandleTypeDef *hi2c1, uint8_t device_addr, uint8_t register_addr, uint8_t *data)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b086      	sub	sp, #24
 80008ae:	af02      	add	r7, sp, #8
 80008b0:	60f8      	str	r0, [r7, #12]
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	460b      	mov	r3, r1
 80008b6:	72fb      	strb	r3, [r7, #11]
 80008b8:	4613      	mov	r3, r2
 80008ba:	72bb      	strb	r3, [r7, #10]
	/* Transmit Register Address */
	if (HAL_I2C_Master_Transmit(hi2c1, (uint16_t)device_addr, &register_addr, 1, 1000) != HAL_OK)
 80008bc:	7afb      	ldrb	r3, [r7, #11]
 80008be:	b299      	uxth	r1, r3
 80008c0:	f107 020a 	add.w	r2, r7, #10
 80008c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2301      	movs	r3, #1
 80008cc:	68f8      	ldr	r0, [r7, #12]
 80008ce:	f000 ffc1 	bl	8001854 <HAL_I2C_Master_Transmit>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d004      	beq.n	80008e2 <readByte+0x38>
	{
		{
			if (HAL_I2C_GetError(hi2c1) != HAL_I2C_ERROR_AF) {}
 80008d8:	68f8      	ldr	r0, [r7, #12]
 80008da:	f001 fc19 	bl	8002110 <HAL_I2C_GetError>
			return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	e012      	b.n	8000908 <readByte+0x5e>
		}
	}

	/* Receive Register Data */
	if (HAL_I2C_Master_Receive(hi2c1, (uint16_t)device_addr, data, 1, 1000) != HAL_OK)
 80008e2:	7afb      	ldrb	r3, [r7, #11]
 80008e4:	b299      	uxth	r1, r3
 80008e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	2301      	movs	r3, #1
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	68f8      	ldr	r0, [r7, #12]
 80008f2:	f001 f8ad 	bl	8001a50 <HAL_I2C_Master_Receive>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d004      	beq.n	8000906 <readByte+0x5c>
	{
		{
			if (HAL_I2C_GetError(hi2c1) != HAL_I2C_ERROR_AF) {}
 80008fc:	68f8      	ldr	r0, [r7, #12]
 80008fe:	f001 fc07 	bl	8002110 <HAL_I2C_GetError>
			return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	e000      	b.n	8000908 <readByte+0x5e>
		}
	}
	return HAL_OK;
 8000906:	2300      	movs	r3, #0
}
 8000908:	4618      	mov	r0, r3
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <isMPU9250Ready>:
	}
	return HAL_OK;
}

MPU9250_Result_t isMPU9250Ready(I2C_HandleTypeDef *hi2c1, uint8_t device_addr)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	460b      	mov	r3, r1
 800091a:	70fb      	strb	r3, [r7, #3]
	/* Checks if device is ready to communicate */
	if (HAL_I2C_IsDeviceReady(hi2c1, (uint16_t)device_addr, 2, 5) != HAL_OK)
 800091c:	78fb      	ldrb	r3, [r7, #3]
 800091e:	b299      	uxth	r1, r3
 8000920:	2305      	movs	r3, #5
 8000922:	2202      	movs	r2, #2
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f001 fac5 	bl	8001eb4 <HAL_I2C_IsDeviceReady>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <isMPU9250Ready+0x24>
		return MPU9250_RESULT_NC;
 8000930:	2302      	movs	r3, #2
 8000932:	e000      	b.n	8000936 <isMPU9250Ready+0x26>

	return MPU9250_RESULT_OK;
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b098      	sub	sp, #96	@ 0x60
 8000944:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000946:	f000 fb17 	bl	8000f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094a:	f000 f82f 	bl	80009ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094e:	f000 f925 	bl	8000b9c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000952:	f000 f8f9 	bl	8000b48 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000956:	f000 f89b 	bl	8000a90 <MX_I2C1_Init>
  MX_I2C2_Init();
 800095a:	f000 f8c7 	bl	8000aec <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  MPU9250_t MPU9250;
      MPU9250_Result_t result = MPU9250_Init(&MPU9250, MPU9250_Device_0, ACCEL_SCALE_2G, GYRO_SCALE_250dps, MAG_SCALE_14bit);
 800095e:	1d38      	adds	r0, r7, #4
 8000960:	2300      	movs	r3, #0
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	2300      	movs	r3, #0
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	f7ff fdc3 	bl	80004f4 <MPU9250_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (result != MPU9250_RESULT_OK) {
 8000974:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000978:	2b00      	cmp	r3, #0
 800097a:	d007      	beq.n	800098c <main+0x4c>
          HAL_UART_Transmit(&huart2, "problem", strlen("problem"), HAL_MAX_DELAY);
 800097c:	f04f 33ff 	mov.w	r3, #4294967295
 8000980:	2207      	movs	r2, #7
 8000982:	4907      	ldr	r1, [pc, #28]	@ (80009a0 <main+0x60>)
 8000984:	4807      	ldr	r0, [pc, #28]	@ (80009a4 <main+0x64>)
 8000986:	f002 fddd 	bl	8003544 <HAL_UART_Transmit>
 800098a:	e007      	b.n	800099c <main+0x5c>
      }
      else{
    	  HAL_UART_Transmit(&huart2, "ok", strlen("ok"), HAL_MAX_DELAY);
 800098c:	f04f 33ff 	mov.w	r3, #4294967295
 8000990:	2202      	movs	r2, #2
 8000992:	4905      	ldr	r1, [pc, #20]	@ (80009a8 <main+0x68>)
 8000994:	4803      	ldr	r0, [pc, #12]	@ (80009a4 <main+0x64>)
 8000996:	f002 fdd5 	bl	8003544 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800099a:	bf00      	nop
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <main+0x5c>
 80009a0:	08003d2c 	.word	0x08003d2c
 80009a4:	200000d0 	.word	0x200000d0
 80009a8:	08003d34 	.word	0x08003d34

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b094      	sub	sp, #80	@ 0x50
 80009b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	2234      	movs	r2, #52	@ 0x34
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f003 f97e 	bl	8003cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c0:	f107 0308 	add.w	r3, r7, #8
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d0:	2300      	movs	r3, #0
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000a88 <SystemClock_Config+0xdc>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d8:	4a2b      	ldr	r2, [pc, #172]	@ (8000a88 <SystemClock_Config+0xdc>)
 80009da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009de:	6413      	str	r3, [r2, #64]	@ 0x40
 80009e0:	4b29      	ldr	r3, [pc, #164]	@ (8000a88 <SystemClock_Config+0xdc>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ec:	2300      	movs	r3, #0
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	4b26      	ldr	r3, [pc, #152]	@ (8000a8c <SystemClock_Config+0xe0>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a25      	ldr	r2, [pc, #148]	@ (8000a8c <SystemClock_Config+0xe0>)
 80009f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009fa:	6013      	str	r3, [r2, #0]
 80009fc:	4b23      	ldr	r3, [pc, #140]	@ (8000a8c <SystemClock_Config+0xe0>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a10:	2310      	movs	r3, #16
 8000a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a14:	2302      	movs	r3, #2
 8000a16:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a1c:	2308      	movs	r3, #8
 8000a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000a20:	23b4      	movs	r3, #180	@ 0xb4
 8000a22:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a24:	2302      	movs	r3, #2
 8000a26:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4618      	mov	r0, r3
 8000a36:	f002 fa97 	bl	8002f68 <HAL_RCC_OscConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a40:	f000 f91a 	bl	8000c78 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a44:	f001 fef6 	bl	8002834 <HAL_PWREx_EnableOverDrive>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a4e:	f000 f913 	bl	8000c78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a52:	230f      	movs	r3, #15
 8000a54:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a56:	2302      	movs	r3, #2
 8000a58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a5e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a68:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a6a:	f107 0308 	add.w	r3, r7, #8
 8000a6e:	2105      	movs	r1, #5
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 ff2f 	bl	80028d4 <HAL_RCC_ClockConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a7c:	f000 f8fc 	bl	8000c78 <Error_Handler>
  }
}
 8000a80:	bf00      	nop
 8000a82:	3750      	adds	r7, #80	@ 0x50
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40007000 	.word	0x40007000

08000a90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a94:	4b12      	ldr	r3, [pc, #72]	@ (8000ae0 <MX_I2C1_Init+0x50>)
 8000a96:	4a13      	ldr	r2, [pc, #76]	@ (8000ae4 <MX_I2C1_Init+0x54>)
 8000a98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <MX_I2C1_Init+0x50>)
 8000a9c:	4a12      	ldr	r2, [pc, #72]	@ (8000ae8 <MX_I2C1_Init+0x58>)
 8000a9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae0 <MX_I2C1_Init+0x50>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <MX_I2C1_Init+0x50>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <MX_I2C1_Init+0x50>)
 8000aae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ab2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae0 <MX_I2C1_Init+0x50>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000aba:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <MX_I2C1_Init+0x50>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac0:	4b07      	ldr	r3, [pc, #28]	@ (8000ae0 <MX_I2C1_Init+0x50>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac6:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <MX_I2C1_Init+0x50>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000acc:	4804      	ldr	r0, [pc, #16]	@ (8000ae0 <MX_I2C1_Init+0x50>)
 8000ace:	f000 fd7d 	bl	80015cc <HAL_I2C_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ad8:	f000 f8ce 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000028 	.word	0x20000028
 8000ae4:	40005400 	.word	0x40005400
 8000ae8:	000186a0 	.word	0x000186a0

08000aec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000af0:	4b12      	ldr	r3, [pc, #72]	@ (8000b3c <MX_I2C2_Init+0x50>)
 8000af2:	4a13      	ldr	r2, [pc, #76]	@ (8000b40 <MX_I2C2_Init+0x54>)
 8000af4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000af6:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <MX_I2C2_Init+0x50>)
 8000af8:	4a12      	ldr	r2, [pc, #72]	@ (8000b44 <MX_I2C2_Init+0x58>)
 8000afa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <MX_I2C2_Init+0x50>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	@ (8000b3c <MX_I2C2_Init+0x50>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <MX_I2C2_Init+0x50>)
 8000b0a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b0e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b10:	4b0a      	ldr	r3, [pc, #40]	@ (8000b3c <MX_I2C2_Init+0x50>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b16:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <MX_I2C2_Init+0x50>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b1c:	4b07      	ldr	r3, [pc, #28]	@ (8000b3c <MX_I2C2_Init+0x50>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <MX_I2C2_Init+0x50>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b28:	4804      	ldr	r0, [pc, #16]	@ (8000b3c <MX_I2C2_Init+0x50>)
 8000b2a:	f000 fd4f 	bl	80015cc <HAL_I2C_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b34:	f000 f8a0 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	2000007c 	.word	0x2000007c
 8000b40:	40005800 	.word	0x40005800
 8000b44:	000186a0 	.word	0x000186a0

08000b48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	@ (8000b98 <MX_USART2_UART_Init+0x50>)
 8000b50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b52:	4b10      	ldr	r3, [pc, #64]	@ (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	@ (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b6e:	220c      	movs	r2, #12
 8000b70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b72:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b7e:	4805      	ldr	r0, [pc, #20]	@ (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b80:	f002 fc90 	bl	80034a4 <HAL_UART_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b8a:	f000 f875 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200000d0 	.word	0x200000d0
 8000b98:	40004400 	.word	0x40004400

08000b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	@ 0x28
 8000ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8000c6c <MX_GPIO_Init+0xd0>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a2c      	ldr	r2, [pc, #176]	@ (8000c6c <MX_GPIO_Init+0xd0>)
 8000bbc:	f043 0304 	orr.w	r3, r3, #4
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c6c <MX_GPIO_Init+0xd0>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b26      	ldr	r3, [pc, #152]	@ (8000c6c <MX_GPIO_Init+0xd0>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4a25      	ldr	r2, [pc, #148]	@ (8000c6c <MX_GPIO_Init+0xd0>)
 8000bd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4b23      	ldr	r3, [pc, #140]	@ (8000c6c <MX_GPIO_Init+0xd0>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	4b1f      	ldr	r3, [pc, #124]	@ (8000c6c <MX_GPIO_Init+0xd0>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	4a1e      	ldr	r2, [pc, #120]	@ (8000c6c <MX_GPIO_Init+0xd0>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	@ (8000c6c <MX_GPIO_Init+0xd0>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b18      	ldr	r3, [pc, #96]	@ (8000c6c <MX_GPIO_Init+0xd0>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	4a17      	ldr	r2, [pc, #92]	@ (8000c6c <MX_GPIO_Init+0xd0>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c16:	4b15      	ldr	r3, [pc, #84]	@ (8000c6c <MX_GPIO_Init+0xd0>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2120      	movs	r1, #32
 8000c26:	4812      	ldr	r0, [pc, #72]	@ (8000c70 <MX_GPIO_Init+0xd4>)
 8000c28:	f000 fcb6 	bl	8001598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c32:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	480c      	ldr	r0, [pc, #48]	@ (8000c74 <MX_GPIO_Init+0xd8>)
 8000c44:	f000 fb14 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c48:	2320      	movs	r3, #32
 8000c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4804      	ldr	r0, [pc, #16]	@ (8000c70 <MX_GPIO_Init+0xd4>)
 8000c60:	f000 fb06 	bl	8001270 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c64:	bf00      	nop
 8000c66:	3728      	adds	r7, #40	@ 0x28
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020000 	.word	0x40020000
 8000c74:	40020800 	.word	0x40020800

08000c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c7c:	b672      	cpsid	i
}
 8000c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <Error_Handler+0x8>

08000c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	4b10      	ldr	r3, [pc, #64]	@ (8000cd0 <HAL_MspInit+0x4c>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c92:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd0 <HAL_MspInit+0x4c>)
 8000c94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd0 <HAL_MspInit+0x4c>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	603b      	str	r3, [r7, #0]
 8000caa:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <HAL_MspInit+0x4c>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cae:	4a08      	ldr	r2, [pc, #32]	@ (8000cd0 <HAL_MspInit+0x4c>)
 8000cb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb6:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <HAL_MspInit+0x4c>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cc2:	2007      	movs	r0, #7
 8000cc4:	f000 faa0 	bl	8001208 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40023800 	.word	0x40023800

08000cd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08c      	sub	sp, #48	@ 0x30
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 031c 	add.w	r3, r7, #28
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a42      	ldr	r2, [pc, #264]	@ (8000dfc <HAL_I2C_MspInit+0x128>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d12c      	bne.n	8000d50 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61bb      	str	r3, [r7, #24]
 8000cfa:	4b41      	ldr	r3, [pc, #260]	@ (8000e00 <HAL_I2C_MspInit+0x12c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	4a40      	ldr	r2, [pc, #256]	@ (8000e00 <HAL_I2C_MspInit+0x12c>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d06:	4b3e      	ldr	r3, [pc, #248]	@ (8000e00 <HAL_I2C_MspInit+0x12c>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	61bb      	str	r3, [r7, #24]
 8000d10:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d12:	23c0      	movs	r3, #192	@ 0xc0
 8000d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d16:	2312      	movs	r3, #18
 8000d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d22:	2304      	movs	r3, #4
 8000d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4835      	ldr	r0, [pc, #212]	@ (8000e04 <HAL_I2C_MspInit+0x130>)
 8000d2e:	f000 fa9f 	bl	8001270 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	4b32      	ldr	r3, [pc, #200]	@ (8000e00 <HAL_I2C_MspInit+0x12c>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3a:	4a31      	ldr	r2, [pc, #196]	@ (8000e00 <HAL_I2C_MspInit+0x12c>)
 8000d3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d42:	4b2f      	ldr	r3, [pc, #188]	@ (8000e00 <HAL_I2C_MspInit+0x12c>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d4e:	e050      	b.n	8000df2 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a2c      	ldr	r2, [pc, #176]	@ (8000e08 <HAL_I2C_MspInit+0x134>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d14b      	bne.n	8000df2 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	4b28      	ldr	r3, [pc, #160]	@ (8000e00 <HAL_I2C_MspInit+0x12c>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	4a27      	ldr	r2, [pc, #156]	@ (8000e00 <HAL_I2C_MspInit+0x12c>)
 8000d64:	f043 0302 	orr.w	r3, r3, #2
 8000d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6a:	4b25      	ldr	r3, [pc, #148]	@ (8000e00 <HAL_I2C_MspInit+0x12c>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	4b21      	ldr	r3, [pc, #132]	@ (8000e00 <HAL_I2C_MspInit+0x12c>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	4a20      	ldr	r2, [pc, #128]	@ (8000e00 <HAL_I2C_MspInit+0x12c>)
 8000d80:	f043 0304 	orr.w	r3, r3, #4
 8000d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d86:	4b1e      	ldr	r3, [pc, #120]	@ (8000e00 <HAL_I2C_MspInit+0x12c>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	f003 0304 	and.w	r3, r3, #4
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d98:	2312      	movs	r3, #18
 8000d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000da4:	2304      	movs	r3, #4
 8000da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	4619      	mov	r1, r3
 8000dae:	4815      	ldr	r0, [pc, #84]	@ (8000e04 <HAL_I2C_MspInit+0x130>)
 8000db0:	f000 fa5e 	bl	8001270 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000db4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dba:	2312      	movs	r3, #18
 8000dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	4619      	mov	r1, r3
 8000dd0:	480e      	ldr	r0, [pc, #56]	@ (8000e0c <HAL_I2C_MspInit+0x138>)
 8000dd2:	f000 fa4d 	bl	8001270 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <HAL_I2C_MspInit+0x12c>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dde:	4a08      	ldr	r2, [pc, #32]	@ (8000e00 <HAL_I2C_MspInit+0x12c>)
 8000de0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000de4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de6:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <HAL_I2C_MspInit+0x12c>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
}
 8000df2:	bf00      	nop
 8000df4:	3730      	adds	r7, #48	@ 0x30
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40005400 	.word	0x40005400
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020400 	.word	0x40020400
 8000e08:	40005800 	.word	0x40005800
 8000e0c:	40020800 	.word	0x40020800

08000e10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	@ 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a19      	ldr	r2, [pc, #100]	@ (8000e94 <HAL_UART_MspInit+0x84>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d12b      	bne.n	8000e8a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	4b18      	ldr	r3, [pc, #96]	@ (8000e98 <HAL_UART_MspInit+0x88>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3a:	4a17      	ldr	r2, [pc, #92]	@ (8000e98 <HAL_UART_MspInit+0x88>)
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e42:	4b15      	ldr	r3, [pc, #84]	@ (8000e98 <HAL_UART_MspInit+0x88>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b11      	ldr	r3, [pc, #68]	@ (8000e98 <HAL_UART_MspInit+0x88>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	4a10      	ldr	r2, [pc, #64]	@ (8000e98 <HAL_UART_MspInit+0x88>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <HAL_UART_MspInit+0x88>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e6a:	230c      	movs	r3, #12
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e76:	2303      	movs	r3, #3
 8000e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e7a:	2307      	movs	r3, #7
 8000e7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	@ (8000e9c <HAL_UART_MspInit+0x8c>)
 8000e86:	f000 f9f3 	bl	8001270 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e8a:	bf00      	nop
 8000e8c:	3728      	adds	r7, #40	@ 0x28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40004400 	.word	0x40004400
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020000 	.word	0x40020000

08000ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <NMI_Handler+0x4>

08000ea8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <HardFault_Handler+0x4>

08000eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <MemManage_Handler+0x4>

08000eb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef6:	f000 f891 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f04:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <SystemInit+0x20>)
 8000f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f0a:	4a05      	ldr	r2, [pc, #20]	@ (8000f20 <SystemInit+0x20>)
 8000f0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f28:	f7ff ffea 	bl	8000f00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f2c:	480c      	ldr	r0, [pc, #48]	@ (8000f60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f2e:	490d      	ldr	r1, [pc, #52]	@ (8000f64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f30:	4a0d      	ldr	r2, [pc, #52]	@ (8000f68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f34:	e002      	b.n	8000f3c <LoopCopyDataInit>

08000f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3a:	3304      	adds	r3, #4

08000f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f40:	d3f9      	bcc.n	8000f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f42:	4a0a      	ldr	r2, [pc, #40]	@ (8000f6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f44:	4c0a      	ldr	r4, [pc, #40]	@ (8000f70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f48:	e001      	b.n	8000f4e <LoopFillZerobss>

08000f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f4c:	3204      	adds	r2, #4

08000f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f50:	d3fb      	bcc.n	8000f4a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f52:	f002 febb 	bl	8003ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f56:	f7ff fcf3 	bl	8000940 <main>
  bx  lr    
 8000f5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f68:	08003d60 	.word	0x08003d60
  ldr r2, =_sbss
 8000f6c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f70:	2000011c 	.word	0x2000011c

08000f74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC_IRQHandler>
	...

08000f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb8 <HAL_Init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb8 <HAL_Init+0x40>)
 8000f82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f88:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <HAL_Init+0x40>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb8 <HAL_Init+0x40>)
 8000f8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f94:	4b08      	ldr	r3, [pc, #32]	@ (8000fb8 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a07      	ldr	r2, [pc, #28]	@ (8000fb8 <HAL_Init+0x40>)
 8000f9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f000 f931 	bl	8001208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f000 f808 	bl	8000fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fac:	f7ff fe6a 	bl	8000c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023c00 	.word	0x40023c00

08000fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <HAL_InitTick+0x54>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <HAL_InitTick+0x58>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 f93b 	bl	8001256 <HAL_SYSTICK_Config>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00e      	b.n	8001008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b0f      	cmp	r3, #15
 8000fee:	d80a      	bhi.n	8001006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f000 f911 	bl	800121e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ffc:	4a06      	ldr	r2, [pc, #24]	@ (8001018 <HAL_InitTick+0x5c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	e000      	b.n	8001008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000000 	.word	0x20000000
 8001014:	20000008 	.word	0x20000008
 8001018:	20000004 	.word	0x20000004

0800101c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001020:	4b06      	ldr	r3, [pc, #24]	@ (800103c <HAL_IncTick+0x20>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <HAL_IncTick+0x24>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a04      	ldr	r2, [pc, #16]	@ (8001040 <HAL_IncTick+0x24>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008
 8001040:	20000118 	.word	0x20000118

08001044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return uwTick;
 8001048:	4b03      	ldr	r3, [pc, #12]	@ (8001058 <HAL_GetTick+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000118 	.word	0x20000118

0800105c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001064:	f7ff ffee 	bl	8001044 <HAL_GetTick>
 8001068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001074:	d005      	beq.n	8001082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001076:	4b0a      	ldr	r3, [pc, #40]	@ (80010a0 <HAL_Delay+0x44>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001082:	bf00      	nop
 8001084:	f7ff ffde 	bl	8001044 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d8f7      	bhi.n	8001084 <HAL_Delay+0x28>
  {
  }
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000008 	.word	0x20000008

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d6:	4a04      	ldr	r2, [pc, #16]	@ (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	60d3      	str	r3, [r2, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	@ (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	@ (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	@ 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	@ 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011d4:	d301      	bcc.n	80011da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00f      	b.n	80011fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011da:	4a0a      	ldr	r2, [pc, #40]	@ (8001204 <SysTick_Config+0x40>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e2:	210f      	movs	r1, #15
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f7ff ff8e 	bl	8001108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ec:	4b05      	ldr	r3, [pc, #20]	@ (8001204 <SysTick_Config+0x40>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f2:	4b04      	ldr	r3, [pc, #16]	@ (8001204 <SysTick_Config+0x40>)
 80011f4:	2207      	movs	r2, #7
 80011f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	e000e010 	.word	0xe000e010

08001208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff47 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001230:	f7ff ff5c 	bl	80010ec <__NVIC_GetPriorityGrouping>
 8001234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	6978      	ldr	r0, [r7, #20]
 800123c:	f7ff ff8e 	bl	800115c <NVIC_EncodePriority>
 8001240:	4602      	mov	r2, r0
 8001242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff5d 	bl	8001108 <__NVIC_SetPriority>
}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ffb0 	bl	80011c4 <SysTick_Config>
 8001264:	4603      	mov	r3, r0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	@ 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001282:	2300      	movs	r3, #0
 8001284:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	e165      	b.n	8001558 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800128c:	2201      	movs	r2, #1
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	f040 8154 	bne.w	8001552 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0303 	and.w	r3, r3, #3
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d005      	beq.n	80012c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d130      	bne.n	8001324 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	2203      	movs	r2, #3
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	68da      	ldr	r2, [r3, #12]
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f8:	2201      	movs	r2, #1
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	091b      	lsrs	r3, r3, #4
 800130e:	f003 0201 	and.w	r2, r3, #1
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	2b03      	cmp	r3, #3
 800132e:	d017      	beq.n	8001360 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	2203      	movs	r2, #3
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d123      	bne.n	80013b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	08da      	lsrs	r2, r3, #3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3208      	adds	r2, #8
 8001374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	220f      	movs	r2, #15
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	691a      	ldr	r2, [r3, #16]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	08da      	lsrs	r2, r3, #3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3208      	adds	r2, #8
 80013ae:	69b9      	ldr	r1, [r7, #24]
 80013b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	2203      	movs	r2, #3
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0203 	and.w	r2, r3, #3
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 80ae 	beq.w	8001552 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001570 <HAL_GPIO_Init+0x300>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fe:	4a5c      	ldr	r2, [pc, #368]	@ (8001570 <HAL_GPIO_Init+0x300>)
 8001400:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001404:	6453      	str	r3, [r2, #68]	@ 0x44
 8001406:	4b5a      	ldr	r3, [pc, #360]	@ (8001570 <HAL_GPIO_Init+0x300>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001412:	4a58      	ldr	r2, [pc, #352]	@ (8001574 <HAL_GPIO_Init+0x304>)
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	089b      	lsrs	r3, r3, #2
 8001418:	3302      	adds	r3, #2
 800141a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	220f      	movs	r2, #15
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a4f      	ldr	r2, [pc, #316]	@ (8001578 <HAL_GPIO_Init+0x308>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d025      	beq.n	800148a <HAL_GPIO_Init+0x21a>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4e      	ldr	r2, [pc, #312]	@ (800157c <HAL_GPIO_Init+0x30c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d01f      	beq.n	8001486 <HAL_GPIO_Init+0x216>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a4d      	ldr	r2, [pc, #308]	@ (8001580 <HAL_GPIO_Init+0x310>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d019      	beq.n	8001482 <HAL_GPIO_Init+0x212>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a4c      	ldr	r2, [pc, #304]	@ (8001584 <HAL_GPIO_Init+0x314>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d013      	beq.n	800147e <HAL_GPIO_Init+0x20e>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a4b      	ldr	r2, [pc, #300]	@ (8001588 <HAL_GPIO_Init+0x318>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d00d      	beq.n	800147a <HAL_GPIO_Init+0x20a>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a4a      	ldr	r2, [pc, #296]	@ (800158c <HAL_GPIO_Init+0x31c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d007      	beq.n	8001476 <HAL_GPIO_Init+0x206>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a49      	ldr	r2, [pc, #292]	@ (8001590 <HAL_GPIO_Init+0x320>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d101      	bne.n	8001472 <HAL_GPIO_Init+0x202>
 800146e:	2306      	movs	r3, #6
 8001470:	e00c      	b.n	800148c <HAL_GPIO_Init+0x21c>
 8001472:	2307      	movs	r3, #7
 8001474:	e00a      	b.n	800148c <HAL_GPIO_Init+0x21c>
 8001476:	2305      	movs	r3, #5
 8001478:	e008      	b.n	800148c <HAL_GPIO_Init+0x21c>
 800147a:	2304      	movs	r3, #4
 800147c:	e006      	b.n	800148c <HAL_GPIO_Init+0x21c>
 800147e:	2303      	movs	r3, #3
 8001480:	e004      	b.n	800148c <HAL_GPIO_Init+0x21c>
 8001482:	2302      	movs	r3, #2
 8001484:	e002      	b.n	800148c <HAL_GPIO_Init+0x21c>
 8001486:	2301      	movs	r3, #1
 8001488:	e000      	b.n	800148c <HAL_GPIO_Init+0x21c>
 800148a:	2300      	movs	r3, #0
 800148c:	69fa      	ldr	r2, [r7, #28]
 800148e:	f002 0203 	and.w	r2, r2, #3
 8001492:	0092      	lsls	r2, r2, #2
 8001494:	4093      	lsls	r3, r2
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800149c:	4935      	ldr	r1, [pc, #212]	@ (8001574 <HAL_GPIO_Init+0x304>)
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	089b      	lsrs	r3, r3, #2
 80014a2:	3302      	adds	r3, #2
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014aa:	4b3a      	ldr	r3, [pc, #232]	@ (8001594 <HAL_GPIO_Init+0x324>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ce:	4a31      	ldr	r2, [pc, #196]	@ (8001594 <HAL_GPIO_Init+0x324>)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001594 <HAL_GPIO_Init+0x324>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014f8:	4a26      	ldr	r2, [pc, #152]	@ (8001594 <HAL_GPIO_Init+0x324>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014fe:	4b25      	ldr	r3, [pc, #148]	@ (8001594 <HAL_GPIO_Init+0x324>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001522:	4a1c      	ldr	r2, [pc, #112]	@ (8001594 <HAL_GPIO_Init+0x324>)
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001528:	4b1a      	ldr	r3, [pc, #104]	@ (8001594 <HAL_GPIO_Init+0x324>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800154c:	4a11      	ldr	r2, [pc, #68]	@ (8001594 <HAL_GPIO_Init+0x324>)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3301      	adds	r3, #1
 8001556:	61fb      	str	r3, [r7, #28]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	2b0f      	cmp	r3, #15
 800155c:	f67f ae96 	bls.w	800128c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001560:	bf00      	nop
 8001562:	bf00      	nop
 8001564:	3724      	adds	r7, #36	@ 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	40013800 	.word	0x40013800
 8001578:	40020000 	.word	0x40020000
 800157c:	40020400 	.word	0x40020400
 8001580:	40020800 	.word	0x40020800
 8001584:	40020c00 	.word	0x40020c00
 8001588:	40021000 	.word	0x40021000
 800158c:	40021400 	.word	0x40021400
 8001590:	40021800 	.word	0x40021800
 8001594:	40013c00 	.word	0x40013c00

08001598 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	807b      	strh	r3, [r7, #2]
 80015a4:	4613      	mov	r3, r2
 80015a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015a8:	787b      	ldrb	r3, [r7, #1]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ae:	887a      	ldrh	r2, [r7, #2]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015b4:	e003      	b.n	80015be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015b6:	887b      	ldrh	r3, [r7, #2]
 80015b8:	041a      	lsls	r2, r3, #16
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	619a      	str	r2, [r3, #24]
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e12b      	b.n	8001836 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d106      	bne.n	80015f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff fb6e 	bl	8000cd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2224      	movs	r2, #36	@ 0x24
 80015fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0201 	bic.w	r2, r2, #1
 800160e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800161e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800162e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001630:	f001 fa42 	bl	8002ab8 <HAL_RCC_GetPCLK1Freq>
 8001634:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	4a81      	ldr	r2, [pc, #516]	@ (8001840 <HAL_I2C_Init+0x274>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d807      	bhi.n	8001650 <HAL_I2C_Init+0x84>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4a80      	ldr	r2, [pc, #512]	@ (8001844 <HAL_I2C_Init+0x278>)
 8001644:	4293      	cmp	r3, r2
 8001646:	bf94      	ite	ls
 8001648:	2301      	movls	r3, #1
 800164a:	2300      	movhi	r3, #0
 800164c:	b2db      	uxtb	r3, r3
 800164e:	e006      	b.n	800165e <HAL_I2C_Init+0x92>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4a7d      	ldr	r2, [pc, #500]	@ (8001848 <HAL_I2C_Init+0x27c>)
 8001654:	4293      	cmp	r3, r2
 8001656:	bf94      	ite	ls
 8001658:	2301      	movls	r3, #1
 800165a:	2300      	movhi	r3, #0
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e0e7      	b.n	8001836 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4a78      	ldr	r2, [pc, #480]	@ (800184c <HAL_I2C_Init+0x280>)
 800166a:	fba2 2303 	umull	r2, r3, r2, r3
 800166e:	0c9b      	lsrs	r3, r3, #18
 8001670:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	430a      	orrs	r2, r1
 8001684:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	4a6a      	ldr	r2, [pc, #424]	@ (8001840 <HAL_I2C_Init+0x274>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d802      	bhi.n	80016a0 <HAL_I2C_Init+0xd4>
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	3301      	adds	r3, #1
 800169e:	e009      	b.n	80016b4 <HAL_I2C_Init+0xe8>
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80016a6:	fb02 f303 	mul.w	r3, r2, r3
 80016aa:	4a69      	ldr	r2, [pc, #420]	@ (8001850 <HAL_I2C_Init+0x284>)
 80016ac:	fba2 2303 	umull	r2, r3, r2, r3
 80016b0:	099b      	lsrs	r3, r3, #6
 80016b2:	3301      	adds	r3, #1
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	430b      	orrs	r3, r1
 80016ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80016c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	495c      	ldr	r1, [pc, #368]	@ (8001840 <HAL_I2C_Init+0x274>)
 80016d0:	428b      	cmp	r3, r1
 80016d2:	d819      	bhi.n	8001708 <HAL_I2C_Init+0x13c>
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	1e59      	subs	r1, r3, #1
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	fbb1 f3f3 	udiv	r3, r1, r3
 80016e2:	1c59      	adds	r1, r3, #1
 80016e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80016e8:	400b      	ands	r3, r1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00a      	beq.n	8001704 <HAL_I2C_Init+0x138>
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	1e59      	subs	r1, r3, #1
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80016fc:	3301      	adds	r3, #1
 80016fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001702:	e051      	b.n	80017a8 <HAL_I2C_Init+0x1dc>
 8001704:	2304      	movs	r3, #4
 8001706:	e04f      	b.n	80017a8 <HAL_I2C_Init+0x1dc>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d111      	bne.n	8001734 <HAL_I2C_Init+0x168>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	1e58      	subs	r0, r3, #1
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6859      	ldr	r1, [r3, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	440b      	add	r3, r1
 800171e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001722:	3301      	adds	r3, #1
 8001724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001728:	2b00      	cmp	r3, #0
 800172a:	bf0c      	ite	eq
 800172c:	2301      	moveq	r3, #1
 800172e:	2300      	movne	r3, #0
 8001730:	b2db      	uxtb	r3, r3
 8001732:	e012      	b.n	800175a <HAL_I2C_Init+0x18e>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	1e58      	subs	r0, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6859      	ldr	r1, [r3, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	440b      	add	r3, r1
 8001742:	0099      	lsls	r1, r3, #2
 8001744:	440b      	add	r3, r1
 8001746:	fbb0 f3f3 	udiv	r3, r0, r3
 800174a:	3301      	adds	r3, #1
 800174c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001750:	2b00      	cmp	r3, #0
 8001752:	bf0c      	ite	eq
 8001754:	2301      	moveq	r3, #1
 8001756:	2300      	movne	r3, #0
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_I2C_Init+0x196>
 800175e:	2301      	movs	r3, #1
 8001760:	e022      	b.n	80017a8 <HAL_I2C_Init+0x1dc>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10e      	bne.n	8001788 <HAL_I2C_Init+0x1bc>
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	1e58      	subs	r0, r3, #1
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6859      	ldr	r1, [r3, #4]
 8001772:	460b      	mov	r3, r1
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	440b      	add	r3, r1
 8001778:	fbb0 f3f3 	udiv	r3, r0, r3
 800177c:	3301      	adds	r3, #1
 800177e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001782:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001786:	e00f      	b.n	80017a8 <HAL_I2C_Init+0x1dc>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	1e58      	subs	r0, r3, #1
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6859      	ldr	r1, [r3, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	440b      	add	r3, r1
 8001796:	0099      	lsls	r1, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	fbb0 f3f3 	udiv	r3, r0, r3
 800179e:	3301      	adds	r3, #1
 80017a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	6809      	ldr	r1, [r1, #0]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69da      	ldr	r2, [r3, #28]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	431a      	orrs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80017d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6911      	ldr	r1, [r2, #16]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	68d2      	ldr	r2, [r2, #12]
 80017e2:	4311      	orrs	r1, r2
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6812      	ldr	r2, [r2, #0]
 80017e8:	430b      	orrs	r3, r1
 80017ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	695a      	ldr	r2, [r3, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	430a      	orrs	r2, r1
 8001806:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f042 0201 	orr.w	r2, r2, #1
 8001816:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2220      	movs	r2, #32
 8001822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	000186a0 	.word	0x000186a0
 8001844:	001e847f 	.word	0x001e847f
 8001848:	003d08ff 	.word	0x003d08ff
 800184c:	431bde83 	.word	0x431bde83
 8001850:	10624dd3 	.word	0x10624dd3

08001854 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af02      	add	r7, sp, #8
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	461a      	mov	r2, r3
 8001860:	460b      	mov	r3, r1
 8001862:	817b      	strh	r3, [r7, #10]
 8001864:	4613      	mov	r3, r2
 8001866:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001868:	f7ff fbec 	bl	8001044 <HAL_GetTick>
 800186c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b20      	cmp	r3, #32
 8001878:	f040 80e0 	bne.w	8001a3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	2319      	movs	r3, #25
 8001882:	2201      	movs	r2, #1
 8001884:	4970      	ldr	r1, [pc, #448]	@ (8001a48 <HAL_I2C_Master_Transmit+0x1f4>)
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f000 fd9e 	bl	80023c8 <I2C_WaitOnFlagUntilTimeout>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001892:	2302      	movs	r3, #2
 8001894:	e0d3      	b.n	8001a3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <HAL_I2C_Master_Transmit+0x50>
 80018a0:	2302      	movs	r3, #2
 80018a2:	e0cc      	b.n	8001a3e <HAL_I2C_Master_Transmit+0x1ea>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d007      	beq.n	80018ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f042 0201 	orr.w	r2, r2, #1
 80018c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2221      	movs	r2, #33	@ 0x21
 80018de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2210      	movs	r2, #16
 80018e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2200      	movs	r2, #0
 80018ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	893a      	ldrh	r2, [r7, #8]
 80018fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001900:	b29a      	uxth	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4a50      	ldr	r2, [pc, #320]	@ (8001a4c <HAL_I2C_Master_Transmit+0x1f8>)
 800190a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800190c:	8979      	ldrh	r1, [r7, #10]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	6a3a      	ldr	r2, [r7, #32]
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f000 fc08 	bl	8002128 <I2C_MasterRequestWrite>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e08d      	b.n	8001a3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001938:	e066      	b.n	8001a08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	6a39      	ldr	r1, [r7, #32]
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f000 fe5c 	bl	80025fc <I2C_WaitOnTXEFlagUntilTimeout>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00d      	beq.n	8001966 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	2b04      	cmp	r3, #4
 8001950:	d107      	bne.n	8001962 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001960:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e06b      	b.n	8001a3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196a:	781a      	ldrb	r2, [r3, #0]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001980:	b29b      	uxth	r3, r3
 8001982:	3b01      	subs	r3, #1
 8001984:	b29a      	uxth	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800198e:	3b01      	subs	r3, #1
 8001990:	b29a      	uxth	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d11b      	bne.n	80019dc <HAL_I2C_Master_Transmit+0x188>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d017      	beq.n	80019dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b0:	781a      	ldrb	r2, [r3, #0]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	3b01      	subs	r3, #1
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019d4:	3b01      	subs	r3, #1
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	6a39      	ldr	r1, [r7, #32]
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f000 fe53 	bl	800268c <I2C_WaitOnBTFFlagUntilTimeout>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d00d      	beq.n	8001a08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d107      	bne.n	8001a04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e01a      	b.n	8001a3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d194      	bne.n	800193a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2220      	movs	r2, #32
 8001a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	e000      	b.n	8001a3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a3c:	2302      	movs	r3, #2
  }
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	00100002 	.word	0x00100002
 8001a4c:	ffff0000 	.word	0xffff0000

08001a50 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08c      	sub	sp, #48	@ 0x30
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	607a      	str	r2, [r7, #4]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	817b      	strh	r3, [r7, #10]
 8001a60:	4613      	mov	r3, r2
 8001a62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a64:	f7ff faee 	bl	8001044 <HAL_GetTick>
 8001a68:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b20      	cmp	r3, #32
 8001a74:	f040 8217 	bne.w	8001ea6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2319      	movs	r3, #25
 8001a7e:	2201      	movs	r2, #1
 8001a80:	497c      	ldr	r1, [pc, #496]	@ (8001c74 <HAL_I2C_Master_Receive+0x224>)
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f000 fca0 	bl	80023c8 <I2C_WaitOnFlagUntilTimeout>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e20a      	b.n	8001ea8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <HAL_I2C_Master_Receive+0x50>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e203      	b.n	8001ea8 <HAL_I2C_Master_Receive+0x458>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d007      	beq.n	8001ac6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 0201 	orr.w	r2, r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ad4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2222      	movs	r2, #34	@ 0x22
 8001ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2210      	movs	r2, #16
 8001ae2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	893a      	ldrh	r2, [r7, #8]
 8001af6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4a5c      	ldr	r2, [pc, #368]	@ (8001c78 <HAL_I2C_Master_Receive+0x228>)
 8001b06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b08:	8979      	ldrh	r1, [r7, #10]
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f000 fb8c 	bl	800222c <I2C_MasterRequestRead>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e1c4      	b.n	8001ea8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d113      	bne.n	8001b4e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b26:	2300      	movs	r3, #0
 8001b28:	623b      	str	r3, [r7, #32]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	623b      	str	r3, [r7, #32]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	623b      	str	r3, [r7, #32]
 8001b3a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	e198      	b.n	8001e80 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d11b      	bne.n	8001b8e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	61fb      	str	r3, [r7, #28]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	e178      	b.n	8001e80 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d11b      	bne.n	8001bce <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ba4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	61bb      	str	r3, [r7, #24]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	61bb      	str	r3, [r7, #24]
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	e158      	b.n	8001e80 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001bdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001bf4:	e144      	b.n	8001e80 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bfa:	2b03      	cmp	r3, #3
 8001bfc:	f200 80f1 	bhi.w	8001de2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d123      	bne.n	8001c50 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f000 fd85 	bl	800271c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e145      	b.n	8001ea8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	691a      	ldr	r2, [r3, #16]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	3b01      	subs	r3, #1
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001c4e:	e117      	b.n	8001e80 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d14e      	bne.n	8001cf6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c5e:	2200      	movs	r2, #0
 8001c60:	4906      	ldr	r1, [pc, #24]	@ (8001c7c <HAL_I2C_Master_Receive+0x22c>)
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 fbb0 	bl	80023c8 <I2C_WaitOnFlagUntilTimeout>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d008      	beq.n	8001c80 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e11a      	b.n	8001ea8 <HAL_I2C_Master_Receive+0x458>
 8001c72:	bf00      	nop
 8001c74:	00100002 	.word	0x00100002
 8001c78:	ffff0000 	.word	0xffff0000
 8001c7c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	691a      	ldr	r2, [r3, #16]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cac:	3b01      	subs	r3, #1
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd4:	1c5a      	adds	r2, r3, #1
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	3b01      	subs	r3, #1
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001cf4:	e0c4      	b.n	8001e80 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	496c      	ldr	r1, [pc, #432]	@ (8001eb0 <HAL_I2C_Master_Receive+0x460>)
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f000 fb61 	bl	80023c8 <I2C_WaitOnFlagUntilTimeout>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e0cb      	b.n	8001ea8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	691a      	ldr	r2, [r3, #16]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d58:	2200      	movs	r2, #0
 8001d5a:	4955      	ldr	r1, [pc, #340]	@ (8001eb0 <HAL_I2C_Master_Receive+0x460>)
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f000 fb33 	bl	80023c8 <I2C_WaitOnFlagUntilTimeout>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e09d      	b.n	8001ea8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691a      	ldr	r2, [r3, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	3b01      	subs	r3, #1
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001de0:	e04e      	b.n	8001e80 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001de4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 fc98 	bl	800271c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e058      	b.n	8001ea8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e08:	1c5a      	adds	r2, r3, #1
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e12:	3b01      	subs	r3, #1
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	3b01      	subs	r3, #1
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d124      	bne.n	8001e80 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	d107      	bne.n	8001e4e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e4c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e60:	1c5a      	adds	r2, r3, #1
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f47f aeb6 	bne.w	8001bf6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e000      	b.n	8001ea8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001ea6:	2302      	movs	r3, #2
  }
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3728      	adds	r7, #40	@ 0x28
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	00010004 	.word	0x00010004

08001eb4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08a      	sub	sp, #40	@ 0x28
 8001eb8:	af02      	add	r7, sp, #8
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	607a      	str	r2, [r7, #4]
 8001ebe:	603b      	str	r3, [r7, #0]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001ec4:	f7ff f8be 	bl	8001044 <HAL_GetTick>
 8001ec8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b20      	cmp	r3, #32
 8001ed8:	f040 8111 	bne.w	80020fe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	2319      	movs	r3, #25
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	4988      	ldr	r1, [pc, #544]	@ (8002108 <HAL_I2C_IsDeviceReady+0x254>)
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 fa6e 	bl	80023c8 <I2C_WaitOnFlagUntilTimeout>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e104      	b.n	8002100 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <HAL_I2C_IsDeviceReady+0x50>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e0fd      	b.n	8002100 <HAL_I2C_IsDeviceReady+0x24c>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d007      	beq.n	8001f2a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f042 0201 	orr.w	r2, r2, #1
 8001f28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2224      	movs	r2, #36	@ 0x24
 8001f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4a70      	ldr	r2, [pc, #448]	@ (800210c <HAL_I2C_IsDeviceReady+0x258>)
 8001f4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f5c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 fa2c 	bl	80023c8 <I2C_WaitOnFlagUntilTimeout>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00d      	beq.n	8001f92 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f84:	d103      	bne.n	8001f8e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f8c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e0b6      	b.n	8002100 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f92:	897b      	ldrh	r3, [r7, #10]
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	461a      	mov	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001fa0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001fa2:	f7ff f84f 	bl	8001044 <HAL_GetTick>
 8001fa6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	bf0c      	ite	eq
 8001fb6:	2301      	moveq	r3, #1
 8001fb8:	2300      	movne	r3, #0
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fcc:	bf0c      	ite	eq
 8001fce:	2301      	moveq	r3, #1
 8001fd0:	2300      	movne	r3, #0
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001fd6:	e025      	b.n	8002024 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001fd8:	f7ff f834 	bl	8001044 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d302      	bcc.n	8001fee <HAL_I2C_IsDeviceReady+0x13a>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d103      	bne.n	8001ff6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	22a0      	movs	r2, #160	@ 0xa0
 8001ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b02      	cmp	r3, #2
 8002002:	bf0c      	ite	eq
 8002004:	2301      	moveq	r3, #1
 8002006:	2300      	movne	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002016:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800201a:	bf0c      	ite	eq
 800201c:	2301      	moveq	r3, #1
 800201e:	2300      	movne	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2ba0      	cmp	r3, #160	@ 0xa0
 800202e:	d005      	beq.n	800203c <HAL_I2C_IsDeviceReady+0x188>
 8002030:	7dfb      	ldrb	r3, [r7, #23]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d102      	bne.n	800203c <HAL_I2C_IsDeviceReady+0x188>
 8002036:	7dbb      	ldrb	r3, [r7, #22]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0cd      	beq.n	8001fd8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2220      	movs	r2, #32
 8002040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b02      	cmp	r3, #2
 8002050:	d129      	bne.n	80020a6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002060:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	2319      	movs	r3, #25
 800207e:	2201      	movs	r2, #1
 8002080:	4921      	ldr	r1, [pc, #132]	@ (8002108 <HAL_I2C_IsDeviceReady+0x254>)
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 f9a0 	bl	80023c8 <I2C_WaitOnFlagUntilTimeout>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e036      	b.n	8002100 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2220      	movs	r2, #32
 8002096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e02c      	b.n	8002100 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020b4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80020be:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	2319      	movs	r3, #25
 80020c6:	2201      	movs	r2, #1
 80020c8:	490f      	ldr	r1, [pc, #60]	@ (8002108 <HAL_I2C_IsDeviceReady+0x254>)
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 f97c 	bl	80023c8 <I2C_WaitOnFlagUntilTimeout>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e012      	b.n	8002100 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	3301      	adds	r3, #1
 80020de:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	f4ff af32 	bcc.w	8001f4e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2220      	movs	r2, #32
 80020ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80020fe:	2302      	movs	r3, #2
  }
}
 8002100:	4618      	mov	r0, r3
 8002102:	3720      	adds	r7, #32
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	00100002 	.word	0x00100002
 800210c:	ffff0000 	.word	0xffff0000

08002110 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af02      	add	r7, sp, #8
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	607a      	str	r2, [r7, #4]
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	460b      	mov	r3, r1
 8002136:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2b08      	cmp	r3, #8
 8002142:	d006      	beq.n	8002152 <I2C_MasterRequestWrite+0x2a>
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d003      	beq.n	8002152 <I2C_MasterRequestWrite+0x2a>
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002150:	d108      	bne.n	8002164 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	e00b      	b.n	800217c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002168:	2b12      	cmp	r3, #18
 800216a:	d107      	bne.n	800217c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800217a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 f91d 	bl	80023c8 <I2C_WaitOnFlagUntilTimeout>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00d      	beq.n	80021b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800219e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021a2:	d103      	bne.n	80021ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e035      	b.n	800221c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80021b8:	d108      	bne.n	80021cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021ba:	897b      	ldrh	r3, [r7, #10]
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	461a      	mov	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80021c8:	611a      	str	r2, [r3, #16]
 80021ca:	e01b      	b.n	8002204 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021cc:	897b      	ldrh	r3, [r7, #10]
 80021ce:	11db      	asrs	r3, r3, #7
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	f003 0306 	and.w	r3, r3, #6
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	f063 030f 	orn	r3, r3, #15
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	490e      	ldr	r1, [pc, #56]	@ (8002224 <I2C_MasterRequestWrite+0xfc>)
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 f966 	bl	80024bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e010      	b.n	800221c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80021fa:	897b      	ldrh	r3, [r7, #10]
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	4907      	ldr	r1, [pc, #28]	@ (8002228 <I2C_MasterRequestWrite+0x100>)
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 f956 	bl	80024bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	00010008 	.word	0x00010008
 8002228:	00010002 	.word	0x00010002

0800222c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af02      	add	r7, sp, #8
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	607a      	str	r2, [r7, #4]
 8002236:	603b      	str	r3, [r7, #0]
 8002238:	460b      	mov	r3, r1
 800223a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002240:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002250:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2b08      	cmp	r3, #8
 8002256:	d006      	beq.n	8002266 <I2C_MasterRequestRead+0x3a>
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d003      	beq.n	8002266 <I2C_MasterRequestRead+0x3a>
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002264:	d108      	bne.n	8002278 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	e00b      	b.n	8002290 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227c:	2b11      	cmp	r3, #17
 800227e:	d107      	bne.n	8002290 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800228e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 f893 	bl	80023c8 <I2C_WaitOnFlagUntilTimeout>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00d      	beq.n	80022c4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022b6:	d103      	bne.n	80022c0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e079      	b.n	80023b8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80022cc:	d108      	bne.n	80022e0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80022ce:	897b      	ldrh	r3, [r7, #10]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	611a      	str	r2, [r3, #16]
 80022de:	e05f      	b.n	80023a0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80022e0:	897b      	ldrh	r3, [r7, #10]
 80022e2:	11db      	asrs	r3, r3, #7
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	f003 0306 	and.w	r3, r3, #6
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	f063 030f 	orn	r3, r3, #15
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	4930      	ldr	r1, [pc, #192]	@ (80023c0 <I2C_MasterRequestRead+0x194>)
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 f8dc 	bl	80024bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e054      	b.n	80023b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800230e:	897b      	ldrh	r3, [r7, #10]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	4929      	ldr	r1, [pc, #164]	@ (80023c4 <I2C_MasterRequestRead+0x198>)
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 f8cc 	bl	80024bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e044      	b.n	80023b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800232e:	2300      	movs	r3, #0
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	613b      	str	r3, [r7, #16]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002352:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 f831 	bl	80023c8 <I2C_WaitOnFlagUntilTimeout>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00d      	beq.n	8002388 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002376:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800237a:	d103      	bne.n	8002384 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002382:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e017      	b.n	80023b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002388:	897b      	ldrh	r3, [r7, #10]
 800238a:	11db      	asrs	r3, r3, #7
 800238c:	b2db      	uxtb	r3, r3
 800238e:	f003 0306 	and.w	r3, r3, #6
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f063 030e 	orn	r3, r3, #14
 8002398:	b2da      	uxtb	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	4907      	ldr	r1, [pc, #28]	@ (80023c4 <I2C_MasterRequestRead+0x198>)
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 f888 	bl	80024bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	00010008 	.word	0x00010008
 80023c4:	00010002 	.word	0x00010002

080023c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	603b      	str	r3, [r7, #0]
 80023d4:	4613      	mov	r3, r2
 80023d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023d8:	e048      	b.n	800246c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e0:	d044      	beq.n	800246c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e2:	f7fe fe2f 	bl	8001044 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d302      	bcc.n	80023f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d139      	bne.n	800246c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	0c1b      	lsrs	r3, r3, #16
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d10d      	bne.n	800241e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	43da      	mvns	r2, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	4013      	ands	r3, r2
 800240e:	b29b      	uxth	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	bf0c      	ite	eq
 8002414:	2301      	moveq	r3, #1
 8002416:	2300      	movne	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	461a      	mov	r2, r3
 800241c:	e00c      	b.n	8002438 <I2C_WaitOnFlagUntilTimeout+0x70>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	43da      	mvns	r2, r3
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	4013      	ands	r3, r2
 800242a:	b29b      	uxth	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	bf0c      	ite	eq
 8002430:	2301      	moveq	r3, #1
 8002432:	2300      	movne	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	461a      	mov	r2, r3
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	429a      	cmp	r2, r3
 800243c:	d116      	bne.n	800246c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002458:	f043 0220 	orr.w	r2, r3, #32
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e023      	b.n	80024b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	0c1b      	lsrs	r3, r3, #16
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b01      	cmp	r3, #1
 8002474:	d10d      	bne.n	8002492 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	43da      	mvns	r2, r3
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	4013      	ands	r3, r2
 8002482:	b29b      	uxth	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	bf0c      	ite	eq
 8002488:	2301      	moveq	r3, #1
 800248a:	2300      	movne	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	461a      	mov	r2, r3
 8002490:	e00c      	b.n	80024ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	43da      	mvns	r2, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	4013      	ands	r3, r2
 800249e:	b29b      	uxth	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	bf0c      	ite	eq
 80024a4:	2301      	moveq	r3, #1
 80024a6:	2300      	movne	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	461a      	mov	r2, r3
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d093      	beq.n	80023da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024ca:	e071      	b.n	80025b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024da:	d123      	bne.n	8002524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80024f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002510:	f043 0204 	orr.w	r2, r3, #4
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e067      	b.n	80025f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252a:	d041      	beq.n	80025b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800252c:	f7fe fd8a 	bl	8001044 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	429a      	cmp	r2, r3
 800253a:	d302      	bcc.n	8002542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d136      	bne.n	80025b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	0c1b      	lsrs	r3, r3, #16
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b01      	cmp	r3, #1
 800254a:	d10c      	bne.n	8002566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	43da      	mvns	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	4013      	ands	r3, r2
 8002558:	b29b      	uxth	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	bf14      	ite	ne
 800255e:	2301      	movne	r3, #1
 8002560:	2300      	moveq	r3, #0
 8002562:	b2db      	uxtb	r3, r3
 8002564:	e00b      	b.n	800257e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	43da      	mvns	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	4013      	ands	r3, r2
 8002572:	b29b      	uxth	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	bf14      	ite	ne
 8002578:	2301      	movne	r3, #1
 800257a:	2300      	moveq	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d016      	beq.n	80025b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259c:	f043 0220 	orr.w	r2, r3, #32
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e021      	b.n	80025f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	0c1b      	lsrs	r3, r3, #16
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d10c      	bne.n	80025d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	43da      	mvns	r2, r3
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	4013      	ands	r3, r2
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	bf14      	ite	ne
 80025cc:	2301      	movne	r3, #1
 80025ce:	2300      	moveq	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	e00b      	b.n	80025ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	43da      	mvns	r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	4013      	ands	r3, r2
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	bf14      	ite	ne
 80025e6:	2301      	movne	r3, #1
 80025e8:	2300      	moveq	r3, #0
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f47f af6d 	bne.w	80024cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002608:	e034      	b.n	8002674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 f8e3 	bl	80027d6 <I2C_IsAcknowledgeFailed>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e034      	b.n	8002684 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002620:	d028      	beq.n	8002674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002622:	f7fe fd0f 	bl	8001044 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	429a      	cmp	r2, r3
 8002630:	d302      	bcc.n	8002638 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d11d      	bne.n	8002674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002642:	2b80      	cmp	r3, #128	@ 0x80
 8002644:	d016      	beq.n	8002674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002660:	f043 0220 	orr.w	r2, r3, #32
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e007      	b.n	8002684 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800267e:	2b80      	cmp	r3, #128	@ 0x80
 8002680:	d1c3      	bne.n	800260a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002698:	e034      	b.n	8002704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f89b 	bl	80027d6 <I2C_IsAcknowledgeFailed>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e034      	b.n	8002714 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b0:	d028      	beq.n	8002704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026b2:	f7fe fcc7 	bl	8001044 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d302      	bcc.n	80026c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d11d      	bne.n	8002704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d016      	beq.n	8002704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f0:	f043 0220 	orr.w	r2, r3, #32
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e007      	b.n	8002714 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	2b04      	cmp	r3, #4
 8002710:	d1c3      	bne.n	800269a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002728:	e049      	b.n	80027be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	f003 0310 	and.w	r3, r3, #16
 8002734:	2b10      	cmp	r3, #16
 8002736:	d119      	bne.n	800276c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 0210 	mvn.w	r2, #16
 8002740:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e030      	b.n	80027ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800276c:	f7fe fc6a 	bl	8001044 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	429a      	cmp	r2, r3
 800277a:	d302      	bcc.n	8002782 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d11d      	bne.n	80027be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800278c:	2b40      	cmp	r3, #64	@ 0x40
 800278e:	d016      	beq.n	80027be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2220      	movs	r2, #32
 800279a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027aa:	f043 0220 	orr.w	r2, r3, #32
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e007      	b.n	80027ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027c8:	2b40      	cmp	r3, #64	@ 0x40
 80027ca:	d1ae      	bne.n	800272a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027ec:	d11b      	bne.n	8002826 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80027f6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2220      	movs	r2, #32
 8002802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002812:	f043 0204 	orr.w	r2, r3, #4
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800283a:	2300      	movs	r3, #0
 800283c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	603b      	str	r3, [r7, #0]
 8002842:	4b20      	ldr	r3, [pc, #128]	@ (80028c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002846:	4a1f      	ldr	r2, [pc, #124]	@ (80028c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800284c:	6413      	str	r3, [r2, #64]	@ 0x40
 800284e:	4b1d      	ldr	r3, [pc, #116]	@ (80028c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002856:	603b      	str	r3, [r7, #0]
 8002858:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800285a:	4b1b      	ldr	r3, [pc, #108]	@ (80028c8 <HAL_PWREx_EnableOverDrive+0x94>)
 800285c:	2201      	movs	r2, #1
 800285e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002860:	f7fe fbf0 	bl	8001044 <HAL_GetTick>
 8002864:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002866:	e009      	b.n	800287c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002868:	f7fe fbec 	bl	8001044 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002876:	d901      	bls.n	800287c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e01f      	b.n	80028bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800287c:	4b13      	ldr	r3, [pc, #76]	@ (80028cc <HAL_PWREx_EnableOverDrive+0x98>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002888:	d1ee      	bne.n	8002868 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800288a:	4b11      	ldr	r3, [pc, #68]	@ (80028d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800288c:	2201      	movs	r2, #1
 800288e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002890:	f7fe fbd8 	bl	8001044 <HAL_GetTick>
 8002894:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002896:	e009      	b.n	80028ac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002898:	f7fe fbd4 	bl	8001044 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80028a6:	d901      	bls.n	80028ac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e007      	b.n	80028bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028ac:	4b07      	ldr	r3, [pc, #28]	@ (80028cc <HAL_PWREx_EnableOverDrive+0x98>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80028b8:	d1ee      	bne.n	8002898 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40023800 	.word	0x40023800
 80028c8:	420e0040 	.word	0x420e0040
 80028cc:	40007000 	.word	0x40007000
 80028d0:	420e0044 	.word	0x420e0044

080028d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0cc      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028e8:	4b68      	ldr	r3, [pc, #416]	@ (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 030f 	and.w	r3, r3, #15
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d90c      	bls.n	8002910 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f6:	4b65      	ldr	r3, [pc, #404]	@ (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fe:	4b63      	ldr	r3, [pc, #396]	@ (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0b8      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d020      	beq.n	800295e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002928:	4b59      	ldr	r3, [pc, #356]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	4a58      	ldr	r2, [pc, #352]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002932:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002940:	4b53      	ldr	r3, [pc, #332]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	4a52      	ldr	r2, [pc, #328]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800294a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800294c:	4b50      	ldr	r3, [pc, #320]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	494d      	ldr	r1, [pc, #308]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	4313      	orrs	r3, r2
 800295c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d044      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d107      	bne.n	8002982 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002972:	4b47      	ldr	r3, [pc, #284]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d119      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e07f      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d003      	beq.n	8002992 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800298e:	2b03      	cmp	r3, #3
 8002990:	d107      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002992:	4b3f      	ldr	r3, [pc, #252]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e06f      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e067      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029b2:	4b37      	ldr	r3, [pc, #220]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f023 0203 	bic.w	r2, r3, #3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	4934      	ldr	r1, [pc, #208]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c4:	f7fe fb3e 	bl	8001044 <HAL_GetTick>
 80029c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	e00a      	b.n	80029e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029cc:	f7fe fb3a 	bl	8001044 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029da:	4293      	cmp	r3, r2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e04f      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 020c 	and.w	r2, r3, #12
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d1eb      	bne.n	80029cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029f4:	4b25      	ldr	r3, [pc, #148]	@ (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d20c      	bcs.n	8002a1c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a02:	4b22      	ldr	r3, [pc, #136]	@ (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0a:	4b20      	ldr	r3, [pc, #128]	@ (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e032      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a28:	4b19      	ldr	r3, [pc, #100]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4916      	ldr	r1, [pc, #88]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d009      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a46:	4b12      	ldr	r3, [pc, #72]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	490e      	ldr	r1, [pc, #56]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a5a:	f000 f855 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	4b0b      	ldr	r3, [pc, #44]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	091b      	lsrs	r3, r3, #4
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	490a      	ldr	r1, [pc, #40]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 8002a6c:	5ccb      	ldrb	r3, [r1, r3]
 8002a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a72:	4a09      	ldr	r2, [pc, #36]	@ (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a76:	4b09      	ldr	r3, [pc, #36]	@ (8002a9c <HAL_RCC_ClockConfig+0x1c8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe fa9e 	bl	8000fbc <HAL_InitTick>

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40023c00 	.word	0x40023c00
 8002a90:	40023800 	.word	0x40023800
 8002a94:	08003d38 	.word	0x08003d38
 8002a98:	20000000 	.word	0x20000000
 8002a9c:	20000004 	.word	0x20000004

08002aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa4:	4b03      	ldr	r3, [pc, #12]	@ (8002ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	20000000 	.word	0x20000000

08002ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002abc:	f7ff fff0 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b05      	ldr	r3, [pc, #20]	@ (8002ad8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	0a9b      	lsrs	r3, r3, #10
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	4903      	ldr	r1, [pc, #12]	@ (8002adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ace:	5ccb      	ldrb	r3, [r1, r3]
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	08003d48 	.word	0x08003d48

08002ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ae4:	f7ff ffdc 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	4b05      	ldr	r3, [pc, #20]	@ (8002b00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	0b5b      	lsrs	r3, r3, #13
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	4903      	ldr	r1, [pc, #12]	@ (8002b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002af6:	5ccb      	ldrb	r3, [r1, r3]
 8002af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40023800 	.word	0x40023800
 8002b04:	08003d48 	.word	0x08003d48

08002b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b0c:	b0ae      	sub	sp, #184	@ 0xb8
 8002b0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b2e:	4bcb      	ldr	r3, [pc, #812]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 030c 	and.w	r3, r3, #12
 8002b36:	2b0c      	cmp	r3, #12
 8002b38:	f200 8206 	bhi.w	8002f48 <HAL_RCC_GetSysClockFreq+0x440>
 8002b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8002b44 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b42:	bf00      	nop
 8002b44:	08002b79 	.word	0x08002b79
 8002b48:	08002f49 	.word	0x08002f49
 8002b4c:	08002f49 	.word	0x08002f49
 8002b50:	08002f49 	.word	0x08002f49
 8002b54:	08002b81 	.word	0x08002b81
 8002b58:	08002f49 	.word	0x08002f49
 8002b5c:	08002f49 	.word	0x08002f49
 8002b60:	08002f49 	.word	0x08002f49
 8002b64:	08002b89 	.word	0x08002b89
 8002b68:	08002f49 	.word	0x08002f49
 8002b6c:	08002f49 	.word	0x08002f49
 8002b70:	08002f49 	.word	0x08002f49
 8002b74:	08002d79 	.word	0x08002d79
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b78:	4bb9      	ldr	r3, [pc, #740]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0x358>)
 8002b7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b7e:	e1e7      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b80:	4bb8      	ldr	r3, [pc, #736]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002b82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b86:	e1e3      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b88:	4bb4      	ldr	r3, [pc, #720]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b94:	4bb1      	ldr	r3, [pc, #708]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d071      	beq.n	8002c84 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba0:	4bae      	ldr	r3, [pc, #696]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	099b      	lsrs	r3, r3, #6
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002bac:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002bb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bb8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002bc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002bc6:	4622      	mov	r2, r4
 8002bc8:	462b      	mov	r3, r5
 8002bca:	f04f 0000 	mov.w	r0, #0
 8002bce:	f04f 0100 	mov.w	r1, #0
 8002bd2:	0159      	lsls	r1, r3, #5
 8002bd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bd8:	0150      	lsls	r0, r2, #5
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	4621      	mov	r1, r4
 8002be0:	1a51      	subs	r1, r2, r1
 8002be2:	6439      	str	r1, [r7, #64]	@ 0x40
 8002be4:	4629      	mov	r1, r5
 8002be6:	eb63 0301 	sbc.w	r3, r3, r1
 8002bea:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002bf8:	4649      	mov	r1, r9
 8002bfa:	018b      	lsls	r3, r1, #6
 8002bfc:	4641      	mov	r1, r8
 8002bfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c02:	4641      	mov	r1, r8
 8002c04:	018a      	lsls	r2, r1, #6
 8002c06:	4641      	mov	r1, r8
 8002c08:	1a51      	subs	r1, r2, r1
 8002c0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c0c:	4649      	mov	r1, r9
 8002c0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002c20:	4649      	mov	r1, r9
 8002c22:	00cb      	lsls	r3, r1, #3
 8002c24:	4641      	mov	r1, r8
 8002c26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c2a:	4641      	mov	r1, r8
 8002c2c:	00ca      	lsls	r2, r1, #3
 8002c2e:	4610      	mov	r0, r2
 8002c30:	4619      	mov	r1, r3
 8002c32:	4603      	mov	r3, r0
 8002c34:	4622      	mov	r2, r4
 8002c36:	189b      	adds	r3, r3, r2
 8002c38:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c3a:	462b      	mov	r3, r5
 8002c3c:	460a      	mov	r2, r1
 8002c3e:	eb42 0303 	adc.w	r3, r2, r3
 8002c42:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c50:	4629      	mov	r1, r5
 8002c52:	024b      	lsls	r3, r1, #9
 8002c54:	4621      	mov	r1, r4
 8002c56:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c5a:	4621      	mov	r1, r4
 8002c5c:	024a      	lsls	r2, r1, #9
 8002c5e:	4610      	mov	r0, r2
 8002c60:	4619      	mov	r1, r3
 8002c62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c66:	2200      	movs	r2, #0
 8002c68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c6c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c70:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002c74:	f7fd fac6 	bl	8000204 <__aeabi_uldivmod>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c82:	e067      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c84:	4b75      	ldr	r3, [pc, #468]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	099b      	lsrs	r3, r3, #6
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c90:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002c94:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002ca2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002ca6:	4622      	mov	r2, r4
 8002ca8:	462b      	mov	r3, r5
 8002caa:	f04f 0000 	mov.w	r0, #0
 8002cae:	f04f 0100 	mov.w	r1, #0
 8002cb2:	0159      	lsls	r1, r3, #5
 8002cb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cb8:	0150      	lsls	r0, r2, #5
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	1a51      	subs	r1, r2, r1
 8002cc2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002cc4:	4629      	mov	r1, r5
 8002cc6:	eb63 0301 	sbc.w	r3, r3, r1
 8002cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002cd8:	4649      	mov	r1, r9
 8002cda:	018b      	lsls	r3, r1, #6
 8002cdc:	4641      	mov	r1, r8
 8002cde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ce2:	4641      	mov	r1, r8
 8002ce4:	018a      	lsls	r2, r1, #6
 8002ce6:	4641      	mov	r1, r8
 8002ce8:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cec:	4649      	mov	r1, r9
 8002cee:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cfe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d06:	4692      	mov	sl, r2
 8002d08:	469b      	mov	fp, r3
 8002d0a:	4623      	mov	r3, r4
 8002d0c:	eb1a 0303 	adds.w	r3, sl, r3
 8002d10:	623b      	str	r3, [r7, #32]
 8002d12:	462b      	mov	r3, r5
 8002d14:	eb4b 0303 	adc.w	r3, fp, r3
 8002d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	f04f 0300 	mov.w	r3, #0
 8002d22:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002d26:	4629      	mov	r1, r5
 8002d28:	028b      	lsls	r3, r1, #10
 8002d2a:	4621      	mov	r1, r4
 8002d2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d30:	4621      	mov	r1, r4
 8002d32:	028a      	lsls	r2, r1, #10
 8002d34:	4610      	mov	r0, r2
 8002d36:	4619      	mov	r1, r3
 8002d38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d40:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d42:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002d46:	f7fd fa5d 	bl	8000204 <__aeabi_uldivmod>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4613      	mov	r3, r2
 8002d50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d54:	4b41      	ldr	r3, [pc, #260]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	0c1b      	lsrs	r3, r3, #16
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	3301      	adds	r3, #1
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002d66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d76:	e0eb      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d78:	4b38      	ldr	r3, [pc, #224]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d84:	4b35      	ldr	r3, [pc, #212]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d06b      	beq.n	8002e68 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d90:	4b32      	ldr	r3, [pc, #200]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	099b      	lsrs	r3, r3, #6
 8002d96:	2200      	movs	r2, #0
 8002d98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002da2:	663b      	str	r3, [r7, #96]	@ 0x60
 8002da4:	2300      	movs	r3, #0
 8002da6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002da8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002dac:	4622      	mov	r2, r4
 8002dae:	462b      	mov	r3, r5
 8002db0:	f04f 0000 	mov.w	r0, #0
 8002db4:	f04f 0100 	mov.w	r1, #0
 8002db8:	0159      	lsls	r1, r3, #5
 8002dba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dbe:	0150      	lsls	r0, r2, #5
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	1a51      	subs	r1, r2, r1
 8002dc8:	61b9      	str	r1, [r7, #24]
 8002dca:	4629      	mov	r1, r5
 8002dcc:	eb63 0301 	sbc.w	r3, r3, r1
 8002dd0:	61fb      	str	r3, [r7, #28]
 8002dd2:	f04f 0200 	mov.w	r2, #0
 8002dd6:	f04f 0300 	mov.w	r3, #0
 8002dda:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002dde:	4659      	mov	r1, fp
 8002de0:	018b      	lsls	r3, r1, #6
 8002de2:	4651      	mov	r1, sl
 8002de4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002de8:	4651      	mov	r1, sl
 8002dea:	018a      	lsls	r2, r1, #6
 8002dec:	4651      	mov	r1, sl
 8002dee:	ebb2 0801 	subs.w	r8, r2, r1
 8002df2:	4659      	mov	r1, fp
 8002df4:	eb63 0901 	sbc.w	r9, r3, r1
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e04:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e08:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e0c:	4690      	mov	r8, r2
 8002e0e:	4699      	mov	r9, r3
 8002e10:	4623      	mov	r3, r4
 8002e12:	eb18 0303 	adds.w	r3, r8, r3
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	462b      	mov	r3, r5
 8002e1a:	eb49 0303 	adc.w	r3, r9, r3
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002e2c:	4629      	mov	r1, r5
 8002e2e:	024b      	lsls	r3, r1, #9
 8002e30:	4621      	mov	r1, r4
 8002e32:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e36:	4621      	mov	r1, r4
 8002e38:	024a      	lsls	r2, r1, #9
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e42:	2200      	movs	r2, #0
 8002e44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002e46:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002e48:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002e4c:	f7fd f9da 	bl	8000204 <__aeabi_uldivmod>
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4613      	mov	r3, r2
 8002e56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e5a:	e065      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0x420>
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	00f42400 	.word	0x00f42400
 8002e64:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e68:	4b3d      	ldr	r3, [pc, #244]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	099b      	lsrs	r3, r3, #6
 8002e6e:	2200      	movs	r2, #0
 8002e70:	4618      	mov	r0, r3
 8002e72:	4611      	mov	r1, r2
 8002e74:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e78:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e7e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002e82:	4642      	mov	r2, r8
 8002e84:	464b      	mov	r3, r9
 8002e86:	f04f 0000 	mov.w	r0, #0
 8002e8a:	f04f 0100 	mov.w	r1, #0
 8002e8e:	0159      	lsls	r1, r3, #5
 8002e90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e94:	0150      	lsls	r0, r2, #5
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4641      	mov	r1, r8
 8002e9c:	1a51      	subs	r1, r2, r1
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	4649      	mov	r1, r9
 8002ea2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002eb4:	4659      	mov	r1, fp
 8002eb6:	018b      	lsls	r3, r1, #6
 8002eb8:	4651      	mov	r1, sl
 8002eba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ebe:	4651      	mov	r1, sl
 8002ec0:	018a      	lsls	r2, r1, #6
 8002ec2:	4651      	mov	r1, sl
 8002ec4:	1a54      	subs	r4, r2, r1
 8002ec6:	4659      	mov	r1, fp
 8002ec8:	eb63 0501 	sbc.w	r5, r3, r1
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	00eb      	lsls	r3, r5, #3
 8002ed6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eda:	00e2      	lsls	r2, r4, #3
 8002edc:	4614      	mov	r4, r2
 8002ede:	461d      	mov	r5, r3
 8002ee0:	4643      	mov	r3, r8
 8002ee2:	18e3      	adds	r3, r4, r3
 8002ee4:	603b      	str	r3, [r7, #0]
 8002ee6:	464b      	mov	r3, r9
 8002ee8:	eb45 0303 	adc.w	r3, r5, r3
 8002eec:	607b      	str	r3, [r7, #4]
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002efa:	4629      	mov	r1, r5
 8002efc:	028b      	lsls	r3, r1, #10
 8002efe:	4621      	mov	r1, r4
 8002f00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f04:	4621      	mov	r1, r4
 8002f06:	028a      	lsls	r2, r1, #10
 8002f08:	4610      	mov	r0, r2
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f10:	2200      	movs	r2, #0
 8002f12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f14:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002f16:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f1a:	f7fd f973 	bl	8000204 <__aeabi_uldivmod>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	4613      	mov	r3, r2
 8002f24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f28:	4b0d      	ldr	r3, [pc, #52]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x458>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	0f1b      	lsrs	r3, r3, #28
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002f36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f46:	e003      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f48:	4b06      	ldr	r3, [pc, #24]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002f4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	37b8      	adds	r7, #184	@ 0xb8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f5e:	bf00      	nop
 8002f60:	40023800 	.word	0x40023800
 8002f64:	00f42400 	.word	0x00f42400

08002f68 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e28d      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 8083 	beq.w	800308e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f88:	4b94      	ldr	r3, [pc, #592]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 030c 	and.w	r3, r3, #12
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d019      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f94:	4b91      	ldr	r3, [pc, #580]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 030c 	and.w	r3, r3, #12
        || \
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d106      	bne.n	8002fae <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002fa0:	4b8e      	ldr	r3, [pc, #568]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fa8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fac:	d00c      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fae:	4b8b      	ldr	r3, [pc, #556]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002fb6:	2b0c      	cmp	r3, #12
 8002fb8:	d112      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fba:	4b88      	ldr	r3, [pc, #544]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fc6:	d10b      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc8:	4b84      	ldr	r3, [pc, #528]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d05b      	beq.n	800308c <HAL_RCC_OscConfig+0x124>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d157      	bne.n	800308c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e25a      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fe8:	d106      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x90>
 8002fea:	4b7c      	ldr	r3, [pc, #496]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a7b      	ldr	r2, [pc, #492]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 8002ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ff4:	6013      	str	r3, [r2, #0]
 8002ff6:	e01d      	b.n	8003034 <HAL_RCC_OscConfig+0xcc>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003000:	d10c      	bne.n	800301c <HAL_RCC_OscConfig+0xb4>
 8003002:	4b76      	ldr	r3, [pc, #472]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a75      	ldr	r2, [pc, #468]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 8003008:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	4b73      	ldr	r3, [pc, #460]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a72      	ldr	r2, [pc, #456]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 8003014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	e00b      	b.n	8003034 <HAL_RCC_OscConfig+0xcc>
 800301c:	4b6f      	ldr	r3, [pc, #444]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a6e      	ldr	r2, [pc, #440]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 8003022:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003026:	6013      	str	r3, [r2, #0]
 8003028:	4b6c      	ldr	r3, [pc, #432]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a6b      	ldr	r2, [pc, #428]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 800302e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d013      	beq.n	8003064 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303c:	f7fe f802 	bl	8001044 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003044:	f7fd fffe 	bl	8001044 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b64      	cmp	r3, #100	@ 0x64
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e21f      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003056:	4b61      	ldr	r3, [pc, #388]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f0      	beq.n	8003044 <HAL_RCC_OscConfig+0xdc>
 8003062:	e014      	b.n	800308e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003064:	f7fd ffee 	bl	8001044 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800306c:	f7fd ffea 	bl	8001044 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	@ 0x64
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e20b      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800307e:	4b57      	ldr	r3, [pc, #348]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x104>
 800308a:	e000      	b.n	800308e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800308c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d06f      	beq.n	800317a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800309a:	4b50      	ldr	r3, [pc, #320]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d017      	beq.n	80030d6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80030a6:	4b4d      	ldr	r3, [pc, #308]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
        || \
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d105      	bne.n	80030be <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80030b2:	4b4a      	ldr	r3, [pc, #296]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00b      	beq.n	80030d6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030be:	4b47      	ldr	r3, [pc, #284]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80030c6:	2b0c      	cmp	r3, #12
 80030c8:	d11c      	bne.n	8003104 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ca:	4b44      	ldr	r3, [pc, #272]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d116      	bne.n	8003104 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030d6:	4b41      	ldr	r3, [pc, #260]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d005      	beq.n	80030ee <HAL_RCC_OscConfig+0x186>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d001      	beq.n	80030ee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e1d3      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ee:	4b3b      	ldr	r3, [pc, #236]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	4937      	ldr	r1, [pc, #220]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003102:	e03a      	b.n	800317a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d020      	beq.n	800314e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800310c:	4b34      	ldr	r3, [pc, #208]	@ (80031e0 <HAL_RCC_OscConfig+0x278>)
 800310e:	2201      	movs	r2, #1
 8003110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003112:	f7fd ff97 	bl	8001044 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800311a:	f7fd ff93 	bl	8001044 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e1b4      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312c:	4b2b      	ldr	r3, [pc, #172]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0f0      	beq.n	800311a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003138:	4b28      	ldr	r3, [pc, #160]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4925      	ldr	r1, [pc, #148]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 8003148:	4313      	orrs	r3, r2
 800314a:	600b      	str	r3, [r1, #0]
 800314c:	e015      	b.n	800317a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800314e:	4b24      	ldr	r3, [pc, #144]	@ (80031e0 <HAL_RCC_OscConfig+0x278>)
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003154:	f7fd ff76 	bl	8001044 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800315c:	f7fd ff72 	bl	8001044 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e193      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800316e:	4b1b      	ldr	r3, [pc, #108]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1f0      	bne.n	800315c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d036      	beq.n	80031f4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d016      	beq.n	80031bc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800318e:	4b15      	ldr	r3, [pc, #84]	@ (80031e4 <HAL_RCC_OscConfig+0x27c>)
 8003190:	2201      	movs	r2, #1
 8003192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003194:	f7fd ff56 	bl	8001044 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800319c:	f7fd ff52 	bl	8001044 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e173      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ae:	4b0b      	ldr	r3, [pc, #44]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 80031b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f0      	beq.n	800319c <HAL_RCC_OscConfig+0x234>
 80031ba:	e01b      	b.n	80031f4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031bc:	4b09      	ldr	r3, [pc, #36]	@ (80031e4 <HAL_RCC_OscConfig+0x27c>)
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c2:	f7fd ff3f 	bl	8001044 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c8:	e00e      	b.n	80031e8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ca:	f7fd ff3b 	bl	8001044 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d907      	bls.n	80031e8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e15c      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
 80031dc:	40023800 	.word	0x40023800
 80031e0:	42470000 	.word	0x42470000
 80031e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e8:	4b8a      	ldr	r3, [pc, #552]	@ (8003414 <HAL_RCC_OscConfig+0x4ac>)
 80031ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1ea      	bne.n	80031ca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 8097 	beq.w	8003330 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003202:	2300      	movs	r3, #0
 8003204:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003206:	4b83      	ldr	r3, [pc, #524]	@ (8003414 <HAL_RCC_OscConfig+0x4ac>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10f      	bne.n	8003232 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003212:	2300      	movs	r3, #0
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	4b7f      	ldr	r3, [pc, #508]	@ (8003414 <HAL_RCC_OscConfig+0x4ac>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321a:	4a7e      	ldr	r2, [pc, #504]	@ (8003414 <HAL_RCC_OscConfig+0x4ac>)
 800321c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003220:	6413      	str	r3, [r2, #64]	@ 0x40
 8003222:	4b7c      	ldr	r3, [pc, #496]	@ (8003414 <HAL_RCC_OscConfig+0x4ac>)
 8003224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800322a:	60bb      	str	r3, [r7, #8]
 800322c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800322e:	2301      	movs	r3, #1
 8003230:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003232:	4b79      	ldr	r3, [pc, #484]	@ (8003418 <HAL_RCC_OscConfig+0x4b0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800323a:	2b00      	cmp	r3, #0
 800323c:	d118      	bne.n	8003270 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800323e:	4b76      	ldr	r3, [pc, #472]	@ (8003418 <HAL_RCC_OscConfig+0x4b0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a75      	ldr	r2, [pc, #468]	@ (8003418 <HAL_RCC_OscConfig+0x4b0>)
 8003244:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800324a:	f7fd fefb 	bl	8001044 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003252:	f7fd fef7 	bl	8001044 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e118      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003264:	4b6c      	ldr	r3, [pc, #432]	@ (8003418 <HAL_RCC_OscConfig+0x4b0>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0f0      	beq.n	8003252 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d106      	bne.n	8003286 <HAL_RCC_OscConfig+0x31e>
 8003278:	4b66      	ldr	r3, [pc, #408]	@ (8003414 <HAL_RCC_OscConfig+0x4ac>)
 800327a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800327c:	4a65      	ldr	r2, [pc, #404]	@ (8003414 <HAL_RCC_OscConfig+0x4ac>)
 800327e:	f043 0301 	orr.w	r3, r3, #1
 8003282:	6713      	str	r3, [r2, #112]	@ 0x70
 8003284:	e01c      	b.n	80032c0 <HAL_RCC_OscConfig+0x358>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2b05      	cmp	r3, #5
 800328c:	d10c      	bne.n	80032a8 <HAL_RCC_OscConfig+0x340>
 800328e:	4b61      	ldr	r3, [pc, #388]	@ (8003414 <HAL_RCC_OscConfig+0x4ac>)
 8003290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003292:	4a60      	ldr	r2, [pc, #384]	@ (8003414 <HAL_RCC_OscConfig+0x4ac>)
 8003294:	f043 0304 	orr.w	r3, r3, #4
 8003298:	6713      	str	r3, [r2, #112]	@ 0x70
 800329a:	4b5e      	ldr	r3, [pc, #376]	@ (8003414 <HAL_RCC_OscConfig+0x4ac>)
 800329c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800329e:	4a5d      	ldr	r2, [pc, #372]	@ (8003414 <HAL_RCC_OscConfig+0x4ac>)
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80032a6:	e00b      	b.n	80032c0 <HAL_RCC_OscConfig+0x358>
 80032a8:	4b5a      	ldr	r3, [pc, #360]	@ (8003414 <HAL_RCC_OscConfig+0x4ac>)
 80032aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ac:	4a59      	ldr	r2, [pc, #356]	@ (8003414 <HAL_RCC_OscConfig+0x4ac>)
 80032ae:	f023 0301 	bic.w	r3, r3, #1
 80032b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80032b4:	4b57      	ldr	r3, [pc, #348]	@ (8003414 <HAL_RCC_OscConfig+0x4ac>)
 80032b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b8:	4a56      	ldr	r2, [pc, #344]	@ (8003414 <HAL_RCC_OscConfig+0x4ac>)
 80032ba:	f023 0304 	bic.w	r3, r3, #4
 80032be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d015      	beq.n	80032f4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c8:	f7fd febc 	bl	8001044 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ce:	e00a      	b.n	80032e6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d0:	f7fd feb8 	bl	8001044 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032de:	4293      	cmp	r3, r2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e0d7      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e6:	4b4b      	ldr	r3, [pc, #300]	@ (8003414 <HAL_RCC_OscConfig+0x4ac>)
 80032e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0ee      	beq.n	80032d0 <HAL_RCC_OscConfig+0x368>
 80032f2:	e014      	b.n	800331e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f4:	f7fd fea6 	bl	8001044 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032fa:	e00a      	b.n	8003312 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032fc:	f7fd fea2 	bl	8001044 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800330a:	4293      	cmp	r3, r2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e0c1      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003312:	4b40      	ldr	r3, [pc, #256]	@ (8003414 <HAL_RCC_OscConfig+0x4ac>)
 8003314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1ee      	bne.n	80032fc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800331e:	7dfb      	ldrb	r3, [r7, #23]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d105      	bne.n	8003330 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003324:	4b3b      	ldr	r3, [pc, #236]	@ (8003414 <HAL_RCC_OscConfig+0x4ac>)
 8003326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003328:	4a3a      	ldr	r2, [pc, #232]	@ (8003414 <HAL_RCC_OscConfig+0x4ac>)
 800332a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800332e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 80ad 	beq.w	8003494 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800333a:	4b36      	ldr	r3, [pc, #216]	@ (8003414 <HAL_RCC_OscConfig+0x4ac>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 030c 	and.w	r3, r3, #12
 8003342:	2b08      	cmp	r3, #8
 8003344:	d060      	beq.n	8003408 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	2b02      	cmp	r3, #2
 800334c:	d145      	bne.n	80033da <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334e:	4b33      	ldr	r3, [pc, #204]	@ (800341c <HAL_RCC_OscConfig+0x4b4>)
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003354:	f7fd fe76 	bl	8001044 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335c:	f7fd fe72 	bl	8001044 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e093      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336e:	4b29      	ldr	r3, [pc, #164]	@ (8003414 <HAL_RCC_OscConfig+0x4ac>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69da      	ldr	r2, [r3, #28]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003388:	019b      	lsls	r3, r3, #6
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003390:	085b      	lsrs	r3, r3, #1
 8003392:	3b01      	subs	r3, #1
 8003394:	041b      	lsls	r3, r3, #16
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339c:	061b      	lsls	r3, r3, #24
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a4:	071b      	lsls	r3, r3, #28
 80033a6:	491b      	ldr	r1, [pc, #108]	@ (8003414 <HAL_RCC_OscConfig+0x4ac>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033ac:	4b1b      	ldr	r3, [pc, #108]	@ (800341c <HAL_RCC_OscConfig+0x4b4>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b2:	f7fd fe47 	bl	8001044 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ba:	f7fd fe43 	bl	8001044 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e064      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033cc:	4b11      	ldr	r3, [pc, #68]	@ (8003414 <HAL_RCC_OscConfig+0x4ac>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0f0      	beq.n	80033ba <HAL_RCC_OscConfig+0x452>
 80033d8:	e05c      	b.n	8003494 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033da:	4b10      	ldr	r3, [pc, #64]	@ (800341c <HAL_RCC_OscConfig+0x4b4>)
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e0:	f7fd fe30 	bl	8001044 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e8:	f7fd fe2c 	bl	8001044 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e04d      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fa:	4b06      	ldr	r3, [pc, #24]	@ (8003414 <HAL_RCC_OscConfig+0x4ac>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f0      	bne.n	80033e8 <HAL_RCC_OscConfig+0x480>
 8003406:	e045      	b.n	8003494 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d107      	bne.n	8003420 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e040      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
 8003414:	40023800 	.word	0x40023800
 8003418:	40007000 	.word	0x40007000
 800341c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003420:	4b1f      	ldr	r3, [pc, #124]	@ (80034a0 <HAL_RCC_OscConfig+0x538>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d030      	beq.n	8003490 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003438:	429a      	cmp	r2, r3
 800343a:	d129      	bne.n	8003490 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003446:	429a      	cmp	r2, r3
 8003448:	d122      	bne.n	8003490 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003450:	4013      	ands	r3, r2
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003456:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003458:	4293      	cmp	r3, r2
 800345a:	d119      	bne.n	8003490 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003466:	085b      	lsrs	r3, r3, #1
 8003468:	3b01      	subs	r3, #1
 800346a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800346c:	429a      	cmp	r2, r3
 800346e:	d10f      	bne.n	8003490 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800347c:	429a      	cmp	r2, r3
 800347e:	d107      	bne.n	8003490 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800348c:	429a      	cmp	r2, r3
 800348e:	d001      	beq.n	8003494 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40023800 	.word	0x40023800

080034a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e042      	b.n	800353c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d106      	bne.n	80034d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fd fca0 	bl	8000e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2224      	movs	r2, #36	@ 0x24
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f973 	bl	80037d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	691a      	ldr	r2, [r3, #16]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695a      	ldr	r2, [r3, #20]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800350c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800351c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b08a      	sub	sp, #40	@ 0x28
 8003548:	af02      	add	r7, sp, #8
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	603b      	str	r3, [r7, #0]
 8003550:	4613      	mov	r3, r2
 8003552:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b20      	cmp	r3, #32
 8003562:	d175      	bne.n	8003650 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <HAL_UART_Transmit+0x2c>
 800356a:	88fb      	ldrh	r3, [r7, #6]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e06e      	b.n	8003652 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2221      	movs	r2, #33	@ 0x21
 800357e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003582:	f7fd fd5f 	bl	8001044 <HAL_GetTick>
 8003586:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	88fa      	ldrh	r2, [r7, #6]
 800358c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	88fa      	ldrh	r2, [r7, #6]
 8003592:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800359c:	d108      	bne.n	80035b0 <HAL_UART_Transmit+0x6c>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d104      	bne.n	80035b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	e003      	b.n	80035b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035b8:	e02e      	b.n	8003618 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2200      	movs	r2, #0
 80035c2:	2180      	movs	r1, #128	@ 0x80
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 f848 	bl	800365a <UART_WaitOnFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d005      	beq.n	80035dc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e03a      	b.n	8003652 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10b      	bne.n	80035fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	461a      	mov	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	3302      	adds	r3, #2
 80035f6:	61bb      	str	r3, [r7, #24]
 80035f8:	e007      	b.n	800360a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	781a      	ldrb	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	3301      	adds	r3, #1
 8003608:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800361c:	b29b      	uxth	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1cb      	bne.n	80035ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	2200      	movs	r2, #0
 800362a:	2140      	movs	r1, #64	@ 0x40
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 f814 	bl	800365a <UART_WaitOnFlagUntilTimeout>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e006      	b.n	8003652 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	e000      	b.n	8003652 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003650:	2302      	movs	r3, #2
  }
}
 8003652:	4618      	mov	r0, r3
 8003654:	3720      	adds	r7, #32
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b086      	sub	sp, #24
 800365e:	af00      	add	r7, sp, #0
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	603b      	str	r3, [r7, #0]
 8003666:	4613      	mov	r3, r2
 8003668:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800366a:	e03b      	b.n	80036e4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003672:	d037      	beq.n	80036e4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003674:	f7fd fce6 	bl	8001044 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	6a3a      	ldr	r2, [r7, #32]
 8003680:	429a      	cmp	r2, r3
 8003682:	d302      	bcc.n	800368a <UART_WaitOnFlagUntilTimeout+0x30>
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e03a      	b.n	8003704 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	d023      	beq.n	80036e4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b80      	cmp	r3, #128	@ 0x80
 80036a0:	d020      	beq.n	80036e4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2b40      	cmp	r3, #64	@ 0x40
 80036a6:	d01d      	beq.n	80036e4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d116      	bne.n	80036e4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80036b6:	2300      	movs	r3, #0
 80036b8:	617b      	str	r3, [r7, #20]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	617b      	str	r3, [r7, #20]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	617b      	str	r3, [r7, #20]
 80036ca:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 f81d 	bl	800370c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2208      	movs	r2, #8
 80036d6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e00f      	b.n	8003704 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	4013      	ands	r3, r2
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	bf0c      	ite	eq
 80036f4:	2301      	moveq	r3, #1
 80036f6:	2300      	movne	r3, #0
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	461a      	mov	r2, r3
 80036fc:	79fb      	ldrb	r3, [r7, #7]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d0b4      	beq.n	800366c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800370c:	b480      	push	{r7}
 800370e:	b095      	sub	sp, #84	@ 0x54
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	330c      	adds	r3, #12
 800371a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800371e:	e853 3f00 	ldrex	r3, [r3]
 8003722:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003726:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800372a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	330c      	adds	r3, #12
 8003732:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003734:	643a      	str	r2, [r7, #64]	@ 0x40
 8003736:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003738:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800373a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800373c:	e841 2300 	strex	r3, r2, [r1]
 8003740:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1e5      	bne.n	8003714 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3314      	adds	r3, #20
 800374e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	e853 3f00 	ldrex	r3, [r3]
 8003756:	61fb      	str	r3, [r7, #28]
   return(result);
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f023 0301 	bic.w	r3, r3, #1
 800375e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3314      	adds	r3, #20
 8003766:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003768:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800376a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800376e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003770:	e841 2300 	strex	r3, r2, [r1]
 8003774:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1e5      	bne.n	8003748 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003780:	2b01      	cmp	r3, #1
 8003782:	d119      	bne.n	80037b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	330c      	adds	r3, #12
 800378a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	e853 3f00 	ldrex	r3, [r3]
 8003792:	60bb      	str	r3, [r7, #8]
   return(result);
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f023 0310 	bic.w	r3, r3, #16
 800379a:	647b      	str	r3, [r7, #68]	@ 0x44
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	330c      	adds	r3, #12
 80037a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037a4:	61ba      	str	r2, [r7, #24]
 80037a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a8:	6979      	ldr	r1, [r7, #20]
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	e841 2300 	strex	r3, r2, [r1]
 80037b0:	613b      	str	r3, [r7, #16]
   return(result);
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e5      	bne.n	8003784 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80037c6:	bf00      	nop
 80037c8:	3754      	adds	r7, #84	@ 0x54
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
	...

080037d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037d8:	b0c0      	sub	sp, #256	@ 0x100
 80037da:	af00      	add	r7, sp, #0
 80037dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80037ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f0:	68d9      	ldr	r1, [r3, #12]
 80037f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	ea40 0301 	orr.w	r3, r0, r1
 80037fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	431a      	orrs	r2, r3
 800380c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	431a      	orrs	r2, r3
 8003814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800382c:	f021 010c 	bic.w	r1, r1, #12
 8003830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800383a:	430b      	orrs	r3, r1
 800383c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800383e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800384a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800384e:	6999      	ldr	r1, [r3, #24]
 8003850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	ea40 0301 	orr.w	r3, r0, r1
 800385a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800385c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	4b8f      	ldr	r3, [pc, #572]	@ (8003aa0 <UART_SetConfig+0x2cc>)
 8003864:	429a      	cmp	r2, r3
 8003866:	d005      	beq.n	8003874 <UART_SetConfig+0xa0>
 8003868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	4b8d      	ldr	r3, [pc, #564]	@ (8003aa4 <UART_SetConfig+0x2d0>)
 8003870:	429a      	cmp	r2, r3
 8003872:	d104      	bne.n	800387e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003874:	f7ff f934 	bl	8002ae0 <HAL_RCC_GetPCLK2Freq>
 8003878:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800387c:	e003      	b.n	8003886 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800387e:	f7ff f91b 	bl	8002ab8 <HAL_RCC_GetPCLK1Freq>
 8003882:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003890:	f040 810c 	bne.w	8003aac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003898:	2200      	movs	r2, #0
 800389a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800389e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80038a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80038a6:	4622      	mov	r2, r4
 80038a8:	462b      	mov	r3, r5
 80038aa:	1891      	adds	r1, r2, r2
 80038ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 80038ae:	415b      	adcs	r3, r3
 80038b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80038b6:	4621      	mov	r1, r4
 80038b8:	eb12 0801 	adds.w	r8, r2, r1
 80038bc:	4629      	mov	r1, r5
 80038be:	eb43 0901 	adc.w	r9, r3, r1
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038d6:	4690      	mov	r8, r2
 80038d8:	4699      	mov	r9, r3
 80038da:	4623      	mov	r3, r4
 80038dc:	eb18 0303 	adds.w	r3, r8, r3
 80038e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038e4:	462b      	mov	r3, r5
 80038e6:	eb49 0303 	adc.w	r3, r9, r3
 80038ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80038fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003902:	460b      	mov	r3, r1
 8003904:	18db      	adds	r3, r3, r3
 8003906:	653b      	str	r3, [r7, #80]	@ 0x50
 8003908:	4613      	mov	r3, r2
 800390a:	eb42 0303 	adc.w	r3, r2, r3
 800390e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003910:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003914:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003918:	f7fc fc74 	bl	8000204 <__aeabi_uldivmod>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4b61      	ldr	r3, [pc, #388]	@ (8003aa8 <UART_SetConfig+0x2d4>)
 8003922:	fba3 2302 	umull	r2, r3, r3, r2
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	011c      	lsls	r4, r3, #4
 800392a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800392e:	2200      	movs	r2, #0
 8003930:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003934:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003938:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800393c:	4642      	mov	r2, r8
 800393e:	464b      	mov	r3, r9
 8003940:	1891      	adds	r1, r2, r2
 8003942:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003944:	415b      	adcs	r3, r3
 8003946:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003948:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800394c:	4641      	mov	r1, r8
 800394e:	eb12 0a01 	adds.w	sl, r2, r1
 8003952:	4649      	mov	r1, r9
 8003954:	eb43 0b01 	adc.w	fp, r3, r1
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003964:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003968:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800396c:	4692      	mov	sl, r2
 800396e:	469b      	mov	fp, r3
 8003970:	4643      	mov	r3, r8
 8003972:	eb1a 0303 	adds.w	r3, sl, r3
 8003976:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800397a:	464b      	mov	r3, r9
 800397c:	eb4b 0303 	adc.w	r3, fp, r3
 8003980:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003990:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003994:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003998:	460b      	mov	r3, r1
 800399a:	18db      	adds	r3, r3, r3
 800399c:	643b      	str	r3, [r7, #64]	@ 0x40
 800399e:	4613      	mov	r3, r2
 80039a0:	eb42 0303 	adc.w	r3, r2, r3
 80039a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80039a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80039aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80039ae:	f7fc fc29 	bl	8000204 <__aeabi_uldivmod>
 80039b2:	4602      	mov	r2, r0
 80039b4:	460b      	mov	r3, r1
 80039b6:	4611      	mov	r1, r2
 80039b8:	4b3b      	ldr	r3, [pc, #236]	@ (8003aa8 <UART_SetConfig+0x2d4>)
 80039ba:	fba3 2301 	umull	r2, r3, r3, r1
 80039be:	095b      	lsrs	r3, r3, #5
 80039c0:	2264      	movs	r2, #100	@ 0x64
 80039c2:	fb02 f303 	mul.w	r3, r2, r3
 80039c6:	1acb      	subs	r3, r1, r3
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80039ce:	4b36      	ldr	r3, [pc, #216]	@ (8003aa8 <UART_SetConfig+0x2d4>)
 80039d0:	fba3 2302 	umull	r2, r3, r3, r2
 80039d4:	095b      	lsrs	r3, r3, #5
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80039dc:	441c      	add	r4, r3
 80039de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80039ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80039f0:	4642      	mov	r2, r8
 80039f2:	464b      	mov	r3, r9
 80039f4:	1891      	adds	r1, r2, r2
 80039f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80039f8:	415b      	adcs	r3, r3
 80039fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a00:	4641      	mov	r1, r8
 8003a02:	1851      	adds	r1, r2, r1
 8003a04:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a06:	4649      	mov	r1, r9
 8003a08:	414b      	adcs	r3, r1
 8003a0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	f04f 0300 	mov.w	r3, #0
 8003a14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a18:	4659      	mov	r1, fp
 8003a1a:	00cb      	lsls	r3, r1, #3
 8003a1c:	4651      	mov	r1, sl
 8003a1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a22:	4651      	mov	r1, sl
 8003a24:	00ca      	lsls	r2, r1, #3
 8003a26:	4610      	mov	r0, r2
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	4642      	mov	r2, r8
 8003a2e:	189b      	adds	r3, r3, r2
 8003a30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a34:	464b      	mov	r3, r9
 8003a36:	460a      	mov	r2, r1
 8003a38:	eb42 0303 	adc.w	r3, r2, r3
 8003a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a4c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a54:	460b      	mov	r3, r1
 8003a56:	18db      	adds	r3, r3, r3
 8003a58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	eb42 0303 	adc.w	r3, r2, r3
 8003a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a6a:	f7fc fbcb 	bl	8000204 <__aeabi_uldivmod>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa8 <UART_SetConfig+0x2d4>)
 8003a74:	fba3 1302 	umull	r1, r3, r3, r2
 8003a78:	095b      	lsrs	r3, r3, #5
 8003a7a:	2164      	movs	r1, #100	@ 0x64
 8003a7c:	fb01 f303 	mul.w	r3, r1, r3
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	3332      	adds	r3, #50	@ 0x32
 8003a86:	4a08      	ldr	r2, [pc, #32]	@ (8003aa8 <UART_SetConfig+0x2d4>)
 8003a88:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8c:	095b      	lsrs	r3, r3, #5
 8003a8e:	f003 0207 	and.w	r2, r3, #7
 8003a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4422      	add	r2, r4
 8003a9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a9c:	e106      	b.n	8003cac <UART_SetConfig+0x4d8>
 8003a9e:	bf00      	nop
 8003aa0:	40011000 	.word	0x40011000
 8003aa4:	40011400 	.word	0x40011400
 8003aa8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003aac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ab6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003aba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003abe:	4642      	mov	r2, r8
 8003ac0:	464b      	mov	r3, r9
 8003ac2:	1891      	adds	r1, r2, r2
 8003ac4:	6239      	str	r1, [r7, #32]
 8003ac6:	415b      	adcs	r3, r3
 8003ac8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ace:	4641      	mov	r1, r8
 8003ad0:	1854      	adds	r4, r2, r1
 8003ad2:	4649      	mov	r1, r9
 8003ad4:	eb43 0501 	adc.w	r5, r3, r1
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	00eb      	lsls	r3, r5, #3
 8003ae2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ae6:	00e2      	lsls	r2, r4, #3
 8003ae8:	4614      	mov	r4, r2
 8003aea:	461d      	mov	r5, r3
 8003aec:	4643      	mov	r3, r8
 8003aee:	18e3      	adds	r3, r4, r3
 8003af0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003af4:	464b      	mov	r3, r9
 8003af6:	eb45 0303 	adc.w	r3, r5, r3
 8003afa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b0e:	f04f 0200 	mov.w	r2, #0
 8003b12:	f04f 0300 	mov.w	r3, #0
 8003b16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b1a:	4629      	mov	r1, r5
 8003b1c:	008b      	lsls	r3, r1, #2
 8003b1e:	4621      	mov	r1, r4
 8003b20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b24:	4621      	mov	r1, r4
 8003b26:	008a      	lsls	r2, r1, #2
 8003b28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b2c:	f7fc fb6a 	bl	8000204 <__aeabi_uldivmod>
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	4b60      	ldr	r3, [pc, #384]	@ (8003cb8 <UART_SetConfig+0x4e4>)
 8003b36:	fba3 2302 	umull	r2, r3, r3, r2
 8003b3a:	095b      	lsrs	r3, r3, #5
 8003b3c:	011c      	lsls	r4, r3, #4
 8003b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b42:	2200      	movs	r2, #0
 8003b44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b50:	4642      	mov	r2, r8
 8003b52:	464b      	mov	r3, r9
 8003b54:	1891      	adds	r1, r2, r2
 8003b56:	61b9      	str	r1, [r7, #24]
 8003b58:	415b      	adcs	r3, r3
 8003b5a:	61fb      	str	r3, [r7, #28]
 8003b5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b60:	4641      	mov	r1, r8
 8003b62:	1851      	adds	r1, r2, r1
 8003b64:	6139      	str	r1, [r7, #16]
 8003b66:	4649      	mov	r1, r9
 8003b68:	414b      	adcs	r3, r1
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b78:	4659      	mov	r1, fp
 8003b7a:	00cb      	lsls	r3, r1, #3
 8003b7c:	4651      	mov	r1, sl
 8003b7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b82:	4651      	mov	r1, sl
 8003b84:	00ca      	lsls	r2, r1, #3
 8003b86:	4610      	mov	r0, r2
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	4642      	mov	r2, r8
 8003b8e:	189b      	adds	r3, r3, r2
 8003b90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b94:	464b      	mov	r3, r9
 8003b96:	460a      	mov	r2, r1
 8003b98:	eb42 0303 	adc.w	r3, r2, r3
 8003b9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003baa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003bb8:	4649      	mov	r1, r9
 8003bba:	008b      	lsls	r3, r1, #2
 8003bbc:	4641      	mov	r1, r8
 8003bbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bc2:	4641      	mov	r1, r8
 8003bc4:	008a      	lsls	r2, r1, #2
 8003bc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003bca:	f7fc fb1b 	bl	8000204 <__aeabi_uldivmod>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4611      	mov	r1, r2
 8003bd4:	4b38      	ldr	r3, [pc, #224]	@ (8003cb8 <UART_SetConfig+0x4e4>)
 8003bd6:	fba3 2301 	umull	r2, r3, r3, r1
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	2264      	movs	r2, #100	@ 0x64
 8003bde:	fb02 f303 	mul.w	r3, r2, r3
 8003be2:	1acb      	subs	r3, r1, r3
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	3332      	adds	r3, #50	@ 0x32
 8003be8:	4a33      	ldr	r2, [pc, #204]	@ (8003cb8 <UART_SetConfig+0x4e4>)
 8003bea:	fba2 2303 	umull	r2, r3, r2, r3
 8003bee:	095b      	lsrs	r3, r3, #5
 8003bf0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bf4:	441c      	add	r4, r3
 8003bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bfe:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003c04:	4642      	mov	r2, r8
 8003c06:	464b      	mov	r3, r9
 8003c08:	1891      	adds	r1, r2, r2
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	415b      	adcs	r3, r3
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c14:	4641      	mov	r1, r8
 8003c16:	1851      	adds	r1, r2, r1
 8003c18:	6039      	str	r1, [r7, #0]
 8003c1a:	4649      	mov	r1, r9
 8003c1c:	414b      	adcs	r3, r1
 8003c1e:	607b      	str	r3, [r7, #4]
 8003c20:	f04f 0200 	mov.w	r2, #0
 8003c24:	f04f 0300 	mov.w	r3, #0
 8003c28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c2c:	4659      	mov	r1, fp
 8003c2e:	00cb      	lsls	r3, r1, #3
 8003c30:	4651      	mov	r1, sl
 8003c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c36:	4651      	mov	r1, sl
 8003c38:	00ca      	lsls	r2, r1, #3
 8003c3a:	4610      	mov	r0, r2
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4603      	mov	r3, r0
 8003c40:	4642      	mov	r2, r8
 8003c42:	189b      	adds	r3, r3, r2
 8003c44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c46:	464b      	mov	r3, r9
 8003c48:	460a      	mov	r2, r1
 8003c4a:	eb42 0303 	adc.w	r3, r2, r3
 8003c4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c5a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c68:	4649      	mov	r1, r9
 8003c6a:	008b      	lsls	r3, r1, #2
 8003c6c:	4641      	mov	r1, r8
 8003c6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c72:	4641      	mov	r1, r8
 8003c74:	008a      	lsls	r2, r1, #2
 8003c76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c7a:	f7fc fac3 	bl	8000204 <__aeabi_uldivmod>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb8 <UART_SetConfig+0x4e4>)
 8003c84:	fba3 1302 	umull	r1, r3, r3, r2
 8003c88:	095b      	lsrs	r3, r3, #5
 8003c8a:	2164      	movs	r1, #100	@ 0x64
 8003c8c:	fb01 f303 	mul.w	r3, r1, r3
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	3332      	adds	r3, #50	@ 0x32
 8003c96:	4a08      	ldr	r2, [pc, #32]	@ (8003cb8 <UART_SetConfig+0x4e4>)
 8003c98:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9c:	095b      	lsrs	r3, r3, #5
 8003c9e:	f003 020f 	and.w	r2, r3, #15
 8003ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4422      	add	r2, r4
 8003caa:	609a      	str	r2, [r3, #8]
}
 8003cac:	bf00      	nop
 8003cae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cb8:	51eb851f 	.word	0x51eb851f

08003cbc <memset>:
 8003cbc:	4402      	add	r2, r0
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d100      	bne.n	8003cc6 <memset+0xa>
 8003cc4:	4770      	bx	lr
 8003cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cca:	e7f9      	b.n	8003cc0 <memset+0x4>

08003ccc <__libc_init_array>:
 8003ccc:	b570      	push	{r4, r5, r6, lr}
 8003cce:	4d0d      	ldr	r5, [pc, #52]	@ (8003d04 <__libc_init_array+0x38>)
 8003cd0:	4c0d      	ldr	r4, [pc, #52]	@ (8003d08 <__libc_init_array+0x3c>)
 8003cd2:	1b64      	subs	r4, r4, r5
 8003cd4:	10a4      	asrs	r4, r4, #2
 8003cd6:	2600      	movs	r6, #0
 8003cd8:	42a6      	cmp	r6, r4
 8003cda:	d109      	bne.n	8003cf0 <__libc_init_array+0x24>
 8003cdc:	4d0b      	ldr	r5, [pc, #44]	@ (8003d0c <__libc_init_array+0x40>)
 8003cde:	4c0c      	ldr	r4, [pc, #48]	@ (8003d10 <__libc_init_array+0x44>)
 8003ce0:	f000 f818 	bl	8003d14 <_init>
 8003ce4:	1b64      	subs	r4, r4, r5
 8003ce6:	10a4      	asrs	r4, r4, #2
 8003ce8:	2600      	movs	r6, #0
 8003cea:	42a6      	cmp	r6, r4
 8003cec:	d105      	bne.n	8003cfa <__libc_init_array+0x2e>
 8003cee:	bd70      	pop	{r4, r5, r6, pc}
 8003cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cf4:	4798      	blx	r3
 8003cf6:	3601      	adds	r6, #1
 8003cf8:	e7ee      	b.n	8003cd8 <__libc_init_array+0xc>
 8003cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cfe:	4798      	blx	r3
 8003d00:	3601      	adds	r6, #1
 8003d02:	e7f2      	b.n	8003cea <__libc_init_array+0x1e>
 8003d04:	08003d58 	.word	0x08003d58
 8003d08:	08003d58 	.word	0x08003d58
 8003d0c:	08003d58 	.word	0x08003d58
 8003d10:	08003d5c 	.word	0x08003d5c

08003d14 <_init>:
 8003d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d16:	bf00      	nop
 8003d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d1a:	bc08      	pop	{r3}
 8003d1c:	469e      	mov	lr, r3
 8003d1e:	4770      	bx	lr

08003d20 <_fini>:
 8003d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d22:	bf00      	nop
 8003d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d26:	bc08      	pop	{r3}
 8003d28:	469e      	mov	lr, r3
 8003d2a:	4770      	bx	lr
