
stm_mpu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091cc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  080093b0  080093b0  0000a3b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009848  08009848  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009848  08009848  0000a848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009850  08009850  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009850  08009850  0000a850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009854  08009854  0000a854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009858  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  200001d8  08009a30  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  08009a30  0000b550  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011dd8  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026ed  00000000  00000000  0001cfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  0001f6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b17  00000000  00000000  00020530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ec6d  00000000  00000000  00021047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ad5  00000000  00000000  0003fcb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bc225  00000000  00000000  00052789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e9ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000506c  00000000  00000000  0010e9f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00113a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009394 	.word	0x08009394

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	08009394 	.word	0x08009394

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MPU6050_Writebyte>:

static float LSB_Sensitivity_ACC;
static float LSB_Sensitivity_GYRO;

void MPU6050_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af04      	add	r7, sp, #16
 800103a:	4603      	mov	r3, r0
 800103c:	460a      	mov	r2, r1
 800103e:	71fb      	strb	r3, [r7, #7]
 8001040:	4613      	mov	r3, r2
 8001042:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, &val, 1, 1);
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	b29a      	uxth	r2, r3
 8001048:	2301      	movs	r3, #1
 800104a:	9302      	str	r3, [sp, #8]
 800104c:	2301      	movs	r3, #1
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	1dbb      	adds	r3, r7, #6
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2301      	movs	r3, #1
 8001056:	21d2      	movs	r1, #210	@ 0xd2
 8001058:	4803      	ldr	r0, [pc, #12]	@ (8001068 <MPU6050_Writebyte+0x34>)
 800105a:	f001 f9d9 	bl	8002410 <HAL_I2C_Mem_Write>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	2000027c 	.word	0x2000027c

0800106c <MPU6050_Readbytes>:
{
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, 1, 1);
}

void MPU6050_Readbytes(uint8_t reg_addr, uint8_t len, uint8_t* data)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af04      	add	r7, sp, #16
 8001072:	4603      	mov	r3, r0
 8001074:	603a      	str	r2, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
 8001078:	460b      	mov	r3, r1
 800107a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 1);
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	b29a      	uxth	r2, r3
 8001080:	79bb      	ldrb	r3, [r7, #6]
 8001082:	b29b      	uxth	r3, r3
 8001084:	2101      	movs	r1, #1
 8001086:	9102      	str	r1, [sp, #8]
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	2301      	movs	r3, #1
 8001090:	21d2      	movs	r1, #210	@ 0xd2
 8001092:	4803      	ldr	r0, [pc, #12]	@ (80010a0 <MPU6050_Readbytes+0x34>)
 8001094:	f001 fad0 	bl	8002638 <HAL_I2C_Mem_Read>
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	2000027c 	.word	0x2000027c

080010a4 <MPU6050_Initialization>:



void MPU6050_Initialization(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b09a      	sub	sp, #104	@ 0x68
 80010a8:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 80010aa:	2032      	movs	r0, #50	@ 0x32
 80010ac:	f000 fe74 	bl	8001d98 <HAL_Delay>
    uint8_t who_am_i = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            HAL_Delay(100);
        }
    }*/

    // Reset the whole module before initialization
    MPU6050_Writebyte(MPU6050_PWR_MGMT_1, 0x1<<7);
 80010b6:	2180      	movs	r1, #128	@ 0x80
 80010b8:	206b      	movs	r0, #107	@ 0x6b
 80010ba:	f7ff ffbb 	bl	8001034 <MPU6050_Writebyte>
    HAL_Delay(100);
 80010be:	2064      	movs	r0, #100	@ 0x64
 80010c0:	f000 fe6a 	bl	8001d98 <HAL_Delay>

    // Power Management setting: Wake up MPU6050 from sleep mode
    MPU6050_Writebyte(MPU6050_PWR_MGMT_1, 0x00);
 80010c4:	2100      	movs	r1, #0
 80010c6:	206b      	movs	r0, #107	@ 0x6b
 80010c8:	f7ff ffb4 	bl	8001034 <MPU6050_Writebyte>
    HAL_Delay(50);
 80010cc:	2032      	movs	r0, #50	@ 0x32
 80010ce:	f000 fe63 	bl	8001d98 <HAL_Delay>

    // Set sample rate divider (200Hz for both accelerometer and gyroscope)
    MPU6050_Writebyte(MPU6050_SMPRT_DIV, 39);
 80010d2:	2127      	movs	r1, #39	@ 0x27
 80010d4:	2019      	movs	r0, #25
 80010d6:	f7ff ffad 	bl	8001034 <MPU6050_Writebyte>
    HAL_Delay(50);
 80010da:	2032      	movs	r0, #50	@ 0x32
 80010dc:	f000 fe5c 	bl	8001d98 <HAL_Delay>

    // Set DLPF (Digital Low Pass Filter) to 0 (no filtering)
    MPU6050_Writebyte(MPU6050_CONFIG, 0x00);
 80010e0:	2100      	movs	r1, #0
 80010e2:	201a      	movs	r0, #26
 80010e4:	f7ff ffa6 	bl	8001034 <MPU6050_Writebyte>
    HAL_Delay(50);
 80010e8:	2032      	movs	r0, #50	@ 0x32
 80010ea:	f000 fe55 	bl	8001d98 <HAL_Delay>

    // Gyroscope full scale range setting
    uint8_t FS_SCALE_GYRO = 0x0;  // +-250 degree/s
 80010ee:	2300      	movs	r3, #0
 80010f0:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
    MPU6050_Writebyte(MPU6050_GYRO_CONFIG, FS_SCALE_GYRO<<3);
 80010f4:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	4619      	mov	r1, r3
 80010fe:	201b      	movs	r0, #27
 8001100:	f7ff ff98 	bl	8001034 <MPU6050_Writebyte>
    HAL_Delay(50);
 8001104:	2032      	movs	r0, #50	@ 0x32
 8001106:	f000 fe47 	bl	8001d98 <HAL_Delay>

    // Accelerometer full scale range setting
    uint8_t FS_SCALE_ACC = 0x2;   // +-8g
 800110a:	2302      	movs	r3, #2
 800110c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
    MPU6050_Writebyte(MPU6050_ACCEL_CONFIG, FS_SCALE_ACC<<3);
 8001110:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	b2db      	uxtb	r3, r3
 8001118:	4619      	mov	r1, r3
 800111a:	201c      	movs	r0, #28
 800111c:	f7ff ff8a 	bl	8001034 <MPU6050_Writebyte>
    HAL_Delay(50);
 8001120:	2032      	movs	r0, #50	@ 0x32
 8001122:	f000 fe39 	bl	8001d98 <HAL_Delay>

    // Calculate LSB sensitivity for gyro and accelerometer
    MPU6050_Get_LSB_Sensitivity(FS_SCALE_GYRO, FS_SCALE_ACC);
 8001126:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 800112a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f000 f869 	bl	8001208 <MPU6050_Get_LSB_Sensitivity>
    // Enable interrupt (example)
    // uint8_t DATA_RDY_EN = 0x1; // enable
    // MPU6050_Writebyte(MPU6050_INT_ENABLE, DATA_RDY_EN);
    // HAL_Delay(50);

    snprintf(message, sizeof(message), "MPU6050 setting is finished\n");
 8001136:	463b      	mov	r3, r7
 8001138:	4a0a      	ldr	r2, [pc, #40]	@ (8001164 <MPU6050_Initialization+0xc0>)
 800113a:	2164      	movs	r1, #100	@ 0x64
 800113c:	4618      	mov	r0, r3
 800113e:	f004 fcbb 	bl	8005ab8 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8001142:	463b      	mov	r3, r7
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f8bb 	bl	80002c0 <strlen>
 800114a:	4603      	mov	r3, r0
 800114c:	b29a      	uxth	r2, r3
 800114e:	4639      	mov	r1, r7
 8001150:	f04f 33ff 	mov.w	r3, #4294967295
 8001154:	4804      	ldr	r0, [pc, #16]	@ (8001168 <MPU6050_Initialization+0xc4>)
 8001156:	f002 ff05 	bl	8003f64 <HAL_UART_Transmit>
}
 800115a:	bf00      	nop
 800115c:	3768      	adds	r7, #104	@ 0x68
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	080093b0 	.word	0x080093b0
 8001168:	200002d0 	.word	0x200002d0

0800116c <MPU6050_Get6AxisRawData>:


/*Get Raw Data from sensor*/
void MPU6050_Get6AxisRawData(Struct_MPU6050* mpu6050)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	uint8_t data[14];
	MPU6050_Readbytes(MPU6050_ACCEL_XOUT_H, 14, data);
 8001174:	f107 0308 	add.w	r3, r7, #8
 8001178:	461a      	mov	r2, r3
 800117a:	210e      	movs	r1, #14
 800117c:	203b      	movs	r0, #59	@ 0x3b
 800117e:	f7ff ff75 	bl	800106c <MPU6050_Readbytes>

	mpu6050->acc_x_raw = (data[0] << 8) | data[1];
 8001182:	7a3b      	ldrb	r3, [r7, #8]
 8001184:	021b      	lsls	r3, r3, #8
 8001186:	b21a      	sxth	r2, r3
 8001188:	7a7b      	ldrb	r3, [r7, #9]
 800118a:	b21b      	sxth	r3, r3
 800118c:	4313      	orrs	r3, r2
 800118e:	b21a      	sxth	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	801a      	strh	r2, [r3, #0]
	mpu6050->acc_y_raw = (data[2] << 8) | data[3];
 8001194:	7abb      	ldrb	r3, [r7, #10]
 8001196:	021b      	lsls	r3, r3, #8
 8001198:	b21a      	sxth	r2, r3
 800119a:	7afb      	ldrb	r3, [r7, #11]
 800119c:	b21b      	sxth	r3, r3
 800119e:	4313      	orrs	r3, r2
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	805a      	strh	r2, [r3, #2]
	mpu6050->acc_z_raw = (data[4] << 8) | data[5];
 80011a6:	7b3b      	ldrb	r3, [r7, #12]
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	7b7b      	ldrb	r3, [r7, #13]
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	4313      	orrs	r3, r2
 80011b2:	b21a      	sxth	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	809a      	strh	r2, [r3, #4]

	mpu6050->temperature_raw = (data[6] << 8) | data[7];
 80011b8:	7bbb      	ldrb	r3, [r7, #14]
 80011ba:	021b      	lsls	r3, r3, #8
 80011bc:	b21a      	sxth	r2, r3
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	4313      	orrs	r3, r2
 80011c4:	b21a      	sxth	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	80da      	strh	r2, [r3, #6]

	mpu6050->gyro_x_raw = ((data[8] << 8) | data[9]);
 80011ca:	7c3b      	ldrb	r3, [r7, #16]
 80011cc:	021b      	lsls	r3, r3, #8
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	7c7b      	ldrb	r3, [r7, #17]
 80011d2:	b21b      	sxth	r3, r3
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b21a      	sxth	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	811a      	strh	r2, [r3, #8]
	mpu6050->gyro_y_raw = ((data[10] << 8) | data[11]);
 80011dc:	7cbb      	ldrb	r3, [r7, #18]
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	7cfb      	ldrb	r3, [r7, #19]
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	4313      	orrs	r3, r2
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	815a      	strh	r2, [r3, #10]
	mpu6050->gyro_z_raw = ((data[12] << 8) | data[13]);
 80011ee:	7d3b      	ldrb	r3, [r7, #20]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	7d7b      	ldrb	r3, [r7, #21]
 80011f6:	b21b      	sxth	r3, r3
 80011f8:	4313      	orrs	r3, r2
 80011fa:	b21a      	sxth	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	819a      	strh	r2, [r3, #12]
}
 8001200:	bf00      	nop
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <MPU6050_Get_LSB_Sensitivity>:

void MPU6050_Get_LSB_Sensitivity(uint8_t FS_SCALE_GYRO, uint8_t FS_SCALE_ACC)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	460a      	mov	r2, r1
 8001212:	71fb      	strb	r3, [r7, #7]
 8001214:	4613      	mov	r3, r2
 8001216:	71bb      	strb	r3, [r7, #6]
	switch(FS_SCALE_GYRO)
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	2b03      	cmp	r3, #3
 800121c:	d81a      	bhi.n	8001254 <MPU6050_Get_LSB_Sensitivity+0x4c>
 800121e:	a201      	add	r2, pc, #4	@ (adr r2, 8001224 <MPU6050_Get_LSB_Sensitivity+0x1c>)
 8001220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001224:	08001235 	.word	0x08001235
 8001228:	0800123d 	.word	0x0800123d
 800122c:	08001245 	.word	0x08001245
 8001230:	0800124d 	.word	0x0800124d
	{
	case 0:
		LSB_Sensitivity_GYRO = 131.f;
 8001234:	4b1b      	ldr	r3, [pc, #108]	@ (80012a4 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 8001236:	4a1c      	ldr	r2, [pc, #112]	@ (80012a8 <MPU6050_Get_LSB_Sensitivity+0xa0>)
 8001238:	601a      	str	r2, [r3, #0]
		break;
 800123a:	e00b      	b.n	8001254 <MPU6050_Get_LSB_Sensitivity+0x4c>
	case 1:
		LSB_Sensitivity_GYRO = 65.5f;
 800123c:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 800123e:	4a1b      	ldr	r2, [pc, #108]	@ (80012ac <MPU6050_Get_LSB_Sensitivity+0xa4>)
 8001240:	601a      	str	r2, [r3, #0]
		break;
 8001242:	e007      	b.n	8001254 <MPU6050_Get_LSB_Sensitivity+0x4c>
	case 2:
		LSB_Sensitivity_GYRO = 32.8f;
 8001244:	4b17      	ldr	r3, [pc, #92]	@ (80012a4 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 8001246:	4a1a      	ldr	r2, [pc, #104]	@ (80012b0 <MPU6050_Get_LSB_Sensitivity+0xa8>)
 8001248:	601a      	str	r2, [r3, #0]
		break;
 800124a:	e003      	b.n	8001254 <MPU6050_Get_LSB_Sensitivity+0x4c>
	case 3:
		LSB_Sensitivity_GYRO = 16.4f;
 800124c:	4b15      	ldr	r3, [pc, #84]	@ (80012a4 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 800124e:	4a19      	ldr	r2, [pc, #100]	@ (80012b4 <MPU6050_Get_LSB_Sensitivity+0xac>)
 8001250:	601a      	str	r2, [r3, #0]
		break;
 8001252:	bf00      	nop
	}
	switch(FS_SCALE_ACC)
 8001254:	79bb      	ldrb	r3, [r7, #6]
 8001256:	2b03      	cmp	r3, #3
 8001258:	d81e      	bhi.n	8001298 <MPU6050_Get_LSB_Sensitivity+0x90>
 800125a:	a201      	add	r2, pc, #4	@ (adr r2, 8001260 <MPU6050_Get_LSB_Sensitivity+0x58>)
 800125c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001260:	08001271 	.word	0x08001271
 8001264:	0800127b 	.word	0x0800127b
 8001268:	08001285 	.word	0x08001285
 800126c:	0800128f 	.word	0x0800128f
	{
	case 0:
		LSB_Sensitivity_ACC = 16384.f;
 8001270:	4b11      	ldr	r3, [pc, #68]	@ (80012b8 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 8001272:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8001276:	601a      	str	r2, [r3, #0]
		break;
 8001278:	e00e      	b.n	8001298 <MPU6050_Get_LSB_Sensitivity+0x90>
	case 1:
		LSB_Sensitivity_ACC = 8192.f;
 800127a:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 800127c:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8001280:	601a      	str	r2, [r3, #0]
		break;
 8001282:	e009      	b.n	8001298 <MPU6050_Get_LSB_Sensitivity+0x90>
	case 2:
		LSB_Sensitivity_ACC = 4096.f;
 8001284:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 8001286:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 800128a:	601a      	str	r2, [r3, #0]
		break;
 800128c:	e004      	b.n	8001298 <MPU6050_Get_LSB_Sensitivity+0x90>
	case 3:
		LSB_Sensitivity_ACC = 2048.f;
 800128e:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 8001290:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8001294:	601a      	str	r2, [r3, #0]
		break;
 8001296:	bf00      	nop
	}
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	20000224 	.word	0x20000224
 80012a8:	43030000 	.word	0x43030000
 80012ac:	42830000 	.word	0x42830000
 80012b0:	42033333 	.word	0x42033333
 80012b4:	41833333 	.word	0x41833333
 80012b8:	20000220 	.word	0x20000220
 80012bc:	00000000 	.word	0x00000000

080012c0 <MPU6050_DataConvert>:

/*Convert Unit. acc_raw -> g, gyro_raw -> degree per second*/
void MPU6050_DataConvert(Struct_MPU6050* mpu6050)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	//printf("LSB_Sensitivity_GYRO: %f, LSB_Sensitivity_ACC: %f\n",LSB_Sensitivity_GYRO,LSB_Sensitivity_ACC);
	mpu6050->acc_x = mpu6050->acc_x_raw / LSB_Sensitivity_ACC;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012d6:	4b3c      	ldr	r3, [pc, #240]	@ (80013c8 <MPU6050_DataConvert+0x108>)
 80012d8:	ed93 7a00 	vldr	s14, [r3]
 80012dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	edc3 7a04 	vstr	s15, [r3, #16]
	mpu6050->acc_y = mpu6050->acc_y_raw / LSB_Sensitivity_ACC;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012f4:	4b34      	ldr	r3, [pc, #208]	@ (80013c8 <MPU6050_DataConvert+0x108>)
 80012f6:	ed93 7a00 	vldr	s14, [r3]
 80012fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edc3 7a05 	vstr	s15, [r3, #20]
	mpu6050->acc_z = mpu6050->acc_z_raw / LSB_Sensitivity_ACC;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001312:	4b2d      	ldr	r3, [pc, #180]	@ (80013c8 <MPU6050_DataConvert+0x108>)
 8001314:	ed93 7a00 	vldr	s14, [r3]
 8001318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	edc3 7a06 	vstr	s15, [r3, #24]

	mpu6050->temperature = (float)(mpu6050->temperature_raw)/340+36.53;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001328:	ee07 3a90 	vmov	s15, r3
 800132c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001330:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80013cc <MPU6050_DataConvert+0x10c>
 8001334:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001338:	ee16 0a90 	vmov	r0, s13
 800133c:	f7ff f92c 	bl	8000598 <__aeabi_f2d>
 8001340:	a31f      	add	r3, pc, #124	@ (adr r3, 80013c0 <MPU6050_DataConvert+0x100>)
 8001342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001346:	f7fe ffc9 	bl	80002dc <__adddf3>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4610      	mov	r0, r2
 8001350:	4619      	mov	r1, r3
 8001352:	f7ff fc71 	bl	8000c38 <__aeabi_d2f>
 8001356:	4602      	mov	r2, r0
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	61da      	str	r2, [r3, #28]

	mpu6050->gyro_x = mpu6050->gyro_x_raw / LSB_Sensitivity_GYRO;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001362:	ee07 3a90 	vmov	s15, r3
 8001366:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800136a:	4b19      	ldr	r3, [pc, #100]	@ (80013d0 <MPU6050_DataConvert+0x110>)
 800136c:	ed93 7a00 	vldr	s14, [r3]
 8001370:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	edc3 7a08 	vstr	s15, [r3, #32]
	mpu6050->gyro_y = mpu6050->gyro_y_raw / LSB_Sensitivity_GYRO;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001380:	ee07 3a90 	vmov	s15, r3
 8001384:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001388:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <MPU6050_DataConvert+0x110>)
 800138a:	ed93 7a00 	vldr	s14, [r3]
 800138e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	mpu6050->gyro_z = mpu6050->gyro_z_raw / LSB_Sensitivity_GYRO;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800139e:	ee07 3a90 	vmov	s15, r3
 80013a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013a6:	4b0a      	ldr	r3, [pc, #40]	@ (80013d0 <MPU6050_DataConvert+0x110>)
 80013a8:	ed93 7a00 	vldr	s14, [r3]
 80013ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	0a3d70a4 	.word	0x0a3d70a4
 80013c4:	404243d7 	.word	0x404243d7
 80013c8:	20000220 	.word	0x20000220
 80013cc:	43aa0000 	.word	0x43aa0000
 80013d0:	20000224 	.word	0x20000224

080013d4 <MPU6050_ProcessData>:
	 */
	return HAL_GPIO_ReadPin(MPU6050_INT_PORT, MPU6050_INT_PIN);
}

void MPU6050_ProcessData(Struct_MPU6050* mpu6050)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	MPU6050_Get6AxisRawData(mpu6050);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff fec5 	bl	800116c <MPU6050_Get6AxisRawData>
	MPU6050_DataConvert(mpu6050);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ff6c 	bl	80012c0 <MPU6050_DataConvert>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b09c      	sub	sp, #112	@ 0x70
 80013f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f6:	f000 fc5f 	bl	8001cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013fa:	f000 f83b 	bl	8001474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013fe:	f000 f951 	bl	80016a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001402:	f000 f883 	bl	800150c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001406:	f000 f8c1 	bl	800158c <MX_I2C2_Init>
  MX_USART2_UART_Init();
 800140a:	f000 f8ff 	bl	800160c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800140e:	2000      	movs	r0, #0
 8001410:	f000 fc00 	bl	8001c14 <BSP_LED_Init>

  MPU6050_Initialization();
 8001414:	f7ff fe46 	bl	80010a4 <MPU6050_Initialization>
  while (1)
  {

    /* USER CODE END WHILE */
	    char buffer[100];  // Buffer to hold the formatted string
		MPU6050_ProcessData(&MPU6050);
 8001418:	4813      	ldr	r0, [pc, #76]	@ (8001468 <main+0x78>)
 800141a:	f7ff ffdb 	bl	80013d4 <MPU6050_ProcessData>

	    // Format the data into a string
	    snprintf(buffer, sizeof(buffer), "%d, %d, %d\n",
	    		MPU6050.acc_x_raw, MPU6050.acc_y_raw, MPU6050.acc_z_raw);
 800141e:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <main+0x78>)
 8001420:	f9b3 3000 	ldrsh.w	r3, [r3]
	    snprintf(buffer, sizeof(buffer), "%d, %d, %d\n",
 8001424:	4619      	mov	r1, r3
	    		MPU6050.acc_x_raw, MPU6050.acc_y_raw, MPU6050.acc_z_raw);
 8001426:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <main+0x78>)
 8001428:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	    snprintf(buffer, sizeof(buffer), "%d, %d, %d\n",
 800142c:	461a      	mov	r2, r3
	    		MPU6050.acc_x_raw, MPU6050.acc_y_raw, MPU6050.acc_z_raw);
 800142e:	4b0e      	ldr	r3, [pc, #56]	@ (8001468 <main+0x78>)
 8001430:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	    snprintf(buffer, sizeof(buffer), "%d, %d, %d\n",
 8001434:	1d38      	adds	r0, r7, #4
 8001436:	9301      	str	r3, [sp, #4]
 8001438:	9200      	str	r2, [sp, #0]
 800143a:	460b      	mov	r3, r1
 800143c:	4a0b      	ldr	r2, [pc, #44]	@ (800146c <main+0x7c>)
 800143e:	2164      	movs	r1, #100	@ 0x64
 8001440:	f004 fb3a 	bl	8005ab8 <sniprintf>

	    // Send the string over UART
	    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	4618      	mov	r0, r3
 8001448:	f7fe ff3a 	bl	80002c0 <strlen>
 800144c:	4603      	mov	r3, r0
 800144e:	b29a      	uxth	r2, r3
 8001450:	1d39      	adds	r1, r7, #4
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
 8001456:	4806      	ldr	r0, [pc, #24]	@ (8001470 <main+0x80>)
 8001458:	f002 fd84 	bl	8003f64 <HAL_UART_Transmit>
	    HAL_Delay(50);
 800145c:	2032      	movs	r0, #50	@ 0x32
 800145e:	f000 fc9b 	bl	8001d98 <HAL_Delay>
  {
 8001462:	bf00      	nop
 8001464:	e7d8      	b.n	8001418 <main+0x28>
 8001466:	bf00      	nop
 8001468:	200001f4 	.word	0x200001f4
 800146c:	080093d0 	.word	0x080093d0
 8001470:	200002d0 	.word	0x200002d0

08001474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b094      	sub	sp, #80	@ 0x50
 8001478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147a:	f107 0318 	add.w	r3, r7, #24
 800147e:	2238      	movs	r2, #56	@ 0x38
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f004 fbaf 	bl	8005be6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001496:	2000      	movs	r0, #0
 8001498:	f001 fd42 	bl	8002f20 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800149c:	2302      	movs	r3, #2
 800149e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014a6:	2340      	movs	r3, #64	@ 0x40
 80014a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014aa:	2302      	movs	r3, #2
 80014ac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014ae:	2302      	movs	r3, #2
 80014b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80014b2:	2304      	movs	r3, #4
 80014b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80014b6:	2355      	movs	r3, #85	@ 0x55
 80014b8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014ba:	2302      	movs	r3, #2
 80014bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014be:	2302      	movs	r3, #2
 80014c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014c2:	2302      	movs	r3, #2
 80014c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c6:	f107 0318 	add.w	r3, r7, #24
 80014ca:	4618      	mov	r0, r3
 80014cc:	f001 fddc 	bl	8003088 <HAL_RCC_OscConfig>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <SystemClock_Config+0x66>
  {
    Error_Handler();
 80014d6:	f000 f915 	bl	8001704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014da:	230f      	movs	r3, #15
 80014dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014de:	2303      	movs	r3, #3
 80014e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	2104      	movs	r1, #4
 80014f2:	4618      	mov	r0, r3
 80014f4:	f002 f8da 	bl	80036ac <HAL_RCC_ClockConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80014fe:	f000 f901 	bl	8001704 <Error_Handler>
  }
}
 8001502:	bf00      	nop
 8001504:	3750      	adds	r7, #80	@ 0x50
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001510:	4b1b      	ldr	r3, [pc, #108]	@ (8001580 <MX_I2C1_Init+0x74>)
 8001512:	4a1c      	ldr	r2, [pc, #112]	@ (8001584 <MX_I2C1_Init+0x78>)
 8001514:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8001516:	4b1a      	ldr	r3, [pc, #104]	@ (8001580 <MX_I2C1_Init+0x74>)
 8001518:	4a1b      	ldr	r2, [pc, #108]	@ (8001588 <MX_I2C1_Init+0x7c>)
 800151a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800151c:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <MX_I2C1_Init+0x74>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001522:	4b17      	ldr	r3, [pc, #92]	@ (8001580 <MX_I2C1_Init+0x74>)
 8001524:	2201      	movs	r2, #1
 8001526:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001528:	4b15      	ldr	r3, [pc, #84]	@ (8001580 <MX_I2C1_Init+0x74>)
 800152a:	2200      	movs	r2, #0
 800152c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800152e:	4b14      	ldr	r3, [pc, #80]	@ (8001580 <MX_I2C1_Init+0x74>)
 8001530:	2200      	movs	r2, #0
 8001532:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001534:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <MX_I2C1_Init+0x74>)
 8001536:	2200      	movs	r2, #0
 8001538:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800153a:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <MX_I2C1_Init+0x74>)
 800153c:	2200      	movs	r2, #0
 800153e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001540:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <MX_I2C1_Init+0x74>)
 8001542:	2200      	movs	r2, #0
 8001544:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001546:	480e      	ldr	r0, [pc, #56]	@ (8001580 <MX_I2C1_Init+0x74>)
 8001548:	f000 fec6 	bl	80022d8 <HAL_I2C_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001552:	f000 f8d7 	bl	8001704 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001556:	2100      	movs	r1, #0
 8001558:	4809      	ldr	r0, [pc, #36]	@ (8001580 <MX_I2C1_Init+0x74>)
 800155a:	f001 fc49 	bl	8002df0 <HAL_I2CEx_ConfigAnalogFilter>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001564:	f000 f8ce 	bl	8001704 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001568:	2100      	movs	r1, #0
 800156a:	4805      	ldr	r0, [pc, #20]	@ (8001580 <MX_I2C1_Init+0x74>)
 800156c:	f001 fc8b 	bl	8002e86 <HAL_I2CEx_ConfigDigitalFilter>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001576:	f000 f8c5 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000228 	.word	0x20000228
 8001584:	40005400 	.word	0x40005400
 8001588:	40b285c2 	.word	0x40b285c2

0800158c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001590:	4b1b      	ldr	r3, [pc, #108]	@ (8001600 <MX_I2C2_Init+0x74>)
 8001592:	4a1c      	ldr	r2, [pc, #112]	@ (8001604 <MX_I2C2_Init+0x78>)
 8001594:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x40B285C2;
 8001596:	4b1a      	ldr	r3, [pc, #104]	@ (8001600 <MX_I2C2_Init+0x74>)
 8001598:	4a1b      	ldr	r2, [pc, #108]	@ (8001608 <MX_I2C2_Init+0x7c>)
 800159a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800159c:	4b18      	ldr	r3, [pc, #96]	@ (8001600 <MX_I2C2_Init+0x74>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015a2:	4b17      	ldr	r3, [pc, #92]	@ (8001600 <MX_I2C2_Init+0x74>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a8:	4b15      	ldr	r3, [pc, #84]	@ (8001600 <MX_I2C2_Init+0x74>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80015ae:	4b14      	ldr	r3, [pc, #80]	@ (8001600 <MX_I2C2_Init+0x74>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015b4:	4b12      	ldr	r3, [pc, #72]	@ (8001600 <MX_I2C2_Init+0x74>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ba:	4b11      	ldr	r3, [pc, #68]	@ (8001600 <MX_I2C2_Init+0x74>)
 80015bc:	2200      	movs	r2, #0
 80015be:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001600 <MX_I2C2_Init+0x74>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015c6:	480e      	ldr	r0, [pc, #56]	@ (8001600 <MX_I2C2_Init+0x74>)
 80015c8:	f000 fe86 	bl	80022d8 <HAL_I2C_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80015d2:	f000 f897 	bl	8001704 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015d6:	2100      	movs	r1, #0
 80015d8:	4809      	ldr	r0, [pc, #36]	@ (8001600 <MX_I2C2_Init+0x74>)
 80015da:	f001 fc09 	bl	8002df0 <HAL_I2CEx_ConfigAnalogFilter>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80015e4:	f000 f88e 	bl	8001704 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80015e8:	2100      	movs	r1, #0
 80015ea:	4805      	ldr	r0, [pc, #20]	@ (8001600 <MX_I2C2_Init+0x74>)
 80015ec:	f001 fc4b 	bl	8002e86 <HAL_I2CEx_ConfigDigitalFilter>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80015f6:	f000 f885 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	2000027c 	.word	0x2000027c
 8001604:	40005800 	.word	0x40005800
 8001608:	40b285c2 	.word	0x40b285c2

0800160c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001610:	4b22      	ldr	r3, [pc, #136]	@ (800169c <MX_USART2_UART_Init+0x90>)
 8001612:	4a23      	ldr	r2, [pc, #140]	@ (80016a0 <MX_USART2_UART_Init+0x94>)
 8001614:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001616:	4b21      	ldr	r3, [pc, #132]	@ (800169c <MX_USART2_UART_Init+0x90>)
 8001618:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800161c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800161e:	4b1f      	ldr	r3, [pc, #124]	@ (800169c <MX_USART2_UART_Init+0x90>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001624:	4b1d      	ldr	r3, [pc, #116]	@ (800169c <MX_USART2_UART_Init+0x90>)
 8001626:	2200      	movs	r2, #0
 8001628:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800162a:	4b1c      	ldr	r3, [pc, #112]	@ (800169c <MX_USART2_UART_Init+0x90>)
 800162c:	2200      	movs	r2, #0
 800162e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001630:	4b1a      	ldr	r3, [pc, #104]	@ (800169c <MX_USART2_UART_Init+0x90>)
 8001632:	220c      	movs	r2, #12
 8001634:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001636:	4b19      	ldr	r3, [pc, #100]	@ (800169c <MX_USART2_UART_Init+0x90>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800163c:	4b17      	ldr	r3, [pc, #92]	@ (800169c <MX_USART2_UART_Init+0x90>)
 800163e:	2200      	movs	r2, #0
 8001640:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001642:	4b16      	ldr	r3, [pc, #88]	@ (800169c <MX_USART2_UART_Init+0x90>)
 8001644:	2200      	movs	r2, #0
 8001646:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001648:	4b14      	ldr	r3, [pc, #80]	@ (800169c <MX_USART2_UART_Init+0x90>)
 800164a:	2200      	movs	r2, #0
 800164c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800164e:	4b13      	ldr	r3, [pc, #76]	@ (800169c <MX_USART2_UART_Init+0x90>)
 8001650:	2200      	movs	r2, #0
 8001652:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001654:	4811      	ldr	r0, [pc, #68]	@ (800169c <MX_USART2_UART_Init+0x90>)
 8001656:	f002 fc35 	bl	8003ec4 <HAL_UART_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001660:	f000 f850 	bl	8001704 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001664:	2100      	movs	r1, #0
 8001666:	480d      	ldr	r0, [pc, #52]	@ (800169c <MX_USART2_UART_Init+0x90>)
 8001668:	f003 fa2e 	bl	8004ac8 <HAL_UARTEx_SetTxFifoThreshold>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001672:	f000 f847 	bl	8001704 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001676:	2100      	movs	r1, #0
 8001678:	4808      	ldr	r0, [pc, #32]	@ (800169c <MX_USART2_UART_Init+0x90>)
 800167a:	f003 fa63 	bl	8004b44 <HAL_UARTEx_SetRxFifoThreshold>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001684:	f000 f83e 	bl	8001704 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001688:	4804      	ldr	r0, [pc, #16]	@ (800169c <MX_USART2_UART_Init+0x90>)
 800168a:	f003 f9e4 	bl	8004a56 <HAL_UARTEx_DisableFifoMode>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001694:	f000 f836 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200002d0 	.word	0x200002d0
 80016a0:	40004400 	.word	0x40004400

080016a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016aa:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <MX_GPIO_Init+0x5c>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ae:	4a14      	ldr	r2, [pc, #80]	@ (8001700 <MX_GPIO_Init+0x5c>)
 80016b0:	f043 0320 	orr.w	r3, r3, #32
 80016b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016b6:	4b12      	ldr	r3, [pc, #72]	@ (8001700 <MX_GPIO_Init+0x5c>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ba:	f003 0320 	and.w	r3, r3, #32
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001700 <MX_GPIO_Init+0x5c>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001700 <MX_GPIO_Init+0x5c>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001700 <MX_GPIO_Init+0x5c>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <MX_GPIO_Init+0x5c>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016de:	4a08      	ldr	r2, [pc, #32]	@ (8001700 <MX_GPIO_Init+0x5c>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e6:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <MX_GPIO_Init+0x5c>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016f2:	bf00      	nop
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40021000 	.word	0x40021000

08001704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001708:	b672      	cpsid	i
}
 800170a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <Error_Handler+0x8>

08001710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001716:	4b0f      	ldr	r3, [pc, #60]	@ (8001754 <HAL_MspInit+0x44>)
 8001718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800171a:	4a0e      	ldr	r2, [pc, #56]	@ (8001754 <HAL_MspInit+0x44>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6613      	str	r3, [r2, #96]	@ 0x60
 8001722:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <HAL_MspInit+0x44>)
 8001724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800172e:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <HAL_MspInit+0x44>)
 8001730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001732:	4a08      	ldr	r2, [pc, #32]	@ (8001754 <HAL_MspInit+0x44>)
 8001734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001738:	6593      	str	r3, [r2, #88]	@ 0x58
 800173a:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <HAL_MspInit+0x44>)
 800173c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800173e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001746:	f001 fc8f 	bl	8003068 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000

08001758 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b09e      	sub	sp, #120	@ 0x78
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001770:	f107 0320 	add.w	r3, r7, #32
 8001774:	2244      	movs	r2, #68	@ 0x44
 8001776:	2100      	movs	r1, #0
 8001778:	4618      	mov	r0, r3
 800177a:	f004 fa34 	bl	8005be6 <memset>
  if(hi2c->Instance==I2C1)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a5a      	ldr	r2, [pc, #360]	@ (80018ec <HAL_I2C_MspInit+0x194>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d154      	bne.n	8001832 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001788:	2340      	movs	r3, #64	@ 0x40
 800178a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800178c:	2300      	movs	r3, #0
 800178e:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001790:	f107 0320 	add.w	r3, r7, #32
 8001794:	4618      	mov	r0, r3
 8001796:	f002 f9a5 	bl	8003ae4 <HAL_RCCEx_PeriphCLKConfig>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80017a0:	f7ff ffb0 	bl	8001704 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a4:	4b52      	ldr	r3, [pc, #328]	@ (80018f0 <HAL_I2C_MspInit+0x198>)
 80017a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a8:	4a51      	ldr	r2, [pc, #324]	@ (80018f0 <HAL_I2C_MspInit+0x198>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017b0:	4b4f      	ldr	r3, [pc, #316]	@ (80018f0 <HAL_I2C_MspInit+0x198>)
 80017b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	61fb      	str	r3, [r7, #28]
 80017ba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017bc:	4b4c      	ldr	r3, [pc, #304]	@ (80018f0 <HAL_I2C_MspInit+0x198>)
 80017be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c0:	4a4b      	ldr	r2, [pc, #300]	@ (80018f0 <HAL_I2C_MspInit+0x198>)
 80017c2:	f043 0302 	orr.w	r3, r3, #2
 80017c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017c8:	4b49      	ldr	r3, [pc, #292]	@ (80018f0 <HAL_I2C_MspInit+0x198>)
 80017ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	61bb      	str	r3, [r7, #24]
 80017d2:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017d8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017da:	2312      	movs	r3, #18
 80017dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017e6:	2304      	movs	r3, #4
 80017e8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ea:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017ee:	4619      	mov	r1, r3
 80017f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017f4:	f000 fbd6 	bl	8001fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017f8:	2380      	movs	r3, #128	@ 0x80
 80017fa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017fc:	2312      	movs	r3, #18
 80017fe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001808:	2304      	movs	r3, #4
 800180a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001810:	4619      	mov	r1, r3
 8001812:	4838      	ldr	r0, [pc, #224]	@ (80018f4 <HAL_I2C_MspInit+0x19c>)
 8001814:	f000 fbc6 	bl	8001fa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001818:	4b35      	ldr	r3, [pc, #212]	@ (80018f0 <HAL_I2C_MspInit+0x198>)
 800181a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181c:	4a34      	ldr	r2, [pc, #208]	@ (80018f0 <HAL_I2C_MspInit+0x198>)
 800181e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001822:	6593      	str	r3, [r2, #88]	@ 0x58
 8001824:	4b32      	ldr	r3, [pc, #200]	@ (80018f0 <HAL_I2C_MspInit+0x198>)
 8001826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001828:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800182c:	617b      	str	r3, [r7, #20]
 800182e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001830:	e058      	b.n	80018e4 <HAL_I2C_MspInit+0x18c>
  else if(hi2c->Instance==I2C2)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a30      	ldr	r2, [pc, #192]	@ (80018f8 <HAL_I2C_MspInit+0x1a0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d153      	bne.n	80018e4 <HAL_I2C_MspInit+0x18c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800183c:	2380      	movs	r3, #128	@ 0x80
 800183e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001840:	2300      	movs	r3, #0
 8001842:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001844:	f107 0320 	add.w	r3, r7, #32
 8001848:	4618      	mov	r0, r3
 800184a:	f002 f94b 	bl	8003ae4 <HAL_RCCEx_PeriphCLKConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <HAL_I2C_MspInit+0x100>
      Error_Handler();
 8001854:	f7ff ff56 	bl	8001704 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001858:	4b25      	ldr	r3, [pc, #148]	@ (80018f0 <HAL_I2C_MspInit+0x198>)
 800185a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185c:	4a24      	ldr	r2, [pc, #144]	@ (80018f0 <HAL_I2C_MspInit+0x198>)
 800185e:	f043 0320 	orr.w	r3, r3, #32
 8001862:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001864:	4b22      	ldr	r3, [pc, #136]	@ (80018f0 <HAL_I2C_MspInit+0x198>)
 8001866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001868:	f003 0320 	and.w	r3, r3, #32
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001870:	4b1f      	ldr	r3, [pc, #124]	@ (80018f0 <HAL_I2C_MspInit+0x198>)
 8001872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001874:	4a1e      	ldr	r2, [pc, #120]	@ (80018f0 <HAL_I2C_MspInit+0x198>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800187c:	4b1c      	ldr	r3, [pc, #112]	@ (80018f0 <HAL_I2C_MspInit+0x198>)
 800187e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001888:	2301      	movs	r3, #1
 800188a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800188c:	2312      	movs	r3, #18
 800188e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001894:	2300      	movs	r3, #0
 8001896:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001898:	2304      	movs	r3, #4
 800189a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800189c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018a0:	4619      	mov	r1, r3
 80018a2:	4816      	ldr	r0, [pc, #88]	@ (80018fc <HAL_I2C_MspInit+0x1a4>)
 80018a4:	f000 fb7e 	bl	8001fa4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018ac:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ae:	2312      	movs	r3, #18
 80018b0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018ba:	2304      	movs	r3, #4
 80018bc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018be:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018c2:	4619      	mov	r1, r3
 80018c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018c8:	f000 fb6c 	bl	8001fa4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018cc:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <HAL_I2C_MspInit+0x198>)
 80018ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d0:	4a07      	ldr	r2, [pc, #28]	@ (80018f0 <HAL_I2C_MspInit+0x198>)
 80018d2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80018d8:	4b05      	ldr	r3, [pc, #20]	@ (80018f0 <HAL_I2C_MspInit+0x198>)
 80018da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	68bb      	ldr	r3, [r7, #8]
}
 80018e4:	bf00      	nop
 80018e6:	3778      	adds	r7, #120	@ 0x78
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40005400 	.word	0x40005400
 80018f0:	40021000 	.word	0x40021000
 80018f4:	48000400 	.word	0x48000400
 80018f8:	40005800 	.word	0x40005800
 80018fc:	48001400 	.word	0x48001400

08001900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b09a      	sub	sp, #104	@ 0x68
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001918:	f107 0310 	add.w	r3, r7, #16
 800191c:	2244      	movs	r2, #68	@ 0x44
 800191e:	2100      	movs	r1, #0
 8001920:	4618      	mov	r0, r3
 8001922:	f004 f960 	bl	8005be6 <memset>
  if(huart->Instance==USART2)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a1f      	ldr	r2, [pc, #124]	@ (80019a8 <HAL_UART_MspInit+0xa8>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d136      	bne.n	800199e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001930:	2302      	movs	r3, #2
 8001932:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001934:	2300      	movs	r3, #0
 8001936:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001938:	f107 0310 	add.w	r3, r7, #16
 800193c:	4618      	mov	r0, r3
 800193e:	f002 f8d1 	bl	8003ae4 <HAL_RCCEx_PeriphCLKConfig>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001948:	f7ff fedc 	bl	8001704 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800194c:	4b17      	ldr	r3, [pc, #92]	@ (80019ac <HAL_UART_MspInit+0xac>)
 800194e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001950:	4a16      	ldr	r2, [pc, #88]	@ (80019ac <HAL_UART_MspInit+0xac>)
 8001952:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001956:	6593      	str	r3, [r2, #88]	@ 0x58
 8001958:	4b14      	ldr	r3, [pc, #80]	@ (80019ac <HAL_UART_MspInit+0xac>)
 800195a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001964:	4b11      	ldr	r3, [pc, #68]	@ (80019ac <HAL_UART_MspInit+0xac>)
 8001966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001968:	4a10      	ldr	r2, [pc, #64]	@ (80019ac <HAL_UART_MspInit+0xac>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001970:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <HAL_UART_MspInit+0xac>)
 8001972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800197c:	230c      	movs	r3, #12
 800197e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800198c:	2307      	movs	r3, #7
 800198e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001990:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001994:	4619      	mov	r1, r3
 8001996:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800199a:	f000 fb03 	bl	8001fa4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800199e:	bf00      	nop
 80019a0:	3768      	adds	r7, #104	@ 0x68
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40004400 	.word	0x40004400
 80019ac:	40021000 	.word	0x40021000

080019b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019b4:	bf00      	nop
 80019b6:	e7fd      	b.n	80019b4 <NMI_Handler+0x4>

080019b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <HardFault_Handler+0x4>

080019c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <MemManage_Handler+0x4>

080019c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <BusFault_Handler+0x4>

080019d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <UsageFault_Handler+0x4>

080019d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a06:	f000 f9a9 	bl	8001d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  return 1;
 8001a12:	2301      	movs	r3, #1
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <_kill>:

int _kill(int pid, int sig)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a28:	f004 f930 	bl	8005c8c <__errno>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2216      	movs	r2, #22
 8001a30:	601a      	str	r2, [r3, #0]
  return -1;
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <_exit>:

void _exit (int status)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a46:	f04f 31ff 	mov.w	r1, #4294967295
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffe7 	bl	8001a1e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <_exit+0x12>

08001a54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	e00a      	b.n	8001a7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a66:	f3af 8000 	nop.w
 8001a6a:	4601      	mov	r1, r0
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	1c5a      	adds	r2, r3, #1
 8001a70:	60ba      	str	r2, [r7, #8]
 8001a72:	b2ca      	uxtb	r2, r1
 8001a74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	dbf0      	blt.n	8001a66 <_read+0x12>
  }

  return len;
 8001a84:	687b      	ldr	r3, [r7, #4]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b086      	sub	sp, #24
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	e009      	b.n	8001ab4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	60ba      	str	r2, [r7, #8]
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 f8e9 	bl	8001c80 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	dbf1      	blt.n	8001aa0 <_write+0x12>
  }
  return len;
 8001abc:	687b      	ldr	r3, [r7, #4]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <_close>:

int _close(int file)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aee:	605a      	str	r2, [r3, #4]
  return 0;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <_isatty>:

int _isatty(int file)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b06:	2301      	movs	r3, #1
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b38:	4a14      	ldr	r2, [pc, #80]	@ (8001b8c <_sbrk+0x5c>)
 8001b3a:	4b15      	ldr	r3, [pc, #84]	@ (8001b90 <_sbrk+0x60>)
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b44:	4b13      	ldr	r3, [pc, #76]	@ (8001b94 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <_sbrk+0x64>)
 8001b4e:	4a12      	ldr	r2, [pc, #72]	@ (8001b98 <_sbrk+0x68>)
 8001b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b52:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <_sbrk+0x64>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d207      	bcs.n	8001b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b60:	f004 f894 	bl	8005c8c <__errno>
 8001b64:	4603      	mov	r3, r0
 8001b66:	220c      	movs	r2, #12
 8001b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6e:	e009      	b.n	8001b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b70:	4b08      	ldr	r3, [pc, #32]	@ (8001b94 <_sbrk+0x64>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b76:	4b07      	ldr	r3, [pc, #28]	@ (8001b94 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4a05      	ldr	r2, [pc, #20]	@ (8001b94 <_sbrk+0x64>)
 8001b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b82:	68fb      	ldr	r3, [r7, #12]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20008000 	.word	0x20008000
 8001b90:	00000400 	.word	0x00000400
 8001b94:	20000364 	.word	0x20000364
 8001b98:	20000550 	.word	0x20000550

08001b9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ba0:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <SystemInit+0x20>)
 8001ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ba6:	4a05      	ldr	r2, [pc, #20]	@ (8001bbc <SystemInit+0x20>)
 8001ba8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bc0:	480d      	ldr	r0, [pc, #52]	@ (8001bf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bc2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bc4:	f7ff ffea 	bl	8001b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc8:	480c      	ldr	r0, [pc, #48]	@ (8001bfc <LoopForever+0x6>)
  ldr r1, =_edata
 8001bca:	490d      	ldr	r1, [pc, #52]	@ (8001c00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c04 <LoopForever+0xe>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001bd0:	e002      	b.n	8001bd8 <LoopCopyDataInit>

08001bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd6:	3304      	adds	r3, #4

08001bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bdc:	d3f9      	bcc.n	8001bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bde:	4a0a      	ldr	r2, [pc, #40]	@ (8001c08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001be0:	4c0a      	ldr	r4, [pc, #40]	@ (8001c0c <LoopForever+0x16>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be4:	e001      	b.n	8001bea <LoopFillZerobss>

08001be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be8:	3204      	adds	r2, #4

08001bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bec:	d3fb      	bcc.n	8001be6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001bee:	f004 f853 	bl	8005c98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bf2:	f7ff fbfd 	bl	80013f0 <main>

08001bf6 <LoopForever>:

LoopForever:
    b LoopForever
 8001bf6:	e7fe      	b.n	8001bf6 <LoopForever>
  ldr   r0, =_estack
 8001bf8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c00:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001c04:	08009858 	.word	0x08009858
  ldr r2, =_sbss
 8001c08:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001c0c:	20000550 	.word	0x20000550

08001c10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c10:	e7fe      	b.n	8001c10 <ADC1_2_IRQHandler>
	...

08001c14 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8001c1e:	4b16      	ldr	r3, [pc, #88]	@ (8001c78 <BSP_LED_Init+0x64>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c22:	4a15      	ldr	r2, [pc, #84]	@ (8001c78 <BSP_LED_Init+0x64>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c2a:	4b13      	ldr	r3, [pc, #76]	@ (8001c78 <BSP_LED_Init+0x64>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8001c36:	2320      	movs	r3, #32
 8001c38:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c42:	2303      	movs	r3, #3
 8001c44:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	4a0c      	ldr	r2, [pc, #48]	@ (8001c7c <BSP_LED_Init+0x68>)
 8001c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4e:	f107 020c 	add.w	r2, r7, #12
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 f9a5 	bl	8001fa4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	4a07      	ldr	r2, [pc, #28]	@ (8001c7c <BSP_LED_Init+0x68>)
 8001c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c62:	2120      	movs	r1, #32
 8001c64:	2200      	movs	r2, #0
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 fb1e 	bl	80022a8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3720      	adds	r7, #32
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	20000004 	.word	0x20000004

08001c80 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001c88:	4b09      	ldr	r3, [pc, #36]	@ (8001cb0 <__io_putchar+0x30>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	2394      	movs	r3, #148	@ 0x94
 8001c90:	fb02 f303 	mul.w	r3, r2, r3
 8001c94:	4a07      	ldr	r2, [pc, #28]	@ (8001cb4 <__io_putchar+0x34>)
 8001c96:	1898      	adds	r0, r3, r2
 8001c98:	1d39      	adds	r1, r7, #4
 8001c9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f002 f960 	bl	8003f64 <HAL_UART_Transmit>
  return ch;
 8001ca4:	687b      	ldr	r3, [r7, #4]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200003fc 	.word	0x200003fc
 8001cb4:	20000368 	.word	0x20000368

08001cb8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc2:	2003      	movs	r0, #3
 8001cc4:	f000 f93c 	bl	8001f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f000 f80d 	bl	8001ce8 <HAL_InitTick>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	71fb      	strb	r3, [r7, #7]
 8001cd8:	e001      	b.n	8001cde <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cda:	f7ff fd19 	bl	8001710 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cde:	79fb      	ldrb	r3, [r7, #7]

}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001cf4:	4b16      	ldr	r3, [pc, #88]	@ (8001d50 <HAL_InitTick+0x68>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d022      	beq.n	8001d42 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001cfc:	4b15      	ldr	r3, [pc, #84]	@ (8001d54 <HAL_InitTick+0x6c>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4b13      	ldr	r3, [pc, #76]	@ (8001d50 <HAL_InitTick+0x68>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d08:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 f93a 	bl	8001f8a <HAL_SYSTICK_Config>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10f      	bne.n	8001d3c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b0f      	cmp	r3, #15
 8001d20:	d809      	bhi.n	8001d36 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d22:	2200      	movs	r2, #0
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2a:	f000 f914 	bl	8001f56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d58 <HAL_InitTick+0x70>)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	e007      	b.n	8001d46 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	73fb      	strb	r3, [r7, #15]
 8001d3a:	e004      	b.n	8001d46 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
 8001d40:	e001      	b.n	8001d46 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	2000000c 	.word	0x2000000c
 8001d54:	20000000 	.word	0x20000000
 8001d58:	20000008 	.word	0x20000008

08001d5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d60:	4b05      	ldr	r3, [pc, #20]	@ (8001d78 <HAL_IncTick+0x1c>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b05      	ldr	r3, [pc, #20]	@ (8001d7c <HAL_IncTick+0x20>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4413      	add	r3, r2
 8001d6a:	4a03      	ldr	r2, [pc, #12]	@ (8001d78 <HAL_IncTick+0x1c>)
 8001d6c:	6013      	str	r3, [r2, #0]
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	20000400 	.word	0x20000400
 8001d7c:	2000000c 	.word	0x2000000c

08001d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return uwTick;
 8001d84:	4b03      	ldr	r3, [pc, #12]	@ (8001d94 <HAL_GetTick+0x14>)
 8001d86:	681b      	ldr	r3, [r3, #0]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	20000400 	.word	0x20000400

08001d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da0:	f7ff ffee 	bl	8001d80 <HAL_GetTick>
 8001da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db0:	d004      	beq.n	8001dbc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001db2:	4b09      	ldr	r3, [pc, #36]	@ (8001dd8 <HAL_Delay+0x40>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	4413      	add	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dbc:	bf00      	nop
 8001dbe:	f7ff ffdf 	bl	8001d80 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d8f7      	bhi.n	8001dbe <HAL_Delay+0x26>
  {
  }
}
 8001dce:	bf00      	nop
 8001dd0:	bf00      	nop
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	2000000c 	.word	0x2000000c

08001ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dec:	4b0c      	ldr	r3, [pc, #48]	@ (8001e20 <__NVIC_SetPriorityGrouping+0x44>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e0e:	4a04      	ldr	r2, [pc, #16]	@ (8001e20 <__NVIC_SetPriorityGrouping+0x44>)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	60d3      	str	r3, [r2, #12]
}
 8001e14:	bf00      	nop
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e28:	4b04      	ldr	r3, [pc, #16]	@ (8001e3c <__NVIC_GetPriorityGrouping+0x18>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	0a1b      	lsrs	r3, r3, #8
 8001e2e:	f003 0307 	and.w	r3, r3, #7
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	6039      	str	r1, [r7, #0]
 8001e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	db0a      	blt.n	8001e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	490c      	ldr	r1, [pc, #48]	@ (8001e8c <__NVIC_SetPriority+0x4c>)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	0112      	lsls	r2, r2, #4
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	440b      	add	r3, r1
 8001e64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e68:	e00a      	b.n	8001e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4908      	ldr	r1, [pc, #32]	@ (8001e90 <__NVIC_SetPriority+0x50>)
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	3b04      	subs	r3, #4
 8001e78:	0112      	lsls	r2, r2, #4
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	761a      	strb	r2, [r3, #24]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	e000e100 	.word	0xe000e100
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b089      	sub	sp, #36	@ 0x24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f1c3 0307 	rsb	r3, r3, #7
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	bf28      	it	cs
 8001eb2:	2304      	movcs	r3, #4
 8001eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	2b06      	cmp	r3, #6
 8001ebc:	d902      	bls.n	8001ec4 <NVIC_EncodePriority+0x30>
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3b03      	subs	r3, #3
 8001ec2:	e000      	b.n	8001ec6 <NVIC_EncodePriority+0x32>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43da      	mvns	r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001edc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee6:	43d9      	mvns	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eec:	4313      	orrs	r3, r2
         );
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3724      	adds	r7, #36	@ 0x24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f0c:	d301      	bcc.n	8001f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e00f      	b.n	8001f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f12:	4a0a      	ldr	r2, [pc, #40]	@ (8001f3c <SysTick_Config+0x40>)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f1a:	210f      	movs	r1, #15
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f20:	f7ff ff8e 	bl	8001e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f24:	4b05      	ldr	r3, [pc, #20]	@ (8001f3c <SysTick_Config+0x40>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f2a:	4b04      	ldr	r3, [pc, #16]	@ (8001f3c <SysTick_Config+0x40>)
 8001f2c:	2207      	movs	r2, #7
 8001f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	e000e010 	.word	0xe000e010

08001f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff ff47 	bl	8001ddc <__NVIC_SetPriorityGrouping>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b086      	sub	sp, #24
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	607a      	str	r2, [r7, #4]
 8001f62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f64:	f7ff ff5e 	bl	8001e24 <__NVIC_GetPriorityGrouping>
 8001f68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	6978      	ldr	r0, [r7, #20]
 8001f70:	f7ff ff90 	bl	8001e94 <NVIC_EncodePriority>
 8001f74:	4602      	mov	r2, r0
 8001f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff5f 	bl	8001e40 <__NVIC_SetPriority>
}
 8001f82:	bf00      	nop
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff ffb2 	bl	8001efc <SysTick_Config>
 8001f98:	4603      	mov	r3, r0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001fb2:	e15a      	b.n	800226a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	2101      	movs	r1, #1
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 814c 	beq.w	8002264 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d005      	beq.n	8001fe4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d130      	bne.n	8002046 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	2203      	movs	r2, #3
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	4313      	orrs	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800201a:	2201      	movs	r2, #1
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	4013      	ands	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	091b      	lsrs	r3, r3, #4
 8002030:	f003 0201 	and.w	r2, r3, #1
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	2b03      	cmp	r3, #3
 8002050:	d017      	beq.n	8002082 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	2203      	movs	r2, #3
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4013      	ands	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d123      	bne.n	80020d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	08da      	lsrs	r2, r3, #3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3208      	adds	r2, #8
 8002096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800209a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	220f      	movs	r2, #15
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4013      	ands	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	691a      	ldr	r2, [r3, #16]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	08da      	lsrs	r2, r3, #3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3208      	adds	r2, #8
 80020d0:	6939      	ldr	r1, [r7, #16]
 80020d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	2203      	movs	r2, #3
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43db      	mvns	r3, r3
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	4013      	ands	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 0203 	and.w	r2, r3, #3
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 80a6 	beq.w	8002264 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002118:	4b5b      	ldr	r3, [pc, #364]	@ (8002288 <HAL_GPIO_Init+0x2e4>)
 800211a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800211c:	4a5a      	ldr	r2, [pc, #360]	@ (8002288 <HAL_GPIO_Init+0x2e4>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6613      	str	r3, [r2, #96]	@ 0x60
 8002124:	4b58      	ldr	r3, [pc, #352]	@ (8002288 <HAL_GPIO_Init+0x2e4>)
 8002126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002130:	4a56      	ldr	r2, [pc, #344]	@ (800228c <HAL_GPIO_Init+0x2e8>)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	089b      	lsrs	r3, r3, #2
 8002136:	3302      	adds	r3, #2
 8002138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	220f      	movs	r2, #15
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4013      	ands	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800215a:	d01f      	beq.n	800219c <HAL_GPIO_Init+0x1f8>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a4c      	ldr	r2, [pc, #304]	@ (8002290 <HAL_GPIO_Init+0x2ec>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d019      	beq.n	8002198 <HAL_GPIO_Init+0x1f4>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a4b      	ldr	r2, [pc, #300]	@ (8002294 <HAL_GPIO_Init+0x2f0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d013      	beq.n	8002194 <HAL_GPIO_Init+0x1f0>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a4a      	ldr	r2, [pc, #296]	@ (8002298 <HAL_GPIO_Init+0x2f4>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d00d      	beq.n	8002190 <HAL_GPIO_Init+0x1ec>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a49      	ldr	r2, [pc, #292]	@ (800229c <HAL_GPIO_Init+0x2f8>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d007      	beq.n	800218c <HAL_GPIO_Init+0x1e8>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a48      	ldr	r2, [pc, #288]	@ (80022a0 <HAL_GPIO_Init+0x2fc>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d101      	bne.n	8002188 <HAL_GPIO_Init+0x1e4>
 8002184:	2305      	movs	r3, #5
 8002186:	e00a      	b.n	800219e <HAL_GPIO_Init+0x1fa>
 8002188:	2306      	movs	r3, #6
 800218a:	e008      	b.n	800219e <HAL_GPIO_Init+0x1fa>
 800218c:	2304      	movs	r3, #4
 800218e:	e006      	b.n	800219e <HAL_GPIO_Init+0x1fa>
 8002190:	2303      	movs	r3, #3
 8002192:	e004      	b.n	800219e <HAL_GPIO_Init+0x1fa>
 8002194:	2302      	movs	r3, #2
 8002196:	e002      	b.n	800219e <HAL_GPIO_Init+0x1fa>
 8002198:	2301      	movs	r3, #1
 800219a:	e000      	b.n	800219e <HAL_GPIO_Init+0x1fa>
 800219c:	2300      	movs	r3, #0
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	f002 0203 	and.w	r2, r2, #3
 80021a4:	0092      	lsls	r2, r2, #2
 80021a6:	4093      	lsls	r3, r2
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021ae:	4937      	ldr	r1, [pc, #220]	@ (800228c <HAL_GPIO_Init+0x2e8>)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	089b      	lsrs	r3, r3, #2
 80021b4:	3302      	adds	r3, #2
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021bc:	4b39      	ldr	r3, [pc, #228]	@ (80022a4 <HAL_GPIO_Init+0x300>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	43db      	mvns	r3, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4313      	orrs	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021e0:	4a30      	ldr	r2, [pc, #192]	@ (80022a4 <HAL_GPIO_Init+0x300>)
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021e6:	4b2f      	ldr	r3, [pc, #188]	@ (80022a4 <HAL_GPIO_Init+0x300>)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	4013      	ands	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4313      	orrs	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800220a:	4a26      	ldr	r2, [pc, #152]	@ (80022a4 <HAL_GPIO_Init+0x300>)
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002210:	4b24      	ldr	r3, [pc, #144]	@ (80022a4 <HAL_GPIO_Init+0x300>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	43db      	mvns	r3, r3
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4013      	ands	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002234:	4a1b      	ldr	r2, [pc, #108]	@ (80022a4 <HAL_GPIO_Init+0x300>)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800223a:	4b1a      	ldr	r3, [pc, #104]	@ (80022a4 <HAL_GPIO_Init+0x300>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	43db      	mvns	r3, r3
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4013      	ands	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4313      	orrs	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800225e:	4a11      	ldr	r2, [pc, #68]	@ (80022a4 <HAL_GPIO_Init+0x300>)
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	3301      	adds	r3, #1
 8002268:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	fa22 f303 	lsr.w	r3, r2, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	f47f ae9d 	bne.w	8001fb4 <HAL_GPIO_Init+0x10>
  }
}
 800227a:	bf00      	nop
 800227c:	bf00      	nop
 800227e:	371c      	adds	r7, #28
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	40021000 	.word	0x40021000
 800228c:	40010000 	.word	0x40010000
 8002290:	48000400 	.word	0x48000400
 8002294:	48000800 	.word	0x48000800
 8002298:	48000c00 	.word	0x48000c00
 800229c:	48001000 	.word	0x48001000
 80022a0:	48001400 	.word	0x48001400
 80022a4:	40010400 	.word	0x40010400

080022a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	807b      	strh	r3, [r7, #2]
 80022b4:	4613      	mov	r3, r2
 80022b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022b8:	787b      	ldrb	r3, [r7, #1]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022be:	887a      	ldrh	r2, [r7, #2]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022c4:	e002      	b.n	80022cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022c6:	887a      	ldrh	r2, [r7, #2]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e08d      	b.n	8002406 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d106      	bne.n	8002304 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff fa2a 	bl	8001758 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2224      	movs	r2, #36	@ 0x24
 8002308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0201 	bic.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002328:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002338:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d107      	bne.n	8002352 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	e006      	b.n	8002360 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800235e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	2b02      	cmp	r3, #2
 8002366:	d108      	bne.n	800237a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002376:	605a      	str	r2, [r3, #4]
 8002378:	e007      	b.n	800238a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002388:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002398:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800239c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691a      	ldr	r2, [r3, #16]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69d9      	ldr	r1, [r3, #28]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a1a      	ldr	r2, [r3, #32]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0201 	orr.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2220      	movs	r2, #32
 80023f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af02      	add	r7, sp, #8
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	4608      	mov	r0, r1
 800241a:	4611      	mov	r1, r2
 800241c:	461a      	mov	r2, r3
 800241e:	4603      	mov	r3, r0
 8002420:	817b      	strh	r3, [r7, #10]
 8002422:	460b      	mov	r3, r1
 8002424:	813b      	strh	r3, [r7, #8]
 8002426:	4613      	mov	r3, r2
 8002428:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b20      	cmp	r3, #32
 8002434:	f040 80f9 	bne.w	800262a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d002      	beq.n	8002444 <HAL_I2C_Mem_Write+0x34>
 800243e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002440:	2b00      	cmp	r3, #0
 8002442:	d105      	bne.n	8002450 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800244a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e0ed      	b.n	800262c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002456:	2b01      	cmp	r3, #1
 8002458:	d101      	bne.n	800245e <HAL_I2C_Mem_Write+0x4e>
 800245a:	2302      	movs	r3, #2
 800245c:	e0e6      	b.n	800262c <HAL_I2C_Mem_Write+0x21c>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002466:	f7ff fc8b 	bl	8001d80 <HAL_GetTick>
 800246a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	2319      	movs	r3, #25
 8002472:	2201      	movs	r2, #1
 8002474:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 fac3 	bl	8002a04 <I2C_WaitOnFlagUntilTimeout>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0d1      	b.n	800262c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2221      	movs	r2, #33	@ 0x21
 800248c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2240      	movs	r2, #64	@ 0x40
 8002494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a3a      	ldr	r2, [r7, #32]
 80024a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80024a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024b0:	88f8      	ldrh	r0, [r7, #6]
 80024b2:	893a      	ldrh	r2, [r7, #8]
 80024b4:	8979      	ldrh	r1, [r7, #10]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	9301      	str	r3, [sp, #4]
 80024ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	4603      	mov	r3, r0
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 f9d3 	bl	800286c <I2C_RequestMemoryWrite>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0a9      	b.n	800262c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2bff      	cmp	r3, #255	@ 0xff
 80024e0:	d90e      	bls.n	8002500 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	22ff      	movs	r2, #255	@ 0xff
 80024e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	8979      	ldrh	r1, [r7, #10]
 80024f0:	2300      	movs	r3, #0
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 fc47 	bl	8002d8c <I2C_TransferConfig>
 80024fe:	e00f      	b.n	8002520 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002504:	b29a      	uxth	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800250e:	b2da      	uxtb	r2, r3
 8002510:	8979      	ldrh	r1, [r7, #10]
 8002512:	2300      	movs	r3, #0
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 fc36 	bl	8002d8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f000 fac6 	bl	8002ab6 <I2C_WaitOnTXISFlagUntilTimeout>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e07b      	b.n	800262c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002538:	781a      	ldrb	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800254e:	b29b      	uxth	r3, r3
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002568:	b29b      	uxth	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d034      	beq.n	80025d8 <HAL_I2C_Mem_Write+0x1c8>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002572:	2b00      	cmp	r3, #0
 8002574:	d130      	bne.n	80025d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800257c:	2200      	movs	r2, #0
 800257e:	2180      	movs	r1, #128	@ 0x80
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 fa3f 	bl	8002a04 <I2C_WaitOnFlagUntilTimeout>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e04d      	b.n	800262c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002594:	b29b      	uxth	r3, r3
 8002596:	2bff      	cmp	r3, #255	@ 0xff
 8002598:	d90e      	bls.n	80025b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	22ff      	movs	r2, #255	@ 0xff
 800259e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	8979      	ldrh	r1, [r7, #10]
 80025a8:	2300      	movs	r3, #0
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 fbeb 	bl	8002d8c <I2C_TransferConfig>
 80025b6:	e00f      	b.n	80025d8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025bc:	b29a      	uxth	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	8979      	ldrh	r1, [r7, #10]
 80025ca:	2300      	movs	r3, #0
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 fbda 	bl	8002d8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025dc:	b29b      	uxth	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d19e      	bne.n	8002520 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 faac 	bl	8002b44 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e01a      	b.n	800262c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2220      	movs	r2, #32
 80025fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6859      	ldr	r1, [r3, #4]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4b0a      	ldr	r3, [pc, #40]	@ (8002634 <HAL_I2C_Mem_Write+0x224>)
 800260a:	400b      	ands	r3, r1
 800260c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2220      	movs	r2, #32
 8002612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	e000      	b.n	800262c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800262a:	2302      	movs	r3, #2
  }
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	fe00e800 	.word	0xfe00e800

08002638 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af02      	add	r7, sp, #8
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	4608      	mov	r0, r1
 8002642:	4611      	mov	r1, r2
 8002644:	461a      	mov	r2, r3
 8002646:	4603      	mov	r3, r0
 8002648:	817b      	strh	r3, [r7, #10]
 800264a:	460b      	mov	r3, r1
 800264c:	813b      	strh	r3, [r7, #8]
 800264e:	4613      	mov	r3, r2
 8002650:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b20      	cmp	r3, #32
 800265c:	f040 80fd 	bne.w	800285a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <HAL_I2C_Mem_Read+0x34>
 8002666:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002668:	2b00      	cmp	r3, #0
 800266a:	d105      	bne.n	8002678 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002672:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e0f1      	b.n	800285c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_I2C_Mem_Read+0x4e>
 8002682:	2302      	movs	r3, #2
 8002684:	e0ea      	b.n	800285c <HAL_I2C_Mem_Read+0x224>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800268e:	f7ff fb77 	bl	8001d80 <HAL_GetTick>
 8002692:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	2319      	movs	r3, #25
 800269a:	2201      	movs	r2, #1
 800269c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 f9af 	bl	8002a04 <I2C_WaitOnFlagUntilTimeout>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0d5      	b.n	800285c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2222      	movs	r2, #34	@ 0x22
 80026b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2240      	movs	r2, #64	@ 0x40
 80026bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a3a      	ldr	r2, [r7, #32]
 80026ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80026d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026d8:	88f8      	ldrh	r0, [r7, #6]
 80026da:	893a      	ldrh	r2, [r7, #8]
 80026dc:	8979      	ldrh	r1, [r7, #10]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	9301      	str	r3, [sp, #4]
 80026e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	4603      	mov	r3, r0
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 f913 	bl	8002914 <I2C_RequestMemoryRead>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0ad      	b.n	800285c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002704:	b29b      	uxth	r3, r3
 8002706:	2bff      	cmp	r3, #255	@ 0xff
 8002708:	d90e      	bls.n	8002728 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	22ff      	movs	r2, #255	@ 0xff
 800270e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002714:	b2da      	uxtb	r2, r3
 8002716:	8979      	ldrh	r1, [r7, #10]
 8002718:	4b52      	ldr	r3, [pc, #328]	@ (8002864 <HAL_I2C_Mem_Read+0x22c>)
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 fb33 	bl	8002d8c <I2C_TransferConfig>
 8002726:	e00f      	b.n	8002748 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800272c:	b29a      	uxth	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002736:	b2da      	uxtb	r2, r3
 8002738:	8979      	ldrh	r1, [r7, #10]
 800273a:	4b4a      	ldr	r3, [pc, #296]	@ (8002864 <HAL_I2C_Mem_Read+0x22c>)
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 fb22 	bl	8002d8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800274e:	2200      	movs	r2, #0
 8002750:	2104      	movs	r1, #4
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 f956 	bl	8002a04 <I2C_WaitOnFlagUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e07c      	b.n	800285c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800277e:	3b01      	subs	r3, #1
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800278a:	b29b      	uxth	r3, r3
 800278c:	3b01      	subs	r3, #1
 800278e:	b29a      	uxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002798:	b29b      	uxth	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d034      	beq.n	8002808 <HAL_I2C_Mem_Read+0x1d0>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d130      	bne.n	8002808 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ac:	2200      	movs	r2, #0
 80027ae:	2180      	movs	r1, #128	@ 0x80
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 f927 	bl	8002a04 <I2C_WaitOnFlagUntilTimeout>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e04d      	b.n	800285c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	2bff      	cmp	r3, #255	@ 0xff
 80027c8:	d90e      	bls.n	80027e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	22ff      	movs	r2, #255	@ 0xff
 80027ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	8979      	ldrh	r1, [r7, #10]
 80027d8:	2300      	movs	r3, #0
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 fad3 	bl	8002d8c <I2C_TransferConfig>
 80027e6:	e00f      	b.n	8002808 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	8979      	ldrh	r1, [r7, #10]
 80027fa:	2300      	movs	r3, #0
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 fac2 	bl	8002d8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800280c:	b29b      	uxth	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d19a      	bne.n	8002748 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 f994 	bl	8002b44 <I2C_WaitOnSTOPFlagUntilTimeout>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e01a      	b.n	800285c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2220      	movs	r2, #32
 800282c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6859      	ldr	r1, [r3, #4]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4b0b      	ldr	r3, [pc, #44]	@ (8002868 <HAL_I2C_Mem_Read+0x230>)
 800283a:	400b      	ands	r3, r1
 800283c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2220      	movs	r2, #32
 8002842:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	e000      	b.n	800285c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800285a:	2302      	movs	r3, #2
  }
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	80002400 	.word	0x80002400
 8002868:	fe00e800 	.word	0xfe00e800

0800286c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af02      	add	r7, sp, #8
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	4608      	mov	r0, r1
 8002876:	4611      	mov	r1, r2
 8002878:	461a      	mov	r2, r3
 800287a:	4603      	mov	r3, r0
 800287c:	817b      	strh	r3, [r7, #10]
 800287e:	460b      	mov	r3, r1
 8002880:	813b      	strh	r3, [r7, #8]
 8002882:	4613      	mov	r3, r2
 8002884:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	b2da      	uxtb	r2, r3
 800288a:	8979      	ldrh	r1, [r7, #10]
 800288c:	4b20      	ldr	r3, [pc, #128]	@ (8002910 <I2C_RequestMemoryWrite+0xa4>)
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 fa79 	bl	8002d8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800289a:	69fa      	ldr	r2, [r7, #28]
 800289c:	69b9      	ldr	r1, [r7, #24]
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 f909 	bl	8002ab6 <I2C_WaitOnTXISFlagUntilTimeout>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e02c      	b.n	8002908 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028ae:	88fb      	ldrh	r3, [r7, #6]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d105      	bne.n	80028c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028b4:	893b      	ldrh	r3, [r7, #8]
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80028be:	e015      	b.n	80028ec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028c0:	893b      	ldrh	r3, [r7, #8]
 80028c2:	0a1b      	lsrs	r3, r3, #8
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	69b9      	ldr	r1, [r7, #24]
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 f8ef 	bl	8002ab6 <I2C_WaitOnTXISFlagUntilTimeout>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e012      	b.n	8002908 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028e2:	893b      	ldrh	r3, [r7, #8]
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	2200      	movs	r2, #0
 80028f4:	2180      	movs	r1, #128	@ 0x80
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 f884 	bl	8002a04 <I2C_WaitOnFlagUntilTimeout>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	80002000 	.word	0x80002000

08002914 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af02      	add	r7, sp, #8
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	4608      	mov	r0, r1
 800291e:	4611      	mov	r1, r2
 8002920:	461a      	mov	r2, r3
 8002922:	4603      	mov	r3, r0
 8002924:	817b      	strh	r3, [r7, #10]
 8002926:	460b      	mov	r3, r1
 8002928:	813b      	strh	r3, [r7, #8]
 800292a:	4613      	mov	r3, r2
 800292c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800292e:	88fb      	ldrh	r3, [r7, #6]
 8002930:	b2da      	uxtb	r2, r3
 8002932:	8979      	ldrh	r1, [r7, #10]
 8002934:	4b20      	ldr	r3, [pc, #128]	@ (80029b8 <I2C_RequestMemoryRead+0xa4>)
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	2300      	movs	r3, #0
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 fa26 	bl	8002d8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002940:	69fa      	ldr	r2, [r7, #28]
 8002942:	69b9      	ldr	r1, [r7, #24]
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f8b6 	bl	8002ab6 <I2C_WaitOnTXISFlagUntilTimeout>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e02c      	b.n	80029ae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002954:	88fb      	ldrh	r3, [r7, #6]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d105      	bne.n	8002966 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800295a:	893b      	ldrh	r3, [r7, #8]
 800295c:	b2da      	uxtb	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	629a      	str	r2, [r3, #40]	@ 0x28
 8002964:	e015      	b.n	8002992 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002966:	893b      	ldrh	r3, [r7, #8]
 8002968:	0a1b      	lsrs	r3, r3, #8
 800296a:	b29b      	uxth	r3, r3
 800296c:	b2da      	uxtb	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	69b9      	ldr	r1, [r7, #24]
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 f89c 	bl	8002ab6 <I2C_WaitOnTXISFlagUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e012      	b.n	80029ae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002988:	893b      	ldrh	r3, [r7, #8]
 800298a:	b2da      	uxtb	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	2200      	movs	r2, #0
 800299a:	2140      	movs	r1, #64	@ 0x40
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 f831 	bl	8002a04 <I2C_WaitOnFlagUntilTimeout>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e000      	b.n	80029ae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	80002000 	.word	0x80002000

080029bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d103      	bne.n	80029da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2200      	movs	r2, #0
 80029d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d007      	beq.n	80029f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699a      	ldr	r2, [r3, #24]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	619a      	str	r2, [r3, #24]
  }
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	4613      	mov	r3, r2
 8002a12:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a14:	e03b      	b.n	8002a8e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	6839      	ldr	r1, [r7, #0]
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 f8d6 	bl	8002bcc <I2C_IsErrorOccurred>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e041      	b.n	8002aae <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a30:	d02d      	beq.n	8002a8e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a32:	f7ff f9a5 	bl	8001d80 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d302      	bcc.n	8002a48 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d122      	bne.n	8002a8e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699a      	ldr	r2, [r3, #24]
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	4013      	ands	r3, r2
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	bf0c      	ite	eq
 8002a58:	2301      	moveq	r3, #1
 8002a5a:	2300      	movne	r3, #0
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	461a      	mov	r2, r3
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d113      	bne.n	8002a8e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6a:	f043 0220 	orr.w	r2, r3, #32
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e00f      	b.n	8002aae <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	699a      	ldr	r2, [r3, #24]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4013      	ands	r3, r2
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	bf0c      	ite	eq
 8002a9e:	2301      	moveq	r3, #1
 8002aa0:	2300      	movne	r3, #0
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d0b4      	beq.n	8002a16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b084      	sub	sp, #16
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ac2:	e033      	b.n	8002b2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f87f 	bl	8002bcc <I2C_IsErrorOccurred>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e031      	b.n	8002b3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ade:	d025      	beq.n	8002b2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae0:	f7ff f94e 	bl	8001d80 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d302      	bcc.n	8002af6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d11a      	bne.n	8002b2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d013      	beq.n	8002b2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b08:	f043 0220 	orr.w	r2, r3, #32
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2220      	movs	r2, #32
 8002b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e007      	b.n	8002b3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d1c4      	bne.n	8002ac4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b50:	e02f      	b.n	8002bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 f838 	bl	8002bcc <I2C_IsErrorOccurred>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e02d      	b.n	8002bc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b66:	f7ff f90b 	bl	8001d80 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d302      	bcc.n	8002b7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d11a      	bne.n	8002bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	2b20      	cmp	r3, #32
 8002b88:	d013      	beq.n	8002bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8e:	f043 0220 	orr.w	r2, r3, #32
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e007      	b.n	8002bc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f003 0320 	and.w	r3, r3, #32
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	d1c8      	bne.n	8002b52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08a      	sub	sp, #40	@ 0x28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d068      	beq.n	8002cca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2210      	movs	r2, #16
 8002bfe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c00:	e049      	b.n	8002c96 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c08:	d045      	beq.n	8002c96 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c0a:	f7ff f8b9 	bl	8001d80 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d302      	bcc.n	8002c20 <I2C_IsErrorOccurred+0x54>
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d13a      	bne.n	8002c96 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c32:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c42:	d121      	bne.n	8002c88 <I2C_IsErrorOccurred+0xbc>
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c4a:	d01d      	beq.n	8002c88 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002c4c:	7cfb      	ldrb	r3, [r7, #19]
 8002c4e:	2b20      	cmp	r3, #32
 8002c50:	d01a      	beq.n	8002c88 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c60:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c62:	f7ff f88d 	bl	8001d80 <HAL_GetTick>
 8002c66:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c68:	e00e      	b.n	8002c88 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c6a:	f7ff f889 	bl	8001d80 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b19      	cmp	r3, #25
 8002c76:	d907      	bls.n	8002c88 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	f043 0320 	orr.w	r3, r3, #32
 8002c7e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002c86:	e006      	b.n	8002c96 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	d1e9      	bne.n	8002c6a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	d003      	beq.n	8002cac <I2C_IsErrorOccurred+0xe0>
 8002ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0aa      	beq.n	8002c02 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002cac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d103      	bne.n	8002cbc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	f043 0304 	orr.w	r3, r3, #4
 8002cc2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00b      	beq.n	8002cf4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00b      	beq.n	8002d16 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	f043 0308 	orr.w	r3, r3, #8
 8002d04:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00b      	beq.n	8002d38 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	f043 0302 	orr.w	r3, r3, #2
 8002d26:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002d38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d01c      	beq.n	8002d7a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f7ff fe3b 	bl	80029bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6859      	ldr	r1, [r3, #4]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	4b0d      	ldr	r3, [pc, #52]	@ (8002d88 <I2C_IsErrorOccurred+0x1bc>)
 8002d52:	400b      	ands	r3, r1
 8002d54:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002d7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3728      	adds	r7, #40	@ 0x28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	fe00e800 	.word	0xfe00e800

08002d8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	607b      	str	r3, [r7, #4]
 8002d96:	460b      	mov	r3, r1
 8002d98:	817b      	strh	r3, [r7, #10]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d9e:	897b      	ldrh	r3, [r7, #10]
 8002da0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002da4:	7a7b      	ldrb	r3, [r7, #9]
 8002da6:	041b      	lsls	r3, r3, #16
 8002da8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002dba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	0d5b      	lsrs	r3, r3, #21
 8002dc6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002dca:	4b08      	ldr	r3, [pc, #32]	@ (8002dec <I2C_TransferConfig+0x60>)
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	ea02 0103 	and.w	r1, r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002dde:	bf00      	nop
 8002de0:	371c      	adds	r7, #28
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	03ff63ff 	.word	0x03ff63ff

08002df0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b20      	cmp	r3, #32
 8002e04:	d138      	bne.n	8002e78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e032      	b.n	8002e7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2224      	movs	r2, #36	@ 0x24
 8002e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0201 	bic.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6819      	ldr	r1, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0201 	orr.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	e000      	b.n	8002e7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e78:	2302      	movs	r3, #2
  }
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b085      	sub	sp, #20
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	d139      	bne.n	8002f10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e033      	b.n	8002f12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2224      	movs	r2, #36	@ 0x24
 8002eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0201 	bic.w	r2, r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002ed8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	021b      	lsls	r3, r3, #8
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	e000      	b.n	8002f12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f10:	2302      	movs	r3, #2
  }
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
	...

08002f20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d141      	bne.n	8002fb2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f2e:	4b4b      	ldr	r3, [pc, #300]	@ (800305c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f3a:	d131      	bne.n	8002fa0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f3c:	4b47      	ldr	r3, [pc, #284]	@ (800305c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f42:	4a46      	ldr	r2, [pc, #280]	@ (800305c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f4c:	4b43      	ldr	r3, [pc, #268]	@ (800305c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f54:	4a41      	ldr	r2, [pc, #260]	@ (800305c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f5c:	4b40      	ldr	r3, [pc, #256]	@ (8003060 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2232      	movs	r2, #50	@ 0x32
 8002f62:	fb02 f303 	mul.w	r3, r2, r3
 8002f66:	4a3f      	ldr	r2, [pc, #252]	@ (8003064 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f68:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6c:	0c9b      	lsrs	r3, r3, #18
 8002f6e:	3301      	adds	r3, #1
 8002f70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f72:	e002      	b.n	8002f7a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f7a:	4b38      	ldr	r3, [pc, #224]	@ (800305c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f86:	d102      	bne.n	8002f8e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f2      	bne.n	8002f74 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f8e:	4b33      	ldr	r3, [pc, #204]	@ (800305c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f9a:	d158      	bne.n	800304e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e057      	b.n	8003050 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fa0:	4b2e      	ldr	r3, [pc, #184]	@ (800305c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fa6:	4a2d      	ldr	r2, [pc, #180]	@ (800305c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002fb0:	e04d      	b.n	800304e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fb8:	d141      	bne.n	800303e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fba:	4b28      	ldr	r3, [pc, #160]	@ (800305c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fc6:	d131      	bne.n	800302c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fc8:	4b24      	ldr	r3, [pc, #144]	@ (800305c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fce:	4a23      	ldr	r2, [pc, #140]	@ (800305c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fd8:	4b20      	ldr	r3, [pc, #128]	@ (800305c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fe0:	4a1e      	ldr	r2, [pc, #120]	@ (800305c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fe6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8003060 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2232      	movs	r2, #50	@ 0x32
 8002fee:	fb02 f303 	mul.w	r3, r2, r3
 8002ff2:	4a1c      	ldr	r2, [pc, #112]	@ (8003064 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff8:	0c9b      	lsrs	r3, r3, #18
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ffe:	e002      	b.n	8003006 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	3b01      	subs	r3, #1
 8003004:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003006:	4b15      	ldr	r3, [pc, #84]	@ (800305c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800300e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003012:	d102      	bne.n	800301a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f2      	bne.n	8003000 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800301a:	4b10      	ldr	r3, [pc, #64]	@ (800305c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003026:	d112      	bne.n	800304e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e011      	b.n	8003050 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800302c:	4b0b      	ldr	r3, [pc, #44]	@ (800305c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800302e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003032:	4a0a      	ldr	r2, [pc, #40]	@ (800305c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003038:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800303c:	e007      	b.n	800304e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800303e:	4b07      	ldr	r3, [pc, #28]	@ (800305c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003046:	4a05      	ldr	r2, [pc, #20]	@ (800305c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003048:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800304c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	40007000 	.word	0x40007000
 8003060:	20000000 	.word	0x20000000
 8003064:	431bde83 	.word	0x431bde83

08003068 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800306c:	4b05      	ldr	r3, [pc, #20]	@ (8003084 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	4a04      	ldr	r2, [pc, #16]	@ (8003084 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003072:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003076:	6093      	str	r3, [r2, #8]
}
 8003078:	bf00      	nop
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	40007000 	.word	0x40007000

08003088 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e2fe      	b.n	8003698 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d075      	beq.n	8003192 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030a6:	4b97      	ldr	r3, [pc, #604]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030b0:	4b94      	ldr	r3, [pc, #592]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	2b0c      	cmp	r3, #12
 80030be:	d102      	bne.n	80030c6 <HAL_RCC_OscConfig+0x3e>
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d002      	beq.n	80030cc <HAL_RCC_OscConfig+0x44>
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	d10b      	bne.n	80030e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030cc:	4b8d      	ldr	r3, [pc, #564]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d05b      	beq.n	8003190 <HAL_RCC_OscConfig+0x108>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d157      	bne.n	8003190 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e2d9      	b.n	8003698 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030ec:	d106      	bne.n	80030fc <HAL_RCC_OscConfig+0x74>
 80030ee:	4b85      	ldr	r3, [pc, #532]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a84      	ldr	r2, [pc, #528]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 80030f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	e01d      	b.n	8003138 <HAL_RCC_OscConfig+0xb0>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003104:	d10c      	bne.n	8003120 <HAL_RCC_OscConfig+0x98>
 8003106:	4b7f      	ldr	r3, [pc, #508]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a7e      	ldr	r2, [pc, #504]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 800310c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	4b7c      	ldr	r3, [pc, #496]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a7b      	ldr	r2, [pc, #492]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 8003118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	e00b      	b.n	8003138 <HAL_RCC_OscConfig+0xb0>
 8003120:	4b78      	ldr	r3, [pc, #480]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a77      	ldr	r2, [pc, #476]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 8003126:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800312a:	6013      	str	r3, [r2, #0]
 800312c:	4b75      	ldr	r3, [pc, #468]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a74      	ldr	r2, [pc, #464]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 8003132:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d013      	beq.n	8003168 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003140:	f7fe fe1e 	bl	8001d80 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003148:	f7fe fe1a 	bl	8001d80 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b64      	cmp	r3, #100	@ 0x64
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e29e      	b.n	8003698 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800315a:	4b6a      	ldr	r3, [pc, #424]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0xc0>
 8003166:	e014      	b.n	8003192 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003168:	f7fe fe0a 	bl	8001d80 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003170:	f7fe fe06 	bl	8001d80 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b64      	cmp	r3, #100	@ 0x64
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e28a      	b.n	8003698 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003182:	4b60      	ldr	r3, [pc, #384]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0xe8>
 800318e:	e000      	b.n	8003192 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d075      	beq.n	800328a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800319e:	4b59      	ldr	r3, [pc, #356]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 030c 	and.w	r3, r3, #12
 80031a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031a8:	4b56      	ldr	r3, [pc, #344]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f003 0303 	and.w	r3, r3, #3
 80031b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	2b0c      	cmp	r3, #12
 80031b6:	d102      	bne.n	80031be <HAL_RCC_OscConfig+0x136>
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d002      	beq.n	80031c4 <HAL_RCC_OscConfig+0x13c>
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d11f      	bne.n	8003204 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031c4:	4b4f      	ldr	r3, [pc, #316]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_RCC_OscConfig+0x154>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e25d      	b.n	8003698 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031dc:	4b49      	ldr	r3, [pc, #292]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	061b      	lsls	r3, r3, #24
 80031ea:	4946      	ldr	r1, [pc, #280]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80031f0:	4b45      	ldr	r3, [pc, #276]	@ (8003308 <HAL_RCC_OscConfig+0x280>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fe fd77 	bl	8001ce8 <HAL_InitTick>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d043      	beq.n	8003288 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e249      	b.n	8003698 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d023      	beq.n	8003254 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800320c:	4b3d      	ldr	r3, [pc, #244]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a3c      	ldr	r2, [pc, #240]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 8003212:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7fe fdb2 	bl	8001d80 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003220:	f7fe fdae 	bl	8001d80 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e232      	b.n	8003698 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003232:	4b34      	ldr	r3, [pc, #208]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323e:	4b31      	ldr	r3, [pc, #196]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	061b      	lsls	r3, r3, #24
 800324c:	492d      	ldr	r1, [pc, #180]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 800324e:	4313      	orrs	r3, r2
 8003250:	604b      	str	r3, [r1, #4]
 8003252:	e01a      	b.n	800328a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003254:	4b2b      	ldr	r3, [pc, #172]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a2a      	ldr	r2, [pc, #168]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 800325a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800325e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003260:	f7fe fd8e 	bl	8001d80 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003268:	f7fe fd8a 	bl	8001d80 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e20e      	b.n	8003698 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800327a:	4b22      	ldr	r3, [pc, #136]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x1e0>
 8003286:	e000      	b.n	800328a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003288:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d041      	beq.n	800331a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d01c      	beq.n	80032d8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800329e:	4b19      	ldr	r3, [pc, #100]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 80032a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032a4:	4a17      	ldr	r2, [pc, #92]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ae:	f7fe fd67 	bl	8001d80 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b6:	f7fe fd63 	bl	8001d80 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e1e7      	b.n	8003698 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 80032ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0ef      	beq.n	80032b6 <HAL_RCC_OscConfig+0x22e>
 80032d6:	e020      	b.n	800331a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 80032da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032de:	4a09      	ldr	r2, [pc, #36]	@ (8003304 <HAL_RCC_OscConfig+0x27c>)
 80032e0:	f023 0301 	bic.w	r3, r3, #1
 80032e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e8:	f7fe fd4a 	bl	8001d80 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032ee:	e00d      	b.n	800330c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032f0:	f7fe fd46 	bl	8001d80 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d906      	bls.n	800330c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e1ca      	b.n	8003698 <HAL_RCC_OscConfig+0x610>
 8003302:	bf00      	nop
 8003304:	40021000 	.word	0x40021000
 8003308:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800330c:	4b8c      	ldr	r3, [pc, #560]	@ (8003540 <HAL_RCC_OscConfig+0x4b8>)
 800330e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1ea      	bne.n	80032f0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 80a6 	beq.w	8003474 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003328:	2300      	movs	r3, #0
 800332a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800332c:	4b84      	ldr	r3, [pc, #528]	@ (8003540 <HAL_RCC_OscConfig+0x4b8>)
 800332e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003330:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_RCC_OscConfig+0x2b4>
 8003338:	2301      	movs	r3, #1
 800333a:	e000      	b.n	800333e <HAL_RCC_OscConfig+0x2b6>
 800333c:	2300      	movs	r3, #0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00d      	beq.n	800335e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003342:	4b7f      	ldr	r3, [pc, #508]	@ (8003540 <HAL_RCC_OscConfig+0x4b8>)
 8003344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003346:	4a7e      	ldr	r2, [pc, #504]	@ (8003540 <HAL_RCC_OscConfig+0x4b8>)
 8003348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800334c:	6593      	str	r3, [r2, #88]	@ 0x58
 800334e:	4b7c      	ldr	r3, [pc, #496]	@ (8003540 <HAL_RCC_OscConfig+0x4b8>)
 8003350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800335a:	2301      	movs	r3, #1
 800335c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800335e:	4b79      	ldr	r3, [pc, #484]	@ (8003544 <HAL_RCC_OscConfig+0x4bc>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003366:	2b00      	cmp	r3, #0
 8003368:	d118      	bne.n	800339c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800336a:	4b76      	ldr	r3, [pc, #472]	@ (8003544 <HAL_RCC_OscConfig+0x4bc>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a75      	ldr	r2, [pc, #468]	@ (8003544 <HAL_RCC_OscConfig+0x4bc>)
 8003370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003376:	f7fe fd03 	bl	8001d80 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800337e:	f7fe fcff 	bl	8001d80 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e183      	b.n	8003698 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003390:	4b6c      	ldr	r3, [pc, #432]	@ (8003544 <HAL_RCC_OscConfig+0x4bc>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f0      	beq.n	800337e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d108      	bne.n	80033b6 <HAL_RCC_OscConfig+0x32e>
 80033a4:	4b66      	ldr	r3, [pc, #408]	@ (8003540 <HAL_RCC_OscConfig+0x4b8>)
 80033a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033aa:	4a65      	ldr	r2, [pc, #404]	@ (8003540 <HAL_RCC_OscConfig+0x4b8>)
 80033ac:	f043 0301 	orr.w	r3, r3, #1
 80033b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033b4:	e024      	b.n	8003400 <HAL_RCC_OscConfig+0x378>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	2b05      	cmp	r3, #5
 80033bc:	d110      	bne.n	80033e0 <HAL_RCC_OscConfig+0x358>
 80033be:	4b60      	ldr	r3, [pc, #384]	@ (8003540 <HAL_RCC_OscConfig+0x4b8>)
 80033c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c4:	4a5e      	ldr	r2, [pc, #376]	@ (8003540 <HAL_RCC_OscConfig+0x4b8>)
 80033c6:	f043 0304 	orr.w	r3, r3, #4
 80033ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033ce:	4b5c      	ldr	r3, [pc, #368]	@ (8003540 <HAL_RCC_OscConfig+0x4b8>)
 80033d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d4:	4a5a      	ldr	r2, [pc, #360]	@ (8003540 <HAL_RCC_OscConfig+0x4b8>)
 80033d6:	f043 0301 	orr.w	r3, r3, #1
 80033da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033de:	e00f      	b.n	8003400 <HAL_RCC_OscConfig+0x378>
 80033e0:	4b57      	ldr	r3, [pc, #348]	@ (8003540 <HAL_RCC_OscConfig+0x4b8>)
 80033e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e6:	4a56      	ldr	r2, [pc, #344]	@ (8003540 <HAL_RCC_OscConfig+0x4b8>)
 80033e8:	f023 0301 	bic.w	r3, r3, #1
 80033ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033f0:	4b53      	ldr	r3, [pc, #332]	@ (8003540 <HAL_RCC_OscConfig+0x4b8>)
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f6:	4a52      	ldr	r2, [pc, #328]	@ (8003540 <HAL_RCC_OscConfig+0x4b8>)
 80033f8:	f023 0304 	bic.w	r3, r3, #4
 80033fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d016      	beq.n	8003436 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003408:	f7fe fcba 	bl	8001d80 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800340e:	e00a      	b.n	8003426 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003410:	f7fe fcb6 	bl	8001d80 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800341e:	4293      	cmp	r3, r2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e138      	b.n	8003698 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003426:	4b46      	ldr	r3, [pc, #280]	@ (8003540 <HAL_RCC_OscConfig+0x4b8>)
 8003428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0ed      	beq.n	8003410 <HAL_RCC_OscConfig+0x388>
 8003434:	e015      	b.n	8003462 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003436:	f7fe fca3 	bl	8001d80 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800343c:	e00a      	b.n	8003454 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800343e:	f7fe fc9f 	bl	8001d80 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	f241 3288 	movw	r2, #5000	@ 0x1388
 800344c:	4293      	cmp	r3, r2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e121      	b.n	8003698 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003454:	4b3a      	ldr	r3, [pc, #232]	@ (8003540 <HAL_RCC_OscConfig+0x4b8>)
 8003456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1ed      	bne.n	800343e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003462:	7ffb      	ldrb	r3, [r7, #31]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d105      	bne.n	8003474 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003468:	4b35      	ldr	r3, [pc, #212]	@ (8003540 <HAL_RCC_OscConfig+0x4b8>)
 800346a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800346c:	4a34      	ldr	r2, [pc, #208]	@ (8003540 <HAL_RCC_OscConfig+0x4b8>)
 800346e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003472:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b00      	cmp	r3, #0
 800347e:	d03c      	beq.n	80034fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d01c      	beq.n	80034c2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003488:	4b2d      	ldr	r3, [pc, #180]	@ (8003540 <HAL_RCC_OscConfig+0x4b8>)
 800348a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800348e:	4a2c      	ldr	r2, [pc, #176]	@ (8003540 <HAL_RCC_OscConfig+0x4b8>)
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003498:	f7fe fc72 	bl	8001d80 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034a0:	f7fe fc6e 	bl	8001d80 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e0f2      	b.n	8003698 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034b2:	4b23      	ldr	r3, [pc, #140]	@ (8003540 <HAL_RCC_OscConfig+0x4b8>)
 80034b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0ef      	beq.n	80034a0 <HAL_RCC_OscConfig+0x418>
 80034c0:	e01b      	b.n	80034fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034c2:	4b1f      	ldr	r3, [pc, #124]	@ (8003540 <HAL_RCC_OscConfig+0x4b8>)
 80034c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003540 <HAL_RCC_OscConfig+0x4b8>)
 80034ca:	f023 0301 	bic.w	r3, r3, #1
 80034ce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d2:	f7fe fc55 	bl	8001d80 <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034da:	f7fe fc51 	bl	8001d80 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e0d5      	b.n	8003698 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034ec:	4b14      	ldr	r3, [pc, #80]	@ (8003540 <HAL_RCC_OscConfig+0x4b8>)
 80034ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1ef      	bne.n	80034da <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 80c9 	beq.w	8003696 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003504:	4b0e      	ldr	r3, [pc, #56]	@ (8003540 <HAL_RCC_OscConfig+0x4b8>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 030c 	and.w	r3, r3, #12
 800350c:	2b0c      	cmp	r3, #12
 800350e:	f000 8083 	beq.w	8003618 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d15e      	bne.n	80035d8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351a:	4b09      	ldr	r3, [pc, #36]	@ (8003540 <HAL_RCC_OscConfig+0x4b8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a08      	ldr	r2, [pc, #32]	@ (8003540 <HAL_RCC_OscConfig+0x4b8>)
 8003520:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003526:	f7fe fc2b 	bl	8001d80 <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800352c:	e00c      	b.n	8003548 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352e:	f7fe fc27 	bl	8001d80 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d905      	bls.n	8003548 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e0ab      	b.n	8003698 <HAL_RCC_OscConfig+0x610>
 8003540:	40021000 	.word	0x40021000
 8003544:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003548:	4b55      	ldr	r3, [pc, #340]	@ (80036a0 <HAL_RCC_OscConfig+0x618>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1ec      	bne.n	800352e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003554:	4b52      	ldr	r3, [pc, #328]	@ (80036a0 <HAL_RCC_OscConfig+0x618>)
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	4b52      	ldr	r3, [pc, #328]	@ (80036a4 <HAL_RCC_OscConfig+0x61c>)
 800355a:	4013      	ands	r3, r2
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6a11      	ldr	r1, [r2, #32]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003564:	3a01      	subs	r2, #1
 8003566:	0112      	lsls	r2, r2, #4
 8003568:	4311      	orrs	r1, r2
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800356e:	0212      	lsls	r2, r2, #8
 8003570:	4311      	orrs	r1, r2
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003576:	0852      	lsrs	r2, r2, #1
 8003578:	3a01      	subs	r2, #1
 800357a:	0552      	lsls	r2, r2, #21
 800357c:	4311      	orrs	r1, r2
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003582:	0852      	lsrs	r2, r2, #1
 8003584:	3a01      	subs	r2, #1
 8003586:	0652      	lsls	r2, r2, #25
 8003588:	4311      	orrs	r1, r2
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800358e:	06d2      	lsls	r2, r2, #27
 8003590:	430a      	orrs	r2, r1
 8003592:	4943      	ldr	r1, [pc, #268]	@ (80036a0 <HAL_RCC_OscConfig+0x618>)
 8003594:	4313      	orrs	r3, r2
 8003596:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003598:	4b41      	ldr	r3, [pc, #260]	@ (80036a0 <HAL_RCC_OscConfig+0x618>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a40      	ldr	r2, [pc, #256]	@ (80036a0 <HAL_RCC_OscConfig+0x618>)
 800359e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035a4:	4b3e      	ldr	r3, [pc, #248]	@ (80036a0 <HAL_RCC_OscConfig+0x618>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	4a3d      	ldr	r2, [pc, #244]	@ (80036a0 <HAL_RCC_OscConfig+0x618>)
 80035aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b0:	f7fe fbe6 	bl	8001d80 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b8:	f7fe fbe2 	bl	8001d80 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e066      	b.n	8003698 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ca:	4b35      	ldr	r3, [pc, #212]	@ (80036a0 <HAL_RCC_OscConfig+0x618>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f0      	beq.n	80035b8 <HAL_RCC_OscConfig+0x530>
 80035d6:	e05e      	b.n	8003696 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d8:	4b31      	ldr	r3, [pc, #196]	@ (80036a0 <HAL_RCC_OscConfig+0x618>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a30      	ldr	r2, [pc, #192]	@ (80036a0 <HAL_RCC_OscConfig+0x618>)
 80035de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e4:	f7fe fbcc 	bl	8001d80 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ec:	f7fe fbc8 	bl	8001d80 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e04c      	b.n	8003698 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035fe:	4b28      	ldr	r3, [pc, #160]	@ (80036a0 <HAL_RCC_OscConfig+0x618>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800360a:	4b25      	ldr	r3, [pc, #148]	@ (80036a0 <HAL_RCC_OscConfig+0x618>)
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	4924      	ldr	r1, [pc, #144]	@ (80036a0 <HAL_RCC_OscConfig+0x618>)
 8003610:	4b25      	ldr	r3, [pc, #148]	@ (80036a8 <HAL_RCC_OscConfig+0x620>)
 8003612:	4013      	ands	r3, r2
 8003614:	60cb      	str	r3, [r1, #12]
 8003616:	e03e      	b.n	8003696 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e039      	b.n	8003698 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003624:	4b1e      	ldr	r3, [pc, #120]	@ (80036a0 <HAL_RCC_OscConfig+0x618>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f003 0203 	and.w	r2, r3, #3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	429a      	cmp	r2, r3
 8003636:	d12c      	bne.n	8003692 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003642:	3b01      	subs	r3, #1
 8003644:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003646:	429a      	cmp	r2, r3
 8003648:	d123      	bne.n	8003692 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003654:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003656:	429a      	cmp	r2, r3
 8003658:	d11b      	bne.n	8003692 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003664:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003666:	429a      	cmp	r2, r3
 8003668:	d113      	bne.n	8003692 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003674:	085b      	lsrs	r3, r3, #1
 8003676:	3b01      	subs	r3, #1
 8003678:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800367a:	429a      	cmp	r2, r3
 800367c:	d109      	bne.n	8003692 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003688:	085b      	lsrs	r3, r3, #1
 800368a:	3b01      	subs	r3, #1
 800368c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800368e:	429a      	cmp	r2, r3
 8003690:	d001      	beq.n	8003696 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e000      	b.n	8003698 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3720      	adds	r7, #32
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40021000 	.word	0x40021000
 80036a4:	019f800c 	.word	0x019f800c
 80036a8:	feeefffc 	.word	0xfeeefffc

080036ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80036b6:	2300      	movs	r3, #0
 80036b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e11e      	b.n	8003902 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036c4:	4b91      	ldr	r3, [pc, #580]	@ (800390c <HAL_RCC_ClockConfig+0x260>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 030f 	and.w	r3, r3, #15
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d910      	bls.n	80036f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d2:	4b8e      	ldr	r3, [pc, #568]	@ (800390c <HAL_RCC_ClockConfig+0x260>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f023 020f 	bic.w	r2, r3, #15
 80036da:	498c      	ldr	r1, [pc, #560]	@ (800390c <HAL_RCC_ClockConfig+0x260>)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	4313      	orrs	r3, r2
 80036e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e2:	4b8a      	ldr	r3, [pc, #552]	@ (800390c <HAL_RCC_ClockConfig+0x260>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d001      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e106      	b.n	8003902 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d073      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b03      	cmp	r3, #3
 8003706:	d129      	bne.n	800375c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003708:	4b81      	ldr	r3, [pc, #516]	@ (8003910 <HAL_RCC_ClockConfig+0x264>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e0f4      	b.n	8003902 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003718:	f000 f99e 	bl	8003a58 <RCC_GetSysClockFreqFromPLLSource>
 800371c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	4a7c      	ldr	r2, [pc, #496]	@ (8003914 <HAL_RCC_ClockConfig+0x268>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d93f      	bls.n	80037a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003726:	4b7a      	ldr	r3, [pc, #488]	@ (8003910 <HAL_RCC_ClockConfig+0x264>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d009      	beq.n	8003746 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800373a:	2b00      	cmp	r3, #0
 800373c:	d033      	beq.n	80037a6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003742:	2b00      	cmp	r3, #0
 8003744:	d12f      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003746:	4b72      	ldr	r3, [pc, #456]	@ (8003910 <HAL_RCC_ClockConfig+0x264>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800374e:	4a70      	ldr	r2, [pc, #448]	@ (8003910 <HAL_RCC_ClockConfig+0x264>)
 8003750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003754:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003756:	2380      	movs	r3, #128	@ 0x80
 8003758:	617b      	str	r3, [r7, #20]
 800375a:	e024      	b.n	80037a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	2b02      	cmp	r3, #2
 8003762:	d107      	bne.n	8003774 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003764:	4b6a      	ldr	r3, [pc, #424]	@ (8003910 <HAL_RCC_ClockConfig+0x264>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d109      	bne.n	8003784 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e0c6      	b.n	8003902 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003774:	4b66      	ldr	r3, [pc, #408]	@ (8003910 <HAL_RCC_ClockConfig+0x264>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e0be      	b.n	8003902 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003784:	f000 f8ce 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 8003788:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	4a61      	ldr	r2, [pc, #388]	@ (8003914 <HAL_RCC_ClockConfig+0x268>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d909      	bls.n	80037a6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003792:	4b5f      	ldr	r3, [pc, #380]	@ (8003910 <HAL_RCC_ClockConfig+0x264>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800379a:	4a5d      	ldr	r2, [pc, #372]	@ (8003910 <HAL_RCC_ClockConfig+0x264>)
 800379c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80037a2:	2380      	movs	r3, #128	@ 0x80
 80037a4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037a6:	4b5a      	ldr	r3, [pc, #360]	@ (8003910 <HAL_RCC_ClockConfig+0x264>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f023 0203 	bic.w	r2, r3, #3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	4957      	ldr	r1, [pc, #348]	@ (8003910 <HAL_RCC_ClockConfig+0x264>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b8:	f7fe fae2 	bl	8001d80 <HAL_GetTick>
 80037bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037be:	e00a      	b.n	80037d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c0:	f7fe fade 	bl	8001d80 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e095      	b.n	8003902 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d6:	4b4e      	ldr	r3, [pc, #312]	@ (8003910 <HAL_RCC_ClockConfig+0x264>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 020c 	and.w	r2, r3, #12
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d1eb      	bne.n	80037c0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d023      	beq.n	800383c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003800:	4b43      	ldr	r3, [pc, #268]	@ (8003910 <HAL_RCC_ClockConfig+0x264>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	4a42      	ldr	r2, [pc, #264]	@ (8003910 <HAL_RCC_ClockConfig+0x264>)
 8003806:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800380a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b00      	cmp	r3, #0
 8003816:	d007      	beq.n	8003828 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003818:	4b3d      	ldr	r3, [pc, #244]	@ (8003910 <HAL_RCC_ClockConfig+0x264>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003820:	4a3b      	ldr	r2, [pc, #236]	@ (8003910 <HAL_RCC_ClockConfig+0x264>)
 8003822:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003826:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003828:	4b39      	ldr	r3, [pc, #228]	@ (8003910 <HAL_RCC_ClockConfig+0x264>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	4936      	ldr	r1, [pc, #216]	@ (8003910 <HAL_RCC_ClockConfig+0x264>)
 8003836:	4313      	orrs	r3, r2
 8003838:	608b      	str	r3, [r1, #8]
 800383a:	e008      	b.n	800384e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2b80      	cmp	r3, #128	@ 0x80
 8003840:	d105      	bne.n	800384e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003842:	4b33      	ldr	r3, [pc, #204]	@ (8003910 <HAL_RCC_ClockConfig+0x264>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	4a32      	ldr	r2, [pc, #200]	@ (8003910 <HAL_RCC_ClockConfig+0x264>)
 8003848:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800384c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800384e:	4b2f      	ldr	r3, [pc, #188]	@ (800390c <HAL_RCC_ClockConfig+0x260>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d21d      	bcs.n	8003898 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385c:	4b2b      	ldr	r3, [pc, #172]	@ (800390c <HAL_RCC_ClockConfig+0x260>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f023 020f 	bic.w	r2, r3, #15
 8003864:	4929      	ldr	r1, [pc, #164]	@ (800390c <HAL_RCC_ClockConfig+0x260>)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	4313      	orrs	r3, r2
 800386a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800386c:	f7fe fa88 	bl	8001d80 <HAL_GetTick>
 8003870:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003872:	e00a      	b.n	800388a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003874:	f7fe fa84 	bl	8001d80 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e03b      	b.n	8003902 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800388a:	4b20      	ldr	r3, [pc, #128]	@ (800390c <HAL_RCC_ClockConfig+0x260>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 030f 	and.w	r3, r3, #15
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d1ed      	bne.n	8003874 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d008      	beq.n	80038b6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003910 <HAL_RCC_ClockConfig+0x264>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	4917      	ldr	r1, [pc, #92]	@ (8003910 <HAL_RCC_ClockConfig+0x264>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d009      	beq.n	80038d6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038c2:	4b13      	ldr	r3, [pc, #76]	@ (8003910 <HAL_RCC_ClockConfig+0x264>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	490f      	ldr	r1, [pc, #60]	@ (8003910 <HAL_RCC_ClockConfig+0x264>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038d6:	f000 f825 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 80038da:	4602      	mov	r2, r0
 80038dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003910 <HAL_RCC_ClockConfig+0x264>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	091b      	lsrs	r3, r3, #4
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	490c      	ldr	r1, [pc, #48]	@ (8003918 <HAL_RCC_ClockConfig+0x26c>)
 80038e8:	5ccb      	ldrb	r3, [r1, r3]
 80038ea:	f003 031f 	and.w	r3, r3, #31
 80038ee:	fa22 f303 	lsr.w	r3, r2, r3
 80038f2:	4a0a      	ldr	r2, [pc, #40]	@ (800391c <HAL_RCC_ClockConfig+0x270>)
 80038f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80038f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003920 <HAL_RCC_ClockConfig+0x274>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fe f9f4 	bl	8001ce8 <HAL_InitTick>
 8003900:	4603      	mov	r3, r0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	40022000 	.word	0x40022000
 8003910:	40021000 	.word	0x40021000
 8003914:	04c4b400 	.word	0x04c4b400
 8003918:	080093dc 	.word	0x080093dc
 800391c:	20000000 	.word	0x20000000
 8003920:	20000008 	.word	0x20000008

08003924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800392a:	4b2c      	ldr	r3, [pc, #176]	@ (80039dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 030c 	and.w	r3, r3, #12
 8003932:	2b04      	cmp	r3, #4
 8003934:	d102      	bne.n	800393c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003936:	4b2a      	ldr	r3, [pc, #168]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003938:	613b      	str	r3, [r7, #16]
 800393a:	e047      	b.n	80039cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800393c:	4b27      	ldr	r3, [pc, #156]	@ (80039dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 030c 	and.w	r3, r3, #12
 8003944:	2b08      	cmp	r3, #8
 8003946:	d102      	bne.n	800394e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003948:	4b26      	ldr	r3, [pc, #152]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800394a:	613b      	str	r3, [r7, #16]
 800394c:	e03e      	b.n	80039cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800394e:	4b23      	ldr	r3, [pc, #140]	@ (80039dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 030c 	and.w	r3, r3, #12
 8003956:	2b0c      	cmp	r3, #12
 8003958:	d136      	bne.n	80039c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800395a:	4b20      	ldr	r3, [pc, #128]	@ (80039dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003964:	4b1d      	ldr	r3, [pc, #116]	@ (80039dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	091b      	lsrs	r3, r3, #4
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	3301      	adds	r3, #1
 8003970:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2b03      	cmp	r3, #3
 8003976:	d10c      	bne.n	8003992 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003978:	4a1a      	ldr	r2, [pc, #104]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003980:	4a16      	ldr	r2, [pc, #88]	@ (80039dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003982:	68d2      	ldr	r2, [r2, #12]
 8003984:	0a12      	lsrs	r2, r2, #8
 8003986:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800398a:	fb02 f303 	mul.w	r3, r2, r3
 800398e:	617b      	str	r3, [r7, #20]
      break;
 8003990:	e00c      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003992:	4a13      	ldr	r2, [pc, #76]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	fbb2 f3f3 	udiv	r3, r2, r3
 800399a:	4a10      	ldr	r2, [pc, #64]	@ (80039dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800399c:	68d2      	ldr	r2, [r2, #12]
 800399e:	0a12      	lsrs	r2, r2, #8
 80039a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039a4:	fb02 f303 	mul.w	r3, r2, r3
 80039a8:	617b      	str	r3, [r7, #20]
      break;
 80039aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039ac:	4b0b      	ldr	r3, [pc, #44]	@ (80039dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	0e5b      	lsrs	r3, r3, #25
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	3301      	adds	r3, #1
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c4:	613b      	str	r3, [r7, #16]
 80039c6:	e001      	b.n	80039cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80039cc:	693b      	ldr	r3, [r7, #16]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	371c      	adds	r7, #28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	40021000 	.word	0x40021000
 80039e0:	00f42400 	.word	0x00f42400
 80039e4:	007a1200 	.word	0x007a1200

080039e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039ec:	4b03      	ldr	r3, [pc, #12]	@ (80039fc <HAL_RCC_GetHCLKFreq+0x14>)
 80039ee:	681b      	ldr	r3, [r3, #0]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	20000000 	.word	0x20000000

08003a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a04:	f7ff fff0 	bl	80039e8 <HAL_RCC_GetHCLKFreq>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	4b06      	ldr	r3, [pc, #24]	@ (8003a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	0a1b      	lsrs	r3, r3, #8
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	4904      	ldr	r1, [pc, #16]	@ (8003a28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a16:	5ccb      	ldrb	r3, [r1, r3]
 8003a18:	f003 031f 	and.w	r3, r3, #31
 8003a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40021000 	.word	0x40021000
 8003a28:	080093ec 	.word	0x080093ec

08003a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a30:	f7ff ffda 	bl	80039e8 <HAL_RCC_GetHCLKFreq>
 8003a34:	4602      	mov	r2, r0
 8003a36:	4b06      	ldr	r3, [pc, #24]	@ (8003a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	0adb      	lsrs	r3, r3, #11
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	4904      	ldr	r1, [pc, #16]	@ (8003a54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a42:	5ccb      	ldrb	r3, [r1, r3]
 8003a44:	f003 031f 	and.w	r3, r3, #31
 8003a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40021000 	.word	0x40021000
 8003a54:	080093ec 	.word	0x080093ec

08003a58 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a68:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	091b      	lsrs	r3, r3, #4
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	3301      	adds	r3, #1
 8003a74:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	2b03      	cmp	r3, #3
 8003a7a:	d10c      	bne.n	8003a96 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a7c:	4a17      	ldr	r2, [pc, #92]	@ (8003adc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a84:	4a14      	ldr	r2, [pc, #80]	@ (8003ad8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a86:	68d2      	ldr	r2, [r2, #12]
 8003a88:	0a12      	lsrs	r2, r2, #8
 8003a8a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a8e:	fb02 f303 	mul.w	r3, r2, r3
 8003a92:	617b      	str	r3, [r7, #20]
    break;
 8003a94:	e00c      	b.n	8003ab0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a96:	4a12      	ldr	r2, [pc, #72]	@ (8003ae0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9e:	4a0e      	ldr	r2, [pc, #56]	@ (8003ad8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003aa0:	68d2      	ldr	r2, [r2, #12]
 8003aa2:	0a12      	lsrs	r2, r2, #8
 8003aa4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003aa8:	fb02 f303 	mul.w	r3, r2, r3
 8003aac:	617b      	str	r3, [r7, #20]
    break;
 8003aae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ab0:	4b09      	ldr	r3, [pc, #36]	@ (8003ad8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	0e5b      	lsrs	r3, r3, #25
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	3301      	adds	r3, #1
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003aca:	687b      	ldr	r3, [r7, #4]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	371c      	adds	r7, #28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	007a1200 	.word	0x007a1200
 8003ae0:	00f42400 	.word	0x00f42400

08003ae4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003aec:	2300      	movs	r3, #0
 8003aee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003af0:	2300      	movs	r3, #0
 8003af2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 8098 	beq.w	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b02:	2300      	movs	r3, #0
 8003b04:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b06:	4b43      	ldr	r3, [pc, #268]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10d      	bne.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b12:	4b40      	ldr	r3, [pc, #256]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b16:	4a3f      	ldr	r2, [pc, #252]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b1e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b26:	60bb      	str	r3, [r7, #8]
 8003b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b2e:	4b3a      	ldr	r3, [pc, #232]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a39      	ldr	r2, [pc, #228]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b3a:	f7fe f921 	bl	8001d80 <HAL_GetTick>
 8003b3e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b40:	e009      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b42:	f7fe f91d 	bl	8001d80 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d902      	bls.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	74fb      	strb	r3, [r7, #19]
        break;
 8003b54:	e005      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b56:	4b30      	ldr	r3, [pc, #192]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0ef      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003b62:	7cfb      	ldrb	r3, [r7, #19]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d159      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b68:	4b2a      	ldr	r3, [pc, #168]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b72:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d01e      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d019      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b84:	4b23      	ldr	r3, [pc, #140]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b90:	4b20      	ldr	r3, [pc, #128]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b96:	4a1f      	ldr	r2, [pc, #124]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ba6:	4a1b      	ldr	r2, [pc, #108]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ba8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bb0:	4a18      	ldr	r2, [pc, #96]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d016      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc2:	f7fe f8dd 	bl	8001d80 <HAL_GetTick>
 8003bc6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bc8:	e00b      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bca:	f7fe f8d9 	bl	8001d80 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d902      	bls.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	74fb      	strb	r3, [r7, #19]
            break;
 8003be0:	e006      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003be2:	4b0c      	ldr	r3, [pc, #48]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0ec      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003bf0:	7cfb      	ldrb	r3, [r7, #19]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10b      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bf6:	4b07      	ldr	r3, [pc, #28]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bfc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c04:	4903      	ldr	r1, [pc, #12]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003c0c:	e008      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c0e:	7cfb      	ldrb	r3, [r7, #19]
 8003c10:	74bb      	strb	r3, [r7, #18]
 8003c12:	e005      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c1c:	7cfb      	ldrb	r3, [r7, #19]
 8003c1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c20:	7c7b      	ldrb	r3, [r7, #17]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d105      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c26:	4ba6      	ldr	r3, [pc, #664]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c2a:	4aa5      	ldr	r2, [pc, #660]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c30:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c3e:	4ba0      	ldr	r3, [pc, #640]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c44:	f023 0203 	bic.w	r2, r3, #3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	499c      	ldr	r1, [pc, #624]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c60:	4b97      	ldr	r3, [pc, #604]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c66:	f023 020c 	bic.w	r2, r3, #12
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	4994      	ldr	r1, [pc, #592]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c82:	4b8f      	ldr	r3, [pc, #572]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c88:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	498b      	ldr	r1, [pc, #556]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00a      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ca4:	4b86      	ldr	r3, [pc, #536]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003caa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	4983      	ldr	r1, [pc, #524]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cc6:	4b7e      	ldr	r3, [pc, #504]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ccc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	497a      	ldr	r1, [pc, #488]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ce8:	4b75      	ldr	r3, [pc, #468]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	4972      	ldr	r1, [pc, #456]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d0a:	4b6d      	ldr	r3, [pc, #436]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d10:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	4969      	ldr	r1, [pc, #420]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d2c:	4b64      	ldr	r3, [pc, #400]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d32:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	4961      	ldr	r1, [pc, #388]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d4e:	4b5c      	ldr	r3, [pc, #368]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d54:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5c:	4958      	ldr	r1, [pc, #352]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d015      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d70:	4b53      	ldr	r3, [pc, #332]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d7e:	4950      	ldr	r1, [pc, #320]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d8e:	d105      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d90:	4b4b      	ldr	r3, [pc, #300]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	4a4a      	ldr	r2, [pc, #296]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d9a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d015      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003da8:	4b45      	ldr	r3, [pc, #276]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db6:	4942      	ldr	r1, [pc, #264]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dc6:	d105      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dc8:	4b3d      	ldr	r3, [pc, #244]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	4a3c      	ldr	r2, [pc, #240]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dd2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d015      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003de0:	4b37      	ldr	r3, [pc, #220]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dee:	4934      	ldr	r1, [pc, #208]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dfe:	d105      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e00:	4b2f      	ldr	r3, [pc, #188]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	4a2e      	ldr	r2, [pc, #184]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e0a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d015      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e18:	4b29      	ldr	r3, [pc, #164]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e1e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e26:	4926      	ldr	r1, [pc, #152]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e36:	d105      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e38:	4b21      	ldr	r3, [pc, #132]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	4a20      	ldr	r2, [pc, #128]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e42:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d015      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e50:	4b1b      	ldr	r3, [pc, #108]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e5e:	4918      	ldr	r1, [pc, #96]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e6e:	d105      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e70:	4b13      	ldr	r3, [pc, #76]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	4a12      	ldr	r2, [pc, #72]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d015      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e88:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e8e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e96:	490a      	ldr	r1, [pc, #40]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ea6:	d105      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ea8:	4b05      	ldr	r3, [pc, #20]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4a04      	ldr	r2, [pc, #16]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eb2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003eb4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3718      	adds	r7, #24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40021000 	.word	0x40021000

08003ec4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e042      	b.n	8003f5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d106      	bne.n	8003eee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7fd fd09 	bl	8001900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2224      	movs	r2, #36	@ 0x24
 8003ef2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0201 	bic.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 fb82 	bl	8004618 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f8b3 	bl	8004080 <UART_SetConfig>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d101      	bne.n	8003f24 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e01b      	b.n	8003f5c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0201 	orr.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fc01 	bl	800475c <UART_CheckIdleState>
 8003f5a:	4603      	mov	r3, r0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b08a      	sub	sp, #40	@ 0x28
 8003f68:	af02      	add	r7, sp, #8
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	603b      	str	r3, [r7, #0]
 8003f70:	4613      	mov	r3, r2
 8003f72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f7a:	2b20      	cmp	r3, #32
 8003f7c:	d17b      	bne.n	8004076 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <HAL_UART_Transmit+0x26>
 8003f84:	88fb      	ldrh	r3, [r7, #6]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e074      	b.n	8004078 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2221      	movs	r2, #33	@ 0x21
 8003f9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f9e:	f7fd feef 	bl	8001d80 <HAL_GetTick>
 8003fa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	88fa      	ldrh	r2, [r7, #6]
 8003fa8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	88fa      	ldrh	r2, [r7, #6]
 8003fb0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fbc:	d108      	bne.n	8003fd0 <HAL_UART_Transmit+0x6c>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d104      	bne.n	8003fd0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	61bb      	str	r3, [r7, #24]
 8003fce:	e003      	b.n	8003fd8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fd8:	e030      	b.n	800403c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2180      	movs	r1, #128	@ 0x80
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 fc63 	bl	80048b0 <UART_WaitOnFlagUntilTimeout>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d005      	beq.n	8003ffc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e03d      	b.n	8004078 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10b      	bne.n	800401a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	881b      	ldrh	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004010:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	3302      	adds	r3, #2
 8004016:	61bb      	str	r3, [r7, #24]
 8004018:	e007      	b.n	800402a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	781a      	ldrb	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	3301      	adds	r3, #1
 8004028:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004030:	b29b      	uxth	r3, r3
 8004032:	3b01      	subs	r3, #1
 8004034:	b29a      	uxth	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1c8      	bne.n	8003fda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	2200      	movs	r2, #0
 8004050:	2140      	movs	r1, #64	@ 0x40
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 fc2c 	bl	80048b0 <UART_WaitOnFlagUntilTimeout>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d005      	beq.n	800406a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2220      	movs	r2, #32
 8004062:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e006      	b.n	8004078 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2220      	movs	r2, #32
 800406e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	e000      	b.n	8004078 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004076:	2302      	movs	r3, #2
  }
}
 8004078:	4618      	mov	r0, r3
 800407a:	3720      	adds	r7, #32
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004084:	b08c      	sub	sp, #48	@ 0x30
 8004086:	af00      	add	r7, sp, #0
 8004088:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	431a      	orrs	r2, r3
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	431a      	orrs	r2, r3
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	4bab      	ldr	r3, [pc, #684]	@ (800435c <UART_SetConfig+0x2dc>)
 80040b0:	4013      	ands	r3, r2
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	6812      	ldr	r2, [r2, #0]
 80040b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040b8:	430b      	orrs	r3, r1
 80040ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4aa0      	ldr	r2, [pc, #640]	@ (8004360 <UART_SetConfig+0x2e0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d004      	beq.n	80040ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040e8:	4313      	orrs	r3, r2
 80040ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80040f6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	6812      	ldr	r2, [r2, #0]
 80040fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004100:	430b      	orrs	r3, r1
 8004102:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410a:	f023 010f 	bic.w	r1, r3, #15
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a91      	ldr	r2, [pc, #580]	@ (8004364 <UART_SetConfig+0x2e4>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d125      	bne.n	8004170 <UART_SetConfig+0xf0>
 8004124:	4b90      	ldr	r3, [pc, #576]	@ (8004368 <UART_SetConfig+0x2e8>)
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	2b03      	cmp	r3, #3
 8004130:	d81a      	bhi.n	8004168 <UART_SetConfig+0xe8>
 8004132:	a201      	add	r2, pc, #4	@ (adr r2, 8004138 <UART_SetConfig+0xb8>)
 8004134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004138:	08004149 	.word	0x08004149
 800413c:	08004159 	.word	0x08004159
 8004140:	08004151 	.word	0x08004151
 8004144:	08004161 	.word	0x08004161
 8004148:	2301      	movs	r3, #1
 800414a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800414e:	e0d6      	b.n	80042fe <UART_SetConfig+0x27e>
 8004150:	2302      	movs	r3, #2
 8004152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004156:	e0d2      	b.n	80042fe <UART_SetConfig+0x27e>
 8004158:	2304      	movs	r3, #4
 800415a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800415e:	e0ce      	b.n	80042fe <UART_SetConfig+0x27e>
 8004160:	2308      	movs	r3, #8
 8004162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004166:	e0ca      	b.n	80042fe <UART_SetConfig+0x27e>
 8004168:	2310      	movs	r3, #16
 800416a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800416e:	e0c6      	b.n	80042fe <UART_SetConfig+0x27e>
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a7d      	ldr	r2, [pc, #500]	@ (800436c <UART_SetConfig+0x2ec>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d138      	bne.n	80041ec <UART_SetConfig+0x16c>
 800417a:	4b7b      	ldr	r3, [pc, #492]	@ (8004368 <UART_SetConfig+0x2e8>)
 800417c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004180:	f003 030c 	and.w	r3, r3, #12
 8004184:	2b0c      	cmp	r3, #12
 8004186:	d82d      	bhi.n	80041e4 <UART_SetConfig+0x164>
 8004188:	a201      	add	r2, pc, #4	@ (adr r2, 8004190 <UART_SetConfig+0x110>)
 800418a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418e:	bf00      	nop
 8004190:	080041c5 	.word	0x080041c5
 8004194:	080041e5 	.word	0x080041e5
 8004198:	080041e5 	.word	0x080041e5
 800419c:	080041e5 	.word	0x080041e5
 80041a0:	080041d5 	.word	0x080041d5
 80041a4:	080041e5 	.word	0x080041e5
 80041a8:	080041e5 	.word	0x080041e5
 80041ac:	080041e5 	.word	0x080041e5
 80041b0:	080041cd 	.word	0x080041cd
 80041b4:	080041e5 	.word	0x080041e5
 80041b8:	080041e5 	.word	0x080041e5
 80041bc:	080041e5 	.word	0x080041e5
 80041c0:	080041dd 	.word	0x080041dd
 80041c4:	2300      	movs	r3, #0
 80041c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041ca:	e098      	b.n	80042fe <UART_SetConfig+0x27e>
 80041cc:	2302      	movs	r3, #2
 80041ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041d2:	e094      	b.n	80042fe <UART_SetConfig+0x27e>
 80041d4:	2304      	movs	r3, #4
 80041d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041da:	e090      	b.n	80042fe <UART_SetConfig+0x27e>
 80041dc:	2308      	movs	r3, #8
 80041de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041e2:	e08c      	b.n	80042fe <UART_SetConfig+0x27e>
 80041e4:	2310      	movs	r3, #16
 80041e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041ea:	e088      	b.n	80042fe <UART_SetConfig+0x27e>
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a5f      	ldr	r2, [pc, #380]	@ (8004370 <UART_SetConfig+0x2f0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d125      	bne.n	8004242 <UART_SetConfig+0x1c2>
 80041f6:	4b5c      	ldr	r3, [pc, #368]	@ (8004368 <UART_SetConfig+0x2e8>)
 80041f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004200:	2b30      	cmp	r3, #48	@ 0x30
 8004202:	d016      	beq.n	8004232 <UART_SetConfig+0x1b2>
 8004204:	2b30      	cmp	r3, #48	@ 0x30
 8004206:	d818      	bhi.n	800423a <UART_SetConfig+0x1ba>
 8004208:	2b20      	cmp	r3, #32
 800420a:	d00a      	beq.n	8004222 <UART_SetConfig+0x1a2>
 800420c:	2b20      	cmp	r3, #32
 800420e:	d814      	bhi.n	800423a <UART_SetConfig+0x1ba>
 8004210:	2b00      	cmp	r3, #0
 8004212:	d002      	beq.n	800421a <UART_SetConfig+0x19a>
 8004214:	2b10      	cmp	r3, #16
 8004216:	d008      	beq.n	800422a <UART_SetConfig+0x1aa>
 8004218:	e00f      	b.n	800423a <UART_SetConfig+0x1ba>
 800421a:	2300      	movs	r3, #0
 800421c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004220:	e06d      	b.n	80042fe <UART_SetConfig+0x27e>
 8004222:	2302      	movs	r3, #2
 8004224:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004228:	e069      	b.n	80042fe <UART_SetConfig+0x27e>
 800422a:	2304      	movs	r3, #4
 800422c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004230:	e065      	b.n	80042fe <UART_SetConfig+0x27e>
 8004232:	2308      	movs	r3, #8
 8004234:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004238:	e061      	b.n	80042fe <UART_SetConfig+0x27e>
 800423a:	2310      	movs	r3, #16
 800423c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004240:	e05d      	b.n	80042fe <UART_SetConfig+0x27e>
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a4b      	ldr	r2, [pc, #300]	@ (8004374 <UART_SetConfig+0x2f4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d125      	bne.n	8004298 <UART_SetConfig+0x218>
 800424c:	4b46      	ldr	r3, [pc, #280]	@ (8004368 <UART_SetConfig+0x2e8>)
 800424e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004252:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004256:	2bc0      	cmp	r3, #192	@ 0xc0
 8004258:	d016      	beq.n	8004288 <UART_SetConfig+0x208>
 800425a:	2bc0      	cmp	r3, #192	@ 0xc0
 800425c:	d818      	bhi.n	8004290 <UART_SetConfig+0x210>
 800425e:	2b80      	cmp	r3, #128	@ 0x80
 8004260:	d00a      	beq.n	8004278 <UART_SetConfig+0x1f8>
 8004262:	2b80      	cmp	r3, #128	@ 0x80
 8004264:	d814      	bhi.n	8004290 <UART_SetConfig+0x210>
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <UART_SetConfig+0x1f0>
 800426a:	2b40      	cmp	r3, #64	@ 0x40
 800426c:	d008      	beq.n	8004280 <UART_SetConfig+0x200>
 800426e:	e00f      	b.n	8004290 <UART_SetConfig+0x210>
 8004270:	2300      	movs	r3, #0
 8004272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004276:	e042      	b.n	80042fe <UART_SetConfig+0x27e>
 8004278:	2302      	movs	r3, #2
 800427a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800427e:	e03e      	b.n	80042fe <UART_SetConfig+0x27e>
 8004280:	2304      	movs	r3, #4
 8004282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004286:	e03a      	b.n	80042fe <UART_SetConfig+0x27e>
 8004288:	2308      	movs	r3, #8
 800428a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800428e:	e036      	b.n	80042fe <UART_SetConfig+0x27e>
 8004290:	2310      	movs	r3, #16
 8004292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004296:	e032      	b.n	80042fe <UART_SetConfig+0x27e>
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a30      	ldr	r2, [pc, #192]	@ (8004360 <UART_SetConfig+0x2e0>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d12a      	bne.n	80042f8 <UART_SetConfig+0x278>
 80042a2:	4b31      	ldr	r3, [pc, #196]	@ (8004368 <UART_SetConfig+0x2e8>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80042ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042b0:	d01a      	beq.n	80042e8 <UART_SetConfig+0x268>
 80042b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042b6:	d81b      	bhi.n	80042f0 <UART_SetConfig+0x270>
 80042b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042bc:	d00c      	beq.n	80042d8 <UART_SetConfig+0x258>
 80042be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042c2:	d815      	bhi.n	80042f0 <UART_SetConfig+0x270>
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <UART_SetConfig+0x250>
 80042c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042cc:	d008      	beq.n	80042e0 <UART_SetConfig+0x260>
 80042ce:	e00f      	b.n	80042f0 <UART_SetConfig+0x270>
 80042d0:	2300      	movs	r3, #0
 80042d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042d6:	e012      	b.n	80042fe <UART_SetConfig+0x27e>
 80042d8:	2302      	movs	r3, #2
 80042da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042de:	e00e      	b.n	80042fe <UART_SetConfig+0x27e>
 80042e0:	2304      	movs	r3, #4
 80042e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042e6:	e00a      	b.n	80042fe <UART_SetConfig+0x27e>
 80042e8:	2308      	movs	r3, #8
 80042ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042ee:	e006      	b.n	80042fe <UART_SetConfig+0x27e>
 80042f0:	2310      	movs	r3, #16
 80042f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042f6:	e002      	b.n	80042fe <UART_SetConfig+0x27e>
 80042f8:	2310      	movs	r3, #16
 80042fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a17      	ldr	r2, [pc, #92]	@ (8004360 <UART_SetConfig+0x2e0>)
 8004304:	4293      	cmp	r3, r2
 8004306:	f040 80a8 	bne.w	800445a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800430a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800430e:	2b08      	cmp	r3, #8
 8004310:	d834      	bhi.n	800437c <UART_SetConfig+0x2fc>
 8004312:	a201      	add	r2, pc, #4	@ (adr r2, 8004318 <UART_SetConfig+0x298>)
 8004314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004318:	0800433d 	.word	0x0800433d
 800431c:	0800437d 	.word	0x0800437d
 8004320:	08004345 	.word	0x08004345
 8004324:	0800437d 	.word	0x0800437d
 8004328:	0800434b 	.word	0x0800434b
 800432c:	0800437d 	.word	0x0800437d
 8004330:	0800437d 	.word	0x0800437d
 8004334:	0800437d 	.word	0x0800437d
 8004338:	08004353 	.word	0x08004353
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800433c:	f7ff fb60 	bl	8003a00 <HAL_RCC_GetPCLK1Freq>
 8004340:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004342:	e021      	b.n	8004388 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004344:	4b0c      	ldr	r3, [pc, #48]	@ (8004378 <UART_SetConfig+0x2f8>)
 8004346:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004348:	e01e      	b.n	8004388 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800434a:	f7ff faeb 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 800434e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004350:	e01a      	b.n	8004388 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004352:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004356:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004358:	e016      	b.n	8004388 <UART_SetConfig+0x308>
 800435a:	bf00      	nop
 800435c:	cfff69f3 	.word	0xcfff69f3
 8004360:	40008000 	.word	0x40008000
 8004364:	40013800 	.word	0x40013800
 8004368:	40021000 	.word	0x40021000
 800436c:	40004400 	.word	0x40004400
 8004370:	40004800 	.word	0x40004800
 8004374:	40004c00 	.word	0x40004c00
 8004378:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004386:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 812a 	beq.w	80045e4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004394:	4a9e      	ldr	r2, [pc, #632]	@ (8004610 <UART_SetConfig+0x590>)
 8004396:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800439a:	461a      	mov	r2, r3
 800439c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439e:	fbb3 f3f2 	udiv	r3, r3, r2
 80043a2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	4613      	mov	r3, r2
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	4413      	add	r3, r2
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d305      	bcc.n	80043c0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d903      	bls.n	80043c8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80043c6:	e10d      	b.n	80045e4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ca:	2200      	movs	r2, #0
 80043cc:	60bb      	str	r3, [r7, #8]
 80043ce:	60fa      	str	r2, [r7, #12]
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d4:	4a8e      	ldr	r2, [pc, #568]	@ (8004610 <UART_SetConfig+0x590>)
 80043d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043da:	b29b      	uxth	r3, r3
 80043dc:	2200      	movs	r2, #0
 80043de:	603b      	str	r3, [r7, #0]
 80043e0:	607a      	str	r2, [r7, #4]
 80043e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043ea:	f7fc fc75 	bl	8000cd8 <__aeabi_uldivmod>
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	4610      	mov	r0, r2
 80043f4:	4619      	mov	r1, r3
 80043f6:	f04f 0200 	mov.w	r2, #0
 80043fa:	f04f 0300 	mov.w	r3, #0
 80043fe:	020b      	lsls	r3, r1, #8
 8004400:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004404:	0202      	lsls	r2, r0, #8
 8004406:	6979      	ldr	r1, [r7, #20]
 8004408:	6849      	ldr	r1, [r1, #4]
 800440a:	0849      	lsrs	r1, r1, #1
 800440c:	2000      	movs	r0, #0
 800440e:	460c      	mov	r4, r1
 8004410:	4605      	mov	r5, r0
 8004412:	eb12 0804 	adds.w	r8, r2, r4
 8004416:	eb43 0905 	adc.w	r9, r3, r5
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	469a      	mov	sl, r3
 8004422:	4693      	mov	fp, r2
 8004424:	4652      	mov	r2, sl
 8004426:	465b      	mov	r3, fp
 8004428:	4640      	mov	r0, r8
 800442a:	4649      	mov	r1, r9
 800442c:	f7fc fc54 	bl	8000cd8 <__aeabi_uldivmod>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4613      	mov	r3, r2
 8004436:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800443e:	d308      	bcc.n	8004452 <UART_SetConfig+0x3d2>
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004446:	d204      	bcs.n	8004452 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6a3a      	ldr	r2, [r7, #32]
 800444e:	60da      	str	r2, [r3, #12]
 8004450:	e0c8      	b.n	80045e4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004458:	e0c4      	b.n	80045e4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004462:	d167      	bne.n	8004534 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004464:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004468:	2b08      	cmp	r3, #8
 800446a:	d828      	bhi.n	80044be <UART_SetConfig+0x43e>
 800446c:	a201      	add	r2, pc, #4	@ (adr r2, 8004474 <UART_SetConfig+0x3f4>)
 800446e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004472:	bf00      	nop
 8004474:	08004499 	.word	0x08004499
 8004478:	080044a1 	.word	0x080044a1
 800447c:	080044a9 	.word	0x080044a9
 8004480:	080044bf 	.word	0x080044bf
 8004484:	080044af 	.word	0x080044af
 8004488:	080044bf 	.word	0x080044bf
 800448c:	080044bf 	.word	0x080044bf
 8004490:	080044bf 	.word	0x080044bf
 8004494:	080044b7 	.word	0x080044b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004498:	f7ff fab2 	bl	8003a00 <HAL_RCC_GetPCLK1Freq>
 800449c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800449e:	e014      	b.n	80044ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044a0:	f7ff fac4 	bl	8003a2c <HAL_RCC_GetPCLK2Freq>
 80044a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044a6:	e010      	b.n	80044ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044a8:	4b5a      	ldr	r3, [pc, #360]	@ (8004614 <UART_SetConfig+0x594>)
 80044aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80044ac:	e00d      	b.n	80044ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ae:	f7ff fa39 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 80044b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044b4:	e009      	b.n	80044ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80044bc:	e005      	b.n	80044ca <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80044be:	2300      	movs	r3, #0
 80044c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80044c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 8089 	beq.w	80045e4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d6:	4a4e      	ldr	r2, [pc, #312]	@ (8004610 <UART_SetConfig+0x590>)
 80044d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044dc:	461a      	mov	r2, r3
 80044de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80044e4:	005a      	lsls	r2, r3, #1
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	085b      	lsrs	r3, r3, #1
 80044ec:	441a      	add	r2, r3
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	2b0f      	cmp	r3, #15
 80044fc:	d916      	bls.n	800452c <UART_SetConfig+0x4ac>
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004504:	d212      	bcs.n	800452c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	b29b      	uxth	r3, r3
 800450a:	f023 030f 	bic.w	r3, r3, #15
 800450e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	085b      	lsrs	r3, r3, #1
 8004514:	b29b      	uxth	r3, r3
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	b29a      	uxth	r2, r3
 800451c:	8bfb      	ldrh	r3, [r7, #30]
 800451e:	4313      	orrs	r3, r2
 8004520:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	8bfa      	ldrh	r2, [r7, #30]
 8004528:	60da      	str	r2, [r3, #12]
 800452a:	e05b      	b.n	80045e4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004532:	e057      	b.n	80045e4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004534:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004538:	2b08      	cmp	r3, #8
 800453a:	d828      	bhi.n	800458e <UART_SetConfig+0x50e>
 800453c:	a201      	add	r2, pc, #4	@ (adr r2, 8004544 <UART_SetConfig+0x4c4>)
 800453e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004542:	bf00      	nop
 8004544:	08004569 	.word	0x08004569
 8004548:	08004571 	.word	0x08004571
 800454c:	08004579 	.word	0x08004579
 8004550:	0800458f 	.word	0x0800458f
 8004554:	0800457f 	.word	0x0800457f
 8004558:	0800458f 	.word	0x0800458f
 800455c:	0800458f 	.word	0x0800458f
 8004560:	0800458f 	.word	0x0800458f
 8004564:	08004587 	.word	0x08004587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004568:	f7ff fa4a 	bl	8003a00 <HAL_RCC_GetPCLK1Freq>
 800456c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800456e:	e014      	b.n	800459a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004570:	f7ff fa5c 	bl	8003a2c <HAL_RCC_GetPCLK2Freq>
 8004574:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004576:	e010      	b.n	800459a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004578:	4b26      	ldr	r3, [pc, #152]	@ (8004614 <UART_SetConfig+0x594>)
 800457a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800457c:	e00d      	b.n	800459a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800457e:	f7ff f9d1 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 8004582:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004584:	e009      	b.n	800459a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004586:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800458a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800458c:	e005      	b.n	800459a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800458e:	2300      	movs	r3, #0
 8004590:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004598:	bf00      	nop
    }

    if (pclk != 0U)
 800459a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459c:	2b00      	cmp	r3, #0
 800459e:	d021      	beq.n	80045e4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a4:	4a1a      	ldr	r2, [pc, #104]	@ (8004610 <UART_SetConfig+0x590>)
 80045a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045aa:	461a      	mov	r2, r3
 80045ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	085b      	lsrs	r3, r3, #1
 80045b8:	441a      	add	r2, r3
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	2b0f      	cmp	r3, #15
 80045c8:	d909      	bls.n	80045de <UART_SetConfig+0x55e>
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045d0:	d205      	bcs.n	80045de <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60da      	str	r2, [r3, #12]
 80045dc:	e002      	b.n	80045e4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	2200      	movs	r2, #0
 80045f8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2200      	movs	r2, #0
 80045fe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004600:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004604:	4618      	mov	r0, r3
 8004606:	3730      	adds	r7, #48	@ 0x30
 8004608:	46bd      	mov	sp, r7
 800460a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800460e:	bf00      	nop
 8004610:	080093f4 	.word	0x080093f4
 8004614:	00f42400 	.word	0x00f42400

08004618 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00a      	beq.n	8004664 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00a      	beq.n	8004686 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800468a:	f003 0304 	and.w	r3, r3, #4
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ac:	f003 0310 	and.w	r3, r3, #16
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d01a      	beq.n	800472e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004712:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004716:	d10a      	bne.n	800472e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00a      	beq.n	8004750 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	605a      	str	r2, [r3, #4]
  }
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b098      	sub	sp, #96	@ 0x60
 8004760:	af02      	add	r7, sp, #8
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800476c:	f7fd fb08 	bl	8001d80 <HAL_GetTick>
 8004770:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	2b08      	cmp	r3, #8
 800477e:	d12f      	bne.n	80047e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004780:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004788:	2200      	movs	r2, #0
 800478a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f88e 	bl	80048b0 <UART_WaitOnFlagUntilTimeout>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d022      	beq.n	80047e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a2:	e853 3f00 	ldrex	r3, [r3]
 80047a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	461a      	mov	r2, r3
 80047b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80047ba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047c0:	e841 2300 	strex	r3, r2, [r1]
 80047c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1e6      	bne.n	800479a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e063      	b.n	80048a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0304 	and.w	r3, r3, #4
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d149      	bne.n	8004882 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047f6:	2200      	movs	r2, #0
 80047f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f857 	bl	80048b0 <UART_WaitOnFlagUntilTimeout>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d03c      	beq.n	8004882 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004810:	e853 3f00 	ldrex	r3, [r3]
 8004814:	623b      	str	r3, [r7, #32]
   return(result);
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800481c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	461a      	mov	r2, r3
 8004824:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004826:	633b      	str	r3, [r7, #48]	@ 0x30
 8004828:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800482c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800482e:	e841 2300 	strex	r3, r2, [r1]
 8004832:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1e6      	bne.n	8004808 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3308      	adds	r3, #8
 8004840:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	e853 3f00 	ldrex	r3, [r3]
 8004848:	60fb      	str	r3, [r7, #12]
   return(result);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f023 0301 	bic.w	r3, r3, #1
 8004850:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3308      	adds	r3, #8
 8004858:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800485a:	61fa      	str	r2, [r7, #28]
 800485c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485e:	69b9      	ldr	r1, [r7, #24]
 8004860:	69fa      	ldr	r2, [r7, #28]
 8004862:	e841 2300 	strex	r3, r2, [r1]
 8004866:	617b      	str	r3, [r7, #20]
   return(result);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1e5      	bne.n	800483a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2220      	movs	r2, #32
 8004872:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e012      	b.n	80048a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2220      	movs	r2, #32
 8004886:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2220      	movs	r2, #32
 800488e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3758      	adds	r7, #88	@ 0x58
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	4613      	mov	r3, r2
 80048be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048c0:	e04f      	b.n	8004962 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c8:	d04b      	beq.n	8004962 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ca:	f7fd fa59 	bl	8001d80 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d302      	bcc.n	80048e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e04e      	b.n	8004982 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d037      	beq.n	8004962 <UART_WaitOnFlagUntilTimeout+0xb2>
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	2b80      	cmp	r3, #128	@ 0x80
 80048f6:	d034      	beq.n	8004962 <UART_WaitOnFlagUntilTimeout+0xb2>
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b40      	cmp	r3, #64	@ 0x40
 80048fc:	d031      	beq.n	8004962 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b08      	cmp	r3, #8
 800490a:	d110      	bne.n	800492e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2208      	movs	r2, #8
 8004912:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 f838 	bl	800498a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2208      	movs	r2, #8
 800491e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e029      	b.n	8004982 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004938:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800493c:	d111      	bne.n	8004962 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004946:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 f81e 	bl	800498a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2220      	movs	r2, #32
 8004952:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e00f      	b.n	8004982 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	69da      	ldr	r2, [r3, #28]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	4013      	ands	r3, r2
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	429a      	cmp	r2, r3
 8004970:	bf0c      	ite	eq
 8004972:	2301      	moveq	r3, #1
 8004974:	2300      	movne	r3, #0
 8004976:	b2db      	uxtb	r3, r3
 8004978:	461a      	mov	r2, r3
 800497a:	79fb      	ldrb	r3, [r7, #7]
 800497c:	429a      	cmp	r2, r3
 800497e:	d0a0      	beq.n	80048c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800498a:	b480      	push	{r7}
 800498c:	b095      	sub	sp, #84	@ 0x54
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800499a:	e853 3f00 	ldrex	r3, [r3]
 800499e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	461a      	mov	r2, r3
 80049ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80049b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049b8:	e841 2300 	strex	r3, r2, [r1]
 80049bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1e6      	bne.n	8004992 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	3308      	adds	r3, #8
 80049ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	e853 3f00 	ldrex	r3, [r3]
 80049d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049da:	f023 0301 	bic.w	r3, r3, #1
 80049de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	3308      	adds	r3, #8
 80049e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049f0:	e841 2300 	strex	r3, r2, [r1]
 80049f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1e3      	bne.n	80049c4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d118      	bne.n	8004a36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	e853 3f00 	ldrex	r3, [r3]
 8004a10:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	f023 0310 	bic.w	r3, r3, #16
 8004a18:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a22:	61bb      	str	r3, [r7, #24]
 8004a24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a26:	6979      	ldr	r1, [r7, #20]
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	e841 2300 	strex	r3, r2, [r1]
 8004a2e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1e6      	bne.n	8004a04 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004a4a:	bf00      	nop
 8004a4c:	3754      	adds	r7, #84	@ 0x54
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b085      	sub	sp, #20
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d101      	bne.n	8004a6c <HAL_UARTEx_DisableFifoMode+0x16>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e027      	b.n	8004abc <HAL_UARTEx_DisableFifoMode+0x66>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2224      	movs	r2, #36	@ 0x24
 8004a78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 0201 	bic.w	r2, r2, #1
 8004a92:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004a9a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2220      	movs	r2, #32
 8004aae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d101      	bne.n	8004ae0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004adc:	2302      	movs	r3, #2
 8004ade:	e02d      	b.n	8004b3c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2224      	movs	r2, #36	@ 0x24
 8004aec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0201 	bic.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f84f 	bl	8004bc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e02d      	b.n	8004bb8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2224      	movs	r2, #36	@ 0x24
 8004b68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 0201 	bic.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f811 	bl	8004bc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d108      	bne.n	8004be2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004be0:	e031      	b.n	8004c46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004be2:	2308      	movs	r3, #8
 8004be4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004be6:	2308      	movs	r3, #8
 8004be8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	0e5b      	lsrs	r3, r3, #25
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	0f5b      	lsrs	r3, r3, #29
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c0a:	7bbb      	ldrb	r3, [r7, #14]
 8004c0c:	7b3a      	ldrb	r2, [r7, #12]
 8004c0e:	4911      	ldr	r1, [pc, #68]	@ (8004c54 <UARTEx_SetNbDataToProcess+0x94>)
 8004c10:	5c8a      	ldrb	r2, [r1, r2]
 8004c12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004c16:	7b3a      	ldrb	r2, [r7, #12]
 8004c18:	490f      	ldr	r1, [pc, #60]	@ (8004c58 <UARTEx_SetNbDataToProcess+0x98>)
 8004c1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
 8004c2a:	7b7a      	ldrb	r2, [r7, #13]
 8004c2c:	4909      	ldr	r1, [pc, #36]	@ (8004c54 <UARTEx_SetNbDataToProcess+0x94>)
 8004c2e:	5c8a      	ldrb	r2, [r1, r2]
 8004c30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004c34:	7b7a      	ldrb	r2, [r7, #13]
 8004c36:	4908      	ldr	r1, [pc, #32]	@ (8004c58 <UARTEx_SetNbDataToProcess+0x98>)
 8004c38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004c46:	bf00      	nop
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	0800940c 	.word	0x0800940c
 8004c58:	08009414 	.word	0x08009414

08004c5c <__cvt>:
 8004c5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c60:	ec57 6b10 	vmov	r6, r7, d0
 8004c64:	2f00      	cmp	r7, #0
 8004c66:	460c      	mov	r4, r1
 8004c68:	4619      	mov	r1, r3
 8004c6a:	463b      	mov	r3, r7
 8004c6c:	bfbb      	ittet	lt
 8004c6e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004c72:	461f      	movlt	r7, r3
 8004c74:	2300      	movge	r3, #0
 8004c76:	232d      	movlt	r3, #45	@ 0x2d
 8004c78:	700b      	strb	r3, [r1, #0]
 8004c7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c7c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004c80:	4691      	mov	r9, r2
 8004c82:	f023 0820 	bic.w	r8, r3, #32
 8004c86:	bfbc      	itt	lt
 8004c88:	4632      	movlt	r2, r6
 8004c8a:	4616      	movlt	r6, r2
 8004c8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004c90:	d005      	beq.n	8004c9e <__cvt+0x42>
 8004c92:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004c96:	d100      	bne.n	8004c9a <__cvt+0x3e>
 8004c98:	3401      	adds	r4, #1
 8004c9a:	2102      	movs	r1, #2
 8004c9c:	e000      	b.n	8004ca0 <__cvt+0x44>
 8004c9e:	2103      	movs	r1, #3
 8004ca0:	ab03      	add	r3, sp, #12
 8004ca2:	9301      	str	r3, [sp, #4]
 8004ca4:	ab02      	add	r3, sp, #8
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	ec47 6b10 	vmov	d0, r6, r7
 8004cac:	4653      	mov	r3, sl
 8004cae:	4622      	mov	r2, r4
 8004cb0:	f001 f8aa 	bl	8005e08 <_dtoa_r>
 8004cb4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004cb8:	4605      	mov	r5, r0
 8004cba:	d119      	bne.n	8004cf0 <__cvt+0x94>
 8004cbc:	f019 0f01 	tst.w	r9, #1
 8004cc0:	d00e      	beq.n	8004ce0 <__cvt+0x84>
 8004cc2:	eb00 0904 	add.w	r9, r0, r4
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	2300      	movs	r3, #0
 8004cca:	4630      	mov	r0, r6
 8004ccc:	4639      	mov	r1, r7
 8004cce:	f7fb ff23 	bl	8000b18 <__aeabi_dcmpeq>
 8004cd2:	b108      	cbz	r0, 8004cd8 <__cvt+0x7c>
 8004cd4:	f8cd 900c 	str.w	r9, [sp, #12]
 8004cd8:	2230      	movs	r2, #48	@ 0x30
 8004cda:	9b03      	ldr	r3, [sp, #12]
 8004cdc:	454b      	cmp	r3, r9
 8004cde:	d31e      	bcc.n	8004d1e <__cvt+0xc2>
 8004ce0:	9b03      	ldr	r3, [sp, #12]
 8004ce2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004ce4:	1b5b      	subs	r3, r3, r5
 8004ce6:	4628      	mov	r0, r5
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	b004      	add	sp, #16
 8004cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cf0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004cf4:	eb00 0904 	add.w	r9, r0, r4
 8004cf8:	d1e5      	bne.n	8004cc6 <__cvt+0x6a>
 8004cfa:	7803      	ldrb	r3, [r0, #0]
 8004cfc:	2b30      	cmp	r3, #48	@ 0x30
 8004cfe:	d10a      	bne.n	8004d16 <__cvt+0xba>
 8004d00:	2200      	movs	r2, #0
 8004d02:	2300      	movs	r3, #0
 8004d04:	4630      	mov	r0, r6
 8004d06:	4639      	mov	r1, r7
 8004d08:	f7fb ff06 	bl	8000b18 <__aeabi_dcmpeq>
 8004d0c:	b918      	cbnz	r0, 8004d16 <__cvt+0xba>
 8004d0e:	f1c4 0401 	rsb	r4, r4, #1
 8004d12:	f8ca 4000 	str.w	r4, [sl]
 8004d16:	f8da 3000 	ldr.w	r3, [sl]
 8004d1a:	4499      	add	r9, r3
 8004d1c:	e7d3      	b.n	8004cc6 <__cvt+0x6a>
 8004d1e:	1c59      	adds	r1, r3, #1
 8004d20:	9103      	str	r1, [sp, #12]
 8004d22:	701a      	strb	r2, [r3, #0]
 8004d24:	e7d9      	b.n	8004cda <__cvt+0x7e>

08004d26 <__exponent>:
 8004d26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d28:	2900      	cmp	r1, #0
 8004d2a:	bfba      	itte	lt
 8004d2c:	4249      	neglt	r1, r1
 8004d2e:	232d      	movlt	r3, #45	@ 0x2d
 8004d30:	232b      	movge	r3, #43	@ 0x2b
 8004d32:	2909      	cmp	r1, #9
 8004d34:	7002      	strb	r2, [r0, #0]
 8004d36:	7043      	strb	r3, [r0, #1]
 8004d38:	dd29      	ble.n	8004d8e <__exponent+0x68>
 8004d3a:	f10d 0307 	add.w	r3, sp, #7
 8004d3e:	461d      	mov	r5, r3
 8004d40:	270a      	movs	r7, #10
 8004d42:	461a      	mov	r2, r3
 8004d44:	fbb1 f6f7 	udiv	r6, r1, r7
 8004d48:	fb07 1416 	mls	r4, r7, r6, r1
 8004d4c:	3430      	adds	r4, #48	@ 0x30
 8004d4e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004d52:	460c      	mov	r4, r1
 8004d54:	2c63      	cmp	r4, #99	@ 0x63
 8004d56:	f103 33ff 	add.w	r3, r3, #4294967295
 8004d5a:	4631      	mov	r1, r6
 8004d5c:	dcf1      	bgt.n	8004d42 <__exponent+0x1c>
 8004d5e:	3130      	adds	r1, #48	@ 0x30
 8004d60:	1e94      	subs	r4, r2, #2
 8004d62:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004d66:	1c41      	adds	r1, r0, #1
 8004d68:	4623      	mov	r3, r4
 8004d6a:	42ab      	cmp	r3, r5
 8004d6c:	d30a      	bcc.n	8004d84 <__exponent+0x5e>
 8004d6e:	f10d 0309 	add.w	r3, sp, #9
 8004d72:	1a9b      	subs	r3, r3, r2
 8004d74:	42ac      	cmp	r4, r5
 8004d76:	bf88      	it	hi
 8004d78:	2300      	movhi	r3, #0
 8004d7a:	3302      	adds	r3, #2
 8004d7c:	4403      	add	r3, r0
 8004d7e:	1a18      	subs	r0, r3, r0
 8004d80:	b003      	add	sp, #12
 8004d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d84:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004d88:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004d8c:	e7ed      	b.n	8004d6a <__exponent+0x44>
 8004d8e:	2330      	movs	r3, #48	@ 0x30
 8004d90:	3130      	adds	r1, #48	@ 0x30
 8004d92:	7083      	strb	r3, [r0, #2]
 8004d94:	70c1      	strb	r1, [r0, #3]
 8004d96:	1d03      	adds	r3, r0, #4
 8004d98:	e7f1      	b.n	8004d7e <__exponent+0x58>
	...

08004d9c <_printf_float>:
 8004d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da0:	b08d      	sub	sp, #52	@ 0x34
 8004da2:	460c      	mov	r4, r1
 8004da4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004da8:	4616      	mov	r6, r2
 8004daa:	461f      	mov	r7, r3
 8004dac:	4605      	mov	r5, r0
 8004dae:	f000 ff23 	bl	8005bf8 <_localeconv_r>
 8004db2:	6803      	ldr	r3, [r0, #0]
 8004db4:	9304      	str	r3, [sp, #16]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fb fa82 	bl	80002c0 <strlen>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8004dc0:	f8d8 3000 	ldr.w	r3, [r8]
 8004dc4:	9005      	str	r0, [sp, #20]
 8004dc6:	3307      	adds	r3, #7
 8004dc8:	f023 0307 	bic.w	r3, r3, #7
 8004dcc:	f103 0208 	add.w	r2, r3, #8
 8004dd0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004dd4:	f8d4 b000 	ldr.w	fp, [r4]
 8004dd8:	f8c8 2000 	str.w	r2, [r8]
 8004ddc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004de0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004de4:	9307      	str	r3, [sp, #28]
 8004de6:	f8cd 8018 	str.w	r8, [sp, #24]
 8004dea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004dee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004df2:	4b9c      	ldr	r3, [pc, #624]	@ (8005064 <_printf_float+0x2c8>)
 8004df4:	f04f 32ff 	mov.w	r2, #4294967295
 8004df8:	f7fb fec0 	bl	8000b7c <__aeabi_dcmpun>
 8004dfc:	bb70      	cbnz	r0, 8004e5c <_printf_float+0xc0>
 8004dfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e02:	4b98      	ldr	r3, [pc, #608]	@ (8005064 <_printf_float+0x2c8>)
 8004e04:	f04f 32ff 	mov.w	r2, #4294967295
 8004e08:	f7fb fe9a 	bl	8000b40 <__aeabi_dcmple>
 8004e0c:	bb30      	cbnz	r0, 8004e5c <_printf_float+0xc0>
 8004e0e:	2200      	movs	r2, #0
 8004e10:	2300      	movs	r3, #0
 8004e12:	4640      	mov	r0, r8
 8004e14:	4649      	mov	r1, r9
 8004e16:	f7fb fe89 	bl	8000b2c <__aeabi_dcmplt>
 8004e1a:	b110      	cbz	r0, 8004e22 <_printf_float+0x86>
 8004e1c:	232d      	movs	r3, #45	@ 0x2d
 8004e1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e22:	4a91      	ldr	r2, [pc, #580]	@ (8005068 <_printf_float+0x2cc>)
 8004e24:	4b91      	ldr	r3, [pc, #580]	@ (800506c <_printf_float+0x2d0>)
 8004e26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004e2a:	bf94      	ite	ls
 8004e2c:	4690      	movls	r8, r2
 8004e2e:	4698      	movhi	r8, r3
 8004e30:	2303      	movs	r3, #3
 8004e32:	6123      	str	r3, [r4, #16]
 8004e34:	f02b 0304 	bic.w	r3, fp, #4
 8004e38:	6023      	str	r3, [r4, #0]
 8004e3a:	f04f 0900 	mov.w	r9, #0
 8004e3e:	9700      	str	r7, [sp, #0]
 8004e40:	4633      	mov	r3, r6
 8004e42:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004e44:	4621      	mov	r1, r4
 8004e46:	4628      	mov	r0, r5
 8004e48:	f000 f9d2 	bl	80051f0 <_printf_common>
 8004e4c:	3001      	adds	r0, #1
 8004e4e:	f040 808d 	bne.w	8004f6c <_printf_float+0x1d0>
 8004e52:	f04f 30ff 	mov.w	r0, #4294967295
 8004e56:	b00d      	add	sp, #52	@ 0x34
 8004e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e5c:	4642      	mov	r2, r8
 8004e5e:	464b      	mov	r3, r9
 8004e60:	4640      	mov	r0, r8
 8004e62:	4649      	mov	r1, r9
 8004e64:	f7fb fe8a 	bl	8000b7c <__aeabi_dcmpun>
 8004e68:	b140      	cbz	r0, 8004e7c <_printf_float+0xe0>
 8004e6a:	464b      	mov	r3, r9
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	bfbc      	itt	lt
 8004e70:	232d      	movlt	r3, #45	@ 0x2d
 8004e72:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004e76:	4a7e      	ldr	r2, [pc, #504]	@ (8005070 <_printf_float+0x2d4>)
 8004e78:	4b7e      	ldr	r3, [pc, #504]	@ (8005074 <_printf_float+0x2d8>)
 8004e7a:	e7d4      	b.n	8004e26 <_printf_float+0x8a>
 8004e7c:	6863      	ldr	r3, [r4, #4]
 8004e7e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004e82:	9206      	str	r2, [sp, #24]
 8004e84:	1c5a      	adds	r2, r3, #1
 8004e86:	d13b      	bne.n	8004f00 <_printf_float+0x164>
 8004e88:	2306      	movs	r3, #6
 8004e8a:	6063      	str	r3, [r4, #4]
 8004e8c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004e90:	2300      	movs	r3, #0
 8004e92:	6022      	str	r2, [r4, #0]
 8004e94:	9303      	str	r3, [sp, #12]
 8004e96:	ab0a      	add	r3, sp, #40	@ 0x28
 8004e98:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004e9c:	ab09      	add	r3, sp, #36	@ 0x24
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	6861      	ldr	r1, [r4, #4]
 8004ea2:	ec49 8b10 	vmov	d0, r8, r9
 8004ea6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004eaa:	4628      	mov	r0, r5
 8004eac:	f7ff fed6 	bl	8004c5c <__cvt>
 8004eb0:	9b06      	ldr	r3, [sp, #24]
 8004eb2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004eb4:	2b47      	cmp	r3, #71	@ 0x47
 8004eb6:	4680      	mov	r8, r0
 8004eb8:	d129      	bne.n	8004f0e <_printf_float+0x172>
 8004eba:	1cc8      	adds	r0, r1, #3
 8004ebc:	db02      	blt.n	8004ec4 <_printf_float+0x128>
 8004ebe:	6863      	ldr	r3, [r4, #4]
 8004ec0:	4299      	cmp	r1, r3
 8004ec2:	dd41      	ble.n	8004f48 <_printf_float+0x1ac>
 8004ec4:	f1aa 0a02 	sub.w	sl, sl, #2
 8004ec8:	fa5f fa8a 	uxtb.w	sl, sl
 8004ecc:	3901      	subs	r1, #1
 8004ece:	4652      	mov	r2, sl
 8004ed0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004ed4:	9109      	str	r1, [sp, #36]	@ 0x24
 8004ed6:	f7ff ff26 	bl	8004d26 <__exponent>
 8004eda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004edc:	1813      	adds	r3, r2, r0
 8004ede:	2a01      	cmp	r2, #1
 8004ee0:	4681      	mov	r9, r0
 8004ee2:	6123      	str	r3, [r4, #16]
 8004ee4:	dc02      	bgt.n	8004eec <_printf_float+0x150>
 8004ee6:	6822      	ldr	r2, [r4, #0]
 8004ee8:	07d2      	lsls	r2, r2, #31
 8004eea:	d501      	bpl.n	8004ef0 <_printf_float+0x154>
 8004eec:	3301      	adds	r3, #1
 8004eee:	6123      	str	r3, [r4, #16]
 8004ef0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0a2      	beq.n	8004e3e <_printf_float+0xa2>
 8004ef8:	232d      	movs	r3, #45	@ 0x2d
 8004efa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004efe:	e79e      	b.n	8004e3e <_printf_float+0xa2>
 8004f00:	9a06      	ldr	r2, [sp, #24]
 8004f02:	2a47      	cmp	r2, #71	@ 0x47
 8004f04:	d1c2      	bne.n	8004e8c <_printf_float+0xf0>
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1c0      	bne.n	8004e8c <_printf_float+0xf0>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e7bd      	b.n	8004e8a <_printf_float+0xee>
 8004f0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004f12:	d9db      	bls.n	8004ecc <_printf_float+0x130>
 8004f14:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004f18:	d118      	bne.n	8004f4c <_printf_float+0x1b0>
 8004f1a:	2900      	cmp	r1, #0
 8004f1c:	6863      	ldr	r3, [r4, #4]
 8004f1e:	dd0b      	ble.n	8004f38 <_printf_float+0x19c>
 8004f20:	6121      	str	r1, [r4, #16]
 8004f22:	b913      	cbnz	r3, 8004f2a <_printf_float+0x18e>
 8004f24:	6822      	ldr	r2, [r4, #0]
 8004f26:	07d0      	lsls	r0, r2, #31
 8004f28:	d502      	bpl.n	8004f30 <_printf_float+0x194>
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	440b      	add	r3, r1
 8004f2e:	6123      	str	r3, [r4, #16]
 8004f30:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004f32:	f04f 0900 	mov.w	r9, #0
 8004f36:	e7db      	b.n	8004ef0 <_printf_float+0x154>
 8004f38:	b913      	cbnz	r3, 8004f40 <_printf_float+0x1a4>
 8004f3a:	6822      	ldr	r2, [r4, #0]
 8004f3c:	07d2      	lsls	r2, r2, #31
 8004f3e:	d501      	bpl.n	8004f44 <_printf_float+0x1a8>
 8004f40:	3302      	adds	r3, #2
 8004f42:	e7f4      	b.n	8004f2e <_printf_float+0x192>
 8004f44:	2301      	movs	r3, #1
 8004f46:	e7f2      	b.n	8004f2e <_printf_float+0x192>
 8004f48:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004f4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f4e:	4299      	cmp	r1, r3
 8004f50:	db05      	blt.n	8004f5e <_printf_float+0x1c2>
 8004f52:	6823      	ldr	r3, [r4, #0]
 8004f54:	6121      	str	r1, [r4, #16]
 8004f56:	07d8      	lsls	r0, r3, #31
 8004f58:	d5ea      	bpl.n	8004f30 <_printf_float+0x194>
 8004f5a:	1c4b      	adds	r3, r1, #1
 8004f5c:	e7e7      	b.n	8004f2e <_printf_float+0x192>
 8004f5e:	2900      	cmp	r1, #0
 8004f60:	bfd4      	ite	le
 8004f62:	f1c1 0202 	rsble	r2, r1, #2
 8004f66:	2201      	movgt	r2, #1
 8004f68:	4413      	add	r3, r2
 8004f6a:	e7e0      	b.n	8004f2e <_printf_float+0x192>
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	055a      	lsls	r2, r3, #21
 8004f70:	d407      	bmi.n	8004f82 <_printf_float+0x1e6>
 8004f72:	6923      	ldr	r3, [r4, #16]
 8004f74:	4642      	mov	r2, r8
 8004f76:	4631      	mov	r1, r6
 8004f78:	4628      	mov	r0, r5
 8004f7a:	47b8      	blx	r7
 8004f7c:	3001      	adds	r0, #1
 8004f7e:	d12b      	bne.n	8004fd8 <_printf_float+0x23c>
 8004f80:	e767      	b.n	8004e52 <_printf_float+0xb6>
 8004f82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004f86:	f240 80dd 	bls.w	8005144 <_printf_float+0x3a8>
 8004f8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004f8e:	2200      	movs	r2, #0
 8004f90:	2300      	movs	r3, #0
 8004f92:	f7fb fdc1 	bl	8000b18 <__aeabi_dcmpeq>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	d033      	beq.n	8005002 <_printf_float+0x266>
 8004f9a:	4a37      	ldr	r2, [pc, #220]	@ (8005078 <_printf_float+0x2dc>)
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	4631      	mov	r1, r6
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	47b8      	blx	r7
 8004fa4:	3001      	adds	r0, #1
 8004fa6:	f43f af54 	beq.w	8004e52 <_printf_float+0xb6>
 8004faa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004fae:	4543      	cmp	r3, r8
 8004fb0:	db02      	blt.n	8004fb8 <_printf_float+0x21c>
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	07d8      	lsls	r0, r3, #31
 8004fb6:	d50f      	bpl.n	8004fd8 <_printf_float+0x23c>
 8004fb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fbc:	4631      	mov	r1, r6
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	47b8      	blx	r7
 8004fc2:	3001      	adds	r0, #1
 8004fc4:	f43f af45 	beq.w	8004e52 <_printf_float+0xb6>
 8004fc8:	f04f 0900 	mov.w	r9, #0
 8004fcc:	f108 38ff 	add.w	r8, r8, #4294967295
 8004fd0:	f104 0a1a 	add.w	sl, r4, #26
 8004fd4:	45c8      	cmp	r8, r9
 8004fd6:	dc09      	bgt.n	8004fec <_printf_float+0x250>
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	079b      	lsls	r3, r3, #30
 8004fdc:	f100 8103 	bmi.w	80051e6 <_printf_float+0x44a>
 8004fe0:	68e0      	ldr	r0, [r4, #12]
 8004fe2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004fe4:	4298      	cmp	r0, r3
 8004fe6:	bfb8      	it	lt
 8004fe8:	4618      	movlt	r0, r3
 8004fea:	e734      	b.n	8004e56 <_printf_float+0xba>
 8004fec:	2301      	movs	r3, #1
 8004fee:	4652      	mov	r2, sl
 8004ff0:	4631      	mov	r1, r6
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	47b8      	blx	r7
 8004ff6:	3001      	adds	r0, #1
 8004ff8:	f43f af2b 	beq.w	8004e52 <_printf_float+0xb6>
 8004ffc:	f109 0901 	add.w	r9, r9, #1
 8005000:	e7e8      	b.n	8004fd4 <_printf_float+0x238>
 8005002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005004:	2b00      	cmp	r3, #0
 8005006:	dc39      	bgt.n	800507c <_printf_float+0x2e0>
 8005008:	4a1b      	ldr	r2, [pc, #108]	@ (8005078 <_printf_float+0x2dc>)
 800500a:	2301      	movs	r3, #1
 800500c:	4631      	mov	r1, r6
 800500e:	4628      	mov	r0, r5
 8005010:	47b8      	blx	r7
 8005012:	3001      	adds	r0, #1
 8005014:	f43f af1d 	beq.w	8004e52 <_printf_float+0xb6>
 8005018:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800501c:	ea59 0303 	orrs.w	r3, r9, r3
 8005020:	d102      	bne.n	8005028 <_printf_float+0x28c>
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	07d9      	lsls	r1, r3, #31
 8005026:	d5d7      	bpl.n	8004fd8 <_printf_float+0x23c>
 8005028:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800502c:	4631      	mov	r1, r6
 800502e:	4628      	mov	r0, r5
 8005030:	47b8      	blx	r7
 8005032:	3001      	adds	r0, #1
 8005034:	f43f af0d 	beq.w	8004e52 <_printf_float+0xb6>
 8005038:	f04f 0a00 	mov.w	sl, #0
 800503c:	f104 0b1a 	add.w	fp, r4, #26
 8005040:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005042:	425b      	negs	r3, r3
 8005044:	4553      	cmp	r3, sl
 8005046:	dc01      	bgt.n	800504c <_printf_float+0x2b0>
 8005048:	464b      	mov	r3, r9
 800504a:	e793      	b.n	8004f74 <_printf_float+0x1d8>
 800504c:	2301      	movs	r3, #1
 800504e:	465a      	mov	r2, fp
 8005050:	4631      	mov	r1, r6
 8005052:	4628      	mov	r0, r5
 8005054:	47b8      	blx	r7
 8005056:	3001      	adds	r0, #1
 8005058:	f43f aefb 	beq.w	8004e52 <_printf_float+0xb6>
 800505c:	f10a 0a01 	add.w	sl, sl, #1
 8005060:	e7ee      	b.n	8005040 <_printf_float+0x2a4>
 8005062:	bf00      	nop
 8005064:	7fefffff 	.word	0x7fefffff
 8005068:	0800941c 	.word	0x0800941c
 800506c:	08009420 	.word	0x08009420
 8005070:	08009424 	.word	0x08009424
 8005074:	08009428 	.word	0x08009428
 8005078:	0800942c 	.word	0x0800942c
 800507c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800507e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005082:	4553      	cmp	r3, sl
 8005084:	bfa8      	it	ge
 8005086:	4653      	movge	r3, sl
 8005088:	2b00      	cmp	r3, #0
 800508a:	4699      	mov	r9, r3
 800508c:	dc36      	bgt.n	80050fc <_printf_float+0x360>
 800508e:	f04f 0b00 	mov.w	fp, #0
 8005092:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005096:	f104 021a 	add.w	r2, r4, #26
 800509a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800509c:	9306      	str	r3, [sp, #24]
 800509e:	eba3 0309 	sub.w	r3, r3, r9
 80050a2:	455b      	cmp	r3, fp
 80050a4:	dc31      	bgt.n	800510a <_printf_float+0x36e>
 80050a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050a8:	459a      	cmp	sl, r3
 80050aa:	dc3a      	bgt.n	8005122 <_printf_float+0x386>
 80050ac:	6823      	ldr	r3, [r4, #0]
 80050ae:	07da      	lsls	r2, r3, #31
 80050b0:	d437      	bmi.n	8005122 <_printf_float+0x386>
 80050b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050b4:	ebaa 0903 	sub.w	r9, sl, r3
 80050b8:	9b06      	ldr	r3, [sp, #24]
 80050ba:	ebaa 0303 	sub.w	r3, sl, r3
 80050be:	4599      	cmp	r9, r3
 80050c0:	bfa8      	it	ge
 80050c2:	4699      	movge	r9, r3
 80050c4:	f1b9 0f00 	cmp.w	r9, #0
 80050c8:	dc33      	bgt.n	8005132 <_printf_float+0x396>
 80050ca:	f04f 0800 	mov.w	r8, #0
 80050ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050d2:	f104 0b1a 	add.w	fp, r4, #26
 80050d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050d8:	ebaa 0303 	sub.w	r3, sl, r3
 80050dc:	eba3 0309 	sub.w	r3, r3, r9
 80050e0:	4543      	cmp	r3, r8
 80050e2:	f77f af79 	ble.w	8004fd8 <_printf_float+0x23c>
 80050e6:	2301      	movs	r3, #1
 80050e8:	465a      	mov	r2, fp
 80050ea:	4631      	mov	r1, r6
 80050ec:	4628      	mov	r0, r5
 80050ee:	47b8      	blx	r7
 80050f0:	3001      	adds	r0, #1
 80050f2:	f43f aeae 	beq.w	8004e52 <_printf_float+0xb6>
 80050f6:	f108 0801 	add.w	r8, r8, #1
 80050fa:	e7ec      	b.n	80050d6 <_printf_float+0x33a>
 80050fc:	4642      	mov	r2, r8
 80050fe:	4631      	mov	r1, r6
 8005100:	4628      	mov	r0, r5
 8005102:	47b8      	blx	r7
 8005104:	3001      	adds	r0, #1
 8005106:	d1c2      	bne.n	800508e <_printf_float+0x2f2>
 8005108:	e6a3      	b.n	8004e52 <_printf_float+0xb6>
 800510a:	2301      	movs	r3, #1
 800510c:	4631      	mov	r1, r6
 800510e:	4628      	mov	r0, r5
 8005110:	9206      	str	r2, [sp, #24]
 8005112:	47b8      	blx	r7
 8005114:	3001      	adds	r0, #1
 8005116:	f43f ae9c 	beq.w	8004e52 <_printf_float+0xb6>
 800511a:	9a06      	ldr	r2, [sp, #24]
 800511c:	f10b 0b01 	add.w	fp, fp, #1
 8005120:	e7bb      	b.n	800509a <_printf_float+0x2fe>
 8005122:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005126:	4631      	mov	r1, r6
 8005128:	4628      	mov	r0, r5
 800512a:	47b8      	blx	r7
 800512c:	3001      	adds	r0, #1
 800512e:	d1c0      	bne.n	80050b2 <_printf_float+0x316>
 8005130:	e68f      	b.n	8004e52 <_printf_float+0xb6>
 8005132:	9a06      	ldr	r2, [sp, #24]
 8005134:	464b      	mov	r3, r9
 8005136:	4442      	add	r2, r8
 8005138:	4631      	mov	r1, r6
 800513a:	4628      	mov	r0, r5
 800513c:	47b8      	blx	r7
 800513e:	3001      	adds	r0, #1
 8005140:	d1c3      	bne.n	80050ca <_printf_float+0x32e>
 8005142:	e686      	b.n	8004e52 <_printf_float+0xb6>
 8005144:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005148:	f1ba 0f01 	cmp.w	sl, #1
 800514c:	dc01      	bgt.n	8005152 <_printf_float+0x3b6>
 800514e:	07db      	lsls	r3, r3, #31
 8005150:	d536      	bpl.n	80051c0 <_printf_float+0x424>
 8005152:	2301      	movs	r3, #1
 8005154:	4642      	mov	r2, r8
 8005156:	4631      	mov	r1, r6
 8005158:	4628      	mov	r0, r5
 800515a:	47b8      	blx	r7
 800515c:	3001      	adds	r0, #1
 800515e:	f43f ae78 	beq.w	8004e52 <_printf_float+0xb6>
 8005162:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005166:	4631      	mov	r1, r6
 8005168:	4628      	mov	r0, r5
 800516a:	47b8      	blx	r7
 800516c:	3001      	adds	r0, #1
 800516e:	f43f ae70 	beq.w	8004e52 <_printf_float+0xb6>
 8005172:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005176:	2200      	movs	r2, #0
 8005178:	2300      	movs	r3, #0
 800517a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800517e:	f7fb fccb 	bl	8000b18 <__aeabi_dcmpeq>
 8005182:	b9c0      	cbnz	r0, 80051b6 <_printf_float+0x41a>
 8005184:	4653      	mov	r3, sl
 8005186:	f108 0201 	add.w	r2, r8, #1
 800518a:	4631      	mov	r1, r6
 800518c:	4628      	mov	r0, r5
 800518e:	47b8      	blx	r7
 8005190:	3001      	adds	r0, #1
 8005192:	d10c      	bne.n	80051ae <_printf_float+0x412>
 8005194:	e65d      	b.n	8004e52 <_printf_float+0xb6>
 8005196:	2301      	movs	r3, #1
 8005198:	465a      	mov	r2, fp
 800519a:	4631      	mov	r1, r6
 800519c:	4628      	mov	r0, r5
 800519e:	47b8      	blx	r7
 80051a0:	3001      	adds	r0, #1
 80051a2:	f43f ae56 	beq.w	8004e52 <_printf_float+0xb6>
 80051a6:	f108 0801 	add.w	r8, r8, #1
 80051aa:	45d0      	cmp	r8, sl
 80051ac:	dbf3      	blt.n	8005196 <_printf_float+0x3fa>
 80051ae:	464b      	mov	r3, r9
 80051b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80051b4:	e6df      	b.n	8004f76 <_printf_float+0x1da>
 80051b6:	f04f 0800 	mov.w	r8, #0
 80051ba:	f104 0b1a 	add.w	fp, r4, #26
 80051be:	e7f4      	b.n	80051aa <_printf_float+0x40e>
 80051c0:	2301      	movs	r3, #1
 80051c2:	4642      	mov	r2, r8
 80051c4:	e7e1      	b.n	800518a <_printf_float+0x3ee>
 80051c6:	2301      	movs	r3, #1
 80051c8:	464a      	mov	r2, r9
 80051ca:	4631      	mov	r1, r6
 80051cc:	4628      	mov	r0, r5
 80051ce:	47b8      	blx	r7
 80051d0:	3001      	adds	r0, #1
 80051d2:	f43f ae3e 	beq.w	8004e52 <_printf_float+0xb6>
 80051d6:	f108 0801 	add.w	r8, r8, #1
 80051da:	68e3      	ldr	r3, [r4, #12]
 80051dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80051de:	1a5b      	subs	r3, r3, r1
 80051e0:	4543      	cmp	r3, r8
 80051e2:	dcf0      	bgt.n	80051c6 <_printf_float+0x42a>
 80051e4:	e6fc      	b.n	8004fe0 <_printf_float+0x244>
 80051e6:	f04f 0800 	mov.w	r8, #0
 80051ea:	f104 0919 	add.w	r9, r4, #25
 80051ee:	e7f4      	b.n	80051da <_printf_float+0x43e>

080051f0 <_printf_common>:
 80051f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051f4:	4616      	mov	r6, r2
 80051f6:	4698      	mov	r8, r3
 80051f8:	688a      	ldr	r2, [r1, #8]
 80051fa:	690b      	ldr	r3, [r1, #16]
 80051fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005200:	4293      	cmp	r3, r2
 8005202:	bfb8      	it	lt
 8005204:	4613      	movlt	r3, r2
 8005206:	6033      	str	r3, [r6, #0]
 8005208:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800520c:	4607      	mov	r7, r0
 800520e:	460c      	mov	r4, r1
 8005210:	b10a      	cbz	r2, 8005216 <_printf_common+0x26>
 8005212:	3301      	adds	r3, #1
 8005214:	6033      	str	r3, [r6, #0]
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	0699      	lsls	r1, r3, #26
 800521a:	bf42      	ittt	mi
 800521c:	6833      	ldrmi	r3, [r6, #0]
 800521e:	3302      	addmi	r3, #2
 8005220:	6033      	strmi	r3, [r6, #0]
 8005222:	6825      	ldr	r5, [r4, #0]
 8005224:	f015 0506 	ands.w	r5, r5, #6
 8005228:	d106      	bne.n	8005238 <_printf_common+0x48>
 800522a:	f104 0a19 	add.w	sl, r4, #25
 800522e:	68e3      	ldr	r3, [r4, #12]
 8005230:	6832      	ldr	r2, [r6, #0]
 8005232:	1a9b      	subs	r3, r3, r2
 8005234:	42ab      	cmp	r3, r5
 8005236:	dc26      	bgt.n	8005286 <_printf_common+0x96>
 8005238:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800523c:	6822      	ldr	r2, [r4, #0]
 800523e:	3b00      	subs	r3, #0
 8005240:	bf18      	it	ne
 8005242:	2301      	movne	r3, #1
 8005244:	0692      	lsls	r2, r2, #26
 8005246:	d42b      	bmi.n	80052a0 <_printf_common+0xb0>
 8005248:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800524c:	4641      	mov	r1, r8
 800524e:	4638      	mov	r0, r7
 8005250:	47c8      	blx	r9
 8005252:	3001      	adds	r0, #1
 8005254:	d01e      	beq.n	8005294 <_printf_common+0xa4>
 8005256:	6823      	ldr	r3, [r4, #0]
 8005258:	6922      	ldr	r2, [r4, #16]
 800525a:	f003 0306 	and.w	r3, r3, #6
 800525e:	2b04      	cmp	r3, #4
 8005260:	bf02      	ittt	eq
 8005262:	68e5      	ldreq	r5, [r4, #12]
 8005264:	6833      	ldreq	r3, [r6, #0]
 8005266:	1aed      	subeq	r5, r5, r3
 8005268:	68a3      	ldr	r3, [r4, #8]
 800526a:	bf0c      	ite	eq
 800526c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005270:	2500      	movne	r5, #0
 8005272:	4293      	cmp	r3, r2
 8005274:	bfc4      	itt	gt
 8005276:	1a9b      	subgt	r3, r3, r2
 8005278:	18ed      	addgt	r5, r5, r3
 800527a:	2600      	movs	r6, #0
 800527c:	341a      	adds	r4, #26
 800527e:	42b5      	cmp	r5, r6
 8005280:	d11a      	bne.n	80052b8 <_printf_common+0xc8>
 8005282:	2000      	movs	r0, #0
 8005284:	e008      	b.n	8005298 <_printf_common+0xa8>
 8005286:	2301      	movs	r3, #1
 8005288:	4652      	mov	r2, sl
 800528a:	4641      	mov	r1, r8
 800528c:	4638      	mov	r0, r7
 800528e:	47c8      	blx	r9
 8005290:	3001      	adds	r0, #1
 8005292:	d103      	bne.n	800529c <_printf_common+0xac>
 8005294:	f04f 30ff 	mov.w	r0, #4294967295
 8005298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800529c:	3501      	adds	r5, #1
 800529e:	e7c6      	b.n	800522e <_printf_common+0x3e>
 80052a0:	18e1      	adds	r1, r4, r3
 80052a2:	1c5a      	adds	r2, r3, #1
 80052a4:	2030      	movs	r0, #48	@ 0x30
 80052a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80052aa:	4422      	add	r2, r4
 80052ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80052b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80052b4:	3302      	adds	r3, #2
 80052b6:	e7c7      	b.n	8005248 <_printf_common+0x58>
 80052b8:	2301      	movs	r3, #1
 80052ba:	4622      	mov	r2, r4
 80052bc:	4641      	mov	r1, r8
 80052be:	4638      	mov	r0, r7
 80052c0:	47c8      	blx	r9
 80052c2:	3001      	adds	r0, #1
 80052c4:	d0e6      	beq.n	8005294 <_printf_common+0xa4>
 80052c6:	3601      	adds	r6, #1
 80052c8:	e7d9      	b.n	800527e <_printf_common+0x8e>
	...

080052cc <_printf_i>:
 80052cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052d0:	7e0f      	ldrb	r7, [r1, #24]
 80052d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80052d4:	2f78      	cmp	r7, #120	@ 0x78
 80052d6:	4691      	mov	r9, r2
 80052d8:	4680      	mov	r8, r0
 80052da:	460c      	mov	r4, r1
 80052dc:	469a      	mov	sl, r3
 80052de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80052e2:	d807      	bhi.n	80052f4 <_printf_i+0x28>
 80052e4:	2f62      	cmp	r7, #98	@ 0x62
 80052e6:	d80a      	bhi.n	80052fe <_printf_i+0x32>
 80052e8:	2f00      	cmp	r7, #0
 80052ea:	f000 80d2 	beq.w	8005492 <_printf_i+0x1c6>
 80052ee:	2f58      	cmp	r7, #88	@ 0x58
 80052f0:	f000 80b9 	beq.w	8005466 <_printf_i+0x19a>
 80052f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80052fc:	e03a      	b.n	8005374 <_printf_i+0xa8>
 80052fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005302:	2b15      	cmp	r3, #21
 8005304:	d8f6      	bhi.n	80052f4 <_printf_i+0x28>
 8005306:	a101      	add	r1, pc, #4	@ (adr r1, 800530c <_printf_i+0x40>)
 8005308:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800530c:	08005365 	.word	0x08005365
 8005310:	08005379 	.word	0x08005379
 8005314:	080052f5 	.word	0x080052f5
 8005318:	080052f5 	.word	0x080052f5
 800531c:	080052f5 	.word	0x080052f5
 8005320:	080052f5 	.word	0x080052f5
 8005324:	08005379 	.word	0x08005379
 8005328:	080052f5 	.word	0x080052f5
 800532c:	080052f5 	.word	0x080052f5
 8005330:	080052f5 	.word	0x080052f5
 8005334:	080052f5 	.word	0x080052f5
 8005338:	08005479 	.word	0x08005479
 800533c:	080053a3 	.word	0x080053a3
 8005340:	08005433 	.word	0x08005433
 8005344:	080052f5 	.word	0x080052f5
 8005348:	080052f5 	.word	0x080052f5
 800534c:	0800549b 	.word	0x0800549b
 8005350:	080052f5 	.word	0x080052f5
 8005354:	080053a3 	.word	0x080053a3
 8005358:	080052f5 	.word	0x080052f5
 800535c:	080052f5 	.word	0x080052f5
 8005360:	0800543b 	.word	0x0800543b
 8005364:	6833      	ldr	r3, [r6, #0]
 8005366:	1d1a      	adds	r2, r3, #4
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6032      	str	r2, [r6, #0]
 800536c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005370:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005374:	2301      	movs	r3, #1
 8005376:	e09d      	b.n	80054b4 <_printf_i+0x1e8>
 8005378:	6833      	ldr	r3, [r6, #0]
 800537a:	6820      	ldr	r0, [r4, #0]
 800537c:	1d19      	adds	r1, r3, #4
 800537e:	6031      	str	r1, [r6, #0]
 8005380:	0606      	lsls	r6, r0, #24
 8005382:	d501      	bpl.n	8005388 <_printf_i+0xbc>
 8005384:	681d      	ldr	r5, [r3, #0]
 8005386:	e003      	b.n	8005390 <_printf_i+0xc4>
 8005388:	0645      	lsls	r5, r0, #25
 800538a:	d5fb      	bpl.n	8005384 <_printf_i+0xb8>
 800538c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005390:	2d00      	cmp	r5, #0
 8005392:	da03      	bge.n	800539c <_printf_i+0xd0>
 8005394:	232d      	movs	r3, #45	@ 0x2d
 8005396:	426d      	negs	r5, r5
 8005398:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800539c:	4859      	ldr	r0, [pc, #356]	@ (8005504 <_printf_i+0x238>)
 800539e:	230a      	movs	r3, #10
 80053a0:	e011      	b.n	80053c6 <_printf_i+0xfa>
 80053a2:	6821      	ldr	r1, [r4, #0]
 80053a4:	6833      	ldr	r3, [r6, #0]
 80053a6:	0608      	lsls	r0, r1, #24
 80053a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80053ac:	d402      	bmi.n	80053b4 <_printf_i+0xe8>
 80053ae:	0649      	lsls	r1, r1, #25
 80053b0:	bf48      	it	mi
 80053b2:	b2ad      	uxthmi	r5, r5
 80053b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80053b6:	4853      	ldr	r0, [pc, #332]	@ (8005504 <_printf_i+0x238>)
 80053b8:	6033      	str	r3, [r6, #0]
 80053ba:	bf14      	ite	ne
 80053bc:	230a      	movne	r3, #10
 80053be:	2308      	moveq	r3, #8
 80053c0:	2100      	movs	r1, #0
 80053c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80053c6:	6866      	ldr	r6, [r4, #4]
 80053c8:	60a6      	str	r6, [r4, #8]
 80053ca:	2e00      	cmp	r6, #0
 80053cc:	bfa2      	ittt	ge
 80053ce:	6821      	ldrge	r1, [r4, #0]
 80053d0:	f021 0104 	bicge.w	r1, r1, #4
 80053d4:	6021      	strge	r1, [r4, #0]
 80053d6:	b90d      	cbnz	r5, 80053dc <_printf_i+0x110>
 80053d8:	2e00      	cmp	r6, #0
 80053da:	d04b      	beq.n	8005474 <_printf_i+0x1a8>
 80053dc:	4616      	mov	r6, r2
 80053de:	fbb5 f1f3 	udiv	r1, r5, r3
 80053e2:	fb03 5711 	mls	r7, r3, r1, r5
 80053e6:	5dc7      	ldrb	r7, [r0, r7]
 80053e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053ec:	462f      	mov	r7, r5
 80053ee:	42bb      	cmp	r3, r7
 80053f0:	460d      	mov	r5, r1
 80053f2:	d9f4      	bls.n	80053de <_printf_i+0x112>
 80053f4:	2b08      	cmp	r3, #8
 80053f6:	d10b      	bne.n	8005410 <_printf_i+0x144>
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	07df      	lsls	r7, r3, #31
 80053fc:	d508      	bpl.n	8005410 <_printf_i+0x144>
 80053fe:	6923      	ldr	r3, [r4, #16]
 8005400:	6861      	ldr	r1, [r4, #4]
 8005402:	4299      	cmp	r1, r3
 8005404:	bfde      	ittt	le
 8005406:	2330      	movle	r3, #48	@ 0x30
 8005408:	f806 3c01 	strble.w	r3, [r6, #-1]
 800540c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005410:	1b92      	subs	r2, r2, r6
 8005412:	6122      	str	r2, [r4, #16]
 8005414:	f8cd a000 	str.w	sl, [sp]
 8005418:	464b      	mov	r3, r9
 800541a:	aa03      	add	r2, sp, #12
 800541c:	4621      	mov	r1, r4
 800541e:	4640      	mov	r0, r8
 8005420:	f7ff fee6 	bl	80051f0 <_printf_common>
 8005424:	3001      	adds	r0, #1
 8005426:	d14a      	bne.n	80054be <_printf_i+0x1f2>
 8005428:	f04f 30ff 	mov.w	r0, #4294967295
 800542c:	b004      	add	sp, #16
 800542e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	f043 0320 	orr.w	r3, r3, #32
 8005438:	6023      	str	r3, [r4, #0]
 800543a:	4833      	ldr	r0, [pc, #204]	@ (8005508 <_printf_i+0x23c>)
 800543c:	2778      	movs	r7, #120	@ 0x78
 800543e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005442:	6823      	ldr	r3, [r4, #0]
 8005444:	6831      	ldr	r1, [r6, #0]
 8005446:	061f      	lsls	r7, r3, #24
 8005448:	f851 5b04 	ldr.w	r5, [r1], #4
 800544c:	d402      	bmi.n	8005454 <_printf_i+0x188>
 800544e:	065f      	lsls	r7, r3, #25
 8005450:	bf48      	it	mi
 8005452:	b2ad      	uxthmi	r5, r5
 8005454:	6031      	str	r1, [r6, #0]
 8005456:	07d9      	lsls	r1, r3, #31
 8005458:	bf44      	itt	mi
 800545a:	f043 0320 	orrmi.w	r3, r3, #32
 800545e:	6023      	strmi	r3, [r4, #0]
 8005460:	b11d      	cbz	r5, 800546a <_printf_i+0x19e>
 8005462:	2310      	movs	r3, #16
 8005464:	e7ac      	b.n	80053c0 <_printf_i+0xf4>
 8005466:	4827      	ldr	r0, [pc, #156]	@ (8005504 <_printf_i+0x238>)
 8005468:	e7e9      	b.n	800543e <_printf_i+0x172>
 800546a:	6823      	ldr	r3, [r4, #0]
 800546c:	f023 0320 	bic.w	r3, r3, #32
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	e7f6      	b.n	8005462 <_printf_i+0x196>
 8005474:	4616      	mov	r6, r2
 8005476:	e7bd      	b.n	80053f4 <_printf_i+0x128>
 8005478:	6833      	ldr	r3, [r6, #0]
 800547a:	6825      	ldr	r5, [r4, #0]
 800547c:	6961      	ldr	r1, [r4, #20]
 800547e:	1d18      	adds	r0, r3, #4
 8005480:	6030      	str	r0, [r6, #0]
 8005482:	062e      	lsls	r6, r5, #24
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	d501      	bpl.n	800548c <_printf_i+0x1c0>
 8005488:	6019      	str	r1, [r3, #0]
 800548a:	e002      	b.n	8005492 <_printf_i+0x1c6>
 800548c:	0668      	lsls	r0, r5, #25
 800548e:	d5fb      	bpl.n	8005488 <_printf_i+0x1bc>
 8005490:	8019      	strh	r1, [r3, #0]
 8005492:	2300      	movs	r3, #0
 8005494:	6123      	str	r3, [r4, #16]
 8005496:	4616      	mov	r6, r2
 8005498:	e7bc      	b.n	8005414 <_printf_i+0x148>
 800549a:	6833      	ldr	r3, [r6, #0]
 800549c:	1d1a      	adds	r2, r3, #4
 800549e:	6032      	str	r2, [r6, #0]
 80054a0:	681e      	ldr	r6, [r3, #0]
 80054a2:	6862      	ldr	r2, [r4, #4]
 80054a4:	2100      	movs	r1, #0
 80054a6:	4630      	mov	r0, r6
 80054a8:	f7fa feba 	bl	8000220 <memchr>
 80054ac:	b108      	cbz	r0, 80054b2 <_printf_i+0x1e6>
 80054ae:	1b80      	subs	r0, r0, r6
 80054b0:	6060      	str	r0, [r4, #4]
 80054b2:	6863      	ldr	r3, [r4, #4]
 80054b4:	6123      	str	r3, [r4, #16]
 80054b6:	2300      	movs	r3, #0
 80054b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054bc:	e7aa      	b.n	8005414 <_printf_i+0x148>
 80054be:	6923      	ldr	r3, [r4, #16]
 80054c0:	4632      	mov	r2, r6
 80054c2:	4649      	mov	r1, r9
 80054c4:	4640      	mov	r0, r8
 80054c6:	47d0      	blx	sl
 80054c8:	3001      	adds	r0, #1
 80054ca:	d0ad      	beq.n	8005428 <_printf_i+0x15c>
 80054cc:	6823      	ldr	r3, [r4, #0]
 80054ce:	079b      	lsls	r3, r3, #30
 80054d0:	d413      	bmi.n	80054fa <_printf_i+0x22e>
 80054d2:	68e0      	ldr	r0, [r4, #12]
 80054d4:	9b03      	ldr	r3, [sp, #12]
 80054d6:	4298      	cmp	r0, r3
 80054d8:	bfb8      	it	lt
 80054da:	4618      	movlt	r0, r3
 80054dc:	e7a6      	b.n	800542c <_printf_i+0x160>
 80054de:	2301      	movs	r3, #1
 80054e0:	4632      	mov	r2, r6
 80054e2:	4649      	mov	r1, r9
 80054e4:	4640      	mov	r0, r8
 80054e6:	47d0      	blx	sl
 80054e8:	3001      	adds	r0, #1
 80054ea:	d09d      	beq.n	8005428 <_printf_i+0x15c>
 80054ec:	3501      	adds	r5, #1
 80054ee:	68e3      	ldr	r3, [r4, #12]
 80054f0:	9903      	ldr	r1, [sp, #12]
 80054f2:	1a5b      	subs	r3, r3, r1
 80054f4:	42ab      	cmp	r3, r5
 80054f6:	dcf2      	bgt.n	80054de <_printf_i+0x212>
 80054f8:	e7eb      	b.n	80054d2 <_printf_i+0x206>
 80054fa:	2500      	movs	r5, #0
 80054fc:	f104 0619 	add.w	r6, r4, #25
 8005500:	e7f5      	b.n	80054ee <_printf_i+0x222>
 8005502:	bf00      	nop
 8005504:	0800942e 	.word	0x0800942e
 8005508:	0800943f 	.word	0x0800943f

0800550c <_scanf_float>:
 800550c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005510:	b087      	sub	sp, #28
 8005512:	4617      	mov	r7, r2
 8005514:	9303      	str	r3, [sp, #12]
 8005516:	688b      	ldr	r3, [r1, #8]
 8005518:	1e5a      	subs	r2, r3, #1
 800551a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800551e:	bf81      	itttt	hi
 8005520:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005524:	eb03 0b05 	addhi.w	fp, r3, r5
 8005528:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800552c:	608b      	strhi	r3, [r1, #8]
 800552e:	680b      	ldr	r3, [r1, #0]
 8005530:	460a      	mov	r2, r1
 8005532:	f04f 0500 	mov.w	r5, #0
 8005536:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800553a:	f842 3b1c 	str.w	r3, [r2], #28
 800553e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005542:	4680      	mov	r8, r0
 8005544:	460c      	mov	r4, r1
 8005546:	bf98      	it	ls
 8005548:	f04f 0b00 	movls.w	fp, #0
 800554c:	9201      	str	r2, [sp, #4]
 800554e:	4616      	mov	r6, r2
 8005550:	46aa      	mov	sl, r5
 8005552:	46a9      	mov	r9, r5
 8005554:	9502      	str	r5, [sp, #8]
 8005556:	68a2      	ldr	r2, [r4, #8]
 8005558:	b152      	cbz	r2, 8005570 <_scanf_float+0x64>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	2b4e      	cmp	r3, #78	@ 0x4e
 8005560:	d864      	bhi.n	800562c <_scanf_float+0x120>
 8005562:	2b40      	cmp	r3, #64	@ 0x40
 8005564:	d83c      	bhi.n	80055e0 <_scanf_float+0xd4>
 8005566:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800556a:	b2c8      	uxtb	r0, r1
 800556c:	280e      	cmp	r0, #14
 800556e:	d93a      	bls.n	80055e6 <_scanf_float+0xda>
 8005570:	f1b9 0f00 	cmp.w	r9, #0
 8005574:	d003      	beq.n	800557e <_scanf_float+0x72>
 8005576:	6823      	ldr	r3, [r4, #0]
 8005578:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800557c:	6023      	str	r3, [r4, #0]
 800557e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005582:	f1ba 0f01 	cmp.w	sl, #1
 8005586:	f200 8117 	bhi.w	80057b8 <_scanf_float+0x2ac>
 800558a:	9b01      	ldr	r3, [sp, #4]
 800558c:	429e      	cmp	r6, r3
 800558e:	f200 8108 	bhi.w	80057a2 <_scanf_float+0x296>
 8005592:	2001      	movs	r0, #1
 8005594:	b007      	add	sp, #28
 8005596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800559a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800559e:	2a0d      	cmp	r2, #13
 80055a0:	d8e6      	bhi.n	8005570 <_scanf_float+0x64>
 80055a2:	a101      	add	r1, pc, #4	@ (adr r1, 80055a8 <_scanf_float+0x9c>)
 80055a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80055a8:	080056ef 	.word	0x080056ef
 80055ac:	08005571 	.word	0x08005571
 80055b0:	08005571 	.word	0x08005571
 80055b4:	08005571 	.word	0x08005571
 80055b8:	0800574f 	.word	0x0800574f
 80055bc:	08005727 	.word	0x08005727
 80055c0:	08005571 	.word	0x08005571
 80055c4:	08005571 	.word	0x08005571
 80055c8:	080056fd 	.word	0x080056fd
 80055cc:	08005571 	.word	0x08005571
 80055d0:	08005571 	.word	0x08005571
 80055d4:	08005571 	.word	0x08005571
 80055d8:	08005571 	.word	0x08005571
 80055dc:	080056b5 	.word	0x080056b5
 80055e0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80055e4:	e7db      	b.n	800559e <_scanf_float+0x92>
 80055e6:	290e      	cmp	r1, #14
 80055e8:	d8c2      	bhi.n	8005570 <_scanf_float+0x64>
 80055ea:	a001      	add	r0, pc, #4	@ (adr r0, 80055f0 <_scanf_float+0xe4>)
 80055ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80055f0:	080056a5 	.word	0x080056a5
 80055f4:	08005571 	.word	0x08005571
 80055f8:	080056a5 	.word	0x080056a5
 80055fc:	0800573b 	.word	0x0800573b
 8005600:	08005571 	.word	0x08005571
 8005604:	0800564d 	.word	0x0800564d
 8005608:	0800568b 	.word	0x0800568b
 800560c:	0800568b 	.word	0x0800568b
 8005610:	0800568b 	.word	0x0800568b
 8005614:	0800568b 	.word	0x0800568b
 8005618:	0800568b 	.word	0x0800568b
 800561c:	0800568b 	.word	0x0800568b
 8005620:	0800568b 	.word	0x0800568b
 8005624:	0800568b 	.word	0x0800568b
 8005628:	0800568b 	.word	0x0800568b
 800562c:	2b6e      	cmp	r3, #110	@ 0x6e
 800562e:	d809      	bhi.n	8005644 <_scanf_float+0x138>
 8005630:	2b60      	cmp	r3, #96	@ 0x60
 8005632:	d8b2      	bhi.n	800559a <_scanf_float+0x8e>
 8005634:	2b54      	cmp	r3, #84	@ 0x54
 8005636:	d07b      	beq.n	8005730 <_scanf_float+0x224>
 8005638:	2b59      	cmp	r3, #89	@ 0x59
 800563a:	d199      	bne.n	8005570 <_scanf_float+0x64>
 800563c:	2d07      	cmp	r5, #7
 800563e:	d197      	bne.n	8005570 <_scanf_float+0x64>
 8005640:	2508      	movs	r5, #8
 8005642:	e02c      	b.n	800569e <_scanf_float+0x192>
 8005644:	2b74      	cmp	r3, #116	@ 0x74
 8005646:	d073      	beq.n	8005730 <_scanf_float+0x224>
 8005648:	2b79      	cmp	r3, #121	@ 0x79
 800564a:	e7f6      	b.n	800563a <_scanf_float+0x12e>
 800564c:	6821      	ldr	r1, [r4, #0]
 800564e:	05c8      	lsls	r0, r1, #23
 8005650:	d51b      	bpl.n	800568a <_scanf_float+0x17e>
 8005652:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005656:	6021      	str	r1, [r4, #0]
 8005658:	f109 0901 	add.w	r9, r9, #1
 800565c:	f1bb 0f00 	cmp.w	fp, #0
 8005660:	d003      	beq.n	800566a <_scanf_float+0x15e>
 8005662:	3201      	adds	r2, #1
 8005664:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005668:	60a2      	str	r2, [r4, #8]
 800566a:	68a3      	ldr	r3, [r4, #8]
 800566c:	3b01      	subs	r3, #1
 800566e:	60a3      	str	r3, [r4, #8]
 8005670:	6923      	ldr	r3, [r4, #16]
 8005672:	3301      	adds	r3, #1
 8005674:	6123      	str	r3, [r4, #16]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	3b01      	subs	r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	607b      	str	r3, [r7, #4]
 800567e:	f340 8087 	ble.w	8005790 <_scanf_float+0x284>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	3301      	adds	r3, #1
 8005686:	603b      	str	r3, [r7, #0]
 8005688:	e765      	b.n	8005556 <_scanf_float+0x4a>
 800568a:	eb1a 0105 	adds.w	r1, sl, r5
 800568e:	f47f af6f 	bne.w	8005570 <_scanf_float+0x64>
 8005692:	6822      	ldr	r2, [r4, #0]
 8005694:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005698:	6022      	str	r2, [r4, #0]
 800569a:	460d      	mov	r5, r1
 800569c:	468a      	mov	sl, r1
 800569e:	f806 3b01 	strb.w	r3, [r6], #1
 80056a2:	e7e2      	b.n	800566a <_scanf_float+0x15e>
 80056a4:	6822      	ldr	r2, [r4, #0]
 80056a6:	0610      	lsls	r0, r2, #24
 80056a8:	f57f af62 	bpl.w	8005570 <_scanf_float+0x64>
 80056ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80056b0:	6022      	str	r2, [r4, #0]
 80056b2:	e7f4      	b.n	800569e <_scanf_float+0x192>
 80056b4:	f1ba 0f00 	cmp.w	sl, #0
 80056b8:	d10e      	bne.n	80056d8 <_scanf_float+0x1cc>
 80056ba:	f1b9 0f00 	cmp.w	r9, #0
 80056be:	d10e      	bne.n	80056de <_scanf_float+0x1d2>
 80056c0:	6822      	ldr	r2, [r4, #0]
 80056c2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80056c6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80056ca:	d108      	bne.n	80056de <_scanf_float+0x1d2>
 80056cc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80056d0:	6022      	str	r2, [r4, #0]
 80056d2:	f04f 0a01 	mov.w	sl, #1
 80056d6:	e7e2      	b.n	800569e <_scanf_float+0x192>
 80056d8:	f1ba 0f02 	cmp.w	sl, #2
 80056dc:	d055      	beq.n	800578a <_scanf_float+0x27e>
 80056de:	2d01      	cmp	r5, #1
 80056e0:	d002      	beq.n	80056e8 <_scanf_float+0x1dc>
 80056e2:	2d04      	cmp	r5, #4
 80056e4:	f47f af44 	bne.w	8005570 <_scanf_float+0x64>
 80056e8:	3501      	adds	r5, #1
 80056ea:	b2ed      	uxtb	r5, r5
 80056ec:	e7d7      	b.n	800569e <_scanf_float+0x192>
 80056ee:	f1ba 0f01 	cmp.w	sl, #1
 80056f2:	f47f af3d 	bne.w	8005570 <_scanf_float+0x64>
 80056f6:	f04f 0a02 	mov.w	sl, #2
 80056fa:	e7d0      	b.n	800569e <_scanf_float+0x192>
 80056fc:	b97d      	cbnz	r5, 800571e <_scanf_float+0x212>
 80056fe:	f1b9 0f00 	cmp.w	r9, #0
 8005702:	f47f af38 	bne.w	8005576 <_scanf_float+0x6a>
 8005706:	6822      	ldr	r2, [r4, #0]
 8005708:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800570c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005710:	f040 8108 	bne.w	8005924 <_scanf_float+0x418>
 8005714:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005718:	6022      	str	r2, [r4, #0]
 800571a:	2501      	movs	r5, #1
 800571c:	e7bf      	b.n	800569e <_scanf_float+0x192>
 800571e:	2d03      	cmp	r5, #3
 8005720:	d0e2      	beq.n	80056e8 <_scanf_float+0x1dc>
 8005722:	2d05      	cmp	r5, #5
 8005724:	e7de      	b.n	80056e4 <_scanf_float+0x1d8>
 8005726:	2d02      	cmp	r5, #2
 8005728:	f47f af22 	bne.w	8005570 <_scanf_float+0x64>
 800572c:	2503      	movs	r5, #3
 800572e:	e7b6      	b.n	800569e <_scanf_float+0x192>
 8005730:	2d06      	cmp	r5, #6
 8005732:	f47f af1d 	bne.w	8005570 <_scanf_float+0x64>
 8005736:	2507      	movs	r5, #7
 8005738:	e7b1      	b.n	800569e <_scanf_float+0x192>
 800573a:	6822      	ldr	r2, [r4, #0]
 800573c:	0591      	lsls	r1, r2, #22
 800573e:	f57f af17 	bpl.w	8005570 <_scanf_float+0x64>
 8005742:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005746:	6022      	str	r2, [r4, #0]
 8005748:	f8cd 9008 	str.w	r9, [sp, #8]
 800574c:	e7a7      	b.n	800569e <_scanf_float+0x192>
 800574e:	6822      	ldr	r2, [r4, #0]
 8005750:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005754:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005758:	d006      	beq.n	8005768 <_scanf_float+0x25c>
 800575a:	0550      	lsls	r0, r2, #21
 800575c:	f57f af08 	bpl.w	8005570 <_scanf_float+0x64>
 8005760:	f1b9 0f00 	cmp.w	r9, #0
 8005764:	f000 80de 	beq.w	8005924 <_scanf_float+0x418>
 8005768:	0591      	lsls	r1, r2, #22
 800576a:	bf58      	it	pl
 800576c:	9902      	ldrpl	r1, [sp, #8]
 800576e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005772:	bf58      	it	pl
 8005774:	eba9 0101 	subpl.w	r1, r9, r1
 8005778:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800577c:	bf58      	it	pl
 800577e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005782:	6022      	str	r2, [r4, #0]
 8005784:	f04f 0900 	mov.w	r9, #0
 8005788:	e789      	b.n	800569e <_scanf_float+0x192>
 800578a:	f04f 0a03 	mov.w	sl, #3
 800578e:	e786      	b.n	800569e <_scanf_float+0x192>
 8005790:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005794:	4639      	mov	r1, r7
 8005796:	4640      	mov	r0, r8
 8005798:	4798      	blx	r3
 800579a:	2800      	cmp	r0, #0
 800579c:	f43f aedb 	beq.w	8005556 <_scanf_float+0x4a>
 80057a0:	e6e6      	b.n	8005570 <_scanf_float+0x64>
 80057a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80057a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80057aa:	463a      	mov	r2, r7
 80057ac:	4640      	mov	r0, r8
 80057ae:	4798      	blx	r3
 80057b0:	6923      	ldr	r3, [r4, #16]
 80057b2:	3b01      	subs	r3, #1
 80057b4:	6123      	str	r3, [r4, #16]
 80057b6:	e6e8      	b.n	800558a <_scanf_float+0x7e>
 80057b8:	1e6b      	subs	r3, r5, #1
 80057ba:	2b06      	cmp	r3, #6
 80057bc:	d824      	bhi.n	8005808 <_scanf_float+0x2fc>
 80057be:	2d02      	cmp	r5, #2
 80057c0:	d836      	bhi.n	8005830 <_scanf_float+0x324>
 80057c2:	9b01      	ldr	r3, [sp, #4]
 80057c4:	429e      	cmp	r6, r3
 80057c6:	f67f aee4 	bls.w	8005592 <_scanf_float+0x86>
 80057ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80057ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80057d2:	463a      	mov	r2, r7
 80057d4:	4640      	mov	r0, r8
 80057d6:	4798      	blx	r3
 80057d8:	6923      	ldr	r3, [r4, #16]
 80057da:	3b01      	subs	r3, #1
 80057dc:	6123      	str	r3, [r4, #16]
 80057de:	e7f0      	b.n	80057c2 <_scanf_float+0x2b6>
 80057e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80057e4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80057e8:	463a      	mov	r2, r7
 80057ea:	4640      	mov	r0, r8
 80057ec:	4798      	blx	r3
 80057ee:	6923      	ldr	r3, [r4, #16]
 80057f0:	3b01      	subs	r3, #1
 80057f2:	6123      	str	r3, [r4, #16]
 80057f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057f8:	fa5f fa8a 	uxtb.w	sl, sl
 80057fc:	f1ba 0f02 	cmp.w	sl, #2
 8005800:	d1ee      	bne.n	80057e0 <_scanf_float+0x2d4>
 8005802:	3d03      	subs	r5, #3
 8005804:	b2ed      	uxtb	r5, r5
 8005806:	1b76      	subs	r6, r6, r5
 8005808:	6823      	ldr	r3, [r4, #0]
 800580a:	05da      	lsls	r2, r3, #23
 800580c:	d530      	bpl.n	8005870 <_scanf_float+0x364>
 800580e:	055b      	lsls	r3, r3, #21
 8005810:	d511      	bpl.n	8005836 <_scanf_float+0x32a>
 8005812:	9b01      	ldr	r3, [sp, #4]
 8005814:	429e      	cmp	r6, r3
 8005816:	f67f aebc 	bls.w	8005592 <_scanf_float+0x86>
 800581a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800581e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005822:	463a      	mov	r2, r7
 8005824:	4640      	mov	r0, r8
 8005826:	4798      	blx	r3
 8005828:	6923      	ldr	r3, [r4, #16]
 800582a:	3b01      	subs	r3, #1
 800582c:	6123      	str	r3, [r4, #16]
 800582e:	e7f0      	b.n	8005812 <_scanf_float+0x306>
 8005830:	46aa      	mov	sl, r5
 8005832:	46b3      	mov	fp, r6
 8005834:	e7de      	b.n	80057f4 <_scanf_float+0x2e8>
 8005836:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800583a:	6923      	ldr	r3, [r4, #16]
 800583c:	2965      	cmp	r1, #101	@ 0x65
 800583e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005842:	f106 35ff 	add.w	r5, r6, #4294967295
 8005846:	6123      	str	r3, [r4, #16]
 8005848:	d00c      	beq.n	8005864 <_scanf_float+0x358>
 800584a:	2945      	cmp	r1, #69	@ 0x45
 800584c:	d00a      	beq.n	8005864 <_scanf_float+0x358>
 800584e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005852:	463a      	mov	r2, r7
 8005854:	4640      	mov	r0, r8
 8005856:	4798      	blx	r3
 8005858:	6923      	ldr	r3, [r4, #16]
 800585a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800585e:	3b01      	subs	r3, #1
 8005860:	1eb5      	subs	r5, r6, #2
 8005862:	6123      	str	r3, [r4, #16]
 8005864:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005868:	463a      	mov	r2, r7
 800586a:	4640      	mov	r0, r8
 800586c:	4798      	blx	r3
 800586e:	462e      	mov	r6, r5
 8005870:	6822      	ldr	r2, [r4, #0]
 8005872:	f012 0210 	ands.w	r2, r2, #16
 8005876:	d001      	beq.n	800587c <_scanf_float+0x370>
 8005878:	2000      	movs	r0, #0
 800587a:	e68b      	b.n	8005594 <_scanf_float+0x88>
 800587c:	7032      	strb	r2, [r6, #0]
 800587e:	6823      	ldr	r3, [r4, #0]
 8005880:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005884:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005888:	d11c      	bne.n	80058c4 <_scanf_float+0x3b8>
 800588a:	9b02      	ldr	r3, [sp, #8]
 800588c:	454b      	cmp	r3, r9
 800588e:	eba3 0209 	sub.w	r2, r3, r9
 8005892:	d123      	bne.n	80058dc <_scanf_float+0x3d0>
 8005894:	9901      	ldr	r1, [sp, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	4640      	mov	r0, r8
 800589a:	f002 fc2d 	bl	80080f8 <_strtod_r>
 800589e:	9b03      	ldr	r3, [sp, #12]
 80058a0:	6821      	ldr	r1, [r4, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f011 0f02 	tst.w	r1, #2
 80058a8:	ec57 6b10 	vmov	r6, r7, d0
 80058ac:	f103 0204 	add.w	r2, r3, #4
 80058b0:	d01f      	beq.n	80058f2 <_scanf_float+0x3e6>
 80058b2:	9903      	ldr	r1, [sp, #12]
 80058b4:	600a      	str	r2, [r1, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	e9c3 6700 	strd	r6, r7, [r3]
 80058bc:	68e3      	ldr	r3, [r4, #12]
 80058be:	3301      	adds	r3, #1
 80058c0:	60e3      	str	r3, [r4, #12]
 80058c2:	e7d9      	b.n	8005878 <_scanf_float+0x36c>
 80058c4:	9b04      	ldr	r3, [sp, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d0e4      	beq.n	8005894 <_scanf_float+0x388>
 80058ca:	9905      	ldr	r1, [sp, #20]
 80058cc:	230a      	movs	r3, #10
 80058ce:	3101      	adds	r1, #1
 80058d0:	4640      	mov	r0, r8
 80058d2:	f002 fc91 	bl	80081f8 <_strtol_r>
 80058d6:	9b04      	ldr	r3, [sp, #16]
 80058d8:	9e05      	ldr	r6, [sp, #20]
 80058da:	1ac2      	subs	r2, r0, r3
 80058dc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80058e0:	429e      	cmp	r6, r3
 80058e2:	bf28      	it	cs
 80058e4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80058e8:	4910      	ldr	r1, [pc, #64]	@ (800592c <_scanf_float+0x420>)
 80058ea:	4630      	mov	r0, r6
 80058ec:	f000 f918 	bl	8005b20 <siprintf>
 80058f0:	e7d0      	b.n	8005894 <_scanf_float+0x388>
 80058f2:	f011 0f04 	tst.w	r1, #4
 80058f6:	9903      	ldr	r1, [sp, #12]
 80058f8:	600a      	str	r2, [r1, #0]
 80058fa:	d1dc      	bne.n	80058b6 <_scanf_float+0x3aa>
 80058fc:	681d      	ldr	r5, [r3, #0]
 80058fe:	4632      	mov	r2, r6
 8005900:	463b      	mov	r3, r7
 8005902:	4630      	mov	r0, r6
 8005904:	4639      	mov	r1, r7
 8005906:	f7fb f939 	bl	8000b7c <__aeabi_dcmpun>
 800590a:	b128      	cbz	r0, 8005918 <_scanf_float+0x40c>
 800590c:	4808      	ldr	r0, [pc, #32]	@ (8005930 <_scanf_float+0x424>)
 800590e:	f000 f9eb 	bl	8005ce8 <nanf>
 8005912:	ed85 0a00 	vstr	s0, [r5]
 8005916:	e7d1      	b.n	80058bc <_scanf_float+0x3b0>
 8005918:	4630      	mov	r0, r6
 800591a:	4639      	mov	r1, r7
 800591c:	f7fb f98c 	bl	8000c38 <__aeabi_d2f>
 8005920:	6028      	str	r0, [r5, #0]
 8005922:	e7cb      	b.n	80058bc <_scanf_float+0x3b0>
 8005924:	f04f 0900 	mov.w	r9, #0
 8005928:	e629      	b.n	800557e <_scanf_float+0x72>
 800592a:	bf00      	nop
 800592c:	08009450 	.word	0x08009450
 8005930:	080097e5 	.word	0x080097e5

08005934 <std>:
 8005934:	2300      	movs	r3, #0
 8005936:	b510      	push	{r4, lr}
 8005938:	4604      	mov	r4, r0
 800593a:	e9c0 3300 	strd	r3, r3, [r0]
 800593e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005942:	6083      	str	r3, [r0, #8]
 8005944:	8181      	strh	r1, [r0, #12]
 8005946:	6643      	str	r3, [r0, #100]	@ 0x64
 8005948:	81c2      	strh	r2, [r0, #14]
 800594a:	6183      	str	r3, [r0, #24]
 800594c:	4619      	mov	r1, r3
 800594e:	2208      	movs	r2, #8
 8005950:	305c      	adds	r0, #92	@ 0x5c
 8005952:	f000 f948 	bl	8005be6 <memset>
 8005956:	4b0d      	ldr	r3, [pc, #52]	@ (800598c <std+0x58>)
 8005958:	6263      	str	r3, [r4, #36]	@ 0x24
 800595a:	4b0d      	ldr	r3, [pc, #52]	@ (8005990 <std+0x5c>)
 800595c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800595e:	4b0d      	ldr	r3, [pc, #52]	@ (8005994 <std+0x60>)
 8005960:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005962:	4b0d      	ldr	r3, [pc, #52]	@ (8005998 <std+0x64>)
 8005964:	6323      	str	r3, [r4, #48]	@ 0x30
 8005966:	4b0d      	ldr	r3, [pc, #52]	@ (800599c <std+0x68>)
 8005968:	6224      	str	r4, [r4, #32]
 800596a:	429c      	cmp	r4, r3
 800596c:	d006      	beq.n	800597c <std+0x48>
 800596e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005972:	4294      	cmp	r4, r2
 8005974:	d002      	beq.n	800597c <std+0x48>
 8005976:	33d0      	adds	r3, #208	@ 0xd0
 8005978:	429c      	cmp	r4, r3
 800597a:	d105      	bne.n	8005988 <std+0x54>
 800597c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005984:	f000 b9ac 	b.w	8005ce0 <__retarget_lock_init_recursive>
 8005988:	bd10      	pop	{r4, pc}
 800598a:	bf00      	nop
 800598c:	08005b61 	.word	0x08005b61
 8005990:	08005b83 	.word	0x08005b83
 8005994:	08005bbb 	.word	0x08005bbb
 8005998:	08005bdf 	.word	0x08005bdf
 800599c:	20000404 	.word	0x20000404

080059a0 <stdio_exit_handler>:
 80059a0:	4a02      	ldr	r2, [pc, #8]	@ (80059ac <stdio_exit_handler+0xc>)
 80059a2:	4903      	ldr	r1, [pc, #12]	@ (80059b0 <stdio_exit_handler+0x10>)
 80059a4:	4803      	ldr	r0, [pc, #12]	@ (80059b4 <stdio_exit_handler+0x14>)
 80059a6:	f000 b869 	b.w	8005a7c <_fwalk_sglue>
 80059aa:	bf00      	nop
 80059ac:	20000010 	.word	0x20000010
 80059b0:	080085b5 	.word	0x080085b5
 80059b4:	20000020 	.word	0x20000020

080059b8 <cleanup_stdio>:
 80059b8:	6841      	ldr	r1, [r0, #4]
 80059ba:	4b0c      	ldr	r3, [pc, #48]	@ (80059ec <cleanup_stdio+0x34>)
 80059bc:	4299      	cmp	r1, r3
 80059be:	b510      	push	{r4, lr}
 80059c0:	4604      	mov	r4, r0
 80059c2:	d001      	beq.n	80059c8 <cleanup_stdio+0x10>
 80059c4:	f002 fdf6 	bl	80085b4 <_fflush_r>
 80059c8:	68a1      	ldr	r1, [r4, #8]
 80059ca:	4b09      	ldr	r3, [pc, #36]	@ (80059f0 <cleanup_stdio+0x38>)
 80059cc:	4299      	cmp	r1, r3
 80059ce:	d002      	beq.n	80059d6 <cleanup_stdio+0x1e>
 80059d0:	4620      	mov	r0, r4
 80059d2:	f002 fdef 	bl	80085b4 <_fflush_r>
 80059d6:	68e1      	ldr	r1, [r4, #12]
 80059d8:	4b06      	ldr	r3, [pc, #24]	@ (80059f4 <cleanup_stdio+0x3c>)
 80059da:	4299      	cmp	r1, r3
 80059dc:	d004      	beq.n	80059e8 <cleanup_stdio+0x30>
 80059de:	4620      	mov	r0, r4
 80059e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059e4:	f002 bde6 	b.w	80085b4 <_fflush_r>
 80059e8:	bd10      	pop	{r4, pc}
 80059ea:	bf00      	nop
 80059ec:	20000404 	.word	0x20000404
 80059f0:	2000046c 	.word	0x2000046c
 80059f4:	200004d4 	.word	0x200004d4

080059f8 <global_stdio_init.part.0>:
 80059f8:	b510      	push	{r4, lr}
 80059fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005a28 <global_stdio_init.part.0+0x30>)
 80059fc:	4c0b      	ldr	r4, [pc, #44]	@ (8005a2c <global_stdio_init.part.0+0x34>)
 80059fe:	4a0c      	ldr	r2, [pc, #48]	@ (8005a30 <global_stdio_init.part.0+0x38>)
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	4620      	mov	r0, r4
 8005a04:	2200      	movs	r2, #0
 8005a06:	2104      	movs	r1, #4
 8005a08:	f7ff ff94 	bl	8005934 <std>
 8005a0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005a10:	2201      	movs	r2, #1
 8005a12:	2109      	movs	r1, #9
 8005a14:	f7ff ff8e 	bl	8005934 <std>
 8005a18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a22:	2112      	movs	r1, #18
 8005a24:	f7ff bf86 	b.w	8005934 <std>
 8005a28:	2000053c 	.word	0x2000053c
 8005a2c:	20000404 	.word	0x20000404
 8005a30:	080059a1 	.word	0x080059a1

08005a34 <__sfp_lock_acquire>:
 8005a34:	4801      	ldr	r0, [pc, #4]	@ (8005a3c <__sfp_lock_acquire+0x8>)
 8005a36:	f000 b954 	b.w	8005ce2 <__retarget_lock_acquire_recursive>
 8005a3a:	bf00      	nop
 8005a3c:	20000545 	.word	0x20000545

08005a40 <__sfp_lock_release>:
 8005a40:	4801      	ldr	r0, [pc, #4]	@ (8005a48 <__sfp_lock_release+0x8>)
 8005a42:	f000 b94f 	b.w	8005ce4 <__retarget_lock_release_recursive>
 8005a46:	bf00      	nop
 8005a48:	20000545 	.word	0x20000545

08005a4c <__sinit>:
 8005a4c:	b510      	push	{r4, lr}
 8005a4e:	4604      	mov	r4, r0
 8005a50:	f7ff fff0 	bl	8005a34 <__sfp_lock_acquire>
 8005a54:	6a23      	ldr	r3, [r4, #32]
 8005a56:	b11b      	cbz	r3, 8005a60 <__sinit+0x14>
 8005a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a5c:	f7ff bff0 	b.w	8005a40 <__sfp_lock_release>
 8005a60:	4b04      	ldr	r3, [pc, #16]	@ (8005a74 <__sinit+0x28>)
 8005a62:	6223      	str	r3, [r4, #32]
 8005a64:	4b04      	ldr	r3, [pc, #16]	@ (8005a78 <__sinit+0x2c>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1f5      	bne.n	8005a58 <__sinit+0xc>
 8005a6c:	f7ff ffc4 	bl	80059f8 <global_stdio_init.part.0>
 8005a70:	e7f2      	b.n	8005a58 <__sinit+0xc>
 8005a72:	bf00      	nop
 8005a74:	080059b9 	.word	0x080059b9
 8005a78:	2000053c 	.word	0x2000053c

08005a7c <_fwalk_sglue>:
 8005a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a80:	4607      	mov	r7, r0
 8005a82:	4688      	mov	r8, r1
 8005a84:	4614      	mov	r4, r2
 8005a86:	2600      	movs	r6, #0
 8005a88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a8c:	f1b9 0901 	subs.w	r9, r9, #1
 8005a90:	d505      	bpl.n	8005a9e <_fwalk_sglue+0x22>
 8005a92:	6824      	ldr	r4, [r4, #0]
 8005a94:	2c00      	cmp	r4, #0
 8005a96:	d1f7      	bne.n	8005a88 <_fwalk_sglue+0xc>
 8005a98:	4630      	mov	r0, r6
 8005a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a9e:	89ab      	ldrh	r3, [r5, #12]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d907      	bls.n	8005ab4 <_fwalk_sglue+0x38>
 8005aa4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	d003      	beq.n	8005ab4 <_fwalk_sglue+0x38>
 8005aac:	4629      	mov	r1, r5
 8005aae:	4638      	mov	r0, r7
 8005ab0:	47c0      	blx	r8
 8005ab2:	4306      	orrs	r6, r0
 8005ab4:	3568      	adds	r5, #104	@ 0x68
 8005ab6:	e7e9      	b.n	8005a8c <_fwalk_sglue+0x10>

08005ab8 <sniprintf>:
 8005ab8:	b40c      	push	{r2, r3}
 8005aba:	b530      	push	{r4, r5, lr}
 8005abc:	4b17      	ldr	r3, [pc, #92]	@ (8005b1c <sniprintf+0x64>)
 8005abe:	1e0c      	subs	r4, r1, #0
 8005ac0:	681d      	ldr	r5, [r3, #0]
 8005ac2:	b09d      	sub	sp, #116	@ 0x74
 8005ac4:	da08      	bge.n	8005ad8 <sniprintf+0x20>
 8005ac6:	238b      	movs	r3, #139	@ 0x8b
 8005ac8:	602b      	str	r3, [r5, #0]
 8005aca:	f04f 30ff 	mov.w	r0, #4294967295
 8005ace:	b01d      	add	sp, #116	@ 0x74
 8005ad0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ad4:	b002      	add	sp, #8
 8005ad6:	4770      	bx	lr
 8005ad8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005adc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005ae0:	bf14      	ite	ne
 8005ae2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005ae6:	4623      	moveq	r3, r4
 8005ae8:	9304      	str	r3, [sp, #16]
 8005aea:	9307      	str	r3, [sp, #28]
 8005aec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005af0:	9002      	str	r0, [sp, #8]
 8005af2:	9006      	str	r0, [sp, #24]
 8005af4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005af8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005afa:	ab21      	add	r3, sp, #132	@ 0x84
 8005afc:	a902      	add	r1, sp, #8
 8005afe:	4628      	mov	r0, r5
 8005b00:	9301      	str	r3, [sp, #4]
 8005b02:	f002 fbd7 	bl	80082b4 <_svfiprintf_r>
 8005b06:	1c43      	adds	r3, r0, #1
 8005b08:	bfbc      	itt	lt
 8005b0a:	238b      	movlt	r3, #139	@ 0x8b
 8005b0c:	602b      	strlt	r3, [r5, #0]
 8005b0e:	2c00      	cmp	r4, #0
 8005b10:	d0dd      	beq.n	8005ace <sniprintf+0x16>
 8005b12:	9b02      	ldr	r3, [sp, #8]
 8005b14:	2200      	movs	r2, #0
 8005b16:	701a      	strb	r2, [r3, #0]
 8005b18:	e7d9      	b.n	8005ace <sniprintf+0x16>
 8005b1a:	bf00      	nop
 8005b1c:	2000001c 	.word	0x2000001c

08005b20 <siprintf>:
 8005b20:	b40e      	push	{r1, r2, r3}
 8005b22:	b500      	push	{lr}
 8005b24:	b09c      	sub	sp, #112	@ 0x70
 8005b26:	ab1d      	add	r3, sp, #116	@ 0x74
 8005b28:	9002      	str	r0, [sp, #8]
 8005b2a:	9006      	str	r0, [sp, #24]
 8005b2c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005b30:	4809      	ldr	r0, [pc, #36]	@ (8005b58 <siprintf+0x38>)
 8005b32:	9107      	str	r1, [sp, #28]
 8005b34:	9104      	str	r1, [sp, #16]
 8005b36:	4909      	ldr	r1, [pc, #36]	@ (8005b5c <siprintf+0x3c>)
 8005b38:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b3c:	9105      	str	r1, [sp, #20]
 8005b3e:	6800      	ldr	r0, [r0, #0]
 8005b40:	9301      	str	r3, [sp, #4]
 8005b42:	a902      	add	r1, sp, #8
 8005b44:	f002 fbb6 	bl	80082b4 <_svfiprintf_r>
 8005b48:	9b02      	ldr	r3, [sp, #8]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	701a      	strb	r2, [r3, #0]
 8005b4e:	b01c      	add	sp, #112	@ 0x70
 8005b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b54:	b003      	add	sp, #12
 8005b56:	4770      	bx	lr
 8005b58:	2000001c 	.word	0x2000001c
 8005b5c:	ffff0208 	.word	0xffff0208

08005b60 <__sread>:
 8005b60:	b510      	push	{r4, lr}
 8005b62:	460c      	mov	r4, r1
 8005b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b68:	f000 f86c 	bl	8005c44 <_read_r>
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	bfab      	itete	ge
 8005b70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005b72:	89a3      	ldrhlt	r3, [r4, #12]
 8005b74:	181b      	addge	r3, r3, r0
 8005b76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005b7a:	bfac      	ite	ge
 8005b7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005b7e:	81a3      	strhlt	r3, [r4, #12]
 8005b80:	bd10      	pop	{r4, pc}

08005b82 <__swrite>:
 8005b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b86:	461f      	mov	r7, r3
 8005b88:	898b      	ldrh	r3, [r1, #12]
 8005b8a:	05db      	lsls	r3, r3, #23
 8005b8c:	4605      	mov	r5, r0
 8005b8e:	460c      	mov	r4, r1
 8005b90:	4616      	mov	r6, r2
 8005b92:	d505      	bpl.n	8005ba0 <__swrite+0x1e>
 8005b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b98:	2302      	movs	r3, #2
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f000 f840 	bl	8005c20 <_lseek_r>
 8005ba0:	89a3      	ldrh	r3, [r4, #12]
 8005ba2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ba6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005baa:	81a3      	strh	r3, [r4, #12]
 8005bac:	4632      	mov	r2, r6
 8005bae:	463b      	mov	r3, r7
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bb6:	f000 b857 	b.w	8005c68 <_write_r>

08005bba <__sseek>:
 8005bba:	b510      	push	{r4, lr}
 8005bbc:	460c      	mov	r4, r1
 8005bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bc2:	f000 f82d 	bl	8005c20 <_lseek_r>
 8005bc6:	1c43      	adds	r3, r0, #1
 8005bc8:	89a3      	ldrh	r3, [r4, #12]
 8005bca:	bf15      	itete	ne
 8005bcc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005bce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005bd2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005bd6:	81a3      	strheq	r3, [r4, #12]
 8005bd8:	bf18      	it	ne
 8005bda:	81a3      	strhne	r3, [r4, #12]
 8005bdc:	bd10      	pop	{r4, pc}

08005bde <__sclose>:
 8005bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be2:	f000 b80d 	b.w	8005c00 <_close_r>

08005be6 <memset>:
 8005be6:	4402      	add	r2, r0
 8005be8:	4603      	mov	r3, r0
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d100      	bne.n	8005bf0 <memset+0xa>
 8005bee:	4770      	bx	lr
 8005bf0:	f803 1b01 	strb.w	r1, [r3], #1
 8005bf4:	e7f9      	b.n	8005bea <memset+0x4>
	...

08005bf8 <_localeconv_r>:
 8005bf8:	4800      	ldr	r0, [pc, #0]	@ (8005bfc <_localeconv_r+0x4>)
 8005bfa:	4770      	bx	lr
 8005bfc:	2000015c 	.word	0x2000015c

08005c00 <_close_r>:
 8005c00:	b538      	push	{r3, r4, r5, lr}
 8005c02:	4d06      	ldr	r5, [pc, #24]	@ (8005c1c <_close_r+0x1c>)
 8005c04:	2300      	movs	r3, #0
 8005c06:	4604      	mov	r4, r0
 8005c08:	4608      	mov	r0, r1
 8005c0a:	602b      	str	r3, [r5, #0]
 8005c0c:	f7fb ff5b 	bl	8001ac6 <_close>
 8005c10:	1c43      	adds	r3, r0, #1
 8005c12:	d102      	bne.n	8005c1a <_close_r+0x1a>
 8005c14:	682b      	ldr	r3, [r5, #0]
 8005c16:	b103      	cbz	r3, 8005c1a <_close_r+0x1a>
 8005c18:	6023      	str	r3, [r4, #0]
 8005c1a:	bd38      	pop	{r3, r4, r5, pc}
 8005c1c:	20000540 	.word	0x20000540

08005c20 <_lseek_r>:
 8005c20:	b538      	push	{r3, r4, r5, lr}
 8005c22:	4d07      	ldr	r5, [pc, #28]	@ (8005c40 <_lseek_r+0x20>)
 8005c24:	4604      	mov	r4, r0
 8005c26:	4608      	mov	r0, r1
 8005c28:	4611      	mov	r1, r2
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	602a      	str	r2, [r5, #0]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	f7fb ff70 	bl	8001b14 <_lseek>
 8005c34:	1c43      	adds	r3, r0, #1
 8005c36:	d102      	bne.n	8005c3e <_lseek_r+0x1e>
 8005c38:	682b      	ldr	r3, [r5, #0]
 8005c3a:	b103      	cbz	r3, 8005c3e <_lseek_r+0x1e>
 8005c3c:	6023      	str	r3, [r4, #0]
 8005c3e:	bd38      	pop	{r3, r4, r5, pc}
 8005c40:	20000540 	.word	0x20000540

08005c44 <_read_r>:
 8005c44:	b538      	push	{r3, r4, r5, lr}
 8005c46:	4d07      	ldr	r5, [pc, #28]	@ (8005c64 <_read_r+0x20>)
 8005c48:	4604      	mov	r4, r0
 8005c4a:	4608      	mov	r0, r1
 8005c4c:	4611      	mov	r1, r2
 8005c4e:	2200      	movs	r2, #0
 8005c50:	602a      	str	r2, [r5, #0]
 8005c52:	461a      	mov	r2, r3
 8005c54:	f7fb fefe 	bl	8001a54 <_read>
 8005c58:	1c43      	adds	r3, r0, #1
 8005c5a:	d102      	bne.n	8005c62 <_read_r+0x1e>
 8005c5c:	682b      	ldr	r3, [r5, #0]
 8005c5e:	b103      	cbz	r3, 8005c62 <_read_r+0x1e>
 8005c60:	6023      	str	r3, [r4, #0]
 8005c62:	bd38      	pop	{r3, r4, r5, pc}
 8005c64:	20000540 	.word	0x20000540

08005c68 <_write_r>:
 8005c68:	b538      	push	{r3, r4, r5, lr}
 8005c6a:	4d07      	ldr	r5, [pc, #28]	@ (8005c88 <_write_r+0x20>)
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	4608      	mov	r0, r1
 8005c70:	4611      	mov	r1, r2
 8005c72:	2200      	movs	r2, #0
 8005c74:	602a      	str	r2, [r5, #0]
 8005c76:	461a      	mov	r2, r3
 8005c78:	f7fb ff09 	bl	8001a8e <_write>
 8005c7c:	1c43      	adds	r3, r0, #1
 8005c7e:	d102      	bne.n	8005c86 <_write_r+0x1e>
 8005c80:	682b      	ldr	r3, [r5, #0]
 8005c82:	b103      	cbz	r3, 8005c86 <_write_r+0x1e>
 8005c84:	6023      	str	r3, [r4, #0]
 8005c86:	bd38      	pop	{r3, r4, r5, pc}
 8005c88:	20000540 	.word	0x20000540

08005c8c <__errno>:
 8005c8c:	4b01      	ldr	r3, [pc, #4]	@ (8005c94 <__errno+0x8>)
 8005c8e:	6818      	ldr	r0, [r3, #0]
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	2000001c 	.word	0x2000001c

08005c98 <__libc_init_array>:
 8005c98:	b570      	push	{r4, r5, r6, lr}
 8005c9a:	4d0d      	ldr	r5, [pc, #52]	@ (8005cd0 <__libc_init_array+0x38>)
 8005c9c:	4c0d      	ldr	r4, [pc, #52]	@ (8005cd4 <__libc_init_array+0x3c>)
 8005c9e:	1b64      	subs	r4, r4, r5
 8005ca0:	10a4      	asrs	r4, r4, #2
 8005ca2:	2600      	movs	r6, #0
 8005ca4:	42a6      	cmp	r6, r4
 8005ca6:	d109      	bne.n	8005cbc <__libc_init_array+0x24>
 8005ca8:	4d0b      	ldr	r5, [pc, #44]	@ (8005cd8 <__libc_init_array+0x40>)
 8005caa:	4c0c      	ldr	r4, [pc, #48]	@ (8005cdc <__libc_init_array+0x44>)
 8005cac:	f003 fb72 	bl	8009394 <_init>
 8005cb0:	1b64      	subs	r4, r4, r5
 8005cb2:	10a4      	asrs	r4, r4, #2
 8005cb4:	2600      	movs	r6, #0
 8005cb6:	42a6      	cmp	r6, r4
 8005cb8:	d105      	bne.n	8005cc6 <__libc_init_array+0x2e>
 8005cba:	bd70      	pop	{r4, r5, r6, pc}
 8005cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc0:	4798      	blx	r3
 8005cc2:	3601      	adds	r6, #1
 8005cc4:	e7ee      	b.n	8005ca4 <__libc_init_array+0xc>
 8005cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cca:	4798      	blx	r3
 8005ccc:	3601      	adds	r6, #1
 8005cce:	e7f2      	b.n	8005cb6 <__libc_init_array+0x1e>
 8005cd0:	08009850 	.word	0x08009850
 8005cd4:	08009850 	.word	0x08009850
 8005cd8:	08009850 	.word	0x08009850
 8005cdc:	08009854 	.word	0x08009854

08005ce0 <__retarget_lock_init_recursive>:
 8005ce0:	4770      	bx	lr

08005ce2 <__retarget_lock_acquire_recursive>:
 8005ce2:	4770      	bx	lr

08005ce4 <__retarget_lock_release_recursive>:
 8005ce4:	4770      	bx	lr
	...

08005ce8 <nanf>:
 8005ce8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005cf0 <nanf+0x8>
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	7fc00000 	.word	0x7fc00000

08005cf4 <quorem>:
 8005cf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf8:	6903      	ldr	r3, [r0, #16]
 8005cfa:	690c      	ldr	r4, [r1, #16]
 8005cfc:	42a3      	cmp	r3, r4
 8005cfe:	4607      	mov	r7, r0
 8005d00:	db7e      	blt.n	8005e00 <quorem+0x10c>
 8005d02:	3c01      	subs	r4, #1
 8005d04:	f101 0814 	add.w	r8, r1, #20
 8005d08:	00a3      	lsls	r3, r4, #2
 8005d0a:	f100 0514 	add.w	r5, r0, #20
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d14:	9301      	str	r3, [sp, #4]
 8005d16:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	429a      	cmp	r2, r3
 8005d22:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d26:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d2a:	d32e      	bcc.n	8005d8a <quorem+0x96>
 8005d2c:	f04f 0a00 	mov.w	sl, #0
 8005d30:	46c4      	mov	ip, r8
 8005d32:	46ae      	mov	lr, r5
 8005d34:	46d3      	mov	fp, sl
 8005d36:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005d3a:	b298      	uxth	r0, r3
 8005d3c:	fb06 a000 	mla	r0, r6, r0, sl
 8005d40:	0c02      	lsrs	r2, r0, #16
 8005d42:	0c1b      	lsrs	r3, r3, #16
 8005d44:	fb06 2303 	mla	r3, r6, r3, r2
 8005d48:	f8de 2000 	ldr.w	r2, [lr]
 8005d4c:	b280      	uxth	r0, r0
 8005d4e:	b292      	uxth	r2, r2
 8005d50:	1a12      	subs	r2, r2, r0
 8005d52:	445a      	add	r2, fp
 8005d54:	f8de 0000 	ldr.w	r0, [lr]
 8005d58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005d62:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005d66:	b292      	uxth	r2, r2
 8005d68:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005d6c:	45e1      	cmp	r9, ip
 8005d6e:	f84e 2b04 	str.w	r2, [lr], #4
 8005d72:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005d76:	d2de      	bcs.n	8005d36 <quorem+0x42>
 8005d78:	9b00      	ldr	r3, [sp, #0]
 8005d7a:	58eb      	ldr	r3, [r5, r3]
 8005d7c:	b92b      	cbnz	r3, 8005d8a <quorem+0x96>
 8005d7e:	9b01      	ldr	r3, [sp, #4]
 8005d80:	3b04      	subs	r3, #4
 8005d82:	429d      	cmp	r5, r3
 8005d84:	461a      	mov	r2, r3
 8005d86:	d32f      	bcc.n	8005de8 <quorem+0xf4>
 8005d88:	613c      	str	r4, [r7, #16]
 8005d8a:	4638      	mov	r0, r7
 8005d8c:	f001 f9c4 	bl	8007118 <__mcmp>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	db25      	blt.n	8005de0 <quorem+0xec>
 8005d94:	4629      	mov	r1, r5
 8005d96:	2000      	movs	r0, #0
 8005d98:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d9c:	f8d1 c000 	ldr.w	ip, [r1]
 8005da0:	fa1f fe82 	uxth.w	lr, r2
 8005da4:	fa1f f38c 	uxth.w	r3, ip
 8005da8:	eba3 030e 	sub.w	r3, r3, lr
 8005dac:	4403      	add	r3, r0
 8005dae:	0c12      	lsrs	r2, r2, #16
 8005db0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005db4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005dbe:	45c1      	cmp	r9, r8
 8005dc0:	f841 3b04 	str.w	r3, [r1], #4
 8005dc4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005dc8:	d2e6      	bcs.n	8005d98 <quorem+0xa4>
 8005dca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005dce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005dd2:	b922      	cbnz	r2, 8005dde <quorem+0xea>
 8005dd4:	3b04      	subs	r3, #4
 8005dd6:	429d      	cmp	r5, r3
 8005dd8:	461a      	mov	r2, r3
 8005dda:	d30b      	bcc.n	8005df4 <quorem+0x100>
 8005ddc:	613c      	str	r4, [r7, #16]
 8005dde:	3601      	adds	r6, #1
 8005de0:	4630      	mov	r0, r6
 8005de2:	b003      	add	sp, #12
 8005de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005de8:	6812      	ldr	r2, [r2, #0]
 8005dea:	3b04      	subs	r3, #4
 8005dec:	2a00      	cmp	r2, #0
 8005dee:	d1cb      	bne.n	8005d88 <quorem+0x94>
 8005df0:	3c01      	subs	r4, #1
 8005df2:	e7c6      	b.n	8005d82 <quorem+0x8e>
 8005df4:	6812      	ldr	r2, [r2, #0]
 8005df6:	3b04      	subs	r3, #4
 8005df8:	2a00      	cmp	r2, #0
 8005dfa:	d1ef      	bne.n	8005ddc <quorem+0xe8>
 8005dfc:	3c01      	subs	r4, #1
 8005dfe:	e7ea      	b.n	8005dd6 <quorem+0xe2>
 8005e00:	2000      	movs	r0, #0
 8005e02:	e7ee      	b.n	8005de2 <quorem+0xee>
 8005e04:	0000      	movs	r0, r0
	...

08005e08 <_dtoa_r>:
 8005e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e0c:	69c7      	ldr	r7, [r0, #28]
 8005e0e:	b099      	sub	sp, #100	@ 0x64
 8005e10:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005e14:	ec55 4b10 	vmov	r4, r5, d0
 8005e18:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005e1a:	9109      	str	r1, [sp, #36]	@ 0x24
 8005e1c:	4683      	mov	fp, r0
 8005e1e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005e20:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005e22:	b97f      	cbnz	r7, 8005e44 <_dtoa_r+0x3c>
 8005e24:	2010      	movs	r0, #16
 8005e26:	f000 fdfd 	bl	8006a24 <malloc>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	f8cb 001c 	str.w	r0, [fp, #28]
 8005e30:	b920      	cbnz	r0, 8005e3c <_dtoa_r+0x34>
 8005e32:	4ba7      	ldr	r3, [pc, #668]	@ (80060d0 <_dtoa_r+0x2c8>)
 8005e34:	21ef      	movs	r1, #239	@ 0xef
 8005e36:	48a7      	ldr	r0, [pc, #668]	@ (80060d4 <_dtoa_r+0x2cc>)
 8005e38:	f002 fc36 	bl	80086a8 <__assert_func>
 8005e3c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005e40:	6007      	str	r7, [r0, #0]
 8005e42:	60c7      	str	r7, [r0, #12]
 8005e44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e48:	6819      	ldr	r1, [r3, #0]
 8005e4a:	b159      	cbz	r1, 8005e64 <_dtoa_r+0x5c>
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	604a      	str	r2, [r1, #4]
 8005e50:	2301      	movs	r3, #1
 8005e52:	4093      	lsls	r3, r2
 8005e54:	608b      	str	r3, [r1, #8]
 8005e56:	4658      	mov	r0, fp
 8005e58:	f000 feda 	bl	8006c10 <_Bfree>
 8005e5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e60:	2200      	movs	r2, #0
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	1e2b      	subs	r3, r5, #0
 8005e66:	bfb9      	ittee	lt
 8005e68:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005e6c:	9303      	strlt	r3, [sp, #12]
 8005e6e:	2300      	movge	r3, #0
 8005e70:	6033      	strge	r3, [r6, #0]
 8005e72:	9f03      	ldr	r7, [sp, #12]
 8005e74:	4b98      	ldr	r3, [pc, #608]	@ (80060d8 <_dtoa_r+0x2d0>)
 8005e76:	bfbc      	itt	lt
 8005e78:	2201      	movlt	r2, #1
 8005e7a:	6032      	strlt	r2, [r6, #0]
 8005e7c:	43bb      	bics	r3, r7
 8005e7e:	d112      	bne.n	8005ea6 <_dtoa_r+0x9e>
 8005e80:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005e82:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005e86:	6013      	str	r3, [r2, #0]
 8005e88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005e8c:	4323      	orrs	r3, r4
 8005e8e:	f000 854d 	beq.w	800692c <_dtoa_r+0xb24>
 8005e92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005e94:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80060ec <_dtoa_r+0x2e4>
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 854f 	beq.w	800693c <_dtoa_r+0xb34>
 8005e9e:	f10a 0303 	add.w	r3, sl, #3
 8005ea2:	f000 bd49 	b.w	8006938 <_dtoa_r+0xb30>
 8005ea6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	ec51 0b17 	vmov	r0, r1, d7
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005eb6:	f7fa fe2f 	bl	8000b18 <__aeabi_dcmpeq>
 8005eba:	4680      	mov	r8, r0
 8005ebc:	b158      	cbz	r0, 8005ed6 <_dtoa_r+0xce>
 8005ebe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	6013      	str	r3, [r2, #0]
 8005ec4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005ec6:	b113      	cbz	r3, 8005ece <_dtoa_r+0xc6>
 8005ec8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005eca:	4b84      	ldr	r3, [pc, #528]	@ (80060dc <_dtoa_r+0x2d4>)
 8005ecc:	6013      	str	r3, [r2, #0]
 8005ece:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80060f0 <_dtoa_r+0x2e8>
 8005ed2:	f000 bd33 	b.w	800693c <_dtoa_r+0xb34>
 8005ed6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005eda:	aa16      	add	r2, sp, #88	@ 0x58
 8005edc:	a917      	add	r1, sp, #92	@ 0x5c
 8005ede:	4658      	mov	r0, fp
 8005ee0:	f001 fa3a 	bl	8007358 <__d2b>
 8005ee4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005ee8:	4681      	mov	r9, r0
 8005eea:	2e00      	cmp	r6, #0
 8005eec:	d077      	beq.n	8005fde <_dtoa_r+0x1d6>
 8005eee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ef0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005ef4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ef8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005efc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005f00:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005f04:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005f08:	4619      	mov	r1, r3
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	4b74      	ldr	r3, [pc, #464]	@ (80060e0 <_dtoa_r+0x2d8>)
 8005f0e:	f7fa f9e3 	bl	80002d8 <__aeabi_dsub>
 8005f12:	a369      	add	r3, pc, #420	@ (adr r3, 80060b8 <_dtoa_r+0x2b0>)
 8005f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f18:	f7fa fb96 	bl	8000648 <__aeabi_dmul>
 8005f1c:	a368      	add	r3, pc, #416	@ (adr r3, 80060c0 <_dtoa_r+0x2b8>)
 8005f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f22:	f7fa f9db 	bl	80002dc <__adddf3>
 8005f26:	4604      	mov	r4, r0
 8005f28:	4630      	mov	r0, r6
 8005f2a:	460d      	mov	r5, r1
 8005f2c:	f7fa fb22 	bl	8000574 <__aeabi_i2d>
 8005f30:	a365      	add	r3, pc, #404	@ (adr r3, 80060c8 <_dtoa_r+0x2c0>)
 8005f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f36:	f7fa fb87 	bl	8000648 <__aeabi_dmul>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	4620      	mov	r0, r4
 8005f40:	4629      	mov	r1, r5
 8005f42:	f7fa f9cb 	bl	80002dc <__adddf3>
 8005f46:	4604      	mov	r4, r0
 8005f48:	460d      	mov	r5, r1
 8005f4a:	f7fa fe2d 	bl	8000ba8 <__aeabi_d2iz>
 8005f4e:	2200      	movs	r2, #0
 8005f50:	4607      	mov	r7, r0
 8005f52:	2300      	movs	r3, #0
 8005f54:	4620      	mov	r0, r4
 8005f56:	4629      	mov	r1, r5
 8005f58:	f7fa fde8 	bl	8000b2c <__aeabi_dcmplt>
 8005f5c:	b140      	cbz	r0, 8005f70 <_dtoa_r+0x168>
 8005f5e:	4638      	mov	r0, r7
 8005f60:	f7fa fb08 	bl	8000574 <__aeabi_i2d>
 8005f64:	4622      	mov	r2, r4
 8005f66:	462b      	mov	r3, r5
 8005f68:	f7fa fdd6 	bl	8000b18 <__aeabi_dcmpeq>
 8005f6c:	b900      	cbnz	r0, 8005f70 <_dtoa_r+0x168>
 8005f6e:	3f01      	subs	r7, #1
 8005f70:	2f16      	cmp	r7, #22
 8005f72:	d851      	bhi.n	8006018 <_dtoa_r+0x210>
 8005f74:	4b5b      	ldr	r3, [pc, #364]	@ (80060e4 <_dtoa_r+0x2dc>)
 8005f76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f82:	f7fa fdd3 	bl	8000b2c <__aeabi_dcmplt>
 8005f86:	2800      	cmp	r0, #0
 8005f88:	d048      	beq.n	800601c <_dtoa_r+0x214>
 8005f8a:	3f01      	subs	r7, #1
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	9312      	str	r3, [sp, #72]	@ 0x48
 8005f90:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005f92:	1b9b      	subs	r3, r3, r6
 8005f94:	1e5a      	subs	r2, r3, #1
 8005f96:	bf44      	itt	mi
 8005f98:	f1c3 0801 	rsbmi	r8, r3, #1
 8005f9c:	2300      	movmi	r3, #0
 8005f9e:	9208      	str	r2, [sp, #32]
 8005fa0:	bf54      	ite	pl
 8005fa2:	f04f 0800 	movpl.w	r8, #0
 8005fa6:	9308      	strmi	r3, [sp, #32]
 8005fa8:	2f00      	cmp	r7, #0
 8005faa:	db39      	blt.n	8006020 <_dtoa_r+0x218>
 8005fac:	9b08      	ldr	r3, [sp, #32]
 8005fae:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005fb0:	443b      	add	r3, r7
 8005fb2:	9308      	str	r3, [sp, #32]
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fba:	2b09      	cmp	r3, #9
 8005fbc:	d864      	bhi.n	8006088 <_dtoa_r+0x280>
 8005fbe:	2b05      	cmp	r3, #5
 8005fc0:	bfc4      	itt	gt
 8005fc2:	3b04      	subgt	r3, #4
 8005fc4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005fc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fc8:	f1a3 0302 	sub.w	r3, r3, #2
 8005fcc:	bfcc      	ite	gt
 8005fce:	2400      	movgt	r4, #0
 8005fd0:	2401      	movle	r4, #1
 8005fd2:	2b03      	cmp	r3, #3
 8005fd4:	d863      	bhi.n	800609e <_dtoa_r+0x296>
 8005fd6:	e8df f003 	tbb	[pc, r3]
 8005fda:	372a      	.short	0x372a
 8005fdc:	5535      	.short	0x5535
 8005fde:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005fe2:	441e      	add	r6, r3
 8005fe4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005fe8:	2b20      	cmp	r3, #32
 8005fea:	bfc1      	itttt	gt
 8005fec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005ff0:	409f      	lslgt	r7, r3
 8005ff2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005ff6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005ffa:	bfd6      	itet	le
 8005ffc:	f1c3 0320 	rsble	r3, r3, #32
 8006000:	ea47 0003 	orrgt.w	r0, r7, r3
 8006004:	fa04 f003 	lslle.w	r0, r4, r3
 8006008:	f7fa faa4 	bl	8000554 <__aeabi_ui2d>
 800600c:	2201      	movs	r2, #1
 800600e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006012:	3e01      	subs	r6, #1
 8006014:	9214      	str	r2, [sp, #80]	@ 0x50
 8006016:	e777      	b.n	8005f08 <_dtoa_r+0x100>
 8006018:	2301      	movs	r3, #1
 800601a:	e7b8      	b.n	8005f8e <_dtoa_r+0x186>
 800601c:	9012      	str	r0, [sp, #72]	@ 0x48
 800601e:	e7b7      	b.n	8005f90 <_dtoa_r+0x188>
 8006020:	427b      	negs	r3, r7
 8006022:	930a      	str	r3, [sp, #40]	@ 0x28
 8006024:	2300      	movs	r3, #0
 8006026:	eba8 0807 	sub.w	r8, r8, r7
 800602a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800602c:	e7c4      	b.n	8005fb8 <_dtoa_r+0x1b0>
 800602e:	2300      	movs	r3, #0
 8006030:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006032:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006034:	2b00      	cmp	r3, #0
 8006036:	dc35      	bgt.n	80060a4 <_dtoa_r+0x29c>
 8006038:	2301      	movs	r3, #1
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	9307      	str	r3, [sp, #28]
 800603e:	461a      	mov	r2, r3
 8006040:	920e      	str	r2, [sp, #56]	@ 0x38
 8006042:	e00b      	b.n	800605c <_dtoa_r+0x254>
 8006044:	2301      	movs	r3, #1
 8006046:	e7f3      	b.n	8006030 <_dtoa_r+0x228>
 8006048:	2300      	movs	r3, #0
 800604a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800604c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800604e:	18fb      	adds	r3, r7, r3
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	3301      	adds	r3, #1
 8006054:	2b01      	cmp	r3, #1
 8006056:	9307      	str	r3, [sp, #28]
 8006058:	bfb8      	it	lt
 800605a:	2301      	movlt	r3, #1
 800605c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006060:	2100      	movs	r1, #0
 8006062:	2204      	movs	r2, #4
 8006064:	f102 0514 	add.w	r5, r2, #20
 8006068:	429d      	cmp	r5, r3
 800606a:	d91f      	bls.n	80060ac <_dtoa_r+0x2a4>
 800606c:	6041      	str	r1, [r0, #4]
 800606e:	4658      	mov	r0, fp
 8006070:	f000 fd8e 	bl	8006b90 <_Balloc>
 8006074:	4682      	mov	sl, r0
 8006076:	2800      	cmp	r0, #0
 8006078:	d13c      	bne.n	80060f4 <_dtoa_r+0x2ec>
 800607a:	4b1b      	ldr	r3, [pc, #108]	@ (80060e8 <_dtoa_r+0x2e0>)
 800607c:	4602      	mov	r2, r0
 800607e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006082:	e6d8      	b.n	8005e36 <_dtoa_r+0x2e>
 8006084:	2301      	movs	r3, #1
 8006086:	e7e0      	b.n	800604a <_dtoa_r+0x242>
 8006088:	2401      	movs	r4, #1
 800608a:	2300      	movs	r3, #0
 800608c:	9309      	str	r3, [sp, #36]	@ 0x24
 800608e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006090:	f04f 33ff 	mov.w	r3, #4294967295
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	9307      	str	r3, [sp, #28]
 8006098:	2200      	movs	r2, #0
 800609a:	2312      	movs	r3, #18
 800609c:	e7d0      	b.n	8006040 <_dtoa_r+0x238>
 800609e:	2301      	movs	r3, #1
 80060a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060a2:	e7f5      	b.n	8006090 <_dtoa_r+0x288>
 80060a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	9307      	str	r3, [sp, #28]
 80060aa:	e7d7      	b.n	800605c <_dtoa_r+0x254>
 80060ac:	3101      	adds	r1, #1
 80060ae:	0052      	lsls	r2, r2, #1
 80060b0:	e7d8      	b.n	8006064 <_dtoa_r+0x25c>
 80060b2:	bf00      	nop
 80060b4:	f3af 8000 	nop.w
 80060b8:	636f4361 	.word	0x636f4361
 80060bc:	3fd287a7 	.word	0x3fd287a7
 80060c0:	8b60c8b3 	.word	0x8b60c8b3
 80060c4:	3fc68a28 	.word	0x3fc68a28
 80060c8:	509f79fb 	.word	0x509f79fb
 80060cc:	3fd34413 	.word	0x3fd34413
 80060d0:	08009462 	.word	0x08009462
 80060d4:	08009479 	.word	0x08009479
 80060d8:	7ff00000 	.word	0x7ff00000
 80060dc:	0800942d 	.word	0x0800942d
 80060e0:	3ff80000 	.word	0x3ff80000
 80060e4:	08009570 	.word	0x08009570
 80060e8:	080094d1 	.word	0x080094d1
 80060ec:	0800945e 	.word	0x0800945e
 80060f0:	0800942c 	.word	0x0800942c
 80060f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80060f8:	6018      	str	r0, [r3, #0]
 80060fa:	9b07      	ldr	r3, [sp, #28]
 80060fc:	2b0e      	cmp	r3, #14
 80060fe:	f200 80a4 	bhi.w	800624a <_dtoa_r+0x442>
 8006102:	2c00      	cmp	r4, #0
 8006104:	f000 80a1 	beq.w	800624a <_dtoa_r+0x442>
 8006108:	2f00      	cmp	r7, #0
 800610a:	dd33      	ble.n	8006174 <_dtoa_r+0x36c>
 800610c:	4bad      	ldr	r3, [pc, #692]	@ (80063c4 <_dtoa_r+0x5bc>)
 800610e:	f007 020f 	and.w	r2, r7, #15
 8006112:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006116:	ed93 7b00 	vldr	d7, [r3]
 800611a:	05f8      	lsls	r0, r7, #23
 800611c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006120:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006124:	d516      	bpl.n	8006154 <_dtoa_r+0x34c>
 8006126:	4ba8      	ldr	r3, [pc, #672]	@ (80063c8 <_dtoa_r+0x5c0>)
 8006128:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800612c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006130:	f7fa fbb4 	bl	800089c <__aeabi_ddiv>
 8006134:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006138:	f004 040f 	and.w	r4, r4, #15
 800613c:	2603      	movs	r6, #3
 800613e:	4da2      	ldr	r5, [pc, #648]	@ (80063c8 <_dtoa_r+0x5c0>)
 8006140:	b954      	cbnz	r4, 8006158 <_dtoa_r+0x350>
 8006142:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006146:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800614a:	f7fa fba7 	bl	800089c <__aeabi_ddiv>
 800614e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006152:	e028      	b.n	80061a6 <_dtoa_r+0x39e>
 8006154:	2602      	movs	r6, #2
 8006156:	e7f2      	b.n	800613e <_dtoa_r+0x336>
 8006158:	07e1      	lsls	r1, r4, #31
 800615a:	d508      	bpl.n	800616e <_dtoa_r+0x366>
 800615c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006160:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006164:	f7fa fa70 	bl	8000648 <__aeabi_dmul>
 8006168:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800616c:	3601      	adds	r6, #1
 800616e:	1064      	asrs	r4, r4, #1
 8006170:	3508      	adds	r5, #8
 8006172:	e7e5      	b.n	8006140 <_dtoa_r+0x338>
 8006174:	f000 80d2 	beq.w	800631c <_dtoa_r+0x514>
 8006178:	427c      	negs	r4, r7
 800617a:	4b92      	ldr	r3, [pc, #584]	@ (80063c4 <_dtoa_r+0x5bc>)
 800617c:	4d92      	ldr	r5, [pc, #584]	@ (80063c8 <_dtoa_r+0x5c0>)
 800617e:	f004 020f 	and.w	r2, r4, #15
 8006182:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800618e:	f7fa fa5b 	bl	8000648 <__aeabi_dmul>
 8006192:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006196:	1124      	asrs	r4, r4, #4
 8006198:	2300      	movs	r3, #0
 800619a:	2602      	movs	r6, #2
 800619c:	2c00      	cmp	r4, #0
 800619e:	f040 80b2 	bne.w	8006306 <_dtoa_r+0x4fe>
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1d3      	bne.n	800614e <_dtoa_r+0x346>
 80061a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80061a8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 80b7 	beq.w	8006320 <_dtoa_r+0x518>
 80061b2:	4b86      	ldr	r3, [pc, #536]	@ (80063cc <_dtoa_r+0x5c4>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	4620      	mov	r0, r4
 80061b8:	4629      	mov	r1, r5
 80061ba:	f7fa fcb7 	bl	8000b2c <__aeabi_dcmplt>
 80061be:	2800      	cmp	r0, #0
 80061c0:	f000 80ae 	beq.w	8006320 <_dtoa_r+0x518>
 80061c4:	9b07      	ldr	r3, [sp, #28]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f000 80aa 	beq.w	8006320 <_dtoa_r+0x518>
 80061cc:	9b00      	ldr	r3, [sp, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	dd37      	ble.n	8006242 <_dtoa_r+0x43a>
 80061d2:	1e7b      	subs	r3, r7, #1
 80061d4:	9304      	str	r3, [sp, #16]
 80061d6:	4620      	mov	r0, r4
 80061d8:	4b7d      	ldr	r3, [pc, #500]	@ (80063d0 <_dtoa_r+0x5c8>)
 80061da:	2200      	movs	r2, #0
 80061dc:	4629      	mov	r1, r5
 80061de:	f7fa fa33 	bl	8000648 <__aeabi_dmul>
 80061e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061e6:	9c00      	ldr	r4, [sp, #0]
 80061e8:	3601      	adds	r6, #1
 80061ea:	4630      	mov	r0, r6
 80061ec:	f7fa f9c2 	bl	8000574 <__aeabi_i2d>
 80061f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061f4:	f7fa fa28 	bl	8000648 <__aeabi_dmul>
 80061f8:	4b76      	ldr	r3, [pc, #472]	@ (80063d4 <_dtoa_r+0x5cc>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	f7fa f86e 	bl	80002dc <__adddf3>
 8006200:	4605      	mov	r5, r0
 8006202:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006206:	2c00      	cmp	r4, #0
 8006208:	f040 808d 	bne.w	8006326 <_dtoa_r+0x51e>
 800620c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006210:	4b71      	ldr	r3, [pc, #452]	@ (80063d8 <_dtoa_r+0x5d0>)
 8006212:	2200      	movs	r2, #0
 8006214:	f7fa f860 	bl	80002d8 <__aeabi_dsub>
 8006218:	4602      	mov	r2, r0
 800621a:	460b      	mov	r3, r1
 800621c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006220:	462a      	mov	r2, r5
 8006222:	4633      	mov	r3, r6
 8006224:	f7fa fca0 	bl	8000b68 <__aeabi_dcmpgt>
 8006228:	2800      	cmp	r0, #0
 800622a:	f040 828b 	bne.w	8006744 <_dtoa_r+0x93c>
 800622e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006232:	462a      	mov	r2, r5
 8006234:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006238:	f7fa fc78 	bl	8000b2c <__aeabi_dcmplt>
 800623c:	2800      	cmp	r0, #0
 800623e:	f040 8128 	bne.w	8006492 <_dtoa_r+0x68a>
 8006242:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006246:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800624a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800624c:	2b00      	cmp	r3, #0
 800624e:	f2c0 815a 	blt.w	8006506 <_dtoa_r+0x6fe>
 8006252:	2f0e      	cmp	r7, #14
 8006254:	f300 8157 	bgt.w	8006506 <_dtoa_r+0x6fe>
 8006258:	4b5a      	ldr	r3, [pc, #360]	@ (80063c4 <_dtoa_r+0x5bc>)
 800625a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800625e:	ed93 7b00 	vldr	d7, [r3]
 8006262:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006264:	2b00      	cmp	r3, #0
 8006266:	ed8d 7b00 	vstr	d7, [sp]
 800626a:	da03      	bge.n	8006274 <_dtoa_r+0x46c>
 800626c:	9b07      	ldr	r3, [sp, #28]
 800626e:	2b00      	cmp	r3, #0
 8006270:	f340 8101 	ble.w	8006476 <_dtoa_r+0x66e>
 8006274:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006278:	4656      	mov	r6, sl
 800627a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800627e:	4620      	mov	r0, r4
 8006280:	4629      	mov	r1, r5
 8006282:	f7fa fb0b 	bl	800089c <__aeabi_ddiv>
 8006286:	f7fa fc8f 	bl	8000ba8 <__aeabi_d2iz>
 800628a:	4680      	mov	r8, r0
 800628c:	f7fa f972 	bl	8000574 <__aeabi_i2d>
 8006290:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006294:	f7fa f9d8 	bl	8000648 <__aeabi_dmul>
 8006298:	4602      	mov	r2, r0
 800629a:	460b      	mov	r3, r1
 800629c:	4620      	mov	r0, r4
 800629e:	4629      	mov	r1, r5
 80062a0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80062a4:	f7fa f818 	bl	80002d8 <__aeabi_dsub>
 80062a8:	f806 4b01 	strb.w	r4, [r6], #1
 80062ac:	9d07      	ldr	r5, [sp, #28]
 80062ae:	eba6 040a 	sub.w	r4, r6, sl
 80062b2:	42a5      	cmp	r5, r4
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	f040 8117 	bne.w	80064ea <_dtoa_r+0x6e2>
 80062bc:	f7fa f80e 	bl	80002dc <__adddf3>
 80062c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062c4:	4604      	mov	r4, r0
 80062c6:	460d      	mov	r5, r1
 80062c8:	f7fa fc4e 	bl	8000b68 <__aeabi_dcmpgt>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	f040 80f9 	bne.w	80064c4 <_dtoa_r+0x6bc>
 80062d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062d6:	4620      	mov	r0, r4
 80062d8:	4629      	mov	r1, r5
 80062da:	f7fa fc1d 	bl	8000b18 <__aeabi_dcmpeq>
 80062de:	b118      	cbz	r0, 80062e8 <_dtoa_r+0x4e0>
 80062e0:	f018 0f01 	tst.w	r8, #1
 80062e4:	f040 80ee 	bne.w	80064c4 <_dtoa_r+0x6bc>
 80062e8:	4649      	mov	r1, r9
 80062ea:	4658      	mov	r0, fp
 80062ec:	f000 fc90 	bl	8006c10 <_Bfree>
 80062f0:	2300      	movs	r3, #0
 80062f2:	7033      	strb	r3, [r6, #0]
 80062f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80062f6:	3701      	adds	r7, #1
 80062f8:	601f      	str	r7, [r3, #0]
 80062fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 831d 	beq.w	800693c <_dtoa_r+0xb34>
 8006302:	601e      	str	r6, [r3, #0]
 8006304:	e31a      	b.n	800693c <_dtoa_r+0xb34>
 8006306:	07e2      	lsls	r2, r4, #31
 8006308:	d505      	bpl.n	8006316 <_dtoa_r+0x50e>
 800630a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800630e:	f7fa f99b 	bl	8000648 <__aeabi_dmul>
 8006312:	3601      	adds	r6, #1
 8006314:	2301      	movs	r3, #1
 8006316:	1064      	asrs	r4, r4, #1
 8006318:	3508      	adds	r5, #8
 800631a:	e73f      	b.n	800619c <_dtoa_r+0x394>
 800631c:	2602      	movs	r6, #2
 800631e:	e742      	b.n	80061a6 <_dtoa_r+0x39e>
 8006320:	9c07      	ldr	r4, [sp, #28]
 8006322:	9704      	str	r7, [sp, #16]
 8006324:	e761      	b.n	80061ea <_dtoa_r+0x3e2>
 8006326:	4b27      	ldr	r3, [pc, #156]	@ (80063c4 <_dtoa_r+0x5bc>)
 8006328:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800632a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800632e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006332:	4454      	add	r4, sl
 8006334:	2900      	cmp	r1, #0
 8006336:	d053      	beq.n	80063e0 <_dtoa_r+0x5d8>
 8006338:	4928      	ldr	r1, [pc, #160]	@ (80063dc <_dtoa_r+0x5d4>)
 800633a:	2000      	movs	r0, #0
 800633c:	f7fa faae 	bl	800089c <__aeabi_ddiv>
 8006340:	4633      	mov	r3, r6
 8006342:	462a      	mov	r2, r5
 8006344:	f7f9 ffc8 	bl	80002d8 <__aeabi_dsub>
 8006348:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800634c:	4656      	mov	r6, sl
 800634e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006352:	f7fa fc29 	bl	8000ba8 <__aeabi_d2iz>
 8006356:	4605      	mov	r5, r0
 8006358:	f7fa f90c 	bl	8000574 <__aeabi_i2d>
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006364:	f7f9 ffb8 	bl	80002d8 <__aeabi_dsub>
 8006368:	3530      	adds	r5, #48	@ 0x30
 800636a:	4602      	mov	r2, r0
 800636c:	460b      	mov	r3, r1
 800636e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006372:	f806 5b01 	strb.w	r5, [r6], #1
 8006376:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800637a:	f7fa fbd7 	bl	8000b2c <__aeabi_dcmplt>
 800637e:	2800      	cmp	r0, #0
 8006380:	d171      	bne.n	8006466 <_dtoa_r+0x65e>
 8006382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006386:	4911      	ldr	r1, [pc, #68]	@ (80063cc <_dtoa_r+0x5c4>)
 8006388:	2000      	movs	r0, #0
 800638a:	f7f9 ffa5 	bl	80002d8 <__aeabi_dsub>
 800638e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006392:	f7fa fbcb 	bl	8000b2c <__aeabi_dcmplt>
 8006396:	2800      	cmp	r0, #0
 8006398:	f040 8095 	bne.w	80064c6 <_dtoa_r+0x6be>
 800639c:	42a6      	cmp	r6, r4
 800639e:	f43f af50 	beq.w	8006242 <_dtoa_r+0x43a>
 80063a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80063a6:	4b0a      	ldr	r3, [pc, #40]	@ (80063d0 <_dtoa_r+0x5c8>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	f7fa f94d 	bl	8000648 <__aeabi_dmul>
 80063ae:	4b08      	ldr	r3, [pc, #32]	@ (80063d0 <_dtoa_r+0x5c8>)
 80063b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80063b4:	2200      	movs	r2, #0
 80063b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063ba:	f7fa f945 	bl	8000648 <__aeabi_dmul>
 80063be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063c2:	e7c4      	b.n	800634e <_dtoa_r+0x546>
 80063c4:	08009570 	.word	0x08009570
 80063c8:	08009548 	.word	0x08009548
 80063cc:	3ff00000 	.word	0x3ff00000
 80063d0:	40240000 	.word	0x40240000
 80063d4:	401c0000 	.word	0x401c0000
 80063d8:	40140000 	.word	0x40140000
 80063dc:	3fe00000 	.word	0x3fe00000
 80063e0:	4631      	mov	r1, r6
 80063e2:	4628      	mov	r0, r5
 80063e4:	f7fa f930 	bl	8000648 <__aeabi_dmul>
 80063e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80063ec:	9415      	str	r4, [sp, #84]	@ 0x54
 80063ee:	4656      	mov	r6, sl
 80063f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063f4:	f7fa fbd8 	bl	8000ba8 <__aeabi_d2iz>
 80063f8:	4605      	mov	r5, r0
 80063fa:	f7fa f8bb 	bl	8000574 <__aeabi_i2d>
 80063fe:	4602      	mov	r2, r0
 8006400:	460b      	mov	r3, r1
 8006402:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006406:	f7f9 ff67 	bl	80002d8 <__aeabi_dsub>
 800640a:	3530      	adds	r5, #48	@ 0x30
 800640c:	f806 5b01 	strb.w	r5, [r6], #1
 8006410:	4602      	mov	r2, r0
 8006412:	460b      	mov	r3, r1
 8006414:	42a6      	cmp	r6, r4
 8006416:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800641a:	f04f 0200 	mov.w	r2, #0
 800641e:	d124      	bne.n	800646a <_dtoa_r+0x662>
 8006420:	4bac      	ldr	r3, [pc, #688]	@ (80066d4 <_dtoa_r+0x8cc>)
 8006422:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006426:	f7f9 ff59 	bl	80002dc <__adddf3>
 800642a:	4602      	mov	r2, r0
 800642c:	460b      	mov	r3, r1
 800642e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006432:	f7fa fb99 	bl	8000b68 <__aeabi_dcmpgt>
 8006436:	2800      	cmp	r0, #0
 8006438:	d145      	bne.n	80064c6 <_dtoa_r+0x6be>
 800643a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800643e:	49a5      	ldr	r1, [pc, #660]	@ (80066d4 <_dtoa_r+0x8cc>)
 8006440:	2000      	movs	r0, #0
 8006442:	f7f9 ff49 	bl	80002d8 <__aeabi_dsub>
 8006446:	4602      	mov	r2, r0
 8006448:	460b      	mov	r3, r1
 800644a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800644e:	f7fa fb6d 	bl	8000b2c <__aeabi_dcmplt>
 8006452:	2800      	cmp	r0, #0
 8006454:	f43f aef5 	beq.w	8006242 <_dtoa_r+0x43a>
 8006458:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800645a:	1e73      	subs	r3, r6, #1
 800645c:	9315      	str	r3, [sp, #84]	@ 0x54
 800645e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006462:	2b30      	cmp	r3, #48	@ 0x30
 8006464:	d0f8      	beq.n	8006458 <_dtoa_r+0x650>
 8006466:	9f04      	ldr	r7, [sp, #16]
 8006468:	e73e      	b.n	80062e8 <_dtoa_r+0x4e0>
 800646a:	4b9b      	ldr	r3, [pc, #620]	@ (80066d8 <_dtoa_r+0x8d0>)
 800646c:	f7fa f8ec 	bl	8000648 <__aeabi_dmul>
 8006470:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006474:	e7bc      	b.n	80063f0 <_dtoa_r+0x5e8>
 8006476:	d10c      	bne.n	8006492 <_dtoa_r+0x68a>
 8006478:	4b98      	ldr	r3, [pc, #608]	@ (80066dc <_dtoa_r+0x8d4>)
 800647a:	2200      	movs	r2, #0
 800647c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006480:	f7fa f8e2 	bl	8000648 <__aeabi_dmul>
 8006484:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006488:	f7fa fb64 	bl	8000b54 <__aeabi_dcmpge>
 800648c:	2800      	cmp	r0, #0
 800648e:	f000 8157 	beq.w	8006740 <_dtoa_r+0x938>
 8006492:	2400      	movs	r4, #0
 8006494:	4625      	mov	r5, r4
 8006496:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006498:	43db      	mvns	r3, r3
 800649a:	9304      	str	r3, [sp, #16]
 800649c:	4656      	mov	r6, sl
 800649e:	2700      	movs	r7, #0
 80064a0:	4621      	mov	r1, r4
 80064a2:	4658      	mov	r0, fp
 80064a4:	f000 fbb4 	bl	8006c10 <_Bfree>
 80064a8:	2d00      	cmp	r5, #0
 80064aa:	d0dc      	beq.n	8006466 <_dtoa_r+0x65e>
 80064ac:	b12f      	cbz	r7, 80064ba <_dtoa_r+0x6b2>
 80064ae:	42af      	cmp	r7, r5
 80064b0:	d003      	beq.n	80064ba <_dtoa_r+0x6b2>
 80064b2:	4639      	mov	r1, r7
 80064b4:	4658      	mov	r0, fp
 80064b6:	f000 fbab 	bl	8006c10 <_Bfree>
 80064ba:	4629      	mov	r1, r5
 80064bc:	4658      	mov	r0, fp
 80064be:	f000 fba7 	bl	8006c10 <_Bfree>
 80064c2:	e7d0      	b.n	8006466 <_dtoa_r+0x65e>
 80064c4:	9704      	str	r7, [sp, #16]
 80064c6:	4633      	mov	r3, r6
 80064c8:	461e      	mov	r6, r3
 80064ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064ce:	2a39      	cmp	r2, #57	@ 0x39
 80064d0:	d107      	bne.n	80064e2 <_dtoa_r+0x6da>
 80064d2:	459a      	cmp	sl, r3
 80064d4:	d1f8      	bne.n	80064c8 <_dtoa_r+0x6c0>
 80064d6:	9a04      	ldr	r2, [sp, #16]
 80064d8:	3201      	adds	r2, #1
 80064da:	9204      	str	r2, [sp, #16]
 80064dc:	2230      	movs	r2, #48	@ 0x30
 80064de:	f88a 2000 	strb.w	r2, [sl]
 80064e2:	781a      	ldrb	r2, [r3, #0]
 80064e4:	3201      	adds	r2, #1
 80064e6:	701a      	strb	r2, [r3, #0]
 80064e8:	e7bd      	b.n	8006466 <_dtoa_r+0x65e>
 80064ea:	4b7b      	ldr	r3, [pc, #492]	@ (80066d8 <_dtoa_r+0x8d0>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	f7fa f8ab 	bl	8000648 <__aeabi_dmul>
 80064f2:	2200      	movs	r2, #0
 80064f4:	2300      	movs	r3, #0
 80064f6:	4604      	mov	r4, r0
 80064f8:	460d      	mov	r5, r1
 80064fa:	f7fa fb0d 	bl	8000b18 <__aeabi_dcmpeq>
 80064fe:	2800      	cmp	r0, #0
 8006500:	f43f aebb 	beq.w	800627a <_dtoa_r+0x472>
 8006504:	e6f0      	b.n	80062e8 <_dtoa_r+0x4e0>
 8006506:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006508:	2a00      	cmp	r2, #0
 800650a:	f000 80db 	beq.w	80066c4 <_dtoa_r+0x8bc>
 800650e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006510:	2a01      	cmp	r2, #1
 8006512:	f300 80bf 	bgt.w	8006694 <_dtoa_r+0x88c>
 8006516:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006518:	2a00      	cmp	r2, #0
 800651a:	f000 80b7 	beq.w	800668c <_dtoa_r+0x884>
 800651e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006522:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006524:	4646      	mov	r6, r8
 8006526:	9a08      	ldr	r2, [sp, #32]
 8006528:	2101      	movs	r1, #1
 800652a:	441a      	add	r2, r3
 800652c:	4658      	mov	r0, fp
 800652e:	4498      	add	r8, r3
 8006530:	9208      	str	r2, [sp, #32]
 8006532:	f000 fc6b 	bl	8006e0c <__i2b>
 8006536:	4605      	mov	r5, r0
 8006538:	b15e      	cbz	r6, 8006552 <_dtoa_r+0x74a>
 800653a:	9b08      	ldr	r3, [sp, #32]
 800653c:	2b00      	cmp	r3, #0
 800653e:	dd08      	ble.n	8006552 <_dtoa_r+0x74a>
 8006540:	42b3      	cmp	r3, r6
 8006542:	9a08      	ldr	r2, [sp, #32]
 8006544:	bfa8      	it	ge
 8006546:	4633      	movge	r3, r6
 8006548:	eba8 0803 	sub.w	r8, r8, r3
 800654c:	1af6      	subs	r6, r6, r3
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	9308      	str	r3, [sp, #32]
 8006552:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006554:	b1f3      	cbz	r3, 8006594 <_dtoa_r+0x78c>
 8006556:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 80b7 	beq.w	80066cc <_dtoa_r+0x8c4>
 800655e:	b18c      	cbz	r4, 8006584 <_dtoa_r+0x77c>
 8006560:	4629      	mov	r1, r5
 8006562:	4622      	mov	r2, r4
 8006564:	4658      	mov	r0, fp
 8006566:	f000 fd11 	bl	8006f8c <__pow5mult>
 800656a:	464a      	mov	r2, r9
 800656c:	4601      	mov	r1, r0
 800656e:	4605      	mov	r5, r0
 8006570:	4658      	mov	r0, fp
 8006572:	f000 fc61 	bl	8006e38 <__multiply>
 8006576:	4649      	mov	r1, r9
 8006578:	9004      	str	r0, [sp, #16]
 800657a:	4658      	mov	r0, fp
 800657c:	f000 fb48 	bl	8006c10 <_Bfree>
 8006580:	9b04      	ldr	r3, [sp, #16]
 8006582:	4699      	mov	r9, r3
 8006584:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006586:	1b1a      	subs	r2, r3, r4
 8006588:	d004      	beq.n	8006594 <_dtoa_r+0x78c>
 800658a:	4649      	mov	r1, r9
 800658c:	4658      	mov	r0, fp
 800658e:	f000 fcfd 	bl	8006f8c <__pow5mult>
 8006592:	4681      	mov	r9, r0
 8006594:	2101      	movs	r1, #1
 8006596:	4658      	mov	r0, fp
 8006598:	f000 fc38 	bl	8006e0c <__i2b>
 800659c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800659e:	4604      	mov	r4, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 81cf 	beq.w	8006944 <_dtoa_r+0xb3c>
 80065a6:	461a      	mov	r2, r3
 80065a8:	4601      	mov	r1, r0
 80065aa:	4658      	mov	r0, fp
 80065ac:	f000 fcee 	bl	8006f8c <__pow5mult>
 80065b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	4604      	mov	r4, r0
 80065b6:	f300 8095 	bgt.w	80066e4 <_dtoa_r+0x8dc>
 80065ba:	9b02      	ldr	r3, [sp, #8]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f040 8087 	bne.w	80066d0 <_dtoa_r+0x8c8>
 80065c2:	9b03      	ldr	r3, [sp, #12]
 80065c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f040 8089 	bne.w	80066e0 <_dtoa_r+0x8d8>
 80065ce:	9b03      	ldr	r3, [sp, #12]
 80065d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80065d4:	0d1b      	lsrs	r3, r3, #20
 80065d6:	051b      	lsls	r3, r3, #20
 80065d8:	b12b      	cbz	r3, 80065e6 <_dtoa_r+0x7de>
 80065da:	9b08      	ldr	r3, [sp, #32]
 80065dc:	3301      	adds	r3, #1
 80065de:	9308      	str	r3, [sp, #32]
 80065e0:	f108 0801 	add.w	r8, r8, #1
 80065e4:	2301      	movs	r3, #1
 80065e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80065e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f000 81b0 	beq.w	8006950 <_dtoa_r+0xb48>
 80065f0:	6923      	ldr	r3, [r4, #16]
 80065f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80065f6:	6918      	ldr	r0, [r3, #16]
 80065f8:	f000 fbbc 	bl	8006d74 <__hi0bits>
 80065fc:	f1c0 0020 	rsb	r0, r0, #32
 8006600:	9b08      	ldr	r3, [sp, #32]
 8006602:	4418      	add	r0, r3
 8006604:	f010 001f 	ands.w	r0, r0, #31
 8006608:	d077      	beq.n	80066fa <_dtoa_r+0x8f2>
 800660a:	f1c0 0320 	rsb	r3, r0, #32
 800660e:	2b04      	cmp	r3, #4
 8006610:	dd6b      	ble.n	80066ea <_dtoa_r+0x8e2>
 8006612:	9b08      	ldr	r3, [sp, #32]
 8006614:	f1c0 001c 	rsb	r0, r0, #28
 8006618:	4403      	add	r3, r0
 800661a:	4480      	add	r8, r0
 800661c:	4406      	add	r6, r0
 800661e:	9308      	str	r3, [sp, #32]
 8006620:	f1b8 0f00 	cmp.w	r8, #0
 8006624:	dd05      	ble.n	8006632 <_dtoa_r+0x82a>
 8006626:	4649      	mov	r1, r9
 8006628:	4642      	mov	r2, r8
 800662a:	4658      	mov	r0, fp
 800662c:	f000 fd08 	bl	8007040 <__lshift>
 8006630:	4681      	mov	r9, r0
 8006632:	9b08      	ldr	r3, [sp, #32]
 8006634:	2b00      	cmp	r3, #0
 8006636:	dd05      	ble.n	8006644 <_dtoa_r+0x83c>
 8006638:	4621      	mov	r1, r4
 800663a:	461a      	mov	r2, r3
 800663c:	4658      	mov	r0, fp
 800663e:	f000 fcff 	bl	8007040 <__lshift>
 8006642:	4604      	mov	r4, r0
 8006644:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006646:	2b00      	cmp	r3, #0
 8006648:	d059      	beq.n	80066fe <_dtoa_r+0x8f6>
 800664a:	4621      	mov	r1, r4
 800664c:	4648      	mov	r0, r9
 800664e:	f000 fd63 	bl	8007118 <__mcmp>
 8006652:	2800      	cmp	r0, #0
 8006654:	da53      	bge.n	80066fe <_dtoa_r+0x8f6>
 8006656:	1e7b      	subs	r3, r7, #1
 8006658:	9304      	str	r3, [sp, #16]
 800665a:	4649      	mov	r1, r9
 800665c:	2300      	movs	r3, #0
 800665e:	220a      	movs	r2, #10
 8006660:	4658      	mov	r0, fp
 8006662:	f000 faf7 	bl	8006c54 <__multadd>
 8006666:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006668:	4681      	mov	r9, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 8172 	beq.w	8006954 <_dtoa_r+0xb4c>
 8006670:	2300      	movs	r3, #0
 8006672:	4629      	mov	r1, r5
 8006674:	220a      	movs	r2, #10
 8006676:	4658      	mov	r0, fp
 8006678:	f000 faec 	bl	8006c54 <__multadd>
 800667c:	9b00      	ldr	r3, [sp, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	4605      	mov	r5, r0
 8006682:	dc67      	bgt.n	8006754 <_dtoa_r+0x94c>
 8006684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006686:	2b02      	cmp	r3, #2
 8006688:	dc41      	bgt.n	800670e <_dtoa_r+0x906>
 800668a:	e063      	b.n	8006754 <_dtoa_r+0x94c>
 800668c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800668e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006692:	e746      	b.n	8006522 <_dtoa_r+0x71a>
 8006694:	9b07      	ldr	r3, [sp, #28]
 8006696:	1e5c      	subs	r4, r3, #1
 8006698:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800669a:	42a3      	cmp	r3, r4
 800669c:	bfbf      	itttt	lt
 800669e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80066a0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80066a2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80066a4:	1ae3      	sublt	r3, r4, r3
 80066a6:	bfb4      	ite	lt
 80066a8:	18d2      	addlt	r2, r2, r3
 80066aa:	1b1c      	subge	r4, r3, r4
 80066ac:	9b07      	ldr	r3, [sp, #28]
 80066ae:	bfbc      	itt	lt
 80066b0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80066b2:	2400      	movlt	r4, #0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	bfb5      	itete	lt
 80066b8:	eba8 0603 	sublt.w	r6, r8, r3
 80066bc:	9b07      	ldrge	r3, [sp, #28]
 80066be:	2300      	movlt	r3, #0
 80066c0:	4646      	movge	r6, r8
 80066c2:	e730      	b.n	8006526 <_dtoa_r+0x71e>
 80066c4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80066c6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80066c8:	4646      	mov	r6, r8
 80066ca:	e735      	b.n	8006538 <_dtoa_r+0x730>
 80066cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80066ce:	e75c      	b.n	800658a <_dtoa_r+0x782>
 80066d0:	2300      	movs	r3, #0
 80066d2:	e788      	b.n	80065e6 <_dtoa_r+0x7de>
 80066d4:	3fe00000 	.word	0x3fe00000
 80066d8:	40240000 	.word	0x40240000
 80066dc:	40140000 	.word	0x40140000
 80066e0:	9b02      	ldr	r3, [sp, #8]
 80066e2:	e780      	b.n	80065e6 <_dtoa_r+0x7de>
 80066e4:	2300      	movs	r3, #0
 80066e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80066e8:	e782      	b.n	80065f0 <_dtoa_r+0x7e8>
 80066ea:	d099      	beq.n	8006620 <_dtoa_r+0x818>
 80066ec:	9a08      	ldr	r2, [sp, #32]
 80066ee:	331c      	adds	r3, #28
 80066f0:	441a      	add	r2, r3
 80066f2:	4498      	add	r8, r3
 80066f4:	441e      	add	r6, r3
 80066f6:	9208      	str	r2, [sp, #32]
 80066f8:	e792      	b.n	8006620 <_dtoa_r+0x818>
 80066fa:	4603      	mov	r3, r0
 80066fc:	e7f6      	b.n	80066ec <_dtoa_r+0x8e4>
 80066fe:	9b07      	ldr	r3, [sp, #28]
 8006700:	9704      	str	r7, [sp, #16]
 8006702:	2b00      	cmp	r3, #0
 8006704:	dc20      	bgt.n	8006748 <_dtoa_r+0x940>
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800670a:	2b02      	cmp	r3, #2
 800670c:	dd1e      	ble.n	800674c <_dtoa_r+0x944>
 800670e:	9b00      	ldr	r3, [sp, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	f47f aec0 	bne.w	8006496 <_dtoa_r+0x68e>
 8006716:	4621      	mov	r1, r4
 8006718:	2205      	movs	r2, #5
 800671a:	4658      	mov	r0, fp
 800671c:	f000 fa9a 	bl	8006c54 <__multadd>
 8006720:	4601      	mov	r1, r0
 8006722:	4604      	mov	r4, r0
 8006724:	4648      	mov	r0, r9
 8006726:	f000 fcf7 	bl	8007118 <__mcmp>
 800672a:	2800      	cmp	r0, #0
 800672c:	f77f aeb3 	ble.w	8006496 <_dtoa_r+0x68e>
 8006730:	4656      	mov	r6, sl
 8006732:	2331      	movs	r3, #49	@ 0x31
 8006734:	f806 3b01 	strb.w	r3, [r6], #1
 8006738:	9b04      	ldr	r3, [sp, #16]
 800673a:	3301      	adds	r3, #1
 800673c:	9304      	str	r3, [sp, #16]
 800673e:	e6ae      	b.n	800649e <_dtoa_r+0x696>
 8006740:	9c07      	ldr	r4, [sp, #28]
 8006742:	9704      	str	r7, [sp, #16]
 8006744:	4625      	mov	r5, r4
 8006746:	e7f3      	b.n	8006730 <_dtoa_r+0x928>
 8006748:	9b07      	ldr	r3, [sp, #28]
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800674e:	2b00      	cmp	r3, #0
 8006750:	f000 8104 	beq.w	800695c <_dtoa_r+0xb54>
 8006754:	2e00      	cmp	r6, #0
 8006756:	dd05      	ble.n	8006764 <_dtoa_r+0x95c>
 8006758:	4629      	mov	r1, r5
 800675a:	4632      	mov	r2, r6
 800675c:	4658      	mov	r0, fp
 800675e:	f000 fc6f 	bl	8007040 <__lshift>
 8006762:	4605      	mov	r5, r0
 8006764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006766:	2b00      	cmp	r3, #0
 8006768:	d05a      	beq.n	8006820 <_dtoa_r+0xa18>
 800676a:	6869      	ldr	r1, [r5, #4]
 800676c:	4658      	mov	r0, fp
 800676e:	f000 fa0f 	bl	8006b90 <_Balloc>
 8006772:	4606      	mov	r6, r0
 8006774:	b928      	cbnz	r0, 8006782 <_dtoa_r+0x97a>
 8006776:	4b84      	ldr	r3, [pc, #528]	@ (8006988 <_dtoa_r+0xb80>)
 8006778:	4602      	mov	r2, r0
 800677a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800677e:	f7ff bb5a 	b.w	8005e36 <_dtoa_r+0x2e>
 8006782:	692a      	ldr	r2, [r5, #16]
 8006784:	3202      	adds	r2, #2
 8006786:	0092      	lsls	r2, r2, #2
 8006788:	f105 010c 	add.w	r1, r5, #12
 800678c:	300c      	adds	r0, #12
 800678e:	f001 ff75 	bl	800867c <memcpy>
 8006792:	2201      	movs	r2, #1
 8006794:	4631      	mov	r1, r6
 8006796:	4658      	mov	r0, fp
 8006798:	f000 fc52 	bl	8007040 <__lshift>
 800679c:	f10a 0301 	add.w	r3, sl, #1
 80067a0:	9307      	str	r3, [sp, #28]
 80067a2:	9b00      	ldr	r3, [sp, #0]
 80067a4:	4453      	add	r3, sl
 80067a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067a8:	9b02      	ldr	r3, [sp, #8]
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	462f      	mov	r7, r5
 80067b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80067b2:	4605      	mov	r5, r0
 80067b4:	9b07      	ldr	r3, [sp, #28]
 80067b6:	4621      	mov	r1, r4
 80067b8:	3b01      	subs	r3, #1
 80067ba:	4648      	mov	r0, r9
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	f7ff fa99 	bl	8005cf4 <quorem>
 80067c2:	4639      	mov	r1, r7
 80067c4:	9002      	str	r0, [sp, #8]
 80067c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80067ca:	4648      	mov	r0, r9
 80067cc:	f000 fca4 	bl	8007118 <__mcmp>
 80067d0:	462a      	mov	r2, r5
 80067d2:	9008      	str	r0, [sp, #32]
 80067d4:	4621      	mov	r1, r4
 80067d6:	4658      	mov	r0, fp
 80067d8:	f000 fcba 	bl	8007150 <__mdiff>
 80067dc:	68c2      	ldr	r2, [r0, #12]
 80067de:	4606      	mov	r6, r0
 80067e0:	bb02      	cbnz	r2, 8006824 <_dtoa_r+0xa1c>
 80067e2:	4601      	mov	r1, r0
 80067e4:	4648      	mov	r0, r9
 80067e6:	f000 fc97 	bl	8007118 <__mcmp>
 80067ea:	4602      	mov	r2, r0
 80067ec:	4631      	mov	r1, r6
 80067ee:	4658      	mov	r0, fp
 80067f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80067f2:	f000 fa0d 	bl	8006c10 <_Bfree>
 80067f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067fa:	9e07      	ldr	r6, [sp, #28]
 80067fc:	ea43 0102 	orr.w	r1, r3, r2
 8006800:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006802:	4319      	orrs	r1, r3
 8006804:	d110      	bne.n	8006828 <_dtoa_r+0xa20>
 8006806:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800680a:	d029      	beq.n	8006860 <_dtoa_r+0xa58>
 800680c:	9b08      	ldr	r3, [sp, #32]
 800680e:	2b00      	cmp	r3, #0
 8006810:	dd02      	ble.n	8006818 <_dtoa_r+0xa10>
 8006812:	9b02      	ldr	r3, [sp, #8]
 8006814:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006818:	9b00      	ldr	r3, [sp, #0]
 800681a:	f883 8000 	strb.w	r8, [r3]
 800681e:	e63f      	b.n	80064a0 <_dtoa_r+0x698>
 8006820:	4628      	mov	r0, r5
 8006822:	e7bb      	b.n	800679c <_dtoa_r+0x994>
 8006824:	2201      	movs	r2, #1
 8006826:	e7e1      	b.n	80067ec <_dtoa_r+0x9e4>
 8006828:	9b08      	ldr	r3, [sp, #32]
 800682a:	2b00      	cmp	r3, #0
 800682c:	db04      	blt.n	8006838 <_dtoa_r+0xa30>
 800682e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006830:	430b      	orrs	r3, r1
 8006832:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006834:	430b      	orrs	r3, r1
 8006836:	d120      	bne.n	800687a <_dtoa_r+0xa72>
 8006838:	2a00      	cmp	r2, #0
 800683a:	dded      	ble.n	8006818 <_dtoa_r+0xa10>
 800683c:	4649      	mov	r1, r9
 800683e:	2201      	movs	r2, #1
 8006840:	4658      	mov	r0, fp
 8006842:	f000 fbfd 	bl	8007040 <__lshift>
 8006846:	4621      	mov	r1, r4
 8006848:	4681      	mov	r9, r0
 800684a:	f000 fc65 	bl	8007118 <__mcmp>
 800684e:	2800      	cmp	r0, #0
 8006850:	dc03      	bgt.n	800685a <_dtoa_r+0xa52>
 8006852:	d1e1      	bne.n	8006818 <_dtoa_r+0xa10>
 8006854:	f018 0f01 	tst.w	r8, #1
 8006858:	d0de      	beq.n	8006818 <_dtoa_r+0xa10>
 800685a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800685e:	d1d8      	bne.n	8006812 <_dtoa_r+0xa0a>
 8006860:	9a00      	ldr	r2, [sp, #0]
 8006862:	2339      	movs	r3, #57	@ 0x39
 8006864:	7013      	strb	r3, [r2, #0]
 8006866:	4633      	mov	r3, r6
 8006868:	461e      	mov	r6, r3
 800686a:	3b01      	subs	r3, #1
 800686c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006870:	2a39      	cmp	r2, #57	@ 0x39
 8006872:	d052      	beq.n	800691a <_dtoa_r+0xb12>
 8006874:	3201      	adds	r2, #1
 8006876:	701a      	strb	r2, [r3, #0]
 8006878:	e612      	b.n	80064a0 <_dtoa_r+0x698>
 800687a:	2a00      	cmp	r2, #0
 800687c:	dd07      	ble.n	800688e <_dtoa_r+0xa86>
 800687e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006882:	d0ed      	beq.n	8006860 <_dtoa_r+0xa58>
 8006884:	9a00      	ldr	r2, [sp, #0]
 8006886:	f108 0301 	add.w	r3, r8, #1
 800688a:	7013      	strb	r3, [r2, #0]
 800688c:	e608      	b.n	80064a0 <_dtoa_r+0x698>
 800688e:	9b07      	ldr	r3, [sp, #28]
 8006890:	9a07      	ldr	r2, [sp, #28]
 8006892:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006896:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006898:	4293      	cmp	r3, r2
 800689a:	d028      	beq.n	80068ee <_dtoa_r+0xae6>
 800689c:	4649      	mov	r1, r9
 800689e:	2300      	movs	r3, #0
 80068a0:	220a      	movs	r2, #10
 80068a2:	4658      	mov	r0, fp
 80068a4:	f000 f9d6 	bl	8006c54 <__multadd>
 80068a8:	42af      	cmp	r7, r5
 80068aa:	4681      	mov	r9, r0
 80068ac:	f04f 0300 	mov.w	r3, #0
 80068b0:	f04f 020a 	mov.w	r2, #10
 80068b4:	4639      	mov	r1, r7
 80068b6:	4658      	mov	r0, fp
 80068b8:	d107      	bne.n	80068ca <_dtoa_r+0xac2>
 80068ba:	f000 f9cb 	bl	8006c54 <__multadd>
 80068be:	4607      	mov	r7, r0
 80068c0:	4605      	mov	r5, r0
 80068c2:	9b07      	ldr	r3, [sp, #28]
 80068c4:	3301      	adds	r3, #1
 80068c6:	9307      	str	r3, [sp, #28]
 80068c8:	e774      	b.n	80067b4 <_dtoa_r+0x9ac>
 80068ca:	f000 f9c3 	bl	8006c54 <__multadd>
 80068ce:	4629      	mov	r1, r5
 80068d0:	4607      	mov	r7, r0
 80068d2:	2300      	movs	r3, #0
 80068d4:	220a      	movs	r2, #10
 80068d6:	4658      	mov	r0, fp
 80068d8:	f000 f9bc 	bl	8006c54 <__multadd>
 80068dc:	4605      	mov	r5, r0
 80068de:	e7f0      	b.n	80068c2 <_dtoa_r+0xaba>
 80068e0:	9b00      	ldr	r3, [sp, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	bfcc      	ite	gt
 80068e6:	461e      	movgt	r6, r3
 80068e8:	2601      	movle	r6, #1
 80068ea:	4456      	add	r6, sl
 80068ec:	2700      	movs	r7, #0
 80068ee:	4649      	mov	r1, r9
 80068f0:	2201      	movs	r2, #1
 80068f2:	4658      	mov	r0, fp
 80068f4:	f000 fba4 	bl	8007040 <__lshift>
 80068f8:	4621      	mov	r1, r4
 80068fa:	4681      	mov	r9, r0
 80068fc:	f000 fc0c 	bl	8007118 <__mcmp>
 8006900:	2800      	cmp	r0, #0
 8006902:	dcb0      	bgt.n	8006866 <_dtoa_r+0xa5e>
 8006904:	d102      	bne.n	800690c <_dtoa_r+0xb04>
 8006906:	f018 0f01 	tst.w	r8, #1
 800690a:	d1ac      	bne.n	8006866 <_dtoa_r+0xa5e>
 800690c:	4633      	mov	r3, r6
 800690e:	461e      	mov	r6, r3
 8006910:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006914:	2a30      	cmp	r2, #48	@ 0x30
 8006916:	d0fa      	beq.n	800690e <_dtoa_r+0xb06>
 8006918:	e5c2      	b.n	80064a0 <_dtoa_r+0x698>
 800691a:	459a      	cmp	sl, r3
 800691c:	d1a4      	bne.n	8006868 <_dtoa_r+0xa60>
 800691e:	9b04      	ldr	r3, [sp, #16]
 8006920:	3301      	adds	r3, #1
 8006922:	9304      	str	r3, [sp, #16]
 8006924:	2331      	movs	r3, #49	@ 0x31
 8006926:	f88a 3000 	strb.w	r3, [sl]
 800692a:	e5b9      	b.n	80064a0 <_dtoa_r+0x698>
 800692c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800692e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800698c <_dtoa_r+0xb84>
 8006932:	b11b      	cbz	r3, 800693c <_dtoa_r+0xb34>
 8006934:	f10a 0308 	add.w	r3, sl, #8
 8006938:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800693a:	6013      	str	r3, [r2, #0]
 800693c:	4650      	mov	r0, sl
 800693e:	b019      	add	sp, #100	@ 0x64
 8006940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006944:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006946:	2b01      	cmp	r3, #1
 8006948:	f77f ae37 	ble.w	80065ba <_dtoa_r+0x7b2>
 800694c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800694e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006950:	2001      	movs	r0, #1
 8006952:	e655      	b.n	8006600 <_dtoa_r+0x7f8>
 8006954:	9b00      	ldr	r3, [sp, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	f77f aed6 	ble.w	8006708 <_dtoa_r+0x900>
 800695c:	4656      	mov	r6, sl
 800695e:	4621      	mov	r1, r4
 8006960:	4648      	mov	r0, r9
 8006962:	f7ff f9c7 	bl	8005cf4 <quorem>
 8006966:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800696a:	f806 8b01 	strb.w	r8, [r6], #1
 800696e:	9b00      	ldr	r3, [sp, #0]
 8006970:	eba6 020a 	sub.w	r2, r6, sl
 8006974:	4293      	cmp	r3, r2
 8006976:	ddb3      	ble.n	80068e0 <_dtoa_r+0xad8>
 8006978:	4649      	mov	r1, r9
 800697a:	2300      	movs	r3, #0
 800697c:	220a      	movs	r2, #10
 800697e:	4658      	mov	r0, fp
 8006980:	f000 f968 	bl	8006c54 <__multadd>
 8006984:	4681      	mov	r9, r0
 8006986:	e7ea      	b.n	800695e <_dtoa_r+0xb56>
 8006988:	080094d1 	.word	0x080094d1
 800698c:	08009455 	.word	0x08009455

08006990 <_free_r>:
 8006990:	b538      	push	{r3, r4, r5, lr}
 8006992:	4605      	mov	r5, r0
 8006994:	2900      	cmp	r1, #0
 8006996:	d041      	beq.n	8006a1c <_free_r+0x8c>
 8006998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800699c:	1f0c      	subs	r4, r1, #4
 800699e:	2b00      	cmp	r3, #0
 80069a0:	bfb8      	it	lt
 80069a2:	18e4      	addlt	r4, r4, r3
 80069a4:	f000 f8e8 	bl	8006b78 <__malloc_lock>
 80069a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006a20 <_free_r+0x90>)
 80069aa:	6813      	ldr	r3, [r2, #0]
 80069ac:	b933      	cbnz	r3, 80069bc <_free_r+0x2c>
 80069ae:	6063      	str	r3, [r4, #4]
 80069b0:	6014      	str	r4, [r2, #0]
 80069b2:	4628      	mov	r0, r5
 80069b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069b8:	f000 b8e4 	b.w	8006b84 <__malloc_unlock>
 80069bc:	42a3      	cmp	r3, r4
 80069be:	d908      	bls.n	80069d2 <_free_r+0x42>
 80069c0:	6820      	ldr	r0, [r4, #0]
 80069c2:	1821      	adds	r1, r4, r0
 80069c4:	428b      	cmp	r3, r1
 80069c6:	bf01      	itttt	eq
 80069c8:	6819      	ldreq	r1, [r3, #0]
 80069ca:	685b      	ldreq	r3, [r3, #4]
 80069cc:	1809      	addeq	r1, r1, r0
 80069ce:	6021      	streq	r1, [r4, #0]
 80069d0:	e7ed      	b.n	80069ae <_free_r+0x1e>
 80069d2:	461a      	mov	r2, r3
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	b10b      	cbz	r3, 80069dc <_free_r+0x4c>
 80069d8:	42a3      	cmp	r3, r4
 80069da:	d9fa      	bls.n	80069d2 <_free_r+0x42>
 80069dc:	6811      	ldr	r1, [r2, #0]
 80069de:	1850      	adds	r0, r2, r1
 80069e0:	42a0      	cmp	r0, r4
 80069e2:	d10b      	bne.n	80069fc <_free_r+0x6c>
 80069e4:	6820      	ldr	r0, [r4, #0]
 80069e6:	4401      	add	r1, r0
 80069e8:	1850      	adds	r0, r2, r1
 80069ea:	4283      	cmp	r3, r0
 80069ec:	6011      	str	r1, [r2, #0]
 80069ee:	d1e0      	bne.n	80069b2 <_free_r+0x22>
 80069f0:	6818      	ldr	r0, [r3, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	6053      	str	r3, [r2, #4]
 80069f6:	4408      	add	r0, r1
 80069f8:	6010      	str	r0, [r2, #0]
 80069fa:	e7da      	b.n	80069b2 <_free_r+0x22>
 80069fc:	d902      	bls.n	8006a04 <_free_r+0x74>
 80069fe:	230c      	movs	r3, #12
 8006a00:	602b      	str	r3, [r5, #0]
 8006a02:	e7d6      	b.n	80069b2 <_free_r+0x22>
 8006a04:	6820      	ldr	r0, [r4, #0]
 8006a06:	1821      	adds	r1, r4, r0
 8006a08:	428b      	cmp	r3, r1
 8006a0a:	bf04      	itt	eq
 8006a0c:	6819      	ldreq	r1, [r3, #0]
 8006a0e:	685b      	ldreq	r3, [r3, #4]
 8006a10:	6063      	str	r3, [r4, #4]
 8006a12:	bf04      	itt	eq
 8006a14:	1809      	addeq	r1, r1, r0
 8006a16:	6021      	streq	r1, [r4, #0]
 8006a18:	6054      	str	r4, [r2, #4]
 8006a1a:	e7ca      	b.n	80069b2 <_free_r+0x22>
 8006a1c:	bd38      	pop	{r3, r4, r5, pc}
 8006a1e:	bf00      	nop
 8006a20:	2000054c 	.word	0x2000054c

08006a24 <malloc>:
 8006a24:	4b02      	ldr	r3, [pc, #8]	@ (8006a30 <malloc+0xc>)
 8006a26:	4601      	mov	r1, r0
 8006a28:	6818      	ldr	r0, [r3, #0]
 8006a2a:	f000 b825 	b.w	8006a78 <_malloc_r>
 8006a2e:	bf00      	nop
 8006a30:	2000001c 	.word	0x2000001c

08006a34 <sbrk_aligned>:
 8006a34:	b570      	push	{r4, r5, r6, lr}
 8006a36:	4e0f      	ldr	r6, [pc, #60]	@ (8006a74 <sbrk_aligned+0x40>)
 8006a38:	460c      	mov	r4, r1
 8006a3a:	6831      	ldr	r1, [r6, #0]
 8006a3c:	4605      	mov	r5, r0
 8006a3e:	b911      	cbnz	r1, 8006a46 <sbrk_aligned+0x12>
 8006a40:	f001 fe0c 	bl	800865c <_sbrk_r>
 8006a44:	6030      	str	r0, [r6, #0]
 8006a46:	4621      	mov	r1, r4
 8006a48:	4628      	mov	r0, r5
 8006a4a:	f001 fe07 	bl	800865c <_sbrk_r>
 8006a4e:	1c43      	adds	r3, r0, #1
 8006a50:	d103      	bne.n	8006a5a <sbrk_aligned+0x26>
 8006a52:	f04f 34ff 	mov.w	r4, #4294967295
 8006a56:	4620      	mov	r0, r4
 8006a58:	bd70      	pop	{r4, r5, r6, pc}
 8006a5a:	1cc4      	adds	r4, r0, #3
 8006a5c:	f024 0403 	bic.w	r4, r4, #3
 8006a60:	42a0      	cmp	r0, r4
 8006a62:	d0f8      	beq.n	8006a56 <sbrk_aligned+0x22>
 8006a64:	1a21      	subs	r1, r4, r0
 8006a66:	4628      	mov	r0, r5
 8006a68:	f001 fdf8 	bl	800865c <_sbrk_r>
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	d1f2      	bne.n	8006a56 <sbrk_aligned+0x22>
 8006a70:	e7ef      	b.n	8006a52 <sbrk_aligned+0x1e>
 8006a72:	bf00      	nop
 8006a74:	20000548 	.word	0x20000548

08006a78 <_malloc_r>:
 8006a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a7c:	1ccd      	adds	r5, r1, #3
 8006a7e:	f025 0503 	bic.w	r5, r5, #3
 8006a82:	3508      	adds	r5, #8
 8006a84:	2d0c      	cmp	r5, #12
 8006a86:	bf38      	it	cc
 8006a88:	250c      	movcc	r5, #12
 8006a8a:	2d00      	cmp	r5, #0
 8006a8c:	4606      	mov	r6, r0
 8006a8e:	db01      	blt.n	8006a94 <_malloc_r+0x1c>
 8006a90:	42a9      	cmp	r1, r5
 8006a92:	d904      	bls.n	8006a9e <_malloc_r+0x26>
 8006a94:	230c      	movs	r3, #12
 8006a96:	6033      	str	r3, [r6, #0]
 8006a98:	2000      	movs	r0, #0
 8006a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b74 <_malloc_r+0xfc>
 8006aa2:	f000 f869 	bl	8006b78 <__malloc_lock>
 8006aa6:	f8d8 3000 	ldr.w	r3, [r8]
 8006aaa:	461c      	mov	r4, r3
 8006aac:	bb44      	cbnz	r4, 8006b00 <_malloc_r+0x88>
 8006aae:	4629      	mov	r1, r5
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	f7ff ffbf 	bl	8006a34 <sbrk_aligned>
 8006ab6:	1c43      	adds	r3, r0, #1
 8006ab8:	4604      	mov	r4, r0
 8006aba:	d158      	bne.n	8006b6e <_malloc_r+0xf6>
 8006abc:	f8d8 4000 	ldr.w	r4, [r8]
 8006ac0:	4627      	mov	r7, r4
 8006ac2:	2f00      	cmp	r7, #0
 8006ac4:	d143      	bne.n	8006b4e <_malloc_r+0xd6>
 8006ac6:	2c00      	cmp	r4, #0
 8006ac8:	d04b      	beq.n	8006b62 <_malloc_r+0xea>
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	4639      	mov	r1, r7
 8006ace:	4630      	mov	r0, r6
 8006ad0:	eb04 0903 	add.w	r9, r4, r3
 8006ad4:	f001 fdc2 	bl	800865c <_sbrk_r>
 8006ad8:	4581      	cmp	r9, r0
 8006ada:	d142      	bne.n	8006b62 <_malloc_r+0xea>
 8006adc:	6821      	ldr	r1, [r4, #0]
 8006ade:	1a6d      	subs	r5, r5, r1
 8006ae0:	4629      	mov	r1, r5
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	f7ff ffa6 	bl	8006a34 <sbrk_aligned>
 8006ae8:	3001      	adds	r0, #1
 8006aea:	d03a      	beq.n	8006b62 <_malloc_r+0xea>
 8006aec:	6823      	ldr	r3, [r4, #0]
 8006aee:	442b      	add	r3, r5
 8006af0:	6023      	str	r3, [r4, #0]
 8006af2:	f8d8 3000 	ldr.w	r3, [r8]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	bb62      	cbnz	r2, 8006b54 <_malloc_r+0xdc>
 8006afa:	f8c8 7000 	str.w	r7, [r8]
 8006afe:	e00f      	b.n	8006b20 <_malloc_r+0xa8>
 8006b00:	6822      	ldr	r2, [r4, #0]
 8006b02:	1b52      	subs	r2, r2, r5
 8006b04:	d420      	bmi.n	8006b48 <_malloc_r+0xd0>
 8006b06:	2a0b      	cmp	r2, #11
 8006b08:	d917      	bls.n	8006b3a <_malloc_r+0xc2>
 8006b0a:	1961      	adds	r1, r4, r5
 8006b0c:	42a3      	cmp	r3, r4
 8006b0e:	6025      	str	r5, [r4, #0]
 8006b10:	bf18      	it	ne
 8006b12:	6059      	strne	r1, [r3, #4]
 8006b14:	6863      	ldr	r3, [r4, #4]
 8006b16:	bf08      	it	eq
 8006b18:	f8c8 1000 	streq.w	r1, [r8]
 8006b1c:	5162      	str	r2, [r4, r5]
 8006b1e:	604b      	str	r3, [r1, #4]
 8006b20:	4630      	mov	r0, r6
 8006b22:	f000 f82f 	bl	8006b84 <__malloc_unlock>
 8006b26:	f104 000b 	add.w	r0, r4, #11
 8006b2a:	1d23      	adds	r3, r4, #4
 8006b2c:	f020 0007 	bic.w	r0, r0, #7
 8006b30:	1ac2      	subs	r2, r0, r3
 8006b32:	bf1c      	itt	ne
 8006b34:	1a1b      	subne	r3, r3, r0
 8006b36:	50a3      	strne	r3, [r4, r2]
 8006b38:	e7af      	b.n	8006a9a <_malloc_r+0x22>
 8006b3a:	6862      	ldr	r2, [r4, #4]
 8006b3c:	42a3      	cmp	r3, r4
 8006b3e:	bf0c      	ite	eq
 8006b40:	f8c8 2000 	streq.w	r2, [r8]
 8006b44:	605a      	strne	r2, [r3, #4]
 8006b46:	e7eb      	b.n	8006b20 <_malloc_r+0xa8>
 8006b48:	4623      	mov	r3, r4
 8006b4a:	6864      	ldr	r4, [r4, #4]
 8006b4c:	e7ae      	b.n	8006aac <_malloc_r+0x34>
 8006b4e:	463c      	mov	r4, r7
 8006b50:	687f      	ldr	r7, [r7, #4]
 8006b52:	e7b6      	b.n	8006ac2 <_malloc_r+0x4a>
 8006b54:	461a      	mov	r2, r3
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	42a3      	cmp	r3, r4
 8006b5a:	d1fb      	bne.n	8006b54 <_malloc_r+0xdc>
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	6053      	str	r3, [r2, #4]
 8006b60:	e7de      	b.n	8006b20 <_malloc_r+0xa8>
 8006b62:	230c      	movs	r3, #12
 8006b64:	6033      	str	r3, [r6, #0]
 8006b66:	4630      	mov	r0, r6
 8006b68:	f000 f80c 	bl	8006b84 <__malloc_unlock>
 8006b6c:	e794      	b.n	8006a98 <_malloc_r+0x20>
 8006b6e:	6005      	str	r5, [r0, #0]
 8006b70:	e7d6      	b.n	8006b20 <_malloc_r+0xa8>
 8006b72:	bf00      	nop
 8006b74:	2000054c 	.word	0x2000054c

08006b78 <__malloc_lock>:
 8006b78:	4801      	ldr	r0, [pc, #4]	@ (8006b80 <__malloc_lock+0x8>)
 8006b7a:	f7ff b8b2 	b.w	8005ce2 <__retarget_lock_acquire_recursive>
 8006b7e:	bf00      	nop
 8006b80:	20000544 	.word	0x20000544

08006b84 <__malloc_unlock>:
 8006b84:	4801      	ldr	r0, [pc, #4]	@ (8006b8c <__malloc_unlock+0x8>)
 8006b86:	f7ff b8ad 	b.w	8005ce4 <__retarget_lock_release_recursive>
 8006b8a:	bf00      	nop
 8006b8c:	20000544 	.word	0x20000544

08006b90 <_Balloc>:
 8006b90:	b570      	push	{r4, r5, r6, lr}
 8006b92:	69c6      	ldr	r6, [r0, #28]
 8006b94:	4604      	mov	r4, r0
 8006b96:	460d      	mov	r5, r1
 8006b98:	b976      	cbnz	r6, 8006bb8 <_Balloc+0x28>
 8006b9a:	2010      	movs	r0, #16
 8006b9c:	f7ff ff42 	bl	8006a24 <malloc>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	61e0      	str	r0, [r4, #28]
 8006ba4:	b920      	cbnz	r0, 8006bb0 <_Balloc+0x20>
 8006ba6:	4b18      	ldr	r3, [pc, #96]	@ (8006c08 <_Balloc+0x78>)
 8006ba8:	4818      	ldr	r0, [pc, #96]	@ (8006c0c <_Balloc+0x7c>)
 8006baa:	216b      	movs	r1, #107	@ 0x6b
 8006bac:	f001 fd7c 	bl	80086a8 <__assert_func>
 8006bb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bb4:	6006      	str	r6, [r0, #0]
 8006bb6:	60c6      	str	r6, [r0, #12]
 8006bb8:	69e6      	ldr	r6, [r4, #28]
 8006bba:	68f3      	ldr	r3, [r6, #12]
 8006bbc:	b183      	cbz	r3, 8006be0 <_Balloc+0x50>
 8006bbe:	69e3      	ldr	r3, [r4, #28]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006bc6:	b9b8      	cbnz	r0, 8006bf8 <_Balloc+0x68>
 8006bc8:	2101      	movs	r1, #1
 8006bca:	fa01 f605 	lsl.w	r6, r1, r5
 8006bce:	1d72      	adds	r2, r6, #5
 8006bd0:	0092      	lsls	r2, r2, #2
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f001 fd86 	bl	80086e4 <_calloc_r>
 8006bd8:	b160      	cbz	r0, 8006bf4 <_Balloc+0x64>
 8006bda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006bde:	e00e      	b.n	8006bfe <_Balloc+0x6e>
 8006be0:	2221      	movs	r2, #33	@ 0x21
 8006be2:	2104      	movs	r1, #4
 8006be4:	4620      	mov	r0, r4
 8006be6:	f001 fd7d 	bl	80086e4 <_calloc_r>
 8006bea:	69e3      	ldr	r3, [r4, #28]
 8006bec:	60f0      	str	r0, [r6, #12]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1e4      	bne.n	8006bbe <_Balloc+0x2e>
 8006bf4:	2000      	movs	r0, #0
 8006bf6:	bd70      	pop	{r4, r5, r6, pc}
 8006bf8:	6802      	ldr	r2, [r0, #0]
 8006bfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006bfe:	2300      	movs	r3, #0
 8006c00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c04:	e7f7      	b.n	8006bf6 <_Balloc+0x66>
 8006c06:	bf00      	nop
 8006c08:	08009462 	.word	0x08009462
 8006c0c:	080094e2 	.word	0x080094e2

08006c10 <_Bfree>:
 8006c10:	b570      	push	{r4, r5, r6, lr}
 8006c12:	69c6      	ldr	r6, [r0, #28]
 8006c14:	4605      	mov	r5, r0
 8006c16:	460c      	mov	r4, r1
 8006c18:	b976      	cbnz	r6, 8006c38 <_Bfree+0x28>
 8006c1a:	2010      	movs	r0, #16
 8006c1c:	f7ff ff02 	bl	8006a24 <malloc>
 8006c20:	4602      	mov	r2, r0
 8006c22:	61e8      	str	r0, [r5, #28]
 8006c24:	b920      	cbnz	r0, 8006c30 <_Bfree+0x20>
 8006c26:	4b09      	ldr	r3, [pc, #36]	@ (8006c4c <_Bfree+0x3c>)
 8006c28:	4809      	ldr	r0, [pc, #36]	@ (8006c50 <_Bfree+0x40>)
 8006c2a:	218f      	movs	r1, #143	@ 0x8f
 8006c2c:	f001 fd3c 	bl	80086a8 <__assert_func>
 8006c30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c34:	6006      	str	r6, [r0, #0]
 8006c36:	60c6      	str	r6, [r0, #12]
 8006c38:	b13c      	cbz	r4, 8006c4a <_Bfree+0x3a>
 8006c3a:	69eb      	ldr	r3, [r5, #28]
 8006c3c:	6862      	ldr	r2, [r4, #4]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c44:	6021      	str	r1, [r4, #0]
 8006c46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c4a:	bd70      	pop	{r4, r5, r6, pc}
 8006c4c:	08009462 	.word	0x08009462
 8006c50:	080094e2 	.word	0x080094e2

08006c54 <__multadd>:
 8006c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c58:	690d      	ldr	r5, [r1, #16]
 8006c5a:	4607      	mov	r7, r0
 8006c5c:	460c      	mov	r4, r1
 8006c5e:	461e      	mov	r6, r3
 8006c60:	f101 0c14 	add.w	ip, r1, #20
 8006c64:	2000      	movs	r0, #0
 8006c66:	f8dc 3000 	ldr.w	r3, [ip]
 8006c6a:	b299      	uxth	r1, r3
 8006c6c:	fb02 6101 	mla	r1, r2, r1, r6
 8006c70:	0c1e      	lsrs	r6, r3, #16
 8006c72:	0c0b      	lsrs	r3, r1, #16
 8006c74:	fb02 3306 	mla	r3, r2, r6, r3
 8006c78:	b289      	uxth	r1, r1
 8006c7a:	3001      	adds	r0, #1
 8006c7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c80:	4285      	cmp	r5, r0
 8006c82:	f84c 1b04 	str.w	r1, [ip], #4
 8006c86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006c8a:	dcec      	bgt.n	8006c66 <__multadd+0x12>
 8006c8c:	b30e      	cbz	r6, 8006cd2 <__multadd+0x7e>
 8006c8e:	68a3      	ldr	r3, [r4, #8]
 8006c90:	42ab      	cmp	r3, r5
 8006c92:	dc19      	bgt.n	8006cc8 <__multadd+0x74>
 8006c94:	6861      	ldr	r1, [r4, #4]
 8006c96:	4638      	mov	r0, r7
 8006c98:	3101      	adds	r1, #1
 8006c9a:	f7ff ff79 	bl	8006b90 <_Balloc>
 8006c9e:	4680      	mov	r8, r0
 8006ca0:	b928      	cbnz	r0, 8006cae <__multadd+0x5a>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8006cd8 <__multadd+0x84>)
 8006ca6:	480d      	ldr	r0, [pc, #52]	@ (8006cdc <__multadd+0x88>)
 8006ca8:	21ba      	movs	r1, #186	@ 0xba
 8006caa:	f001 fcfd 	bl	80086a8 <__assert_func>
 8006cae:	6922      	ldr	r2, [r4, #16]
 8006cb0:	3202      	adds	r2, #2
 8006cb2:	f104 010c 	add.w	r1, r4, #12
 8006cb6:	0092      	lsls	r2, r2, #2
 8006cb8:	300c      	adds	r0, #12
 8006cba:	f001 fcdf 	bl	800867c <memcpy>
 8006cbe:	4621      	mov	r1, r4
 8006cc0:	4638      	mov	r0, r7
 8006cc2:	f7ff ffa5 	bl	8006c10 <_Bfree>
 8006cc6:	4644      	mov	r4, r8
 8006cc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ccc:	3501      	adds	r5, #1
 8006cce:	615e      	str	r6, [r3, #20]
 8006cd0:	6125      	str	r5, [r4, #16]
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cd8:	080094d1 	.word	0x080094d1
 8006cdc:	080094e2 	.word	0x080094e2

08006ce0 <__s2b>:
 8006ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ce4:	460c      	mov	r4, r1
 8006ce6:	4615      	mov	r5, r2
 8006ce8:	461f      	mov	r7, r3
 8006cea:	2209      	movs	r2, #9
 8006cec:	3308      	adds	r3, #8
 8006cee:	4606      	mov	r6, r0
 8006cf0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	db09      	blt.n	8006d10 <__s2b+0x30>
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	f7ff ff47 	bl	8006b90 <_Balloc>
 8006d02:	b940      	cbnz	r0, 8006d16 <__s2b+0x36>
 8006d04:	4602      	mov	r2, r0
 8006d06:	4b19      	ldr	r3, [pc, #100]	@ (8006d6c <__s2b+0x8c>)
 8006d08:	4819      	ldr	r0, [pc, #100]	@ (8006d70 <__s2b+0x90>)
 8006d0a:	21d3      	movs	r1, #211	@ 0xd3
 8006d0c:	f001 fccc 	bl	80086a8 <__assert_func>
 8006d10:	0052      	lsls	r2, r2, #1
 8006d12:	3101      	adds	r1, #1
 8006d14:	e7f0      	b.n	8006cf8 <__s2b+0x18>
 8006d16:	9b08      	ldr	r3, [sp, #32]
 8006d18:	6143      	str	r3, [r0, #20]
 8006d1a:	2d09      	cmp	r5, #9
 8006d1c:	f04f 0301 	mov.w	r3, #1
 8006d20:	6103      	str	r3, [r0, #16]
 8006d22:	dd16      	ble.n	8006d52 <__s2b+0x72>
 8006d24:	f104 0909 	add.w	r9, r4, #9
 8006d28:	46c8      	mov	r8, r9
 8006d2a:	442c      	add	r4, r5
 8006d2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006d30:	4601      	mov	r1, r0
 8006d32:	3b30      	subs	r3, #48	@ 0x30
 8006d34:	220a      	movs	r2, #10
 8006d36:	4630      	mov	r0, r6
 8006d38:	f7ff ff8c 	bl	8006c54 <__multadd>
 8006d3c:	45a0      	cmp	r8, r4
 8006d3e:	d1f5      	bne.n	8006d2c <__s2b+0x4c>
 8006d40:	f1a5 0408 	sub.w	r4, r5, #8
 8006d44:	444c      	add	r4, r9
 8006d46:	1b2d      	subs	r5, r5, r4
 8006d48:	1963      	adds	r3, r4, r5
 8006d4a:	42bb      	cmp	r3, r7
 8006d4c:	db04      	blt.n	8006d58 <__s2b+0x78>
 8006d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d52:	340a      	adds	r4, #10
 8006d54:	2509      	movs	r5, #9
 8006d56:	e7f6      	b.n	8006d46 <__s2b+0x66>
 8006d58:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006d5c:	4601      	mov	r1, r0
 8006d5e:	3b30      	subs	r3, #48	@ 0x30
 8006d60:	220a      	movs	r2, #10
 8006d62:	4630      	mov	r0, r6
 8006d64:	f7ff ff76 	bl	8006c54 <__multadd>
 8006d68:	e7ee      	b.n	8006d48 <__s2b+0x68>
 8006d6a:	bf00      	nop
 8006d6c:	080094d1 	.word	0x080094d1
 8006d70:	080094e2 	.word	0x080094e2

08006d74 <__hi0bits>:
 8006d74:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006d78:	4603      	mov	r3, r0
 8006d7a:	bf36      	itet	cc
 8006d7c:	0403      	lslcc	r3, r0, #16
 8006d7e:	2000      	movcs	r0, #0
 8006d80:	2010      	movcc	r0, #16
 8006d82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d86:	bf3c      	itt	cc
 8006d88:	021b      	lslcc	r3, r3, #8
 8006d8a:	3008      	addcc	r0, #8
 8006d8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d90:	bf3c      	itt	cc
 8006d92:	011b      	lslcc	r3, r3, #4
 8006d94:	3004      	addcc	r0, #4
 8006d96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d9a:	bf3c      	itt	cc
 8006d9c:	009b      	lslcc	r3, r3, #2
 8006d9e:	3002      	addcc	r0, #2
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	db05      	blt.n	8006db0 <__hi0bits+0x3c>
 8006da4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006da8:	f100 0001 	add.w	r0, r0, #1
 8006dac:	bf08      	it	eq
 8006dae:	2020      	moveq	r0, #32
 8006db0:	4770      	bx	lr

08006db2 <__lo0bits>:
 8006db2:	6803      	ldr	r3, [r0, #0]
 8006db4:	4602      	mov	r2, r0
 8006db6:	f013 0007 	ands.w	r0, r3, #7
 8006dba:	d00b      	beq.n	8006dd4 <__lo0bits+0x22>
 8006dbc:	07d9      	lsls	r1, r3, #31
 8006dbe:	d421      	bmi.n	8006e04 <__lo0bits+0x52>
 8006dc0:	0798      	lsls	r0, r3, #30
 8006dc2:	bf49      	itett	mi
 8006dc4:	085b      	lsrmi	r3, r3, #1
 8006dc6:	089b      	lsrpl	r3, r3, #2
 8006dc8:	2001      	movmi	r0, #1
 8006dca:	6013      	strmi	r3, [r2, #0]
 8006dcc:	bf5c      	itt	pl
 8006dce:	6013      	strpl	r3, [r2, #0]
 8006dd0:	2002      	movpl	r0, #2
 8006dd2:	4770      	bx	lr
 8006dd4:	b299      	uxth	r1, r3
 8006dd6:	b909      	cbnz	r1, 8006ddc <__lo0bits+0x2a>
 8006dd8:	0c1b      	lsrs	r3, r3, #16
 8006dda:	2010      	movs	r0, #16
 8006ddc:	b2d9      	uxtb	r1, r3
 8006dde:	b909      	cbnz	r1, 8006de4 <__lo0bits+0x32>
 8006de0:	3008      	adds	r0, #8
 8006de2:	0a1b      	lsrs	r3, r3, #8
 8006de4:	0719      	lsls	r1, r3, #28
 8006de6:	bf04      	itt	eq
 8006de8:	091b      	lsreq	r3, r3, #4
 8006dea:	3004      	addeq	r0, #4
 8006dec:	0799      	lsls	r1, r3, #30
 8006dee:	bf04      	itt	eq
 8006df0:	089b      	lsreq	r3, r3, #2
 8006df2:	3002      	addeq	r0, #2
 8006df4:	07d9      	lsls	r1, r3, #31
 8006df6:	d403      	bmi.n	8006e00 <__lo0bits+0x4e>
 8006df8:	085b      	lsrs	r3, r3, #1
 8006dfa:	f100 0001 	add.w	r0, r0, #1
 8006dfe:	d003      	beq.n	8006e08 <__lo0bits+0x56>
 8006e00:	6013      	str	r3, [r2, #0]
 8006e02:	4770      	bx	lr
 8006e04:	2000      	movs	r0, #0
 8006e06:	4770      	bx	lr
 8006e08:	2020      	movs	r0, #32
 8006e0a:	4770      	bx	lr

08006e0c <__i2b>:
 8006e0c:	b510      	push	{r4, lr}
 8006e0e:	460c      	mov	r4, r1
 8006e10:	2101      	movs	r1, #1
 8006e12:	f7ff febd 	bl	8006b90 <_Balloc>
 8006e16:	4602      	mov	r2, r0
 8006e18:	b928      	cbnz	r0, 8006e26 <__i2b+0x1a>
 8006e1a:	4b05      	ldr	r3, [pc, #20]	@ (8006e30 <__i2b+0x24>)
 8006e1c:	4805      	ldr	r0, [pc, #20]	@ (8006e34 <__i2b+0x28>)
 8006e1e:	f240 1145 	movw	r1, #325	@ 0x145
 8006e22:	f001 fc41 	bl	80086a8 <__assert_func>
 8006e26:	2301      	movs	r3, #1
 8006e28:	6144      	str	r4, [r0, #20]
 8006e2a:	6103      	str	r3, [r0, #16]
 8006e2c:	bd10      	pop	{r4, pc}
 8006e2e:	bf00      	nop
 8006e30:	080094d1 	.word	0x080094d1
 8006e34:	080094e2 	.word	0x080094e2

08006e38 <__multiply>:
 8006e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e3c:	4614      	mov	r4, r2
 8006e3e:	690a      	ldr	r2, [r1, #16]
 8006e40:	6923      	ldr	r3, [r4, #16]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	bfa8      	it	ge
 8006e46:	4623      	movge	r3, r4
 8006e48:	460f      	mov	r7, r1
 8006e4a:	bfa4      	itt	ge
 8006e4c:	460c      	movge	r4, r1
 8006e4e:	461f      	movge	r7, r3
 8006e50:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006e54:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006e58:	68a3      	ldr	r3, [r4, #8]
 8006e5a:	6861      	ldr	r1, [r4, #4]
 8006e5c:	eb0a 0609 	add.w	r6, sl, r9
 8006e60:	42b3      	cmp	r3, r6
 8006e62:	b085      	sub	sp, #20
 8006e64:	bfb8      	it	lt
 8006e66:	3101      	addlt	r1, #1
 8006e68:	f7ff fe92 	bl	8006b90 <_Balloc>
 8006e6c:	b930      	cbnz	r0, 8006e7c <__multiply+0x44>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	4b44      	ldr	r3, [pc, #272]	@ (8006f84 <__multiply+0x14c>)
 8006e72:	4845      	ldr	r0, [pc, #276]	@ (8006f88 <__multiply+0x150>)
 8006e74:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006e78:	f001 fc16 	bl	80086a8 <__assert_func>
 8006e7c:	f100 0514 	add.w	r5, r0, #20
 8006e80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e84:	462b      	mov	r3, r5
 8006e86:	2200      	movs	r2, #0
 8006e88:	4543      	cmp	r3, r8
 8006e8a:	d321      	bcc.n	8006ed0 <__multiply+0x98>
 8006e8c:	f107 0114 	add.w	r1, r7, #20
 8006e90:	f104 0214 	add.w	r2, r4, #20
 8006e94:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006e98:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006e9c:	9302      	str	r3, [sp, #8]
 8006e9e:	1b13      	subs	r3, r2, r4
 8006ea0:	3b15      	subs	r3, #21
 8006ea2:	f023 0303 	bic.w	r3, r3, #3
 8006ea6:	3304      	adds	r3, #4
 8006ea8:	f104 0715 	add.w	r7, r4, #21
 8006eac:	42ba      	cmp	r2, r7
 8006eae:	bf38      	it	cc
 8006eb0:	2304      	movcc	r3, #4
 8006eb2:	9301      	str	r3, [sp, #4]
 8006eb4:	9b02      	ldr	r3, [sp, #8]
 8006eb6:	9103      	str	r1, [sp, #12]
 8006eb8:	428b      	cmp	r3, r1
 8006eba:	d80c      	bhi.n	8006ed6 <__multiply+0x9e>
 8006ebc:	2e00      	cmp	r6, #0
 8006ebe:	dd03      	ble.n	8006ec8 <__multiply+0x90>
 8006ec0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d05b      	beq.n	8006f80 <__multiply+0x148>
 8006ec8:	6106      	str	r6, [r0, #16]
 8006eca:	b005      	add	sp, #20
 8006ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ed0:	f843 2b04 	str.w	r2, [r3], #4
 8006ed4:	e7d8      	b.n	8006e88 <__multiply+0x50>
 8006ed6:	f8b1 a000 	ldrh.w	sl, [r1]
 8006eda:	f1ba 0f00 	cmp.w	sl, #0
 8006ede:	d024      	beq.n	8006f2a <__multiply+0xf2>
 8006ee0:	f104 0e14 	add.w	lr, r4, #20
 8006ee4:	46a9      	mov	r9, r5
 8006ee6:	f04f 0c00 	mov.w	ip, #0
 8006eea:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006eee:	f8d9 3000 	ldr.w	r3, [r9]
 8006ef2:	fa1f fb87 	uxth.w	fp, r7
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	fb0a 330b 	mla	r3, sl, fp, r3
 8006efc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006f00:	f8d9 7000 	ldr.w	r7, [r9]
 8006f04:	4463      	add	r3, ip
 8006f06:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006f0a:	fb0a c70b 	mla	r7, sl, fp, ip
 8006f0e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006f18:	4572      	cmp	r2, lr
 8006f1a:	f849 3b04 	str.w	r3, [r9], #4
 8006f1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006f22:	d8e2      	bhi.n	8006eea <__multiply+0xb2>
 8006f24:	9b01      	ldr	r3, [sp, #4]
 8006f26:	f845 c003 	str.w	ip, [r5, r3]
 8006f2a:	9b03      	ldr	r3, [sp, #12]
 8006f2c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006f30:	3104      	adds	r1, #4
 8006f32:	f1b9 0f00 	cmp.w	r9, #0
 8006f36:	d021      	beq.n	8006f7c <__multiply+0x144>
 8006f38:	682b      	ldr	r3, [r5, #0]
 8006f3a:	f104 0c14 	add.w	ip, r4, #20
 8006f3e:	46ae      	mov	lr, r5
 8006f40:	f04f 0a00 	mov.w	sl, #0
 8006f44:	f8bc b000 	ldrh.w	fp, [ip]
 8006f48:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006f4c:	fb09 770b 	mla	r7, r9, fp, r7
 8006f50:	4457      	add	r7, sl
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006f58:	f84e 3b04 	str.w	r3, [lr], #4
 8006f5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006f60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f64:	f8be 3000 	ldrh.w	r3, [lr]
 8006f68:	fb09 330a 	mla	r3, r9, sl, r3
 8006f6c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006f70:	4562      	cmp	r2, ip
 8006f72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f76:	d8e5      	bhi.n	8006f44 <__multiply+0x10c>
 8006f78:	9f01      	ldr	r7, [sp, #4]
 8006f7a:	51eb      	str	r3, [r5, r7]
 8006f7c:	3504      	adds	r5, #4
 8006f7e:	e799      	b.n	8006eb4 <__multiply+0x7c>
 8006f80:	3e01      	subs	r6, #1
 8006f82:	e79b      	b.n	8006ebc <__multiply+0x84>
 8006f84:	080094d1 	.word	0x080094d1
 8006f88:	080094e2 	.word	0x080094e2

08006f8c <__pow5mult>:
 8006f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f90:	4615      	mov	r5, r2
 8006f92:	f012 0203 	ands.w	r2, r2, #3
 8006f96:	4607      	mov	r7, r0
 8006f98:	460e      	mov	r6, r1
 8006f9a:	d007      	beq.n	8006fac <__pow5mult+0x20>
 8006f9c:	4c25      	ldr	r4, [pc, #148]	@ (8007034 <__pow5mult+0xa8>)
 8006f9e:	3a01      	subs	r2, #1
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006fa6:	f7ff fe55 	bl	8006c54 <__multadd>
 8006faa:	4606      	mov	r6, r0
 8006fac:	10ad      	asrs	r5, r5, #2
 8006fae:	d03d      	beq.n	800702c <__pow5mult+0xa0>
 8006fb0:	69fc      	ldr	r4, [r7, #28]
 8006fb2:	b97c      	cbnz	r4, 8006fd4 <__pow5mult+0x48>
 8006fb4:	2010      	movs	r0, #16
 8006fb6:	f7ff fd35 	bl	8006a24 <malloc>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	61f8      	str	r0, [r7, #28]
 8006fbe:	b928      	cbnz	r0, 8006fcc <__pow5mult+0x40>
 8006fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8007038 <__pow5mult+0xac>)
 8006fc2:	481e      	ldr	r0, [pc, #120]	@ (800703c <__pow5mult+0xb0>)
 8006fc4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006fc8:	f001 fb6e 	bl	80086a8 <__assert_func>
 8006fcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006fd0:	6004      	str	r4, [r0, #0]
 8006fd2:	60c4      	str	r4, [r0, #12]
 8006fd4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006fd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006fdc:	b94c      	cbnz	r4, 8006ff2 <__pow5mult+0x66>
 8006fde:	f240 2171 	movw	r1, #625	@ 0x271
 8006fe2:	4638      	mov	r0, r7
 8006fe4:	f7ff ff12 	bl	8006e0c <__i2b>
 8006fe8:	2300      	movs	r3, #0
 8006fea:	f8c8 0008 	str.w	r0, [r8, #8]
 8006fee:	4604      	mov	r4, r0
 8006ff0:	6003      	str	r3, [r0, #0]
 8006ff2:	f04f 0900 	mov.w	r9, #0
 8006ff6:	07eb      	lsls	r3, r5, #31
 8006ff8:	d50a      	bpl.n	8007010 <__pow5mult+0x84>
 8006ffa:	4631      	mov	r1, r6
 8006ffc:	4622      	mov	r2, r4
 8006ffe:	4638      	mov	r0, r7
 8007000:	f7ff ff1a 	bl	8006e38 <__multiply>
 8007004:	4631      	mov	r1, r6
 8007006:	4680      	mov	r8, r0
 8007008:	4638      	mov	r0, r7
 800700a:	f7ff fe01 	bl	8006c10 <_Bfree>
 800700e:	4646      	mov	r6, r8
 8007010:	106d      	asrs	r5, r5, #1
 8007012:	d00b      	beq.n	800702c <__pow5mult+0xa0>
 8007014:	6820      	ldr	r0, [r4, #0]
 8007016:	b938      	cbnz	r0, 8007028 <__pow5mult+0x9c>
 8007018:	4622      	mov	r2, r4
 800701a:	4621      	mov	r1, r4
 800701c:	4638      	mov	r0, r7
 800701e:	f7ff ff0b 	bl	8006e38 <__multiply>
 8007022:	6020      	str	r0, [r4, #0]
 8007024:	f8c0 9000 	str.w	r9, [r0]
 8007028:	4604      	mov	r4, r0
 800702a:	e7e4      	b.n	8006ff6 <__pow5mult+0x6a>
 800702c:	4630      	mov	r0, r6
 800702e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007032:	bf00      	nop
 8007034:	0800953c 	.word	0x0800953c
 8007038:	08009462 	.word	0x08009462
 800703c:	080094e2 	.word	0x080094e2

08007040 <__lshift>:
 8007040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007044:	460c      	mov	r4, r1
 8007046:	6849      	ldr	r1, [r1, #4]
 8007048:	6923      	ldr	r3, [r4, #16]
 800704a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800704e:	68a3      	ldr	r3, [r4, #8]
 8007050:	4607      	mov	r7, r0
 8007052:	4691      	mov	r9, r2
 8007054:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007058:	f108 0601 	add.w	r6, r8, #1
 800705c:	42b3      	cmp	r3, r6
 800705e:	db0b      	blt.n	8007078 <__lshift+0x38>
 8007060:	4638      	mov	r0, r7
 8007062:	f7ff fd95 	bl	8006b90 <_Balloc>
 8007066:	4605      	mov	r5, r0
 8007068:	b948      	cbnz	r0, 800707e <__lshift+0x3e>
 800706a:	4602      	mov	r2, r0
 800706c:	4b28      	ldr	r3, [pc, #160]	@ (8007110 <__lshift+0xd0>)
 800706e:	4829      	ldr	r0, [pc, #164]	@ (8007114 <__lshift+0xd4>)
 8007070:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007074:	f001 fb18 	bl	80086a8 <__assert_func>
 8007078:	3101      	adds	r1, #1
 800707a:	005b      	lsls	r3, r3, #1
 800707c:	e7ee      	b.n	800705c <__lshift+0x1c>
 800707e:	2300      	movs	r3, #0
 8007080:	f100 0114 	add.w	r1, r0, #20
 8007084:	f100 0210 	add.w	r2, r0, #16
 8007088:	4618      	mov	r0, r3
 800708a:	4553      	cmp	r3, sl
 800708c:	db33      	blt.n	80070f6 <__lshift+0xb6>
 800708e:	6920      	ldr	r0, [r4, #16]
 8007090:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007094:	f104 0314 	add.w	r3, r4, #20
 8007098:	f019 091f 	ands.w	r9, r9, #31
 800709c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80070a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80070a4:	d02b      	beq.n	80070fe <__lshift+0xbe>
 80070a6:	f1c9 0e20 	rsb	lr, r9, #32
 80070aa:	468a      	mov	sl, r1
 80070ac:	2200      	movs	r2, #0
 80070ae:	6818      	ldr	r0, [r3, #0]
 80070b0:	fa00 f009 	lsl.w	r0, r0, r9
 80070b4:	4310      	orrs	r0, r2
 80070b6:	f84a 0b04 	str.w	r0, [sl], #4
 80070ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80070be:	459c      	cmp	ip, r3
 80070c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80070c4:	d8f3      	bhi.n	80070ae <__lshift+0x6e>
 80070c6:	ebac 0304 	sub.w	r3, ip, r4
 80070ca:	3b15      	subs	r3, #21
 80070cc:	f023 0303 	bic.w	r3, r3, #3
 80070d0:	3304      	adds	r3, #4
 80070d2:	f104 0015 	add.w	r0, r4, #21
 80070d6:	4584      	cmp	ip, r0
 80070d8:	bf38      	it	cc
 80070da:	2304      	movcc	r3, #4
 80070dc:	50ca      	str	r2, [r1, r3]
 80070de:	b10a      	cbz	r2, 80070e4 <__lshift+0xa4>
 80070e0:	f108 0602 	add.w	r6, r8, #2
 80070e4:	3e01      	subs	r6, #1
 80070e6:	4638      	mov	r0, r7
 80070e8:	612e      	str	r6, [r5, #16]
 80070ea:	4621      	mov	r1, r4
 80070ec:	f7ff fd90 	bl	8006c10 <_Bfree>
 80070f0:	4628      	mov	r0, r5
 80070f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80070fa:	3301      	adds	r3, #1
 80070fc:	e7c5      	b.n	800708a <__lshift+0x4a>
 80070fe:	3904      	subs	r1, #4
 8007100:	f853 2b04 	ldr.w	r2, [r3], #4
 8007104:	f841 2f04 	str.w	r2, [r1, #4]!
 8007108:	459c      	cmp	ip, r3
 800710a:	d8f9      	bhi.n	8007100 <__lshift+0xc0>
 800710c:	e7ea      	b.n	80070e4 <__lshift+0xa4>
 800710e:	bf00      	nop
 8007110:	080094d1 	.word	0x080094d1
 8007114:	080094e2 	.word	0x080094e2

08007118 <__mcmp>:
 8007118:	690a      	ldr	r2, [r1, #16]
 800711a:	4603      	mov	r3, r0
 800711c:	6900      	ldr	r0, [r0, #16]
 800711e:	1a80      	subs	r0, r0, r2
 8007120:	b530      	push	{r4, r5, lr}
 8007122:	d10e      	bne.n	8007142 <__mcmp+0x2a>
 8007124:	3314      	adds	r3, #20
 8007126:	3114      	adds	r1, #20
 8007128:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800712c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007130:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007134:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007138:	4295      	cmp	r5, r2
 800713a:	d003      	beq.n	8007144 <__mcmp+0x2c>
 800713c:	d205      	bcs.n	800714a <__mcmp+0x32>
 800713e:	f04f 30ff 	mov.w	r0, #4294967295
 8007142:	bd30      	pop	{r4, r5, pc}
 8007144:	42a3      	cmp	r3, r4
 8007146:	d3f3      	bcc.n	8007130 <__mcmp+0x18>
 8007148:	e7fb      	b.n	8007142 <__mcmp+0x2a>
 800714a:	2001      	movs	r0, #1
 800714c:	e7f9      	b.n	8007142 <__mcmp+0x2a>
	...

08007150 <__mdiff>:
 8007150:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007154:	4689      	mov	r9, r1
 8007156:	4606      	mov	r6, r0
 8007158:	4611      	mov	r1, r2
 800715a:	4648      	mov	r0, r9
 800715c:	4614      	mov	r4, r2
 800715e:	f7ff ffdb 	bl	8007118 <__mcmp>
 8007162:	1e05      	subs	r5, r0, #0
 8007164:	d112      	bne.n	800718c <__mdiff+0x3c>
 8007166:	4629      	mov	r1, r5
 8007168:	4630      	mov	r0, r6
 800716a:	f7ff fd11 	bl	8006b90 <_Balloc>
 800716e:	4602      	mov	r2, r0
 8007170:	b928      	cbnz	r0, 800717e <__mdiff+0x2e>
 8007172:	4b3f      	ldr	r3, [pc, #252]	@ (8007270 <__mdiff+0x120>)
 8007174:	f240 2137 	movw	r1, #567	@ 0x237
 8007178:	483e      	ldr	r0, [pc, #248]	@ (8007274 <__mdiff+0x124>)
 800717a:	f001 fa95 	bl	80086a8 <__assert_func>
 800717e:	2301      	movs	r3, #1
 8007180:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007184:	4610      	mov	r0, r2
 8007186:	b003      	add	sp, #12
 8007188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800718c:	bfbc      	itt	lt
 800718e:	464b      	movlt	r3, r9
 8007190:	46a1      	movlt	r9, r4
 8007192:	4630      	mov	r0, r6
 8007194:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007198:	bfba      	itte	lt
 800719a:	461c      	movlt	r4, r3
 800719c:	2501      	movlt	r5, #1
 800719e:	2500      	movge	r5, #0
 80071a0:	f7ff fcf6 	bl	8006b90 <_Balloc>
 80071a4:	4602      	mov	r2, r0
 80071a6:	b918      	cbnz	r0, 80071b0 <__mdiff+0x60>
 80071a8:	4b31      	ldr	r3, [pc, #196]	@ (8007270 <__mdiff+0x120>)
 80071aa:	f240 2145 	movw	r1, #581	@ 0x245
 80071ae:	e7e3      	b.n	8007178 <__mdiff+0x28>
 80071b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80071b4:	6926      	ldr	r6, [r4, #16]
 80071b6:	60c5      	str	r5, [r0, #12]
 80071b8:	f109 0310 	add.w	r3, r9, #16
 80071bc:	f109 0514 	add.w	r5, r9, #20
 80071c0:	f104 0e14 	add.w	lr, r4, #20
 80071c4:	f100 0b14 	add.w	fp, r0, #20
 80071c8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80071cc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80071d0:	9301      	str	r3, [sp, #4]
 80071d2:	46d9      	mov	r9, fp
 80071d4:	f04f 0c00 	mov.w	ip, #0
 80071d8:	9b01      	ldr	r3, [sp, #4]
 80071da:	f85e 0b04 	ldr.w	r0, [lr], #4
 80071de:	f853 af04 	ldr.w	sl, [r3, #4]!
 80071e2:	9301      	str	r3, [sp, #4]
 80071e4:	fa1f f38a 	uxth.w	r3, sl
 80071e8:	4619      	mov	r1, r3
 80071ea:	b283      	uxth	r3, r0
 80071ec:	1acb      	subs	r3, r1, r3
 80071ee:	0c00      	lsrs	r0, r0, #16
 80071f0:	4463      	add	r3, ip
 80071f2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80071f6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007200:	4576      	cmp	r6, lr
 8007202:	f849 3b04 	str.w	r3, [r9], #4
 8007206:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800720a:	d8e5      	bhi.n	80071d8 <__mdiff+0x88>
 800720c:	1b33      	subs	r3, r6, r4
 800720e:	3b15      	subs	r3, #21
 8007210:	f023 0303 	bic.w	r3, r3, #3
 8007214:	3415      	adds	r4, #21
 8007216:	3304      	adds	r3, #4
 8007218:	42a6      	cmp	r6, r4
 800721a:	bf38      	it	cc
 800721c:	2304      	movcc	r3, #4
 800721e:	441d      	add	r5, r3
 8007220:	445b      	add	r3, fp
 8007222:	461e      	mov	r6, r3
 8007224:	462c      	mov	r4, r5
 8007226:	4544      	cmp	r4, r8
 8007228:	d30e      	bcc.n	8007248 <__mdiff+0xf8>
 800722a:	f108 0103 	add.w	r1, r8, #3
 800722e:	1b49      	subs	r1, r1, r5
 8007230:	f021 0103 	bic.w	r1, r1, #3
 8007234:	3d03      	subs	r5, #3
 8007236:	45a8      	cmp	r8, r5
 8007238:	bf38      	it	cc
 800723a:	2100      	movcc	r1, #0
 800723c:	440b      	add	r3, r1
 800723e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007242:	b191      	cbz	r1, 800726a <__mdiff+0x11a>
 8007244:	6117      	str	r7, [r2, #16]
 8007246:	e79d      	b.n	8007184 <__mdiff+0x34>
 8007248:	f854 1b04 	ldr.w	r1, [r4], #4
 800724c:	46e6      	mov	lr, ip
 800724e:	0c08      	lsrs	r0, r1, #16
 8007250:	fa1c fc81 	uxtah	ip, ip, r1
 8007254:	4471      	add	r1, lr
 8007256:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800725a:	b289      	uxth	r1, r1
 800725c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007260:	f846 1b04 	str.w	r1, [r6], #4
 8007264:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007268:	e7dd      	b.n	8007226 <__mdiff+0xd6>
 800726a:	3f01      	subs	r7, #1
 800726c:	e7e7      	b.n	800723e <__mdiff+0xee>
 800726e:	bf00      	nop
 8007270:	080094d1 	.word	0x080094d1
 8007274:	080094e2 	.word	0x080094e2

08007278 <__ulp>:
 8007278:	b082      	sub	sp, #8
 800727a:	ed8d 0b00 	vstr	d0, [sp]
 800727e:	9a01      	ldr	r2, [sp, #4]
 8007280:	4b0f      	ldr	r3, [pc, #60]	@ (80072c0 <__ulp+0x48>)
 8007282:	4013      	ands	r3, r2
 8007284:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007288:	2b00      	cmp	r3, #0
 800728a:	dc08      	bgt.n	800729e <__ulp+0x26>
 800728c:	425b      	negs	r3, r3
 800728e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007292:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007296:	da04      	bge.n	80072a2 <__ulp+0x2a>
 8007298:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800729c:	4113      	asrs	r3, r2
 800729e:	2200      	movs	r2, #0
 80072a0:	e008      	b.n	80072b4 <__ulp+0x3c>
 80072a2:	f1a2 0314 	sub.w	r3, r2, #20
 80072a6:	2b1e      	cmp	r3, #30
 80072a8:	bfda      	itte	le
 80072aa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80072ae:	40da      	lsrle	r2, r3
 80072b0:	2201      	movgt	r2, #1
 80072b2:	2300      	movs	r3, #0
 80072b4:	4619      	mov	r1, r3
 80072b6:	4610      	mov	r0, r2
 80072b8:	ec41 0b10 	vmov	d0, r0, r1
 80072bc:	b002      	add	sp, #8
 80072be:	4770      	bx	lr
 80072c0:	7ff00000 	.word	0x7ff00000

080072c4 <__b2d>:
 80072c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c8:	6906      	ldr	r6, [r0, #16]
 80072ca:	f100 0814 	add.w	r8, r0, #20
 80072ce:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80072d2:	1f37      	subs	r7, r6, #4
 80072d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80072d8:	4610      	mov	r0, r2
 80072da:	f7ff fd4b 	bl	8006d74 <__hi0bits>
 80072de:	f1c0 0320 	rsb	r3, r0, #32
 80072e2:	280a      	cmp	r0, #10
 80072e4:	600b      	str	r3, [r1, #0]
 80072e6:	491b      	ldr	r1, [pc, #108]	@ (8007354 <__b2d+0x90>)
 80072e8:	dc15      	bgt.n	8007316 <__b2d+0x52>
 80072ea:	f1c0 0c0b 	rsb	ip, r0, #11
 80072ee:	fa22 f30c 	lsr.w	r3, r2, ip
 80072f2:	45b8      	cmp	r8, r7
 80072f4:	ea43 0501 	orr.w	r5, r3, r1
 80072f8:	bf34      	ite	cc
 80072fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80072fe:	2300      	movcs	r3, #0
 8007300:	3015      	adds	r0, #21
 8007302:	fa02 f000 	lsl.w	r0, r2, r0
 8007306:	fa23 f30c 	lsr.w	r3, r3, ip
 800730a:	4303      	orrs	r3, r0
 800730c:	461c      	mov	r4, r3
 800730e:	ec45 4b10 	vmov	d0, r4, r5
 8007312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007316:	45b8      	cmp	r8, r7
 8007318:	bf3a      	itte	cc
 800731a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800731e:	f1a6 0708 	subcc.w	r7, r6, #8
 8007322:	2300      	movcs	r3, #0
 8007324:	380b      	subs	r0, #11
 8007326:	d012      	beq.n	800734e <__b2d+0x8a>
 8007328:	f1c0 0120 	rsb	r1, r0, #32
 800732c:	fa23 f401 	lsr.w	r4, r3, r1
 8007330:	4082      	lsls	r2, r0
 8007332:	4322      	orrs	r2, r4
 8007334:	4547      	cmp	r7, r8
 8007336:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800733a:	bf8c      	ite	hi
 800733c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007340:	2200      	movls	r2, #0
 8007342:	4083      	lsls	r3, r0
 8007344:	40ca      	lsrs	r2, r1
 8007346:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800734a:	4313      	orrs	r3, r2
 800734c:	e7de      	b.n	800730c <__b2d+0x48>
 800734e:	ea42 0501 	orr.w	r5, r2, r1
 8007352:	e7db      	b.n	800730c <__b2d+0x48>
 8007354:	3ff00000 	.word	0x3ff00000

08007358 <__d2b>:
 8007358:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800735c:	460f      	mov	r7, r1
 800735e:	2101      	movs	r1, #1
 8007360:	ec59 8b10 	vmov	r8, r9, d0
 8007364:	4616      	mov	r6, r2
 8007366:	f7ff fc13 	bl	8006b90 <_Balloc>
 800736a:	4604      	mov	r4, r0
 800736c:	b930      	cbnz	r0, 800737c <__d2b+0x24>
 800736e:	4602      	mov	r2, r0
 8007370:	4b23      	ldr	r3, [pc, #140]	@ (8007400 <__d2b+0xa8>)
 8007372:	4824      	ldr	r0, [pc, #144]	@ (8007404 <__d2b+0xac>)
 8007374:	f240 310f 	movw	r1, #783	@ 0x30f
 8007378:	f001 f996 	bl	80086a8 <__assert_func>
 800737c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007380:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007384:	b10d      	cbz	r5, 800738a <__d2b+0x32>
 8007386:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800738a:	9301      	str	r3, [sp, #4]
 800738c:	f1b8 0300 	subs.w	r3, r8, #0
 8007390:	d023      	beq.n	80073da <__d2b+0x82>
 8007392:	4668      	mov	r0, sp
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	f7ff fd0c 	bl	8006db2 <__lo0bits>
 800739a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800739e:	b1d0      	cbz	r0, 80073d6 <__d2b+0x7e>
 80073a0:	f1c0 0320 	rsb	r3, r0, #32
 80073a4:	fa02 f303 	lsl.w	r3, r2, r3
 80073a8:	430b      	orrs	r3, r1
 80073aa:	40c2      	lsrs	r2, r0
 80073ac:	6163      	str	r3, [r4, #20]
 80073ae:	9201      	str	r2, [sp, #4]
 80073b0:	9b01      	ldr	r3, [sp, #4]
 80073b2:	61a3      	str	r3, [r4, #24]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	bf0c      	ite	eq
 80073b8:	2201      	moveq	r2, #1
 80073ba:	2202      	movne	r2, #2
 80073bc:	6122      	str	r2, [r4, #16]
 80073be:	b1a5      	cbz	r5, 80073ea <__d2b+0x92>
 80073c0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80073c4:	4405      	add	r5, r0
 80073c6:	603d      	str	r5, [r7, #0]
 80073c8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80073cc:	6030      	str	r0, [r6, #0]
 80073ce:	4620      	mov	r0, r4
 80073d0:	b003      	add	sp, #12
 80073d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073d6:	6161      	str	r1, [r4, #20]
 80073d8:	e7ea      	b.n	80073b0 <__d2b+0x58>
 80073da:	a801      	add	r0, sp, #4
 80073dc:	f7ff fce9 	bl	8006db2 <__lo0bits>
 80073e0:	9b01      	ldr	r3, [sp, #4]
 80073e2:	6163      	str	r3, [r4, #20]
 80073e4:	3020      	adds	r0, #32
 80073e6:	2201      	movs	r2, #1
 80073e8:	e7e8      	b.n	80073bc <__d2b+0x64>
 80073ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80073ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80073f2:	6038      	str	r0, [r7, #0]
 80073f4:	6918      	ldr	r0, [r3, #16]
 80073f6:	f7ff fcbd 	bl	8006d74 <__hi0bits>
 80073fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80073fe:	e7e5      	b.n	80073cc <__d2b+0x74>
 8007400:	080094d1 	.word	0x080094d1
 8007404:	080094e2 	.word	0x080094e2

08007408 <__ratio>:
 8007408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800740c:	b085      	sub	sp, #20
 800740e:	e9cd 1000 	strd	r1, r0, [sp]
 8007412:	a902      	add	r1, sp, #8
 8007414:	f7ff ff56 	bl	80072c4 <__b2d>
 8007418:	9800      	ldr	r0, [sp, #0]
 800741a:	a903      	add	r1, sp, #12
 800741c:	ec55 4b10 	vmov	r4, r5, d0
 8007420:	f7ff ff50 	bl	80072c4 <__b2d>
 8007424:	9b01      	ldr	r3, [sp, #4]
 8007426:	6919      	ldr	r1, [r3, #16]
 8007428:	9b00      	ldr	r3, [sp, #0]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	1ac9      	subs	r1, r1, r3
 800742e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007432:	1a9b      	subs	r3, r3, r2
 8007434:	ec5b ab10 	vmov	sl, fp, d0
 8007438:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800743c:	2b00      	cmp	r3, #0
 800743e:	bfce      	itee	gt
 8007440:	462a      	movgt	r2, r5
 8007442:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007446:	465a      	movle	r2, fp
 8007448:	462f      	mov	r7, r5
 800744a:	46d9      	mov	r9, fp
 800744c:	bfcc      	ite	gt
 800744e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007452:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007456:	464b      	mov	r3, r9
 8007458:	4652      	mov	r2, sl
 800745a:	4620      	mov	r0, r4
 800745c:	4639      	mov	r1, r7
 800745e:	f7f9 fa1d 	bl	800089c <__aeabi_ddiv>
 8007462:	ec41 0b10 	vmov	d0, r0, r1
 8007466:	b005      	add	sp, #20
 8007468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800746c <__copybits>:
 800746c:	3901      	subs	r1, #1
 800746e:	b570      	push	{r4, r5, r6, lr}
 8007470:	1149      	asrs	r1, r1, #5
 8007472:	6914      	ldr	r4, [r2, #16]
 8007474:	3101      	adds	r1, #1
 8007476:	f102 0314 	add.w	r3, r2, #20
 800747a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800747e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007482:	1f05      	subs	r5, r0, #4
 8007484:	42a3      	cmp	r3, r4
 8007486:	d30c      	bcc.n	80074a2 <__copybits+0x36>
 8007488:	1aa3      	subs	r3, r4, r2
 800748a:	3b11      	subs	r3, #17
 800748c:	f023 0303 	bic.w	r3, r3, #3
 8007490:	3211      	adds	r2, #17
 8007492:	42a2      	cmp	r2, r4
 8007494:	bf88      	it	hi
 8007496:	2300      	movhi	r3, #0
 8007498:	4418      	add	r0, r3
 800749a:	2300      	movs	r3, #0
 800749c:	4288      	cmp	r0, r1
 800749e:	d305      	bcc.n	80074ac <__copybits+0x40>
 80074a0:	bd70      	pop	{r4, r5, r6, pc}
 80074a2:	f853 6b04 	ldr.w	r6, [r3], #4
 80074a6:	f845 6f04 	str.w	r6, [r5, #4]!
 80074aa:	e7eb      	b.n	8007484 <__copybits+0x18>
 80074ac:	f840 3b04 	str.w	r3, [r0], #4
 80074b0:	e7f4      	b.n	800749c <__copybits+0x30>

080074b2 <__any_on>:
 80074b2:	f100 0214 	add.w	r2, r0, #20
 80074b6:	6900      	ldr	r0, [r0, #16]
 80074b8:	114b      	asrs	r3, r1, #5
 80074ba:	4298      	cmp	r0, r3
 80074bc:	b510      	push	{r4, lr}
 80074be:	db11      	blt.n	80074e4 <__any_on+0x32>
 80074c0:	dd0a      	ble.n	80074d8 <__any_on+0x26>
 80074c2:	f011 011f 	ands.w	r1, r1, #31
 80074c6:	d007      	beq.n	80074d8 <__any_on+0x26>
 80074c8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80074cc:	fa24 f001 	lsr.w	r0, r4, r1
 80074d0:	fa00 f101 	lsl.w	r1, r0, r1
 80074d4:	428c      	cmp	r4, r1
 80074d6:	d10b      	bne.n	80074f0 <__any_on+0x3e>
 80074d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80074dc:	4293      	cmp	r3, r2
 80074de:	d803      	bhi.n	80074e8 <__any_on+0x36>
 80074e0:	2000      	movs	r0, #0
 80074e2:	bd10      	pop	{r4, pc}
 80074e4:	4603      	mov	r3, r0
 80074e6:	e7f7      	b.n	80074d8 <__any_on+0x26>
 80074e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80074ec:	2900      	cmp	r1, #0
 80074ee:	d0f5      	beq.n	80074dc <__any_on+0x2a>
 80074f0:	2001      	movs	r0, #1
 80074f2:	e7f6      	b.n	80074e2 <__any_on+0x30>

080074f4 <sulp>:
 80074f4:	b570      	push	{r4, r5, r6, lr}
 80074f6:	4604      	mov	r4, r0
 80074f8:	460d      	mov	r5, r1
 80074fa:	ec45 4b10 	vmov	d0, r4, r5
 80074fe:	4616      	mov	r6, r2
 8007500:	f7ff feba 	bl	8007278 <__ulp>
 8007504:	ec51 0b10 	vmov	r0, r1, d0
 8007508:	b17e      	cbz	r6, 800752a <sulp+0x36>
 800750a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800750e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007512:	2b00      	cmp	r3, #0
 8007514:	dd09      	ble.n	800752a <sulp+0x36>
 8007516:	051b      	lsls	r3, r3, #20
 8007518:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800751c:	2400      	movs	r4, #0
 800751e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007522:	4622      	mov	r2, r4
 8007524:	462b      	mov	r3, r5
 8007526:	f7f9 f88f 	bl	8000648 <__aeabi_dmul>
 800752a:	ec41 0b10 	vmov	d0, r0, r1
 800752e:	bd70      	pop	{r4, r5, r6, pc}

08007530 <_strtod_l>:
 8007530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007534:	b09f      	sub	sp, #124	@ 0x7c
 8007536:	460c      	mov	r4, r1
 8007538:	9217      	str	r2, [sp, #92]	@ 0x5c
 800753a:	2200      	movs	r2, #0
 800753c:	921a      	str	r2, [sp, #104]	@ 0x68
 800753e:	9005      	str	r0, [sp, #20]
 8007540:	f04f 0a00 	mov.w	sl, #0
 8007544:	f04f 0b00 	mov.w	fp, #0
 8007548:	460a      	mov	r2, r1
 800754a:	9219      	str	r2, [sp, #100]	@ 0x64
 800754c:	7811      	ldrb	r1, [r2, #0]
 800754e:	292b      	cmp	r1, #43	@ 0x2b
 8007550:	d04a      	beq.n	80075e8 <_strtod_l+0xb8>
 8007552:	d838      	bhi.n	80075c6 <_strtod_l+0x96>
 8007554:	290d      	cmp	r1, #13
 8007556:	d832      	bhi.n	80075be <_strtod_l+0x8e>
 8007558:	2908      	cmp	r1, #8
 800755a:	d832      	bhi.n	80075c2 <_strtod_l+0x92>
 800755c:	2900      	cmp	r1, #0
 800755e:	d03b      	beq.n	80075d8 <_strtod_l+0xa8>
 8007560:	2200      	movs	r2, #0
 8007562:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007564:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007566:	782a      	ldrb	r2, [r5, #0]
 8007568:	2a30      	cmp	r2, #48	@ 0x30
 800756a:	f040 80b3 	bne.w	80076d4 <_strtod_l+0x1a4>
 800756e:	786a      	ldrb	r2, [r5, #1]
 8007570:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007574:	2a58      	cmp	r2, #88	@ 0x58
 8007576:	d16e      	bne.n	8007656 <_strtod_l+0x126>
 8007578:	9302      	str	r3, [sp, #8]
 800757a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800757c:	9301      	str	r3, [sp, #4]
 800757e:	ab1a      	add	r3, sp, #104	@ 0x68
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	4a8e      	ldr	r2, [pc, #568]	@ (80077bc <_strtod_l+0x28c>)
 8007584:	9805      	ldr	r0, [sp, #20]
 8007586:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007588:	a919      	add	r1, sp, #100	@ 0x64
 800758a:	f001 f927 	bl	80087dc <__gethex>
 800758e:	f010 060f 	ands.w	r6, r0, #15
 8007592:	4604      	mov	r4, r0
 8007594:	d005      	beq.n	80075a2 <_strtod_l+0x72>
 8007596:	2e06      	cmp	r6, #6
 8007598:	d128      	bne.n	80075ec <_strtod_l+0xbc>
 800759a:	3501      	adds	r5, #1
 800759c:	2300      	movs	r3, #0
 800759e:	9519      	str	r5, [sp, #100]	@ 0x64
 80075a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f040 858e 	bne.w	80080c6 <_strtod_l+0xb96>
 80075aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075ac:	b1cb      	cbz	r3, 80075e2 <_strtod_l+0xb2>
 80075ae:	4652      	mov	r2, sl
 80075b0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80075b4:	ec43 2b10 	vmov	d0, r2, r3
 80075b8:	b01f      	add	sp, #124	@ 0x7c
 80075ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075be:	2920      	cmp	r1, #32
 80075c0:	d1ce      	bne.n	8007560 <_strtod_l+0x30>
 80075c2:	3201      	adds	r2, #1
 80075c4:	e7c1      	b.n	800754a <_strtod_l+0x1a>
 80075c6:	292d      	cmp	r1, #45	@ 0x2d
 80075c8:	d1ca      	bne.n	8007560 <_strtod_l+0x30>
 80075ca:	2101      	movs	r1, #1
 80075cc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80075ce:	1c51      	adds	r1, r2, #1
 80075d0:	9119      	str	r1, [sp, #100]	@ 0x64
 80075d2:	7852      	ldrb	r2, [r2, #1]
 80075d4:	2a00      	cmp	r2, #0
 80075d6:	d1c5      	bne.n	8007564 <_strtod_l+0x34>
 80075d8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80075da:	9419      	str	r4, [sp, #100]	@ 0x64
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f040 8570 	bne.w	80080c2 <_strtod_l+0xb92>
 80075e2:	4652      	mov	r2, sl
 80075e4:	465b      	mov	r3, fp
 80075e6:	e7e5      	b.n	80075b4 <_strtod_l+0x84>
 80075e8:	2100      	movs	r1, #0
 80075ea:	e7ef      	b.n	80075cc <_strtod_l+0x9c>
 80075ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80075ee:	b13a      	cbz	r2, 8007600 <_strtod_l+0xd0>
 80075f0:	2135      	movs	r1, #53	@ 0x35
 80075f2:	a81c      	add	r0, sp, #112	@ 0x70
 80075f4:	f7ff ff3a 	bl	800746c <__copybits>
 80075f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80075fa:	9805      	ldr	r0, [sp, #20]
 80075fc:	f7ff fb08 	bl	8006c10 <_Bfree>
 8007600:	3e01      	subs	r6, #1
 8007602:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007604:	2e04      	cmp	r6, #4
 8007606:	d806      	bhi.n	8007616 <_strtod_l+0xe6>
 8007608:	e8df f006 	tbb	[pc, r6]
 800760c:	201d0314 	.word	0x201d0314
 8007610:	14          	.byte	0x14
 8007611:	00          	.byte	0x00
 8007612:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007616:	05e1      	lsls	r1, r4, #23
 8007618:	bf48      	it	mi
 800761a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800761e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007622:	0d1b      	lsrs	r3, r3, #20
 8007624:	051b      	lsls	r3, r3, #20
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1bb      	bne.n	80075a2 <_strtod_l+0x72>
 800762a:	f7fe fb2f 	bl	8005c8c <__errno>
 800762e:	2322      	movs	r3, #34	@ 0x22
 8007630:	6003      	str	r3, [r0, #0]
 8007632:	e7b6      	b.n	80075a2 <_strtod_l+0x72>
 8007634:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007638:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800763c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007640:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007644:	e7e7      	b.n	8007616 <_strtod_l+0xe6>
 8007646:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80077c4 <_strtod_l+0x294>
 800764a:	e7e4      	b.n	8007616 <_strtod_l+0xe6>
 800764c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007650:	f04f 3aff 	mov.w	sl, #4294967295
 8007654:	e7df      	b.n	8007616 <_strtod_l+0xe6>
 8007656:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007658:	1c5a      	adds	r2, r3, #1
 800765a:	9219      	str	r2, [sp, #100]	@ 0x64
 800765c:	785b      	ldrb	r3, [r3, #1]
 800765e:	2b30      	cmp	r3, #48	@ 0x30
 8007660:	d0f9      	beq.n	8007656 <_strtod_l+0x126>
 8007662:	2b00      	cmp	r3, #0
 8007664:	d09d      	beq.n	80075a2 <_strtod_l+0x72>
 8007666:	2301      	movs	r3, #1
 8007668:	9309      	str	r3, [sp, #36]	@ 0x24
 800766a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800766c:	930c      	str	r3, [sp, #48]	@ 0x30
 800766e:	2300      	movs	r3, #0
 8007670:	9308      	str	r3, [sp, #32]
 8007672:	930a      	str	r3, [sp, #40]	@ 0x28
 8007674:	461f      	mov	r7, r3
 8007676:	220a      	movs	r2, #10
 8007678:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800767a:	7805      	ldrb	r5, [r0, #0]
 800767c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007680:	b2d9      	uxtb	r1, r3
 8007682:	2909      	cmp	r1, #9
 8007684:	d928      	bls.n	80076d8 <_strtod_l+0x1a8>
 8007686:	494e      	ldr	r1, [pc, #312]	@ (80077c0 <_strtod_l+0x290>)
 8007688:	2201      	movs	r2, #1
 800768a:	f000 ffd5 	bl	8008638 <strncmp>
 800768e:	2800      	cmp	r0, #0
 8007690:	d032      	beq.n	80076f8 <_strtod_l+0x1c8>
 8007692:	2000      	movs	r0, #0
 8007694:	462a      	mov	r2, r5
 8007696:	4681      	mov	r9, r0
 8007698:	463d      	mov	r5, r7
 800769a:	4603      	mov	r3, r0
 800769c:	2a65      	cmp	r2, #101	@ 0x65
 800769e:	d001      	beq.n	80076a4 <_strtod_l+0x174>
 80076a0:	2a45      	cmp	r2, #69	@ 0x45
 80076a2:	d114      	bne.n	80076ce <_strtod_l+0x19e>
 80076a4:	b91d      	cbnz	r5, 80076ae <_strtod_l+0x17e>
 80076a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076a8:	4302      	orrs	r2, r0
 80076aa:	d095      	beq.n	80075d8 <_strtod_l+0xa8>
 80076ac:	2500      	movs	r5, #0
 80076ae:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80076b0:	1c62      	adds	r2, r4, #1
 80076b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80076b4:	7862      	ldrb	r2, [r4, #1]
 80076b6:	2a2b      	cmp	r2, #43	@ 0x2b
 80076b8:	d077      	beq.n	80077aa <_strtod_l+0x27a>
 80076ba:	2a2d      	cmp	r2, #45	@ 0x2d
 80076bc:	d07b      	beq.n	80077b6 <_strtod_l+0x286>
 80076be:	f04f 0c00 	mov.w	ip, #0
 80076c2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80076c6:	2909      	cmp	r1, #9
 80076c8:	f240 8082 	bls.w	80077d0 <_strtod_l+0x2a0>
 80076cc:	9419      	str	r4, [sp, #100]	@ 0x64
 80076ce:	f04f 0800 	mov.w	r8, #0
 80076d2:	e0a2      	b.n	800781a <_strtod_l+0x2ea>
 80076d4:	2300      	movs	r3, #0
 80076d6:	e7c7      	b.n	8007668 <_strtod_l+0x138>
 80076d8:	2f08      	cmp	r7, #8
 80076da:	bfd5      	itete	le
 80076dc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80076de:	9908      	ldrgt	r1, [sp, #32]
 80076e0:	fb02 3301 	mlale	r3, r2, r1, r3
 80076e4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80076e8:	f100 0001 	add.w	r0, r0, #1
 80076ec:	bfd4      	ite	le
 80076ee:	930a      	strle	r3, [sp, #40]	@ 0x28
 80076f0:	9308      	strgt	r3, [sp, #32]
 80076f2:	3701      	adds	r7, #1
 80076f4:	9019      	str	r0, [sp, #100]	@ 0x64
 80076f6:	e7bf      	b.n	8007678 <_strtod_l+0x148>
 80076f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076fa:	1c5a      	adds	r2, r3, #1
 80076fc:	9219      	str	r2, [sp, #100]	@ 0x64
 80076fe:	785a      	ldrb	r2, [r3, #1]
 8007700:	b37f      	cbz	r7, 8007762 <_strtod_l+0x232>
 8007702:	4681      	mov	r9, r0
 8007704:	463d      	mov	r5, r7
 8007706:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800770a:	2b09      	cmp	r3, #9
 800770c:	d912      	bls.n	8007734 <_strtod_l+0x204>
 800770e:	2301      	movs	r3, #1
 8007710:	e7c4      	b.n	800769c <_strtod_l+0x16c>
 8007712:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007714:	1c5a      	adds	r2, r3, #1
 8007716:	9219      	str	r2, [sp, #100]	@ 0x64
 8007718:	785a      	ldrb	r2, [r3, #1]
 800771a:	3001      	adds	r0, #1
 800771c:	2a30      	cmp	r2, #48	@ 0x30
 800771e:	d0f8      	beq.n	8007712 <_strtod_l+0x1e2>
 8007720:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007724:	2b08      	cmp	r3, #8
 8007726:	f200 84d3 	bhi.w	80080d0 <_strtod_l+0xba0>
 800772a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800772c:	930c      	str	r3, [sp, #48]	@ 0x30
 800772e:	4681      	mov	r9, r0
 8007730:	2000      	movs	r0, #0
 8007732:	4605      	mov	r5, r0
 8007734:	3a30      	subs	r2, #48	@ 0x30
 8007736:	f100 0301 	add.w	r3, r0, #1
 800773a:	d02a      	beq.n	8007792 <_strtod_l+0x262>
 800773c:	4499      	add	r9, r3
 800773e:	eb00 0c05 	add.w	ip, r0, r5
 8007742:	462b      	mov	r3, r5
 8007744:	210a      	movs	r1, #10
 8007746:	4563      	cmp	r3, ip
 8007748:	d10d      	bne.n	8007766 <_strtod_l+0x236>
 800774a:	1c69      	adds	r1, r5, #1
 800774c:	4401      	add	r1, r0
 800774e:	4428      	add	r0, r5
 8007750:	2808      	cmp	r0, #8
 8007752:	dc16      	bgt.n	8007782 <_strtod_l+0x252>
 8007754:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007756:	230a      	movs	r3, #10
 8007758:	fb03 2300 	mla	r3, r3, r0, r2
 800775c:	930a      	str	r3, [sp, #40]	@ 0x28
 800775e:	2300      	movs	r3, #0
 8007760:	e018      	b.n	8007794 <_strtod_l+0x264>
 8007762:	4638      	mov	r0, r7
 8007764:	e7da      	b.n	800771c <_strtod_l+0x1ec>
 8007766:	2b08      	cmp	r3, #8
 8007768:	f103 0301 	add.w	r3, r3, #1
 800776c:	dc03      	bgt.n	8007776 <_strtod_l+0x246>
 800776e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007770:	434e      	muls	r6, r1
 8007772:	960a      	str	r6, [sp, #40]	@ 0x28
 8007774:	e7e7      	b.n	8007746 <_strtod_l+0x216>
 8007776:	2b10      	cmp	r3, #16
 8007778:	bfde      	ittt	le
 800777a:	9e08      	ldrle	r6, [sp, #32]
 800777c:	434e      	mulle	r6, r1
 800777e:	9608      	strle	r6, [sp, #32]
 8007780:	e7e1      	b.n	8007746 <_strtod_l+0x216>
 8007782:	280f      	cmp	r0, #15
 8007784:	dceb      	bgt.n	800775e <_strtod_l+0x22e>
 8007786:	9808      	ldr	r0, [sp, #32]
 8007788:	230a      	movs	r3, #10
 800778a:	fb03 2300 	mla	r3, r3, r0, r2
 800778e:	9308      	str	r3, [sp, #32]
 8007790:	e7e5      	b.n	800775e <_strtod_l+0x22e>
 8007792:	4629      	mov	r1, r5
 8007794:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007796:	1c50      	adds	r0, r2, #1
 8007798:	9019      	str	r0, [sp, #100]	@ 0x64
 800779a:	7852      	ldrb	r2, [r2, #1]
 800779c:	4618      	mov	r0, r3
 800779e:	460d      	mov	r5, r1
 80077a0:	e7b1      	b.n	8007706 <_strtod_l+0x1d6>
 80077a2:	f04f 0900 	mov.w	r9, #0
 80077a6:	2301      	movs	r3, #1
 80077a8:	e77d      	b.n	80076a6 <_strtod_l+0x176>
 80077aa:	f04f 0c00 	mov.w	ip, #0
 80077ae:	1ca2      	adds	r2, r4, #2
 80077b0:	9219      	str	r2, [sp, #100]	@ 0x64
 80077b2:	78a2      	ldrb	r2, [r4, #2]
 80077b4:	e785      	b.n	80076c2 <_strtod_l+0x192>
 80077b6:	f04f 0c01 	mov.w	ip, #1
 80077ba:	e7f8      	b.n	80077ae <_strtod_l+0x27e>
 80077bc:	08009650 	.word	0x08009650
 80077c0:	08009638 	.word	0x08009638
 80077c4:	7ff00000 	.word	0x7ff00000
 80077c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80077ca:	1c51      	adds	r1, r2, #1
 80077cc:	9119      	str	r1, [sp, #100]	@ 0x64
 80077ce:	7852      	ldrb	r2, [r2, #1]
 80077d0:	2a30      	cmp	r2, #48	@ 0x30
 80077d2:	d0f9      	beq.n	80077c8 <_strtod_l+0x298>
 80077d4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80077d8:	2908      	cmp	r1, #8
 80077da:	f63f af78 	bhi.w	80076ce <_strtod_l+0x19e>
 80077de:	3a30      	subs	r2, #48	@ 0x30
 80077e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80077e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80077e4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80077e6:	f04f 080a 	mov.w	r8, #10
 80077ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80077ec:	1c56      	adds	r6, r2, #1
 80077ee:	9619      	str	r6, [sp, #100]	@ 0x64
 80077f0:	7852      	ldrb	r2, [r2, #1]
 80077f2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80077f6:	f1be 0f09 	cmp.w	lr, #9
 80077fa:	d939      	bls.n	8007870 <_strtod_l+0x340>
 80077fc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80077fe:	1a76      	subs	r6, r6, r1
 8007800:	2e08      	cmp	r6, #8
 8007802:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007806:	dc03      	bgt.n	8007810 <_strtod_l+0x2e0>
 8007808:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800780a:	4588      	cmp	r8, r1
 800780c:	bfa8      	it	ge
 800780e:	4688      	movge	r8, r1
 8007810:	f1bc 0f00 	cmp.w	ip, #0
 8007814:	d001      	beq.n	800781a <_strtod_l+0x2ea>
 8007816:	f1c8 0800 	rsb	r8, r8, #0
 800781a:	2d00      	cmp	r5, #0
 800781c:	d14e      	bne.n	80078bc <_strtod_l+0x38c>
 800781e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007820:	4308      	orrs	r0, r1
 8007822:	f47f aebe 	bne.w	80075a2 <_strtod_l+0x72>
 8007826:	2b00      	cmp	r3, #0
 8007828:	f47f aed6 	bne.w	80075d8 <_strtod_l+0xa8>
 800782c:	2a69      	cmp	r2, #105	@ 0x69
 800782e:	d028      	beq.n	8007882 <_strtod_l+0x352>
 8007830:	dc25      	bgt.n	800787e <_strtod_l+0x34e>
 8007832:	2a49      	cmp	r2, #73	@ 0x49
 8007834:	d025      	beq.n	8007882 <_strtod_l+0x352>
 8007836:	2a4e      	cmp	r2, #78	@ 0x4e
 8007838:	f47f aece 	bne.w	80075d8 <_strtod_l+0xa8>
 800783c:	499b      	ldr	r1, [pc, #620]	@ (8007aac <_strtod_l+0x57c>)
 800783e:	a819      	add	r0, sp, #100	@ 0x64
 8007840:	f001 f9ee 	bl	8008c20 <__match>
 8007844:	2800      	cmp	r0, #0
 8007846:	f43f aec7 	beq.w	80075d8 <_strtod_l+0xa8>
 800784a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	2b28      	cmp	r3, #40	@ 0x28
 8007850:	d12e      	bne.n	80078b0 <_strtod_l+0x380>
 8007852:	4997      	ldr	r1, [pc, #604]	@ (8007ab0 <_strtod_l+0x580>)
 8007854:	aa1c      	add	r2, sp, #112	@ 0x70
 8007856:	a819      	add	r0, sp, #100	@ 0x64
 8007858:	f001 f9f6 	bl	8008c48 <__hexnan>
 800785c:	2805      	cmp	r0, #5
 800785e:	d127      	bne.n	80078b0 <_strtod_l+0x380>
 8007860:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007862:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007866:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800786a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800786e:	e698      	b.n	80075a2 <_strtod_l+0x72>
 8007870:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007872:	fb08 2101 	mla	r1, r8, r1, r2
 8007876:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800787a:	920e      	str	r2, [sp, #56]	@ 0x38
 800787c:	e7b5      	b.n	80077ea <_strtod_l+0x2ba>
 800787e:	2a6e      	cmp	r2, #110	@ 0x6e
 8007880:	e7da      	b.n	8007838 <_strtod_l+0x308>
 8007882:	498c      	ldr	r1, [pc, #560]	@ (8007ab4 <_strtod_l+0x584>)
 8007884:	a819      	add	r0, sp, #100	@ 0x64
 8007886:	f001 f9cb 	bl	8008c20 <__match>
 800788a:	2800      	cmp	r0, #0
 800788c:	f43f aea4 	beq.w	80075d8 <_strtod_l+0xa8>
 8007890:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007892:	4989      	ldr	r1, [pc, #548]	@ (8007ab8 <_strtod_l+0x588>)
 8007894:	3b01      	subs	r3, #1
 8007896:	a819      	add	r0, sp, #100	@ 0x64
 8007898:	9319      	str	r3, [sp, #100]	@ 0x64
 800789a:	f001 f9c1 	bl	8008c20 <__match>
 800789e:	b910      	cbnz	r0, 80078a6 <_strtod_l+0x376>
 80078a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078a2:	3301      	adds	r3, #1
 80078a4:	9319      	str	r3, [sp, #100]	@ 0x64
 80078a6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007ac8 <_strtod_l+0x598>
 80078aa:	f04f 0a00 	mov.w	sl, #0
 80078ae:	e678      	b.n	80075a2 <_strtod_l+0x72>
 80078b0:	4882      	ldr	r0, [pc, #520]	@ (8007abc <_strtod_l+0x58c>)
 80078b2:	f000 fef1 	bl	8008698 <nan>
 80078b6:	ec5b ab10 	vmov	sl, fp, d0
 80078ba:	e672      	b.n	80075a2 <_strtod_l+0x72>
 80078bc:	eba8 0309 	sub.w	r3, r8, r9
 80078c0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80078c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80078c4:	2f00      	cmp	r7, #0
 80078c6:	bf08      	it	eq
 80078c8:	462f      	moveq	r7, r5
 80078ca:	2d10      	cmp	r5, #16
 80078cc:	462c      	mov	r4, r5
 80078ce:	bfa8      	it	ge
 80078d0:	2410      	movge	r4, #16
 80078d2:	f7f8 fe3f 	bl	8000554 <__aeabi_ui2d>
 80078d6:	2d09      	cmp	r5, #9
 80078d8:	4682      	mov	sl, r0
 80078da:	468b      	mov	fp, r1
 80078dc:	dc13      	bgt.n	8007906 <_strtod_l+0x3d6>
 80078de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f43f ae5e 	beq.w	80075a2 <_strtod_l+0x72>
 80078e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078e8:	dd78      	ble.n	80079dc <_strtod_l+0x4ac>
 80078ea:	2b16      	cmp	r3, #22
 80078ec:	dc5f      	bgt.n	80079ae <_strtod_l+0x47e>
 80078ee:	4974      	ldr	r1, [pc, #464]	@ (8007ac0 <_strtod_l+0x590>)
 80078f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80078f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078f8:	4652      	mov	r2, sl
 80078fa:	465b      	mov	r3, fp
 80078fc:	f7f8 fea4 	bl	8000648 <__aeabi_dmul>
 8007900:	4682      	mov	sl, r0
 8007902:	468b      	mov	fp, r1
 8007904:	e64d      	b.n	80075a2 <_strtod_l+0x72>
 8007906:	4b6e      	ldr	r3, [pc, #440]	@ (8007ac0 <_strtod_l+0x590>)
 8007908:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800790c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007910:	f7f8 fe9a 	bl	8000648 <__aeabi_dmul>
 8007914:	4682      	mov	sl, r0
 8007916:	9808      	ldr	r0, [sp, #32]
 8007918:	468b      	mov	fp, r1
 800791a:	f7f8 fe1b 	bl	8000554 <__aeabi_ui2d>
 800791e:	4602      	mov	r2, r0
 8007920:	460b      	mov	r3, r1
 8007922:	4650      	mov	r0, sl
 8007924:	4659      	mov	r1, fp
 8007926:	f7f8 fcd9 	bl	80002dc <__adddf3>
 800792a:	2d0f      	cmp	r5, #15
 800792c:	4682      	mov	sl, r0
 800792e:	468b      	mov	fp, r1
 8007930:	ddd5      	ble.n	80078de <_strtod_l+0x3ae>
 8007932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007934:	1b2c      	subs	r4, r5, r4
 8007936:	441c      	add	r4, r3
 8007938:	2c00      	cmp	r4, #0
 800793a:	f340 8096 	ble.w	8007a6a <_strtod_l+0x53a>
 800793e:	f014 030f 	ands.w	r3, r4, #15
 8007942:	d00a      	beq.n	800795a <_strtod_l+0x42a>
 8007944:	495e      	ldr	r1, [pc, #376]	@ (8007ac0 <_strtod_l+0x590>)
 8007946:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800794a:	4652      	mov	r2, sl
 800794c:	465b      	mov	r3, fp
 800794e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007952:	f7f8 fe79 	bl	8000648 <__aeabi_dmul>
 8007956:	4682      	mov	sl, r0
 8007958:	468b      	mov	fp, r1
 800795a:	f034 040f 	bics.w	r4, r4, #15
 800795e:	d073      	beq.n	8007a48 <_strtod_l+0x518>
 8007960:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007964:	dd48      	ble.n	80079f8 <_strtod_l+0x4c8>
 8007966:	2400      	movs	r4, #0
 8007968:	46a0      	mov	r8, r4
 800796a:	940a      	str	r4, [sp, #40]	@ 0x28
 800796c:	46a1      	mov	r9, r4
 800796e:	9a05      	ldr	r2, [sp, #20]
 8007970:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007ac8 <_strtod_l+0x598>
 8007974:	2322      	movs	r3, #34	@ 0x22
 8007976:	6013      	str	r3, [r2, #0]
 8007978:	f04f 0a00 	mov.w	sl, #0
 800797c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800797e:	2b00      	cmp	r3, #0
 8007980:	f43f ae0f 	beq.w	80075a2 <_strtod_l+0x72>
 8007984:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007986:	9805      	ldr	r0, [sp, #20]
 8007988:	f7ff f942 	bl	8006c10 <_Bfree>
 800798c:	9805      	ldr	r0, [sp, #20]
 800798e:	4649      	mov	r1, r9
 8007990:	f7ff f93e 	bl	8006c10 <_Bfree>
 8007994:	9805      	ldr	r0, [sp, #20]
 8007996:	4641      	mov	r1, r8
 8007998:	f7ff f93a 	bl	8006c10 <_Bfree>
 800799c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800799e:	9805      	ldr	r0, [sp, #20]
 80079a0:	f7ff f936 	bl	8006c10 <_Bfree>
 80079a4:	9805      	ldr	r0, [sp, #20]
 80079a6:	4621      	mov	r1, r4
 80079a8:	f7ff f932 	bl	8006c10 <_Bfree>
 80079ac:	e5f9      	b.n	80075a2 <_strtod_l+0x72>
 80079ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079b0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80079b4:	4293      	cmp	r3, r2
 80079b6:	dbbc      	blt.n	8007932 <_strtod_l+0x402>
 80079b8:	4c41      	ldr	r4, [pc, #260]	@ (8007ac0 <_strtod_l+0x590>)
 80079ba:	f1c5 050f 	rsb	r5, r5, #15
 80079be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80079c2:	4652      	mov	r2, sl
 80079c4:	465b      	mov	r3, fp
 80079c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079ca:	f7f8 fe3d 	bl	8000648 <__aeabi_dmul>
 80079ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079d0:	1b5d      	subs	r5, r3, r5
 80079d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80079d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80079da:	e78f      	b.n	80078fc <_strtod_l+0x3cc>
 80079dc:	3316      	adds	r3, #22
 80079de:	dba8      	blt.n	8007932 <_strtod_l+0x402>
 80079e0:	4b37      	ldr	r3, [pc, #220]	@ (8007ac0 <_strtod_l+0x590>)
 80079e2:	eba9 0808 	sub.w	r8, r9, r8
 80079e6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80079ea:	e9d8 2300 	ldrd	r2, r3, [r8]
 80079ee:	4650      	mov	r0, sl
 80079f0:	4659      	mov	r1, fp
 80079f2:	f7f8 ff53 	bl	800089c <__aeabi_ddiv>
 80079f6:	e783      	b.n	8007900 <_strtod_l+0x3d0>
 80079f8:	4b32      	ldr	r3, [pc, #200]	@ (8007ac4 <_strtod_l+0x594>)
 80079fa:	9308      	str	r3, [sp, #32]
 80079fc:	2300      	movs	r3, #0
 80079fe:	1124      	asrs	r4, r4, #4
 8007a00:	4650      	mov	r0, sl
 8007a02:	4659      	mov	r1, fp
 8007a04:	461e      	mov	r6, r3
 8007a06:	2c01      	cmp	r4, #1
 8007a08:	dc21      	bgt.n	8007a4e <_strtod_l+0x51e>
 8007a0a:	b10b      	cbz	r3, 8007a10 <_strtod_l+0x4e0>
 8007a0c:	4682      	mov	sl, r0
 8007a0e:	468b      	mov	fp, r1
 8007a10:	492c      	ldr	r1, [pc, #176]	@ (8007ac4 <_strtod_l+0x594>)
 8007a12:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007a16:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007a1a:	4652      	mov	r2, sl
 8007a1c:	465b      	mov	r3, fp
 8007a1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a22:	f7f8 fe11 	bl	8000648 <__aeabi_dmul>
 8007a26:	4b28      	ldr	r3, [pc, #160]	@ (8007ac8 <_strtod_l+0x598>)
 8007a28:	460a      	mov	r2, r1
 8007a2a:	400b      	ands	r3, r1
 8007a2c:	4927      	ldr	r1, [pc, #156]	@ (8007acc <_strtod_l+0x59c>)
 8007a2e:	428b      	cmp	r3, r1
 8007a30:	4682      	mov	sl, r0
 8007a32:	d898      	bhi.n	8007966 <_strtod_l+0x436>
 8007a34:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007a38:	428b      	cmp	r3, r1
 8007a3a:	bf86      	itte	hi
 8007a3c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007ad0 <_strtod_l+0x5a0>
 8007a40:	f04f 3aff 	movhi.w	sl, #4294967295
 8007a44:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007a48:	2300      	movs	r3, #0
 8007a4a:	9308      	str	r3, [sp, #32]
 8007a4c:	e07a      	b.n	8007b44 <_strtod_l+0x614>
 8007a4e:	07e2      	lsls	r2, r4, #31
 8007a50:	d505      	bpl.n	8007a5e <_strtod_l+0x52e>
 8007a52:	9b08      	ldr	r3, [sp, #32]
 8007a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a58:	f7f8 fdf6 	bl	8000648 <__aeabi_dmul>
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	9a08      	ldr	r2, [sp, #32]
 8007a60:	3208      	adds	r2, #8
 8007a62:	3601      	adds	r6, #1
 8007a64:	1064      	asrs	r4, r4, #1
 8007a66:	9208      	str	r2, [sp, #32]
 8007a68:	e7cd      	b.n	8007a06 <_strtod_l+0x4d6>
 8007a6a:	d0ed      	beq.n	8007a48 <_strtod_l+0x518>
 8007a6c:	4264      	negs	r4, r4
 8007a6e:	f014 020f 	ands.w	r2, r4, #15
 8007a72:	d00a      	beq.n	8007a8a <_strtod_l+0x55a>
 8007a74:	4b12      	ldr	r3, [pc, #72]	@ (8007ac0 <_strtod_l+0x590>)
 8007a76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a7a:	4650      	mov	r0, sl
 8007a7c:	4659      	mov	r1, fp
 8007a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a82:	f7f8 ff0b 	bl	800089c <__aeabi_ddiv>
 8007a86:	4682      	mov	sl, r0
 8007a88:	468b      	mov	fp, r1
 8007a8a:	1124      	asrs	r4, r4, #4
 8007a8c:	d0dc      	beq.n	8007a48 <_strtod_l+0x518>
 8007a8e:	2c1f      	cmp	r4, #31
 8007a90:	dd20      	ble.n	8007ad4 <_strtod_l+0x5a4>
 8007a92:	2400      	movs	r4, #0
 8007a94:	46a0      	mov	r8, r4
 8007a96:	940a      	str	r4, [sp, #40]	@ 0x28
 8007a98:	46a1      	mov	r9, r4
 8007a9a:	9a05      	ldr	r2, [sp, #20]
 8007a9c:	2322      	movs	r3, #34	@ 0x22
 8007a9e:	f04f 0a00 	mov.w	sl, #0
 8007aa2:	f04f 0b00 	mov.w	fp, #0
 8007aa6:	6013      	str	r3, [r2, #0]
 8007aa8:	e768      	b.n	800797c <_strtod_l+0x44c>
 8007aaa:	bf00      	nop
 8007aac:	08009429 	.word	0x08009429
 8007ab0:	0800963c 	.word	0x0800963c
 8007ab4:	08009421 	.word	0x08009421
 8007ab8:	08009458 	.word	0x08009458
 8007abc:	080097e5 	.word	0x080097e5
 8007ac0:	08009570 	.word	0x08009570
 8007ac4:	08009548 	.word	0x08009548
 8007ac8:	7ff00000 	.word	0x7ff00000
 8007acc:	7ca00000 	.word	0x7ca00000
 8007ad0:	7fefffff 	.word	0x7fefffff
 8007ad4:	f014 0310 	ands.w	r3, r4, #16
 8007ad8:	bf18      	it	ne
 8007ada:	236a      	movne	r3, #106	@ 0x6a
 8007adc:	4ea9      	ldr	r6, [pc, #676]	@ (8007d84 <_strtod_l+0x854>)
 8007ade:	9308      	str	r3, [sp, #32]
 8007ae0:	4650      	mov	r0, sl
 8007ae2:	4659      	mov	r1, fp
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	07e2      	lsls	r2, r4, #31
 8007ae8:	d504      	bpl.n	8007af4 <_strtod_l+0x5c4>
 8007aea:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007aee:	f7f8 fdab 	bl	8000648 <__aeabi_dmul>
 8007af2:	2301      	movs	r3, #1
 8007af4:	1064      	asrs	r4, r4, #1
 8007af6:	f106 0608 	add.w	r6, r6, #8
 8007afa:	d1f4      	bne.n	8007ae6 <_strtod_l+0x5b6>
 8007afc:	b10b      	cbz	r3, 8007b02 <_strtod_l+0x5d2>
 8007afe:	4682      	mov	sl, r0
 8007b00:	468b      	mov	fp, r1
 8007b02:	9b08      	ldr	r3, [sp, #32]
 8007b04:	b1b3      	cbz	r3, 8007b34 <_strtod_l+0x604>
 8007b06:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007b0a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	4659      	mov	r1, fp
 8007b12:	dd0f      	ble.n	8007b34 <_strtod_l+0x604>
 8007b14:	2b1f      	cmp	r3, #31
 8007b16:	dd55      	ble.n	8007bc4 <_strtod_l+0x694>
 8007b18:	2b34      	cmp	r3, #52	@ 0x34
 8007b1a:	bfde      	ittt	le
 8007b1c:	f04f 33ff 	movle.w	r3, #4294967295
 8007b20:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007b24:	4093      	lslle	r3, r2
 8007b26:	f04f 0a00 	mov.w	sl, #0
 8007b2a:	bfcc      	ite	gt
 8007b2c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007b30:	ea03 0b01 	andle.w	fp, r3, r1
 8007b34:	2200      	movs	r2, #0
 8007b36:	2300      	movs	r3, #0
 8007b38:	4650      	mov	r0, sl
 8007b3a:	4659      	mov	r1, fp
 8007b3c:	f7f8 ffec 	bl	8000b18 <__aeabi_dcmpeq>
 8007b40:	2800      	cmp	r0, #0
 8007b42:	d1a6      	bne.n	8007a92 <_strtod_l+0x562>
 8007b44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007b4a:	9805      	ldr	r0, [sp, #20]
 8007b4c:	462b      	mov	r3, r5
 8007b4e:	463a      	mov	r2, r7
 8007b50:	f7ff f8c6 	bl	8006ce0 <__s2b>
 8007b54:	900a      	str	r0, [sp, #40]	@ 0x28
 8007b56:	2800      	cmp	r0, #0
 8007b58:	f43f af05 	beq.w	8007966 <_strtod_l+0x436>
 8007b5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b5e:	2a00      	cmp	r2, #0
 8007b60:	eba9 0308 	sub.w	r3, r9, r8
 8007b64:	bfa8      	it	ge
 8007b66:	2300      	movge	r3, #0
 8007b68:	9312      	str	r3, [sp, #72]	@ 0x48
 8007b6a:	2400      	movs	r4, #0
 8007b6c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007b70:	9316      	str	r3, [sp, #88]	@ 0x58
 8007b72:	46a0      	mov	r8, r4
 8007b74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b76:	9805      	ldr	r0, [sp, #20]
 8007b78:	6859      	ldr	r1, [r3, #4]
 8007b7a:	f7ff f809 	bl	8006b90 <_Balloc>
 8007b7e:	4681      	mov	r9, r0
 8007b80:	2800      	cmp	r0, #0
 8007b82:	f43f aef4 	beq.w	800796e <_strtod_l+0x43e>
 8007b86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b88:	691a      	ldr	r2, [r3, #16]
 8007b8a:	3202      	adds	r2, #2
 8007b8c:	f103 010c 	add.w	r1, r3, #12
 8007b90:	0092      	lsls	r2, r2, #2
 8007b92:	300c      	adds	r0, #12
 8007b94:	f000 fd72 	bl	800867c <memcpy>
 8007b98:	ec4b ab10 	vmov	d0, sl, fp
 8007b9c:	9805      	ldr	r0, [sp, #20]
 8007b9e:	aa1c      	add	r2, sp, #112	@ 0x70
 8007ba0:	a91b      	add	r1, sp, #108	@ 0x6c
 8007ba2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007ba6:	f7ff fbd7 	bl	8007358 <__d2b>
 8007baa:	901a      	str	r0, [sp, #104]	@ 0x68
 8007bac:	2800      	cmp	r0, #0
 8007bae:	f43f aede 	beq.w	800796e <_strtod_l+0x43e>
 8007bb2:	9805      	ldr	r0, [sp, #20]
 8007bb4:	2101      	movs	r1, #1
 8007bb6:	f7ff f929 	bl	8006e0c <__i2b>
 8007bba:	4680      	mov	r8, r0
 8007bbc:	b948      	cbnz	r0, 8007bd2 <_strtod_l+0x6a2>
 8007bbe:	f04f 0800 	mov.w	r8, #0
 8007bc2:	e6d4      	b.n	800796e <_strtod_l+0x43e>
 8007bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8007bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bcc:	ea03 0a0a 	and.w	sl, r3, sl
 8007bd0:	e7b0      	b.n	8007b34 <_strtod_l+0x604>
 8007bd2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007bd4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007bd6:	2d00      	cmp	r5, #0
 8007bd8:	bfab      	itete	ge
 8007bda:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007bdc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007bde:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007be0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007be2:	bfac      	ite	ge
 8007be4:	18ef      	addge	r7, r5, r3
 8007be6:	1b5e      	sublt	r6, r3, r5
 8007be8:	9b08      	ldr	r3, [sp, #32]
 8007bea:	1aed      	subs	r5, r5, r3
 8007bec:	4415      	add	r5, r2
 8007bee:	4b66      	ldr	r3, [pc, #408]	@ (8007d88 <_strtod_l+0x858>)
 8007bf0:	3d01      	subs	r5, #1
 8007bf2:	429d      	cmp	r5, r3
 8007bf4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007bf8:	da50      	bge.n	8007c9c <_strtod_l+0x76c>
 8007bfa:	1b5b      	subs	r3, r3, r5
 8007bfc:	2b1f      	cmp	r3, #31
 8007bfe:	eba2 0203 	sub.w	r2, r2, r3
 8007c02:	f04f 0101 	mov.w	r1, #1
 8007c06:	dc3d      	bgt.n	8007c84 <_strtod_l+0x754>
 8007c08:	fa01 f303 	lsl.w	r3, r1, r3
 8007c0c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007c0e:	2300      	movs	r3, #0
 8007c10:	9310      	str	r3, [sp, #64]	@ 0x40
 8007c12:	18bd      	adds	r5, r7, r2
 8007c14:	9b08      	ldr	r3, [sp, #32]
 8007c16:	42af      	cmp	r7, r5
 8007c18:	4416      	add	r6, r2
 8007c1a:	441e      	add	r6, r3
 8007c1c:	463b      	mov	r3, r7
 8007c1e:	bfa8      	it	ge
 8007c20:	462b      	movge	r3, r5
 8007c22:	42b3      	cmp	r3, r6
 8007c24:	bfa8      	it	ge
 8007c26:	4633      	movge	r3, r6
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	bfc2      	ittt	gt
 8007c2c:	1aed      	subgt	r5, r5, r3
 8007c2e:	1af6      	subgt	r6, r6, r3
 8007c30:	1aff      	subgt	r7, r7, r3
 8007c32:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	dd16      	ble.n	8007c66 <_strtod_l+0x736>
 8007c38:	4641      	mov	r1, r8
 8007c3a:	9805      	ldr	r0, [sp, #20]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	f7ff f9a5 	bl	8006f8c <__pow5mult>
 8007c42:	4680      	mov	r8, r0
 8007c44:	2800      	cmp	r0, #0
 8007c46:	d0ba      	beq.n	8007bbe <_strtod_l+0x68e>
 8007c48:	4601      	mov	r1, r0
 8007c4a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007c4c:	9805      	ldr	r0, [sp, #20]
 8007c4e:	f7ff f8f3 	bl	8006e38 <__multiply>
 8007c52:	900e      	str	r0, [sp, #56]	@ 0x38
 8007c54:	2800      	cmp	r0, #0
 8007c56:	f43f ae8a 	beq.w	800796e <_strtod_l+0x43e>
 8007c5a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c5c:	9805      	ldr	r0, [sp, #20]
 8007c5e:	f7fe ffd7 	bl	8006c10 <_Bfree>
 8007c62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c64:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c66:	2d00      	cmp	r5, #0
 8007c68:	dc1d      	bgt.n	8007ca6 <_strtod_l+0x776>
 8007c6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	dd23      	ble.n	8007cb8 <_strtod_l+0x788>
 8007c70:	4649      	mov	r1, r9
 8007c72:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007c74:	9805      	ldr	r0, [sp, #20]
 8007c76:	f7ff f989 	bl	8006f8c <__pow5mult>
 8007c7a:	4681      	mov	r9, r0
 8007c7c:	b9e0      	cbnz	r0, 8007cb8 <_strtod_l+0x788>
 8007c7e:	f04f 0900 	mov.w	r9, #0
 8007c82:	e674      	b.n	800796e <_strtod_l+0x43e>
 8007c84:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007c88:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007c8c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007c90:	35e2      	adds	r5, #226	@ 0xe2
 8007c92:	fa01 f305 	lsl.w	r3, r1, r5
 8007c96:	9310      	str	r3, [sp, #64]	@ 0x40
 8007c98:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007c9a:	e7ba      	b.n	8007c12 <_strtod_l+0x6e2>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007ca4:	e7b5      	b.n	8007c12 <_strtod_l+0x6e2>
 8007ca6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ca8:	9805      	ldr	r0, [sp, #20]
 8007caa:	462a      	mov	r2, r5
 8007cac:	f7ff f9c8 	bl	8007040 <__lshift>
 8007cb0:	901a      	str	r0, [sp, #104]	@ 0x68
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	d1d9      	bne.n	8007c6a <_strtod_l+0x73a>
 8007cb6:	e65a      	b.n	800796e <_strtod_l+0x43e>
 8007cb8:	2e00      	cmp	r6, #0
 8007cba:	dd07      	ble.n	8007ccc <_strtod_l+0x79c>
 8007cbc:	4649      	mov	r1, r9
 8007cbe:	9805      	ldr	r0, [sp, #20]
 8007cc0:	4632      	mov	r2, r6
 8007cc2:	f7ff f9bd 	bl	8007040 <__lshift>
 8007cc6:	4681      	mov	r9, r0
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	d0d8      	beq.n	8007c7e <_strtod_l+0x74e>
 8007ccc:	2f00      	cmp	r7, #0
 8007cce:	dd08      	ble.n	8007ce2 <_strtod_l+0x7b2>
 8007cd0:	4641      	mov	r1, r8
 8007cd2:	9805      	ldr	r0, [sp, #20]
 8007cd4:	463a      	mov	r2, r7
 8007cd6:	f7ff f9b3 	bl	8007040 <__lshift>
 8007cda:	4680      	mov	r8, r0
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	f43f ae46 	beq.w	800796e <_strtod_l+0x43e>
 8007ce2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ce4:	9805      	ldr	r0, [sp, #20]
 8007ce6:	464a      	mov	r2, r9
 8007ce8:	f7ff fa32 	bl	8007150 <__mdiff>
 8007cec:	4604      	mov	r4, r0
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	f43f ae3d 	beq.w	800796e <_strtod_l+0x43e>
 8007cf4:	68c3      	ldr	r3, [r0, #12]
 8007cf6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	60c3      	str	r3, [r0, #12]
 8007cfc:	4641      	mov	r1, r8
 8007cfe:	f7ff fa0b 	bl	8007118 <__mcmp>
 8007d02:	2800      	cmp	r0, #0
 8007d04:	da46      	bge.n	8007d94 <_strtod_l+0x864>
 8007d06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d08:	ea53 030a 	orrs.w	r3, r3, sl
 8007d0c:	d16c      	bne.n	8007de8 <_strtod_l+0x8b8>
 8007d0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d168      	bne.n	8007de8 <_strtod_l+0x8b8>
 8007d16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007d1a:	0d1b      	lsrs	r3, r3, #20
 8007d1c:	051b      	lsls	r3, r3, #20
 8007d1e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007d22:	d961      	bls.n	8007de8 <_strtod_l+0x8b8>
 8007d24:	6963      	ldr	r3, [r4, #20]
 8007d26:	b913      	cbnz	r3, 8007d2e <_strtod_l+0x7fe>
 8007d28:	6923      	ldr	r3, [r4, #16]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	dd5c      	ble.n	8007de8 <_strtod_l+0x8b8>
 8007d2e:	4621      	mov	r1, r4
 8007d30:	2201      	movs	r2, #1
 8007d32:	9805      	ldr	r0, [sp, #20]
 8007d34:	f7ff f984 	bl	8007040 <__lshift>
 8007d38:	4641      	mov	r1, r8
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	f7ff f9ec 	bl	8007118 <__mcmp>
 8007d40:	2800      	cmp	r0, #0
 8007d42:	dd51      	ble.n	8007de8 <_strtod_l+0x8b8>
 8007d44:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007d48:	9a08      	ldr	r2, [sp, #32]
 8007d4a:	0d1b      	lsrs	r3, r3, #20
 8007d4c:	051b      	lsls	r3, r3, #20
 8007d4e:	2a00      	cmp	r2, #0
 8007d50:	d06b      	beq.n	8007e2a <_strtod_l+0x8fa>
 8007d52:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007d56:	d868      	bhi.n	8007e2a <_strtod_l+0x8fa>
 8007d58:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007d5c:	f67f ae9d 	bls.w	8007a9a <_strtod_l+0x56a>
 8007d60:	4b0a      	ldr	r3, [pc, #40]	@ (8007d8c <_strtod_l+0x85c>)
 8007d62:	4650      	mov	r0, sl
 8007d64:	4659      	mov	r1, fp
 8007d66:	2200      	movs	r2, #0
 8007d68:	f7f8 fc6e 	bl	8000648 <__aeabi_dmul>
 8007d6c:	4b08      	ldr	r3, [pc, #32]	@ (8007d90 <_strtod_l+0x860>)
 8007d6e:	400b      	ands	r3, r1
 8007d70:	4682      	mov	sl, r0
 8007d72:	468b      	mov	fp, r1
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f47f ae05 	bne.w	8007984 <_strtod_l+0x454>
 8007d7a:	9a05      	ldr	r2, [sp, #20]
 8007d7c:	2322      	movs	r3, #34	@ 0x22
 8007d7e:	6013      	str	r3, [r2, #0]
 8007d80:	e600      	b.n	8007984 <_strtod_l+0x454>
 8007d82:	bf00      	nop
 8007d84:	08009668 	.word	0x08009668
 8007d88:	fffffc02 	.word	0xfffffc02
 8007d8c:	39500000 	.word	0x39500000
 8007d90:	7ff00000 	.word	0x7ff00000
 8007d94:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007d98:	d165      	bne.n	8007e66 <_strtod_l+0x936>
 8007d9a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007d9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007da0:	b35a      	cbz	r2, 8007dfa <_strtod_l+0x8ca>
 8007da2:	4a9f      	ldr	r2, [pc, #636]	@ (8008020 <_strtod_l+0xaf0>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d12b      	bne.n	8007e00 <_strtod_l+0x8d0>
 8007da8:	9b08      	ldr	r3, [sp, #32]
 8007daa:	4651      	mov	r1, sl
 8007dac:	b303      	cbz	r3, 8007df0 <_strtod_l+0x8c0>
 8007dae:	4b9d      	ldr	r3, [pc, #628]	@ (8008024 <_strtod_l+0xaf4>)
 8007db0:	465a      	mov	r2, fp
 8007db2:	4013      	ands	r3, r2
 8007db4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007db8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dbc:	d81b      	bhi.n	8007df6 <_strtod_l+0x8c6>
 8007dbe:	0d1b      	lsrs	r3, r3, #20
 8007dc0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc8:	4299      	cmp	r1, r3
 8007dca:	d119      	bne.n	8007e00 <_strtod_l+0x8d0>
 8007dcc:	4b96      	ldr	r3, [pc, #600]	@ (8008028 <_strtod_l+0xaf8>)
 8007dce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d102      	bne.n	8007dda <_strtod_l+0x8aa>
 8007dd4:	3101      	adds	r1, #1
 8007dd6:	f43f adca 	beq.w	800796e <_strtod_l+0x43e>
 8007dda:	4b92      	ldr	r3, [pc, #584]	@ (8008024 <_strtod_l+0xaf4>)
 8007ddc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007dde:	401a      	ands	r2, r3
 8007de0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007de4:	f04f 0a00 	mov.w	sl, #0
 8007de8:	9b08      	ldr	r3, [sp, #32]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1b8      	bne.n	8007d60 <_strtod_l+0x830>
 8007dee:	e5c9      	b.n	8007984 <_strtod_l+0x454>
 8007df0:	f04f 33ff 	mov.w	r3, #4294967295
 8007df4:	e7e8      	b.n	8007dc8 <_strtod_l+0x898>
 8007df6:	4613      	mov	r3, r2
 8007df8:	e7e6      	b.n	8007dc8 <_strtod_l+0x898>
 8007dfa:	ea53 030a 	orrs.w	r3, r3, sl
 8007dfe:	d0a1      	beq.n	8007d44 <_strtod_l+0x814>
 8007e00:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007e02:	b1db      	cbz	r3, 8007e3c <_strtod_l+0x90c>
 8007e04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e06:	4213      	tst	r3, r2
 8007e08:	d0ee      	beq.n	8007de8 <_strtod_l+0x8b8>
 8007e0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e0c:	9a08      	ldr	r2, [sp, #32]
 8007e0e:	4650      	mov	r0, sl
 8007e10:	4659      	mov	r1, fp
 8007e12:	b1bb      	cbz	r3, 8007e44 <_strtod_l+0x914>
 8007e14:	f7ff fb6e 	bl	80074f4 <sulp>
 8007e18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e1c:	ec53 2b10 	vmov	r2, r3, d0
 8007e20:	f7f8 fa5c 	bl	80002dc <__adddf3>
 8007e24:	4682      	mov	sl, r0
 8007e26:	468b      	mov	fp, r1
 8007e28:	e7de      	b.n	8007de8 <_strtod_l+0x8b8>
 8007e2a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007e2e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007e32:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007e36:	f04f 3aff 	mov.w	sl, #4294967295
 8007e3a:	e7d5      	b.n	8007de8 <_strtod_l+0x8b8>
 8007e3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007e3e:	ea13 0f0a 	tst.w	r3, sl
 8007e42:	e7e1      	b.n	8007e08 <_strtod_l+0x8d8>
 8007e44:	f7ff fb56 	bl	80074f4 <sulp>
 8007e48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e4c:	ec53 2b10 	vmov	r2, r3, d0
 8007e50:	f7f8 fa42 	bl	80002d8 <__aeabi_dsub>
 8007e54:	2200      	movs	r2, #0
 8007e56:	2300      	movs	r3, #0
 8007e58:	4682      	mov	sl, r0
 8007e5a:	468b      	mov	fp, r1
 8007e5c:	f7f8 fe5c 	bl	8000b18 <__aeabi_dcmpeq>
 8007e60:	2800      	cmp	r0, #0
 8007e62:	d0c1      	beq.n	8007de8 <_strtod_l+0x8b8>
 8007e64:	e619      	b.n	8007a9a <_strtod_l+0x56a>
 8007e66:	4641      	mov	r1, r8
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f7ff facd 	bl	8007408 <__ratio>
 8007e6e:	ec57 6b10 	vmov	r6, r7, d0
 8007e72:	2200      	movs	r2, #0
 8007e74:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007e78:	4630      	mov	r0, r6
 8007e7a:	4639      	mov	r1, r7
 8007e7c:	f7f8 fe60 	bl	8000b40 <__aeabi_dcmple>
 8007e80:	2800      	cmp	r0, #0
 8007e82:	d06f      	beq.n	8007f64 <_strtod_l+0xa34>
 8007e84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d17a      	bne.n	8007f80 <_strtod_l+0xa50>
 8007e8a:	f1ba 0f00 	cmp.w	sl, #0
 8007e8e:	d158      	bne.n	8007f42 <_strtod_l+0xa12>
 8007e90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d15a      	bne.n	8007f50 <_strtod_l+0xa20>
 8007e9a:	4b64      	ldr	r3, [pc, #400]	@ (800802c <_strtod_l+0xafc>)
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	4630      	mov	r0, r6
 8007ea0:	4639      	mov	r1, r7
 8007ea2:	f7f8 fe43 	bl	8000b2c <__aeabi_dcmplt>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d159      	bne.n	8007f5e <_strtod_l+0xa2e>
 8007eaa:	4630      	mov	r0, r6
 8007eac:	4639      	mov	r1, r7
 8007eae:	4b60      	ldr	r3, [pc, #384]	@ (8008030 <_strtod_l+0xb00>)
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f7f8 fbc9 	bl	8000648 <__aeabi_dmul>
 8007eb6:	4606      	mov	r6, r0
 8007eb8:	460f      	mov	r7, r1
 8007eba:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007ebe:	9606      	str	r6, [sp, #24]
 8007ec0:	9307      	str	r3, [sp, #28]
 8007ec2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ec6:	4d57      	ldr	r5, [pc, #348]	@ (8008024 <_strtod_l+0xaf4>)
 8007ec8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007ecc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ece:	401d      	ands	r5, r3
 8007ed0:	4b58      	ldr	r3, [pc, #352]	@ (8008034 <_strtod_l+0xb04>)
 8007ed2:	429d      	cmp	r5, r3
 8007ed4:	f040 80b2 	bne.w	800803c <_strtod_l+0xb0c>
 8007ed8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007eda:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007ede:	ec4b ab10 	vmov	d0, sl, fp
 8007ee2:	f7ff f9c9 	bl	8007278 <__ulp>
 8007ee6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007eea:	ec51 0b10 	vmov	r0, r1, d0
 8007eee:	f7f8 fbab 	bl	8000648 <__aeabi_dmul>
 8007ef2:	4652      	mov	r2, sl
 8007ef4:	465b      	mov	r3, fp
 8007ef6:	f7f8 f9f1 	bl	80002dc <__adddf3>
 8007efa:	460b      	mov	r3, r1
 8007efc:	4949      	ldr	r1, [pc, #292]	@ (8008024 <_strtod_l+0xaf4>)
 8007efe:	4a4e      	ldr	r2, [pc, #312]	@ (8008038 <_strtod_l+0xb08>)
 8007f00:	4019      	ands	r1, r3
 8007f02:	4291      	cmp	r1, r2
 8007f04:	4682      	mov	sl, r0
 8007f06:	d942      	bls.n	8007f8e <_strtod_l+0xa5e>
 8007f08:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007f0a:	4b47      	ldr	r3, [pc, #284]	@ (8008028 <_strtod_l+0xaf8>)
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d103      	bne.n	8007f18 <_strtod_l+0x9e8>
 8007f10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007f12:	3301      	adds	r3, #1
 8007f14:	f43f ad2b 	beq.w	800796e <_strtod_l+0x43e>
 8007f18:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008028 <_strtod_l+0xaf8>
 8007f1c:	f04f 3aff 	mov.w	sl, #4294967295
 8007f20:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f22:	9805      	ldr	r0, [sp, #20]
 8007f24:	f7fe fe74 	bl	8006c10 <_Bfree>
 8007f28:	9805      	ldr	r0, [sp, #20]
 8007f2a:	4649      	mov	r1, r9
 8007f2c:	f7fe fe70 	bl	8006c10 <_Bfree>
 8007f30:	9805      	ldr	r0, [sp, #20]
 8007f32:	4641      	mov	r1, r8
 8007f34:	f7fe fe6c 	bl	8006c10 <_Bfree>
 8007f38:	9805      	ldr	r0, [sp, #20]
 8007f3a:	4621      	mov	r1, r4
 8007f3c:	f7fe fe68 	bl	8006c10 <_Bfree>
 8007f40:	e618      	b.n	8007b74 <_strtod_l+0x644>
 8007f42:	f1ba 0f01 	cmp.w	sl, #1
 8007f46:	d103      	bne.n	8007f50 <_strtod_l+0xa20>
 8007f48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f43f ada5 	beq.w	8007a9a <_strtod_l+0x56a>
 8007f50:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008000 <_strtod_l+0xad0>
 8007f54:	4f35      	ldr	r7, [pc, #212]	@ (800802c <_strtod_l+0xafc>)
 8007f56:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007f5a:	2600      	movs	r6, #0
 8007f5c:	e7b1      	b.n	8007ec2 <_strtod_l+0x992>
 8007f5e:	4f34      	ldr	r7, [pc, #208]	@ (8008030 <_strtod_l+0xb00>)
 8007f60:	2600      	movs	r6, #0
 8007f62:	e7aa      	b.n	8007eba <_strtod_l+0x98a>
 8007f64:	4b32      	ldr	r3, [pc, #200]	@ (8008030 <_strtod_l+0xb00>)
 8007f66:	4630      	mov	r0, r6
 8007f68:	4639      	mov	r1, r7
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f7f8 fb6c 	bl	8000648 <__aeabi_dmul>
 8007f70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f72:	4606      	mov	r6, r0
 8007f74:	460f      	mov	r7, r1
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d09f      	beq.n	8007eba <_strtod_l+0x98a>
 8007f7a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007f7e:	e7a0      	b.n	8007ec2 <_strtod_l+0x992>
 8007f80:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008008 <_strtod_l+0xad8>
 8007f84:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007f88:	ec57 6b17 	vmov	r6, r7, d7
 8007f8c:	e799      	b.n	8007ec2 <_strtod_l+0x992>
 8007f8e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007f92:	9b08      	ldr	r3, [sp, #32]
 8007f94:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1c1      	bne.n	8007f20 <_strtod_l+0x9f0>
 8007f9c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007fa0:	0d1b      	lsrs	r3, r3, #20
 8007fa2:	051b      	lsls	r3, r3, #20
 8007fa4:	429d      	cmp	r5, r3
 8007fa6:	d1bb      	bne.n	8007f20 <_strtod_l+0x9f0>
 8007fa8:	4630      	mov	r0, r6
 8007faa:	4639      	mov	r1, r7
 8007fac:	f7f8 feac 	bl	8000d08 <__aeabi_d2lz>
 8007fb0:	f7f8 fb1c 	bl	80005ec <__aeabi_l2d>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	4630      	mov	r0, r6
 8007fba:	4639      	mov	r1, r7
 8007fbc:	f7f8 f98c 	bl	80002d8 <__aeabi_dsub>
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007fc8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007fcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fce:	ea46 060a 	orr.w	r6, r6, sl
 8007fd2:	431e      	orrs	r6, r3
 8007fd4:	d06f      	beq.n	80080b6 <_strtod_l+0xb86>
 8007fd6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008010 <_strtod_l+0xae0>)
 8007fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fdc:	f7f8 fda6 	bl	8000b2c <__aeabi_dcmplt>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	f47f accf 	bne.w	8007984 <_strtod_l+0x454>
 8007fe6:	a30c      	add	r3, pc, #48	@ (adr r3, 8008018 <_strtod_l+0xae8>)
 8007fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ff0:	f7f8 fdba 	bl	8000b68 <__aeabi_dcmpgt>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	d093      	beq.n	8007f20 <_strtod_l+0x9f0>
 8007ff8:	e4c4      	b.n	8007984 <_strtod_l+0x454>
 8007ffa:	bf00      	nop
 8007ffc:	f3af 8000 	nop.w
 8008000:	00000000 	.word	0x00000000
 8008004:	bff00000 	.word	0xbff00000
 8008008:	00000000 	.word	0x00000000
 800800c:	3ff00000 	.word	0x3ff00000
 8008010:	94a03595 	.word	0x94a03595
 8008014:	3fdfffff 	.word	0x3fdfffff
 8008018:	35afe535 	.word	0x35afe535
 800801c:	3fe00000 	.word	0x3fe00000
 8008020:	000fffff 	.word	0x000fffff
 8008024:	7ff00000 	.word	0x7ff00000
 8008028:	7fefffff 	.word	0x7fefffff
 800802c:	3ff00000 	.word	0x3ff00000
 8008030:	3fe00000 	.word	0x3fe00000
 8008034:	7fe00000 	.word	0x7fe00000
 8008038:	7c9fffff 	.word	0x7c9fffff
 800803c:	9b08      	ldr	r3, [sp, #32]
 800803e:	b323      	cbz	r3, 800808a <_strtod_l+0xb5a>
 8008040:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008044:	d821      	bhi.n	800808a <_strtod_l+0xb5a>
 8008046:	a328      	add	r3, pc, #160	@ (adr r3, 80080e8 <_strtod_l+0xbb8>)
 8008048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804c:	4630      	mov	r0, r6
 800804e:	4639      	mov	r1, r7
 8008050:	f7f8 fd76 	bl	8000b40 <__aeabi_dcmple>
 8008054:	b1a0      	cbz	r0, 8008080 <_strtod_l+0xb50>
 8008056:	4639      	mov	r1, r7
 8008058:	4630      	mov	r0, r6
 800805a:	f7f8 fdcd 	bl	8000bf8 <__aeabi_d2uiz>
 800805e:	2801      	cmp	r0, #1
 8008060:	bf38      	it	cc
 8008062:	2001      	movcc	r0, #1
 8008064:	f7f8 fa76 	bl	8000554 <__aeabi_ui2d>
 8008068:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800806a:	4606      	mov	r6, r0
 800806c:	460f      	mov	r7, r1
 800806e:	b9fb      	cbnz	r3, 80080b0 <_strtod_l+0xb80>
 8008070:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008074:	9014      	str	r0, [sp, #80]	@ 0x50
 8008076:	9315      	str	r3, [sp, #84]	@ 0x54
 8008078:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800807c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008080:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008082:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008086:	1b5b      	subs	r3, r3, r5
 8008088:	9311      	str	r3, [sp, #68]	@ 0x44
 800808a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800808e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008092:	f7ff f8f1 	bl	8007278 <__ulp>
 8008096:	4650      	mov	r0, sl
 8008098:	ec53 2b10 	vmov	r2, r3, d0
 800809c:	4659      	mov	r1, fp
 800809e:	f7f8 fad3 	bl	8000648 <__aeabi_dmul>
 80080a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80080a6:	f7f8 f919 	bl	80002dc <__adddf3>
 80080aa:	4682      	mov	sl, r0
 80080ac:	468b      	mov	fp, r1
 80080ae:	e770      	b.n	8007f92 <_strtod_l+0xa62>
 80080b0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80080b4:	e7e0      	b.n	8008078 <_strtod_l+0xb48>
 80080b6:	a30e      	add	r3, pc, #56	@ (adr r3, 80080f0 <_strtod_l+0xbc0>)
 80080b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080bc:	f7f8 fd36 	bl	8000b2c <__aeabi_dcmplt>
 80080c0:	e798      	b.n	8007ff4 <_strtod_l+0xac4>
 80080c2:	2300      	movs	r3, #0
 80080c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080c6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80080c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80080ca:	6013      	str	r3, [r2, #0]
 80080cc:	f7ff ba6d 	b.w	80075aa <_strtod_l+0x7a>
 80080d0:	2a65      	cmp	r2, #101	@ 0x65
 80080d2:	f43f ab66 	beq.w	80077a2 <_strtod_l+0x272>
 80080d6:	2a45      	cmp	r2, #69	@ 0x45
 80080d8:	f43f ab63 	beq.w	80077a2 <_strtod_l+0x272>
 80080dc:	2301      	movs	r3, #1
 80080de:	f7ff bb9e 	b.w	800781e <_strtod_l+0x2ee>
 80080e2:	bf00      	nop
 80080e4:	f3af 8000 	nop.w
 80080e8:	ffc00000 	.word	0xffc00000
 80080ec:	41dfffff 	.word	0x41dfffff
 80080f0:	94a03595 	.word	0x94a03595
 80080f4:	3fcfffff 	.word	0x3fcfffff

080080f8 <_strtod_r>:
 80080f8:	4b01      	ldr	r3, [pc, #4]	@ (8008100 <_strtod_r+0x8>)
 80080fa:	f7ff ba19 	b.w	8007530 <_strtod_l>
 80080fe:	bf00      	nop
 8008100:	2000006c 	.word	0x2000006c

08008104 <_strtol_l.constprop.0>:
 8008104:	2b24      	cmp	r3, #36	@ 0x24
 8008106:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800810a:	4686      	mov	lr, r0
 800810c:	4690      	mov	r8, r2
 800810e:	d801      	bhi.n	8008114 <_strtol_l.constprop.0+0x10>
 8008110:	2b01      	cmp	r3, #1
 8008112:	d106      	bne.n	8008122 <_strtol_l.constprop.0+0x1e>
 8008114:	f7fd fdba 	bl	8005c8c <__errno>
 8008118:	2316      	movs	r3, #22
 800811a:	6003      	str	r3, [r0, #0]
 800811c:	2000      	movs	r0, #0
 800811e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008122:	4834      	ldr	r0, [pc, #208]	@ (80081f4 <_strtol_l.constprop.0+0xf0>)
 8008124:	460d      	mov	r5, r1
 8008126:	462a      	mov	r2, r5
 8008128:	f815 4b01 	ldrb.w	r4, [r5], #1
 800812c:	5d06      	ldrb	r6, [r0, r4]
 800812e:	f016 0608 	ands.w	r6, r6, #8
 8008132:	d1f8      	bne.n	8008126 <_strtol_l.constprop.0+0x22>
 8008134:	2c2d      	cmp	r4, #45	@ 0x2d
 8008136:	d12d      	bne.n	8008194 <_strtol_l.constprop.0+0x90>
 8008138:	782c      	ldrb	r4, [r5, #0]
 800813a:	2601      	movs	r6, #1
 800813c:	1c95      	adds	r5, r2, #2
 800813e:	f033 0210 	bics.w	r2, r3, #16
 8008142:	d109      	bne.n	8008158 <_strtol_l.constprop.0+0x54>
 8008144:	2c30      	cmp	r4, #48	@ 0x30
 8008146:	d12a      	bne.n	800819e <_strtol_l.constprop.0+0x9a>
 8008148:	782a      	ldrb	r2, [r5, #0]
 800814a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800814e:	2a58      	cmp	r2, #88	@ 0x58
 8008150:	d125      	bne.n	800819e <_strtol_l.constprop.0+0x9a>
 8008152:	786c      	ldrb	r4, [r5, #1]
 8008154:	2310      	movs	r3, #16
 8008156:	3502      	adds	r5, #2
 8008158:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800815c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008160:	2200      	movs	r2, #0
 8008162:	fbbc f9f3 	udiv	r9, ip, r3
 8008166:	4610      	mov	r0, r2
 8008168:	fb03 ca19 	mls	sl, r3, r9, ip
 800816c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008170:	2f09      	cmp	r7, #9
 8008172:	d81b      	bhi.n	80081ac <_strtol_l.constprop.0+0xa8>
 8008174:	463c      	mov	r4, r7
 8008176:	42a3      	cmp	r3, r4
 8008178:	dd27      	ble.n	80081ca <_strtol_l.constprop.0+0xc6>
 800817a:	1c57      	adds	r7, r2, #1
 800817c:	d007      	beq.n	800818e <_strtol_l.constprop.0+0x8a>
 800817e:	4581      	cmp	r9, r0
 8008180:	d320      	bcc.n	80081c4 <_strtol_l.constprop.0+0xc0>
 8008182:	d101      	bne.n	8008188 <_strtol_l.constprop.0+0x84>
 8008184:	45a2      	cmp	sl, r4
 8008186:	db1d      	blt.n	80081c4 <_strtol_l.constprop.0+0xc0>
 8008188:	fb00 4003 	mla	r0, r0, r3, r4
 800818c:	2201      	movs	r2, #1
 800818e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008192:	e7eb      	b.n	800816c <_strtol_l.constprop.0+0x68>
 8008194:	2c2b      	cmp	r4, #43	@ 0x2b
 8008196:	bf04      	itt	eq
 8008198:	782c      	ldrbeq	r4, [r5, #0]
 800819a:	1c95      	addeq	r5, r2, #2
 800819c:	e7cf      	b.n	800813e <_strtol_l.constprop.0+0x3a>
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d1da      	bne.n	8008158 <_strtol_l.constprop.0+0x54>
 80081a2:	2c30      	cmp	r4, #48	@ 0x30
 80081a4:	bf0c      	ite	eq
 80081a6:	2308      	moveq	r3, #8
 80081a8:	230a      	movne	r3, #10
 80081aa:	e7d5      	b.n	8008158 <_strtol_l.constprop.0+0x54>
 80081ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80081b0:	2f19      	cmp	r7, #25
 80081b2:	d801      	bhi.n	80081b8 <_strtol_l.constprop.0+0xb4>
 80081b4:	3c37      	subs	r4, #55	@ 0x37
 80081b6:	e7de      	b.n	8008176 <_strtol_l.constprop.0+0x72>
 80081b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80081bc:	2f19      	cmp	r7, #25
 80081be:	d804      	bhi.n	80081ca <_strtol_l.constprop.0+0xc6>
 80081c0:	3c57      	subs	r4, #87	@ 0x57
 80081c2:	e7d8      	b.n	8008176 <_strtol_l.constprop.0+0x72>
 80081c4:	f04f 32ff 	mov.w	r2, #4294967295
 80081c8:	e7e1      	b.n	800818e <_strtol_l.constprop.0+0x8a>
 80081ca:	1c53      	adds	r3, r2, #1
 80081cc:	d108      	bne.n	80081e0 <_strtol_l.constprop.0+0xdc>
 80081ce:	2322      	movs	r3, #34	@ 0x22
 80081d0:	f8ce 3000 	str.w	r3, [lr]
 80081d4:	4660      	mov	r0, ip
 80081d6:	f1b8 0f00 	cmp.w	r8, #0
 80081da:	d0a0      	beq.n	800811e <_strtol_l.constprop.0+0x1a>
 80081dc:	1e69      	subs	r1, r5, #1
 80081de:	e006      	b.n	80081ee <_strtol_l.constprop.0+0xea>
 80081e0:	b106      	cbz	r6, 80081e4 <_strtol_l.constprop.0+0xe0>
 80081e2:	4240      	negs	r0, r0
 80081e4:	f1b8 0f00 	cmp.w	r8, #0
 80081e8:	d099      	beq.n	800811e <_strtol_l.constprop.0+0x1a>
 80081ea:	2a00      	cmp	r2, #0
 80081ec:	d1f6      	bne.n	80081dc <_strtol_l.constprop.0+0xd8>
 80081ee:	f8c8 1000 	str.w	r1, [r8]
 80081f2:	e794      	b.n	800811e <_strtol_l.constprop.0+0x1a>
 80081f4:	08009691 	.word	0x08009691

080081f8 <_strtol_r>:
 80081f8:	f7ff bf84 	b.w	8008104 <_strtol_l.constprop.0>

080081fc <__ssputs_r>:
 80081fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008200:	688e      	ldr	r6, [r1, #8]
 8008202:	461f      	mov	r7, r3
 8008204:	42be      	cmp	r6, r7
 8008206:	680b      	ldr	r3, [r1, #0]
 8008208:	4682      	mov	sl, r0
 800820a:	460c      	mov	r4, r1
 800820c:	4690      	mov	r8, r2
 800820e:	d82d      	bhi.n	800826c <__ssputs_r+0x70>
 8008210:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008214:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008218:	d026      	beq.n	8008268 <__ssputs_r+0x6c>
 800821a:	6965      	ldr	r5, [r4, #20]
 800821c:	6909      	ldr	r1, [r1, #16]
 800821e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008222:	eba3 0901 	sub.w	r9, r3, r1
 8008226:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800822a:	1c7b      	adds	r3, r7, #1
 800822c:	444b      	add	r3, r9
 800822e:	106d      	asrs	r5, r5, #1
 8008230:	429d      	cmp	r5, r3
 8008232:	bf38      	it	cc
 8008234:	461d      	movcc	r5, r3
 8008236:	0553      	lsls	r3, r2, #21
 8008238:	d527      	bpl.n	800828a <__ssputs_r+0x8e>
 800823a:	4629      	mov	r1, r5
 800823c:	f7fe fc1c 	bl	8006a78 <_malloc_r>
 8008240:	4606      	mov	r6, r0
 8008242:	b360      	cbz	r0, 800829e <__ssputs_r+0xa2>
 8008244:	6921      	ldr	r1, [r4, #16]
 8008246:	464a      	mov	r2, r9
 8008248:	f000 fa18 	bl	800867c <memcpy>
 800824c:	89a3      	ldrh	r3, [r4, #12]
 800824e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008256:	81a3      	strh	r3, [r4, #12]
 8008258:	6126      	str	r6, [r4, #16]
 800825a:	6165      	str	r5, [r4, #20]
 800825c:	444e      	add	r6, r9
 800825e:	eba5 0509 	sub.w	r5, r5, r9
 8008262:	6026      	str	r6, [r4, #0]
 8008264:	60a5      	str	r5, [r4, #8]
 8008266:	463e      	mov	r6, r7
 8008268:	42be      	cmp	r6, r7
 800826a:	d900      	bls.n	800826e <__ssputs_r+0x72>
 800826c:	463e      	mov	r6, r7
 800826e:	6820      	ldr	r0, [r4, #0]
 8008270:	4632      	mov	r2, r6
 8008272:	4641      	mov	r1, r8
 8008274:	f000 f9c6 	bl	8008604 <memmove>
 8008278:	68a3      	ldr	r3, [r4, #8]
 800827a:	1b9b      	subs	r3, r3, r6
 800827c:	60a3      	str	r3, [r4, #8]
 800827e:	6823      	ldr	r3, [r4, #0]
 8008280:	4433      	add	r3, r6
 8008282:	6023      	str	r3, [r4, #0]
 8008284:	2000      	movs	r0, #0
 8008286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800828a:	462a      	mov	r2, r5
 800828c:	f000 fd89 	bl	8008da2 <_realloc_r>
 8008290:	4606      	mov	r6, r0
 8008292:	2800      	cmp	r0, #0
 8008294:	d1e0      	bne.n	8008258 <__ssputs_r+0x5c>
 8008296:	6921      	ldr	r1, [r4, #16]
 8008298:	4650      	mov	r0, sl
 800829a:	f7fe fb79 	bl	8006990 <_free_r>
 800829e:	230c      	movs	r3, #12
 80082a0:	f8ca 3000 	str.w	r3, [sl]
 80082a4:	89a3      	ldrh	r3, [r4, #12]
 80082a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082aa:	81a3      	strh	r3, [r4, #12]
 80082ac:	f04f 30ff 	mov.w	r0, #4294967295
 80082b0:	e7e9      	b.n	8008286 <__ssputs_r+0x8a>
	...

080082b4 <_svfiprintf_r>:
 80082b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b8:	4698      	mov	r8, r3
 80082ba:	898b      	ldrh	r3, [r1, #12]
 80082bc:	061b      	lsls	r3, r3, #24
 80082be:	b09d      	sub	sp, #116	@ 0x74
 80082c0:	4607      	mov	r7, r0
 80082c2:	460d      	mov	r5, r1
 80082c4:	4614      	mov	r4, r2
 80082c6:	d510      	bpl.n	80082ea <_svfiprintf_r+0x36>
 80082c8:	690b      	ldr	r3, [r1, #16]
 80082ca:	b973      	cbnz	r3, 80082ea <_svfiprintf_r+0x36>
 80082cc:	2140      	movs	r1, #64	@ 0x40
 80082ce:	f7fe fbd3 	bl	8006a78 <_malloc_r>
 80082d2:	6028      	str	r0, [r5, #0]
 80082d4:	6128      	str	r0, [r5, #16]
 80082d6:	b930      	cbnz	r0, 80082e6 <_svfiprintf_r+0x32>
 80082d8:	230c      	movs	r3, #12
 80082da:	603b      	str	r3, [r7, #0]
 80082dc:	f04f 30ff 	mov.w	r0, #4294967295
 80082e0:	b01d      	add	sp, #116	@ 0x74
 80082e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e6:	2340      	movs	r3, #64	@ 0x40
 80082e8:	616b      	str	r3, [r5, #20]
 80082ea:	2300      	movs	r3, #0
 80082ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80082ee:	2320      	movs	r3, #32
 80082f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80082f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80082f8:	2330      	movs	r3, #48	@ 0x30
 80082fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008498 <_svfiprintf_r+0x1e4>
 80082fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008302:	f04f 0901 	mov.w	r9, #1
 8008306:	4623      	mov	r3, r4
 8008308:	469a      	mov	sl, r3
 800830a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800830e:	b10a      	cbz	r2, 8008314 <_svfiprintf_r+0x60>
 8008310:	2a25      	cmp	r2, #37	@ 0x25
 8008312:	d1f9      	bne.n	8008308 <_svfiprintf_r+0x54>
 8008314:	ebba 0b04 	subs.w	fp, sl, r4
 8008318:	d00b      	beq.n	8008332 <_svfiprintf_r+0x7e>
 800831a:	465b      	mov	r3, fp
 800831c:	4622      	mov	r2, r4
 800831e:	4629      	mov	r1, r5
 8008320:	4638      	mov	r0, r7
 8008322:	f7ff ff6b 	bl	80081fc <__ssputs_r>
 8008326:	3001      	adds	r0, #1
 8008328:	f000 80a7 	beq.w	800847a <_svfiprintf_r+0x1c6>
 800832c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800832e:	445a      	add	r2, fp
 8008330:	9209      	str	r2, [sp, #36]	@ 0x24
 8008332:	f89a 3000 	ldrb.w	r3, [sl]
 8008336:	2b00      	cmp	r3, #0
 8008338:	f000 809f 	beq.w	800847a <_svfiprintf_r+0x1c6>
 800833c:	2300      	movs	r3, #0
 800833e:	f04f 32ff 	mov.w	r2, #4294967295
 8008342:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008346:	f10a 0a01 	add.w	sl, sl, #1
 800834a:	9304      	str	r3, [sp, #16]
 800834c:	9307      	str	r3, [sp, #28]
 800834e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008352:	931a      	str	r3, [sp, #104]	@ 0x68
 8008354:	4654      	mov	r4, sl
 8008356:	2205      	movs	r2, #5
 8008358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800835c:	484e      	ldr	r0, [pc, #312]	@ (8008498 <_svfiprintf_r+0x1e4>)
 800835e:	f7f7 ff5f 	bl	8000220 <memchr>
 8008362:	9a04      	ldr	r2, [sp, #16]
 8008364:	b9d8      	cbnz	r0, 800839e <_svfiprintf_r+0xea>
 8008366:	06d0      	lsls	r0, r2, #27
 8008368:	bf44      	itt	mi
 800836a:	2320      	movmi	r3, #32
 800836c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008370:	0711      	lsls	r1, r2, #28
 8008372:	bf44      	itt	mi
 8008374:	232b      	movmi	r3, #43	@ 0x2b
 8008376:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800837a:	f89a 3000 	ldrb.w	r3, [sl]
 800837e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008380:	d015      	beq.n	80083ae <_svfiprintf_r+0xfa>
 8008382:	9a07      	ldr	r2, [sp, #28]
 8008384:	4654      	mov	r4, sl
 8008386:	2000      	movs	r0, #0
 8008388:	f04f 0c0a 	mov.w	ip, #10
 800838c:	4621      	mov	r1, r4
 800838e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008392:	3b30      	subs	r3, #48	@ 0x30
 8008394:	2b09      	cmp	r3, #9
 8008396:	d94b      	bls.n	8008430 <_svfiprintf_r+0x17c>
 8008398:	b1b0      	cbz	r0, 80083c8 <_svfiprintf_r+0x114>
 800839a:	9207      	str	r2, [sp, #28]
 800839c:	e014      	b.n	80083c8 <_svfiprintf_r+0x114>
 800839e:	eba0 0308 	sub.w	r3, r0, r8
 80083a2:	fa09 f303 	lsl.w	r3, r9, r3
 80083a6:	4313      	orrs	r3, r2
 80083a8:	9304      	str	r3, [sp, #16]
 80083aa:	46a2      	mov	sl, r4
 80083ac:	e7d2      	b.n	8008354 <_svfiprintf_r+0xa0>
 80083ae:	9b03      	ldr	r3, [sp, #12]
 80083b0:	1d19      	adds	r1, r3, #4
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	9103      	str	r1, [sp, #12]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	bfbb      	ittet	lt
 80083ba:	425b      	neglt	r3, r3
 80083bc:	f042 0202 	orrlt.w	r2, r2, #2
 80083c0:	9307      	strge	r3, [sp, #28]
 80083c2:	9307      	strlt	r3, [sp, #28]
 80083c4:	bfb8      	it	lt
 80083c6:	9204      	strlt	r2, [sp, #16]
 80083c8:	7823      	ldrb	r3, [r4, #0]
 80083ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80083cc:	d10a      	bne.n	80083e4 <_svfiprintf_r+0x130>
 80083ce:	7863      	ldrb	r3, [r4, #1]
 80083d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80083d2:	d132      	bne.n	800843a <_svfiprintf_r+0x186>
 80083d4:	9b03      	ldr	r3, [sp, #12]
 80083d6:	1d1a      	adds	r2, r3, #4
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	9203      	str	r2, [sp, #12]
 80083dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80083e0:	3402      	adds	r4, #2
 80083e2:	9305      	str	r3, [sp, #20]
 80083e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80084a8 <_svfiprintf_r+0x1f4>
 80083e8:	7821      	ldrb	r1, [r4, #0]
 80083ea:	2203      	movs	r2, #3
 80083ec:	4650      	mov	r0, sl
 80083ee:	f7f7 ff17 	bl	8000220 <memchr>
 80083f2:	b138      	cbz	r0, 8008404 <_svfiprintf_r+0x150>
 80083f4:	9b04      	ldr	r3, [sp, #16]
 80083f6:	eba0 000a 	sub.w	r0, r0, sl
 80083fa:	2240      	movs	r2, #64	@ 0x40
 80083fc:	4082      	lsls	r2, r0
 80083fe:	4313      	orrs	r3, r2
 8008400:	3401      	adds	r4, #1
 8008402:	9304      	str	r3, [sp, #16]
 8008404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008408:	4824      	ldr	r0, [pc, #144]	@ (800849c <_svfiprintf_r+0x1e8>)
 800840a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800840e:	2206      	movs	r2, #6
 8008410:	f7f7 ff06 	bl	8000220 <memchr>
 8008414:	2800      	cmp	r0, #0
 8008416:	d036      	beq.n	8008486 <_svfiprintf_r+0x1d2>
 8008418:	4b21      	ldr	r3, [pc, #132]	@ (80084a0 <_svfiprintf_r+0x1ec>)
 800841a:	bb1b      	cbnz	r3, 8008464 <_svfiprintf_r+0x1b0>
 800841c:	9b03      	ldr	r3, [sp, #12]
 800841e:	3307      	adds	r3, #7
 8008420:	f023 0307 	bic.w	r3, r3, #7
 8008424:	3308      	adds	r3, #8
 8008426:	9303      	str	r3, [sp, #12]
 8008428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800842a:	4433      	add	r3, r6
 800842c:	9309      	str	r3, [sp, #36]	@ 0x24
 800842e:	e76a      	b.n	8008306 <_svfiprintf_r+0x52>
 8008430:	fb0c 3202 	mla	r2, ip, r2, r3
 8008434:	460c      	mov	r4, r1
 8008436:	2001      	movs	r0, #1
 8008438:	e7a8      	b.n	800838c <_svfiprintf_r+0xd8>
 800843a:	2300      	movs	r3, #0
 800843c:	3401      	adds	r4, #1
 800843e:	9305      	str	r3, [sp, #20]
 8008440:	4619      	mov	r1, r3
 8008442:	f04f 0c0a 	mov.w	ip, #10
 8008446:	4620      	mov	r0, r4
 8008448:	f810 2b01 	ldrb.w	r2, [r0], #1
 800844c:	3a30      	subs	r2, #48	@ 0x30
 800844e:	2a09      	cmp	r2, #9
 8008450:	d903      	bls.n	800845a <_svfiprintf_r+0x1a6>
 8008452:	2b00      	cmp	r3, #0
 8008454:	d0c6      	beq.n	80083e4 <_svfiprintf_r+0x130>
 8008456:	9105      	str	r1, [sp, #20]
 8008458:	e7c4      	b.n	80083e4 <_svfiprintf_r+0x130>
 800845a:	fb0c 2101 	mla	r1, ip, r1, r2
 800845e:	4604      	mov	r4, r0
 8008460:	2301      	movs	r3, #1
 8008462:	e7f0      	b.n	8008446 <_svfiprintf_r+0x192>
 8008464:	ab03      	add	r3, sp, #12
 8008466:	9300      	str	r3, [sp, #0]
 8008468:	462a      	mov	r2, r5
 800846a:	4b0e      	ldr	r3, [pc, #56]	@ (80084a4 <_svfiprintf_r+0x1f0>)
 800846c:	a904      	add	r1, sp, #16
 800846e:	4638      	mov	r0, r7
 8008470:	f7fc fc94 	bl	8004d9c <_printf_float>
 8008474:	1c42      	adds	r2, r0, #1
 8008476:	4606      	mov	r6, r0
 8008478:	d1d6      	bne.n	8008428 <_svfiprintf_r+0x174>
 800847a:	89ab      	ldrh	r3, [r5, #12]
 800847c:	065b      	lsls	r3, r3, #25
 800847e:	f53f af2d 	bmi.w	80082dc <_svfiprintf_r+0x28>
 8008482:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008484:	e72c      	b.n	80082e0 <_svfiprintf_r+0x2c>
 8008486:	ab03      	add	r3, sp, #12
 8008488:	9300      	str	r3, [sp, #0]
 800848a:	462a      	mov	r2, r5
 800848c:	4b05      	ldr	r3, [pc, #20]	@ (80084a4 <_svfiprintf_r+0x1f0>)
 800848e:	a904      	add	r1, sp, #16
 8008490:	4638      	mov	r0, r7
 8008492:	f7fc ff1b 	bl	80052cc <_printf_i>
 8008496:	e7ed      	b.n	8008474 <_svfiprintf_r+0x1c0>
 8008498:	08009791 	.word	0x08009791
 800849c:	0800979b 	.word	0x0800979b
 80084a0:	08004d9d 	.word	0x08004d9d
 80084a4:	080081fd 	.word	0x080081fd
 80084a8:	08009797 	.word	0x08009797

080084ac <__sflush_r>:
 80084ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084b4:	0716      	lsls	r6, r2, #28
 80084b6:	4605      	mov	r5, r0
 80084b8:	460c      	mov	r4, r1
 80084ba:	d454      	bmi.n	8008566 <__sflush_r+0xba>
 80084bc:	684b      	ldr	r3, [r1, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	dc02      	bgt.n	80084c8 <__sflush_r+0x1c>
 80084c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	dd48      	ble.n	800855a <__sflush_r+0xae>
 80084c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80084ca:	2e00      	cmp	r6, #0
 80084cc:	d045      	beq.n	800855a <__sflush_r+0xae>
 80084ce:	2300      	movs	r3, #0
 80084d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80084d4:	682f      	ldr	r7, [r5, #0]
 80084d6:	6a21      	ldr	r1, [r4, #32]
 80084d8:	602b      	str	r3, [r5, #0]
 80084da:	d030      	beq.n	800853e <__sflush_r+0x92>
 80084dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80084de:	89a3      	ldrh	r3, [r4, #12]
 80084e0:	0759      	lsls	r1, r3, #29
 80084e2:	d505      	bpl.n	80084f0 <__sflush_r+0x44>
 80084e4:	6863      	ldr	r3, [r4, #4]
 80084e6:	1ad2      	subs	r2, r2, r3
 80084e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80084ea:	b10b      	cbz	r3, 80084f0 <__sflush_r+0x44>
 80084ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80084ee:	1ad2      	subs	r2, r2, r3
 80084f0:	2300      	movs	r3, #0
 80084f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80084f4:	6a21      	ldr	r1, [r4, #32]
 80084f6:	4628      	mov	r0, r5
 80084f8:	47b0      	blx	r6
 80084fa:	1c43      	adds	r3, r0, #1
 80084fc:	89a3      	ldrh	r3, [r4, #12]
 80084fe:	d106      	bne.n	800850e <__sflush_r+0x62>
 8008500:	6829      	ldr	r1, [r5, #0]
 8008502:	291d      	cmp	r1, #29
 8008504:	d82b      	bhi.n	800855e <__sflush_r+0xb2>
 8008506:	4a2a      	ldr	r2, [pc, #168]	@ (80085b0 <__sflush_r+0x104>)
 8008508:	410a      	asrs	r2, r1
 800850a:	07d6      	lsls	r6, r2, #31
 800850c:	d427      	bmi.n	800855e <__sflush_r+0xb2>
 800850e:	2200      	movs	r2, #0
 8008510:	6062      	str	r2, [r4, #4]
 8008512:	04d9      	lsls	r1, r3, #19
 8008514:	6922      	ldr	r2, [r4, #16]
 8008516:	6022      	str	r2, [r4, #0]
 8008518:	d504      	bpl.n	8008524 <__sflush_r+0x78>
 800851a:	1c42      	adds	r2, r0, #1
 800851c:	d101      	bne.n	8008522 <__sflush_r+0x76>
 800851e:	682b      	ldr	r3, [r5, #0]
 8008520:	b903      	cbnz	r3, 8008524 <__sflush_r+0x78>
 8008522:	6560      	str	r0, [r4, #84]	@ 0x54
 8008524:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008526:	602f      	str	r7, [r5, #0]
 8008528:	b1b9      	cbz	r1, 800855a <__sflush_r+0xae>
 800852a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800852e:	4299      	cmp	r1, r3
 8008530:	d002      	beq.n	8008538 <__sflush_r+0x8c>
 8008532:	4628      	mov	r0, r5
 8008534:	f7fe fa2c 	bl	8006990 <_free_r>
 8008538:	2300      	movs	r3, #0
 800853a:	6363      	str	r3, [r4, #52]	@ 0x34
 800853c:	e00d      	b.n	800855a <__sflush_r+0xae>
 800853e:	2301      	movs	r3, #1
 8008540:	4628      	mov	r0, r5
 8008542:	47b0      	blx	r6
 8008544:	4602      	mov	r2, r0
 8008546:	1c50      	adds	r0, r2, #1
 8008548:	d1c9      	bne.n	80084de <__sflush_r+0x32>
 800854a:	682b      	ldr	r3, [r5, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d0c6      	beq.n	80084de <__sflush_r+0x32>
 8008550:	2b1d      	cmp	r3, #29
 8008552:	d001      	beq.n	8008558 <__sflush_r+0xac>
 8008554:	2b16      	cmp	r3, #22
 8008556:	d11e      	bne.n	8008596 <__sflush_r+0xea>
 8008558:	602f      	str	r7, [r5, #0]
 800855a:	2000      	movs	r0, #0
 800855c:	e022      	b.n	80085a4 <__sflush_r+0xf8>
 800855e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008562:	b21b      	sxth	r3, r3
 8008564:	e01b      	b.n	800859e <__sflush_r+0xf2>
 8008566:	690f      	ldr	r7, [r1, #16]
 8008568:	2f00      	cmp	r7, #0
 800856a:	d0f6      	beq.n	800855a <__sflush_r+0xae>
 800856c:	0793      	lsls	r3, r2, #30
 800856e:	680e      	ldr	r6, [r1, #0]
 8008570:	bf08      	it	eq
 8008572:	694b      	ldreq	r3, [r1, #20]
 8008574:	600f      	str	r7, [r1, #0]
 8008576:	bf18      	it	ne
 8008578:	2300      	movne	r3, #0
 800857a:	eba6 0807 	sub.w	r8, r6, r7
 800857e:	608b      	str	r3, [r1, #8]
 8008580:	f1b8 0f00 	cmp.w	r8, #0
 8008584:	dde9      	ble.n	800855a <__sflush_r+0xae>
 8008586:	6a21      	ldr	r1, [r4, #32]
 8008588:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800858a:	4643      	mov	r3, r8
 800858c:	463a      	mov	r2, r7
 800858e:	4628      	mov	r0, r5
 8008590:	47b0      	blx	r6
 8008592:	2800      	cmp	r0, #0
 8008594:	dc08      	bgt.n	80085a8 <__sflush_r+0xfc>
 8008596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800859a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800859e:	81a3      	strh	r3, [r4, #12]
 80085a0:	f04f 30ff 	mov.w	r0, #4294967295
 80085a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085a8:	4407      	add	r7, r0
 80085aa:	eba8 0800 	sub.w	r8, r8, r0
 80085ae:	e7e7      	b.n	8008580 <__sflush_r+0xd4>
 80085b0:	dfbffffe 	.word	0xdfbffffe

080085b4 <_fflush_r>:
 80085b4:	b538      	push	{r3, r4, r5, lr}
 80085b6:	690b      	ldr	r3, [r1, #16]
 80085b8:	4605      	mov	r5, r0
 80085ba:	460c      	mov	r4, r1
 80085bc:	b913      	cbnz	r3, 80085c4 <_fflush_r+0x10>
 80085be:	2500      	movs	r5, #0
 80085c0:	4628      	mov	r0, r5
 80085c2:	bd38      	pop	{r3, r4, r5, pc}
 80085c4:	b118      	cbz	r0, 80085ce <_fflush_r+0x1a>
 80085c6:	6a03      	ldr	r3, [r0, #32]
 80085c8:	b90b      	cbnz	r3, 80085ce <_fflush_r+0x1a>
 80085ca:	f7fd fa3f 	bl	8005a4c <__sinit>
 80085ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d0f3      	beq.n	80085be <_fflush_r+0xa>
 80085d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80085d8:	07d0      	lsls	r0, r2, #31
 80085da:	d404      	bmi.n	80085e6 <_fflush_r+0x32>
 80085dc:	0599      	lsls	r1, r3, #22
 80085de:	d402      	bmi.n	80085e6 <_fflush_r+0x32>
 80085e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085e2:	f7fd fb7e 	bl	8005ce2 <__retarget_lock_acquire_recursive>
 80085e6:	4628      	mov	r0, r5
 80085e8:	4621      	mov	r1, r4
 80085ea:	f7ff ff5f 	bl	80084ac <__sflush_r>
 80085ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80085f0:	07da      	lsls	r2, r3, #31
 80085f2:	4605      	mov	r5, r0
 80085f4:	d4e4      	bmi.n	80085c0 <_fflush_r+0xc>
 80085f6:	89a3      	ldrh	r3, [r4, #12]
 80085f8:	059b      	lsls	r3, r3, #22
 80085fa:	d4e1      	bmi.n	80085c0 <_fflush_r+0xc>
 80085fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085fe:	f7fd fb71 	bl	8005ce4 <__retarget_lock_release_recursive>
 8008602:	e7dd      	b.n	80085c0 <_fflush_r+0xc>

08008604 <memmove>:
 8008604:	4288      	cmp	r0, r1
 8008606:	b510      	push	{r4, lr}
 8008608:	eb01 0402 	add.w	r4, r1, r2
 800860c:	d902      	bls.n	8008614 <memmove+0x10>
 800860e:	4284      	cmp	r4, r0
 8008610:	4623      	mov	r3, r4
 8008612:	d807      	bhi.n	8008624 <memmove+0x20>
 8008614:	1e43      	subs	r3, r0, #1
 8008616:	42a1      	cmp	r1, r4
 8008618:	d008      	beq.n	800862c <memmove+0x28>
 800861a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800861e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008622:	e7f8      	b.n	8008616 <memmove+0x12>
 8008624:	4402      	add	r2, r0
 8008626:	4601      	mov	r1, r0
 8008628:	428a      	cmp	r2, r1
 800862a:	d100      	bne.n	800862e <memmove+0x2a>
 800862c:	bd10      	pop	{r4, pc}
 800862e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008632:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008636:	e7f7      	b.n	8008628 <memmove+0x24>

08008638 <strncmp>:
 8008638:	b510      	push	{r4, lr}
 800863a:	b16a      	cbz	r2, 8008658 <strncmp+0x20>
 800863c:	3901      	subs	r1, #1
 800863e:	1884      	adds	r4, r0, r2
 8008640:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008644:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008648:	429a      	cmp	r2, r3
 800864a:	d103      	bne.n	8008654 <strncmp+0x1c>
 800864c:	42a0      	cmp	r0, r4
 800864e:	d001      	beq.n	8008654 <strncmp+0x1c>
 8008650:	2a00      	cmp	r2, #0
 8008652:	d1f5      	bne.n	8008640 <strncmp+0x8>
 8008654:	1ad0      	subs	r0, r2, r3
 8008656:	bd10      	pop	{r4, pc}
 8008658:	4610      	mov	r0, r2
 800865a:	e7fc      	b.n	8008656 <strncmp+0x1e>

0800865c <_sbrk_r>:
 800865c:	b538      	push	{r3, r4, r5, lr}
 800865e:	4d06      	ldr	r5, [pc, #24]	@ (8008678 <_sbrk_r+0x1c>)
 8008660:	2300      	movs	r3, #0
 8008662:	4604      	mov	r4, r0
 8008664:	4608      	mov	r0, r1
 8008666:	602b      	str	r3, [r5, #0]
 8008668:	f7f9 fa62 	bl	8001b30 <_sbrk>
 800866c:	1c43      	adds	r3, r0, #1
 800866e:	d102      	bne.n	8008676 <_sbrk_r+0x1a>
 8008670:	682b      	ldr	r3, [r5, #0]
 8008672:	b103      	cbz	r3, 8008676 <_sbrk_r+0x1a>
 8008674:	6023      	str	r3, [r4, #0]
 8008676:	bd38      	pop	{r3, r4, r5, pc}
 8008678:	20000540 	.word	0x20000540

0800867c <memcpy>:
 800867c:	440a      	add	r2, r1
 800867e:	4291      	cmp	r1, r2
 8008680:	f100 33ff 	add.w	r3, r0, #4294967295
 8008684:	d100      	bne.n	8008688 <memcpy+0xc>
 8008686:	4770      	bx	lr
 8008688:	b510      	push	{r4, lr}
 800868a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800868e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008692:	4291      	cmp	r1, r2
 8008694:	d1f9      	bne.n	800868a <memcpy+0xe>
 8008696:	bd10      	pop	{r4, pc}

08008698 <nan>:
 8008698:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80086a0 <nan+0x8>
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	00000000 	.word	0x00000000
 80086a4:	7ff80000 	.word	0x7ff80000

080086a8 <__assert_func>:
 80086a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086aa:	4614      	mov	r4, r2
 80086ac:	461a      	mov	r2, r3
 80086ae:	4b09      	ldr	r3, [pc, #36]	@ (80086d4 <__assert_func+0x2c>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4605      	mov	r5, r0
 80086b4:	68d8      	ldr	r0, [r3, #12]
 80086b6:	b954      	cbnz	r4, 80086ce <__assert_func+0x26>
 80086b8:	4b07      	ldr	r3, [pc, #28]	@ (80086d8 <__assert_func+0x30>)
 80086ba:	461c      	mov	r4, r3
 80086bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086c0:	9100      	str	r1, [sp, #0]
 80086c2:	462b      	mov	r3, r5
 80086c4:	4905      	ldr	r1, [pc, #20]	@ (80086dc <__assert_func+0x34>)
 80086c6:	f000 fba7 	bl	8008e18 <fiprintf>
 80086ca:	f000 fbb7 	bl	8008e3c <abort>
 80086ce:	4b04      	ldr	r3, [pc, #16]	@ (80086e0 <__assert_func+0x38>)
 80086d0:	e7f4      	b.n	80086bc <__assert_func+0x14>
 80086d2:	bf00      	nop
 80086d4:	2000001c 	.word	0x2000001c
 80086d8:	080097e5 	.word	0x080097e5
 80086dc:	080097b7 	.word	0x080097b7
 80086e0:	080097aa 	.word	0x080097aa

080086e4 <_calloc_r>:
 80086e4:	b570      	push	{r4, r5, r6, lr}
 80086e6:	fba1 5402 	umull	r5, r4, r1, r2
 80086ea:	b93c      	cbnz	r4, 80086fc <_calloc_r+0x18>
 80086ec:	4629      	mov	r1, r5
 80086ee:	f7fe f9c3 	bl	8006a78 <_malloc_r>
 80086f2:	4606      	mov	r6, r0
 80086f4:	b928      	cbnz	r0, 8008702 <_calloc_r+0x1e>
 80086f6:	2600      	movs	r6, #0
 80086f8:	4630      	mov	r0, r6
 80086fa:	bd70      	pop	{r4, r5, r6, pc}
 80086fc:	220c      	movs	r2, #12
 80086fe:	6002      	str	r2, [r0, #0]
 8008700:	e7f9      	b.n	80086f6 <_calloc_r+0x12>
 8008702:	462a      	mov	r2, r5
 8008704:	4621      	mov	r1, r4
 8008706:	f7fd fa6e 	bl	8005be6 <memset>
 800870a:	e7f5      	b.n	80086f8 <_calloc_r+0x14>

0800870c <rshift>:
 800870c:	6903      	ldr	r3, [r0, #16]
 800870e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008712:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008716:	ea4f 1261 	mov.w	r2, r1, asr #5
 800871a:	f100 0414 	add.w	r4, r0, #20
 800871e:	dd45      	ble.n	80087ac <rshift+0xa0>
 8008720:	f011 011f 	ands.w	r1, r1, #31
 8008724:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008728:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800872c:	d10c      	bne.n	8008748 <rshift+0x3c>
 800872e:	f100 0710 	add.w	r7, r0, #16
 8008732:	4629      	mov	r1, r5
 8008734:	42b1      	cmp	r1, r6
 8008736:	d334      	bcc.n	80087a2 <rshift+0x96>
 8008738:	1a9b      	subs	r3, r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	1eea      	subs	r2, r5, #3
 800873e:	4296      	cmp	r6, r2
 8008740:	bf38      	it	cc
 8008742:	2300      	movcc	r3, #0
 8008744:	4423      	add	r3, r4
 8008746:	e015      	b.n	8008774 <rshift+0x68>
 8008748:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800874c:	f1c1 0820 	rsb	r8, r1, #32
 8008750:	40cf      	lsrs	r7, r1
 8008752:	f105 0e04 	add.w	lr, r5, #4
 8008756:	46a1      	mov	r9, r4
 8008758:	4576      	cmp	r6, lr
 800875a:	46f4      	mov	ip, lr
 800875c:	d815      	bhi.n	800878a <rshift+0x7e>
 800875e:	1a9a      	subs	r2, r3, r2
 8008760:	0092      	lsls	r2, r2, #2
 8008762:	3a04      	subs	r2, #4
 8008764:	3501      	adds	r5, #1
 8008766:	42ae      	cmp	r6, r5
 8008768:	bf38      	it	cc
 800876a:	2200      	movcc	r2, #0
 800876c:	18a3      	adds	r3, r4, r2
 800876e:	50a7      	str	r7, [r4, r2]
 8008770:	b107      	cbz	r7, 8008774 <rshift+0x68>
 8008772:	3304      	adds	r3, #4
 8008774:	1b1a      	subs	r2, r3, r4
 8008776:	42a3      	cmp	r3, r4
 8008778:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800877c:	bf08      	it	eq
 800877e:	2300      	moveq	r3, #0
 8008780:	6102      	str	r2, [r0, #16]
 8008782:	bf08      	it	eq
 8008784:	6143      	streq	r3, [r0, #20]
 8008786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800878a:	f8dc c000 	ldr.w	ip, [ip]
 800878e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008792:	ea4c 0707 	orr.w	r7, ip, r7
 8008796:	f849 7b04 	str.w	r7, [r9], #4
 800879a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800879e:	40cf      	lsrs	r7, r1
 80087a0:	e7da      	b.n	8008758 <rshift+0x4c>
 80087a2:	f851 cb04 	ldr.w	ip, [r1], #4
 80087a6:	f847 cf04 	str.w	ip, [r7, #4]!
 80087aa:	e7c3      	b.n	8008734 <rshift+0x28>
 80087ac:	4623      	mov	r3, r4
 80087ae:	e7e1      	b.n	8008774 <rshift+0x68>

080087b0 <__hexdig_fun>:
 80087b0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80087b4:	2b09      	cmp	r3, #9
 80087b6:	d802      	bhi.n	80087be <__hexdig_fun+0xe>
 80087b8:	3820      	subs	r0, #32
 80087ba:	b2c0      	uxtb	r0, r0
 80087bc:	4770      	bx	lr
 80087be:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80087c2:	2b05      	cmp	r3, #5
 80087c4:	d801      	bhi.n	80087ca <__hexdig_fun+0x1a>
 80087c6:	3847      	subs	r0, #71	@ 0x47
 80087c8:	e7f7      	b.n	80087ba <__hexdig_fun+0xa>
 80087ca:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80087ce:	2b05      	cmp	r3, #5
 80087d0:	d801      	bhi.n	80087d6 <__hexdig_fun+0x26>
 80087d2:	3827      	subs	r0, #39	@ 0x27
 80087d4:	e7f1      	b.n	80087ba <__hexdig_fun+0xa>
 80087d6:	2000      	movs	r0, #0
 80087d8:	4770      	bx	lr
	...

080087dc <__gethex>:
 80087dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e0:	b085      	sub	sp, #20
 80087e2:	468a      	mov	sl, r1
 80087e4:	9302      	str	r3, [sp, #8]
 80087e6:	680b      	ldr	r3, [r1, #0]
 80087e8:	9001      	str	r0, [sp, #4]
 80087ea:	4690      	mov	r8, r2
 80087ec:	1c9c      	adds	r4, r3, #2
 80087ee:	46a1      	mov	r9, r4
 80087f0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80087f4:	2830      	cmp	r0, #48	@ 0x30
 80087f6:	d0fa      	beq.n	80087ee <__gethex+0x12>
 80087f8:	eba9 0303 	sub.w	r3, r9, r3
 80087fc:	f1a3 0b02 	sub.w	fp, r3, #2
 8008800:	f7ff ffd6 	bl	80087b0 <__hexdig_fun>
 8008804:	4605      	mov	r5, r0
 8008806:	2800      	cmp	r0, #0
 8008808:	d168      	bne.n	80088dc <__gethex+0x100>
 800880a:	49a0      	ldr	r1, [pc, #640]	@ (8008a8c <__gethex+0x2b0>)
 800880c:	2201      	movs	r2, #1
 800880e:	4648      	mov	r0, r9
 8008810:	f7ff ff12 	bl	8008638 <strncmp>
 8008814:	4607      	mov	r7, r0
 8008816:	2800      	cmp	r0, #0
 8008818:	d167      	bne.n	80088ea <__gethex+0x10e>
 800881a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800881e:	4626      	mov	r6, r4
 8008820:	f7ff ffc6 	bl	80087b0 <__hexdig_fun>
 8008824:	2800      	cmp	r0, #0
 8008826:	d062      	beq.n	80088ee <__gethex+0x112>
 8008828:	4623      	mov	r3, r4
 800882a:	7818      	ldrb	r0, [r3, #0]
 800882c:	2830      	cmp	r0, #48	@ 0x30
 800882e:	4699      	mov	r9, r3
 8008830:	f103 0301 	add.w	r3, r3, #1
 8008834:	d0f9      	beq.n	800882a <__gethex+0x4e>
 8008836:	f7ff ffbb 	bl	80087b0 <__hexdig_fun>
 800883a:	fab0 f580 	clz	r5, r0
 800883e:	096d      	lsrs	r5, r5, #5
 8008840:	f04f 0b01 	mov.w	fp, #1
 8008844:	464a      	mov	r2, r9
 8008846:	4616      	mov	r6, r2
 8008848:	3201      	adds	r2, #1
 800884a:	7830      	ldrb	r0, [r6, #0]
 800884c:	f7ff ffb0 	bl	80087b0 <__hexdig_fun>
 8008850:	2800      	cmp	r0, #0
 8008852:	d1f8      	bne.n	8008846 <__gethex+0x6a>
 8008854:	498d      	ldr	r1, [pc, #564]	@ (8008a8c <__gethex+0x2b0>)
 8008856:	2201      	movs	r2, #1
 8008858:	4630      	mov	r0, r6
 800885a:	f7ff feed 	bl	8008638 <strncmp>
 800885e:	2800      	cmp	r0, #0
 8008860:	d13f      	bne.n	80088e2 <__gethex+0x106>
 8008862:	b944      	cbnz	r4, 8008876 <__gethex+0x9a>
 8008864:	1c74      	adds	r4, r6, #1
 8008866:	4622      	mov	r2, r4
 8008868:	4616      	mov	r6, r2
 800886a:	3201      	adds	r2, #1
 800886c:	7830      	ldrb	r0, [r6, #0]
 800886e:	f7ff ff9f 	bl	80087b0 <__hexdig_fun>
 8008872:	2800      	cmp	r0, #0
 8008874:	d1f8      	bne.n	8008868 <__gethex+0x8c>
 8008876:	1ba4      	subs	r4, r4, r6
 8008878:	00a7      	lsls	r7, r4, #2
 800887a:	7833      	ldrb	r3, [r6, #0]
 800887c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008880:	2b50      	cmp	r3, #80	@ 0x50
 8008882:	d13e      	bne.n	8008902 <__gethex+0x126>
 8008884:	7873      	ldrb	r3, [r6, #1]
 8008886:	2b2b      	cmp	r3, #43	@ 0x2b
 8008888:	d033      	beq.n	80088f2 <__gethex+0x116>
 800888a:	2b2d      	cmp	r3, #45	@ 0x2d
 800888c:	d034      	beq.n	80088f8 <__gethex+0x11c>
 800888e:	1c71      	adds	r1, r6, #1
 8008890:	2400      	movs	r4, #0
 8008892:	7808      	ldrb	r0, [r1, #0]
 8008894:	f7ff ff8c 	bl	80087b0 <__hexdig_fun>
 8008898:	1e43      	subs	r3, r0, #1
 800889a:	b2db      	uxtb	r3, r3
 800889c:	2b18      	cmp	r3, #24
 800889e:	d830      	bhi.n	8008902 <__gethex+0x126>
 80088a0:	f1a0 0210 	sub.w	r2, r0, #16
 80088a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80088a8:	f7ff ff82 	bl	80087b0 <__hexdig_fun>
 80088ac:	f100 3cff 	add.w	ip, r0, #4294967295
 80088b0:	fa5f fc8c 	uxtb.w	ip, ip
 80088b4:	f1bc 0f18 	cmp.w	ip, #24
 80088b8:	f04f 030a 	mov.w	r3, #10
 80088bc:	d91e      	bls.n	80088fc <__gethex+0x120>
 80088be:	b104      	cbz	r4, 80088c2 <__gethex+0xe6>
 80088c0:	4252      	negs	r2, r2
 80088c2:	4417      	add	r7, r2
 80088c4:	f8ca 1000 	str.w	r1, [sl]
 80088c8:	b1ed      	cbz	r5, 8008906 <__gethex+0x12a>
 80088ca:	f1bb 0f00 	cmp.w	fp, #0
 80088ce:	bf0c      	ite	eq
 80088d0:	2506      	moveq	r5, #6
 80088d2:	2500      	movne	r5, #0
 80088d4:	4628      	mov	r0, r5
 80088d6:	b005      	add	sp, #20
 80088d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088dc:	2500      	movs	r5, #0
 80088de:	462c      	mov	r4, r5
 80088e0:	e7b0      	b.n	8008844 <__gethex+0x68>
 80088e2:	2c00      	cmp	r4, #0
 80088e4:	d1c7      	bne.n	8008876 <__gethex+0x9a>
 80088e6:	4627      	mov	r7, r4
 80088e8:	e7c7      	b.n	800887a <__gethex+0x9e>
 80088ea:	464e      	mov	r6, r9
 80088ec:	462f      	mov	r7, r5
 80088ee:	2501      	movs	r5, #1
 80088f0:	e7c3      	b.n	800887a <__gethex+0x9e>
 80088f2:	2400      	movs	r4, #0
 80088f4:	1cb1      	adds	r1, r6, #2
 80088f6:	e7cc      	b.n	8008892 <__gethex+0xb6>
 80088f8:	2401      	movs	r4, #1
 80088fa:	e7fb      	b.n	80088f4 <__gethex+0x118>
 80088fc:	fb03 0002 	mla	r0, r3, r2, r0
 8008900:	e7ce      	b.n	80088a0 <__gethex+0xc4>
 8008902:	4631      	mov	r1, r6
 8008904:	e7de      	b.n	80088c4 <__gethex+0xe8>
 8008906:	eba6 0309 	sub.w	r3, r6, r9
 800890a:	3b01      	subs	r3, #1
 800890c:	4629      	mov	r1, r5
 800890e:	2b07      	cmp	r3, #7
 8008910:	dc0a      	bgt.n	8008928 <__gethex+0x14c>
 8008912:	9801      	ldr	r0, [sp, #4]
 8008914:	f7fe f93c 	bl	8006b90 <_Balloc>
 8008918:	4604      	mov	r4, r0
 800891a:	b940      	cbnz	r0, 800892e <__gethex+0x152>
 800891c:	4b5c      	ldr	r3, [pc, #368]	@ (8008a90 <__gethex+0x2b4>)
 800891e:	4602      	mov	r2, r0
 8008920:	21e4      	movs	r1, #228	@ 0xe4
 8008922:	485c      	ldr	r0, [pc, #368]	@ (8008a94 <__gethex+0x2b8>)
 8008924:	f7ff fec0 	bl	80086a8 <__assert_func>
 8008928:	3101      	adds	r1, #1
 800892a:	105b      	asrs	r3, r3, #1
 800892c:	e7ef      	b.n	800890e <__gethex+0x132>
 800892e:	f100 0a14 	add.w	sl, r0, #20
 8008932:	2300      	movs	r3, #0
 8008934:	4655      	mov	r5, sl
 8008936:	469b      	mov	fp, r3
 8008938:	45b1      	cmp	r9, r6
 800893a:	d337      	bcc.n	80089ac <__gethex+0x1d0>
 800893c:	f845 bb04 	str.w	fp, [r5], #4
 8008940:	eba5 050a 	sub.w	r5, r5, sl
 8008944:	10ad      	asrs	r5, r5, #2
 8008946:	6125      	str	r5, [r4, #16]
 8008948:	4658      	mov	r0, fp
 800894a:	f7fe fa13 	bl	8006d74 <__hi0bits>
 800894e:	016d      	lsls	r5, r5, #5
 8008950:	f8d8 6000 	ldr.w	r6, [r8]
 8008954:	1a2d      	subs	r5, r5, r0
 8008956:	42b5      	cmp	r5, r6
 8008958:	dd54      	ble.n	8008a04 <__gethex+0x228>
 800895a:	1bad      	subs	r5, r5, r6
 800895c:	4629      	mov	r1, r5
 800895e:	4620      	mov	r0, r4
 8008960:	f7fe fda7 	bl	80074b2 <__any_on>
 8008964:	4681      	mov	r9, r0
 8008966:	b178      	cbz	r0, 8008988 <__gethex+0x1ac>
 8008968:	1e6b      	subs	r3, r5, #1
 800896a:	1159      	asrs	r1, r3, #5
 800896c:	f003 021f 	and.w	r2, r3, #31
 8008970:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008974:	f04f 0901 	mov.w	r9, #1
 8008978:	fa09 f202 	lsl.w	r2, r9, r2
 800897c:	420a      	tst	r2, r1
 800897e:	d003      	beq.n	8008988 <__gethex+0x1ac>
 8008980:	454b      	cmp	r3, r9
 8008982:	dc36      	bgt.n	80089f2 <__gethex+0x216>
 8008984:	f04f 0902 	mov.w	r9, #2
 8008988:	4629      	mov	r1, r5
 800898a:	4620      	mov	r0, r4
 800898c:	f7ff febe 	bl	800870c <rshift>
 8008990:	442f      	add	r7, r5
 8008992:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008996:	42bb      	cmp	r3, r7
 8008998:	da42      	bge.n	8008a20 <__gethex+0x244>
 800899a:	9801      	ldr	r0, [sp, #4]
 800899c:	4621      	mov	r1, r4
 800899e:	f7fe f937 	bl	8006c10 <_Bfree>
 80089a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089a4:	2300      	movs	r3, #0
 80089a6:	6013      	str	r3, [r2, #0]
 80089a8:	25a3      	movs	r5, #163	@ 0xa3
 80089aa:	e793      	b.n	80088d4 <__gethex+0xf8>
 80089ac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80089b0:	2a2e      	cmp	r2, #46	@ 0x2e
 80089b2:	d012      	beq.n	80089da <__gethex+0x1fe>
 80089b4:	2b20      	cmp	r3, #32
 80089b6:	d104      	bne.n	80089c2 <__gethex+0x1e6>
 80089b8:	f845 bb04 	str.w	fp, [r5], #4
 80089bc:	f04f 0b00 	mov.w	fp, #0
 80089c0:	465b      	mov	r3, fp
 80089c2:	7830      	ldrb	r0, [r6, #0]
 80089c4:	9303      	str	r3, [sp, #12]
 80089c6:	f7ff fef3 	bl	80087b0 <__hexdig_fun>
 80089ca:	9b03      	ldr	r3, [sp, #12]
 80089cc:	f000 000f 	and.w	r0, r0, #15
 80089d0:	4098      	lsls	r0, r3
 80089d2:	ea4b 0b00 	orr.w	fp, fp, r0
 80089d6:	3304      	adds	r3, #4
 80089d8:	e7ae      	b.n	8008938 <__gethex+0x15c>
 80089da:	45b1      	cmp	r9, r6
 80089dc:	d8ea      	bhi.n	80089b4 <__gethex+0x1d8>
 80089de:	492b      	ldr	r1, [pc, #172]	@ (8008a8c <__gethex+0x2b0>)
 80089e0:	9303      	str	r3, [sp, #12]
 80089e2:	2201      	movs	r2, #1
 80089e4:	4630      	mov	r0, r6
 80089e6:	f7ff fe27 	bl	8008638 <strncmp>
 80089ea:	9b03      	ldr	r3, [sp, #12]
 80089ec:	2800      	cmp	r0, #0
 80089ee:	d1e1      	bne.n	80089b4 <__gethex+0x1d8>
 80089f0:	e7a2      	b.n	8008938 <__gethex+0x15c>
 80089f2:	1ea9      	subs	r1, r5, #2
 80089f4:	4620      	mov	r0, r4
 80089f6:	f7fe fd5c 	bl	80074b2 <__any_on>
 80089fa:	2800      	cmp	r0, #0
 80089fc:	d0c2      	beq.n	8008984 <__gethex+0x1a8>
 80089fe:	f04f 0903 	mov.w	r9, #3
 8008a02:	e7c1      	b.n	8008988 <__gethex+0x1ac>
 8008a04:	da09      	bge.n	8008a1a <__gethex+0x23e>
 8008a06:	1b75      	subs	r5, r6, r5
 8008a08:	4621      	mov	r1, r4
 8008a0a:	9801      	ldr	r0, [sp, #4]
 8008a0c:	462a      	mov	r2, r5
 8008a0e:	f7fe fb17 	bl	8007040 <__lshift>
 8008a12:	1b7f      	subs	r7, r7, r5
 8008a14:	4604      	mov	r4, r0
 8008a16:	f100 0a14 	add.w	sl, r0, #20
 8008a1a:	f04f 0900 	mov.w	r9, #0
 8008a1e:	e7b8      	b.n	8008992 <__gethex+0x1b6>
 8008a20:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008a24:	42bd      	cmp	r5, r7
 8008a26:	dd6f      	ble.n	8008b08 <__gethex+0x32c>
 8008a28:	1bed      	subs	r5, r5, r7
 8008a2a:	42ae      	cmp	r6, r5
 8008a2c:	dc34      	bgt.n	8008a98 <__gethex+0x2bc>
 8008a2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d022      	beq.n	8008a7c <__gethex+0x2a0>
 8008a36:	2b03      	cmp	r3, #3
 8008a38:	d024      	beq.n	8008a84 <__gethex+0x2a8>
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d115      	bne.n	8008a6a <__gethex+0x28e>
 8008a3e:	42ae      	cmp	r6, r5
 8008a40:	d113      	bne.n	8008a6a <__gethex+0x28e>
 8008a42:	2e01      	cmp	r6, #1
 8008a44:	d10b      	bne.n	8008a5e <__gethex+0x282>
 8008a46:	9a02      	ldr	r2, [sp, #8]
 8008a48:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008a4c:	6013      	str	r3, [r2, #0]
 8008a4e:	2301      	movs	r3, #1
 8008a50:	6123      	str	r3, [r4, #16]
 8008a52:	f8ca 3000 	str.w	r3, [sl]
 8008a56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a58:	2562      	movs	r5, #98	@ 0x62
 8008a5a:	601c      	str	r4, [r3, #0]
 8008a5c:	e73a      	b.n	80088d4 <__gethex+0xf8>
 8008a5e:	1e71      	subs	r1, r6, #1
 8008a60:	4620      	mov	r0, r4
 8008a62:	f7fe fd26 	bl	80074b2 <__any_on>
 8008a66:	2800      	cmp	r0, #0
 8008a68:	d1ed      	bne.n	8008a46 <__gethex+0x26a>
 8008a6a:	9801      	ldr	r0, [sp, #4]
 8008a6c:	4621      	mov	r1, r4
 8008a6e:	f7fe f8cf 	bl	8006c10 <_Bfree>
 8008a72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a74:	2300      	movs	r3, #0
 8008a76:	6013      	str	r3, [r2, #0]
 8008a78:	2550      	movs	r5, #80	@ 0x50
 8008a7a:	e72b      	b.n	80088d4 <__gethex+0xf8>
 8008a7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1f3      	bne.n	8008a6a <__gethex+0x28e>
 8008a82:	e7e0      	b.n	8008a46 <__gethex+0x26a>
 8008a84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1dd      	bne.n	8008a46 <__gethex+0x26a>
 8008a8a:	e7ee      	b.n	8008a6a <__gethex+0x28e>
 8008a8c:	08009638 	.word	0x08009638
 8008a90:	080094d1 	.word	0x080094d1
 8008a94:	080097e6 	.word	0x080097e6
 8008a98:	1e6f      	subs	r7, r5, #1
 8008a9a:	f1b9 0f00 	cmp.w	r9, #0
 8008a9e:	d130      	bne.n	8008b02 <__gethex+0x326>
 8008aa0:	b127      	cbz	r7, 8008aac <__gethex+0x2d0>
 8008aa2:	4639      	mov	r1, r7
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f7fe fd04 	bl	80074b2 <__any_on>
 8008aaa:	4681      	mov	r9, r0
 8008aac:	117a      	asrs	r2, r7, #5
 8008aae:	2301      	movs	r3, #1
 8008ab0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008ab4:	f007 071f 	and.w	r7, r7, #31
 8008ab8:	40bb      	lsls	r3, r7
 8008aba:	4213      	tst	r3, r2
 8008abc:	4629      	mov	r1, r5
 8008abe:	4620      	mov	r0, r4
 8008ac0:	bf18      	it	ne
 8008ac2:	f049 0902 	orrne.w	r9, r9, #2
 8008ac6:	f7ff fe21 	bl	800870c <rshift>
 8008aca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008ace:	1b76      	subs	r6, r6, r5
 8008ad0:	2502      	movs	r5, #2
 8008ad2:	f1b9 0f00 	cmp.w	r9, #0
 8008ad6:	d047      	beq.n	8008b68 <__gethex+0x38c>
 8008ad8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d015      	beq.n	8008b0c <__gethex+0x330>
 8008ae0:	2b03      	cmp	r3, #3
 8008ae2:	d017      	beq.n	8008b14 <__gethex+0x338>
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d109      	bne.n	8008afc <__gethex+0x320>
 8008ae8:	f019 0f02 	tst.w	r9, #2
 8008aec:	d006      	beq.n	8008afc <__gethex+0x320>
 8008aee:	f8da 3000 	ldr.w	r3, [sl]
 8008af2:	ea49 0903 	orr.w	r9, r9, r3
 8008af6:	f019 0f01 	tst.w	r9, #1
 8008afa:	d10e      	bne.n	8008b1a <__gethex+0x33e>
 8008afc:	f045 0510 	orr.w	r5, r5, #16
 8008b00:	e032      	b.n	8008b68 <__gethex+0x38c>
 8008b02:	f04f 0901 	mov.w	r9, #1
 8008b06:	e7d1      	b.n	8008aac <__gethex+0x2d0>
 8008b08:	2501      	movs	r5, #1
 8008b0a:	e7e2      	b.n	8008ad2 <__gethex+0x2f6>
 8008b0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b0e:	f1c3 0301 	rsb	r3, r3, #1
 8008b12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008b14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d0f0      	beq.n	8008afc <__gethex+0x320>
 8008b1a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008b1e:	f104 0314 	add.w	r3, r4, #20
 8008b22:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008b26:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008b2a:	f04f 0c00 	mov.w	ip, #0
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b34:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008b38:	d01b      	beq.n	8008b72 <__gethex+0x396>
 8008b3a:	3201      	adds	r2, #1
 8008b3c:	6002      	str	r2, [r0, #0]
 8008b3e:	2d02      	cmp	r5, #2
 8008b40:	f104 0314 	add.w	r3, r4, #20
 8008b44:	d13c      	bne.n	8008bc0 <__gethex+0x3e4>
 8008b46:	f8d8 2000 	ldr.w	r2, [r8]
 8008b4a:	3a01      	subs	r2, #1
 8008b4c:	42b2      	cmp	r2, r6
 8008b4e:	d109      	bne.n	8008b64 <__gethex+0x388>
 8008b50:	1171      	asrs	r1, r6, #5
 8008b52:	2201      	movs	r2, #1
 8008b54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008b58:	f006 061f 	and.w	r6, r6, #31
 8008b5c:	fa02 f606 	lsl.w	r6, r2, r6
 8008b60:	421e      	tst	r6, r3
 8008b62:	d13a      	bne.n	8008bda <__gethex+0x3fe>
 8008b64:	f045 0520 	orr.w	r5, r5, #32
 8008b68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b6a:	601c      	str	r4, [r3, #0]
 8008b6c:	9b02      	ldr	r3, [sp, #8]
 8008b6e:	601f      	str	r7, [r3, #0]
 8008b70:	e6b0      	b.n	80088d4 <__gethex+0xf8>
 8008b72:	4299      	cmp	r1, r3
 8008b74:	f843 cc04 	str.w	ip, [r3, #-4]
 8008b78:	d8d9      	bhi.n	8008b2e <__gethex+0x352>
 8008b7a:	68a3      	ldr	r3, [r4, #8]
 8008b7c:	459b      	cmp	fp, r3
 8008b7e:	db17      	blt.n	8008bb0 <__gethex+0x3d4>
 8008b80:	6861      	ldr	r1, [r4, #4]
 8008b82:	9801      	ldr	r0, [sp, #4]
 8008b84:	3101      	adds	r1, #1
 8008b86:	f7fe f803 	bl	8006b90 <_Balloc>
 8008b8a:	4681      	mov	r9, r0
 8008b8c:	b918      	cbnz	r0, 8008b96 <__gethex+0x3ba>
 8008b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8008bf8 <__gethex+0x41c>)
 8008b90:	4602      	mov	r2, r0
 8008b92:	2184      	movs	r1, #132	@ 0x84
 8008b94:	e6c5      	b.n	8008922 <__gethex+0x146>
 8008b96:	6922      	ldr	r2, [r4, #16]
 8008b98:	3202      	adds	r2, #2
 8008b9a:	f104 010c 	add.w	r1, r4, #12
 8008b9e:	0092      	lsls	r2, r2, #2
 8008ba0:	300c      	adds	r0, #12
 8008ba2:	f7ff fd6b 	bl	800867c <memcpy>
 8008ba6:	4621      	mov	r1, r4
 8008ba8:	9801      	ldr	r0, [sp, #4]
 8008baa:	f7fe f831 	bl	8006c10 <_Bfree>
 8008bae:	464c      	mov	r4, r9
 8008bb0:	6923      	ldr	r3, [r4, #16]
 8008bb2:	1c5a      	adds	r2, r3, #1
 8008bb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008bb8:	6122      	str	r2, [r4, #16]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	615a      	str	r2, [r3, #20]
 8008bbe:	e7be      	b.n	8008b3e <__gethex+0x362>
 8008bc0:	6922      	ldr	r2, [r4, #16]
 8008bc2:	455a      	cmp	r2, fp
 8008bc4:	dd0b      	ble.n	8008bde <__gethex+0x402>
 8008bc6:	2101      	movs	r1, #1
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f7ff fd9f 	bl	800870c <rshift>
 8008bce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008bd2:	3701      	adds	r7, #1
 8008bd4:	42bb      	cmp	r3, r7
 8008bd6:	f6ff aee0 	blt.w	800899a <__gethex+0x1be>
 8008bda:	2501      	movs	r5, #1
 8008bdc:	e7c2      	b.n	8008b64 <__gethex+0x388>
 8008bde:	f016 061f 	ands.w	r6, r6, #31
 8008be2:	d0fa      	beq.n	8008bda <__gethex+0x3fe>
 8008be4:	4453      	add	r3, sl
 8008be6:	f1c6 0620 	rsb	r6, r6, #32
 8008bea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008bee:	f7fe f8c1 	bl	8006d74 <__hi0bits>
 8008bf2:	42b0      	cmp	r0, r6
 8008bf4:	dbe7      	blt.n	8008bc6 <__gethex+0x3ea>
 8008bf6:	e7f0      	b.n	8008bda <__gethex+0x3fe>
 8008bf8:	080094d1 	.word	0x080094d1

08008bfc <L_shift>:
 8008bfc:	f1c2 0208 	rsb	r2, r2, #8
 8008c00:	0092      	lsls	r2, r2, #2
 8008c02:	b570      	push	{r4, r5, r6, lr}
 8008c04:	f1c2 0620 	rsb	r6, r2, #32
 8008c08:	6843      	ldr	r3, [r0, #4]
 8008c0a:	6804      	ldr	r4, [r0, #0]
 8008c0c:	fa03 f506 	lsl.w	r5, r3, r6
 8008c10:	432c      	orrs	r4, r5
 8008c12:	40d3      	lsrs	r3, r2
 8008c14:	6004      	str	r4, [r0, #0]
 8008c16:	f840 3f04 	str.w	r3, [r0, #4]!
 8008c1a:	4288      	cmp	r0, r1
 8008c1c:	d3f4      	bcc.n	8008c08 <L_shift+0xc>
 8008c1e:	bd70      	pop	{r4, r5, r6, pc}

08008c20 <__match>:
 8008c20:	b530      	push	{r4, r5, lr}
 8008c22:	6803      	ldr	r3, [r0, #0]
 8008c24:	3301      	adds	r3, #1
 8008c26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c2a:	b914      	cbnz	r4, 8008c32 <__match+0x12>
 8008c2c:	6003      	str	r3, [r0, #0]
 8008c2e:	2001      	movs	r0, #1
 8008c30:	bd30      	pop	{r4, r5, pc}
 8008c32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c36:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008c3a:	2d19      	cmp	r5, #25
 8008c3c:	bf98      	it	ls
 8008c3e:	3220      	addls	r2, #32
 8008c40:	42a2      	cmp	r2, r4
 8008c42:	d0f0      	beq.n	8008c26 <__match+0x6>
 8008c44:	2000      	movs	r0, #0
 8008c46:	e7f3      	b.n	8008c30 <__match+0x10>

08008c48 <__hexnan>:
 8008c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c4c:	680b      	ldr	r3, [r1, #0]
 8008c4e:	6801      	ldr	r1, [r0, #0]
 8008c50:	115e      	asrs	r6, r3, #5
 8008c52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008c56:	f013 031f 	ands.w	r3, r3, #31
 8008c5a:	b087      	sub	sp, #28
 8008c5c:	bf18      	it	ne
 8008c5e:	3604      	addne	r6, #4
 8008c60:	2500      	movs	r5, #0
 8008c62:	1f37      	subs	r7, r6, #4
 8008c64:	4682      	mov	sl, r0
 8008c66:	4690      	mov	r8, r2
 8008c68:	9301      	str	r3, [sp, #4]
 8008c6a:	f846 5c04 	str.w	r5, [r6, #-4]
 8008c6e:	46b9      	mov	r9, r7
 8008c70:	463c      	mov	r4, r7
 8008c72:	9502      	str	r5, [sp, #8]
 8008c74:	46ab      	mov	fp, r5
 8008c76:	784a      	ldrb	r2, [r1, #1]
 8008c78:	1c4b      	adds	r3, r1, #1
 8008c7a:	9303      	str	r3, [sp, #12]
 8008c7c:	b342      	cbz	r2, 8008cd0 <__hexnan+0x88>
 8008c7e:	4610      	mov	r0, r2
 8008c80:	9105      	str	r1, [sp, #20]
 8008c82:	9204      	str	r2, [sp, #16]
 8008c84:	f7ff fd94 	bl	80087b0 <__hexdig_fun>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	d151      	bne.n	8008d30 <__hexnan+0xe8>
 8008c8c:	9a04      	ldr	r2, [sp, #16]
 8008c8e:	9905      	ldr	r1, [sp, #20]
 8008c90:	2a20      	cmp	r2, #32
 8008c92:	d818      	bhi.n	8008cc6 <__hexnan+0x7e>
 8008c94:	9b02      	ldr	r3, [sp, #8]
 8008c96:	459b      	cmp	fp, r3
 8008c98:	dd13      	ble.n	8008cc2 <__hexnan+0x7a>
 8008c9a:	454c      	cmp	r4, r9
 8008c9c:	d206      	bcs.n	8008cac <__hexnan+0x64>
 8008c9e:	2d07      	cmp	r5, #7
 8008ca0:	dc04      	bgt.n	8008cac <__hexnan+0x64>
 8008ca2:	462a      	mov	r2, r5
 8008ca4:	4649      	mov	r1, r9
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	f7ff ffa8 	bl	8008bfc <L_shift>
 8008cac:	4544      	cmp	r4, r8
 8008cae:	d952      	bls.n	8008d56 <__hexnan+0x10e>
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	f1a4 0904 	sub.w	r9, r4, #4
 8008cb6:	f844 3c04 	str.w	r3, [r4, #-4]
 8008cba:	f8cd b008 	str.w	fp, [sp, #8]
 8008cbe:	464c      	mov	r4, r9
 8008cc0:	461d      	mov	r5, r3
 8008cc2:	9903      	ldr	r1, [sp, #12]
 8008cc4:	e7d7      	b.n	8008c76 <__hexnan+0x2e>
 8008cc6:	2a29      	cmp	r2, #41	@ 0x29
 8008cc8:	d157      	bne.n	8008d7a <__hexnan+0x132>
 8008cca:	3102      	adds	r1, #2
 8008ccc:	f8ca 1000 	str.w	r1, [sl]
 8008cd0:	f1bb 0f00 	cmp.w	fp, #0
 8008cd4:	d051      	beq.n	8008d7a <__hexnan+0x132>
 8008cd6:	454c      	cmp	r4, r9
 8008cd8:	d206      	bcs.n	8008ce8 <__hexnan+0xa0>
 8008cda:	2d07      	cmp	r5, #7
 8008cdc:	dc04      	bgt.n	8008ce8 <__hexnan+0xa0>
 8008cde:	462a      	mov	r2, r5
 8008ce0:	4649      	mov	r1, r9
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f7ff ff8a 	bl	8008bfc <L_shift>
 8008ce8:	4544      	cmp	r4, r8
 8008cea:	d936      	bls.n	8008d5a <__hexnan+0x112>
 8008cec:	f1a8 0204 	sub.w	r2, r8, #4
 8008cf0:	4623      	mov	r3, r4
 8008cf2:	f853 1b04 	ldr.w	r1, [r3], #4
 8008cf6:	f842 1f04 	str.w	r1, [r2, #4]!
 8008cfa:	429f      	cmp	r7, r3
 8008cfc:	d2f9      	bcs.n	8008cf2 <__hexnan+0xaa>
 8008cfe:	1b3b      	subs	r3, r7, r4
 8008d00:	f023 0303 	bic.w	r3, r3, #3
 8008d04:	3304      	adds	r3, #4
 8008d06:	3401      	adds	r4, #1
 8008d08:	3e03      	subs	r6, #3
 8008d0a:	42b4      	cmp	r4, r6
 8008d0c:	bf88      	it	hi
 8008d0e:	2304      	movhi	r3, #4
 8008d10:	4443      	add	r3, r8
 8008d12:	2200      	movs	r2, #0
 8008d14:	f843 2b04 	str.w	r2, [r3], #4
 8008d18:	429f      	cmp	r7, r3
 8008d1a:	d2fb      	bcs.n	8008d14 <__hexnan+0xcc>
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	b91b      	cbnz	r3, 8008d28 <__hexnan+0xe0>
 8008d20:	4547      	cmp	r7, r8
 8008d22:	d128      	bne.n	8008d76 <__hexnan+0x12e>
 8008d24:	2301      	movs	r3, #1
 8008d26:	603b      	str	r3, [r7, #0]
 8008d28:	2005      	movs	r0, #5
 8008d2a:	b007      	add	sp, #28
 8008d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d30:	3501      	adds	r5, #1
 8008d32:	2d08      	cmp	r5, #8
 8008d34:	f10b 0b01 	add.w	fp, fp, #1
 8008d38:	dd06      	ble.n	8008d48 <__hexnan+0x100>
 8008d3a:	4544      	cmp	r4, r8
 8008d3c:	d9c1      	bls.n	8008cc2 <__hexnan+0x7a>
 8008d3e:	2300      	movs	r3, #0
 8008d40:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d44:	2501      	movs	r5, #1
 8008d46:	3c04      	subs	r4, #4
 8008d48:	6822      	ldr	r2, [r4, #0]
 8008d4a:	f000 000f 	and.w	r0, r0, #15
 8008d4e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008d52:	6020      	str	r0, [r4, #0]
 8008d54:	e7b5      	b.n	8008cc2 <__hexnan+0x7a>
 8008d56:	2508      	movs	r5, #8
 8008d58:	e7b3      	b.n	8008cc2 <__hexnan+0x7a>
 8008d5a:	9b01      	ldr	r3, [sp, #4]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d0dd      	beq.n	8008d1c <__hexnan+0xd4>
 8008d60:	f1c3 0320 	rsb	r3, r3, #32
 8008d64:	f04f 32ff 	mov.w	r2, #4294967295
 8008d68:	40da      	lsrs	r2, r3
 8008d6a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008d6e:	4013      	ands	r3, r2
 8008d70:	f846 3c04 	str.w	r3, [r6, #-4]
 8008d74:	e7d2      	b.n	8008d1c <__hexnan+0xd4>
 8008d76:	3f04      	subs	r7, #4
 8008d78:	e7d0      	b.n	8008d1c <__hexnan+0xd4>
 8008d7a:	2004      	movs	r0, #4
 8008d7c:	e7d5      	b.n	8008d2a <__hexnan+0xe2>

08008d7e <__ascii_mbtowc>:
 8008d7e:	b082      	sub	sp, #8
 8008d80:	b901      	cbnz	r1, 8008d84 <__ascii_mbtowc+0x6>
 8008d82:	a901      	add	r1, sp, #4
 8008d84:	b142      	cbz	r2, 8008d98 <__ascii_mbtowc+0x1a>
 8008d86:	b14b      	cbz	r3, 8008d9c <__ascii_mbtowc+0x1e>
 8008d88:	7813      	ldrb	r3, [r2, #0]
 8008d8a:	600b      	str	r3, [r1, #0]
 8008d8c:	7812      	ldrb	r2, [r2, #0]
 8008d8e:	1e10      	subs	r0, r2, #0
 8008d90:	bf18      	it	ne
 8008d92:	2001      	movne	r0, #1
 8008d94:	b002      	add	sp, #8
 8008d96:	4770      	bx	lr
 8008d98:	4610      	mov	r0, r2
 8008d9a:	e7fb      	b.n	8008d94 <__ascii_mbtowc+0x16>
 8008d9c:	f06f 0001 	mvn.w	r0, #1
 8008da0:	e7f8      	b.n	8008d94 <__ascii_mbtowc+0x16>

08008da2 <_realloc_r>:
 8008da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008da6:	4680      	mov	r8, r0
 8008da8:	4615      	mov	r5, r2
 8008daa:	460c      	mov	r4, r1
 8008dac:	b921      	cbnz	r1, 8008db8 <_realloc_r+0x16>
 8008dae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008db2:	4611      	mov	r1, r2
 8008db4:	f7fd be60 	b.w	8006a78 <_malloc_r>
 8008db8:	b92a      	cbnz	r2, 8008dc6 <_realloc_r+0x24>
 8008dba:	f7fd fde9 	bl	8006990 <_free_r>
 8008dbe:	2400      	movs	r4, #0
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dc6:	f000 f840 	bl	8008e4a <_malloc_usable_size_r>
 8008dca:	4285      	cmp	r5, r0
 8008dcc:	4606      	mov	r6, r0
 8008dce:	d802      	bhi.n	8008dd6 <_realloc_r+0x34>
 8008dd0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008dd4:	d8f4      	bhi.n	8008dc0 <_realloc_r+0x1e>
 8008dd6:	4629      	mov	r1, r5
 8008dd8:	4640      	mov	r0, r8
 8008dda:	f7fd fe4d 	bl	8006a78 <_malloc_r>
 8008dde:	4607      	mov	r7, r0
 8008de0:	2800      	cmp	r0, #0
 8008de2:	d0ec      	beq.n	8008dbe <_realloc_r+0x1c>
 8008de4:	42b5      	cmp	r5, r6
 8008de6:	462a      	mov	r2, r5
 8008de8:	4621      	mov	r1, r4
 8008dea:	bf28      	it	cs
 8008dec:	4632      	movcs	r2, r6
 8008dee:	f7ff fc45 	bl	800867c <memcpy>
 8008df2:	4621      	mov	r1, r4
 8008df4:	4640      	mov	r0, r8
 8008df6:	f7fd fdcb 	bl	8006990 <_free_r>
 8008dfa:	463c      	mov	r4, r7
 8008dfc:	e7e0      	b.n	8008dc0 <_realloc_r+0x1e>

08008dfe <__ascii_wctomb>:
 8008dfe:	4603      	mov	r3, r0
 8008e00:	4608      	mov	r0, r1
 8008e02:	b141      	cbz	r1, 8008e16 <__ascii_wctomb+0x18>
 8008e04:	2aff      	cmp	r2, #255	@ 0xff
 8008e06:	d904      	bls.n	8008e12 <__ascii_wctomb+0x14>
 8008e08:	228a      	movs	r2, #138	@ 0x8a
 8008e0a:	601a      	str	r2, [r3, #0]
 8008e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e10:	4770      	bx	lr
 8008e12:	700a      	strb	r2, [r1, #0]
 8008e14:	2001      	movs	r0, #1
 8008e16:	4770      	bx	lr

08008e18 <fiprintf>:
 8008e18:	b40e      	push	{r1, r2, r3}
 8008e1a:	b503      	push	{r0, r1, lr}
 8008e1c:	4601      	mov	r1, r0
 8008e1e:	ab03      	add	r3, sp, #12
 8008e20:	4805      	ldr	r0, [pc, #20]	@ (8008e38 <fiprintf+0x20>)
 8008e22:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e26:	6800      	ldr	r0, [r0, #0]
 8008e28:	9301      	str	r3, [sp, #4]
 8008e2a:	f000 f83f 	bl	8008eac <_vfiprintf_r>
 8008e2e:	b002      	add	sp, #8
 8008e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e34:	b003      	add	sp, #12
 8008e36:	4770      	bx	lr
 8008e38:	2000001c 	.word	0x2000001c

08008e3c <abort>:
 8008e3c:	b508      	push	{r3, lr}
 8008e3e:	2006      	movs	r0, #6
 8008e40:	f000 fa08 	bl	8009254 <raise>
 8008e44:	2001      	movs	r0, #1
 8008e46:	f7f8 fdfa 	bl	8001a3e <_exit>

08008e4a <_malloc_usable_size_r>:
 8008e4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e4e:	1f18      	subs	r0, r3, #4
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	bfbc      	itt	lt
 8008e54:	580b      	ldrlt	r3, [r1, r0]
 8008e56:	18c0      	addlt	r0, r0, r3
 8008e58:	4770      	bx	lr

08008e5a <__sfputc_r>:
 8008e5a:	6893      	ldr	r3, [r2, #8]
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	b410      	push	{r4}
 8008e62:	6093      	str	r3, [r2, #8]
 8008e64:	da08      	bge.n	8008e78 <__sfputc_r+0x1e>
 8008e66:	6994      	ldr	r4, [r2, #24]
 8008e68:	42a3      	cmp	r3, r4
 8008e6a:	db01      	blt.n	8008e70 <__sfputc_r+0x16>
 8008e6c:	290a      	cmp	r1, #10
 8008e6e:	d103      	bne.n	8008e78 <__sfputc_r+0x1e>
 8008e70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e74:	f000 b932 	b.w	80090dc <__swbuf_r>
 8008e78:	6813      	ldr	r3, [r2, #0]
 8008e7a:	1c58      	adds	r0, r3, #1
 8008e7c:	6010      	str	r0, [r2, #0]
 8008e7e:	7019      	strb	r1, [r3, #0]
 8008e80:	4608      	mov	r0, r1
 8008e82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <__sfputs_r>:
 8008e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8a:	4606      	mov	r6, r0
 8008e8c:	460f      	mov	r7, r1
 8008e8e:	4614      	mov	r4, r2
 8008e90:	18d5      	adds	r5, r2, r3
 8008e92:	42ac      	cmp	r4, r5
 8008e94:	d101      	bne.n	8008e9a <__sfputs_r+0x12>
 8008e96:	2000      	movs	r0, #0
 8008e98:	e007      	b.n	8008eaa <__sfputs_r+0x22>
 8008e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e9e:	463a      	mov	r2, r7
 8008ea0:	4630      	mov	r0, r6
 8008ea2:	f7ff ffda 	bl	8008e5a <__sfputc_r>
 8008ea6:	1c43      	adds	r3, r0, #1
 8008ea8:	d1f3      	bne.n	8008e92 <__sfputs_r+0xa>
 8008eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008eac <_vfiprintf_r>:
 8008eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb0:	460d      	mov	r5, r1
 8008eb2:	b09d      	sub	sp, #116	@ 0x74
 8008eb4:	4614      	mov	r4, r2
 8008eb6:	4698      	mov	r8, r3
 8008eb8:	4606      	mov	r6, r0
 8008eba:	b118      	cbz	r0, 8008ec4 <_vfiprintf_r+0x18>
 8008ebc:	6a03      	ldr	r3, [r0, #32]
 8008ebe:	b90b      	cbnz	r3, 8008ec4 <_vfiprintf_r+0x18>
 8008ec0:	f7fc fdc4 	bl	8005a4c <__sinit>
 8008ec4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ec6:	07d9      	lsls	r1, r3, #31
 8008ec8:	d405      	bmi.n	8008ed6 <_vfiprintf_r+0x2a>
 8008eca:	89ab      	ldrh	r3, [r5, #12]
 8008ecc:	059a      	lsls	r2, r3, #22
 8008ece:	d402      	bmi.n	8008ed6 <_vfiprintf_r+0x2a>
 8008ed0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ed2:	f7fc ff06 	bl	8005ce2 <__retarget_lock_acquire_recursive>
 8008ed6:	89ab      	ldrh	r3, [r5, #12]
 8008ed8:	071b      	lsls	r3, r3, #28
 8008eda:	d501      	bpl.n	8008ee0 <_vfiprintf_r+0x34>
 8008edc:	692b      	ldr	r3, [r5, #16]
 8008ede:	b99b      	cbnz	r3, 8008f08 <_vfiprintf_r+0x5c>
 8008ee0:	4629      	mov	r1, r5
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	f000 f938 	bl	8009158 <__swsetup_r>
 8008ee8:	b170      	cbz	r0, 8008f08 <_vfiprintf_r+0x5c>
 8008eea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008eec:	07dc      	lsls	r4, r3, #31
 8008eee:	d504      	bpl.n	8008efa <_vfiprintf_r+0x4e>
 8008ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef4:	b01d      	add	sp, #116	@ 0x74
 8008ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efa:	89ab      	ldrh	r3, [r5, #12]
 8008efc:	0598      	lsls	r0, r3, #22
 8008efe:	d4f7      	bmi.n	8008ef0 <_vfiprintf_r+0x44>
 8008f00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f02:	f7fc feef 	bl	8005ce4 <__retarget_lock_release_recursive>
 8008f06:	e7f3      	b.n	8008ef0 <_vfiprintf_r+0x44>
 8008f08:	2300      	movs	r3, #0
 8008f0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f0c:	2320      	movs	r3, #32
 8008f0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f12:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f16:	2330      	movs	r3, #48	@ 0x30
 8008f18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80090c8 <_vfiprintf_r+0x21c>
 8008f1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f20:	f04f 0901 	mov.w	r9, #1
 8008f24:	4623      	mov	r3, r4
 8008f26:	469a      	mov	sl, r3
 8008f28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f2c:	b10a      	cbz	r2, 8008f32 <_vfiprintf_r+0x86>
 8008f2e:	2a25      	cmp	r2, #37	@ 0x25
 8008f30:	d1f9      	bne.n	8008f26 <_vfiprintf_r+0x7a>
 8008f32:	ebba 0b04 	subs.w	fp, sl, r4
 8008f36:	d00b      	beq.n	8008f50 <_vfiprintf_r+0xa4>
 8008f38:	465b      	mov	r3, fp
 8008f3a:	4622      	mov	r2, r4
 8008f3c:	4629      	mov	r1, r5
 8008f3e:	4630      	mov	r0, r6
 8008f40:	f7ff ffa2 	bl	8008e88 <__sfputs_r>
 8008f44:	3001      	adds	r0, #1
 8008f46:	f000 80a7 	beq.w	8009098 <_vfiprintf_r+0x1ec>
 8008f4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f4c:	445a      	add	r2, fp
 8008f4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f50:	f89a 3000 	ldrb.w	r3, [sl]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f000 809f 	beq.w	8009098 <_vfiprintf_r+0x1ec>
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f64:	f10a 0a01 	add.w	sl, sl, #1
 8008f68:	9304      	str	r3, [sp, #16]
 8008f6a:	9307      	str	r3, [sp, #28]
 8008f6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f70:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f72:	4654      	mov	r4, sl
 8008f74:	2205      	movs	r2, #5
 8008f76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f7a:	4853      	ldr	r0, [pc, #332]	@ (80090c8 <_vfiprintf_r+0x21c>)
 8008f7c:	f7f7 f950 	bl	8000220 <memchr>
 8008f80:	9a04      	ldr	r2, [sp, #16]
 8008f82:	b9d8      	cbnz	r0, 8008fbc <_vfiprintf_r+0x110>
 8008f84:	06d1      	lsls	r1, r2, #27
 8008f86:	bf44      	itt	mi
 8008f88:	2320      	movmi	r3, #32
 8008f8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f8e:	0713      	lsls	r3, r2, #28
 8008f90:	bf44      	itt	mi
 8008f92:	232b      	movmi	r3, #43	@ 0x2b
 8008f94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f98:	f89a 3000 	ldrb.w	r3, [sl]
 8008f9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f9e:	d015      	beq.n	8008fcc <_vfiprintf_r+0x120>
 8008fa0:	9a07      	ldr	r2, [sp, #28]
 8008fa2:	4654      	mov	r4, sl
 8008fa4:	2000      	movs	r0, #0
 8008fa6:	f04f 0c0a 	mov.w	ip, #10
 8008faa:	4621      	mov	r1, r4
 8008fac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fb0:	3b30      	subs	r3, #48	@ 0x30
 8008fb2:	2b09      	cmp	r3, #9
 8008fb4:	d94b      	bls.n	800904e <_vfiprintf_r+0x1a2>
 8008fb6:	b1b0      	cbz	r0, 8008fe6 <_vfiprintf_r+0x13a>
 8008fb8:	9207      	str	r2, [sp, #28]
 8008fba:	e014      	b.n	8008fe6 <_vfiprintf_r+0x13a>
 8008fbc:	eba0 0308 	sub.w	r3, r0, r8
 8008fc0:	fa09 f303 	lsl.w	r3, r9, r3
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	9304      	str	r3, [sp, #16]
 8008fc8:	46a2      	mov	sl, r4
 8008fca:	e7d2      	b.n	8008f72 <_vfiprintf_r+0xc6>
 8008fcc:	9b03      	ldr	r3, [sp, #12]
 8008fce:	1d19      	adds	r1, r3, #4
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	9103      	str	r1, [sp, #12]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	bfbb      	ittet	lt
 8008fd8:	425b      	neglt	r3, r3
 8008fda:	f042 0202 	orrlt.w	r2, r2, #2
 8008fde:	9307      	strge	r3, [sp, #28]
 8008fe0:	9307      	strlt	r3, [sp, #28]
 8008fe2:	bfb8      	it	lt
 8008fe4:	9204      	strlt	r2, [sp, #16]
 8008fe6:	7823      	ldrb	r3, [r4, #0]
 8008fe8:	2b2e      	cmp	r3, #46	@ 0x2e
 8008fea:	d10a      	bne.n	8009002 <_vfiprintf_r+0x156>
 8008fec:	7863      	ldrb	r3, [r4, #1]
 8008fee:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ff0:	d132      	bne.n	8009058 <_vfiprintf_r+0x1ac>
 8008ff2:	9b03      	ldr	r3, [sp, #12]
 8008ff4:	1d1a      	adds	r2, r3, #4
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	9203      	str	r2, [sp, #12]
 8008ffa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ffe:	3402      	adds	r4, #2
 8009000:	9305      	str	r3, [sp, #20]
 8009002:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80090d8 <_vfiprintf_r+0x22c>
 8009006:	7821      	ldrb	r1, [r4, #0]
 8009008:	2203      	movs	r2, #3
 800900a:	4650      	mov	r0, sl
 800900c:	f7f7 f908 	bl	8000220 <memchr>
 8009010:	b138      	cbz	r0, 8009022 <_vfiprintf_r+0x176>
 8009012:	9b04      	ldr	r3, [sp, #16]
 8009014:	eba0 000a 	sub.w	r0, r0, sl
 8009018:	2240      	movs	r2, #64	@ 0x40
 800901a:	4082      	lsls	r2, r0
 800901c:	4313      	orrs	r3, r2
 800901e:	3401      	adds	r4, #1
 8009020:	9304      	str	r3, [sp, #16]
 8009022:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009026:	4829      	ldr	r0, [pc, #164]	@ (80090cc <_vfiprintf_r+0x220>)
 8009028:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800902c:	2206      	movs	r2, #6
 800902e:	f7f7 f8f7 	bl	8000220 <memchr>
 8009032:	2800      	cmp	r0, #0
 8009034:	d03f      	beq.n	80090b6 <_vfiprintf_r+0x20a>
 8009036:	4b26      	ldr	r3, [pc, #152]	@ (80090d0 <_vfiprintf_r+0x224>)
 8009038:	bb1b      	cbnz	r3, 8009082 <_vfiprintf_r+0x1d6>
 800903a:	9b03      	ldr	r3, [sp, #12]
 800903c:	3307      	adds	r3, #7
 800903e:	f023 0307 	bic.w	r3, r3, #7
 8009042:	3308      	adds	r3, #8
 8009044:	9303      	str	r3, [sp, #12]
 8009046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009048:	443b      	add	r3, r7
 800904a:	9309      	str	r3, [sp, #36]	@ 0x24
 800904c:	e76a      	b.n	8008f24 <_vfiprintf_r+0x78>
 800904e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009052:	460c      	mov	r4, r1
 8009054:	2001      	movs	r0, #1
 8009056:	e7a8      	b.n	8008faa <_vfiprintf_r+0xfe>
 8009058:	2300      	movs	r3, #0
 800905a:	3401      	adds	r4, #1
 800905c:	9305      	str	r3, [sp, #20]
 800905e:	4619      	mov	r1, r3
 8009060:	f04f 0c0a 	mov.w	ip, #10
 8009064:	4620      	mov	r0, r4
 8009066:	f810 2b01 	ldrb.w	r2, [r0], #1
 800906a:	3a30      	subs	r2, #48	@ 0x30
 800906c:	2a09      	cmp	r2, #9
 800906e:	d903      	bls.n	8009078 <_vfiprintf_r+0x1cc>
 8009070:	2b00      	cmp	r3, #0
 8009072:	d0c6      	beq.n	8009002 <_vfiprintf_r+0x156>
 8009074:	9105      	str	r1, [sp, #20]
 8009076:	e7c4      	b.n	8009002 <_vfiprintf_r+0x156>
 8009078:	fb0c 2101 	mla	r1, ip, r1, r2
 800907c:	4604      	mov	r4, r0
 800907e:	2301      	movs	r3, #1
 8009080:	e7f0      	b.n	8009064 <_vfiprintf_r+0x1b8>
 8009082:	ab03      	add	r3, sp, #12
 8009084:	9300      	str	r3, [sp, #0]
 8009086:	462a      	mov	r2, r5
 8009088:	4b12      	ldr	r3, [pc, #72]	@ (80090d4 <_vfiprintf_r+0x228>)
 800908a:	a904      	add	r1, sp, #16
 800908c:	4630      	mov	r0, r6
 800908e:	f7fb fe85 	bl	8004d9c <_printf_float>
 8009092:	4607      	mov	r7, r0
 8009094:	1c78      	adds	r0, r7, #1
 8009096:	d1d6      	bne.n	8009046 <_vfiprintf_r+0x19a>
 8009098:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800909a:	07d9      	lsls	r1, r3, #31
 800909c:	d405      	bmi.n	80090aa <_vfiprintf_r+0x1fe>
 800909e:	89ab      	ldrh	r3, [r5, #12]
 80090a0:	059a      	lsls	r2, r3, #22
 80090a2:	d402      	bmi.n	80090aa <_vfiprintf_r+0x1fe>
 80090a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090a6:	f7fc fe1d 	bl	8005ce4 <__retarget_lock_release_recursive>
 80090aa:	89ab      	ldrh	r3, [r5, #12]
 80090ac:	065b      	lsls	r3, r3, #25
 80090ae:	f53f af1f 	bmi.w	8008ef0 <_vfiprintf_r+0x44>
 80090b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80090b4:	e71e      	b.n	8008ef4 <_vfiprintf_r+0x48>
 80090b6:	ab03      	add	r3, sp, #12
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	462a      	mov	r2, r5
 80090bc:	4b05      	ldr	r3, [pc, #20]	@ (80090d4 <_vfiprintf_r+0x228>)
 80090be:	a904      	add	r1, sp, #16
 80090c0:	4630      	mov	r0, r6
 80090c2:	f7fc f903 	bl	80052cc <_printf_i>
 80090c6:	e7e4      	b.n	8009092 <_vfiprintf_r+0x1e6>
 80090c8:	08009791 	.word	0x08009791
 80090cc:	0800979b 	.word	0x0800979b
 80090d0:	08004d9d 	.word	0x08004d9d
 80090d4:	08008e89 	.word	0x08008e89
 80090d8:	08009797 	.word	0x08009797

080090dc <__swbuf_r>:
 80090dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090de:	460e      	mov	r6, r1
 80090e0:	4614      	mov	r4, r2
 80090e2:	4605      	mov	r5, r0
 80090e4:	b118      	cbz	r0, 80090ee <__swbuf_r+0x12>
 80090e6:	6a03      	ldr	r3, [r0, #32]
 80090e8:	b90b      	cbnz	r3, 80090ee <__swbuf_r+0x12>
 80090ea:	f7fc fcaf 	bl	8005a4c <__sinit>
 80090ee:	69a3      	ldr	r3, [r4, #24]
 80090f0:	60a3      	str	r3, [r4, #8]
 80090f2:	89a3      	ldrh	r3, [r4, #12]
 80090f4:	071a      	lsls	r2, r3, #28
 80090f6:	d501      	bpl.n	80090fc <__swbuf_r+0x20>
 80090f8:	6923      	ldr	r3, [r4, #16]
 80090fa:	b943      	cbnz	r3, 800910e <__swbuf_r+0x32>
 80090fc:	4621      	mov	r1, r4
 80090fe:	4628      	mov	r0, r5
 8009100:	f000 f82a 	bl	8009158 <__swsetup_r>
 8009104:	b118      	cbz	r0, 800910e <__swbuf_r+0x32>
 8009106:	f04f 37ff 	mov.w	r7, #4294967295
 800910a:	4638      	mov	r0, r7
 800910c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	6922      	ldr	r2, [r4, #16]
 8009112:	1a98      	subs	r0, r3, r2
 8009114:	6963      	ldr	r3, [r4, #20]
 8009116:	b2f6      	uxtb	r6, r6
 8009118:	4283      	cmp	r3, r0
 800911a:	4637      	mov	r7, r6
 800911c:	dc05      	bgt.n	800912a <__swbuf_r+0x4e>
 800911e:	4621      	mov	r1, r4
 8009120:	4628      	mov	r0, r5
 8009122:	f7ff fa47 	bl	80085b4 <_fflush_r>
 8009126:	2800      	cmp	r0, #0
 8009128:	d1ed      	bne.n	8009106 <__swbuf_r+0x2a>
 800912a:	68a3      	ldr	r3, [r4, #8]
 800912c:	3b01      	subs	r3, #1
 800912e:	60a3      	str	r3, [r4, #8]
 8009130:	6823      	ldr	r3, [r4, #0]
 8009132:	1c5a      	adds	r2, r3, #1
 8009134:	6022      	str	r2, [r4, #0]
 8009136:	701e      	strb	r6, [r3, #0]
 8009138:	6962      	ldr	r2, [r4, #20]
 800913a:	1c43      	adds	r3, r0, #1
 800913c:	429a      	cmp	r2, r3
 800913e:	d004      	beq.n	800914a <__swbuf_r+0x6e>
 8009140:	89a3      	ldrh	r3, [r4, #12]
 8009142:	07db      	lsls	r3, r3, #31
 8009144:	d5e1      	bpl.n	800910a <__swbuf_r+0x2e>
 8009146:	2e0a      	cmp	r6, #10
 8009148:	d1df      	bne.n	800910a <__swbuf_r+0x2e>
 800914a:	4621      	mov	r1, r4
 800914c:	4628      	mov	r0, r5
 800914e:	f7ff fa31 	bl	80085b4 <_fflush_r>
 8009152:	2800      	cmp	r0, #0
 8009154:	d0d9      	beq.n	800910a <__swbuf_r+0x2e>
 8009156:	e7d6      	b.n	8009106 <__swbuf_r+0x2a>

08009158 <__swsetup_r>:
 8009158:	b538      	push	{r3, r4, r5, lr}
 800915a:	4b29      	ldr	r3, [pc, #164]	@ (8009200 <__swsetup_r+0xa8>)
 800915c:	4605      	mov	r5, r0
 800915e:	6818      	ldr	r0, [r3, #0]
 8009160:	460c      	mov	r4, r1
 8009162:	b118      	cbz	r0, 800916c <__swsetup_r+0x14>
 8009164:	6a03      	ldr	r3, [r0, #32]
 8009166:	b90b      	cbnz	r3, 800916c <__swsetup_r+0x14>
 8009168:	f7fc fc70 	bl	8005a4c <__sinit>
 800916c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009170:	0719      	lsls	r1, r3, #28
 8009172:	d422      	bmi.n	80091ba <__swsetup_r+0x62>
 8009174:	06da      	lsls	r2, r3, #27
 8009176:	d407      	bmi.n	8009188 <__swsetup_r+0x30>
 8009178:	2209      	movs	r2, #9
 800917a:	602a      	str	r2, [r5, #0]
 800917c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009180:	81a3      	strh	r3, [r4, #12]
 8009182:	f04f 30ff 	mov.w	r0, #4294967295
 8009186:	e033      	b.n	80091f0 <__swsetup_r+0x98>
 8009188:	0758      	lsls	r0, r3, #29
 800918a:	d512      	bpl.n	80091b2 <__swsetup_r+0x5a>
 800918c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800918e:	b141      	cbz	r1, 80091a2 <__swsetup_r+0x4a>
 8009190:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009194:	4299      	cmp	r1, r3
 8009196:	d002      	beq.n	800919e <__swsetup_r+0x46>
 8009198:	4628      	mov	r0, r5
 800919a:	f7fd fbf9 	bl	8006990 <_free_r>
 800919e:	2300      	movs	r3, #0
 80091a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80091a2:	89a3      	ldrh	r3, [r4, #12]
 80091a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80091a8:	81a3      	strh	r3, [r4, #12]
 80091aa:	2300      	movs	r3, #0
 80091ac:	6063      	str	r3, [r4, #4]
 80091ae:	6923      	ldr	r3, [r4, #16]
 80091b0:	6023      	str	r3, [r4, #0]
 80091b2:	89a3      	ldrh	r3, [r4, #12]
 80091b4:	f043 0308 	orr.w	r3, r3, #8
 80091b8:	81a3      	strh	r3, [r4, #12]
 80091ba:	6923      	ldr	r3, [r4, #16]
 80091bc:	b94b      	cbnz	r3, 80091d2 <__swsetup_r+0x7a>
 80091be:	89a3      	ldrh	r3, [r4, #12]
 80091c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80091c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091c8:	d003      	beq.n	80091d2 <__swsetup_r+0x7a>
 80091ca:	4621      	mov	r1, r4
 80091cc:	4628      	mov	r0, r5
 80091ce:	f000 f883 	bl	80092d8 <__smakebuf_r>
 80091d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091d6:	f013 0201 	ands.w	r2, r3, #1
 80091da:	d00a      	beq.n	80091f2 <__swsetup_r+0x9a>
 80091dc:	2200      	movs	r2, #0
 80091de:	60a2      	str	r2, [r4, #8]
 80091e0:	6962      	ldr	r2, [r4, #20]
 80091e2:	4252      	negs	r2, r2
 80091e4:	61a2      	str	r2, [r4, #24]
 80091e6:	6922      	ldr	r2, [r4, #16]
 80091e8:	b942      	cbnz	r2, 80091fc <__swsetup_r+0xa4>
 80091ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80091ee:	d1c5      	bne.n	800917c <__swsetup_r+0x24>
 80091f0:	bd38      	pop	{r3, r4, r5, pc}
 80091f2:	0799      	lsls	r1, r3, #30
 80091f4:	bf58      	it	pl
 80091f6:	6962      	ldrpl	r2, [r4, #20]
 80091f8:	60a2      	str	r2, [r4, #8]
 80091fa:	e7f4      	b.n	80091e6 <__swsetup_r+0x8e>
 80091fc:	2000      	movs	r0, #0
 80091fe:	e7f7      	b.n	80091f0 <__swsetup_r+0x98>
 8009200:	2000001c 	.word	0x2000001c

08009204 <_raise_r>:
 8009204:	291f      	cmp	r1, #31
 8009206:	b538      	push	{r3, r4, r5, lr}
 8009208:	4605      	mov	r5, r0
 800920a:	460c      	mov	r4, r1
 800920c:	d904      	bls.n	8009218 <_raise_r+0x14>
 800920e:	2316      	movs	r3, #22
 8009210:	6003      	str	r3, [r0, #0]
 8009212:	f04f 30ff 	mov.w	r0, #4294967295
 8009216:	bd38      	pop	{r3, r4, r5, pc}
 8009218:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800921a:	b112      	cbz	r2, 8009222 <_raise_r+0x1e>
 800921c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009220:	b94b      	cbnz	r3, 8009236 <_raise_r+0x32>
 8009222:	4628      	mov	r0, r5
 8009224:	f000 f830 	bl	8009288 <_getpid_r>
 8009228:	4622      	mov	r2, r4
 800922a:	4601      	mov	r1, r0
 800922c:	4628      	mov	r0, r5
 800922e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009232:	f000 b817 	b.w	8009264 <_kill_r>
 8009236:	2b01      	cmp	r3, #1
 8009238:	d00a      	beq.n	8009250 <_raise_r+0x4c>
 800923a:	1c59      	adds	r1, r3, #1
 800923c:	d103      	bne.n	8009246 <_raise_r+0x42>
 800923e:	2316      	movs	r3, #22
 8009240:	6003      	str	r3, [r0, #0]
 8009242:	2001      	movs	r0, #1
 8009244:	e7e7      	b.n	8009216 <_raise_r+0x12>
 8009246:	2100      	movs	r1, #0
 8009248:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800924c:	4620      	mov	r0, r4
 800924e:	4798      	blx	r3
 8009250:	2000      	movs	r0, #0
 8009252:	e7e0      	b.n	8009216 <_raise_r+0x12>

08009254 <raise>:
 8009254:	4b02      	ldr	r3, [pc, #8]	@ (8009260 <raise+0xc>)
 8009256:	4601      	mov	r1, r0
 8009258:	6818      	ldr	r0, [r3, #0]
 800925a:	f7ff bfd3 	b.w	8009204 <_raise_r>
 800925e:	bf00      	nop
 8009260:	2000001c 	.word	0x2000001c

08009264 <_kill_r>:
 8009264:	b538      	push	{r3, r4, r5, lr}
 8009266:	4d07      	ldr	r5, [pc, #28]	@ (8009284 <_kill_r+0x20>)
 8009268:	2300      	movs	r3, #0
 800926a:	4604      	mov	r4, r0
 800926c:	4608      	mov	r0, r1
 800926e:	4611      	mov	r1, r2
 8009270:	602b      	str	r3, [r5, #0]
 8009272:	f7f8 fbd4 	bl	8001a1e <_kill>
 8009276:	1c43      	adds	r3, r0, #1
 8009278:	d102      	bne.n	8009280 <_kill_r+0x1c>
 800927a:	682b      	ldr	r3, [r5, #0]
 800927c:	b103      	cbz	r3, 8009280 <_kill_r+0x1c>
 800927e:	6023      	str	r3, [r4, #0]
 8009280:	bd38      	pop	{r3, r4, r5, pc}
 8009282:	bf00      	nop
 8009284:	20000540 	.word	0x20000540

08009288 <_getpid_r>:
 8009288:	f7f8 bbc1 	b.w	8001a0e <_getpid>

0800928c <__swhatbuf_r>:
 800928c:	b570      	push	{r4, r5, r6, lr}
 800928e:	460c      	mov	r4, r1
 8009290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009294:	2900      	cmp	r1, #0
 8009296:	b096      	sub	sp, #88	@ 0x58
 8009298:	4615      	mov	r5, r2
 800929a:	461e      	mov	r6, r3
 800929c:	da0d      	bge.n	80092ba <__swhatbuf_r+0x2e>
 800929e:	89a3      	ldrh	r3, [r4, #12]
 80092a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80092a4:	f04f 0100 	mov.w	r1, #0
 80092a8:	bf14      	ite	ne
 80092aa:	2340      	movne	r3, #64	@ 0x40
 80092ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80092b0:	2000      	movs	r0, #0
 80092b2:	6031      	str	r1, [r6, #0]
 80092b4:	602b      	str	r3, [r5, #0]
 80092b6:	b016      	add	sp, #88	@ 0x58
 80092b8:	bd70      	pop	{r4, r5, r6, pc}
 80092ba:	466a      	mov	r2, sp
 80092bc:	f000 f848 	bl	8009350 <_fstat_r>
 80092c0:	2800      	cmp	r0, #0
 80092c2:	dbec      	blt.n	800929e <__swhatbuf_r+0x12>
 80092c4:	9901      	ldr	r1, [sp, #4]
 80092c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80092ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80092ce:	4259      	negs	r1, r3
 80092d0:	4159      	adcs	r1, r3
 80092d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092d6:	e7eb      	b.n	80092b0 <__swhatbuf_r+0x24>

080092d8 <__smakebuf_r>:
 80092d8:	898b      	ldrh	r3, [r1, #12]
 80092da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092dc:	079d      	lsls	r5, r3, #30
 80092de:	4606      	mov	r6, r0
 80092e0:	460c      	mov	r4, r1
 80092e2:	d507      	bpl.n	80092f4 <__smakebuf_r+0x1c>
 80092e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80092e8:	6023      	str	r3, [r4, #0]
 80092ea:	6123      	str	r3, [r4, #16]
 80092ec:	2301      	movs	r3, #1
 80092ee:	6163      	str	r3, [r4, #20]
 80092f0:	b003      	add	sp, #12
 80092f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092f4:	ab01      	add	r3, sp, #4
 80092f6:	466a      	mov	r2, sp
 80092f8:	f7ff ffc8 	bl	800928c <__swhatbuf_r>
 80092fc:	9f00      	ldr	r7, [sp, #0]
 80092fe:	4605      	mov	r5, r0
 8009300:	4639      	mov	r1, r7
 8009302:	4630      	mov	r0, r6
 8009304:	f7fd fbb8 	bl	8006a78 <_malloc_r>
 8009308:	b948      	cbnz	r0, 800931e <__smakebuf_r+0x46>
 800930a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800930e:	059a      	lsls	r2, r3, #22
 8009310:	d4ee      	bmi.n	80092f0 <__smakebuf_r+0x18>
 8009312:	f023 0303 	bic.w	r3, r3, #3
 8009316:	f043 0302 	orr.w	r3, r3, #2
 800931a:	81a3      	strh	r3, [r4, #12]
 800931c:	e7e2      	b.n	80092e4 <__smakebuf_r+0xc>
 800931e:	89a3      	ldrh	r3, [r4, #12]
 8009320:	6020      	str	r0, [r4, #0]
 8009322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009326:	81a3      	strh	r3, [r4, #12]
 8009328:	9b01      	ldr	r3, [sp, #4]
 800932a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800932e:	b15b      	cbz	r3, 8009348 <__smakebuf_r+0x70>
 8009330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009334:	4630      	mov	r0, r6
 8009336:	f000 f81d 	bl	8009374 <_isatty_r>
 800933a:	b128      	cbz	r0, 8009348 <__smakebuf_r+0x70>
 800933c:	89a3      	ldrh	r3, [r4, #12]
 800933e:	f023 0303 	bic.w	r3, r3, #3
 8009342:	f043 0301 	orr.w	r3, r3, #1
 8009346:	81a3      	strh	r3, [r4, #12]
 8009348:	89a3      	ldrh	r3, [r4, #12]
 800934a:	431d      	orrs	r5, r3
 800934c:	81a5      	strh	r5, [r4, #12]
 800934e:	e7cf      	b.n	80092f0 <__smakebuf_r+0x18>

08009350 <_fstat_r>:
 8009350:	b538      	push	{r3, r4, r5, lr}
 8009352:	4d07      	ldr	r5, [pc, #28]	@ (8009370 <_fstat_r+0x20>)
 8009354:	2300      	movs	r3, #0
 8009356:	4604      	mov	r4, r0
 8009358:	4608      	mov	r0, r1
 800935a:	4611      	mov	r1, r2
 800935c:	602b      	str	r3, [r5, #0]
 800935e:	f7f8 fbbe 	bl	8001ade <_fstat>
 8009362:	1c43      	adds	r3, r0, #1
 8009364:	d102      	bne.n	800936c <_fstat_r+0x1c>
 8009366:	682b      	ldr	r3, [r5, #0]
 8009368:	b103      	cbz	r3, 800936c <_fstat_r+0x1c>
 800936a:	6023      	str	r3, [r4, #0]
 800936c:	bd38      	pop	{r3, r4, r5, pc}
 800936e:	bf00      	nop
 8009370:	20000540 	.word	0x20000540

08009374 <_isatty_r>:
 8009374:	b538      	push	{r3, r4, r5, lr}
 8009376:	4d06      	ldr	r5, [pc, #24]	@ (8009390 <_isatty_r+0x1c>)
 8009378:	2300      	movs	r3, #0
 800937a:	4604      	mov	r4, r0
 800937c:	4608      	mov	r0, r1
 800937e:	602b      	str	r3, [r5, #0]
 8009380:	f7f8 fbbd 	bl	8001afe <_isatty>
 8009384:	1c43      	adds	r3, r0, #1
 8009386:	d102      	bne.n	800938e <_isatty_r+0x1a>
 8009388:	682b      	ldr	r3, [r5, #0]
 800938a:	b103      	cbz	r3, 800938e <_isatty_r+0x1a>
 800938c:	6023      	str	r3, [r4, #0]
 800938e:	bd38      	pop	{r3, r4, r5, pc}
 8009390:	20000540 	.word	0x20000540

08009394 <_init>:
 8009394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009396:	bf00      	nop
 8009398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800939a:	bc08      	pop	{r3}
 800939c:	469e      	mov	lr, r3
 800939e:	4770      	bx	lr

080093a0 <_fini>:
 80093a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a2:	bf00      	nop
 80093a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093a6:	bc08      	pop	{r3}
 80093a8:	469e      	mov	lr, r3
 80093aa:	4770      	bx	lr
