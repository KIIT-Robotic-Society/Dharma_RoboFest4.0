
can_demo1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003be8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08003db8  08003db8  00004db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e0c  08003e0c  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e0c  08003e0c  00004e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e14  08003e14  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e14  08003e14  00004e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e18  08003e18  00004e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003e1c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  2000005c  08003e78  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08003e78  00005280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5a1  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b62  00000000  00000000  0000f62d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  00011190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000067f  00000000  00000000  00011a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d20  00000000  00000000  00012097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af12  00000000  00000000  00032db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c944d  00000000  00000000  0003dcc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00107116  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002744  00000000  00000000  0010715c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001098a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003da0 	.word	0x08003da0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08003da0 	.word	0x08003da0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t TxData[8];
uint8_t RxData[8];

uint8_t count=0;

__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan ){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	@ 0x28
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	 HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &Rxheader, RxData);
 80005a8:	4b17      	ldr	r3, [pc, #92]	@ (8000608 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80005aa:	4a18      	ldr	r2, [pc, #96]	@ (800060c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80005ac:	2100      	movs	r1, #0
 80005ae:	4818      	ldr	r0, [pc, #96]	@ (8000610 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80005b0:	f000 feda 	bl	8001368 <HAL_CAN_GetRxMessage>

	    // Create a buffer to hold the formatted hex string
	    char hexBuffer[24];  // Adjust the size as needed

	    // Format the received data into a hex string
	    int len = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	627b      	str	r3, [r7, #36]	@ 0x24
	    for (int i = 0; i < Rxheader.DLC; i++) {
 80005b8:	2300      	movs	r3, #0
 80005ba:	623b      	str	r3, [r7, #32]
 80005bc:	e012      	b.n	80005e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
	        len += sprintf(&hexBuffer[len], "%02X ", RxData[i]);
 80005be:	f107 0208 	add.w	r2, r7, #8
 80005c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005c4:	18d0      	adds	r0, r2, r3
 80005c6:	4a10      	ldr	r2, [pc, #64]	@ (8000608 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80005c8:	6a3b      	ldr	r3, [r7, #32]
 80005ca:	4413      	add	r3, r2
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	461a      	mov	r2, r3
 80005d0:	4910      	ldr	r1, [pc, #64]	@ (8000614 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80005d2:	f002 ff45 	bl	8003460 <siprintf>
 80005d6:	4602      	mov	r2, r0
 80005d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005da:	4413      	add	r3, r2
 80005dc:	627b      	str	r3, [r7, #36]	@ 0x24
	    for (int i = 0; i < Rxheader.DLC; i++) {
 80005de:	6a3b      	ldr	r3, [r7, #32]
 80005e0:	3301      	adds	r3, #1
 80005e2:	623b      	str	r3, [r7, #32]
 80005e4:	4b09      	ldr	r3, [pc, #36]	@ (800060c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80005e6:	691a      	ldr	r2, [r3, #16]
 80005e8:	6a3b      	ldr	r3, [r7, #32]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d8e7      	bhi.n	80005be <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	    }

	    // Now transmit the hex string over UART
	    HAL_UART_Transmit(&huart2, (uint8_t*)hexBuffer, len, HAL_MAX_DELAY);
 80005ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	f107 0108 	add.w	r1, r7, #8
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	4807      	ldr	r0, [pc, #28]	@ (8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80005fc:	f002 fb74 	bl	8002ce8 <HAL_UART_Transmit>
}
 8000600:	bf00      	nop
 8000602:	3728      	adds	r7, #40	@ 0x28
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000128 	.word	0x20000128
 800060c:	20000100 	.word	0x20000100
 8000610:	20000078 	.word	0x20000078
 8000614:	08003db8 	.word	0x08003db8
 8000618:	200000a0 	.word	0x200000a0

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fb1c 	bl	8000c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f838 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f926 	bl	8000878 <MX_GPIO_Init>
  MX_CAN1_Init();
 800062c:	f000 f8a6 	bl	800077c <MX_CAN1_Init>
  MX_USART2_UART_Init();
 8000630:	f000 f8f8 	bl	8000824 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000634:	4814      	ldr	r0, [pc, #80]	@ (8000688 <main+0x6c>)
 8000636:	f000 fd83 	bl	8001140 <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING);
 800063a:	2102      	movs	r1, #2
 800063c:	4812      	ldr	r0, [pc, #72]	@ (8000688 <main+0x6c>)
 800063e:	f000 ffb5 	bl	80015ac <HAL_CAN_ActivateNotification>

  Txheader.DLC=1;
 8000642:	4b12      	ldr	r3, [pc, #72]	@ (800068c <main+0x70>)
 8000644:	2201      	movs	r2, #1
 8000646:	611a      	str	r2, [r3, #16]
  Txheader.ExtId=0;
 8000648:	4b10      	ldr	r3, [pc, #64]	@ (800068c <main+0x70>)
 800064a:	2200      	movs	r2, #0
 800064c:	605a      	str	r2, [r3, #4]
  Txheader.IDE=CAN_ID_STD;
 800064e:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <main+0x70>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  Txheader.RTR=CAN_RTR_DATA;
 8000654:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <main+0x70>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  Txheader.StdId=0x102;
 800065a:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <main+0x70>)
 800065c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8000660:	601a      	str	r2, [r3, #0]
  Txheader.TransmitGlobalTime=DISABLE;
 8000662:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <main+0x70>)
 8000664:	2200      	movs	r2, #0
 8000666:	751a      	strb	r2, [r3, #20]

  TxData[0]=0xf3;
 8000668:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <main+0x74>)
 800066a:	22f3      	movs	r2, #243	@ 0xf3
 800066c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //HAL_UART_Transmit(&huart2, &count, 1, HAL_MAX_DELAY);
	  HAL_CAN_AddTxMessage(&hcan1,&Txheader,TxData,&TxMailbox);
 800066e:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <main+0x78>)
 8000670:	4a07      	ldr	r2, [pc, #28]	@ (8000690 <main+0x74>)
 8000672:	4906      	ldr	r1, [pc, #24]	@ (800068c <main+0x70>)
 8000674:	4804      	ldr	r0, [pc, #16]	@ (8000688 <main+0x6c>)
 8000676:	f000 fda7 	bl	80011c8 <HAL_CAN_AddTxMessage>
	  HAL_Delay(500);
 800067a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800067e:	f000 fb5f 	bl	8000d40 <HAL_Delay>
	  HAL_CAN_AddTxMessage(&hcan1,&Txheader,TxData,&TxMailbox);
 8000682:	bf00      	nop
 8000684:	e7f3      	b.n	800066e <main+0x52>
 8000686:	bf00      	nop
 8000688:	20000078 	.word	0x20000078
 800068c:	200000e8 	.word	0x200000e8
 8000690:	20000120 	.word	0x20000120
 8000694:	2000011c 	.word	0x2000011c

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	@ 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	2234      	movs	r2, #52	@ 0x34
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 fefa 	bl	80034a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 0308 	add.w	r3, r7, #8
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b2c      	ldr	r3, [pc, #176]	@ (8000774 <SystemClock_Config+0xdc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c4:	4a2b      	ldr	r2, [pc, #172]	@ (8000774 <SystemClock_Config+0xdc>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80006cc:	4b29      	ldr	r3, [pc, #164]	@ (8000774 <SystemClock_Config+0xdc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	4b26      	ldr	r3, [pc, #152]	@ (8000778 <SystemClock_Config+0xe0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a25      	ldr	r2, [pc, #148]	@ (8000778 <SystemClock_Config+0xe0>)
 80006e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b23      	ldr	r3, [pc, #140]	@ (8000778 <SystemClock_Config+0xe0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000708:	2308      	movs	r3, #8
 800070a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800070c:	23b4      	movs	r3, #180	@ 0xb4
 800070e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000714:	2302      	movs	r3, #2
 8000716:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000718:	2302      	movs	r3, #2
 800071a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4618      	mov	r0, r3
 8000722:	f001 fff3 	bl	800270c <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800072c:	f000 f912 	bl	8000954 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000730:	f001 fc52 	bl	8001fd8 <HAL_PWREx_EnableOverDrive>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800073a:	f000 f90b 	bl	8000954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073e:	230f      	movs	r3, #15
 8000740:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000742:	2302      	movs	r3, #2
 8000744:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800074a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800074e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000750:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000754:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000756:	f107 0308 	add.w	r3, r7, #8
 800075a:	2105      	movs	r1, #5
 800075c:	4618      	mov	r0, r3
 800075e:	f001 fc8b 	bl	8002078 <HAL_RCC_ClockConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000768:	f000 f8f4 	bl	8000954 <Error_Handler>
  }
}
 800076c:	bf00      	nop
 800076e:	3750      	adds	r7, #80	@ 0x50
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	@ 0x28
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000782:	4b26      	ldr	r3, [pc, #152]	@ (800081c <MX_CAN1_Init+0xa0>)
 8000784:	4a26      	ldr	r2, [pc, #152]	@ (8000820 <MX_CAN1_Init+0xa4>)
 8000786:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8000788:	4b24      	ldr	r3, [pc, #144]	@ (800081c <MX_CAN1_Init+0xa0>)
 800078a:	2212      	movs	r2, #18
 800078c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 800078e:	4b23      	ldr	r3, [pc, #140]	@ (800081c <MX_CAN1_Init+0xa0>)
 8000790:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000794:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000796:	4b21      	ldr	r3, [pc, #132]	@ (800081c <MX_CAN1_Init+0xa0>)
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 800079c:	4b1f      	ldr	r3, [pc, #124]	@ (800081c <MX_CAN1_Init+0xa0>)
 800079e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80007a2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007a4:	4b1d      	ldr	r3, [pc, #116]	@ (800081c <MX_CAN1_Init+0xa0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007aa:	4b1c      	ldr	r3, [pc, #112]	@ (800081c <MX_CAN1_Init+0xa0>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007b0:	4b1a      	ldr	r3, [pc, #104]	@ (800081c <MX_CAN1_Init+0xa0>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007b6:	4b19      	ldr	r3, [pc, #100]	@ (800081c <MX_CAN1_Init+0xa0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007bc:	4b17      	ldr	r3, [pc, #92]	@ (800081c <MX_CAN1_Init+0xa0>)
 80007be:	2200      	movs	r2, #0
 80007c0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007c2:	4b16      	ldr	r3, [pc, #88]	@ (800081c <MX_CAN1_Init+0xa0>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007c8:	4b14      	ldr	r3, [pc, #80]	@ (800081c <MX_CAN1_Init+0xa0>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007ce:	4813      	ldr	r0, [pc, #76]	@ (800081c <MX_CAN1_Init+0xa0>)
 80007d0:	f000 fada 	bl	8000d88 <HAL_CAN_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80007da:	f000 f8bb 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation=CAN_FILTER_ENABLE;
 80007de:	2301      	movs	r3, #1
 80007e0:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank=10;
 80007e2:	230a      	movs	r3, #10
 80007e4:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment=CAN_RX_FIFO0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh=0x103<<5;
 80007ea:	f242 0360 	movw	r3, #8288	@ 0x2060
 80007ee:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow=0x0000;
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh=0x103<<5;
 80007f4:	f242 0360 	movw	r3, #8288	@ 0x2060
 80007f8:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow=0x0000;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode=CAN_FILTERMODE_IDMASK;
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8000802:	2301      	movs	r3, #1
 8000804:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank=0;
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1,&canfilterconfig);
 800080a:	463b      	mov	r3, r7
 800080c:	4619      	mov	r1, r3
 800080e:	4803      	ldr	r0, [pc, #12]	@ (800081c <MX_CAN1_Init+0xa0>)
 8000810:	f000 fbb6 	bl	8000f80 <HAL_CAN_ConfigFilter>


  /* USER CODE END CAN1_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	3728      	adds	r7, #40	@ 0x28
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000078 	.word	0x20000078
 8000820:	40006400 	.word	0x40006400

08000824 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000828:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <MX_USART2_UART_Init+0x4c>)
 800082a:	4a12      	ldr	r2, [pc, #72]	@ (8000874 <MX_USART2_UART_Init+0x50>)
 800082c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800082e:	4b10      	ldr	r3, [pc, #64]	@ (8000870 <MX_USART2_UART_Init+0x4c>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <MX_USART2_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <MX_USART2_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <MX_USART2_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <MX_USART2_UART_Init+0x4c>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <MX_USART2_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <MX_USART2_UART_Init+0x4c>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	@ (8000870 <MX_USART2_UART_Init+0x4c>)
 800085c:	f002 f9f4 	bl	8002c48 <HAL_UART_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000866:	f000 f875 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200000a0 	.word	0x200000a0
 8000874:	40004400 	.word	0x40004400

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	@ 0x28
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	4b2d      	ldr	r3, [pc, #180]	@ (8000948 <MX_GPIO_Init+0xd0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a2c      	ldr	r2, [pc, #176]	@ (8000948 <MX_GPIO_Init+0xd0>)
 8000898:	f043 0304 	orr.w	r3, r3, #4
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b2a      	ldr	r3, [pc, #168]	@ (8000948 <MX_GPIO_Init+0xd0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	4b26      	ldr	r3, [pc, #152]	@ (8000948 <MX_GPIO_Init+0xd0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a25      	ldr	r2, [pc, #148]	@ (8000948 <MX_GPIO_Init+0xd0>)
 80008b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b23      	ldr	r3, [pc, #140]	@ (8000948 <MX_GPIO_Init+0xd0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000948 <MX_GPIO_Init+0xd0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a1e      	ldr	r2, [pc, #120]	@ (8000948 <MX_GPIO_Init+0xd0>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000948 <MX_GPIO_Init+0xd0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <MX_GPIO_Init+0xd0>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a17      	ldr	r2, [pc, #92]	@ (8000948 <MX_GPIO_Init+0xd0>)
 80008ec:	f043 0302 	orr.w	r3, r3, #2
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b15      	ldr	r3, [pc, #84]	@ (8000948 <MX_GPIO_Init+0xd0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2120      	movs	r1, #32
 8000902:	4812      	ldr	r0, [pc, #72]	@ (800094c <MX_GPIO_Init+0xd4>)
 8000904:	f001 fb4e 	bl	8001fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000908:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800090c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800090e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	480c      	ldr	r0, [pc, #48]	@ (8000950 <MX_GPIO_Init+0xd8>)
 8000920:	f001 f9ac 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000924:	2320      	movs	r3, #32
 8000926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4619      	mov	r1, r3
 800093a:	4804      	ldr	r0, [pc, #16]	@ (800094c <MX_GPIO_Init+0xd4>)
 800093c:	f001 f99e 	bl	8001c7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000940:	bf00      	nop
 8000942:	3728      	adds	r7, #40	@ 0x28
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40023800 	.word	0x40023800
 800094c:	40020000 	.word	0x40020000
 8000950:	40020800 	.word	0x40020800

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <Error_Handler+0x8>

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b10      	ldr	r3, [pc, #64]	@ (80009ac <HAL_MspInit+0x4c>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800096e:	4a0f      	ldr	r2, [pc, #60]	@ (80009ac <HAL_MspInit+0x4c>)
 8000970:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000974:	6453      	str	r3, [r2, #68]	@ 0x44
 8000976:	4b0d      	ldr	r3, [pc, #52]	@ (80009ac <HAL_MspInit+0x4c>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <HAL_MspInit+0x4c>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098a:	4a08      	ldr	r2, [pc, #32]	@ (80009ac <HAL_MspInit+0x4c>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000990:	6413      	str	r3, [r2, #64]	@ 0x40
 8000992:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <HAL_MspInit+0x4c>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800099e:	2007      	movs	r0, #7
 80009a0:	f001 f92a 	bl	8001bf8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40023800 	.word	0x40023800

080009b0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	@ 0x28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a21      	ldr	r2, [pc, #132]	@ (8000a54 <HAL_CAN_MspInit+0xa4>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d13c      	bne.n	8000a4c <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	4b20      	ldr	r3, [pc, #128]	@ (8000a58 <HAL_CAN_MspInit+0xa8>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009da:	4a1f      	ldr	r2, [pc, #124]	@ (8000a58 <HAL_CAN_MspInit+0xa8>)
 80009dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <HAL_CAN_MspInit+0xa8>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b19      	ldr	r3, [pc, #100]	@ (8000a58 <HAL_CAN_MspInit+0xa8>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a18      	ldr	r2, [pc, #96]	@ (8000a58 <HAL_CAN_MspInit+0xa8>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <HAL_CAN_MspInit+0xa8>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a0a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a1c:	2309      	movs	r3, #9
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	480d      	ldr	r0, [pc, #52]	@ (8000a5c <HAL_CAN_MspInit+0xac>)
 8000a28:	f001 f928 	bl	8001c7c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2014      	movs	r0, #20
 8000a32:	f001 f8ec 	bl	8001c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000a36:	2014      	movs	r0, #20
 8000a38:	f001 f905 	bl	8001c46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2100      	movs	r1, #0
 8000a40:	2015      	movs	r0, #21
 8000a42:	f001 f8e4 	bl	8001c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000a46:	2015      	movs	r0, #21
 8000a48:	f001 f8fd 	bl	8001c46 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000a4c:	bf00      	nop
 8000a4e:	3728      	adds	r7, #40	@ 0x28
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40006400 	.word	0x40006400
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020000 	.word	0x40020000

08000a60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	@ 0x28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a19      	ldr	r2, [pc, #100]	@ (8000ae4 <HAL_UART_MspInit+0x84>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d12b      	bne.n	8000ada <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	4b18      	ldr	r3, [pc, #96]	@ (8000ae8 <HAL_UART_MspInit+0x88>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8a:	4a17      	ldr	r2, [pc, #92]	@ (8000ae8 <HAL_UART_MspInit+0x88>)
 8000a8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a92:	4b15      	ldr	r3, [pc, #84]	@ (8000ae8 <HAL_UART_MspInit+0x88>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <HAL_UART_MspInit+0x88>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	4a10      	ldr	r2, [pc, #64]	@ (8000ae8 <HAL_UART_MspInit+0x88>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <HAL_UART_MspInit+0x88>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aba:	230c      	movs	r3, #12
 8000abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aca:	2307      	movs	r3, #7
 8000acc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4805      	ldr	r0, [pc, #20]	@ (8000aec <HAL_UART_MspInit+0x8c>)
 8000ad6:	f001 f8d1 	bl	8001c7c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ada:	bf00      	nop
 8000adc:	3728      	adds	r7, #40	@ 0x28
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40004400 	.word	0x40004400
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020000 	.word	0x40020000

08000af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <NMI_Handler+0x4>

08000af8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <MemManage_Handler+0x4>

08000b08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b46:	f000 f8db 	bl	8000d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b54:	4802      	ldr	r0, [pc, #8]	@ (8000b60 <CAN1_RX0_IRQHandler+0x10>)
 8000b56:	f000 fd4f 	bl	80015f8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000078 	.word	0x20000078

08000b64 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b68:	4802      	ldr	r0, [pc, #8]	@ (8000b74 <CAN1_RX1_IRQHandler+0x10>)
 8000b6a:	f000 fd45 	bl	80015f8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000078 	.word	0x20000078

08000b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b80:	4a14      	ldr	r2, [pc, #80]	@ (8000bd4 <_sbrk+0x5c>)
 8000b82:	4b15      	ldr	r3, [pc, #84]	@ (8000bd8 <_sbrk+0x60>)
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b8c:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d102      	bne.n	8000b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b94:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <_sbrk+0x64>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	@ (8000be0 <_sbrk+0x68>)
 8000b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9a:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <_sbrk+0x64>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d207      	bcs.n	8000bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba8:	f002 fc82 	bl	80034b0 <__errno>
 8000bac:	4603      	mov	r3, r0
 8000bae:	220c      	movs	r2, #12
 8000bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb6:	e009      	b.n	8000bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb8:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <_sbrk+0x64>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bbe:	4b07      	ldr	r3, [pc, #28]	@ (8000bdc <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	4a05      	ldr	r2, [pc, #20]	@ (8000bdc <_sbrk+0x64>)
 8000bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bca:	68fb      	ldr	r3, [r7, #12]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20020000 	.word	0x20020000
 8000bd8:	00000400 	.word	0x00000400
 8000bdc:	20000130 	.word	0x20000130
 8000be0:	20000280 	.word	0x20000280

08000be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be8:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <SystemInit+0x20>)
 8000bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bee:	4a05      	ldr	r2, [pc, #20]	@ (8000c04 <SystemInit+0x20>)
 8000bf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c40 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c0c:	f7ff ffea 	bl	8000be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c10:	480c      	ldr	r0, [pc, #48]	@ (8000c44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c12:	490d      	ldr	r1, [pc, #52]	@ (8000c48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c14:	4a0d      	ldr	r2, [pc, #52]	@ (8000c4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c28:	4c0a      	ldr	r4, [pc, #40]	@ (8000c54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c36:	f002 fc41 	bl	80034bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c3a:	f7ff fcef 	bl	800061c <main>
  bx  lr    
 8000c3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c48:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c4c:	08003e1c 	.word	0x08003e1c
  ldr r2, =_sbss
 8000c50:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c54:	20000280 	.word	0x20000280

08000c58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC_IRQHandler>
	...

08000c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c60:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0d      	ldr	r2, [pc, #52]	@ (8000c9c <HAL_Init+0x40>)
 8000c66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c9c <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <HAL_Init+0x40>)
 8000c72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c78:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a07      	ldr	r2, [pc, #28]	@ (8000c9c <HAL_Init+0x40>)
 8000c7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c84:	2003      	movs	r0, #3
 8000c86:	f000 ffb7 	bl	8001bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f000 f808 	bl	8000ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c90:	f7ff fe66 	bl	8000960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023c00 	.word	0x40023c00

08000ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca8:	4b12      	ldr	r3, [pc, #72]	@ (8000cf4 <HAL_InitTick+0x54>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b12      	ldr	r3, [pc, #72]	@ (8000cf8 <HAL_InitTick+0x58>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 ffcf 	bl	8001c62 <HAL_SYSTICK_Config>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00e      	b.n	8000cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b0f      	cmp	r3, #15
 8000cd2:	d80a      	bhi.n	8000cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f000 ff97 	bl	8001c0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce0:	4a06      	ldr	r2, [pc, #24]	@ (8000cfc <HAL_InitTick+0x5c>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e000      	b.n	8000cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000004 	.word	0x20000004

08000d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <HAL_IncTick+0x20>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <HAL_IncTick+0x24>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a04      	ldr	r2, [pc, #16]	@ (8000d24 <HAL_IncTick+0x24>)
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000008 	.word	0x20000008
 8000d24:	20000134 	.word	0x20000134

08000d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	@ (8000d3c <HAL_GetTick+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000134 	.word	0x20000134

08000d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d48:	f7ff ffee 	bl	8000d28 <HAL_GetTick>
 8000d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d58:	d005      	beq.n	8000d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d84 <HAL_Delay+0x44>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4413      	add	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d66:	bf00      	nop
 8000d68:	f7ff ffde 	bl	8000d28 <HAL_GetTick>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d8f7      	bhi.n	8000d68 <HAL_Delay+0x28>
  {
  }
}
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000008 	.word	0x20000008

08000d88 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d101      	bne.n	8000d9a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e0ed      	b.n	8000f76 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d102      	bne.n	8000dac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff fe02 	bl	80009b0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f042 0201 	orr.w	r2, r2, #1
 8000dba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dbc:	f7ff ffb4 	bl	8000d28 <HAL_GetTick>
 8000dc0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dc2:	e012      	b.n	8000dea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dc4:	f7ff ffb0 	bl	8000d28 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b0a      	cmp	r3, #10
 8000dd0:	d90b      	bls.n	8000dea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dd6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2205      	movs	r2, #5
 8000de2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e0c5      	b.n	8000f76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d0e5      	beq.n	8000dc4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f022 0202 	bic.w	r2, r2, #2
 8000e06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e08:	f7ff ff8e 	bl	8000d28 <HAL_GetTick>
 8000e0c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e0e:	e012      	b.n	8000e36 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e10:	f7ff ff8a 	bl	8000d28 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b0a      	cmp	r3, #10
 8000e1c:	d90b      	bls.n	8000e36 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e22:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2205      	movs	r2, #5
 8000e2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e09f      	b.n	8000f76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1e5      	bne.n	8000e10 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	7e1b      	ldrb	r3, [r3, #24]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d108      	bne.n	8000e5e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	e007      	b.n	8000e6e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	7e5b      	ldrb	r3, [r3, #25]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d108      	bne.n	8000e88 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	e007      	b.n	8000e98 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000e96:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	7e9b      	ldrb	r3, [r3, #26]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d108      	bne.n	8000eb2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f042 0220 	orr.w	r2, r2, #32
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	e007      	b.n	8000ec2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f022 0220 	bic.w	r2, r2, #32
 8000ec0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	7edb      	ldrb	r3, [r3, #27]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d108      	bne.n	8000edc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f022 0210 	bic.w	r2, r2, #16
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	e007      	b.n	8000eec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f042 0210 	orr.w	r2, r2, #16
 8000eea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	7f1b      	ldrb	r3, [r3, #28]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d108      	bne.n	8000f06 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f042 0208 	orr.w	r2, r2, #8
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	e007      	b.n	8000f16 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f022 0208 	bic.w	r2, r2, #8
 8000f14:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	7f5b      	ldrb	r3, [r3, #29]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d108      	bne.n	8000f30 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f042 0204 	orr.w	r2, r2, #4
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	e007      	b.n	8000f40 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f022 0204 	bic.w	r2, r2, #4
 8000f3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	691b      	ldr	r3, [r3, #16]
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	ea42 0103 	orr.w	r1, r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	1e5a      	subs	r2, r3, #1
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	430a      	orrs	r2, r1
 8000f64:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b087      	sub	sp, #28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f96:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f98:	7cfb      	ldrb	r3, [r7, #19]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d003      	beq.n	8000fa6 <HAL_CAN_ConfigFilter+0x26>
 8000f9e:	7cfb      	ldrb	r3, [r7, #19]
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	f040 80be 	bne.w	8001122 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000fa6:	4b65      	ldr	r3, [pc, #404]	@ (800113c <HAL_CAN_ConfigFilter+0x1bc>)
 8000fa8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000fb0:	f043 0201 	orr.w	r2, r3, #1
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000fc0:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	f003 031f 	and.w	r3, r3, #31
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	401a      	ands	r2, r3
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	69db      	ldr	r3, [r3, #28]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d123      	bne.n	8001050 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	43db      	mvns	r3, r3
 8001012:	401a      	ands	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800102a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	3248      	adds	r2, #72	@ 0x48
 8001030:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001044:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001046:	6979      	ldr	r1, [r7, #20]
 8001048:	3348      	adds	r3, #72	@ 0x48
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	440b      	add	r3, r1
 800104e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	69db      	ldr	r3, [r3, #28]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d122      	bne.n	800109e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	431a      	orrs	r2, r3
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001078:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	3248      	adds	r2, #72	@ 0x48
 800107e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001092:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001094:	6979      	ldr	r1, [r7, #20]
 8001096:	3348      	adds	r3, #72	@ 0x48
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	440b      	add	r3, r1
 800109c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d109      	bne.n	80010ba <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	401a      	ands	r2, r3
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80010b8:	e007      	b.n	80010ca <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	431a      	orrs	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d109      	bne.n	80010e6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	43db      	mvns	r3, r3
 80010dc:	401a      	ands	r2, r3
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80010e4:	e007      	b.n	80010f6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	431a      	orrs	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	6a1b      	ldr	r3, [r3, #32]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d107      	bne.n	800110e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	431a      	orrs	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001114:	f023 0201 	bic.w	r2, r3, #1
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800111e:	2300      	movs	r3, #0
 8001120:	e006      	b.n	8001130 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001126:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
  }
}
 8001130:	4618      	mov	r0, r3
 8001132:	371c      	adds	r7, #28
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	40006400 	.word	0x40006400

08001140 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b01      	cmp	r3, #1
 8001152:	d12e      	bne.n	80011b2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2202      	movs	r2, #2
 8001158:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 0201 	bic.w	r2, r2, #1
 800116a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800116c:	f7ff fddc 	bl	8000d28 <HAL_GetTick>
 8001170:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001172:	e012      	b.n	800119a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001174:	f7ff fdd8 	bl	8000d28 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b0a      	cmp	r3, #10
 8001180:	d90b      	bls.n	800119a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001186:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2205      	movs	r2, #5
 8001192:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e012      	b.n	80011c0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1e5      	bne.n	8001174 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	e006      	b.n	80011c0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
  }
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b089      	sub	sp, #36	@ 0x24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
 80011d4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011dc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80011e6:	7ffb      	ldrb	r3, [r7, #31]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d003      	beq.n	80011f4 <HAL_CAN_AddTxMessage+0x2c>
 80011ec:	7ffb      	ldrb	r3, [r7, #31]
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	f040 80ad 	bne.w	800134e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10a      	bne.n	8001214 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001204:	2b00      	cmp	r3, #0
 8001206:	d105      	bne.n	8001214 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800120e:	2b00      	cmp	r3, #0
 8001210:	f000 8095 	beq.w	800133e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	0e1b      	lsrs	r3, r3, #24
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800121e:	2201      	movs	r2, #1
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	409a      	lsls	r2, r3
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d10d      	bne.n	800124c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800123a:	68f9      	ldr	r1, [r7, #12]
 800123c:	6809      	ldr	r1, [r1, #0]
 800123e:	431a      	orrs	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	3318      	adds	r3, #24
 8001244:	011b      	lsls	r3, r3, #4
 8001246:	440b      	add	r3, r1
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	e00f      	b.n	800126c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001256:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800125c:	68f9      	ldr	r1, [r7, #12]
 800125e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001260:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	3318      	adds	r3, #24
 8001266:	011b      	lsls	r3, r3, #4
 8001268:	440b      	add	r3, r1
 800126a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6819      	ldr	r1, [r3, #0]
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	691a      	ldr	r2, [r3, #16]
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	3318      	adds	r3, #24
 8001278:	011b      	lsls	r3, r3, #4
 800127a:	440b      	add	r3, r1
 800127c:	3304      	adds	r3, #4
 800127e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	7d1b      	ldrb	r3, [r3, #20]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d111      	bne.n	80012ac <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	3318      	adds	r3, #24
 8001290:	011b      	lsls	r3, r3, #4
 8001292:	4413      	add	r3, r2
 8001294:	3304      	adds	r3, #4
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	6811      	ldr	r1, [r2, #0]
 800129c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	3318      	adds	r3, #24
 80012a4:	011b      	lsls	r3, r3, #4
 80012a6:	440b      	add	r3, r1
 80012a8:	3304      	adds	r3, #4
 80012aa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3307      	adds	r3, #7
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	061a      	lsls	r2, r3, #24
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3306      	adds	r3, #6
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	041b      	lsls	r3, r3, #16
 80012bc:	431a      	orrs	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3305      	adds	r3, #5
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	4313      	orrs	r3, r2
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	3204      	adds	r2, #4
 80012cc:	7812      	ldrb	r2, [r2, #0]
 80012ce:	4610      	mov	r0, r2
 80012d0:	68fa      	ldr	r2, [r7, #12]
 80012d2:	6811      	ldr	r1, [r2, #0]
 80012d4:	ea43 0200 	orr.w	r2, r3, r0
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	011b      	lsls	r3, r3, #4
 80012dc:	440b      	add	r3, r1
 80012de:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80012e2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3303      	adds	r3, #3
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	061a      	lsls	r2, r3, #24
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3302      	adds	r3, #2
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	041b      	lsls	r3, r3, #16
 80012f4:	431a      	orrs	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3301      	adds	r3, #1
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	021b      	lsls	r3, r3, #8
 80012fe:	4313      	orrs	r3, r2
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	7812      	ldrb	r2, [r2, #0]
 8001304:	4610      	mov	r0, r2
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	6811      	ldr	r1, [r2, #0]
 800130a:	ea43 0200 	orr.w	r2, r3, r0
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	011b      	lsls	r3, r3, #4
 8001312:	440b      	add	r3, r1
 8001314:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001318:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	3318      	adds	r3, #24
 8001322:	011b      	lsls	r3, r3, #4
 8001324:	4413      	add	r3, r2
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	6811      	ldr	r1, [r2, #0]
 800132c:	f043 0201 	orr.w	r2, r3, #1
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	3318      	adds	r3, #24
 8001334:	011b      	lsls	r3, r3, #4
 8001336:	440b      	add	r3, r1
 8001338:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	e00e      	b.n	800135c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001342:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e006      	b.n	800135c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001352:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
  }
}
 800135c:	4618      	mov	r0, r3
 800135e:	3724      	adds	r7, #36	@ 0x24
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001368:	b480      	push	{r7}
 800136a:	b087      	sub	sp, #28
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
 8001374:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f893 3020 	ldrb.w	r3, [r3, #32]
 800137c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800137e:	7dfb      	ldrb	r3, [r7, #23]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d003      	beq.n	800138c <HAL_CAN_GetRxMessage+0x24>
 8001384:	7dfb      	ldrb	r3, [r7, #23]
 8001386:	2b02      	cmp	r3, #2
 8001388:	f040 8103 	bne.w	8001592 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d10e      	bne.n	80013b0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	f003 0303 	and.w	r3, r3, #3
 800139c:	2b00      	cmp	r3, #0
 800139e:	d116      	bne.n	80013ce <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e0f7      	b.n	80015a0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d107      	bne.n	80013ce <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e0e8      	b.n	80015a0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	331b      	adds	r3, #27
 80013d6:	011b      	lsls	r3, r3, #4
 80013d8:	4413      	add	r3, r2
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0204 	and.w	r2, r3, #4
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d10c      	bne.n	8001406 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	331b      	adds	r3, #27
 80013f4:	011b      	lsls	r3, r3, #4
 80013f6:	4413      	add	r3, r2
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	0d5b      	lsrs	r3, r3, #21
 80013fc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	e00b      	b.n	800141e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	331b      	adds	r3, #27
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	4413      	add	r3, r2
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	08db      	lsrs	r3, r3, #3
 8001416:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	331b      	adds	r3, #27
 8001426:	011b      	lsls	r3, r3, #4
 8001428:	4413      	add	r3, r2
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0202 	and.w	r2, r3, #2
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	331b      	adds	r3, #27
 800143c:	011b      	lsls	r3, r3, #4
 800143e:	4413      	add	r3, r2
 8001440:	3304      	adds	r3, #4
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0308 	and.w	r3, r3, #8
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2208      	movs	r2, #8
 8001450:	611a      	str	r2, [r3, #16]
 8001452:	e00b      	b.n	800146c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	331b      	adds	r3, #27
 800145c:	011b      	lsls	r3, r3, #4
 800145e:	4413      	add	r3, r2
 8001460:	3304      	adds	r3, #4
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 020f 	and.w	r2, r3, #15
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	331b      	adds	r3, #27
 8001474:	011b      	lsls	r3, r3, #4
 8001476:	4413      	add	r3, r2
 8001478:	3304      	adds	r3, #4
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	0a1b      	lsrs	r3, r3, #8
 800147e:	b2da      	uxtb	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	331b      	adds	r3, #27
 800148c:	011b      	lsls	r3, r3, #4
 800148e:	4413      	add	r3, r2
 8001490:	3304      	adds	r3, #4
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	0c1b      	lsrs	r3, r3, #16
 8001496:	b29a      	uxth	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	011b      	lsls	r3, r3, #4
 80014a4:	4413      	add	r3, r2
 80014a6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	011b      	lsls	r3, r3, #4
 80014ba:	4413      	add	r3, r2
 80014bc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	0a1a      	lsrs	r2, r3, #8
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	3301      	adds	r3, #1
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	011b      	lsls	r3, r3, #4
 80014d4:	4413      	add	r3, r2
 80014d6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	0c1a      	lsrs	r2, r3, #16
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	3302      	adds	r3, #2
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	011b      	lsls	r3, r3, #4
 80014ee:	4413      	add	r3, r2
 80014f0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	0e1a      	lsrs	r2, r3, #24
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	3303      	adds	r3, #3
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	011b      	lsls	r3, r3, #4
 8001508:	4413      	add	r3, r2
 800150a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	3304      	adds	r3, #4
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	011b      	lsls	r3, r3, #4
 8001520:	4413      	add	r3, r2
 8001522:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	0a1a      	lsrs	r2, r3, #8
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	3305      	adds	r3, #5
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	4413      	add	r3, r2
 800153c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	0c1a      	lsrs	r2, r3, #16
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	3306      	adds	r3, #6
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	011b      	lsls	r3, r3, #4
 8001554:	4413      	add	r3, r2
 8001556:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	0e1a      	lsrs	r2, r3, #24
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	3307      	adds	r3, #7
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d108      	bne.n	800157e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68da      	ldr	r2, [r3, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 0220 	orr.w	r2, r2, #32
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	e007      	b.n	800158e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	691a      	ldr	r2, [r3, #16]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f042 0220 	orr.w	r2, r2, #32
 800158c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	e006      	b.n	80015a0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001596:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
  }
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	371c      	adds	r7, #28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015bc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d002      	beq.n	80015ca <HAL_CAN_ActivateNotification+0x1e>
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d109      	bne.n	80015de <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6959      	ldr	r1, [r3, #20]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	e006      	b.n	80015ec <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
  }
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	@ 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001600:	2300      	movs	r3, #0
 8001602:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d07c      	beq.n	8001738 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b00      	cmp	r3, #0
 8001646:	d023      	beq.n	8001690 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2201      	movs	r2, #1
 800164e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 f983 	bl	8001966 <HAL_CAN_TxMailbox0CompleteCallback>
 8001660:	e016      	b.n	8001690 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b00      	cmp	r3, #0
 800166a:	d004      	beq.n	8001676 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800166c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24
 8001674:	e00c      	b.n	8001690 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	2b00      	cmp	r3, #0
 800167e:	d004      	beq.n	800168a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001682:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001686:	627b      	str	r3, [r7, #36]	@ 0x24
 8001688:	e002      	b.n	8001690 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f989 	bl	80019a2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001696:	2b00      	cmp	r3, #0
 8001698:	d024      	beq.n	80016e4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 f963 	bl	800197a <HAL_CAN_TxMailbox1CompleteCallback>
 80016b4:	e016      	b.n	80016e4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d004      	beq.n	80016ca <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80016c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80016c8:	e00c      	b.n	80016e4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d004      	beq.n	80016de <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80016d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016da:	627b      	str	r3, [r7, #36]	@ 0x24
 80016dc:	e002      	b.n	80016e4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 f969 	bl	80019b6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d024      	beq.n	8001738 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f943 	bl	800198e <HAL_CAN_TxMailbox2CompleteCallback>
 8001708:	e016      	b.n	8001738 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d004      	beq.n	800171e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001716:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24
 800171c:	e00c      	b.n	8001738 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d004      	beq.n	8001732 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800172e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001730:	e002      	b.n	8001738 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f949 	bl	80019ca <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001738:	6a3b      	ldr	r3, [r7, #32]
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00c      	beq.n	800175c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f003 0310 	and.w	r3, r3, #16
 8001748:	2b00      	cmp	r3, #0
 800174a:	d007      	beq.n	800175c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800174c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001752:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2210      	movs	r2, #16
 800175a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00b      	beq.n	800177e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f003 0308 	and.w	r3, r3, #8
 800176c:	2b00      	cmp	r3, #0
 800176e:	d006      	beq.n	800177e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2208      	movs	r2, #8
 8001776:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 f930 	bl	80019de <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d009      	beq.n	800179c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d002      	beq.n	800179c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7fe ff02 	bl	80005a0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800179c:	6a3b      	ldr	r3, [r7, #32]
 800179e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00c      	beq.n	80017c0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	f003 0310 	and.w	r3, r3, #16
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d007      	beq.n	80017c0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80017b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017b6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2210      	movs	r2, #16
 80017be:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80017c0:	6a3b      	ldr	r3, [r7, #32]
 80017c2:	f003 0320 	and.w	r3, r3, #32
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00b      	beq.n	80017e2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d006      	beq.n	80017e2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2208      	movs	r2, #8
 80017da:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 f912 	bl	8001a06 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80017e2:	6a3b      	ldr	r3, [r7, #32]
 80017e4:	f003 0310 	and.w	r3, r3, #16
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d009      	beq.n	8001800 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d002      	beq.n	8001800 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f8f9 	bl	80019f2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00b      	beq.n	8001822 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	f003 0310 	and.w	r3, r3, #16
 8001810:	2b00      	cmp	r3, #0
 8001812:	d006      	beq.n	8001822 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2210      	movs	r2, #16
 800181a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 f8fc 	bl	8001a1a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00b      	beq.n	8001844 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	2b00      	cmp	r3, #0
 8001834:	d006      	beq.n	8001844 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2208      	movs	r2, #8
 800183c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f8f5 	bl	8001a2e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001844:	6a3b      	ldr	r3, [r7, #32]
 8001846:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d07b      	beq.n	8001946 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b00      	cmp	r3, #0
 8001856:	d072      	beq.n	800193e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001858:	6a3b      	ldr	r3, [r7, #32]
 800185a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800185e:	2b00      	cmp	r3, #0
 8001860:	d008      	beq.n	8001874 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800186c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001874:	6a3b      	ldr	r3, [r7, #32]
 8001876:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800187a:	2b00      	cmp	r3, #0
 800187c:	d008      	beq.n	8001890 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188a:	f043 0302 	orr.w	r3, r3, #2
 800188e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001896:	2b00      	cmp	r3, #0
 8001898:	d008      	beq.n	80018ac <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80018a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a6:	f043 0304 	orr.w	r3, r3, #4
 80018aa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018ac:	6a3b      	ldr	r3, [r7, #32]
 80018ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d043      	beq.n	800193e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d03e      	beq.n	800193e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80018c6:	2b60      	cmp	r3, #96	@ 0x60
 80018c8:	d02b      	beq.n	8001922 <HAL_CAN_IRQHandler+0x32a>
 80018ca:	2b60      	cmp	r3, #96	@ 0x60
 80018cc:	d82e      	bhi.n	800192c <HAL_CAN_IRQHandler+0x334>
 80018ce:	2b50      	cmp	r3, #80	@ 0x50
 80018d0:	d022      	beq.n	8001918 <HAL_CAN_IRQHandler+0x320>
 80018d2:	2b50      	cmp	r3, #80	@ 0x50
 80018d4:	d82a      	bhi.n	800192c <HAL_CAN_IRQHandler+0x334>
 80018d6:	2b40      	cmp	r3, #64	@ 0x40
 80018d8:	d019      	beq.n	800190e <HAL_CAN_IRQHandler+0x316>
 80018da:	2b40      	cmp	r3, #64	@ 0x40
 80018dc:	d826      	bhi.n	800192c <HAL_CAN_IRQHandler+0x334>
 80018de:	2b30      	cmp	r3, #48	@ 0x30
 80018e0:	d010      	beq.n	8001904 <HAL_CAN_IRQHandler+0x30c>
 80018e2:	2b30      	cmp	r3, #48	@ 0x30
 80018e4:	d822      	bhi.n	800192c <HAL_CAN_IRQHandler+0x334>
 80018e6:	2b10      	cmp	r3, #16
 80018e8:	d002      	beq.n	80018f0 <HAL_CAN_IRQHandler+0x2f8>
 80018ea:	2b20      	cmp	r3, #32
 80018ec:	d005      	beq.n	80018fa <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80018ee:	e01d      	b.n	800192c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80018f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f2:	f043 0308 	orr.w	r3, r3, #8
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80018f8:	e019      	b.n	800192e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80018fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fc:	f043 0310 	orr.w	r3, r3, #16
 8001900:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001902:	e014      	b.n	800192e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001906:	f043 0320 	orr.w	r3, r3, #32
 800190a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800190c:	e00f      	b.n	800192e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800190e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001910:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001914:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001916:	e00a      	b.n	800192e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800191e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001920:	e005      	b.n	800192e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001924:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001928:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800192a:	e000      	b.n	800192e <HAL_CAN_IRQHandler+0x336>
            break;
 800192c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	699a      	ldr	r2, [r3, #24]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800193c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2204      	movs	r2, #4
 8001944:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001948:	2b00      	cmp	r3, #0
 800194a:	d008      	beq.n	800195e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f000 f872 	bl	8001a42 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800195e:	bf00      	nop
 8001960:	3728      	adds	r7, #40	@ 0x28
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a68:	4b0c      	ldr	r3, [pc, #48]	@ (8001a9c <__NVIC_SetPriorityGrouping+0x44>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a74:	4013      	ands	r3, r2
 8001a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8a:	4a04      	ldr	r2, [pc, #16]	@ (8001a9c <__NVIC_SetPriorityGrouping+0x44>)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	60d3      	str	r3, [r2, #12]
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa4:	4b04      	ldr	r3, [pc, #16]	@ (8001ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	0a1b      	lsrs	r3, r3, #8
 8001aaa:	f003 0307 	and.w	r3, r3, #7
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	db0b      	blt.n	8001ae6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	f003 021f 	and.w	r2, r3, #31
 8001ad4:	4907      	ldr	r1, [pc, #28]	@ (8001af4 <__NVIC_EnableIRQ+0x38>)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	095b      	lsrs	r3, r3, #5
 8001adc:	2001      	movs	r0, #1
 8001ade:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000e100 	.word	0xe000e100

08001af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	6039      	str	r1, [r7, #0]
 8001b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	db0a      	blt.n	8001b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	490c      	ldr	r1, [pc, #48]	@ (8001b44 <__NVIC_SetPriority+0x4c>)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	0112      	lsls	r2, r2, #4
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b20:	e00a      	b.n	8001b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	4908      	ldr	r1, [pc, #32]	@ (8001b48 <__NVIC_SetPriority+0x50>)
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	3b04      	subs	r3, #4
 8001b30:	0112      	lsls	r2, r2, #4
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	440b      	add	r3, r1
 8001b36:	761a      	strb	r2, [r3, #24]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000e100 	.word	0xe000e100
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	@ 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f1c3 0307 	rsb	r3, r3, #7
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	bf28      	it	cs
 8001b6a:	2304      	movcs	r3, #4
 8001b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3304      	adds	r3, #4
 8001b72:	2b06      	cmp	r3, #6
 8001b74:	d902      	bls.n	8001b7c <NVIC_EncodePriority+0x30>
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3b03      	subs	r3, #3
 8001b7a:	e000      	b.n	8001b7e <NVIC_EncodePriority+0x32>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b80:	f04f 32ff 	mov.w	r2, #4294967295
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	401a      	ands	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b94:	f04f 31ff 	mov.w	r1, #4294967295
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9e:	43d9      	mvns	r1, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	4313      	orrs	r3, r2
         );
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3724      	adds	r7, #36	@ 0x24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bc4:	d301      	bcc.n	8001bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e00f      	b.n	8001bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bca:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf4 <SysTick_Config+0x40>)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd8:	f7ff ff8e 	bl	8001af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bdc:	4b05      	ldr	r3, [pc, #20]	@ (8001bf4 <SysTick_Config+0x40>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be2:	4b04      	ldr	r3, [pc, #16]	@ (8001bf4 <SysTick_Config+0x40>)
 8001be4:	2207      	movs	r2, #7
 8001be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	e000e010 	.word	0xe000e010

08001bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ff29 	bl	8001a58 <__NVIC_SetPriorityGrouping>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	4603      	mov	r3, r0
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c20:	f7ff ff3e 	bl	8001aa0 <__NVIC_GetPriorityGrouping>
 8001c24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	68b9      	ldr	r1, [r7, #8]
 8001c2a:	6978      	ldr	r0, [r7, #20]
 8001c2c:	f7ff ff8e 	bl	8001b4c <NVIC_EncodePriority>
 8001c30:	4602      	mov	r2, r0
 8001c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c36:	4611      	mov	r1, r2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff5d 	bl	8001af8 <__NVIC_SetPriority>
}
 8001c3e:	bf00      	nop
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff31 	bl	8001abc <__NVIC_EnableIRQ>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ffa2 	bl	8001bb4 <SysTick_Config>
 8001c70:	4603      	mov	r3, r0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b089      	sub	sp, #36	@ 0x24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	e165      	b.n	8001f64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c98:	2201      	movs	r2, #1
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	f040 8154 	bne.w	8001f5e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d005      	beq.n	8001cce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d130      	bne.n	8001d30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	2203      	movs	r2, #3
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d04:	2201      	movs	r2, #1
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	f003 0201 	and.w	r2, r3, #1
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d017      	beq.n	8001d6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	2203      	movs	r2, #3
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d123      	bne.n	8001dc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	08da      	lsrs	r2, r3, #3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3208      	adds	r2, #8
 8001d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	220f      	movs	r2, #15
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	691a      	ldr	r2, [r3, #16]
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	08da      	lsrs	r2, r3, #3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3208      	adds	r2, #8
 8001dba:	69b9      	ldr	r1, [r7, #24]
 8001dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	2203      	movs	r2, #3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0203 	and.w	r2, r3, #3
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 80ae 	beq.w	8001f5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b5d      	ldr	r3, [pc, #372]	@ (8001f7c <HAL_GPIO_Init+0x300>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0a:	4a5c      	ldr	r2, [pc, #368]	@ (8001f7c <HAL_GPIO_Init+0x300>)
 8001e0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e12:	4b5a      	ldr	r3, [pc, #360]	@ (8001f7c <HAL_GPIO_Init+0x300>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e1e:	4a58      	ldr	r2, [pc, #352]	@ (8001f80 <HAL_GPIO_Init+0x304>)
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	089b      	lsrs	r3, r3, #2
 8001e24:	3302      	adds	r3, #2
 8001e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	220f      	movs	r2, #15
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a4f      	ldr	r2, [pc, #316]	@ (8001f84 <HAL_GPIO_Init+0x308>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d025      	beq.n	8001e96 <HAL_GPIO_Init+0x21a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a4e      	ldr	r2, [pc, #312]	@ (8001f88 <HAL_GPIO_Init+0x30c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d01f      	beq.n	8001e92 <HAL_GPIO_Init+0x216>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a4d      	ldr	r2, [pc, #308]	@ (8001f8c <HAL_GPIO_Init+0x310>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d019      	beq.n	8001e8e <HAL_GPIO_Init+0x212>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a4c      	ldr	r2, [pc, #304]	@ (8001f90 <HAL_GPIO_Init+0x314>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d013      	beq.n	8001e8a <HAL_GPIO_Init+0x20e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a4b      	ldr	r2, [pc, #300]	@ (8001f94 <HAL_GPIO_Init+0x318>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00d      	beq.n	8001e86 <HAL_GPIO_Init+0x20a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a4a      	ldr	r2, [pc, #296]	@ (8001f98 <HAL_GPIO_Init+0x31c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d007      	beq.n	8001e82 <HAL_GPIO_Init+0x206>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a49      	ldr	r2, [pc, #292]	@ (8001f9c <HAL_GPIO_Init+0x320>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d101      	bne.n	8001e7e <HAL_GPIO_Init+0x202>
 8001e7a:	2306      	movs	r3, #6
 8001e7c:	e00c      	b.n	8001e98 <HAL_GPIO_Init+0x21c>
 8001e7e:	2307      	movs	r3, #7
 8001e80:	e00a      	b.n	8001e98 <HAL_GPIO_Init+0x21c>
 8001e82:	2305      	movs	r3, #5
 8001e84:	e008      	b.n	8001e98 <HAL_GPIO_Init+0x21c>
 8001e86:	2304      	movs	r3, #4
 8001e88:	e006      	b.n	8001e98 <HAL_GPIO_Init+0x21c>
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e004      	b.n	8001e98 <HAL_GPIO_Init+0x21c>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e002      	b.n	8001e98 <HAL_GPIO_Init+0x21c>
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <HAL_GPIO_Init+0x21c>
 8001e96:	2300      	movs	r3, #0
 8001e98:	69fa      	ldr	r2, [r7, #28]
 8001e9a:	f002 0203 	and.w	r2, r2, #3
 8001e9e:	0092      	lsls	r2, r2, #2
 8001ea0:	4093      	lsls	r3, r2
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ea8:	4935      	ldr	r1, [pc, #212]	@ (8001f80 <HAL_GPIO_Init+0x304>)
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	089b      	lsrs	r3, r3, #2
 8001eae:	3302      	adds	r3, #2
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eb6:	4b3a      	ldr	r3, [pc, #232]	@ (8001fa0 <HAL_GPIO_Init+0x324>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eda:	4a31      	ldr	r2, [pc, #196]	@ (8001fa0 <HAL_GPIO_Init+0x324>)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ee0:	4b2f      	ldr	r3, [pc, #188]	@ (8001fa0 <HAL_GPIO_Init+0x324>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f04:	4a26      	ldr	r2, [pc, #152]	@ (8001fa0 <HAL_GPIO_Init+0x324>)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f0a:	4b25      	ldr	r3, [pc, #148]	@ (8001fa0 <HAL_GPIO_Init+0x324>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001fa0 <HAL_GPIO_Init+0x324>)
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f34:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa0 <HAL_GPIO_Init+0x324>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f58:	4a11      	ldr	r2, [pc, #68]	@ (8001fa0 <HAL_GPIO_Init+0x324>)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3301      	adds	r3, #1
 8001f62:	61fb      	str	r3, [r7, #28]
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	2b0f      	cmp	r3, #15
 8001f68:	f67f ae96 	bls.w	8001c98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	bf00      	nop
 8001f70:	3724      	adds	r7, #36	@ 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40013800 	.word	0x40013800
 8001f84:	40020000 	.word	0x40020000
 8001f88:	40020400 	.word	0x40020400
 8001f8c:	40020800 	.word	0x40020800
 8001f90:	40020c00 	.word	0x40020c00
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40021400 	.word	0x40021400
 8001f9c:	40021800 	.word	0x40021800
 8001fa0:	40013c00 	.word	0x40013c00

08001fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	807b      	strh	r3, [r7, #2]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fb4:	787b      	ldrb	r3, [r7, #1]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fba:	887a      	ldrh	r2, [r7, #2]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fc0:	e003      	b.n	8001fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fc2:	887b      	ldrh	r3, [r7, #2]
 8001fc4:	041a      	lsls	r2, r3, #16
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	619a      	str	r2, [r3, #24]
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	603b      	str	r3, [r7, #0]
 8001fe6:	4b20      	ldr	r3, [pc, #128]	@ (8002068 <HAL_PWREx_EnableOverDrive+0x90>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	4a1f      	ldr	r2, [pc, #124]	@ (8002068 <HAL_PWREx_EnableOverDrive+0x90>)
 8001fec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ff0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8002068 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800206c <HAL_PWREx_EnableOverDrive+0x94>)
 8002000:	2201      	movs	r2, #1
 8002002:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002004:	f7fe fe90 	bl	8000d28 <HAL_GetTick>
 8002008:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800200a:	e009      	b.n	8002020 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800200c:	f7fe fe8c 	bl	8000d28 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800201a:	d901      	bls.n	8002020 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e01f      	b.n	8002060 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002020:	4b13      	ldr	r3, [pc, #76]	@ (8002070 <HAL_PWREx_EnableOverDrive+0x98>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800202c:	d1ee      	bne.n	800200c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800202e:	4b11      	ldr	r3, [pc, #68]	@ (8002074 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002030:	2201      	movs	r2, #1
 8002032:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002034:	f7fe fe78 	bl	8000d28 <HAL_GetTick>
 8002038:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800203a:	e009      	b.n	8002050 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800203c:	f7fe fe74 	bl	8000d28 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800204a:	d901      	bls.n	8002050 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e007      	b.n	8002060 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002050:	4b07      	ldr	r3, [pc, #28]	@ (8002070 <HAL_PWREx_EnableOverDrive+0x98>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002058:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800205c:	d1ee      	bne.n	800203c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40023800 	.word	0x40023800
 800206c:	420e0040 	.word	0x420e0040
 8002070:	40007000 	.word	0x40007000
 8002074:	420e0044 	.word	0x420e0044

08002078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0cc      	b.n	8002226 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800208c:	4b68      	ldr	r3, [pc, #416]	@ (8002230 <HAL_RCC_ClockConfig+0x1b8>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 030f 	and.w	r3, r3, #15
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d90c      	bls.n	80020b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209a:	4b65      	ldr	r3, [pc, #404]	@ (8002230 <HAL_RCC_ClockConfig+0x1b8>)
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	4b63      	ldr	r3, [pc, #396]	@ (8002230 <HAL_RCC_ClockConfig+0x1b8>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0b8      	b.n	8002226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d020      	beq.n	8002102 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020cc:	4b59      	ldr	r3, [pc, #356]	@ (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	4a58      	ldr	r2, [pc, #352]	@ (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d005      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020e4:	4b53      	ldr	r3, [pc, #332]	@ (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	4a52      	ldr	r2, [pc, #328]	@ (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 80020ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f0:	4b50      	ldr	r3, [pc, #320]	@ (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	494d      	ldr	r1, [pc, #308]	@ (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d044      	beq.n	8002198 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d107      	bne.n	8002126 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002116:	4b47      	ldr	r3, [pc, #284]	@ (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d119      	bne.n	8002156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e07f      	b.n	8002226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d003      	beq.n	8002136 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002132:	2b03      	cmp	r3, #3
 8002134:	d107      	bne.n	8002146 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002136:	4b3f      	ldr	r3, [pc, #252]	@ (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d109      	bne.n	8002156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e06f      	b.n	8002226 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002146:	4b3b      	ldr	r3, [pc, #236]	@ (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e067      	b.n	8002226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002156:	4b37      	ldr	r3, [pc, #220]	@ (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f023 0203 	bic.w	r2, r3, #3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	4934      	ldr	r1, [pc, #208]	@ (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 8002164:	4313      	orrs	r3, r2
 8002166:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002168:	f7fe fdde 	bl	8000d28 <HAL_GetTick>
 800216c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216e:	e00a      	b.n	8002186 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002170:	f7fe fdda 	bl	8000d28 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800217e:	4293      	cmp	r3, r2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e04f      	b.n	8002226 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002186:	4b2b      	ldr	r3, [pc, #172]	@ (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 020c 	and.w	r2, r3, #12
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	429a      	cmp	r2, r3
 8002196:	d1eb      	bne.n	8002170 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002198:	4b25      	ldr	r3, [pc, #148]	@ (8002230 <HAL_RCC_ClockConfig+0x1b8>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 030f 	and.w	r3, r3, #15
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d20c      	bcs.n	80021c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a6:	4b22      	ldr	r3, [pc, #136]	@ (8002230 <HAL_RCC_ClockConfig+0x1b8>)
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ae:	4b20      	ldr	r3, [pc, #128]	@ (8002230 <HAL_RCC_ClockConfig+0x1b8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e032      	b.n	8002226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d008      	beq.n	80021de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021cc:	4b19      	ldr	r3, [pc, #100]	@ (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	4916      	ldr	r1, [pc, #88]	@ (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d009      	beq.n	80021fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ea:	4b12      	ldr	r3, [pc, #72]	@ (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	490e      	ldr	r1, [pc, #56]	@ (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021fe:	f000 f855 	bl	80022ac <HAL_RCC_GetSysClockFreq>
 8002202:	4602      	mov	r2, r0
 8002204:	4b0b      	ldr	r3, [pc, #44]	@ (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	490a      	ldr	r1, [pc, #40]	@ (8002238 <HAL_RCC_ClockConfig+0x1c0>)
 8002210:	5ccb      	ldrb	r3, [r1, r3]
 8002212:	fa22 f303 	lsr.w	r3, r2, r3
 8002216:	4a09      	ldr	r2, [pc, #36]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800221a:	4b09      	ldr	r3, [pc, #36]	@ (8002240 <HAL_RCC_ClockConfig+0x1c8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe fd3e 	bl	8000ca0 <HAL_InitTick>

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40023c00 	.word	0x40023c00
 8002234:	40023800 	.word	0x40023800
 8002238:	08003dc0 	.word	0x08003dc0
 800223c:	20000000 	.word	0x20000000
 8002240:	20000004 	.word	0x20000004

08002244 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002248:	4b03      	ldr	r3, [pc, #12]	@ (8002258 <HAL_RCC_GetHCLKFreq+0x14>)
 800224a:	681b      	ldr	r3, [r3, #0]
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	20000000 	.word	0x20000000

0800225c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002260:	f7ff fff0 	bl	8002244 <HAL_RCC_GetHCLKFreq>
 8002264:	4602      	mov	r2, r0
 8002266:	4b05      	ldr	r3, [pc, #20]	@ (800227c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	0a9b      	lsrs	r3, r3, #10
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	4903      	ldr	r1, [pc, #12]	@ (8002280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002272:	5ccb      	ldrb	r3, [r1, r3]
 8002274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002278:	4618      	mov	r0, r3
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40023800 	.word	0x40023800
 8002280:	08003dd0 	.word	0x08003dd0

08002284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002288:	f7ff ffdc 	bl	8002244 <HAL_RCC_GetHCLKFreq>
 800228c:	4602      	mov	r2, r0
 800228e:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	0b5b      	lsrs	r3, r3, #13
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	4903      	ldr	r1, [pc, #12]	@ (80022a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800229a:	5ccb      	ldrb	r3, [r1, r3]
 800229c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40023800 	.word	0x40023800
 80022a8:	08003dd0 	.word	0x08003dd0

080022ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022b0:	b0ae      	sub	sp, #184	@ 0xb8
 80022b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022d2:	4bcb      	ldr	r3, [pc, #812]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x354>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 030c 	and.w	r3, r3, #12
 80022da:	2b0c      	cmp	r3, #12
 80022dc:	f200 8206 	bhi.w	80026ec <HAL_RCC_GetSysClockFreq+0x440>
 80022e0:	a201      	add	r2, pc, #4	@ (adr r2, 80022e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80022e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e6:	bf00      	nop
 80022e8:	0800231d 	.word	0x0800231d
 80022ec:	080026ed 	.word	0x080026ed
 80022f0:	080026ed 	.word	0x080026ed
 80022f4:	080026ed 	.word	0x080026ed
 80022f8:	08002325 	.word	0x08002325
 80022fc:	080026ed 	.word	0x080026ed
 8002300:	080026ed 	.word	0x080026ed
 8002304:	080026ed 	.word	0x080026ed
 8002308:	0800232d 	.word	0x0800232d
 800230c:	080026ed 	.word	0x080026ed
 8002310:	080026ed 	.word	0x080026ed
 8002314:	080026ed 	.word	0x080026ed
 8002318:	0800251d 	.word	0x0800251d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800231c:	4bb9      	ldr	r3, [pc, #740]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x358>)
 800231e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002322:	e1e7      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002324:	4bb8      	ldr	r3, [pc, #736]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002326:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800232a:	e1e3      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800232c:	4bb4      	ldr	r3, [pc, #720]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x354>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002334:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002338:	4bb1      	ldr	r3, [pc, #708]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x354>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d071      	beq.n	8002428 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002344:	4bae      	ldr	r3, [pc, #696]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x354>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	099b      	lsrs	r3, r3, #6
 800234a:	2200      	movs	r2, #0
 800234c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002350:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002354:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800235c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002360:	2300      	movs	r3, #0
 8002362:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002366:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800236a:	4622      	mov	r2, r4
 800236c:	462b      	mov	r3, r5
 800236e:	f04f 0000 	mov.w	r0, #0
 8002372:	f04f 0100 	mov.w	r1, #0
 8002376:	0159      	lsls	r1, r3, #5
 8002378:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800237c:	0150      	lsls	r0, r2, #5
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	4621      	mov	r1, r4
 8002384:	1a51      	subs	r1, r2, r1
 8002386:	6439      	str	r1, [r7, #64]	@ 0x40
 8002388:	4629      	mov	r1, r5
 800238a:	eb63 0301 	sbc.w	r3, r3, r1
 800238e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	f04f 0300 	mov.w	r3, #0
 8002398:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800239c:	4649      	mov	r1, r9
 800239e:	018b      	lsls	r3, r1, #6
 80023a0:	4641      	mov	r1, r8
 80023a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023a6:	4641      	mov	r1, r8
 80023a8:	018a      	lsls	r2, r1, #6
 80023aa:	4641      	mov	r1, r8
 80023ac:	1a51      	subs	r1, r2, r1
 80023ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80023b0:	4649      	mov	r1, r9
 80023b2:	eb63 0301 	sbc.w	r3, r3, r1
 80023b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80023c4:	4649      	mov	r1, r9
 80023c6:	00cb      	lsls	r3, r1, #3
 80023c8:	4641      	mov	r1, r8
 80023ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023ce:	4641      	mov	r1, r8
 80023d0:	00ca      	lsls	r2, r1, #3
 80023d2:	4610      	mov	r0, r2
 80023d4:	4619      	mov	r1, r3
 80023d6:	4603      	mov	r3, r0
 80023d8:	4622      	mov	r2, r4
 80023da:	189b      	adds	r3, r3, r2
 80023dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80023de:	462b      	mov	r3, r5
 80023e0:	460a      	mov	r2, r1
 80023e2:	eb42 0303 	adc.w	r3, r2, r3
 80023e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	f04f 0300 	mov.w	r3, #0
 80023f0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80023f4:	4629      	mov	r1, r5
 80023f6:	024b      	lsls	r3, r1, #9
 80023f8:	4621      	mov	r1, r4
 80023fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023fe:	4621      	mov	r1, r4
 8002400:	024a      	lsls	r2, r1, #9
 8002402:	4610      	mov	r0, r2
 8002404:	4619      	mov	r1, r3
 8002406:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800240a:	2200      	movs	r2, #0
 800240c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002410:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002414:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002418:	f7fd ff4a 	bl	80002b0 <__aeabi_uldivmod>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	4613      	mov	r3, r2
 8002422:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002426:	e067      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002428:	4b75      	ldr	r3, [pc, #468]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x354>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	099b      	lsrs	r3, r3, #6
 800242e:	2200      	movs	r2, #0
 8002430:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002434:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002438:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800243c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002440:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002442:	2300      	movs	r3, #0
 8002444:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002446:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800244a:	4622      	mov	r2, r4
 800244c:	462b      	mov	r3, r5
 800244e:	f04f 0000 	mov.w	r0, #0
 8002452:	f04f 0100 	mov.w	r1, #0
 8002456:	0159      	lsls	r1, r3, #5
 8002458:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800245c:	0150      	lsls	r0, r2, #5
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	4621      	mov	r1, r4
 8002464:	1a51      	subs	r1, r2, r1
 8002466:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002468:	4629      	mov	r1, r5
 800246a:	eb63 0301 	sbc.w	r3, r3, r1
 800246e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800247c:	4649      	mov	r1, r9
 800247e:	018b      	lsls	r3, r1, #6
 8002480:	4641      	mov	r1, r8
 8002482:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002486:	4641      	mov	r1, r8
 8002488:	018a      	lsls	r2, r1, #6
 800248a:	4641      	mov	r1, r8
 800248c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002490:	4649      	mov	r1, r9
 8002492:	eb63 0b01 	sbc.w	fp, r3, r1
 8002496:	f04f 0200 	mov.w	r2, #0
 800249a:	f04f 0300 	mov.w	r3, #0
 800249e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024a2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024aa:	4692      	mov	sl, r2
 80024ac:	469b      	mov	fp, r3
 80024ae:	4623      	mov	r3, r4
 80024b0:	eb1a 0303 	adds.w	r3, sl, r3
 80024b4:	623b      	str	r3, [r7, #32]
 80024b6:	462b      	mov	r3, r5
 80024b8:	eb4b 0303 	adc.w	r3, fp, r3
 80024bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80024ca:	4629      	mov	r1, r5
 80024cc:	028b      	lsls	r3, r1, #10
 80024ce:	4621      	mov	r1, r4
 80024d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024d4:	4621      	mov	r1, r4
 80024d6:	028a      	lsls	r2, r1, #10
 80024d8:	4610      	mov	r0, r2
 80024da:	4619      	mov	r1, r3
 80024dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024e0:	2200      	movs	r2, #0
 80024e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80024e4:	677a      	str	r2, [r7, #116]	@ 0x74
 80024e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80024ea:	f7fd fee1 	bl	80002b0 <__aeabi_uldivmod>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4613      	mov	r3, r2
 80024f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80024f8:	4b41      	ldr	r3, [pc, #260]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x354>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	0c1b      	lsrs	r3, r3, #16
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	3301      	adds	r3, #1
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800250a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800250e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002512:	fbb2 f3f3 	udiv	r3, r2, r3
 8002516:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800251a:	e0eb      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800251c:	4b38      	ldr	r3, [pc, #224]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x354>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002524:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002528:	4b35      	ldr	r3, [pc, #212]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x354>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d06b      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002534:	4b32      	ldr	r3, [pc, #200]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x354>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	099b      	lsrs	r3, r3, #6
 800253a:	2200      	movs	r2, #0
 800253c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800253e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002540:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002546:	663b      	str	r3, [r7, #96]	@ 0x60
 8002548:	2300      	movs	r3, #0
 800254a:	667b      	str	r3, [r7, #100]	@ 0x64
 800254c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002550:	4622      	mov	r2, r4
 8002552:	462b      	mov	r3, r5
 8002554:	f04f 0000 	mov.w	r0, #0
 8002558:	f04f 0100 	mov.w	r1, #0
 800255c:	0159      	lsls	r1, r3, #5
 800255e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002562:	0150      	lsls	r0, r2, #5
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4621      	mov	r1, r4
 800256a:	1a51      	subs	r1, r2, r1
 800256c:	61b9      	str	r1, [r7, #24]
 800256e:	4629      	mov	r1, r5
 8002570:	eb63 0301 	sbc.w	r3, r3, r1
 8002574:	61fb      	str	r3, [r7, #28]
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	f04f 0300 	mov.w	r3, #0
 800257e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002582:	4659      	mov	r1, fp
 8002584:	018b      	lsls	r3, r1, #6
 8002586:	4651      	mov	r1, sl
 8002588:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800258c:	4651      	mov	r1, sl
 800258e:	018a      	lsls	r2, r1, #6
 8002590:	4651      	mov	r1, sl
 8002592:	ebb2 0801 	subs.w	r8, r2, r1
 8002596:	4659      	mov	r1, fp
 8002598:	eb63 0901 	sbc.w	r9, r3, r1
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025b0:	4690      	mov	r8, r2
 80025b2:	4699      	mov	r9, r3
 80025b4:	4623      	mov	r3, r4
 80025b6:	eb18 0303 	adds.w	r3, r8, r3
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	462b      	mov	r3, r5
 80025be:	eb49 0303 	adc.w	r3, r9, r3
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	f04f 0300 	mov.w	r3, #0
 80025cc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80025d0:	4629      	mov	r1, r5
 80025d2:	024b      	lsls	r3, r1, #9
 80025d4:	4621      	mov	r1, r4
 80025d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025da:	4621      	mov	r1, r4
 80025dc:	024a      	lsls	r2, r1, #9
 80025de:	4610      	mov	r0, r2
 80025e0:	4619      	mov	r1, r3
 80025e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025e6:	2200      	movs	r2, #0
 80025e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80025ea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80025ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80025f0:	f7fd fe5e 	bl	80002b0 <__aeabi_uldivmod>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4613      	mov	r3, r2
 80025fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025fe:	e065      	b.n	80026cc <HAL_RCC_GetSysClockFreq+0x420>
 8002600:	40023800 	.word	0x40023800
 8002604:	00f42400 	.word	0x00f42400
 8002608:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800260c:	4b3d      	ldr	r3, [pc, #244]	@ (8002704 <HAL_RCC_GetSysClockFreq+0x458>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	099b      	lsrs	r3, r3, #6
 8002612:	2200      	movs	r2, #0
 8002614:	4618      	mov	r0, r3
 8002616:	4611      	mov	r1, r2
 8002618:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800261c:	653b      	str	r3, [r7, #80]	@ 0x50
 800261e:	2300      	movs	r3, #0
 8002620:	657b      	str	r3, [r7, #84]	@ 0x54
 8002622:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002626:	4642      	mov	r2, r8
 8002628:	464b      	mov	r3, r9
 800262a:	f04f 0000 	mov.w	r0, #0
 800262e:	f04f 0100 	mov.w	r1, #0
 8002632:	0159      	lsls	r1, r3, #5
 8002634:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002638:	0150      	lsls	r0, r2, #5
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4641      	mov	r1, r8
 8002640:	1a51      	subs	r1, r2, r1
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	4649      	mov	r1, r9
 8002646:	eb63 0301 	sbc.w	r3, r3, r1
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002658:	4659      	mov	r1, fp
 800265a:	018b      	lsls	r3, r1, #6
 800265c:	4651      	mov	r1, sl
 800265e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002662:	4651      	mov	r1, sl
 8002664:	018a      	lsls	r2, r1, #6
 8002666:	4651      	mov	r1, sl
 8002668:	1a54      	subs	r4, r2, r1
 800266a:	4659      	mov	r1, fp
 800266c:	eb63 0501 	sbc.w	r5, r3, r1
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	00eb      	lsls	r3, r5, #3
 800267a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800267e:	00e2      	lsls	r2, r4, #3
 8002680:	4614      	mov	r4, r2
 8002682:	461d      	mov	r5, r3
 8002684:	4643      	mov	r3, r8
 8002686:	18e3      	adds	r3, r4, r3
 8002688:	603b      	str	r3, [r7, #0]
 800268a:	464b      	mov	r3, r9
 800268c:	eb45 0303 	adc.w	r3, r5, r3
 8002690:	607b      	str	r3, [r7, #4]
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	f04f 0300 	mov.w	r3, #0
 800269a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800269e:	4629      	mov	r1, r5
 80026a0:	028b      	lsls	r3, r1, #10
 80026a2:	4621      	mov	r1, r4
 80026a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026a8:	4621      	mov	r1, r4
 80026aa:	028a      	lsls	r2, r1, #10
 80026ac:	4610      	mov	r0, r2
 80026ae:	4619      	mov	r1, r3
 80026b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026b4:	2200      	movs	r2, #0
 80026b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026b8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80026ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80026be:	f7fd fdf7 	bl	80002b0 <__aeabi_uldivmod>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4613      	mov	r3, r2
 80026c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80026cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002704 <HAL_RCC_GetSysClockFreq+0x458>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	0f1b      	lsrs	r3, r3, #28
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80026da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80026de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026ea:	e003      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026ec:	4b06      	ldr	r3, [pc, #24]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x45c>)
 80026ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	37b8      	adds	r7, #184	@ 0xb8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002702:	bf00      	nop
 8002704:	40023800 	.word	0x40023800
 8002708:	00f42400 	.word	0x00f42400

0800270c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e28d      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 8083 	beq.w	8002832 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800272c:	4b94      	ldr	r3, [pc, #592]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 030c 	and.w	r3, r3, #12
 8002734:	2b04      	cmp	r3, #4
 8002736:	d019      	beq.n	800276c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002738:	4b91      	ldr	r3, [pc, #580]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002740:	2b08      	cmp	r3, #8
 8002742:	d106      	bne.n	8002752 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002744:	4b8e      	ldr	r3, [pc, #568]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800274c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002750:	d00c      	beq.n	800276c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002752:	4b8b      	ldr	r3, [pc, #556]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800275a:	2b0c      	cmp	r3, #12
 800275c:	d112      	bne.n	8002784 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800275e:	4b88      	ldr	r3, [pc, #544]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002766:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800276a:	d10b      	bne.n	8002784 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276c:	4b84      	ldr	r3, [pc, #528]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d05b      	beq.n	8002830 <HAL_RCC_OscConfig+0x124>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d157      	bne.n	8002830 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e25a      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800278c:	d106      	bne.n	800279c <HAL_RCC_OscConfig+0x90>
 800278e:	4b7c      	ldr	r3, [pc, #496]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a7b      	ldr	r2, [pc, #492]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 8002794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	e01d      	b.n	80027d8 <HAL_RCC_OscConfig+0xcc>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCC_OscConfig+0xb4>
 80027a6:	4b76      	ldr	r3, [pc, #472]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a75      	ldr	r2, [pc, #468]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 80027ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	4b73      	ldr	r3, [pc, #460]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a72      	ldr	r2, [pc, #456]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 80027b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e00b      	b.n	80027d8 <HAL_RCC_OscConfig+0xcc>
 80027c0:	4b6f      	ldr	r3, [pc, #444]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a6e      	ldr	r2, [pc, #440]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 80027c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	4b6c      	ldr	r3, [pc, #432]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a6b      	ldr	r2, [pc, #428]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 80027d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d013      	beq.n	8002808 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e0:	f7fe faa2 	bl	8000d28 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e8:	f7fe fa9e 	bl	8000d28 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b64      	cmp	r3, #100	@ 0x64
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e21f      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fa:	4b61      	ldr	r3, [pc, #388]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0xdc>
 8002806:	e014      	b.n	8002832 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002808:	f7fe fa8e 	bl	8000d28 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002810:	f7fe fa8a 	bl	8000d28 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b64      	cmp	r3, #100	@ 0x64
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e20b      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002822:	4b57      	ldr	r3, [pc, #348]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0x104>
 800282e:	e000      	b.n	8002832 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d06f      	beq.n	800291e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800283e:	4b50      	ldr	r3, [pc, #320]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b00      	cmp	r3, #0
 8002848:	d017      	beq.n	800287a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800284a:	4b4d      	ldr	r3, [pc, #308]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002852:	2b08      	cmp	r3, #8
 8002854:	d105      	bne.n	8002862 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002856:	4b4a      	ldr	r3, [pc, #296]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00b      	beq.n	800287a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002862:	4b47      	ldr	r3, [pc, #284]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800286a:	2b0c      	cmp	r3, #12
 800286c:	d11c      	bne.n	80028a8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800286e:	4b44      	ldr	r3, [pc, #272]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d116      	bne.n	80028a8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287a:	4b41      	ldr	r3, [pc, #260]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_RCC_OscConfig+0x186>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d001      	beq.n	8002892 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e1d3      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002892:	4b3b      	ldr	r3, [pc, #236]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	4937      	ldr	r1, [pc, #220]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a6:	e03a      	b.n	800291e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d020      	beq.n	80028f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028b0:	4b34      	ldr	r3, [pc, #208]	@ (8002984 <HAL_RCC_OscConfig+0x278>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b6:	f7fe fa37 	bl	8000d28 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028be:	f7fe fa33 	bl	8000d28 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e1b4      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028dc:	4b28      	ldr	r3, [pc, #160]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4925      	ldr	r1, [pc, #148]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	600b      	str	r3, [r1, #0]
 80028f0:	e015      	b.n	800291e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028f2:	4b24      	ldr	r3, [pc, #144]	@ (8002984 <HAL_RCC_OscConfig+0x278>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7fe fa16 	bl	8000d28 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002900:	f7fe fa12 	bl	8000d28 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e193      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002912:	4b1b      	ldr	r3, [pc, #108]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d036      	beq.n	8002998 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d016      	beq.n	8002960 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002932:	4b15      	ldr	r3, [pc, #84]	@ (8002988 <HAL_RCC_OscConfig+0x27c>)
 8002934:	2201      	movs	r2, #1
 8002936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002938:	f7fe f9f6 	bl	8000d28 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002940:	f7fe f9f2 	bl	8000d28 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e173      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002952:	4b0b      	ldr	r3, [pc, #44]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 8002954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x234>
 800295e:	e01b      	b.n	8002998 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002960:	4b09      	ldr	r3, [pc, #36]	@ (8002988 <HAL_RCC_OscConfig+0x27c>)
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002966:	f7fe f9df 	bl	8000d28 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800296c:	e00e      	b.n	800298c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800296e:	f7fe f9db 	bl	8000d28 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d907      	bls.n	800298c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e15c      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
 8002980:	40023800 	.word	0x40023800
 8002984:	42470000 	.word	0x42470000
 8002988:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800298c:	4b8a      	ldr	r3, [pc, #552]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 800298e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1ea      	bne.n	800296e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 8097 	beq.w	8002ad4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029a6:	2300      	movs	r3, #0
 80029a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029aa:	4b83      	ldr	r3, [pc, #524]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10f      	bne.n	80029d6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	4b7f      	ldr	r3, [pc, #508]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	4a7e      	ldr	r2, [pc, #504]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 80029c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029c6:	4b7c      	ldr	r3, [pc, #496]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d2:	2301      	movs	r3, #1
 80029d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d6:	4b79      	ldr	r3, [pc, #484]	@ (8002bbc <HAL_RCC_OscConfig+0x4b0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d118      	bne.n	8002a14 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029e2:	4b76      	ldr	r3, [pc, #472]	@ (8002bbc <HAL_RCC_OscConfig+0x4b0>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a75      	ldr	r2, [pc, #468]	@ (8002bbc <HAL_RCC_OscConfig+0x4b0>)
 80029e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ee:	f7fe f99b 	bl	8000d28 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f6:	f7fe f997 	bl	8000d28 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e118      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a08:	4b6c      	ldr	r3, [pc, #432]	@ (8002bbc <HAL_RCC_OscConfig+0x4b0>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d106      	bne.n	8002a2a <HAL_RCC_OscConfig+0x31e>
 8002a1c:	4b66      	ldr	r3, [pc, #408]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a20:	4a65      	ldr	r2, [pc, #404]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a28:	e01c      	b.n	8002a64 <HAL_RCC_OscConfig+0x358>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2b05      	cmp	r3, #5
 8002a30:	d10c      	bne.n	8002a4c <HAL_RCC_OscConfig+0x340>
 8002a32:	4b61      	ldr	r3, [pc, #388]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a36:	4a60      	ldr	r2, [pc, #384]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a38:	f043 0304 	orr.w	r3, r3, #4
 8002a3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a3e:	4b5e      	ldr	r3, [pc, #376]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a42:	4a5d      	ldr	r2, [pc, #372]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a4a:	e00b      	b.n	8002a64 <HAL_RCC_OscConfig+0x358>
 8002a4c:	4b5a      	ldr	r3, [pc, #360]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a50:	4a59      	ldr	r2, [pc, #356]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a52:	f023 0301 	bic.w	r3, r3, #1
 8002a56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a58:	4b57      	ldr	r3, [pc, #348]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a5c:	4a56      	ldr	r2, [pc, #344]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a5e:	f023 0304 	bic.w	r3, r3, #4
 8002a62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d015      	beq.n	8002a98 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6c:	f7fe f95c 	bl	8000d28 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a74:	f7fe f958 	bl	8000d28 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e0d7      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8a:	4b4b      	ldr	r3, [pc, #300]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0ee      	beq.n	8002a74 <HAL_RCC_OscConfig+0x368>
 8002a96:	e014      	b.n	8002ac2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a98:	f7fe f946 	bl	8000d28 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa0:	f7fe f942 	bl	8000d28 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e0c1      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab6:	4b40      	ldr	r3, [pc, #256]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1ee      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ac2:	7dfb      	ldrb	r3, [r7, #23]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d105      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac8:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002acc:	4a3a      	ldr	r2, [pc, #232]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002ace:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ad2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80ad 	beq.w	8002c38 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ade:	4b36      	ldr	r3, [pc, #216]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d060      	beq.n	8002bac <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d145      	bne.n	8002b7e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af2:	4b33      	ldr	r3, [pc, #204]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b4>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af8:	f7fe f916 	bl	8000d28 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b00:	f7fe f912 	bl	8000d28 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e093      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b12:	4b29      	ldr	r3, [pc, #164]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69da      	ldr	r2, [r3, #28]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2c:	019b      	lsls	r3, r3, #6
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b34:	085b      	lsrs	r3, r3, #1
 8002b36:	3b01      	subs	r3, #1
 8002b38:	041b      	lsls	r3, r3, #16
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b40:	061b      	lsls	r3, r3, #24
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b48:	071b      	lsls	r3, r3, #28
 8002b4a:	491b      	ldr	r1, [pc, #108]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b50:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b4>)
 8002b52:	2201      	movs	r2, #1
 8002b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b56:	f7fe f8e7 	bl	8000d28 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b5e:	f7fe f8e3 	bl	8000d28 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e064      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b70:	4b11      	ldr	r3, [pc, #68]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x452>
 8002b7c:	e05c      	b.n	8002c38 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b7e:	4b10      	ldr	r3, [pc, #64]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b4>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b84:	f7fe f8d0 	bl	8000d28 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8c:	f7fe f8cc 	bl	8000d28 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e04d      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9e:	4b06      	ldr	r3, [pc, #24]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f0      	bne.n	8002b8c <HAL_RCC_OscConfig+0x480>
 8002baa:	e045      	b.n	8002c38 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d107      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e040      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	40007000 	.word	0x40007000
 8002bc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bc4:	4b1f      	ldr	r3, [pc, #124]	@ (8002c44 <HAL_RCC_OscConfig+0x538>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d030      	beq.n	8002c34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d129      	bne.n	8002c34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d122      	bne.n	8002c34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d119      	bne.n	8002c34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c0a:	085b      	lsrs	r3, r3, #1
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d10f      	bne.n	8002c34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d107      	bne.n	8002c34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d001      	beq.n	8002c38 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40023800 	.word	0x40023800

08002c48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e042      	b.n	8002ce0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d106      	bne.n	8002c74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fd fef6 	bl	8000a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2224      	movs	r2, #36	@ 0x24
 8002c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68da      	ldr	r2, [r3, #12]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f973 	bl	8002f78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ca0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695a      	ldr	r2, [r3, #20]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002cb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002cc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08a      	sub	sp, #40	@ 0x28
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b20      	cmp	r3, #32
 8002d06:	d175      	bne.n	8002df4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <HAL_UART_Transmit+0x2c>
 8002d0e:	88fb      	ldrh	r3, [r7, #6]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e06e      	b.n	8002df6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2221      	movs	r2, #33	@ 0x21
 8002d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d26:	f7fd ffff 	bl	8000d28 <HAL_GetTick>
 8002d2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	88fa      	ldrh	r2, [r7, #6]
 8002d30:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	88fa      	ldrh	r2, [r7, #6]
 8002d36:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d40:	d108      	bne.n	8002d54 <HAL_UART_Transmit+0x6c>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d104      	bne.n	8002d54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	61bb      	str	r3, [r7, #24]
 8002d52:	e003      	b.n	8002d5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d5c:	e02e      	b.n	8002dbc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	2200      	movs	r2, #0
 8002d66:	2180      	movs	r1, #128	@ 0x80
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 f848 	bl	8002dfe <UART_WaitOnFlagUntilTimeout>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e03a      	b.n	8002df6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10b      	bne.n	8002d9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	3302      	adds	r3, #2
 8002d9a:	61bb      	str	r3, [r7, #24]
 8002d9c:	e007      	b.n	8002dae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	781a      	ldrb	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	3301      	adds	r3, #1
 8002dac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1cb      	bne.n	8002d5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2140      	movs	r1, #64	@ 0x40
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 f814 	bl	8002dfe <UART_WaitOnFlagUntilTimeout>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e006      	b.n	8002df6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e000      	b.n	8002df6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
  }
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3720      	adds	r7, #32
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b086      	sub	sp, #24
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	603b      	str	r3, [r7, #0]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e0e:	e03b      	b.n	8002e88 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e16:	d037      	beq.n	8002e88 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e18:	f7fd ff86 	bl	8000d28 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	6a3a      	ldr	r2, [r7, #32]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d302      	bcc.n	8002e2e <UART_WaitOnFlagUntilTimeout+0x30>
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e03a      	b.n	8002ea8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d023      	beq.n	8002e88 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b80      	cmp	r3, #128	@ 0x80
 8002e44:	d020      	beq.n	8002e88 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b40      	cmp	r3, #64	@ 0x40
 8002e4a:	d01d      	beq.n	8002e88 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d116      	bne.n	8002e88 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	617b      	str	r3, [r7, #20]
 8002e6e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 f81d 	bl	8002eb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2208      	movs	r2, #8
 8002e7a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e00f      	b.n	8002ea8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	4013      	ands	r3, r2
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	bf0c      	ite	eq
 8002e98:	2301      	moveq	r3, #1
 8002e9a:	2300      	movne	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d0b4      	beq.n	8002e10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b095      	sub	sp, #84	@ 0x54
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	330c      	adds	r3, #12
 8002ebe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ec2:	e853 3f00 	ldrex	r3, [r3]
 8002ec6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	330c      	adds	r3, #12
 8002ed6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ed8:	643a      	str	r2, [r7, #64]	@ 0x40
 8002eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002edc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ede:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ee0:	e841 2300 	strex	r3, r2, [r1]
 8002ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1e5      	bne.n	8002eb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3314      	adds	r3, #20
 8002ef2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	e853 3f00 	ldrex	r3, [r3]
 8002efa:	61fb      	str	r3, [r7, #28]
   return(result);
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f023 0301 	bic.w	r3, r3, #1
 8002f02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	3314      	adds	r3, #20
 8002f0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f14:	e841 2300 	strex	r3, r2, [r1]
 8002f18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1e5      	bne.n	8002eec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d119      	bne.n	8002f5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	330c      	adds	r3, #12
 8002f2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	e853 3f00 	ldrex	r3, [r3]
 8002f36:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f023 0310 	bic.w	r3, r3, #16
 8002f3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	330c      	adds	r3, #12
 8002f46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f48:	61ba      	str	r2, [r7, #24]
 8002f4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4c:	6979      	ldr	r1, [r7, #20]
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	e841 2300 	strex	r3, r2, [r1]
 8002f54:	613b      	str	r3, [r7, #16]
   return(result);
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1e5      	bne.n	8002f28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002f6a:	bf00      	nop
 8002f6c:	3754      	adds	r7, #84	@ 0x54
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
	...

08002f78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f7c:	b0c0      	sub	sp, #256	@ 0x100
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f94:	68d9      	ldr	r1, [r3, #12]
 8002f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	ea40 0301 	orr.w	r3, r0, r1
 8002fa0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002fd0:	f021 010c 	bic.w	r1, r1, #12
 8002fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002fde:	430b      	orrs	r3, r1
 8002fe0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ff2:	6999      	ldr	r1, [r3, #24]
 8002ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	ea40 0301 	orr.w	r3, r0, r1
 8002ffe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	4b8f      	ldr	r3, [pc, #572]	@ (8003244 <UART_SetConfig+0x2cc>)
 8003008:	429a      	cmp	r2, r3
 800300a:	d005      	beq.n	8003018 <UART_SetConfig+0xa0>
 800300c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	4b8d      	ldr	r3, [pc, #564]	@ (8003248 <UART_SetConfig+0x2d0>)
 8003014:	429a      	cmp	r2, r3
 8003016:	d104      	bne.n	8003022 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003018:	f7ff f934 	bl	8002284 <HAL_RCC_GetPCLK2Freq>
 800301c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003020:	e003      	b.n	800302a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003022:	f7ff f91b 	bl	800225c <HAL_RCC_GetPCLK1Freq>
 8003026:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800302a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003034:	f040 810c 	bne.w	8003250 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003038:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800303c:	2200      	movs	r2, #0
 800303e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003042:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003046:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800304a:	4622      	mov	r2, r4
 800304c:	462b      	mov	r3, r5
 800304e:	1891      	adds	r1, r2, r2
 8003050:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003052:	415b      	adcs	r3, r3
 8003054:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003056:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800305a:	4621      	mov	r1, r4
 800305c:	eb12 0801 	adds.w	r8, r2, r1
 8003060:	4629      	mov	r1, r5
 8003062:	eb43 0901 	adc.w	r9, r3, r1
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	f04f 0300 	mov.w	r3, #0
 800306e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003072:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003076:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800307a:	4690      	mov	r8, r2
 800307c:	4699      	mov	r9, r3
 800307e:	4623      	mov	r3, r4
 8003080:	eb18 0303 	adds.w	r3, r8, r3
 8003084:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003088:	462b      	mov	r3, r5
 800308a:	eb49 0303 	adc.w	r3, r9, r3
 800308e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800309e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80030a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80030a6:	460b      	mov	r3, r1
 80030a8:	18db      	adds	r3, r3, r3
 80030aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80030ac:	4613      	mov	r3, r2
 80030ae:	eb42 0303 	adc.w	r3, r2, r3
 80030b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80030b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80030b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80030bc:	f7fd f8f8 	bl	80002b0 <__aeabi_uldivmod>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4b61      	ldr	r3, [pc, #388]	@ (800324c <UART_SetConfig+0x2d4>)
 80030c6:	fba3 2302 	umull	r2, r3, r3, r2
 80030ca:	095b      	lsrs	r3, r3, #5
 80030cc:	011c      	lsls	r4, r3, #4
 80030ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030d2:	2200      	movs	r2, #0
 80030d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80030d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80030dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80030e0:	4642      	mov	r2, r8
 80030e2:	464b      	mov	r3, r9
 80030e4:	1891      	adds	r1, r2, r2
 80030e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80030e8:	415b      	adcs	r3, r3
 80030ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80030f0:	4641      	mov	r1, r8
 80030f2:	eb12 0a01 	adds.w	sl, r2, r1
 80030f6:	4649      	mov	r1, r9
 80030f8:	eb43 0b01 	adc.w	fp, r3, r1
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003108:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800310c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003110:	4692      	mov	sl, r2
 8003112:	469b      	mov	fp, r3
 8003114:	4643      	mov	r3, r8
 8003116:	eb1a 0303 	adds.w	r3, sl, r3
 800311a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800311e:	464b      	mov	r3, r9
 8003120:	eb4b 0303 	adc.w	r3, fp, r3
 8003124:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003134:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003138:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800313c:	460b      	mov	r3, r1
 800313e:	18db      	adds	r3, r3, r3
 8003140:	643b      	str	r3, [r7, #64]	@ 0x40
 8003142:	4613      	mov	r3, r2
 8003144:	eb42 0303 	adc.w	r3, r2, r3
 8003148:	647b      	str	r3, [r7, #68]	@ 0x44
 800314a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800314e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003152:	f7fd f8ad 	bl	80002b0 <__aeabi_uldivmod>
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	4611      	mov	r1, r2
 800315c:	4b3b      	ldr	r3, [pc, #236]	@ (800324c <UART_SetConfig+0x2d4>)
 800315e:	fba3 2301 	umull	r2, r3, r3, r1
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	2264      	movs	r2, #100	@ 0x64
 8003166:	fb02 f303 	mul.w	r3, r2, r3
 800316a:	1acb      	subs	r3, r1, r3
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003172:	4b36      	ldr	r3, [pc, #216]	@ (800324c <UART_SetConfig+0x2d4>)
 8003174:	fba3 2302 	umull	r2, r3, r3, r2
 8003178:	095b      	lsrs	r3, r3, #5
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003180:	441c      	add	r4, r3
 8003182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003186:	2200      	movs	r2, #0
 8003188:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800318c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003190:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003194:	4642      	mov	r2, r8
 8003196:	464b      	mov	r3, r9
 8003198:	1891      	adds	r1, r2, r2
 800319a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800319c:	415b      	adcs	r3, r3
 800319e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80031a4:	4641      	mov	r1, r8
 80031a6:	1851      	adds	r1, r2, r1
 80031a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80031aa:	4649      	mov	r1, r9
 80031ac:	414b      	adcs	r3, r1
 80031ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	f04f 0300 	mov.w	r3, #0
 80031b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80031bc:	4659      	mov	r1, fp
 80031be:	00cb      	lsls	r3, r1, #3
 80031c0:	4651      	mov	r1, sl
 80031c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031c6:	4651      	mov	r1, sl
 80031c8:	00ca      	lsls	r2, r1, #3
 80031ca:	4610      	mov	r0, r2
 80031cc:	4619      	mov	r1, r3
 80031ce:	4603      	mov	r3, r0
 80031d0:	4642      	mov	r2, r8
 80031d2:	189b      	adds	r3, r3, r2
 80031d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031d8:	464b      	mov	r3, r9
 80031da:	460a      	mov	r2, r1
 80031dc:	eb42 0303 	adc.w	r3, r2, r3
 80031e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80031e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80031f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80031f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80031f8:	460b      	mov	r3, r1
 80031fa:	18db      	adds	r3, r3, r3
 80031fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031fe:	4613      	mov	r3, r2
 8003200:	eb42 0303 	adc.w	r3, r2, r3
 8003204:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003206:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800320a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800320e:	f7fd f84f 	bl	80002b0 <__aeabi_uldivmod>
 8003212:	4602      	mov	r2, r0
 8003214:	460b      	mov	r3, r1
 8003216:	4b0d      	ldr	r3, [pc, #52]	@ (800324c <UART_SetConfig+0x2d4>)
 8003218:	fba3 1302 	umull	r1, r3, r3, r2
 800321c:	095b      	lsrs	r3, r3, #5
 800321e:	2164      	movs	r1, #100	@ 0x64
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	3332      	adds	r3, #50	@ 0x32
 800322a:	4a08      	ldr	r2, [pc, #32]	@ (800324c <UART_SetConfig+0x2d4>)
 800322c:	fba2 2303 	umull	r2, r3, r2, r3
 8003230:	095b      	lsrs	r3, r3, #5
 8003232:	f003 0207 	and.w	r2, r3, #7
 8003236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4422      	add	r2, r4
 800323e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003240:	e106      	b.n	8003450 <UART_SetConfig+0x4d8>
 8003242:	bf00      	nop
 8003244:	40011000 	.word	0x40011000
 8003248:	40011400 	.word	0x40011400
 800324c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003250:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003254:	2200      	movs	r2, #0
 8003256:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800325a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800325e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003262:	4642      	mov	r2, r8
 8003264:	464b      	mov	r3, r9
 8003266:	1891      	adds	r1, r2, r2
 8003268:	6239      	str	r1, [r7, #32]
 800326a:	415b      	adcs	r3, r3
 800326c:	627b      	str	r3, [r7, #36]	@ 0x24
 800326e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003272:	4641      	mov	r1, r8
 8003274:	1854      	adds	r4, r2, r1
 8003276:	4649      	mov	r1, r9
 8003278:	eb43 0501 	adc.w	r5, r3, r1
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	00eb      	lsls	r3, r5, #3
 8003286:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800328a:	00e2      	lsls	r2, r4, #3
 800328c:	4614      	mov	r4, r2
 800328e:	461d      	mov	r5, r3
 8003290:	4643      	mov	r3, r8
 8003292:	18e3      	adds	r3, r4, r3
 8003294:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003298:	464b      	mov	r3, r9
 800329a:	eb45 0303 	adc.w	r3, r5, r3
 800329e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80032a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80032ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80032be:	4629      	mov	r1, r5
 80032c0:	008b      	lsls	r3, r1, #2
 80032c2:	4621      	mov	r1, r4
 80032c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032c8:	4621      	mov	r1, r4
 80032ca:	008a      	lsls	r2, r1, #2
 80032cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80032d0:	f7fc ffee 	bl	80002b0 <__aeabi_uldivmod>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4b60      	ldr	r3, [pc, #384]	@ (800345c <UART_SetConfig+0x4e4>)
 80032da:	fba3 2302 	umull	r2, r3, r3, r2
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	011c      	lsls	r4, r3, #4
 80032e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032e6:	2200      	movs	r2, #0
 80032e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80032ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80032f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80032f4:	4642      	mov	r2, r8
 80032f6:	464b      	mov	r3, r9
 80032f8:	1891      	adds	r1, r2, r2
 80032fa:	61b9      	str	r1, [r7, #24]
 80032fc:	415b      	adcs	r3, r3
 80032fe:	61fb      	str	r3, [r7, #28]
 8003300:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003304:	4641      	mov	r1, r8
 8003306:	1851      	adds	r1, r2, r1
 8003308:	6139      	str	r1, [r7, #16]
 800330a:	4649      	mov	r1, r9
 800330c:	414b      	adcs	r3, r1
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800331c:	4659      	mov	r1, fp
 800331e:	00cb      	lsls	r3, r1, #3
 8003320:	4651      	mov	r1, sl
 8003322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003326:	4651      	mov	r1, sl
 8003328:	00ca      	lsls	r2, r1, #3
 800332a:	4610      	mov	r0, r2
 800332c:	4619      	mov	r1, r3
 800332e:	4603      	mov	r3, r0
 8003330:	4642      	mov	r2, r8
 8003332:	189b      	adds	r3, r3, r2
 8003334:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003338:	464b      	mov	r3, r9
 800333a:	460a      	mov	r2, r1
 800333c:	eb42 0303 	adc.w	r3, r2, r3
 8003340:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800334e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800335c:	4649      	mov	r1, r9
 800335e:	008b      	lsls	r3, r1, #2
 8003360:	4641      	mov	r1, r8
 8003362:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003366:	4641      	mov	r1, r8
 8003368:	008a      	lsls	r2, r1, #2
 800336a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800336e:	f7fc ff9f 	bl	80002b0 <__aeabi_uldivmod>
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	4611      	mov	r1, r2
 8003378:	4b38      	ldr	r3, [pc, #224]	@ (800345c <UART_SetConfig+0x4e4>)
 800337a:	fba3 2301 	umull	r2, r3, r3, r1
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	2264      	movs	r2, #100	@ 0x64
 8003382:	fb02 f303 	mul.w	r3, r2, r3
 8003386:	1acb      	subs	r3, r1, r3
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	3332      	adds	r3, #50	@ 0x32
 800338c:	4a33      	ldr	r2, [pc, #204]	@ (800345c <UART_SetConfig+0x4e4>)
 800338e:	fba2 2303 	umull	r2, r3, r2, r3
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003398:	441c      	add	r4, r3
 800339a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800339e:	2200      	movs	r2, #0
 80033a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80033a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80033a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80033a8:	4642      	mov	r2, r8
 80033aa:	464b      	mov	r3, r9
 80033ac:	1891      	adds	r1, r2, r2
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	415b      	adcs	r3, r3
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033b8:	4641      	mov	r1, r8
 80033ba:	1851      	adds	r1, r2, r1
 80033bc:	6039      	str	r1, [r7, #0]
 80033be:	4649      	mov	r1, r9
 80033c0:	414b      	adcs	r3, r1
 80033c2:	607b      	str	r3, [r7, #4]
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033d0:	4659      	mov	r1, fp
 80033d2:	00cb      	lsls	r3, r1, #3
 80033d4:	4651      	mov	r1, sl
 80033d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033da:	4651      	mov	r1, sl
 80033dc:	00ca      	lsls	r2, r1, #3
 80033de:	4610      	mov	r0, r2
 80033e0:	4619      	mov	r1, r3
 80033e2:	4603      	mov	r3, r0
 80033e4:	4642      	mov	r2, r8
 80033e6:	189b      	adds	r3, r3, r2
 80033e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033ea:	464b      	mov	r3, r9
 80033ec:	460a      	mov	r2, r1
 80033ee:	eb42 0303 	adc.w	r3, r2, r3
 80033f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80033f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80033fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800340c:	4649      	mov	r1, r9
 800340e:	008b      	lsls	r3, r1, #2
 8003410:	4641      	mov	r1, r8
 8003412:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003416:	4641      	mov	r1, r8
 8003418:	008a      	lsls	r2, r1, #2
 800341a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800341e:	f7fc ff47 	bl	80002b0 <__aeabi_uldivmod>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	4b0d      	ldr	r3, [pc, #52]	@ (800345c <UART_SetConfig+0x4e4>)
 8003428:	fba3 1302 	umull	r1, r3, r3, r2
 800342c:	095b      	lsrs	r3, r3, #5
 800342e:	2164      	movs	r1, #100	@ 0x64
 8003430:	fb01 f303 	mul.w	r3, r1, r3
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	3332      	adds	r3, #50	@ 0x32
 800343a:	4a08      	ldr	r2, [pc, #32]	@ (800345c <UART_SetConfig+0x4e4>)
 800343c:	fba2 2303 	umull	r2, r3, r2, r3
 8003440:	095b      	lsrs	r3, r3, #5
 8003442:	f003 020f 	and.w	r2, r3, #15
 8003446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4422      	add	r2, r4
 800344e:	609a      	str	r2, [r3, #8]
}
 8003450:	bf00      	nop
 8003452:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003456:	46bd      	mov	sp, r7
 8003458:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800345c:	51eb851f 	.word	0x51eb851f

08003460 <siprintf>:
 8003460:	b40e      	push	{r1, r2, r3}
 8003462:	b500      	push	{lr}
 8003464:	b09c      	sub	sp, #112	@ 0x70
 8003466:	ab1d      	add	r3, sp, #116	@ 0x74
 8003468:	9002      	str	r0, [sp, #8]
 800346a:	9006      	str	r0, [sp, #24]
 800346c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003470:	4809      	ldr	r0, [pc, #36]	@ (8003498 <siprintf+0x38>)
 8003472:	9107      	str	r1, [sp, #28]
 8003474:	9104      	str	r1, [sp, #16]
 8003476:	4909      	ldr	r1, [pc, #36]	@ (800349c <siprintf+0x3c>)
 8003478:	f853 2b04 	ldr.w	r2, [r3], #4
 800347c:	9105      	str	r1, [sp, #20]
 800347e:	6800      	ldr	r0, [r0, #0]
 8003480:	9301      	str	r3, [sp, #4]
 8003482:	a902      	add	r1, sp, #8
 8003484:	f000 f994 	bl	80037b0 <_svfiprintf_r>
 8003488:	9b02      	ldr	r3, [sp, #8]
 800348a:	2200      	movs	r2, #0
 800348c:	701a      	strb	r2, [r3, #0]
 800348e:	b01c      	add	sp, #112	@ 0x70
 8003490:	f85d eb04 	ldr.w	lr, [sp], #4
 8003494:	b003      	add	sp, #12
 8003496:	4770      	bx	lr
 8003498:	2000000c 	.word	0x2000000c
 800349c:	ffff0208 	.word	0xffff0208

080034a0 <memset>:
 80034a0:	4402      	add	r2, r0
 80034a2:	4603      	mov	r3, r0
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d100      	bne.n	80034aa <memset+0xa>
 80034a8:	4770      	bx	lr
 80034aa:	f803 1b01 	strb.w	r1, [r3], #1
 80034ae:	e7f9      	b.n	80034a4 <memset+0x4>

080034b0 <__errno>:
 80034b0:	4b01      	ldr	r3, [pc, #4]	@ (80034b8 <__errno+0x8>)
 80034b2:	6818      	ldr	r0, [r3, #0]
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	2000000c 	.word	0x2000000c

080034bc <__libc_init_array>:
 80034bc:	b570      	push	{r4, r5, r6, lr}
 80034be:	4d0d      	ldr	r5, [pc, #52]	@ (80034f4 <__libc_init_array+0x38>)
 80034c0:	4c0d      	ldr	r4, [pc, #52]	@ (80034f8 <__libc_init_array+0x3c>)
 80034c2:	1b64      	subs	r4, r4, r5
 80034c4:	10a4      	asrs	r4, r4, #2
 80034c6:	2600      	movs	r6, #0
 80034c8:	42a6      	cmp	r6, r4
 80034ca:	d109      	bne.n	80034e0 <__libc_init_array+0x24>
 80034cc:	4d0b      	ldr	r5, [pc, #44]	@ (80034fc <__libc_init_array+0x40>)
 80034ce:	4c0c      	ldr	r4, [pc, #48]	@ (8003500 <__libc_init_array+0x44>)
 80034d0:	f000 fc66 	bl	8003da0 <_init>
 80034d4:	1b64      	subs	r4, r4, r5
 80034d6:	10a4      	asrs	r4, r4, #2
 80034d8:	2600      	movs	r6, #0
 80034da:	42a6      	cmp	r6, r4
 80034dc:	d105      	bne.n	80034ea <__libc_init_array+0x2e>
 80034de:	bd70      	pop	{r4, r5, r6, pc}
 80034e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80034e4:	4798      	blx	r3
 80034e6:	3601      	adds	r6, #1
 80034e8:	e7ee      	b.n	80034c8 <__libc_init_array+0xc>
 80034ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ee:	4798      	blx	r3
 80034f0:	3601      	adds	r6, #1
 80034f2:	e7f2      	b.n	80034da <__libc_init_array+0x1e>
 80034f4:	08003e14 	.word	0x08003e14
 80034f8:	08003e14 	.word	0x08003e14
 80034fc:	08003e14 	.word	0x08003e14
 8003500:	08003e18 	.word	0x08003e18

08003504 <__retarget_lock_acquire_recursive>:
 8003504:	4770      	bx	lr

08003506 <__retarget_lock_release_recursive>:
 8003506:	4770      	bx	lr

08003508 <_free_r>:
 8003508:	b538      	push	{r3, r4, r5, lr}
 800350a:	4605      	mov	r5, r0
 800350c:	2900      	cmp	r1, #0
 800350e:	d041      	beq.n	8003594 <_free_r+0x8c>
 8003510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003514:	1f0c      	subs	r4, r1, #4
 8003516:	2b00      	cmp	r3, #0
 8003518:	bfb8      	it	lt
 800351a:	18e4      	addlt	r4, r4, r3
 800351c:	f000 f8e0 	bl	80036e0 <__malloc_lock>
 8003520:	4a1d      	ldr	r2, [pc, #116]	@ (8003598 <_free_r+0x90>)
 8003522:	6813      	ldr	r3, [r2, #0]
 8003524:	b933      	cbnz	r3, 8003534 <_free_r+0x2c>
 8003526:	6063      	str	r3, [r4, #4]
 8003528:	6014      	str	r4, [r2, #0]
 800352a:	4628      	mov	r0, r5
 800352c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003530:	f000 b8dc 	b.w	80036ec <__malloc_unlock>
 8003534:	42a3      	cmp	r3, r4
 8003536:	d908      	bls.n	800354a <_free_r+0x42>
 8003538:	6820      	ldr	r0, [r4, #0]
 800353a:	1821      	adds	r1, r4, r0
 800353c:	428b      	cmp	r3, r1
 800353e:	bf01      	itttt	eq
 8003540:	6819      	ldreq	r1, [r3, #0]
 8003542:	685b      	ldreq	r3, [r3, #4]
 8003544:	1809      	addeq	r1, r1, r0
 8003546:	6021      	streq	r1, [r4, #0]
 8003548:	e7ed      	b.n	8003526 <_free_r+0x1e>
 800354a:	461a      	mov	r2, r3
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	b10b      	cbz	r3, 8003554 <_free_r+0x4c>
 8003550:	42a3      	cmp	r3, r4
 8003552:	d9fa      	bls.n	800354a <_free_r+0x42>
 8003554:	6811      	ldr	r1, [r2, #0]
 8003556:	1850      	adds	r0, r2, r1
 8003558:	42a0      	cmp	r0, r4
 800355a:	d10b      	bne.n	8003574 <_free_r+0x6c>
 800355c:	6820      	ldr	r0, [r4, #0]
 800355e:	4401      	add	r1, r0
 8003560:	1850      	adds	r0, r2, r1
 8003562:	4283      	cmp	r3, r0
 8003564:	6011      	str	r1, [r2, #0]
 8003566:	d1e0      	bne.n	800352a <_free_r+0x22>
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	6053      	str	r3, [r2, #4]
 800356e:	4408      	add	r0, r1
 8003570:	6010      	str	r0, [r2, #0]
 8003572:	e7da      	b.n	800352a <_free_r+0x22>
 8003574:	d902      	bls.n	800357c <_free_r+0x74>
 8003576:	230c      	movs	r3, #12
 8003578:	602b      	str	r3, [r5, #0]
 800357a:	e7d6      	b.n	800352a <_free_r+0x22>
 800357c:	6820      	ldr	r0, [r4, #0]
 800357e:	1821      	adds	r1, r4, r0
 8003580:	428b      	cmp	r3, r1
 8003582:	bf04      	itt	eq
 8003584:	6819      	ldreq	r1, [r3, #0]
 8003586:	685b      	ldreq	r3, [r3, #4]
 8003588:	6063      	str	r3, [r4, #4]
 800358a:	bf04      	itt	eq
 800358c:	1809      	addeq	r1, r1, r0
 800358e:	6021      	streq	r1, [r4, #0]
 8003590:	6054      	str	r4, [r2, #4]
 8003592:	e7ca      	b.n	800352a <_free_r+0x22>
 8003594:	bd38      	pop	{r3, r4, r5, pc}
 8003596:	bf00      	nop
 8003598:	2000027c 	.word	0x2000027c

0800359c <sbrk_aligned>:
 800359c:	b570      	push	{r4, r5, r6, lr}
 800359e:	4e0f      	ldr	r6, [pc, #60]	@ (80035dc <sbrk_aligned+0x40>)
 80035a0:	460c      	mov	r4, r1
 80035a2:	6831      	ldr	r1, [r6, #0]
 80035a4:	4605      	mov	r5, r0
 80035a6:	b911      	cbnz	r1, 80035ae <sbrk_aligned+0x12>
 80035a8:	f000 fba6 	bl	8003cf8 <_sbrk_r>
 80035ac:	6030      	str	r0, [r6, #0]
 80035ae:	4621      	mov	r1, r4
 80035b0:	4628      	mov	r0, r5
 80035b2:	f000 fba1 	bl	8003cf8 <_sbrk_r>
 80035b6:	1c43      	adds	r3, r0, #1
 80035b8:	d103      	bne.n	80035c2 <sbrk_aligned+0x26>
 80035ba:	f04f 34ff 	mov.w	r4, #4294967295
 80035be:	4620      	mov	r0, r4
 80035c0:	bd70      	pop	{r4, r5, r6, pc}
 80035c2:	1cc4      	adds	r4, r0, #3
 80035c4:	f024 0403 	bic.w	r4, r4, #3
 80035c8:	42a0      	cmp	r0, r4
 80035ca:	d0f8      	beq.n	80035be <sbrk_aligned+0x22>
 80035cc:	1a21      	subs	r1, r4, r0
 80035ce:	4628      	mov	r0, r5
 80035d0:	f000 fb92 	bl	8003cf8 <_sbrk_r>
 80035d4:	3001      	adds	r0, #1
 80035d6:	d1f2      	bne.n	80035be <sbrk_aligned+0x22>
 80035d8:	e7ef      	b.n	80035ba <sbrk_aligned+0x1e>
 80035da:	bf00      	nop
 80035dc:	20000278 	.word	0x20000278

080035e0 <_malloc_r>:
 80035e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035e4:	1ccd      	adds	r5, r1, #3
 80035e6:	f025 0503 	bic.w	r5, r5, #3
 80035ea:	3508      	adds	r5, #8
 80035ec:	2d0c      	cmp	r5, #12
 80035ee:	bf38      	it	cc
 80035f0:	250c      	movcc	r5, #12
 80035f2:	2d00      	cmp	r5, #0
 80035f4:	4606      	mov	r6, r0
 80035f6:	db01      	blt.n	80035fc <_malloc_r+0x1c>
 80035f8:	42a9      	cmp	r1, r5
 80035fa:	d904      	bls.n	8003606 <_malloc_r+0x26>
 80035fc:	230c      	movs	r3, #12
 80035fe:	6033      	str	r3, [r6, #0]
 8003600:	2000      	movs	r0, #0
 8003602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003606:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80036dc <_malloc_r+0xfc>
 800360a:	f000 f869 	bl	80036e0 <__malloc_lock>
 800360e:	f8d8 3000 	ldr.w	r3, [r8]
 8003612:	461c      	mov	r4, r3
 8003614:	bb44      	cbnz	r4, 8003668 <_malloc_r+0x88>
 8003616:	4629      	mov	r1, r5
 8003618:	4630      	mov	r0, r6
 800361a:	f7ff ffbf 	bl	800359c <sbrk_aligned>
 800361e:	1c43      	adds	r3, r0, #1
 8003620:	4604      	mov	r4, r0
 8003622:	d158      	bne.n	80036d6 <_malloc_r+0xf6>
 8003624:	f8d8 4000 	ldr.w	r4, [r8]
 8003628:	4627      	mov	r7, r4
 800362a:	2f00      	cmp	r7, #0
 800362c:	d143      	bne.n	80036b6 <_malloc_r+0xd6>
 800362e:	2c00      	cmp	r4, #0
 8003630:	d04b      	beq.n	80036ca <_malloc_r+0xea>
 8003632:	6823      	ldr	r3, [r4, #0]
 8003634:	4639      	mov	r1, r7
 8003636:	4630      	mov	r0, r6
 8003638:	eb04 0903 	add.w	r9, r4, r3
 800363c:	f000 fb5c 	bl	8003cf8 <_sbrk_r>
 8003640:	4581      	cmp	r9, r0
 8003642:	d142      	bne.n	80036ca <_malloc_r+0xea>
 8003644:	6821      	ldr	r1, [r4, #0]
 8003646:	1a6d      	subs	r5, r5, r1
 8003648:	4629      	mov	r1, r5
 800364a:	4630      	mov	r0, r6
 800364c:	f7ff ffa6 	bl	800359c <sbrk_aligned>
 8003650:	3001      	adds	r0, #1
 8003652:	d03a      	beq.n	80036ca <_malloc_r+0xea>
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	442b      	add	r3, r5
 8003658:	6023      	str	r3, [r4, #0]
 800365a:	f8d8 3000 	ldr.w	r3, [r8]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	bb62      	cbnz	r2, 80036bc <_malloc_r+0xdc>
 8003662:	f8c8 7000 	str.w	r7, [r8]
 8003666:	e00f      	b.n	8003688 <_malloc_r+0xa8>
 8003668:	6822      	ldr	r2, [r4, #0]
 800366a:	1b52      	subs	r2, r2, r5
 800366c:	d420      	bmi.n	80036b0 <_malloc_r+0xd0>
 800366e:	2a0b      	cmp	r2, #11
 8003670:	d917      	bls.n	80036a2 <_malloc_r+0xc2>
 8003672:	1961      	adds	r1, r4, r5
 8003674:	42a3      	cmp	r3, r4
 8003676:	6025      	str	r5, [r4, #0]
 8003678:	bf18      	it	ne
 800367a:	6059      	strne	r1, [r3, #4]
 800367c:	6863      	ldr	r3, [r4, #4]
 800367e:	bf08      	it	eq
 8003680:	f8c8 1000 	streq.w	r1, [r8]
 8003684:	5162      	str	r2, [r4, r5]
 8003686:	604b      	str	r3, [r1, #4]
 8003688:	4630      	mov	r0, r6
 800368a:	f000 f82f 	bl	80036ec <__malloc_unlock>
 800368e:	f104 000b 	add.w	r0, r4, #11
 8003692:	1d23      	adds	r3, r4, #4
 8003694:	f020 0007 	bic.w	r0, r0, #7
 8003698:	1ac2      	subs	r2, r0, r3
 800369a:	bf1c      	itt	ne
 800369c:	1a1b      	subne	r3, r3, r0
 800369e:	50a3      	strne	r3, [r4, r2]
 80036a0:	e7af      	b.n	8003602 <_malloc_r+0x22>
 80036a2:	6862      	ldr	r2, [r4, #4]
 80036a4:	42a3      	cmp	r3, r4
 80036a6:	bf0c      	ite	eq
 80036a8:	f8c8 2000 	streq.w	r2, [r8]
 80036ac:	605a      	strne	r2, [r3, #4]
 80036ae:	e7eb      	b.n	8003688 <_malloc_r+0xa8>
 80036b0:	4623      	mov	r3, r4
 80036b2:	6864      	ldr	r4, [r4, #4]
 80036b4:	e7ae      	b.n	8003614 <_malloc_r+0x34>
 80036b6:	463c      	mov	r4, r7
 80036b8:	687f      	ldr	r7, [r7, #4]
 80036ba:	e7b6      	b.n	800362a <_malloc_r+0x4a>
 80036bc:	461a      	mov	r2, r3
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	42a3      	cmp	r3, r4
 80036c2:	d1fb      	bne.n	80036bc <_malloc_r+0xdc>
 80036c4:	2300      	movs	r3, #0
 80036c6:	6053      	str	r3, [r2, #4]
 80036c8:	e7de      	b.n	8003688 <_malloc_r+0xa8>
 80036ca:	230c      	movs	r3, #12
 80036cc:	6033      	str	r3, [r6, #0]
 80036ce:	4630      	mov	r0, r6
 80036d0:	f000 f80c 	bl	80036ec <__malloc_unlock>
 80036d4:	e794      	b.n	8003600 <_malloc_r+0x20>
 80036d6:	6005      	str	r5, [r0, #0]
 80036d8:	e7d6      	b.n	8003688 <_malloc_r+0xa8>
 80036da:	bf00      	nop
 80036dc:	2000027c 	.word	0x2000027c

080036e0 <__malloc_lock>:
 80036e0:	4801      	ldr	r0, [pc, #4]	@ (80036e8 <__malloc_lock+0x8>)
 80036e2:	f7ff bf0f 	b.w	8003504 <__retarget_lock_acquire_recursive>
 80036e6:	bf00      	nop
 80036e8:	20000274 	.word	0x20000274

080036ec <__malloc_unlock>:
 80036ec:	4801      	ldr	r0, [pc, #4]	@ (80036f4 <__malloc_unlock+0x8>)
 80036ee:	f7ff bf0a 	b.w	8003506 <__retarget_lock_release_recursive>
 80036f2:	bf00      	nop
 80036f4:	20000274 	.word	0x20000274

080036f8 <__ssputs_r>:
 80036f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036fc:	688e      	ldr	r6, [r1, #8]
 80036fe:	461f      	mov	r7, r3
 8003700:	42be      	cmp	r6, r7
 8003702:	680b      	ldr	r3, [r1, #0]
 8003704:	4682      	mov	sl, r0
 8003706:	460c      	mov	r4, r1
 8003708:	4690      	mov	r8, r2
 800370a:	d82d      	bhi.n	8003768 <__ssputs_r+0x70>
 800370c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003710:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003714:	d026      	beq.n	8003764 <__ssputs_r+0x6c>
 8003716:	6965      	ldr	r5, [r4, #20]
 8003718:	6909      	ldr	r1, [r1, #16]
 800371a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800371e:	eba3 0901 	sub.w	r9, r3, r1
 8003722:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003726:	1c7b      	adds	r3, r7, #1
 8003728:	444b      	add	r3, r9
 800372a:	106d      	asrs	r5, r5, #1
 800372c:	429d      	cmp	r5, r3
 800372e:	bf38      	it	cc
 8003730:	461d      	movcc	r5, r3
 8003732:	0553      	lsls	r3, r2, #21
 8003734:	d527      	bpl.n	8003786 <__ssputs_r+0x8e>
 8003736:	4629      	mov	r1, r5
 8003738:	f7ff ff52 	bl	80035e0 <_malloc_r>
 800373c:	4606      	mov	r6, r0
 800373e:	b360      	cbz	r0, 800379a <__ssputs_r+0xa2>
 8003740:	6921      	ldr	r1, [r4, #16]
 8003742:	464a      	mov	r2, r9
 8003744:	f000 fae8 	bl	8003d18 <memcpy>
 8003748:	89a3      	ldrh	r3, [r4, #12]
 800374a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800374e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003752:	81a3      	strh	r3, [r4, #12]
 8003754:	6126      	str	r6, [r4, #16]
 8003756:	6165      	str	r5, [r4, #20]
 8003758:	444e      	add	r6, r9
 800375a:	eba5 0509 	sub.w	r5, r5, r9
 800375e:	6026      	str	r6, [r4, #0]
 8003760:	60a5      	str	r5, [r4, #8]
 8003762:	463e      	mov	r6, r7
 8003764:	42be      	cmp	r6, r7
 8003766:	d900      	bls.n	800376a <__ssputs_r+0x72>
 8003768:	463e      	mov	r6, r7
 800376a:	6820      	ldr	r0, [r4, #0]
 800376c:	4632      	mov	r2, r6
 800376e:	4641      	mov	r1, r8
 8003770:	f000 faa8 	bl	8003cc4 <memmove>
 8003774:	68a3      	ldr	r3, [r4, #8]
 8003776:	1b9b      	subs	r3, r3, r6
 8003778:	60a3      	str	r3, [r4, #8]
 800377a:	6823      	ldr	r3, [r4, #0]
 800377c:	4433      	add	r3, r6
 800377e:	6023      	str	r3, [r4, #0]
 8003780:	2000      	movs	r0, #0
 8003782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003786:	462a      	mov	r2, r5
 8003788:	f000 fad4 	bl	8003d34 <_realloc_r>
 800378c:	4606      	mov	r6, r0
 800378e:	2800      	cmp	r0, #0
 8003790:	d1e0      	bne.n	8003754 <__ssputs_r+0x5c>
 8003792:	6921      	ldr	r1, [r4, #16]
 8003794:	4650      	mov	r0, sl
 8003796:	f7ff feb7 	bl	8003508 <_free_r>
 800379a:	230c      	movs	r3, #12
 800379c:	f8ca 3000 	str.w	r3, [sl]
 80037a0:	89a3      	ldrh	r3, [r4, #12]
 80037a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037a6:	81a3      	strh	r3, [r4, #12]
 80037a8:	f04f 30ff 	mov.w	r0, #4294967295
 80037ac:	e7e9      	b.n	8003782 <__ssputs_r+0x8a>
	...

080037b0 <_svfiprintf_r>:
 80037b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037b4:	4698      	mov	r8, r3
 80037b6:	898b      	ldrh	r3, [r1, #12]
 80037b8:	061b      	lsls	r3, r3, #24
 80037ba:	b09d      	sub	sp, #116	@ 0x74
 80037bc:	4607      	mov	r7, r0
 80037be:	460d      	mov	r5, r1
 80037c0:	4614      	mov	r4, r2
 80037c2:	d510      	bpl.n	80037e6 <_svfiprintf_r+0x36>
 80037c4:	690b      	ldr	r3, [r1, #16]
 80037c6:	b973      	cbnz	r3, 80037e6 <_svfiprintf_r+0x36>
 80037c8:	2140      	movs	r1, #64	@ 0x40
 80037ca:	f7ff ff09 	bl	80035e0 <_malloc_r>
 80037ce:	6028      	str	r0, [r5, #0]
 80037d0:	6128      	str	r0, [r5, #16]
 80037d2:	b930      	cbnz	r0, 80037e2 <_svfiprintf_r+0x32>
 80037d4:	230c      	movs	r3, #12
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	f04f 30ff 	mov.w	r0, #4294967295
 80037dc:	b01d      	add	sp, #116	@ 0x74
 80037de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037e2:	2340      	movs	r3, #64	@ 0x40
 80037e4:	616b      	str	r3, [r5, #20]
 80037e6:	2300      	movs	r3, #0
 80037e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80037ea:	2320      	movs	r3, #32
 80037ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80037f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80037f4:	2330      	movs	r3, #48	@ 0x30
 80037f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003994 <_svfiprintf_r+0x1e4>
 80037fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80037fe:	f04f 0901 	mov.w	r9, #1
 8003802:	4623      	mov	r3, r4
 8003804:	469a      	mov	sl, r3
 8003806:	f813 2b01 	ldrb.w	r2, [r3], #1
 800380a:	b10a      	cbz	r2, 8003810 <_svfiprintf_r+0x60>
 800380c:	2a25      	cmp	r2, #37	@ 0x25
 800380e:	d1f9      	bne.n	8003804 <_svfiprintf_r+0x54>
 8003810:	ebba 0b04 	subs.w	fp, sl, r4
 8003814:	d00b      	beq.n	800382e <_svfiprintf_r+0x7e>
 8003816:	465b      	mov	r3, fp
 8003818:	4622      	mov	r2, r4
 800381a:	4629      	mov	r1, r5
 800381c:	4638      	mov	r0, r7
 800381e:	f7ff ff6b 	bl	80036f8 <__ssputs_r>
 8003822:	3001      	adds	r0, #1
 8003824:	f000 80a7 	beq.w	8003976 <_svfiprintf_r+0x1c6>
 8003828:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800382a:	445a      	add	r2, fp
 800382c:	9209      	str	r2, [sp, #36]	@ 0x24
 800382e:	f89a 3000 	ldrb.w	r3, [sl]
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 809f 	beq.w	8003976 <_svfiprintf_r+0x1c6>
 8003838:	2300      	movs	r3, #0
 800383a:	f04f 32ff 	mov.w	r2, #4294967295
 800383e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003842:	f10a 0a01 	add.w	sl, sl, #1
 8003846:	9304      	str	r3, [sp, #16]
 8003848:	9307      	str	r3, [sp, #28]
 800384a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800384e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003850:	4654      	mov	r4, sl
 8003852:	2205      	movs	r2, #5
 8003854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003858:	484e      	ldr	r0, [pc, #312]	@ (8003994 <_svfiprintf_r+0x1e4>)
 800385a:	f7fc fcd9 	bl	8000210 <memchr>
 800385e:	9a04      	ldr	r2, [sp, #16]
 8003860:	b9d8      	cbnz	r0, 800389a <_svfiprintf_r+0xea>
 8003862:	06d0      	lsls	r0, r2, #27
 8003864:	bf44      	itt	mi
 8003866:	2320      	movmi	r3, #32
 8003868:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800386c:	0711      	lsls	r1, r2, #28
 800386e:	bf44      	itt	mi
 8003870:	232b      	movmi	r3, #43	@ 0x2b
 8003872:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003876:	f89a 3000 	ldrb.w	r3, [sl]
 800387a:	2b2a      	cmp	r3, #42	@ 0x2a
 800387c:	d015      	beq.n	80038aa <_svfiprintf_r+0xfa>
 800387e:	9a07      	ldr	r2, [sp, #28]
 8003880:	4654      	mov	r4, sl
 8003882:	2000      	movs	r0, #0
 8003884:	f04f 0c0a 	mov.w	ip, #10
 8003888:	4621      	mov	r1, r4
 800388a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800388e:	3b30      	subs	r3, #48	@ 0x30
 8003890:	2b09      	cmp	r3, #9
 8003892:	d94b      	bls.n	800392c <_svfiprintf_r+0x17c>
 8003894:	b1b0      	cbz	r0, 80038c4 <_svfiprintf_r+0x114>
 8003896:	9207      	str	r2, [sp, #28]
 8003898:	e014      	b.n	80038c4 <_svfiprintf_r+0x114>
 800389a:	eba0 0308 	sub.w	r3, r0, r8
 800389e:	fa09 f303 	lsl.w	r3, r9, r3
 80038a2:	4313      	orrs	r3, r2
 80038a4:	9304      	str	r3, [sp, #16]
 80038a6:	46a2      	mov	sl, r4
 80038a8:	e7d2      	b.n	8003850 <_svfiprintf_r+0xa0>
 80038aa:	9b03      	ldr	r3, [sp, #12]
 80038ac:	1d19      	adds	r1, r3, #4
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	9103      	str	r1, [sp, #12]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	bfbb      	ittet	lt
 80038b6:	425b      	neglt	r3, r3
 80038b8:	f042 0202 	orrlt.w	r2, r2, #2
 80038bc:	9307      	strge	r3, [sp, #28]
 80038be:	9307      	strlt	r3, [sp, #28]
 80038c0:	bfb8      	it	lt
 80038c2:	9204      	strlt	r2, [sp, #16]
 80038c4:	7823      	ldrb	r3, [r4, #0]
 80038c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80038c8:	d10a      	bne.n	80038e0 <_svfiprintf_r+0x130>
 80038ca:	7863      	ldrb	r3, [r4, #1]
 80038cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80038ce:	d132      	bne.n	8003936 <_svfiprintf_r+0x186>
 80038d0:	9b03      	ldr	r3, [sp, #12]
 80038d2:	1d1a      	adds	r2, r3, #4
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	9203      	str	r2, [sp, #12]
 80038d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80038dc:	3402      	adds	r4, #2
 80038de:	9305      	str	r3, [sp, #20]
 80038e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80039a4 <_svfiprintf_r+0x1f4>
 80038e4:	7821      	ldrb	r1, [r4, #0]
 80038e6:	2203      	movs	r2, #3
 80038e8:	4650      	mov	r0, sl
 80038ea:	f7fc fc91 	bl	8000210 <memchr>
 80038ee:	b138      	cbz	r0, 8003900 <_svfiprintf_r+0x150>
 80038f0:	9b04      	ldr	r3, [sp, #16]
 80038f2:	eba0 000a 	sub.w	r0, r0, sl
 80038f6:	2240      	movs	r2, #64	@ 0x40
 80038f8:	4082      	lsls	r2, r0
 80038fa:	4313      	orrs	r3, r2
 80038fc:	3401      	adds	r4, #1
 80038fe:	9304      	str	r3, [sp, #16]
 8003900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003904:	4824      	ldr	r0, [pc, #144]	@ (8003998 <_svfiprintf_r+0x1e8>)
 8003906:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800390a:	2206      	movs	r2, #6
 800390c:	f7fc fc80 	bl	8000210 <memchr>
 8003910:	2800      	cmp	r0, #0
 8003912:	d036      	beq.n	8003982 <_svfiprintf_r+0x1d2>
 8003914:	4b21      	ldr	r3, [pc, #132]	@ (800399c <_svfiprintf_r+0x1ec>)
 8003916:	bb1b      	cbnz	r3, 8003960 <_svfiprintf_r+0x1b0>
 8003918:	9b03      	ldr	r3, [sp, #12]
 800391a:	3307      	adds	r3, #7
 800391c:	f023 0307 	bic.w	r3, r3, #7
 8003920:	3308      	adds	r3, #8
 8003922:	9303      	str	r3, [sp, #12]
 8003924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003926:	4433      	add	r3, r6
 8003928:	9309      	str	r3, [sp, #36]	@ 0x24
 800392a:	e76a      	b.n	8003802 <_svfiprintf_r+0x52>
 800392c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003930:	460c      	mov	r4, r1
 8003932:	2001      	movs	r0, #1
 8003934:	e7a8      	b.n	8003888 <_svfiprintf_r+0xd8>
 8003936:	2300      	movs	r3, #0
 8003938:	3401      	adds	r4, #1
 800393a:	9305      	str	r3, [sp, #20]
 800393c:	4619      	mov	r1, r3
 800393e:	f04f 0c0a 	mov.w	ip, #10
 8003942:	4620      	mov	r0, r4
 8003944:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003948:	3a30      	subs	r2, #48	@ 0x30
 800394a:	2a09      	cmp	r2, #9
 800394c:	d903      	bls.n	8003956 <_svfiprintf_r+0x1a6>
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0c6      	beq.n	80038e0 <_svfiprintf_r+0x130>
 8003952:	9105      	str	r1, [sp, #20]
 8003954:	e7c4      	b.n	80038e0 <_svfiprintf_r+0x130>
 8003956:	fb0c 2101 	mla	r1, ip, r1, r2
 800395a:	4604      	mov	r4, r0
 800395c:	2301      	movs	r3, #1
 800395e:	e7f0      	b.n	8003942 <_svfiprintf_r+0x192>
 8003960:	ab03      	add	r3, sp, #12
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	462a      	mov	r2, r5
 8003966:	4b0e      	ldr	r3, [pc, #56]	@ (80039a0 <_svfiprintf_r+0x1f0>)
 8003968:	a904      	add	r1, sp, #16
 800396a:	4638      	mov	r0, r7
 800396c:	f3af 8000 	nop.w
 8003970:	1c42      	adds	r2, r0, #1
 8003972:	4606      	mov	r6, r0
 8003974:	d1d6      	bne.n	8003924 <_svfiprintf_r+0x174>
 8003976:	89ab      	ldrh	r3, [r5, #12]
 8003978:	065b      	lsls	r3, r3, #25
 800397a:	f53f af2d 	bmi.w	80037d8 <_svfiprintf_r+0x28>
 800397e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003980:	e72c      	b.n	80037dc <_svfiprintf_r+0x2c>
 8003982:	ab03      	add	r3, sp, #12
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	462a      	mov	r2, r5
 8003988:	4b05      	ldr	r3, [pc, #20]	@ (80039a0 <_svfiprintf_r+0x1f0>)
 800398a:	a904      	add	r1, sp, #16
 800398c:	4638      	mov	r0, r7
 800398e:	f000 f879 	bl	8003a84 <_printf_i>
 8003992:	e7ed      	b.n	8003970 <_svfiprintf_r+0x1c0>
 8003994:	08003dd8 	.word	0x08003dd8
 8003998:	08003de2 	.word	0x08003de2
 800399c:	00000000 	.word	0x00000000
 80039a0:	080036f9 	.word	0x080036f9
 80039a4:	08003dde 	.word	0x08003dde

080039a8 <_printf_common>:
 80039a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039ac:	4616      	mov	r6, r2
 80039ae:	4698      	mov	r8, r3
 80039b0:	688a      	ldr	r2, [r1, #8]
 80039b2:	690b      	ldr	r3, [r1, #16]
 80039b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80039b8:	4293      	cmp	r3, r2
 80039ba:	bfb8      	it	lt
 80039bc:	4613      	movlt	r3, r2
 80039be:	6033      	str	r3, [r6, #0]
 80039c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80039c4:	4607      	mov	r7, r0
 80039c6:	460c      	mov	r4, r1
 80039c8:	b10a      	cbz	r2, 80039ce <_printf_common+0x26>
 80039ca:	3301      	adds	r3, #1
 80039cc:	6033      	str	r3, [r6, #0]
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	0699      	lsls	r1, r3, #26
 80039d2:	bf42      	ittt	mi
 80039d4:	6833      	ldrmi	r3, [r6, #0]
 80039d6:	3302      	addmi	r3, #2
 80039d8:	6033      	strmi	r3, [r6, #0]
 80039da:	6825      	ldr	r5, [r4, #0]
 80039dc:	f015 0506 	ands.w	r5, r5, #6
 80039e0:	d106      	bne.n	80039f0 <_printf_common+0x48>
 80039e2:	f104 0a19 	add.w	sl, r4, #25
 80039e6:	68e3      	ldr	r3, [r4, #12]
 80039e8:	6832      	ldr	r2, [r6, #0]
 80039ea:	1a9b      	subs	r3, r3, r2
 80039ec:	42ab      	cmp	r3, r5
 80039ee:	dc26      	bgt.n	8003a3e <_printf_common+0x96>
 80039f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80039f4:	6822      	ldr	r2, [r4, #0]
 80039f6:	3b00      	subs	r3, #0
 80039f8:	bf18      	it	ne
 80039fa:	2301      	movne	r3, #1
 80039fc:	0692      	lsls	r2, r2, #26
 80039fe:	d42b      	bmi.n	8003a58 <_printf_common+0xb0>
 8003a00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003a04:	4641      	mov	r1, r8
 8003a06:	4638      	mov	r0, r7
 8003a08:	47c8      	blx	r9
 8003a0a:	3001      	adds	r0, #1
 8003a0c:	d01e      	beq.n	8003a4c <_printf_common+0xa4>
 8003a0e:	6823      	ldr	r3, [r4, #0]
 8003a10:	6922      	ldr	r2, [r4, #16]
 8003a12:	f003 0306 	and.w	r3, r3, #6
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	bf02      	ittt	eq
 8003a1a:	68e5      	ldreq	r5, [r4, #12]
 8003a1c:	6833      	ldreq	r3, [r6, #0]
 8003a1e:	1aed      	subeq	r5, r5, r3
 8003a20:	68a3      	ldr	r3, [r4, #8]
 8003a22:	bf0c      	ite	eq
 8003a24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a28:	2500      	movne	r5, #0
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	bfc4      	itt	gt
 8003a2e:	1a9b      	subgt	r3, r3, r2
 8003a30:	18ed      	addgt	r5, r5, r3
 8003a32:	2600      	movs	r6, #0
 8003a34:	341a      	adds	r4, #26
 8003a36:	42b5      	cmp	r5, r6
 8003a38:	d11a      	bne.n	8003a70 <_printf_common+0xc8>
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	e008      	b.n	8003a50 <_printf_common+0xa8>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	4652      	mov	r2, sl
 8003a42:	4641      	mov	r1, r8
 8003a44:	4638      	mov	r0, r7
 8003a46:	47c8      	blx	r9
 8003a48:	3001      	adds	r0, #1
 8003a4a:	d103      	bne.n	8003a54 <_printf_common+0xac>
 8003a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a54:	3501      	adds	r5, #1
 8003a56:	e7c6      	b.n	80039e6 <_printf_common+0x3e>
 8003a58:	18e1      	adds	r1, r4, r3
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	2030      	movs	r0, #48	@ 0x30
 8003a5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003a62:	4422      	add	r2, r4
 8003a64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003a68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003a6c:	3302      	adds	r3, #2
 8003a6e:	e7c7      	b.n	8003a00 <_printf_common+0x58>
 8003a70:	2301      	movs	r3, #1
 8003a72:	4622      	mov	r2, r4
 8003a74:	4641      	mov	r1, r8
 8003a76:	4638      	mov	r0, r7
 8003a78:	47c8      	blx	r9
 8003a7a:	3001      	adds	r0, #1
 8003a7c:	d0e6      	beq.n	8003a4c <_printf_common+0xa4>
 8003a7e:	3601      	adds	r6, #1
 8003a80:	e7d9      	b.n	8003a36 <_printf_common+0x8e>
	...

08003a84 <_printf_i>:
 8003a84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a88:	7e0f      	ldrb	r7, [r1, #24]
 8003a8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003a8c:	2f78      	cmp	r7, #120	@ 0x78
 8003a8e:	4691      	mov	r9, r2
 8003a90:	4680      	mov	r8, r0
 8003a92:	460c      	mov	r4, r1
 8003a94:	469a      	mov	sl, r3
 8003a96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003a9a:	d807      	bhi.n	8003aac <_printf_i+0x28>
 8003a9c:	2f62      	cmp	r7, #98	@ 0x62
 8003a9e:	d80a      	bhi.n	8003ab6 <_printf_i+0x32>
 8003aa0:	2f00      	cmp	r7, #0
 8003aa2:	f000 80d2 	beq.w	8003c4a <_printf_i+0x1c6>
 8003aa6:	2f58      	cmp	r7, #88	@ 0x58
 8003aa8:	f000 80b9 	beq.w	8003c1e <_printf_i+0x19a>
 8003aac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ab0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ab4:	e03a      	b.n	8003b2c <_printf_i+0xa8>
 8003ab6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003aba:	2b15      	cmp	r3, #21
 8003abc:	d8f6      	bhi.n	8003aac <_printf_i+0x28>
 8003abe:	a101      	add	r1, pc, #4	@ (adr r1, 8003ac4 <_printf_i+0x40>)
 8003ac0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ac4:	08003b1d 	.word	0x08003b1d
 8003ac8:	08003b31 	.word	0x08003b31
 8003acc:	08003aad 	.word	0x08003aad
 8003ad0:	08003aad 	.word	0x08003aad
 8003ad4:	08003aad 	.word	0x08003aad
 8003ad8:	08003aad 	.word	0x08003aad
 8003adc:	08003b31 	.word	0x08003b31
 8003ae0:	08003aad 	.word	0x08003aad
 8003ae4:	08003aad 	.word	0x08003aad
 8003ae8:	08003aad 	.word	0x08003aad
 8003aec:	08003aad 	.word	0x08003aad
 8003af0:	08003c31 	.word	0x08003c31
 8003af4:	08003b5b 	.word	0x08003b5b
 8003af8:	08003beb 	.word	0x08003beb
 8003afc:	08003aad 	.word	0x08003aad
 8003b00:	08003aad 	.word	0x08003aad
 8003b04:	08003c53 	.word	0x08003c53
 8003b08:	08003aad 	.word	0x08003aad
 8003b0c:	08003b5b 	.word	0x08003b5b
 8003b10:	08003aad 	.word	0x08003aad
 8003b14:	08003aad 	.word	0x08003aad
 8003b18:	08003bf3 	.word	0x08003bf3
 8003b1c:	6833      	ldr	r3, [r6, #0]
 8003b1e:	1d1a      	adds	r2, r3, #4
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6032      	str	r2, [r6, #0]
 8003b24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e09d      	b.n	8003c6c <_printf_i+0x1e8>
 8003b30:	6833      	ldr	r3, [r6, #0]
 8003b32:	6820      	ldr	r0, [r4, #0]
 8003b34:	1d19      	adds	r1, r3, #4
 8003b36:	6031      	str	r1, [r6, #0]
 8003b38:	0606      	lsls	r6, r0, #24
 8003b3a:	d501      	bpl.n	8003b40 <_printf_i+0xbc>
 8003b3c:	681d      	ldr	r5, [r3, #0]
 8003b3e:	e003      	b.n	8003b48 <_printf_i+0xc4>
 8003b40:	0645      	lsls	r5, r0, #25
 8003b42:	d5fb      	bpl.n	8003b3c <_printf_i+0xb8>
 8003b44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003b48:	2d00      	cmp	r5, #0
 8003b4a:	da03      	bge.n	8003b54 <_printf_i+0xd0>
 8003b4c:	232d      	movs	r3, #45	@ 0x2d
 8003b4e:	426d      	negs	r5, r5
 8003b50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b54:	4859      	ldr	r0, [pc, #356]	@ (8003cbc <_printf_i+0x238>)
 8003b56:	230a      	movs	r3, #10
 8003b58:	e011      	b.n	8003b7e <_printf_i+0xfa>
 8003b5a:	6821      	ldr	r1, [r4, #0]
 8003b5c:	6833      	ldr	r3, [r6, #0]
 8003b5e:	0608      	lsls	r0, r1, #24
 8003b60:	f853 5b04 	ldr.w	r5, [r3], #4
 8003b64:	d402      	bmi.n	8003b6c <_printf_i+0xe8>
 8003b66:	0649      	lsls	r1, r1, #25
 8003b68:	bf48      	it	mi
 8003b6a:	b2ad      	uxthmi	r5, r5
 8003b6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003b6e:	4853      	ldr	r0, [pc, #332]	@ (8003cbc <_printf_i+0x238>)
 8003b70:	6033      	str	r3, [r6, #0]
 8003b72:	bf14      	ite	ne
 8003b74:	230a      	movne	r3, #10
 8003b76:	2308      	moveq	r3, #8
 8003b78:	2100      	movs	r1, #0
 8003b7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003b7e:	6866      	ldr	r6, [r4, #4]
 8003b80:	60a6      	str	r6, [r4, #8]
 8003b82:	2e00      	cmp	r6, #0
 8003b84:	bfa2      	ittt	ge
 8003b86:	6821      	ldrge	r1, [r4, #0]
 8003b88:	f021 0104 	bicge.w	r1, r1, #4
 8003b8c:	6021      	strge	r1, [r4, #0]
 8003b8e:	b90d      	cbnz	r5, 8003b94 <_printf_i+0x110>
 8003b90:	2e00      	cmp	r6, #0
 8003b92:	d04b      	beq.n	8003c2c <_printf_i+0x1a8>
 8003b94:	4616      	mov	r6, r2
 8003b96:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b9a:	fb03 5711 	mls	r7, r3, r1, r5
 8003b9e:	5dc7      	ldrb	r7, [r0, r7]
 8003ba0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ba4:	462f      	mov	r7, r5
 8003ba6:	42bb      	cmp	r3, r7
 8003ba8:	460d      	mov	r5, r1
 8003baa:	d9f4      	bls.n	8003b96 <_printf_i+0x112>
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d10b      	bne.n	8003bc8 <_printf_i+0x144>
 8003bb0:	6823      	ldr	r3, [r4, #0]
 8003bb2:	07df      	lsls	r7, r3, #31
 8003bb4:	d508      	bpl.n	8003bc8 <_printf_i+0x144>
 8003bb6:	6923      	ldr	r3, [r4, #16]
 8003bb8:	6861      	ldr	r1, [r4, #4]
 8003bba:	4299      	cmp	r1, r3
 8003bbc:	bfde      	ittt	le
 8003bbe:	2330      	movle	r3, #48	@ 0x30
 8003bc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003bc4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003bc8:	1b92      	subs	r2, r2, r6
 8003bca:	6122      	str	r2, [r4, #16]
 8003bcc:	f8cd a000 	str.w	sl, [sp]
 8003bd0:	464b      	mov	r3, r9
 8003bd2:	aa03      	add	r2, sp, #12
 8003bd4:	4621      	mov	r1, r4
 8003bd6:	4640      	mov	r0, r8
 8003bd8:	f7ff fee6 	bl	80039a8 <_printf_common>
 8003bdc:	3001      	adds	r0, #1
 8003bde:	d14a      	bne.n	8003c76 <_printf_i+0x1f2>
 8003be0:	f04f 30ff 	mov.w	r0, #4294967295
 8003be4:	b004      	add	sp, #16
 8003be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	f043 0320 	orr.w	r3, r3, #32
 8003bf0:	6023      	str	r3, [r4, #0]
 8003bf2:	4833      	ldr	r0, [pc, #204]	@ (8003cc0 <_printf_i+0x23c>)
 8003bf4:	2778      	movs	r7, #120	@ 0x78
 8003bf6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	6831      	ldr	r1, [r6, #0]
 8003bfe:	061f      	lsls	r7, r3, #24
 8003c00:	f851 5b04 	ldr.w	r5, [r1], #4
 8003c04:	d402      	bmi.n	8003c0c <_printf_i+0x188>
 8003c06:	065f      	lsls	r7, r3, #25
 8003c08:	bf48      	it	mi
 8003c0a:	b2ad      	uxthmi	r5, r5
 8003c0c:	6031      	str	r1, [r6, #0]
 8003c0e:	07d9      	lsls	r1, r3, #31
 8003c10:	bf44      	itt	mi
 8003c12:	f043 0320 	orrmi.w	r3, r3, #32
 8003c16:	6023      	strmi	r3, [r4, #0]
 8003c18:	b11d      	cbz	r5, 8003c22 <_printf_i+0x19e>
 8003c1a:	2310      	movs	r3, #16
 8003c1c:	e7ac      	b.n	8003b78 <_printf_i+0xf4>
 8003c1e:	4827      	ldr	r0, [pc, #156]	@ (8003cbc <_printf_i+0x238>)
 8003c20:	e7e9      	b.n	8003bf6 <_printf_i+0x172>
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	f023 0320 	bic.w	r3, r3, #32
 8003c28:	6023      	str	r3, [r4, #0]
 8003c2a:	e7f6      	b.n	8003c1a <_printf_i+0x196>
 8003c2c:	4616      	mov	r6, r2
 8003c2e:	e7bd      	b.n	8003bac <_printf_i+0x128>
 8003c30:	6833      	ldr	r3, [r6, #0]
 8003c32:	6825      	ldr	r5, [r4, #0]
 8003c34:	6961      	ldr	r1, [r4, #20]
 8003c36:	1d18      	adds	r0, r3, #4
 8003c38:	6030      	str	r0, [r6, #0]
 8003c3a:	062e      	lsls	r6, r5, #24
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	d501      	bpl.n	8003c44 <_printf_i+0x1c0>
 8003c40:	6019      	str	r1, [r3, #0]
 8003c42:	e002      	b.n	8003c4a <_printf_i+0x1c6>
 8003c44:	0668      	lsls	r0, r5, #25
 8003c46:	d5fb      	bpl.n	8003c40 <_printf_i+0x1bc>
 8003c48:	8019      	strh	r1, [r3, #0]
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	6123      	str	r3, [r4, #16]
 8003c4e:	4616      	mov	r6, r2
 8003c50:	e7bc      	b.n	8003bcc <_printf_i+0x148>
 8003c52:	6833      	ldr	r3, [r6, #0]
 8003c54:	1d1a      	adds	r2, r3, #4
 8003c56:	6032      	str	r2, [r6, #0]
 8003c58:	681e      	ldr	r6, [r3, #0]
 8003c5a:	6862      	ldr	r2, [r4, #4]
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	4630      	mov	r0, r6
 8003c60:	f7fc fad6 	bl	8000210 <memchr>
 8003c64:	b108      	cbz	r0, 8003c6a <_printf_i+0x1e6>
 8003c66:	1b80      	subs	r0, r0, r6
 8003c68:	6060      	str	r0, [r4, #4]
 8003c6a:	6863      	ldr	r3, [r4, #4]
 8003c6c:	6123      	str	r3, [r4, #16]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c74:	e7aa      	b.n	8003bcc <_printf_i+0x148>
 8003c76:	6923      	ldr	r3, [r4, #16]
 8003c78:	4632      	mov	r2, r6
 8003c7a:	4649      	mov	r1, r9
 8003c7c:	4640      	mov	r0, r8
 8003c7e:	47d0      	blx	sl
 8003c80:	3001      	adds	r0, #1
 8003c82:	d0ad      	beq.n	8003be0 <_printf_i+0x15c>
 8003c84:	6823      	ldr	r3, [r4, #0]
 8003c86:	079b      	lsls	r3, r3, #30
 8003c88:	d413      	bmi.n	8003cb2 <_printf_i+0x22e>
 8003c8a:	68e0      	ldr	r0, [r4, #12]
 8003c8c:	9b03      	ldr	r3, [sp, #12]
 8003c8e:	4298      	cmp	r0, r3
 8003c90:	bfb8      	it	lt
 8003c92:	4618      	movlt	r0, r3
 8003c94:	e7a6      	b.n	8003be4 <_printf_i+0x160>
 8003c96:	2301      	movs	r3, #1
 8003c98:	4632      	mov	r2, r6
 8003c9a:	4649      	mov	r1, r9
 8003c9c:	4640      	mov	r0, r8
 8003c9e:	47d0      	blx	sl
 8003ca0:	3001      	adds	r0, #1
 8003ca2:	d09d      	beq.n	8003be0 <_printf_i+0x15c>
 8003ca4:	3501      	adds	r5, #1
 8003ca6:	68e3      	ldr	r3, [r4, #12]
 8003ca8:	9903      	ldr	r1, [sp, #12]
 8003caa:	1a5b      	subs	r3, r3, r1
 8003cac:	42ab      	cmp	r3, r5
 8003cae:	dcf2      	bgt.n	8003c96 <_printf_i+0x212>
 8003cb0:	e7eb      	b.n	8003c8a <_printf_i+0x206>
 8003cb2:	2500      	movs	r5, #0
 8003cb4:	f104 0619 	add.w	r6, r4, #25
 8003cb8:	e7f5      	b.n	8003ca6 <_printf_i+0x222>
 8003cba:	bf00      	nop
 8003cbc:	08003de9 	.word	0x08003de9
 8003cc0:	08003dfa 	.word	0x08003dfa

08003cc4 <memmove>:
 8003cc4:	4288      	cmp	r0, r1
 8003cc6:	b510      	push	{r4, lr}
 8003cc8:	eb01 0402 	add.w	r4, r1, r2
 8003ccc:	d902      	bls.n	8003cd4 <memmove+0x10>
 8003cce:	4284      	cmp	r4, r0
 8003cd0:	4623      	mov	r3, r4
 8003cd2:	d807      	bhi.n	8003ce4 <memmove+0x20>
 8003cd4:	1e43      	subs	r3, r0, #1
 8003cd6:	42a1      	cmp	r1, r4
 8003cd8:	d008      	beq.n	8003cec <memmove+0x28>
 8003cda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003cde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ce2:	e7f8      	b.n	8003cd6 <memmove+0x12>
 8003ce4:	4402      	add	r2, r0
 8003ce6:	4601      	mov	r1, r0
 8003ce8:	428a      	cmp	r2, r1
 8003cea:	d100      	bne.n	8003cee <memmove+0x2a>
 8003cec:	bd10      	pop	{r4, pc}
 8003cee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003cf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003cf6:	e7f7      	b.n	8003ce8 <memmove+0x24>

08003cf8 <_sbrk_r>:
 8003cf8:	b538      	push	{r3, r4, r5, lr}
 8003cfa:	4d06      	ldr	r5, [pc, #24]	@ (8003d14 <_sbrk_r+0x1c>)
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	4604      	mov	r4, r0
 8003d00:	4608      	mov	r0, r1
 8003d02:	602b      	str	r3, [r5, #0]
 8003d04:	f7fc ff38 	bl	8000b78 <_sbrk>
 8003d08:	1c43      	adds	r3, r0, #1
 8003d0a:	d102      	bne.n	8003d12 <_sbrk_r+0x1a>
 8003d0c:	682b      	ldr	r3, [r5, #0]
 8003d0e:	b103      	cbz	r3, 8003d12 <_sbrk_r+0x1a>
 8003d10:	6023      	str	r3, [r4, #0]
 8003d12:	bd38      	pop	{r3, r4, r5, pc}
 8003d14:	20000270 	.word	0x20000270

08003d18 <memcpy>:
 8003d18:	440a      	add	r2, r1
 8003d1a:	4291      	cmp	r1, r2
 8003d1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d20:	d100      	bne.n	8003d24 <memcpy+0xc>
 8003d22:	4770      	bx	lr
 8003d24:	b510      	push	{r4, lr}
 8003d26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d2e:	4291      	cmp	r1, r2
 8003d30:	d1f9      	bne.n	8003d26 <memcpy+0xe>
 8003d32:	bd10      	pop	{r4, pc}

08003d34 <_realloc_r>:
 8003d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d38:	4680      	mov	r8, r0
 8003d3a:	4615      	mov	r5, r2
 8003d3c:	460c      	mov	r4, r1
 8003d3e:	b921      	cbnz	r1, 8003d4a <_realloc_r+0x16>
 8003d40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d44:	4611      	mov	r1, r2
 8003d46:	f7ff bc4b 	b.w	80035e0 <_malloc_r>
 8003d4a:	b92a      	cbnz	r2, 8003d58 <_realloc_r+0x24>
 8003d4c:	f7ff fbdc 	bl	8003508 <_free_r>
 8003d50:	2400      	movs	r4, #0
 8003d52:	4620      	mov	r0, r4
 8003d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d58:	f000 f81a 	bl	8003d90 <_malloc_usable_size_r>
 8003d5c:	4285      	cmp	r5, r0
 8003d5e:	4606      	mov	r6, r0
 8003d60:	d802      	bhi.n	8003d68 <_realloc_r+0x34>
 8003d62:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003d66:	d8f4      	bhi.n	8003d52 <_realloc_r+0x1e>
 8003d68:	4629      	mov	r1, r5
 8003d6a:	4640      	mov	r0, r8
 8003d6c:	f7ff fc38 	bl	80035e0 <_malloc_r>
 8003d70:	4607      	mov	r7, r0
 8003d72:	2800      	cmp	r0, #0
 8003d74:	d0ec      	beq.n	8003d50 <_realloc_r+0x1c>
 8003d76:	42b5      	cmp	r5, r6
 8003d78:	462a      	mov	r2, r5
 8003d7a:	4621      	mov	r1, r4
 8003d7c:	bf28      	it	cs
 8003d7e:	4632      	movcs	r2, r6
 8003d80:	f7ff ffca 	bl	8003d18 <memcpy>
 8003d84:	4621      	mov	r1, r4
 8003d86:	4640      	mov	r0, r8
 8003d88:	f7ff fbbe 	bl	8003508 <_free_r>
 8003d8c:	463c      	mov	r4, r7
 8003d8e:	e7e0      	b.n	8003d52 <_realloc_r+0x1e>

08003d90 <_malloc_usable_size_r>:
 8003d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d94:	1f18      	subs	r0, r3, #4
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	bfbc      	itt	lt
 8003d9a:	580b      	ldrlt	r3, [r1, r0]
 8003d9c:	18c0      	addlt	r0, r0, r3
 8003d9e:	4770      	bx	lr

08003da0 <_init>:
 8003da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da2:	bf00      	nop
 8003da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003da6:	bc08      	pop	{r3}
 8003da8:	469e      	mov	lr, r3
 8003daa:	4770      	bx	lr

08003dac <_fini>:
 8003dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dae:	bf00      	nop
 8003db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003db2:	bc08      	pop	{r3}
 8003db4:	469e      	mov	lr, r3
 8003db6:	4770      	bx	lr
