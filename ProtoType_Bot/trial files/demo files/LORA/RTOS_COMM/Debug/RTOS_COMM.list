
RTOS_COMM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007458  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  08007628  08007628  00008628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007934  08007934  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007934  08007934  00008934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800793c  0800793c  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800793c  0800793c  0000893c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007940  08007940  00008940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007944  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048d8  20000060  080079a4  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004938  080079a4  00009938  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001895c  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003907  00000000  00000000  000219ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001540  00000000  00000000  000252f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010c0  00000000  00000000  00026838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025040  00000000  00000000  000278f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001988d  00000000  00000000  0004c938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dcf6b  00000000  00000000  000661c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00143130  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e80  00000000  00000000  00143174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00148ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007610 	.word	0x08007610

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08007610 	.word	0x08007610

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <J3_IBUS_new>:
#include "J3_IBUS_FLYSKY.h"


//typedef struct TRxIBus TRxIBus;

TRxIBus* J3_IBUS_new(UART_HandleTypeDef* _uart, uint8_t _qtdCanal){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	460b      	mov	r3, r1
 80005ba:	70fb      	strb	r3, [r7, #3]
  TRxIBus* auxRxIBus;

  auxRxIBus = malloc(sizeof(TRxIBus));
 80005bc:	2018      	movs	r0, #24
 80005be:	f006 fa71 	bl	8006aa4 <malloc>
 80005c2:	4603      	mov	r3, r0
 80005c4:	60fb      	str	r3, [r7, #12]
  auxRxIBus->uart = _uart;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	601a      	str	r2, [r3, #0]
  auxRxIBus->qdtCanal = _qtdCanal;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	78fa      	ldrb	r2, [r7, #3]
 80005d0:	711a      	strb	r2, [r3, #4]

  auxRxIBus->buffer_size = ((auxRxIBus->qdtCanal * 2) + 4) * 2; /* Armazena 2 buffers para garantir ler o pacote inteiro */
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	791b      	ldrb	r3, [r3, #4]
 80005d6:	3302      	adds	r3, #2
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	731a      	strb	r2, [r3, #12]
  /* Esse + 4 �  1 byte de inicio, 2 bytes de checksum, 1 byte de finalizador  */

  auxRxIBus->buffer = malloc(auxRxIBus->buffer_size * sizeof(uint8_t));
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	7b1b      	ldrb	r3, [r3, #12]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f006 fa5c 	bl	8006aa4 <malloc>
 80005ec:	4603      	mov	r3, r0
 80005ee:	461a      	mov	r2, r3
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	609a      	str	r2, [r3, #8]
  memset(auxRxIBus->buffer, 0x00, auxRxIBus->buffer_size * sizeof(uint8_t));
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	6898      	ldr	r0, [r3, #8]
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	7b1b      	ldrb	r3, [r3, #12]
 80005fc:	461a      	mov	r2, r3
 80005fe:	2100      	movs	r1, #0
 8000600:	f006 fbde 	bl	8006dc0 <memset>

  auxRxIBus->canais = malloc(auxRxIBus->qdtCanal * sizeof(uint16_t));
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	791b      	ldrb	r3, [r3, #4]
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	4618      	mov	r0, r3
 800060c:	f006 fa4a 	bl	8006aa4 <malloc>
 8000610:	4603      	mov	r3, r0
 8000612:	461a      	mov	r2, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	611a      	str	r2, [r3, #16]
  memset(auxRxIBus->canais, 0x00, auxRxIBus->qdtCanal * sizeof(uint16_t));
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	6918      	ldr	r0, [r3, #16]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	791b      	ldrb	r3, [r3, #4]
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	461a      	mov	r2, r3
 8000624:	2100      	movs	r1, #0
 8000626:	f006 fbcb 	bl	8006dc0 <memset>

  /* Armazena os valores enquanto processa */
  auxRxIBus->canais_tmp = malloc(auxRxIBus->qdtCanal * sizeof(uint16_t));
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	791b      	ldrb	r3, [r3, #4]
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	4618      	mov	r0, r3
 8000632:	f006 fa37 	bl	8006aa4 <malloc>
 8000636:	4603      	mov	r3, r0
 8000638:	461a      	mov	r2, r3
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	615a      	str	r2, [r3, #20]
  memset(auxRxIBus->canais_tmp, 0x00, auxRxIBus->qdtCanal * sizeof(uint16_t));
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	6958      	ldr	r0, [r3, #20]
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	791b      	ldrb	r3, [r3, #4]
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	461a      	mov	r2, r3
 800064a:	2100      	movs	r1, #0
 800064c:	f006 fbb8 	bl	8006dc0 <memset>


  return auxRxIBus;
 8000650:	68fb      	ldr	r3, [r7, #12]
}
 8000652:	4618      	mov	r0, r3
 8000654:	3710      	adds	r7, #16
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <J3_IBUS_RequestNewData>:
  return _RxIBus->canais[_canal-1];
}


// Request new data to the buffer using DMA reception
void J3_IBUS_RequestNewData(TRxIBus* _RxIBus) {
 800065a:	b580      	push	{r7, lr}
 800065c:	b082      	sub	sp, #8
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
    // Clear the buffer before receiving new data
    memset(_RxIBus->buffer, 0, _RxIBus->buffer_size);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6898      	ldr	r0, [r3, #8]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	7b1b      	ldrb	r3, [r3, #12]
 800066a:	461a      	mov	r2, r3
 800066c:	2100      	movs	r1, #0
 800066e:	f006 fba7 	bl	8006dc0 <memset>

    // Start DMA reception to receive data into the buffer
    HAL_UART_Receive_DMA(_RxIBus->uart, _RxIBus->buffer, _RxIBus->buffer_size);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	6818      	ldr	r0, [r3, #0]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6899      	ldr	r1, [r3, #8]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	7b1b      	ldrb	r3, [r3, #12]
 800067e:	461a      	mov	r2, r3
 8000680:	f004 fa3b 	bl	8004afa <HAL_UART_Receive_DMA>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000696:	2101      	movs	r1, #1
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f000 f8d4 	bl	8000846 <LoRa_read>
 800069e:	4603      	mov	r3, r0
 80006a0:	73bb      	strb	r3, [r7, #14]
	data = read;
 80006a2:	7bbb      	ldrb	r3, [r7, #14]
 80006a4:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d107      	bne.n	80006bc <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 80006ac:	7bbb      	ldrb	r3, [r7, #14]
 80006ae:	f023 0307 	bic.w	r3, r3, #7
 80006b2:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
 80006ba:	e03e      	b.n	800073a <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d10c      	bne.n	80006dc <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 80006c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006c6:	f023 0307 	bic.w	r3, r3, #7
 80006ca:	b25b      	sxtb	r3, r3
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	b25b      	sxtb	r3, r3
 80006d2:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2201      	movs	r2, #1
 80006d8:	61da      	str	r2, [r3, #28]
 80006da:	e02e      	b.n	800073a <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	2b03      	cmp	r3, #3
 80006e0:	d10c      	bne.n	80006fc <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80006e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006e6:	f023 0307 	bic.w	r3, r3, #7
 80006ea:	b25b      	sxtb	r3, r3
 80006ec:	f043 0303 	orr.w	r3, r3, #3
 80006f0:	b25b      	sxtb	r3, r3
 80006f2:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2203      	movs	r2, #3
 80006f8:	61da      	str	r2, [r3, #28]
 80006fa:	e01e      	b.n	800073a <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	2b05      	cmp	r3, #5
 8000700:	d10c      	bne.n	800071c <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000702:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000706:	f023 0307 	bic.w	r3, r3, #7
 800070a:	b25b      	sxtb	r3, r3
 800070c:	f043 0305 	orr.w	r3, r3, #5
 8000710:	b25b      	sxtb	r3, r3
 8000712:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2205      	movs	r2, #5
 8000718:	61da      	str	r2, [r3, #28]
 800071a:	e00e      	b.n	800073a <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	2b06      	cmp	r3, #6
 8000720:	d10b      	bne.n	800073a <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000722:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000726:	f023 0307 	bic.w	r3, r3, #7
 800072a:	b25b      	sxtb	r3, r3
 800072c:	f043 0306 	orr.w	r3, r3, #6
 8000730:	b25b      	sxtb	r3, r3
 8000732:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2206      	movs	r2, #6
 8000738:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	461a      	mov	r2, r3
 800073e:	2101      	movs	r1, #1
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f000 f89a 	bl	800087a <LoRa_write>
	//HAL_Delay(10);
}
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 800074e:	b580      	push	{r7, lr}
 8000750:	b084      	sub	sp, #16
 8000752:	af00      	add	r7, sp, #0
 8000754:	60f8      	str	r0, [r7, #12]
 8000756:	60b9      	str	r1, [r7, #8]
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	4613      	mov	r3, r2
 800075c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	6818      	ldr	r0, [r3, #0]
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	889b      	ldrh	r3, [r3, #4]
 8000766:	2200      	movs	r2, #0
 8000768:	4619      	mov	r1, r3
 800076a:	f002 f9e5 	bl	8002b38 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	6998      	ldr	r0, [r3, #24]
 8000772:	88fa      	ldrh	r2, [r7, #6]
 8000774:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000778:	68b9      	ldr	r1, [r7, #8]
 800077a:	f003 f8ea 	bl	8003952 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800077e:	bf00      	nop
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	4618      	mov	r0, r3
 8000786:	f003 fcea 	bl	800415e <HAL_SPI_GetState>
 800078a:	4603      	mov	r3, r0
 800078c:	2b01      	cmp	r3, #1
 800078e:	d1f7      	bne.n	8000780 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	6998      	ldr	r0, [r3, #24]
 8000794:	8b3a      	ldrh	r2, [r7, #24]
 8000796:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800079a:	6839      	ldr	r1, [r7, #0]
 800079c:	f003 fa1d 	bl	8003bda <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007a0:	bf00      	nop
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f003 fcd9 	bl	800415e <HAL_SPI_GetState>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d1f7      	bne.n	80007a2 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	6818      	ldr	r0, [r3, #0]
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	889b      	ldrh	r3, [r3, #4]
 80007ba:	2201      	movs	r2, #1
 80007bc:	4619      	mov	r1, r3
 80007be:	f002 f9bb 	bl	8002b38 <HAL_GPIO_WritePin>
}
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b084      	sub	sp, #16
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	60f8      	str	r0, [r7, #12]
 80007d2:	60b9      	str	r1, [r7, #8]
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4613      	mov	r3, r2
 80007d8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	6818      	ldr	r0, [r3, #0]
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	889b      	ldrh	r3, [r3, #4]
 80007e2:	2200      	movs	r2, #0
 80007e4:	4619      	mov	r1, r3
 80007e6:	f002 f9a7 	bl	8002b38 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	6998      	ldr	r0, [r3, #24]
 80007ee:	88fa      	ldrh	r2, [r7, #6]
 80007f0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007f4:	68b9      	ldr	r1, [r7, #8]
 80007f6:	f003 f8ac 	bl	8003952 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007fa:	bf00      	nop
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	4618      	mov	r0, r3
 8000802:	f003 fcac 	bl	800415e <HAL_SPI_GetState>
 8000806:	4603      	mov	r3, r0
 8000808:	2b01      	cmp	r3, #1
 800080a:	d1f7      	bne.n	80007fc <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	6998      	ldr	r0, [r3, #24]
 8000810:	8b3a      	ldrh	r2, [r7, #24]
 8000812:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000816:	6839      	ldr	r1, [r7, #0]
 8000818:	f003 f89b 	bl	8003952 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800081c:	bf00      	nop
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	4618      	mov	r0, r3
 8000824:	f003 fc9b 	bl	800415e <HAL_SPI_GetState>
 8000828:	4603      	mov	r3, r0
 800082a:	2b01      	cmp	r3, #1
 800082c:	d1f7      	bne.n	800081e <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	6818      	ldr	r0, [r3, #0]
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	889b      	ldrh	r3, [r3, #4]
 8000836:	2201      	movs	r2, #1
 8000838:	4619      	mov	r1, r3
 800083a:	f002 f97d 	bl	8002b38 <HAL_GPIO_WritePin>
}
 800083e:	bf00      	nop
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000846:	b580      	push	{r7, lr}
 8000848:	b086      	sub	sp, #24
 800084a:	af02      	add	r7, sp, #8
 800084c:	6078      	str	r0, [r7, #4]
 800084e:	460b      	mov	r3, r1
 8000850:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000852:	78fb      	ldrb	r3, [r7, #3]
 8000854:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000858:	b2db      	uxtb	r3, r3
 800085a:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 800085c:	f107 030f 	add.w	r3, r7, #15
 8000860:	f107 010e 	add.w	r1, r7, #14
 8000864:	2201      	movs	r2, #1
 8000866:	9200      	str	r2, [sp, #0]
 8000868:	2201      	movs	r2, #1
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff ff6f 	bl	800074e <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000870:	7bfb      	ldrb	r3, [r7, #15]
}
 8000872:	4618      	mov	r0, r3
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 800087a:	b580      	push	{r7, lr}
 800087c:	b086      	sub	sp, #24
 800087e:	af02      	add	r7, sp, #8
 8000880:	6078      	str	r0, [r7, #4]
 8000882:	460b      	mov	r3, r1
 8000884:	70fb      	strb	r3, [r7, #3]
 8000886:	4613      	mov	r3, r2
 8000888:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800088a:	78fb      	ldrb	r3, [r7, #3]
 800088c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000890:	b2db      	uxtb	r3, r3
 8000892:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000894:	78bb      	ldrb	r3, [r7, #2]
 8000896:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8000898:	f107 030f 	add.w	r3, r7, #15
 800089c:	f107 010e 	add.w	r1, r7, #14
 80008a0:	2201      	movs	r2, #1
 80008a2:	9200      	str	r2, [sp, #0]
 80008a4:	2201      	movs	r2, #1
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f7ff ff8f 	bl	80007ca <LoRa_writeReg>
	//HAL_Delay(5);
}
 80008ac:	bf00      	nop
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	607a      	str	r2, [r7, #4]
 80008be:	461a      	mov	r2, r3
 80008c0:	460b      	mov	r3, r1
 80008c2:	72fb      	strb	r3, [r7, #11]
 80008c4:	4613      	mov	r3, r2
 80008c6:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 80008c8:	7afb      	ldrb	r3, [r7, #11]
 80008ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	6818      	ldr	r0, [r3, #0]
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	889b      	ldrh	r3, [r3, #4]
 80008da:	2200      	movs	r2, #0
 80008dc:	4619      	mov	r1, r3
 80008de:	f002 f92b 	bl	8002b38 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	6998      	ldr	r0, [r3, #24]
 80008e6:	f107 0117 	add.w	r1, r7, #23
 80008ea:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80008ee:	2201      	movs	r2, #1
 80008f0:	f003 f82f 	bl	8003952 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80008f4:	bf00      	nop
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f003 fc2f 	bl	800415e <HAL_SPI_GetState>
 8000900:	4603      	mov	r3, r0
 8000902:	2b01      	cmp	r3, #1
 8000904:	d1f7      	bne.n	80008f6 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	6998      	ldr	r0, [r3, #24]
 800090a:	7abb      	ldrb	r3, [r7, #10]
 800090c:	b29a      	uxth	r2, r3
 800090e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000912:	6879      	ldr	r1, [r7, #4]
 8000914:	f003 f81d 	bl	8003952 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000918:	bf00      	nop
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	4618      	mov	r0, r3
 8000920:	f003 fc1d 	bl	800415e <HAL_SPI_GetState>
 8000924:	4603      	mov	r3, r0
 8000926:	2b01      	cmp	r3, #1
 8000928:	d1f7      	bne.n	800091a <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	6818      	ldr	r0, [r3, #0]
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	889b      	ldrh	r3, [r3, #4]
 8000932:	2201      	movs	r2, #1
 8000934:	4619      	mov	r1, r3
 8000936:	f002 f8ff 	bl	8002b38 <HAL_GPIO_WritePin>
}
 800093a:	bf00      	nop
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8000942:	b580      	push	{r7, lr}
 8000944:	b086      	sub	sp, #24
 8000946:	af00      	add	r7, sp, #0
 8000948:	60f8      	str	r0, [r7, #12]
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	4611      	mov	r1, r2
 800094e:	461a      	mov	r2, r3
 8000950:	460b      	mov	r3, r1
 8000952:	71fb      	strb	r3, [r7, #7]
 8000954:	4613      	mov	r3, r2
 8000956:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	69db      	ldr	r3, [r3, #28]
 800095c:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 800095e:	2101      	movs	r1, #1
 8000960:	68f8      	ldr	r0, [r7, #12]
 8000962:	f7ff fe93 	bl	800068c <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8000966:	210e      	movs	r1, #14
 8000968:	68f8      	ldr	r0, [r7, #12]
 800096a:	f7ff ff6c 	bl	8000846 <LoRa_read>
 800096e:	4603      	mov	r3, r0
 8000970:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000972:	7cfb      	ldrb	r3, [r7, #19]
 8000974:	461a      	mov	r2, r3
 8000976:	210d      	movs	r1, #13
 8000978:	68f8      	ldr	r0, [r7, #12]
 800097a:	f7ff ff7e 	bl	800087a <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	461a      	mov	r2, r3
 8000982:	2122      	movs	r1, #34	@ 0x22
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	f7ff ff78 	bl	800087a <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	68ba      	ldr	r2, [r7, #8]
 800098e:	2100      	movs	r1, #0
 8000990:	68f8      	ldr	r0, [r7, #12]
 8000992:	f7ff ff8f 	bl	80008b4 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8000996:	2103      	movs	r1, #3
 8000998:	68f8      	ldr	r0, [r7, #12]
 800099a:	f7ff fe77 	bl	800068c <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 800099e:	2112      	movs	r1, #18
 80009a0:	68f8      	ldr	r0, [r7, #12]
 80009a2:	f7ff ff50 	bl	8000846 <LoRa_read>
 80009a6:	4603      	mov	r3, r0
 80009a8:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 80009aa:	7cfb      	ldrb	r3, [r7, #19]
 80009ac:	f003 0308 	and.w	r3, r3, #8
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d00a      	beq.n	80009ca <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80009b4:	22ff      	movs	r2, #255	@ 0xff
 80009b6:	2112      	movs	r1, #18
 80009b8:	68f8      	ldr	r0, [r7, #12]
 80009ba:	f7ff ff5e 	bl	800087a <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 80009be:	6979      	ldr	r1, [r7, #20]
 80009c0:	68f8      	ldr	r0, [r7, #12]
 80009c2:	f7ff fe63 	bl	800068c <LoRa_gotoMode>
			return 1;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e00f      	b.n	80009ea <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 80009ca:	88bb      	ldrh	r3, [r7, #4]
 80009cc:	3b01      	subs	r3, #1
 80009ce:	80bb      	strh	r3, [r7, #4]
 80009d0:	88bb      	ldrh	r3, [r7, #4]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d105      	bne.n	80009e2 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 80009d6:	6979      	ldr	r1, [r7, #20]
 80009d8:	68f8      	ldr	r0, [r7, #12]
 80009da:	f7ff fe57 	bl	800068c <LoRa_gotoMode>
				return 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	e003      	b.n	80009ea <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 80009e2:	2001      	movs	r0, #1
 80009e4:	f001 fa9e 	bl	8001f24 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 80009e8:	e7d9      	b.n	800099e <LoRa_transmit+0x5c>
	}
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b082      	sub	sp, #8
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80009fa:	2105      	movs	r1, #5
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff fe45 	bl	800068c <LoRa_gotoMode>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000a0a:	b590      	push	{r4, r7, lr}
 8000a0c:	b089      	sub	sp, #36	@ 0x24
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	60f8      	str	r0, [r7, #12]
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	4613      	mov	r3, r2
 8000a16:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61bb      	str	r3, [r7, #24]
 8000a20:	e007      	b.n	8000a32 <LoRa_receive+0x28>
		data[i]=0;
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	68ba      	ldr	r2, [r7, #8]
 8000a26:	4413      	add	r3, r2
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	61bb      	str	r3, [r7, #24]
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	dbf3      	blt.n	8000a22 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	68f8      	ldr	r0, [r7, #12]
 8000a3e:	f7ff fe25 	bl	800068c <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000a42:	2112      	movs	r1, #18
 8000a44:	68f8      	ldr	r0, [r7, #12]
 8000a46:	f7ff fefe 	bl	8000846 <LoRa_read>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000a4e:	7cfb      	ldrb	r3, [r7, #19]
 8000a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d02f      	beq.n	8000ab8 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000a58:	22ff      	movs	r2, #255	@ 0xff
 8000a5a:	2112      	movs	r1, #18
 8000a5c:	68f8      	ldr	r0, [r7, #12]
 8000a5e:	f7ff ff0c 	bl	800087a <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000a62:	2113      	movs	r1, #19
 8000a64:	68f8      	ldr	r0, [r7, #12]
 8000a66:	f7ff feee 	bl	8000846 <LoRa_read>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000a6e:	2110      	movs	r1, #16
 8000a70:	68f8      	ldr	r0, [r7, #12]
 8000a72:	f7ff fee8 	bl	8000846 <LoRa_read>
 8000a76:	4603      	mov	r3, r0
 8000a78:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000a7a:	7cfb      	ldrb	r3, [r7, #19]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	210d      	movs	r1, #13
 8000a80:	68f8      	ldr	r0, [r7, #12]
 8000a82:	f7ff fefa 	bl	800087a <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000a86:	7cba      	ldrb	r2, [r7, #18]
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	bf28      	it	cs
 8000a8e:	4613      	movcs	r3, r2
 8000a90:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
 8000a96:	e00b      	b.n	8000ab0 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	18d4      	adds	r4, r2, r3
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	68f8      	ldr	r0, [r7, #12]
 8000aa2:	f7ff fed0 	bl	8000846 <LoRa_read>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	3301      	adds	r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	7ffb      	ldrb	r3, [r7, #31]
 8000ab2:	697a      	ldr	r2, [r7, #20]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	dbef      	blt.n	8000a98 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000ab8:	2105      	movs	r1, #5
 8000aba:	68f8      	ldr	r0, [r7, #12]
 8000abc:	f7ff fde6 	bl	800068c <LoRa_gotoMode>
    return min;
 8000ac0:	7ffb      	ldrb	r3, [r7, #31]
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3724      	adds	r7, #36	@ 0x24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd90      	pop	{r4, r7, pc}
	...

08000acc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	4a07      	ldr	r2, [pc, #28]	@ (8000af8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000adc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	4a06      	ldr	r2, [pc, #24]	@ (8000afc <vApplicationGetIdleTaskMemory+0x30>)
 8000ae2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2280      	movs	r2, #128	@ 0x80
 8000ae8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000aea:	bf00      	nop
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	2000007c 	.word	0x2000007c
 8000afc:	2000011c 	.word	0x2000011c

08000b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b00:	b5b0      	push	{r4, r5, r7, lr}
 8000b02:	b0a4      	sub	sp, #144	@ 0x90
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b06:	f001 f9cb 	bl	8001ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b0a:	f000 f8a7 	bl	8000c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b0e:	f000 f9f7 	bl	8000f00 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b12:	f000 f9d5 	bl	8000ec0 <MX_DMA_Init>
  MX_SPI2_Init();
 8000b16:	f000 f913 	bl	8000d40 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000b1a:	f000 f947 	bl	8000dac <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000b1e:	f000 f97b 	bl	8000e18 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000b22:	f000 f9a3 	bl	8000e6c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
    RxIBus = J3_IBUS_new(&huart1, 14);
 8000b26:	210e      	movs	r1, #14
 8000b28:	483d      	ldr	r0, [pc, #244]	@ (8000c20 <main+0x120>)
 8000b2a:	f7ff fd41 	bl	80005b0 <J3_IBUS_new>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	4a3c      	ldr	r2, [pc, #240]	@ (8000c24 <main+0x124>)
 8000b32:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_DMA(&huart1, RxIBus->buffer, 64);
 8000b34:	4b3b      	ldr	r3, [pc, #236]	@ (8000c24 <main+0x124>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	2240      	movs	r2, #64	@ 0x40
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4838      	ldr	r0, [pc, #224]	@ (8000c20 <main+0x120>)
 8000b40:	f003 ffdb 	bl	8004afa <HAL_UART_Receive_DMA>
  	LoRa_reset(&LoRa_Transmit);
  	LoRa_init(&LoRa_Receive);
  	LoRa_init(&LoRa_Transmit);
  	*/

  	HAL_UART_Transmit(&huart2, (uint8_t*)"Communication Dharma STM32 RTOS !\n", strlen("Communication Dharma STM32 RTOS !\n"), HAL_MAX_DELAY);
 8000b44:	f04f 33ff 	mov.w	r3, #4294967295
 8000b48:	2222      	movs	r2, #34	@ 0x22
 8000b4a:	4937      	ldr	r1, [pc, #220]	@ (8000c28 <main+0x128>)
 8000b4c:	4837      	ldr	r0, [pc, #220]	@ (8000c2c <main+0x12c>)
 8000b4e:	f003 ff49 	bl	80049e4 <HAL_UART_Transmit>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  if(switch_temp==true){
 8000b52:	4b37      	ldr	r3, [pc, #220]	@ (8000c30 <main+0x130>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d026      	beq.n	8000ba8 <main+0xa8>
	  /* definition and creation of myTask02 */
	  osThreadDef(myTask02, StartTask02, osPriorityHigh, 0, 1024); //LORA Receive
 8000b5a:	4b36      	ldr	r3, [pc, #216]	@ (8000c34 <main+0x134>)
 8000b5c:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8000b60:	461d      	mov	r5, r3
 8000b62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000b6e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f004 fd20 	bl	80055ba <osThreadCreate>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	4a2e      	ldr	r2, [pc, #184]	@ (8000c38 <main+0x138>)
 8000b7e:	6013      	str	r3, [r2, #0]


	  /* definition and creation of myTask04 */
	  osThreadDef(myTask04, StartTask04, osPriorityBelowNormal, 0, 1024); //Lora Transmit
 8000b80:	4b2e      	ldr	r3, [pc, #184]	@ (8000c3c <main+0x13c>)
 8000b82:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000b86:	461d      	mov	r5, r3
 8000b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8000b94:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f004 fd0d 	bl	80055ba <osThreadCreate>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	4a27      	ldr	r2, [pc, #156]	@ (8000c40 <main+0x140>)
 8000ba4:	6013      	str	r3, [r2, #0]
 8000ba6:	e023      	b.n	8000bf0 <main+0xf0>
  }

  else {

	  /* definition and creation of myTask03 */
	  osThreadDef(myTask03, StartTask03, osPriorityHigh, 0, 1024); //IBUS
 8000ba8:	4b26      	ldr	r3, [pc, #152]	@ (8000c44 <main+0x144>)
 8000baa:	f107 0420 	add.w	r4, r7, #32
 8000bae:	461d      	mov	r5, r3
 8000bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000bbc:	f107 0320 	add.w	r3, r7, #32
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f004 fcf9 	bl	80055ba <osThreadCreate>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	4a1f      	ldr	r2, [pc, #124]	@ (8000c48 <main+0x148>)
 8000bcc:	6013      	str	r3, [r2, #0]

	  /* definition and creation of myTask01 */
	  osThreadDef(myTask01, StartTask01, osPriorityLow, 0, 1024); //Debugging IBUS
 8000bce:	4b1f      	ldr	r3, [pc, #124]	@ (8000c4c <main+0x14c>)
 8000bd0:	1d3c      	adds	r4, r7, #4
 8000bd2:	461d      	mov	r5, r3
 8000bd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bdc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	2100      	movs	r1, #0
 8000be4:	4618      	mov	r0, r3
 8000be6:	f004 fce8 	bl	80055ba <osThreadCreate>
 8000bea:	4603      	mov	r3, r0
 8000bec:	4a18      	ldr	r2, [pc, #96]	@ (8000c50 <main+0x150>)
 8000bee:	6013      	str	r3, [r2, #0]
  }


  /* definition and creation of myTask05 */
  osThreadDef(myTask05, StartTask05, osPriorityNormal, 0, 128);// Simulating CAN
 8000bf0:	4b18      	ldr	r3, [pc, #96]	@ (8000c54 <main+0x154>)
 8000bf2:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8000bf6:	461d      	mov	r5, r3
 8000bf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bfc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 8000c04:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f004 fcd5 	bl	80055ba <osThreadCreate>
 8000c10:	4603      	mov	r3, r0
 8000c12:	4a11      	ldr	r2, [pc, #68]	@ (8000c58 <main+0x158>)
 8000c14:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000c16:	f004 fcc9 	bl	80055ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c1a:	bf00      	nop
 8000c1c:	e7fd      	b.n	8000c1a <main+0x11a>
 8000c1e:	bf00      	nop
 8000c20:	200003d0 	.word	0x200003d0
 8000c24:	200004d4 	.word	0x200004d4
 8000c28:	08007628 	.word	0x08007628
 8000c2c:	20000418 	.word	0x20000418
 8000c30:	2000031c 	.word	0x2000031c
 8000c34:	08007658 	.word	0x08007658
 8000c38:	200004c4 	.word	0x200004c4
 8000c3c:	08007680 	.word	0x08007680
 8000c40:	200004cc 	.word	0x200004cc
 8000c44:	080076a8 	.word	0x080076a8
 8000c48:	200004c8 	.word	0x200004c8
 8000c4c:	080076d0 	.word	0x080076d0
 8000c50:	200004c0 	.word	0x200004c0
 8000c54:	080076f8 	.word	0x080076f8
 8000c58:	200004d0 	.word	0x200004d0

08000c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b094      	sub	sp, #80	@ 0x50
 8000c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	2234      	movs	r2, #52	@ 0x34
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f006 f8a8 	bl	8006dc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c70:	f107 0308 	add.w	r3, r7, #8
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	4b2c      	ldr	r3, [pc, #176]	@ (8000d38 <SystemClock_Config+0xdc>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c88:	4a2b      	ldr	r2, [pc, #172]	@ (8000d38 <SystemClock_Config+0xdc>)
 8000c8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c90:	4b29      	ldr	r3, [pc, #164]	@ (8000d38 <SystemClock_Config+0xdc>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	4b26      	ldr	r3, [pc, #152]	@ (8000d3c <SystemClock_Config+0xe0>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a25      	ldr	r2, [pc, #148]	@ (8000d3c <SystemClock_Config+0xe0>)
 8000ca6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	4b23      	ldr	r3, [pc, #140]	@ (8000d3c <SystemClock_Config+0xe0>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc0:	2310      	movs	r3, #16
 8000cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ccc:	2308      	movs	r3, #8
 8000cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000cd0:	23b4      	movs	r3, #180	@ 0xb4
 8000cd2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f002 fb0d 	bl	8003304 <HAL_RCC_OscConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000cf0:	f000 fe30 	bl	8001954 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cf4:	f001 ff3a 	bl	8002b6c <HAL_PWREx_EnableOverDrive>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000cfe:	f000 fe29 	bl	8001954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d02:	230f      	movs	r3, #15
 8000d04:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d06:	2302      	movs	r3, #2
 8000d08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d0e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d18:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d1a:	f107 0308 	add.w	r3, r7, #8
 8000d1e:	2105      	movs	r1, #5
 8000d20:	4618      	mov	r0, r3
 8000d22:	f001 ff73 	bl	8002c0c <HAL_RCC_ClockConfig>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000d2c:	f000 fe12 	bl	8001954 <Error_Handler>
  }
}
 8000d30:	bf00      	nop
 8000d32:	3750      	adds	r7, #80	@ 0x50
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40007000 	.word	0x40007000

08000d40 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d44:	4b17      	ldr	r3, [pc, #92]	@ (8000da4 <MX_SPI2_Init+0x64>)
 8000d46:	4a18      	ldr	r2, [pc, #96]	@ (8000da8 <MX_SPI2_Init+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d4a:	4b16      	ldr	r3, [pc, #88]	@ (8000da4 <MX_SPI2_Init+0x64>)
 8000d4c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d50:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d52:	4b14      	ldr	r3, [pc, #80]	@ (8000da4 <MX_SPI2_Init+0x64>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d58:	4b12      	ldr	r3, [pc, #72]	@ (8000da4 <MX_SPI2_Init+0x64>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <MX_SPI2_Init+0x64>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	@ (8000da4 <MX_SPI2_Init+0x64>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000da4 <MX_SPI2_Init+0x64>)
 8000d6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d70:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d72:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <MX_SPI2_Init+0x64>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d78:	4b0a      	ldr	r3, [pc, #40]	@ (8000da4 <MX_SPI2_Init+0x64>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d7e:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <MX_SPI2_Init+0x64>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d84:	4b07      	ldr	r3, [pc, #28]	@ (8000da4 <MX_SPI2_Init+0x64>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d8a:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <MX_SPI2_Init+0x64>)
 8000d8c:	220a      	movs	r2, #10
 8000d8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d90:	4804      	ldr	r0, [pc, #16]	@ (8000da4 <MX_SPI2_Init+0x64>)
 8000d92:	f002 fd55 	bl	8003840 <HAL_SPI_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d9c:	f000 fdda 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000320 	.word	0x20000320
 8000da8:	40003800 	.word	0x40003800

08000dac <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000db0:	4b17      	ldr	r3, [pc, #92]	@ (8000e10 <MX_SPI3_Init+0x64>)
 8000db2:	4a18      	ldr	r2, [pc, #96]	@ (8000e14 <MX_SPI3_Init+0x68>)
 8000db4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000db6:	4b16      	ldr	r3, [pc, #88]	@ (8000e10 <MX_SPI3_Init+0x64>)
 8000db8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000dbc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000dbe:	4b14      	ldr	r3, [pc, #80]	@ (8000e10 <MX_SPI3_Init+0x64>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dc4:	4b12      	ldr	r3, [pc, #72]	@ (8000e10 <MX_SPI3_Init+0x64>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dca:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <MX_SPI3_Init+0x64>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e10 <MX_SPI3_Init+0x64>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <MX_SPI3_Init+0x64>)
 8000dd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ddc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dde:	4b0c      	ldr	r3, [pc, #48]	@ (8000e10 <MX_SPI3_Init+0x64>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000de4:	4b0a      	ldr	r3, [pc, #40]	@ (8000e10 <MX_SPI3_Init+0x64>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dea:	4b09      	ldr	r3, [pc, #36]	@ (8000e10 <MX_SPI3_Init+0x64>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000df0:	4b07      	ldr	r3, [pc, #28]	@ (8000e10 <MX_SPI3_Init+0x64>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000df6:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <MX_SPI3_Init+0x64>)
 8000df8:	220a      	movs	r2, #10
 8000dfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000dfc:	4804      	ldr	r0, [pc, #16]	@ (8000e10 <MX_SPI3_Init+0x64>)
 8000dfe:	f002 fd1f 	bl	8003840 <HAL_SPI_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000e08:	f000 fda4 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000378 	.word	0x20000378
 8000e14:	40003c00 	.word	0x40003c00

08000e18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	@ (8000e68 <MX_USART1_UART_Init+0x50>)
 8000e20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e22:	4b10      	ldr	r3, [pc, #64]	@ (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e30:	4b0c      	ldr	r3, [pc, #48]	@ (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e36:	4b0b      	ldr	r3, [pc, #44]	@ (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e3c:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e3e:	220c      	movs	r2, #12
 8000e40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e42:	4b08      	ldr	r3, [pc, #32]	@ (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e48:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e4e:	4805      	ldr	r0, [pc, #20]	@ (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e50:	f003 fd78 	bl	8004944 <HAL_UART_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e5a:	f000 fd7b 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200003d0 	.word	0x200003d0
 8000e68:	40011000 	.word	0x40011000

08000e6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e70:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e72:	4a12      	ldr	r2, [pc, #72]	@ (8000ebc <MX_USART2_UART_Init+0x50>)
 8000e74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e76:	4b10      	ldr	r3, [pc, #64]	@ (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e84:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e90:	4b09      	ldr	r3, [pc, #36]	@ (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e92:	220c      	movs	r2, #12
 8000e94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e96:	4b08      	ldr	r3, [pc, #32]	@ (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ea2:	4805      	ldr	r0, [pc, #20]	@ (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000ea4:	f003 fd4e 	bl	8004944 <HAL_UART_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eae:	f000 fd51 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000418 	.word	0x20000418
 8000ebc:	40004400 	.word	0x40004400

08000ec0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <MX_DMA_Init+0x3c>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	4a0b      	ldr	r2, [pc, #44]	@ (8000efc <MX_DMA_Init+0x3c>)
 8000ed0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed6:	4b09      	ldr	r3, [pc, #36]	@ (8000efc <MX_DMA_Init+0x3c>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2105      	movs	r1, #5
 8000ee6:	203a      	movs	r0, #58	@ 0x3a
 8000ee8:	f001 f8f8 	bl	80020dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000eec:	203a      	movs	r0, #58	@ 0x3a
 8000eee:	f001 f911 	bl	8002114 <HAL_NVIC_EnableIRQ>

}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40023800 	.word	0x40023800

08000f00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	@ 0x28
 8000f04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	4b42      	ldr	r3, [pc, #264]	@ (8001024 <MX_GPIO_Init+0x124>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	4a41      	ldr	r2, [pc, #260]	@ (8001024 <MX_GPIO_Init+0x124>)
 8000f20:	f043 0304 	orr.w	r3, r3, #4
 8000f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f26:	4b3f      	ldr	r3, [pc, #252]	@ (8001024 <MX_GPIO_Init+0x124>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b3b      	ldr	r3, [pc, #236]	@ (8001024 <MX_GPIO_Init+0x124>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	4a3a      	ldr	r2, [pc, #232]	@ (8001024 <MX_GPIO_Init+0x124>)
 8000f3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f42:	4b38      	ldr	r3, [pc, #224]	@ (8001024 <MX_GPIO_Init+0x124>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	4b34      	ldr	r3, [pc, #208]	@ (8001024 <MX_GPIO_Init+0x124>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a33      	ldr	r2, [pc, #204]	@ (8001024 <MX_GPIO_Init+0x124>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b31      	ldr	r3, [pc, #196]	@ (8001024 <MX_GPIO_Init+0x124>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	4b2d      	ldr	r3, [pc, #180]	@ (8001024 <MX_GPIO_Init+0x124>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	4a2c      	ldr	r2, [pc, #176]	@ (8001024 <MX_GPIO_Init+0x124>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001024 <MX_GPIO_Init+0x124>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2120      	movs	r1, #32
 8000f8a:	4827      	ldr	r0, [pc, #156]	@ (8001028 <MX_GPIO_Init+0x128>)
 8000f8c:	f001 fdd4 	bl	8002b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_Tx_Pin|DIO0_Tx_Pin|NSS_Tx_Pin|RST_Rx_Pin
 8000f90:	2200      	movs	r2, #0
 8000f92:	f248 0177 	movw	r1, #32887	@ 0x8077
 8000f96:	4825      	ldr	r0, [pc, #148]	@ (800102c <MX_GPIO_Init+0x12c>)
 8000f98:	f001 fdce 	bl	8002b38 <HAL_GPIO_WritePin>
                          |LORA_RX_LED_Pin|CAN_LED_Pin|IBUS_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIO0_Rx_Pin|NSS_Rx_Pin|LORA_TX_LED_Pin, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 8000fa2:	4823      	ldr	r0, [pc, #140]	@ (8001030 <MX_GPIO_Init+0x130>)
 8000fa4:	f001 fdc8 	bl	8002b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fa8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	481c      	ldr	r0, [pc, #112]	@ (8001030 <MX_GPIO_Init+0x130>)
 8000fc0:	f001 fc26 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fc4:	2320      	movs	r3, #32
 8000fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4813      	ldr	r0, [pc, #76]	@ (8001028 <MX_GPIO_Init+0x128>)
 8000fdc:	f001 fc18 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Tx_Pin DIO0_Tx_Pin NSS_Tx_Pin RST_Rx_Pin
                           LORA_RX_LED_Pin CAN_LED_Pin IBUS_LED_Pin */
  GPIO_InitStruct.Pin = RST_Tx_Pin|DIO0_Tx_Pin|NSS_Tx_Pin|RST_Rx_Pin
 8000fe0:	f248 0377 	movw	r3, #32887	@ 0x8077
 8000fe4:	617b      	str	r3, [r7, #20]
                          |LORA_RX_LED_Pin|CAN_LED_Pin|IBUS_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480c      	ldr	r0, [pc, #48]	@ (800102c <MX_GPIO_Init+0x12c>)
 8000ffa:	f001 fc09 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO0_Rx_Pin NSS_Rx_Pin LORA_TX_LED_Pin */
  GPIO_InitStruct.Pin = DIO0_Rx_Pin|NSS_Rx_Pin|LORA_TX_LED_Pin;
 8000ffe:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8001002:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001004:	2301      	movs	r3, #1
 8001006:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4619      	mov	r1, r3
 8001016:	4806      	ldr	r0, [pc, #24]	@ (8001030 <MX_GPIO_Init+0x130>)
 8001018:	f001 fbfa 	bl	8002810 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800101c:	bf00      	nop
 800101e:	3728      	adds	r7, #40	@ 0x28
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40023800 	.word	0x40023800
 8001028:	40020000 	.word	0x40020000
 800102c:	40020400 	.word	0x40020400
 8001030:	40020800 	.word	0x40020800

08001034 <StartTask01>:

/* USER CODE END Header_StartTask01 */

/* Debugging IBUS */
void StartTask01(void const * argument)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  for(;;)
  {
	  IBUS_data_print();
 800103c:	f000 fb36 	bl	80016ac <IBUS_data_print>

	//HAL_UART_Transmit(&huart2, (uint8_t*)"Task 1 !\n", strlen("Task 1 !\n"), HAL_MAX_DELAY);
	  osDelay(100);
 8001040:	2064      	movs	r0, #100	@ 0x64
 8001042:	f004 fb06 	bl	8005652 <osDelay>
	  IBUS_data_print();
 8001046:	bf00      	nop
 8001048:	e7f8      	b.n	800103c <StartTask01+0x8>
	...

0800104c <StartTask02>:

/* USER CODE END Header_StartTask01 */

/* LORA Receiving */
void StartTask02(void const * argument)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	uint8_t packet_size = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	73fb      	strb	r3, [r7, #15]
	LoRa_startReceiving(&LoRa_Receive);
 8001058:	480e      	ldr	r0, [pc, #56]	@ (8001094 <StartTask02+0x48>)
 800105a:	f7ff fcca 	bl	80009f2 <LoRa_startReceiving>
	packet_size = LoRa_receive(&LoRa_Receive, read_data, 128);
 800105e:	2280      	movs	r2, #128	@ 0x80
 8001060:	490d      	ldr	r1, [pc, #52]	@ (8001098 <StartTask02+0x4c>)
 8001062:	480c      	ldr	r0, [pc, #48]	@ (8001094 <StartTask02+0x48>)
 8001064:	f7ff fcd1 	bl	8000a0a <LoRa_receive>
 8001068:	4603      	mov	r3, r0
 800106a:	73fb      	strb	r3, [r7, #15]


	HAL_UART_Transmit(&huart2, (uint8_t*)read_data, packet_size,HAL_MAX_DELAY);
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	b29a      	uxth	r2, r3
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
 8001074:	4908      	ldr	r1, [pc, #32]	@ (8001098 <StartTask02+0x4c>)
 8001076:	4809      	ldr	r0, [pc, #36]	@ (800109c <StartTask02+0x50>)
 8001078:	f003 fcb4 	bl	80049e4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2,(uint8_t*)"\n", 1,HAL_MAX_DELAY);
 800107c:	f04f 33ff 	mov.w	r3, #4294967295
 8001080:	2201      	movs	r2, #1
 8001082:	4907      	ldr	r1, [pc, #28]	@ (80010a0 <StartTask02+0x54>)
 8001084:	4805      	ldr	r0, [pc, #20]	@ (800109c <StartTask02+0x50>)
 8001086:	f003 fcad 	bl	80049e4 <HAL_UART_Transmit>

	//HAL_UART_Transmit(&huart2, (uint8_t*)"Task 2 !\n", strlen("Task 2 !\n"), HAL_MAX_DELAY);
    osDelay(130);
 800108a:	2082      	movs	r0, #130	@ 0x82
 800108c:	f004 fae1 	bl	8005652 <osDelay>
  {
 8001090:	bf00      	nop
 8001092:	e7df      	b.n	8001054 <StartTask02+0x8>
 8001094:	200004d8 	.word	0x200004d8
 8001098:	2000094c 	.word	0x2000094c
 800109c:	20000418 	.word	0x20000418
 80010a0:	08007714 	.word	0x08007714

080010a4 <StartTask03>:
*/
/* USER CODE END Header_StartTask03 */

/* IBUS Data Receiving */
void StartTask03(void const * argument)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	copy_buffer(RxIBus->buffer, 64); //parsing data from IBUS receiver
 80010ac:	4b0b      	ldr	r3, [pc, #44]	@ (80010dc <StartTask03+0x38>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	2140      	movs	r1, #64	@ 0x40
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 fa8b 	bl	80015d0 <copy_buffer>

	//parsing data and check data via checksum
	if(extract_and_sum_data()==true){
 80010ba:	f000 f869 	bl	8001190 <extract_and_sum_data>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <StartTask03+0x24>
	channel_value(); //channel data parsing
 80010c4:	f000 f91e 	bl	8001304 <channel_value>
	 }
	J3_IBUS_RequestNewData(RxIBus); //getting new data via DMA
 80010c8:	4b04      	ldr	r3, [pc, #16]	@ (80010dc <StartTask03+0x38>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fac4 	bl	800065a <J3_IBUS_RequestNewData>

	//HAL_UART_Transmit(&huart2, (uint8_t*)"Task 3 !\n", strlen("Task 3 !\n"), HAL_MAX_DELAY);

    osDelay(5);
 80010d2:	2005      	movs	r0, #5
 80010d4:	f004 fabd 	bl	8005652 <osDelay>
  {
 80010d8:	e7e8      	b.n	80010ac <StartTask03+0x8>
 80010da:	bf00      	nop
 80010dc:	200004d4 	.word	0x200004d4

080010e0 <StartTask04>:
*/
/* USER CODE END Header_StartTask04 */

/* LORA Data Transmitting */
void StartTask04(void const * argument)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

	//demo value
	    for (int i = 0; i <= 120; i++) {
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	e015      	b.n	800111a <StartTask04+0x3a>
	        send_data[i] = 'a' + (i % 26);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4a11      	ldr	r2, [pc, #68]	@ (8001138 <StartTask04+0x58>)
 80010f2:	fb82 1203 	smull	r1, r2, r2, r3
 80010f6:	10d1      	asrs	r1, r2, #3
 80010f8:	17da      	asrs	r2, r3, #31
 80010fa:	1a8a      	subs	r2, r1, r2
 80010fc:	211a      	movs	r1, #26
 80010fe:	fb01 f202 	mul.w	r2, r1, r2
 8001102:	1a9a      	subs	r2, r3, r2
 8001104:	b2d3      	uxtb	r3, r2
 8001106:	3361      	adds	r3, #97	@ 0x61
 8001108:	b2d9      	uxtb	r1, r3
 800110a:	4a0c      	ldr	r2, [pc, #48]	@ (800113c <StartTask04+0x5c>)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4413      	add	r3, r2
 8001110:	460a      	mov	r2, r1
 8001112:	701a      	strb	r2, [r3, #0]
	    for (int i = 0; i <= 120; i++) {
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	3301      	adds	r3, #1
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2b78      	cmp	r3, #120	@ 0x78
 800111e:	dde6      	ble.n	80010ee <StartTask04+0xe>
	    }

	 LoRa_transmit(&LoRa_Transmit, send_data, 128, 500);
 8001120:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001124:	2280      	movs	r2, #128	@ 0x80
 8001126:	4905      	ldr	r1, [pc, #20]	@ (800113c <StartTask04+0x5c>)
 8001128:	4805      	ldr	r0, [pc, #20]	@ (8001140 <StartTask04+0x60>)
 800112a:	f7ff fc0a 	bl	8000942 <LoRa_transmit>

	 //HAL_UART_Transmit(&huart2, (uint8_t*)"Task 4 !\n", strlen("Task 4 !\n"), HAL_MAX_DELAY);
	 osDelay(50);
 800112e:	2032      	movs	r0, #50	@ 0x32
 8001130:	f004 fa8f 	bl	8005652 <osDelay>
	    for (int i = 0; i <= 120; i++) {
 8001134:	e7d8      	b.n	80010e8 <StartTask04+0x8>
 8001136:	bf00      	nop
 8001138:	4ec4ec4f 	.word	0x4ec4ec4f
 800113c:	200009cc 	.word	0x200009cc
 8001140:	20000504 	.word	0x20000504

08001144 <StartTask05>:
*/
/* USER CODE END Header_StartTask05 */

/* Mode */
void StartTask05(void const * argument)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {

	HAL_UART_Transmit(&huart2, (uint8_t*)"CAN Simulate!\n", strlen("CAN Simulate!\n"), HAL_MAX_DELAY);
 800114c:	f04f 33ff 	mov.w	r3, #4294967295
 8001150:	220e      	movs	r2, #14
 8001152:	4904      	ldr	r1, [pc, #16]	@ (8001164 <StartTask05+0x20>)
 8001154:	4804      	ldr	r0, [pc, #16]	@ (8001168 <StartTask05+0x24>)
 8001156:	f003 fc45 	bl	80049e4 <HAL_UART_Transmit>
    osDelay(100);
 800115a:	2064      	movs	r0, #100	@ 0x64
 800115c:	f004 fa79 	bl	8005652 <osDelay>
	HAL_UART_Transmit(&huart2, (uint8_t*)"CAN Simulate!\n", strlen("CAN Simulate!\n"), HAL_MAX_DELAY);
 8001160:	bf00      	nop
 8001162:	e7f3      	b.n	800114c <StartTask05+0x8>
 8001164:	08007718 	.word	0x08007718
 8001168:	20000418 	.word	0x20000418

0800116c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a04      	ldr	r2, [pc, #16]	@ (800118c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d101      	bne.n	8001182 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800117e:	f000 feb1 	bl	8001ee4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40010000 	.word	0x40010000

08001190 <extract_and_sum_data>:

bool extract_and_sum_data(void) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
	//local parsing variables

    uint32_t sum = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
    uint16_t num_values = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	837b      	strh	r3, [r7, #26]
    uint16_t num_values_x = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	833b      	strh	r3, [r7, #24]
    uint16_t last_two_values[2] = {0};
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]


    for (uint16_t i = 0; i < temp_buffer_index - 3; i++) {
 80011a6:	2300      	movs	r3, #0
 80011a8:	82fb      	strh	r3, [r7, #22]
 80011aa:	e03c      	b.n	8001226 <extract_and_sum_data+0x96>
        if (temp_buffer[i] == '0' && temp_buffer[i + 1] == 'x') {
 80011ac:	8afb      	ldrh	r3, [r7, #22]
 80011ae:	4a50      	ldr	r2, [pc, #320]	@ (80012f0 <extract_and_sum_data+0x160>)
 80011b0:	5cd3      	ldrb	r3, [r2, r3]
 80011b2:	2b30      	cmp	r3, #48	@ 0x30
 80011b4:	d134      	bne.n	8001220 <extract_and_sum_data+0x90>
 80011b6:	8afb      	ldrh	r3, [r7, #22]
 80011b8:	3301      	adds	r3, #1
 80011ba:	4a4d      	ldr	r2, [pc, #308]	@ (80012f0 <extract_and_sum_data+0x160>)
 80011bc:	5cd3      	ldrb	r3, [r2, r3]
 80011be:	2b78      	cmp	r3, #120	@ 0x78
 80011c0:	d12e      	bne.n	8001220 <extract_and_sum_data+0x90>

            char hex_value[3] = {};
 80011c2:	4b4c      	ldr	r3, [pc, #304]	@ (80012f4 <extract_and_sum_data+0x164>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	723b      	strb	r3, [r7, #8]
 80011c8:	f107 0309 	add.w	r3, r7, #9
 80011cc:	2200      	movs	r2, #0
 80011ce:	801a      	strh	r2, [r3, #0]
            hex_value[0] = temp_buffer[i + 2];
 80011d0:	8afb      	ldrh	r3, [r7, #22]
 80011d2:	3302      	adds	r3, #2
 80011d4:	4a46      	ldr	r2, [pc, #280]	@ (80012f0 <extract_and_sum_data+0x160>)
 80011d6:	5cd3      	ldrb	r3, [r2, r3]
 80011d8:	723b      	strb	r3, [r7, #8]
            hex_value[1] = temp_buffer[i + 3];
 80011da:	8afb      	ldrh	r3, [r7, #22]
 80011dc:	3303      	adds	r3, #3
 80011de:	4a44      	ldr	r2, [pc, #272]	@ (80012f0 <extract_and_sum_data+0x160>)
 80011e0:	5cd3      	ldrb	r3, [r2, r3]
 80011e2:	727b      	strb	r3, [r7, #9]

            uint8_t value = (uint8_t)strtol(hex_value, NULL, 16);
 80011e4:	f107 0308 	add.w	r3, r7, #8
 80011e8:	2210      	movs	r2, #16
 80011ea:	2100      	movs	r1, #0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f005 fd89 	bl	8006d04 <strtol>
 80011f2:	4603      	mov	r3, r0
 80011f4:	74fb      	strb	r3, [r7, #19]
            num_values_x++;
 80011f6:	8b3b      	ldrh	r3, [r7, #24]
 80011f8:	3301      	adds	r3, #1
 80011fa:	833b      	strh	r3, [r7, #24]
           if (num_values_x == 31) {
 80011fc:	8b3b      	ldrh	r3, [r7, #24]
 80011fe:	2b1f      	cmp	r3, #31
 8001200:	d102      	bne.n	8001208 <extract_and_sum_data+0x78>
                last_two_values[0] = value;
 8001202:	7cfb      	ldrb	r3, [r7, #19]
 8001204:	b29b      	uxth	r3, r3
 8001206:	81bb      	strh	r3, [r7, #12]
            }
            if (num_values_x == 32) {
 8001208:	8b3b      	ldrh	r3, [r7, #24]
 800120a:	2b20      	cmp	r3, #32
 800120c:	d102      	bne.n	8001214 <extract_and_sum_data+0x84>
                last_two_values[1] = value;
 800120e:	7cfb      	ldrb	r3, [r7, #19]
 8001210:	b29b      	uxth	r3, r3
 8001212:	81fb      	strh	r3, [r7, #14]
            }

            i += 3;
 8001214:	8afb      	ldrh	r3, [r7, #22]
 8001216:	3303      	adds	r3, #3
 8001218:	82fb      	strh	r3, [r7, #22]

            if (num_values_x >= 32) {
 800121a:	8b3b      	ldrh	r3, [r7, #24]
 800121c:	2b1f      	cmp	r3, #31
 800121e:	d809      	bhi.n	8001234 <extract_and_sum_data+0xa4>
    for (uint16_t i = 0; i < temp_buffer_index - 3; i++) {
 8001220:	8afb      	ldrh	r3, [r7, #22]
 8001222:	3301      	adds	r3, #1
 8001224:	82fb      	strh	r3, [r7, #22]
 8001226:	8afa      	ldrh	r2, [r7, #22]
 8001228:	4b33      	ldr	r3, [pc, #204]	@ (80012f8 <extract_and_sum_data+0x168>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	3b03      	subs	r3, #3
 800122e:	429a      	cmp	r2, r3
 8001230:	dbbc      	blt.n	80011ac <extract_and_sum_data+0x1c>
 8001232:	e000      	b.n	8001236 <extract_and_sum_data+0xa6>
                break;
 8001234:	bf00      	nop
            }
        }
    }


    for (uint16_t i = 0; i < temp_buffer_index - 3; i++) {
 8001236:	2300      	movs	r3, #0
 8001238:	82bb      	strh	r3, [r7, #20]
 800123a:	e032      	b.n	80012a2 <extract_and_sum_data+0x112>
        if (temp_buffer[i] == '0' && temp_buffer[i + 1] == 'x') {
 800123c:	8abb      	ldrh	r3, [r7, #20]
 800123e:	4a2c      	ldr	r2, [pc, #176]	@ (80012f0 <extract_and_sum_data+0x160>)
 8001240:	5cd3      	ldrb	r3, [r2, r3]
 8001242:	2b30      	cmp	r3, #48	@ 0x30
 8001244:	d12a      	bne.n	800129c <extract_and_sum_data+0x10c>
 8001246:	8abb      	ldrh	r3, [r7, #20]
 8001248:	3301      	adds	r3, #1
 800124a:	4a29      	ldr	r2, [pc, #164]	@ (80012f0 <extract_and_sum_data+0x160>)
 800124c:	5cd3      	ldrb	r3, [r2, r3]
 800124e:	2b78      	cmp	r3, #120	@ 0x78
 8001250:	d124      	bne.n	800129c <extract_and_sum_data+0x10c>
            char hex_value[3] = {};
 8001252:	4b28      	ldr	r3, [pc, #160]	@ (80012f4 <extract_and_sum_data+0x164>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	713b      	strb	r3, [r7, #4]
 8001258:	1d7b      	adds	r3, r7, #5
 800125a:	2200      	movs	r2, #0
 800125c:	801a      	strh	r2, [r3, #0]
            hex_value[0] = temp_buffer[i + 2];
 800125e:	8abb      	ldrh	r3, [r7, #20]
 8001260:	3302      	adds	r3, #2
 8001262:	4a23      	ldr	r2, [pc, #140]	@ (80012f0 <extract_and_sum_data+0x160>)
 8001264:	5cd3      	ldrb	r3, [r2, r3]
 8001266:	713b      	strb	r3, [r7, #4]
            hex_value[1] = temp_buffer[i + 3];
 8001268:	8abb      	ldrh	r3, [r7, #20]
 800126a:	3303      	adds	r3, #3
 800126c:	4a20      	ldr	r2, [pc, #128]	@ (80012f0 <extract_and_sum_data+0x160>)
 800126e:	5cd3      	ldrb	r3, [r2, r3]
 8001270:	717b      	strb	r3, [r7, #5]

            uint8_t value = (uint8_t)strtol(hex_value, NULL, 16);
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	2210      	movs	r2, #16
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f005 fd43 	bl	8006d04 <strtol>
 800127e:	4603      	mov	r3, r0
 8001280:	74bb      	strb	r3, [r7, #18]
            sum += value;
 8001282:	7cbb      	ldrb	r3, [r7, #18]
 8001284:	69fa      	ldr	r2, [r7, #28]
 8001286:	4413      	add	r3, r2
 8001288:	61fb      	str	r3, [r7, #28]
            num_values++;
 800128a:	8b7b      	ldrh	r3, [r7, #26]
 800128c:	3301      	adds	r3, #1
 800128e:	837b      	strh	r3, [r7, #26]

            i += 3;
 8001290:	8abb      	ldrh	r3, [r7, #20]
 8001292:	3303      	adds	r3, #3
 8001294:	82bb      	strh	r3, [r7, #20]
            if (num_values >= 30) {
 8001296:	8b7b      	ldrh	r3, [r7, #26]
 8001298:	2b1d      	cmp	r3, #29
 800129a:	d809      	bhi.n	80012b0 <extract_and_sum_data+0x120>
    for (uint16_t i = 0; i < temp_buffer_index - 3; i++) {
 800129c:	8abb      	ldrh	r3, [r7, #20]
 800129e:	3301      	adds	r3, #1
 80012a0:	82bb      	strh	r3, [r7, #20]
 80012a2:	8aba      	ldrh	r2, [r7, #20]
 80012a4:	4b14      	ldr	r3, [pc, #80]	@ (80012f8 <extract_and_sum_data+0x168>)
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	3b03      	subs	r3, #3
 80012aa:	429a      	cmp	r2, r3
 80012ac:	dbc6      	blt.n	800123c <extract_and_sum_data+0xac>
 80012ae:	e000      	b.n	80012b2 <extract_and_sum_data+0x122>
                break;
 80012b0:	bf00      	nop
            }
        }
    }

    result = 0xFFFF - sum;
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 80012b8:	33ff      	adds	r3, #255	@ 0xff
 80012ba:	4a10      	ldr	r2, [pc, #64]	@ (80012fc <extract_and_sum_data+0x16c>)
 80012bc:	6013      	str	r3, [r2, #0]


    expected_result = (last_two_values[1] << 8) | last_two_values[0];
 80012be:	89fb      	ldrh	r3, [r7, #14]
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	b21a      	sxth	r2, r3
 80012c4:	89bb      	ldrh	r3, [r7, #12]
 80012c6:	b21b      	sxth	r3, r3
 80012c8:	4313      	orrs	r3, r2
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <extract_and_sum_data+0x170>)
 80012d0:	801a      	strh	r2, [r3, #0]

    snprintf(result_str_2, sizeof(result_str), "Expected: 0x%04X", expected_result);
    HAL_UART_Transmit(&huart2, (uint8_t*)result_str, strlen(result_str), HAL_MAX_DELAY);
    HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);  // Send newline after expected result*/

    if (result == expected_result) {
 80012d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001300 <extract_and_sum_data+0x170>)
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	4b08      	ldr	r3, [pc, #32]	@ (80012fc <extract_and_sum_data+0x16c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d101      	bne.n	80012e4 <extract_and_sum_data+0x154>
        //HAL_UART_Transmit(&huart2, "Match!\r\n", 8, HAL_MAX_DELAY);
    	return true;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e000      	b.n	80012e6 <extract_and_sum_data+0x156>
    } else {
        //HAL_UART_Transmit(&huart2, "No Match!\r\n", 11, HAL_MAX_DELAY);
        //Error_Handler();
    	return false;
 80012e4:	2300      	movs	r3, #0
    }
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3720      	adds	r7, #32
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000530 	.word	0x20000530
 80012f4:	08007728 	.word	0x08007728
 80012f8:	20000930 	.word	0x20000930
 80012fc:	20000934 	.word	0x20000934
 8001300:	20000932 	.word	0x20000932

08001304 <channel_value>:


void channel_value() {
 8001304:	b580      	push	{r7, lr}
 8001306:	b08e      	sub	sp, #56	@ 0x38
 8001308:	af00      	add	r7, sp, #0
    uint16_t num_values_x = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    uint16_t channel_1_hex[2] = {0};
 800130e:	2300      	movs	r3, #0
 8001310:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t channel_2_hex[2] = {0};
 8001312:	2300      	movs	r3, #0
 8001314:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint16_t channel_3_hex[2] = {0};
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t channel_4_hex[2] = {0};
 800131a:	2300      	movs	r3, #0
 800131c:	623b      	str	r3, [r7, #32]
    uint16_t channel_5_hex[2] = {0};
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
    uint16_t channel_6_hex[2] = {0};
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
    uint16_t channel_7_hex[2] = {0};
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
    uint16_t channel_8_hex[2] = {0};
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
    uint16_t channel_9_hex[2] = {0};
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
    uint16_t channel_10_hex[2] = {0};
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]

    for (uint16_t i = 0; i < temp_buffer_index - 3; i++) {
 8001336:	2300      	movs	r3, #0
 8001338:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800133a:	e0bd      	b.n	80014b8 <channel_value+0x1b4>
        if (temp_buffer[i] == '0' && temp_buffer[i + 1] == 'x') {
 800133c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800133e:	4a62      	ldr	r2, [pc, #392]	@ (80014c8 <channel_value+0x1c4>)
 8001340:	5cd3      	ldrb	r3, [r2, r3]
 8001342:	2b30      	cmp	r3, #48	@ 0x30
 8001344:	f040 80b5 	bne.w	80014b2 <channel_value+0x1ae>
 8001348:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800134a:	3301      	adds	r3, #1
 800134c:	4a5e      	ldr	r2, [pc, #376]	@ (80014c8 <channel_value+0x1c4>)
 800134e:	5cd3      	ldrb	r3, [r2, r3]
 8001350:	2b78      	cmp	r3, #120	@ 0x78
 8001352:	f040 80ae 	bne.w	80014b2 <channel_value+0x1ae>

            char hex_value[3] = {};
 8001356:	4b5d      	ldr	r3, [pc, #372]	@ (80014cc <channel_value+0x1c8>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	713b      	strb	r3, [r7, #4]
 800135c:	1d7b      	adds	r3, r7, #5
 800135e:	2200      	movs	r2, #0
 8001360:	801a      	strh	r2, [r3, #0]
            hex_value[0] = temp_buffer[i + 2];
 8001362:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001364:	3302      	adds	r3, #2
 8001366:	4a58      	ldr	r2, [pc, #352]	@ (80014c8 <channel_value+0x1c4>)
 8001368:	5cd3      	ldrb	r3, [r2, r3]
 800136a:	713b      	strb	r3, [r7, #4]
            hex_value[1] = temp_buffer[i + 3];
 800136c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800136e:	3303      	adds	r3, #3
 8001370:	4a55      	ldr	r2, [pc, #340]	@ (80014c8 <channel_value+0x1c4>)
 8001372:	5cd3      	ldrb	r3, [r2, r3]
 8001374:	717b      	strb	r3, [r7, #5]

            uint8_t value = (uint8_t)strtol(hex_value, NULL, 16);
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2210      	movs	r2, #16
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f005 fcc1 	bl	8006d04 <strtol>
 8001382:	4603      	mov	r3, r0
 8001384:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            num_values_x++;
 8001388:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800138a:	3301      	adds	r3, #1
 800138c:	86fb      	strh	r3, [r7, #54]	@ 0x36

            //channel 1
            if (num_values_x == 3) {
 800138e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001390:	2b03      	cmp	r3, #3
 8001392:	d103      	bne.n	800139c <channel_value+0x98>
            	channel_1_hex[0] = value;
 8001394:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001398:	b29b      	uxth	r3, r3
 800139a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            }
            if (num_values_x == 4) {
 800139c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800139e:	2b04      	cmp	r3, #4
 80013a0:	d103      	bne.n	80013aa <channel_value+0xa6>
            	channel_1_hex[1] = value;
 80013a2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            }
            //channel 2
            if (num_values_x == 5) {
 80013aa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80013ac:	2b05      	cmp	r3, #5
 80013ae:	d103      	bne.n	80013b8 <channel_value+0xb4>
            	channel_2_hex[0] = value;
 80013b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	853b      	strh	r3, [r7, #40]	@ 0x28
            }
            if (num_values_x == 6) {
 80013b8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d103      	bne.n	80013c6 <channel_value+0xc2>
            	channel_2_hex[1] = value;
 80013be:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	857b      	strh	r3, [r7, #42]	@ 0x2a
            }
            //channel 3
            if (num_values_x == 7) {
 80013c6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80013c8:	2b07      	cmp	r3, #7
 80013ca:	d103      	bne.n	80013d4 <channel_value+0xd0>
            	channel_3_hex[0] = value;
 80013cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	84bb      	strh	r3, [r7, #36]	@ 0x24
            }
            if (num_values_x == 8) {
 80013d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	d103      	bne.n	80013e2 <channel_value+0xde>
            	channel_3_hex[1] = value;
 80013da:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013de:	b29b      	uxth	r3, r3
 80013e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
            }
            //channel 4
            if (num_values_x == 9) {
 80013e2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80013e4:	2b09      	cmp	r3, #9
 80013e6:	d103      	bne.n	80013f0 <channel_value+0xec>
            	channel_4_hex[0] = value;
 80013e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	843b      	strh	r3, [r7, #32]
            }
            if (num_values_x == 10) {
 80013f0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80013f2:	2b0a      	cmp	r3, #10
 80013f4:	d103      	bne.n	80013fe <channel_value+0xfa>
            	channel_4_hex[1] = value;
 80013f6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	847b      	strh	r3, [r7, #34]	@ 0x22
            }
            //channel 5
            if (num_values_x == 11) {
 80013fe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001400:	2b0b      	cmp	r3, #11
 8001402:	d103      	bne.n	800140c <channel_value+0x108>
            	channel_5_hex[0] = value;
 8001404:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001408:	b29b      	uxth	r3, r3
 800140a:	83bb      	strh	r3, [r7, #28]
            }
            if (num_values_x == 12) {
 800140c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800140e:	2b0c      	cmp	r3, #12
 8001410:	d103      	bne.n	800141a <channel_value+0x116>
            	channel_5_hex[1] = value;
 8001412:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001416:	b29b      	uxth	r3, r3
 8001418:	83fb      	strh	r3, [r7, #30]
            }
            //channel 6
            if (num_values_x == 13) {
 800141a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800141c:	2b0d      	cmp	r3, #13
 800141e:	d103      	bne.n	8001428 <channel_value+0x124>
            	channel_6_hex[0] = value;
 8001420:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001424:	b29b      	uxth	r3, r3
 8001426:	833b      	strh	r3, [r7, #24]
            }
            if (num_values_x == 14) {
 8001428:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800142a:	2b0e      	cmp	r3, #14
 800142c:	d103      	bne.n	8001436 <channel_value+0x132>
            	channel_6_hex[1] = value;
 800142e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001432:	b29b      	uxth	r3, r3
 8001434:	837b      	strh	r3, [r7, #26]
            }
            //channel 7
            if (num_values_x == 15) {
 8001436:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001438:	2b0f      	cmp	r3, #15
 800143a:	d103      	bne.n	8001444 <channel_value+0x140>
            	channel_7_hex[0] = value;
 800143c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001440:	b29b      	uxth	r3, r3
 8001442:	82bb      	strh	r3, [r7, #20]
            }
            if (num_values_x == 16) {
 8001444:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001446:	2b10      	cmp	r3, #16
 8001448:	d103      	bne.n	8001452 <channel_value+0x14e>
            	channel_7_hex[1] = value;
 800144a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800144e:	b29b      	uxth	r3, r3
 8001450:	82fb      	strh	r3, [r7, #22]
            }
            //channel 8
            if (num_values_x == 17) {
 8001452:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001454:	2b11      	cmp	r3, #17
 8001456:	d103      	bne.n	8001460 <channel_value+0x15c>
            	channel_8_hex[0] = value;
 8001458:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800145c:	b29b      	uxth	r3, r3
 800145e:	823b      	strh	r3, [r7, #16]
            }
            if (num_values_x == 18) {
 8001460:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001462:	2b12      	cmp	r3, #18
 8001464:	d103      	bne.n	800146e <channel_value+0x16a>
            	channel_8_hex[1] = value;
 8001466:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800146a:	b29b      	uxth	r3, r3
 800146c:	827b      	strh	r3, [r7, #18]
            }
            //channel 9
            if (num_values_x == 19) {
 800146e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001470:	2b13      	cmp	r3, #19
 8001472:	d103      	bne.n	800147c <channel_value+0x178>
            	channel_9_hex[0] = value;
 8001474:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001478:	b29b      	uxth	r3, r3
 800147a:	81bb      	strh	r3, [r7, #12]
            }
            if (num_values_x == 20) {
 800147c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800147e:	2b14      	cmp	r3, #20
 8001480:	d103      	bne.n	800148a <channel_value+0x186>
            	channel_9_hex[1] = value;
 8001482:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001486:	b29b      	uxth	r3, r3
 8001488:	81fb      	strh	r3, [r7, #14]
            }
            //channel 10
            if (num_values_x == 21) {
 800148a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800148c:	2b15      	cmp	r3, #21
 800148e:	d103      	bne.n	8001498 <channel_value+0x194>
            	channel_10_hex[0] = value;
 8001490:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001494:	b29b      	uxth	r3, r3
 8001496:	813b      	strh	r3, [r7, #8]
            }
            if (num_values_x == 22) {
 8001498:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800149a:	2b16      	cmp	r3, #22
 800149c:	d103      	bne.n	80014a6 <channel_value+0x1a2>
            	channel_10_hex[1] = value;
 800149e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	817b      	strh	r3, [r7, #10]
            }

            i += 3;
 80014a6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80014a8:	3303      	adds	r3, #3
 80014aa:	86bb      	strh	r3, [r7, #52]	@ 0x34

            if (num_values_x >= 25) {
 80014ac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80014ae:	2b18      	cmp	r3, #24
 80014b0:	d810      	bhi.n	80014d4 <channel_value+0x1d0>
    for (uint16_t i = 0; i < temp_buffer_index - 3; i++) {
 80014b2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80014b4:	3301      	adds	r3, #1
 80014b6:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80014b8:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80014ba:	4b05      	ldr	r3, [pc, #20]	@ (80014d0 <channel_value+0x1cc>)
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	3b03      	subs	r3, #3
 80014c0:	429a      	cmp	r2, r3
 80014c2:	f6ff af3b 	blt.w	800133c <channel_value+0x38>
 80014c6:	e006      	b.n	80014d6 <channel_value+0x1d2>
 80014c8:	20000530 	.word	0x20000530
 80014cc:	08007728 	.word	0x08007728
 80014d0:	20000930 	.word	0x20000930
                break;
 80014d4:	bf00      	nop
            }
        }
    }

    // Combine the two last values to get the expected result in little-endian format
    channel_1 = (channel_1_hex[1] << 8) | channel_1_hex[0];
 80014d6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80014d8:	021b      	lsls	r3, r3, #8
 80014da:	b21a      	sxth	r2, r3
 80014dc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80014de:	b21b      	sxth	r3, r3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	4b30      	ldr	r3, [pc, #192]	@ (80015a8 <channel_value+0x2a4>)
 80014e8:	801a      	strh	r2, [r3, #0]
    channel_2 = (channel_2_hex[1] << 8) | channel_2_hex[0];
 80014ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80014ec:	021b      	lsls	r3, r3, #8
 80014ee:	b21a      	sxth	r2, r3
 80014f0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80014f2:	b21b      	sxth	r3, r3
 80014f4:	4313      	orrs	r3, r2
 80014f6:	b21b      	sxth	r3, r3
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	4b2c      	ldr	r3, [pc, #176]	@ (80015ac <channel_value+0x2a8>)
 80014fc:	801a      	strh	r2, [r3, #0]
    channel_3 = (channel_3_hex[1] << 8) | channel_3_hex[0];
 80014fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	b21a      	sxth	r2, r3
 8001504:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001506:	b21b      	sxth	r3, r3
 8001508:	4313      	orrs	r3, r2
 800150a:	b21b      	sxth	r3, r3
 800150c:	b29a      	uxth	r2, r3
 800150e:	4b28      	ldr	r3, [pc, #160]	@ (80015b0 <channel_value+0x2ac>)
 8001510:	801a      	strh	r2, [r3, #0]
    channel_4 = (channel_4_hex[1] << 8) | channel_4_hex[0];
 8001512:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001514:	021b      	lsls	r3, r3, #8
 8001516:	b21a      	sxth	r2, r3
 8001518:	8c3b      	ldrh	r3, [r7, #32]
 800151a:	b21b      	sxth	r3, r3
 800151c:	4313      	orrs	r3, r2
 800151e:	b21b      	sxth	r3, r3
 8001520:	b29a      	uxth	r2, r3
 8001522:	4b24      	ldr	r3, [pc, #144]	@ (80015b4 <channel_value+0x2b0>)
 8001524:	801a      	strh	r2, [r3, #0]
    channel_5 = (channel_5_hex[1] << 8) | channel_5_hex[0];
 8001526:	8bfb      	ldrh	r3, [r7, #30]
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	b21a      	sxth	r2, r3
 800152c:	8bbb      	ldrh	r3, [r7, #28]
 800152e:	b21b      	sxth	r3, r3
 8001530:	4313      	orrs	r3, r2
 8001532:	b21b      	sxth	r3, r3
 8001534:	b29a      	uxth	r2, r3
 8001536:	4b20      	ldr	r3, [pc, #128]	@ (80015b8 <channel_value+0x2b4>)
 8001538:	801a      	strh	r2, [r3, #0]
    channel_6 = (channel_6_hex[1] << 8) | channel_6_hex[0];
 800153a:	8b7b      	ldrh	r3, [r7, #26]
 800153c:	021b      	lsls	r3, r3, #8
 800153e:	b21a      	sxth	r2, r3
 8001540:	8b3b      	ldrh	r3, [r7, #24]
 8001542:	b21b      	sxth	r3, r3
 8001544:	4313      	orrs	r3, r2
 8001546:	b21b      	sxth	r3, r3
 8001548:	b29a      	uxth	r2, r3
 800154a:	4b1c      	ldr	r3, [pc, #112]	@ (80015bc <channel_value+0x2b8>)
 800154c:	801a      	strh	r2, [r3, #0]
    channel_7 = (channel_7_hex[1] << 8) | channel_7_hex[0];
 800154e:	8afb      	ldrh	r3, [r7, #22]
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	b21a      	sxth	r2, r3
 8001554:	8abb      	ldrh	r3, [r7, #20]
 8001556:	b21b      	sxth	r3, r3
 8001558:	4313      	orrs	r3, r2
 800155a:	b21b      	sxth	r3, r3
 800155c:	b29a      	uxth	r2, r3
 800155e:	4b18      	ldr	r3, [pc, #96]	@ (80015c0 <channel_value+0x2bc>)
 8001560:	801a      	strh	r2, [r3, #0]
    channel_8 = (channel_8_hex[1] << 8) | channel_8_hex[0];
 8001562:	8a7b      	ldrh	r3, [r7, #18]
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	b21a      	sxth	r2, r3
 8001568:	8a3b      	ldrh	r3, [r7, #16]
 800156a:	b21b      	sxth	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	b21b      	sxth	r3, r3
 8001570:	b29a      	uxth	r2, r3
 8001572:	4b14      	ldr	r3, [pc, #80]	@ (80015c4 <channel_value+0x2c0>)
 8001574:	801a      	strh	r2, [r3, #0]
    channel_9 = (channel_9_hex[1] << 8) | channel_9_hex[0];
 8001576:	89fb      	ldrh	r3, [r7, #14]
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	b21a      	sxth	r2, r3
 800157c:	89bb      	ldrh	r3, [r7, #12]
 800157e:	b21b      	sxth	r3, r3
 8001580:	4313      	orrs	r3, r2
 8001582:	b21b      	sxth	r3, r3
 8001584:	b29a      	uxth	r2, r3
 8001586:	4b10      	ldr	r3, [pc, #64]	@ (80015c8 <channel_value+0x2c4>)
 8001588:	801a      	strh	r2, [r3, #0]
    channel_10 = (channel_10_hex[1] << 8) | channel_10_hex[0];
 800158a:	897b      	ldrh	r3, [r7, #10]
 800158c:	021b      	lsls	r3, r3, #8
 800158e:	b21a      	sxth	r2, r3
 8001590:	893b      	ldrh	r3, [r7, #8]
 8001592:	b21b      	sxth	r3, r3
 8001594:	4313      	orrs	r3, r2
 8001596:	b21b      	sxth	r3, r3
 8001598:	b29a      	uxth	r2, r3
 800159a:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <channel_value+0x2c8>)
 800159c:	801a      	strh	r2, [r3, #0]

    HAL_UART_Transmit(&huart2, (uint8_t*)result_str_10, strlen(result_str_10), HAL_MAX_DELAY);
    HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);  // Send newline*/


}
 800159e:	bf00      	nop
 80015a0:	3738      	adds	r7, #56	@ 0x38
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000938 	.word	0x20000938
 80015ac:	2000093a 	.word	0x2000093a
 80015b0:	2000093c 	.word	0x2000093c
 80015b4:	2000093e 	.word	0x2000093e
 80015b8:	20000940 	.word	0x20000940
 80015bc:	20000942 	.word	0x20000942
 80015c0:	20000944 	.word	0x20000944
 80015c4:	20000946 	.word	0x20000946
 80015c8:	20000948 	.word	0x20000948
 80015cc:	2000094a 	.word	0x2000094a

080015d0 <copy_buffer>:

void copy_buffer(uint8_t *buffer, uint16_t size) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	807b      	strh	r3, [r7, #2]
	char temp[5];  // Temporary buffer to format each byte
	    uint16_t start_index = 0;  // Index where the specific frame starts
 80015dc:	2300      	movs	r3, #0
 80015de:	82fb      	strh	r3, [r7, #22]

	    // Clear the temp_buffer before storing new data
	    memset(temp_buffer, 0, TEMP_BUFFER_SIZE);
 80015e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015e4:	2100      	movs	r1, #0
 80015e6:	482e      	ldr	r0, [pc, #184]	@ (80016a0 <copy_buffer+0xd0>)
 80015e8:	f005 fbea 	bl	8006dc0 <memset>
	    temp_buffer_index = 0;  // Reset the index to start fresh
 80015ec:	4b2d      	ldr	r3, [pc, #180]	@ (80016a4 <copy_buffer+0xd4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	801a      	strh	r2, [r3, #0]

	    // Loop through the buffer to find the specific frame, in this case from 0x20 (0x20 0x40 ... 0xF3)
	    for (uint16_t i = 0; i < size; i++) {
 80015f2:	2300      	movs	r3, #0
 80015f4:	82bb      	strh	r3, [r7, #20]
 80015f6:	e011      	b.n	800161c <copy_buffer+0x4c>
	        // Check if we are at the beginning of the specific frame we want to print
	        if (buffer[i] == 0x20 && i + TARGET_SIZE <= size) {  // Look for the start of the frame
 80015f8:	8abb      	ldrh	r3, [r7, #20]
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b20      	cmp	r3, #32
 8001602:	d108      	bne.n	8001616 <copy_buffer+0x46>
 8001604:	8abb      	ldrh	r3, [r7, #20]
 8001606:	f103 021f 	add.w	r2, r3, #31
 800160a:	887b      	ldrh	r3, [r7, #2]
 800160c:	429a      	cmp	r2, r3
 800160e:	da02      	bge.n	8001616 <copy_buffer+0x46>
	            start_index = i;
 8001610:	8abb      	ldrh	r3, [r7, #20]
 8001612:	82fb      	strh	r3, [r7, #22]
	            break;
 8001614:	e006      	b.n	8001624 <copy_buffer+0x54>
	    for (uint16_t i = 0; i < size; i++) {
 8001616:	8abb      	ldrh	r3, [r7, #20]
 8001618:	3301      	adds	r3, #1
 800161a:	82bb      	strh	r3, [r7, #20]
 800161c:	8aba      	ldrh	r2, [r7, #20]
 800161e:	887b      	ldrh	r3, [r7, #2]
 8001620:	429a      	cmp	r2, r3
 8001622:	d3e9      	bcc.n	80015f8 <copy_buffer+0x28>
	        }
	    }

	    // Loop through the specific part of the buffer and format it
	    for (uint16_t i = start_index; i < start_index + TARGET_SIZE; i++) {
 8001624:	8afb      	ldrh	r3, [r7, #22]
 8001626:	827b      	strh	r3, [r7, #18]
 8001628:	e02e      	b.n	8001688 <copy_buffer+0xb8>
	        sprintf(temp, "0x%02X", buffer[i]);
 800162a:	8a7b      	ldrh	r3, [r7, #18]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	4413      	add	r3, r2
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	f107 0308 	add.w	r3, r7, #8
 8001638:	491b      	ldr	r1, [pc, #108]	@ (80016a8 <copy_buffer+0xd8>)
 800163a:	4618      	mov	r0, r3
 800163c:	f005 fba0 	bl	8006d80 <siprintf>

	        // Copy the formatted data (temp) into the global temp_buffer
	        uint16_t len = strlen(temp);
 8001640:	f107 0308 	add.w	r3, r7, #8
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe fde3 	bl	8000210 <strlen>
 800164a:	4603      	mov	r3, r0
 800164c:	823b      	strh	r3, [r7, #16]
	        if (temp_buffer_index + len < TEMP_BUFFER_SIZE) {
 800164e:	4b15      	ldr	r3, [pc, #84]	@ (80016a4 <copy_buffer+0xd4>)
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	461a      	mov	r2, r3
 8001654:	8a3b      	ldrh	r3, [r7, #16]
 8001656:	4413      	add	r3, r2
 8001658:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800165c:	da1b      	bge.n	8001696 <copy_buffer+0xc6>
	            memcpy(&temp_buffer[temp_buffer_index], temp, len);
 800165e:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <copy_buffer+0xd4>)
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <copy_buffer+0xd0>)
 8001666:	4413      	add	r3, r2
 8001668:	8a3a      	ldrh	r2, [r7, #16]
 800166a:	f107 0108 	add.w	r1, r7, #8
 800166e:	4618      	mov	r0, r3
 8001670:	f005 fc40 	bl	8006ef4 <memcpy>
	            temp_buffer_index += len;  // Update the index in the temp_buffer
 8001674:	4b0b      	ldr	r3, [pc, #44]	@ (80016a4 <copy_buffer+0xd4>)
 8001676:	881a      	ldrh	r2, [r3, #0]
 8001678:	8a3b      	ldrh	r3, [r7, #16]
 800167a:	4413      	add	r3, r2
 800167c:	b29a      	uxth	r2, r3
 800167e:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <copy_buffer+0xd4>)
 8001680:	801a      	strh	r2, [r3, #0]
	    for (uint16_t i = start_index; i < start_index + TARGET_SIZE; i++) {
 8001682:	8a7b      	ldrh	r3, [r7, #18]
 8001684:	3301      	adds	r3, #1
 8001686:	827b      	strh	r3, [r7, #18]
 8001688:	8afb      	ldrh	r3, [r7, #22]
 800168a:	f103 021f 	add.w	r2, r3, #31
 800168e:	8a7b      	ldrh	r3, [r7, #18]
 8001690:	429a      	cmp	r2, r3
 8001692:	daca      	bge.n	800162a <copy_buffer+0x5a>
	            // Handle buffer overflow (optional, you may reset or stop appending)
	            break;
	        }
	    }

	}
 8001694:	e000      	b.n	8001698 <copy_buffer+0xc8>
	            break;
 8001696:	bf00      	nop
	}
 8001698:	bf00      	nop
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000530 	.word	0x20000530
 80016a4:	20000930 	.word	0x20000930
 80016a8:	0800772c 	.word	0x0800772c

080016ac <IBUS_data_print>:


void IBUS_data_print(){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b0e4      	sub	sp, #400	@ 0x190
 80016b0:	af00      	add	r7, sp, #0
    char result_str_7[40];
    char result_str_8[40];
    char result_str_9[40];
    char result_str_10[40];

    snprintf(result_str_1, sizeof(result_str_1), "Channel 1: %d", channel_1);
 80016b2:	4b92      	ldr	r3, [pc, #584]	@ (80018fc <IBUS_data_print+0x250>)
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 80016ba:	4a91      	ldr	r2, [pc, #580]	@ (8001900 <IBUS_data_print+0x254>)
 80016bc:	2128      	movs	r1, #40	@ 0x28
 80016be:	f005 fb2b 	bl	8006d18 <sniprintf>
    snprintf(result_str_2, sizeof(result_str_2), "Channel 2: %d", channel_2);
 80016c2:	4b90      	ldr	r3, [pc, #576]	@ (8001904 <IBUS_data_print+0x258>)
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 80016ca:	4a8f      	ldr	r2, [pc, #572]	@ (8001908 <IBUS_data_print+0x25c>)
 80016cc:	2128      	movs	r1, #40	@ 0x28
 80016ce:	f005 fb23 	bl	8006d18 <sniprintf>
    snprintf(result_str_3, sizeof(result_str_3), "Channel 3: %d", channel_3);
 80016d2:	4b8e      	ldr	r3, [pc, #568]	@ (800190c <IBUS_data_print+0x260>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 80016da:	4a8d      	ldr	r2, [pc, #564]	@ (8001910 <IBUS_data_print+0x264>)
 80016dc:	2128      	movs	r1, #40	@ 0x28
 80016de:	f005 fb1b 	bl	8006d18 <sniprintf>
    snprintf(result_str_4, sizeof(result_str_4), "Channel 4: %d", channel_4);
 80016e2:	4b8c      	ldr	r3, [pc, #560]	@ (8001914 <IBUS_data_print+0x268>)
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	f107 00f0 	add.w	r0, r7, #240	@ 0xf0
 80016ea:	4a8b      	ldr	r2, [pc, #556]	@ (8001918 <IBUS_data_print+0x26c>)
 80016ec:	2128      	movs	r1, #40	@ 0x28
 80016ee:	f005 fb13 	bl	8006d18 <sniprintf>
    snprintf(result_str_5, sizeof(result_str_5), "Channel 5: %d", channel_5);
 80016f2:	4b8a      	ldr	r3, [pc, #552]	@ (800191c <IBUS_data_print+0x270>)
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	f107 00c8 	add.w	r0, r7, #200	@ 0xc8
 80016fa:	4a89      	ldr	r2, [pc, #548]	@ (8001920 <IBUS_data_print+0x274>)
 80016fc:	2128      	movs	r1, #40	@ 0x28
 80016fe:	f005 fb0b 	bl	8006d18 <sniprintf>
    snprintf(result_str_6, sizeof(result_str_6), "Channel 6: %d", channel_6);
 8001702:	4b88      	ldr	r3, [pc, #544]	@ (8001924 <IBUS_data_print+0x278>)
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 800170a:	4a87      	ldr	r2, [pc, #540]	@ (8001928 <IBUS_data_print+0x27c>)
 800170c:	2128      	movs	r1, #40	@ 0x28
 800170e:	f005 fb03 	bl	8006d18 <sniprintf>
    snprintf(result_str_7, sizeof(result_str_7), "Channel 7: %d", channel_7);
 8001712:	4b86      	ldr	r3, [pc, #536]	@ (800192c <IBUS_data_print+0x280>)
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 800171a:	4a85      	ldr	r2, [pc, #532]	@ (8001930 <IBUS_data_print+0x284>)
 800171c:	2128      	movs	r1, #40	@ 0x28
 800171e:	f005 fafb 	bl	8006d18 <sniprintf>
    snprintf(result_str_8, sizeof(result_str_8), "Channel 8: %d", channel_8);
 8001722:	4b84      	ldr	r3, [pc, #528]	@ (8001934 <IBUS_data_print+0x288>)
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 800172a:	4a83      	ldr	r2, [pc, #524]	@ (8001938 <IBUS_data_print+0x28c>)
 800172c:	2128      	movs	r1, #40	@ 0x28
 800172e:	f005 faf3 	bl	8006d18 <sniprintf>
    snprintf(result_str_9, sizeof(result_str_9), "Channel 9: %d", channel_9);
 8001732:	4b82      	ldr	r3, [pc, #520]	@ (800193c <IBUS_data_print+0x290>)
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800173a:	4a81      	ldr	r2, [pc, #516]	@ (8001940 <IBUS_data_print+0x294>)
 800173c:	2128      	movs	r1, #40	@ 0x28
 800173e:	f005 faeb 	bl	8006d18 <sniprintf>
    snprintf(result_str_10, sizeof(result_str_10), "Channel 10: %d", channel_10);
 8001742:	4b80      	ldr	r3, [pc, #512]	@ (8001944 <IBUS_data_print+0x298>)
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	4638      	mov	r0, r7
 8001748:	4a7f      	ldr	r2, [pc, #508]	@ (8001948 <IBUS_data_print+0x29c>)
 800174a:	2128      	movs	r1, #40	@ 0x28
 800174c:	f005 fae4 	bl	8006d18 <sniprintf>

    // Send the results via UART

    //channel 1
    HAL_UART_Transmit(&huart2, (uint8_t*)result_str_1, strlen(result_str_1), HAL_MAX_DELAY);
 8001750:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fd5b 	bl	8000210 <strlen>
 800175a:	4603      	mov	r3, r0
 800175c:	b29a      	uxth	r2, r3
 800175e:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
 8001766:	4879      	ldr	r0, [pc, #484]	@ (800194c <IBUS_data_print+0x2a0>)
 8001768:	f003 f93c 	bl	80049e4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);
 800176c:	f04f 33ff 	mov.w	r3, #4294967295
 8001770:	2202      	movs	r2, #2
 8001772:	4977      	ldr	r1, [pc, #476]	@ (8001950 <IBUS_data_print+0x2a4>)
 8001774:	4875      	ldr	r0, [pc, #468]	@ (800194c <IBUS_data_print+0x2a0>)
 8001776:	f003 f935 	bl	80049e4 <HAL_UART_Transmit>

    //channel 2

    HAL_UART_Transmit(&huart2, (uint8_t*)result_str_2, strlen(result_str_2), HAL_MAX_DELAY);
 800177a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fd46 	bl	8000210 <strlen>
 8001784:	4603      	mov	r3, r0
 8001786:	b29a      	uxth	r2, r3
 8001788:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800178c:	f04f 33ff 	mov.w	r3, #4294967295
 8001790:	486e      	ldr	r0, [pc, #440]	@ (800194c <IBUS_data_print+0x2a0>)
 8001792:	f003 f927 	bl	80049e4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
 800179a:	2202      	movs	r2, #2
 800179c:	496c      	ldr	r1, [pc, #432]	@ (8001950 <IBUS_data_print+0x2a4>)
 800179e:	486b      	ldr	r0, [pc, #428]	@ (800194c <IBUS_data_print+0x2a0>)
 80017a0:	f003 f920 	bl	80049e4 <HAL_UART_Transmit>

    //channel 3
    HAL_UART_Transmit(&huart2, (uint8_t*)result_str_3, strlen(result_str_3), HAL_MAX_DELAY);
 80017a4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe fd31 	bl	8000210 <strlen>
 80017ae:	4603      	mov	r3, r0
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80017b6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ba:	4864      	ldr	r0, [pc, #400]	@ (800194c <IBUS_data_print+0x2a0>)
 80017bc:	f003 f912 	bl	80049e4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);
 80017c0:	f04f 33ff 	mov.w	r3, #4294967295
 80017c4:	2202      	movs	r2, #2
 80017c6:	4962      	ldr	r1, [pc, #392]	@ (8001950 <IBUS_data_print+0x2a4>)
 80017c8:	4860      	ldr	r0, [pc, #384]	@ (800194c <IBUS_data_print+0x2a0>)
 80017ca:	f003 f90b 	bl	80049e4 <HAL_UART_Transmit>

    //channel 4
    HAL_UART_Transmit(&huart2, (uint8_t*)result_str_4, strlen(result_str_4), HAL_MAX_DELAY);
 80017ce:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fd1c 	bl	8000210 <strlen>
 80017d8:	4603      	mov	r3, r0
 80017da:	b29a      	uxth	r2, r3
 80017dc:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 80017e0:	f04f 33ff 	mov.w	r3, #4294967295
 80017e4:	4859      	ldr	r0, [pc, #356]	@ (800194c <IBUS_data_print+0x2a0>)
 80017e6:	f003 f8fd 	bl	80049e4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
 80017ee:	2202      	movs	r2, #2
 80017f0:	4957      	ldr	r1, [pc, #348]	@ (8001950 <IBUS_data_print+0x2a4>)
 80017f2:	4856      	ldr	r0, [pc, #344]	@ (800194c <IBUS_data_print+0x2a0>)
 80017f4:	f003 f8f6 	bl	80049e4 <HAL_UART_Transmit>

    //channel 5
    HAL_UART_Transmit(&huart2, (uint8_t*)result_str_5, strlen(result_str_5), HAL_MAX_DELAY);
 80017f8:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7fe fd07 	bl	8000210 <strlen>
 8001802:	4603      	mov	r3, r0
 8001804:	b29a      	uxth	r2, r3
 8001806:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 800180a:	f04f 33ff 	mov.w	r3, #4294967295
 800180e:	484f      	ldr	r0, [pc, #316]	@ (800194c <IBUS_data_print+0x2a0>)
 8001810:	f003 f8e8 	bl	80049e4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);
 8001814:	f04f 33ff 	mov.w	r3, #4294967295
 8001818:	2202      	movs	r2, #2
 800181a:	494d      	ldr	r1, [pc, #308]	@ (8001950 <IBUS_data_print+0x2a4>)
 800181c:	484b      	ldr	r0, [pc, #300]	@ (800194c <IBUS_data_print+0x2a0>)
 800181e:	f003 f8e1 	bl	80049e4 <HAL_UART_Transmit>

    //channel 6
    HAL_UART_Transmit(&huart2, (uint8_t*)result_str_6, strlen(result_str_6), HAL_MAX_DELAY);
 8001822:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fcf2 	bl	8000210 <strlen>
 800182c:	4603      	mov	r3, r0
 800182e:	b29a      	uxth	r2, r3
 8001830:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8001834:	f04f 33ff 	mov.w	r3, #4294967295
 8001838:	4844      	ldr	r0, [pc, #272]	@ (800194c <IBUS_data_print+0x2a0>)
 800183a:	f003 f8d3 	bl	80049e4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
 8001842:	2202      	movs	r2, #2
 8001844:	4942      	ldr	r1, [pc, #264]	@ (8001950 <IBUS_data_print+0x2a4>)
 8001846:	4841      	ldr	r0, [pc, #260]	@ (800194c <IBUS_data_print+0x2a0>)
 8001848:	f003 f8cc 	bl	80049e4 <HAL_UART_Transmit>

    //channel 7
    HAL_UART_Transmit(&huart2, (uint8_t*)result_str_7, strlen(result_str_7), HAL_MAX_DELAY);
 800184c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fcdd 	bl	8000210 <strlen>
 8001856:	4603      	mov	r3, r0
 8001858:	b29a      	uxth	r2, r3
 800185a:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800185e:	f04f 33ff 	mov.w	r3, #4294967295
 8001862:	483a      	ldr	r0, [pc, #232]	@ (800194c <IBUS_data_print+0x2a0>)
 8001864:	f003 f8be 	bl	80049e4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);
 8001868:	f04f 33ff 	mov.w	r3, #4294967295
 800186c:	2202      	movs	r2, #2
 800186e:	4938      	ldr	r1, [pc, #224]	@ (8001950 <IBUS_data_print+0x2a4>)
 8001870:	4836      	ldr	r0, [pc, #216]	@ (800194c <IBUS_data_print+0x2a0>)
 8001872:	f003 f8b7 	bl	80049e4 <HAL_UART_Transmit>

    //channel 8
    HAL_UART_Transmit(&huart2, (uint8_t*)result_str_8, strlen(result_str_8), HAL_MAX_DELAY);
 8001876:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fcc8 	bl	8000210 <strlen>
 8001880:	4603      	mov	r3, r0
 8001882:	b29a      	uxth	r2, r3
 8001884:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8001888:	f04f 33ff 	mov.w	r3, #4294967295
 800188c:	482f      	ldr	r0, [pc, #188]	@ (800194c <IBUS_data_print+0x2a0>)
 800188e:	f003 f8a9 	bl	80049e4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);
 8001892:	f04f 33ff 	mov.w	r3, #4294967295
 8001896:	2202      	movs	r2, #2
 8001898:	492d      	ldr	r1, [pc, #180]	@ (8001950 <IBUS_data_print+0x2a4>)
 800189a:	482c      	ldr	r0, [pc, #176]	@ (800194c <IBUS_data_print+0x2a0>)
 800189c:	f003 f8a2 	bl	80049e4 <HAL_UART_Transmit>

    //channel 9
    HAL_UART_Transmit(&huart2, (uint8_t*)result_str_9, strlen(result_str_9), HAL_MAX_DELAY);
 80018a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fcb3 	bl	8000210 <strlen>
 80018aa:	4603      	mov	r3, r0
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	4825      	ldr	r0, [pc, #148]	@ (800194c <IBUS_data_print+0x2a0>)
 80018b8:	f003 f894 	bl	80049e4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);
 80018bc:	f04f 33ff 	mov.w	r3, #4294967295
 80018c0:	2202      	movs	r2, #2
 80018c2:	4923      	ldr	r1, [pc, #140]	@ (8001950 <IBUS_data_print+0x2a4>)
 80018c4:	4821      	ldr	r0, [pc, #132]	@ (800194c <IBUS_data_print+0x2a0>)
 80018c6:	f003 f88d 	bl	80049e4 <HAL_UART_Transmit>

    //channel 10
    HAL_UART_Transmit(&huart2, (uint8_t*)result_str_10, strlen(result_str_10), HAL_MAX_DELAY);
 80018ca:	463b      	mov	r3, r7
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe fc9f 	bl	8000210 <strlen>
 80018d2:	4603      	mov	r3, r0
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	4639      	mov	r1, r7
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
 80018dc:	481b      	ldr	r0, [pc, #108]	@ (800194c <IBUS_data_print+0x2a0>)
 80018de:	f003 f881 	bl	80049e4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
 80018e6:	2202      	movs	r2, #2
 80018e8:	4919      	ldr	r1, [pc, #100]	@ (8001950 <IBUS_data_print+0x2a4>)
 80018ea:	4818      	ldr	r0, [pc, #96]	@ (800194c <IBUS_data_print+0x2a0>)
 80018ec:	f003 f87a 	bl	80049e4 <HAL_UART_Transmit>


	 }
 80018f0:	bf00      	nop
 80018f2:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000938 	.word	0x20000938
 8001900:	08007734 	.word	0x08007734
 8001904:	2000093a 	.word	0x2000093a
 8001908:	08007744 	.word	0x08007744
 800190c:	2000093c 	.word	0x2000093c
 8001910:	08007754 	.word	0x08007754
 8001914:	2000093e 	.word	0x2000093e
 8001918:	08007764 	.word	0x08007764
 800191c:	20000940 	.word	0x20000940
 8001920:	08007774 	.word	0x08007774
 8001924:	20000942 	.word	0x20000942
 8001928:	08007784 	.word	0x08007784
 800192c:	20000944 	.word	0x20000944
 8001930:	08007794 	.word	0x08007794
 8001934:	20000946 	.word	0x20000946
 8001938:	080077a4 	.word	0x080077a4
 800193c:	20000948 	.word	0x20000948
 8001940:	080077b4 	.word	0x080077b4
 8001944:	2000094a 	.word	0x2000094a
 8001948:	080077c4 	.word	0x080077c4
 800194c:	20000418 	.word	0x20000418
 8001950:	080077d4 	.word	0x080077d4

08001954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001958:	b672      	cpsid	i
}
 800195a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <Error_Handler+0x8>

08001960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <HAL_MspInit+0x54>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196e:	4a11      	ldr	r2, [pc, #68]	@ (80019b4 <HAL_MspInit+0x54>)
 8001970:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001974:	6453      	str	r3, [r2, #68]	@ 0x44
 8001976:	4b0f      	ldr	r3, [pc, #60]	@ (80019b4 <HAL_MspInit+0x54>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	603b      	str	r3, [r7, #0]
 8001986:	4b0b      	ldr	r3, [pc, #44]	@ (80019b4 <HAL_MspInit+0x54>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	4a0a      	ldr	r2, [pc, #40]	@ (80019b4 <HAL_MspInit+0x54>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001990:	6413      	str	r3, [r2, #64]	@ 0x40
 8001992:	4b08      	ldr	r3, [pc, #32]	@ (80019b4 <HAL_MspInit+0x54>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	210f      	movs	r1, #15
 80019a2:	f06f 0001 	mvn.w	r0, #1
 80019a6:	f000 fb99 	bl	80020dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800

080019b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08c      	sub	sp, #48	@ 0x30
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 031c 	add.w	r3, r7, #28
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a4a      	ldr	r2, [pc, #296]	@ (8001b00 <HAL_SPI_MspInit+0x148>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d14b      	bne.n	8001a72 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	61bb      	str	r3, [r7, #24]
 80019de:	4b49      	ldr	r3, [pc, #292]	@ (8001b04 <HAL_SPI_MspInit+0x14c>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e2:	4a48      	ldr	r2, [pc, #288]	@ (8001b04 <HAL_SPI_MspInit+0x14c>)
 80019e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ea:	4b46      	ldr	r3, [pc, #280]	@ (8001b04 <HAL_SPI_MspInit+0x14c>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019f2:	61bb      	str	r3, [r7, #24]
 80019f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	4b42      	ldr	r3, [pc, #264]	@ (8001b04 <HAL_SPI_MspInit+0x14c>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	4a41      	ldr	r2, [pc, #260]	@ (8001b04 <HAL_SPI_MspInit+0x14c>)
 8001a00:	f043 0304 	orr.w	r3, r3, #4
 8001a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a06:	4b3f      	ldr	r3, [pc, #252]	@ (8001b04 <HAL_SPI_MspInit+0x14c>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	4b3b      	ldr	r3, [pc, #236]	@ (8001b04 <HAL_SPI_MspInit+0x14c>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	4a3a      	ldr	r2, [pc, #232]	@ (8001b04 <HAL_SPI_MspInit+0x14c>)
 8001a1c:	f043 0302 	orr.w	r3, r3, #2
 8001a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a22:	4b38      	ldr	r3, [pc, #224]	@ (8001b04 <HAL_SPI_MspInit+0x14c>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a2e:	230c      	movs	r3, #12
 8001a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a32:	2302      	movs	r3, #2
 8001a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a3e:	2305      	movs	r3, #5
 8001a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a42:	f107 031c 	add.w	r3, r7, #28
 8001a46:	4619      	mov	r1, r3
 8001a48:	482f      	ldr	r0, [pc, #188]	@ (8001b08 <HAL_SPI_MspInit+0x150>)
 8001a4a:	f000 fee1 	bl	8002810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a60:	2305      	movs	r3, #5
 8001a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a64:	f107 031c 	add.w	r3, r7, #28
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4828      	ldr	r0, [pc, #160]	@ (8001b0c <HAL_SPI_MspInit+0x154>)
 8001a6c:	f000 fed0 	bl	8002810 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a70:	e041      	b.n	8001af6 <HAL_SPI_MspInit+0x13e>
  else if(hspi->Instance==SPI3)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a26      	ldr	r2, [pc, #152]	@ (8001b10 <HAL_SPI_MspInit+0x158>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d13c      	bne.n	8001af6 <HAL_SPI_MspInit+0x13e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	4b20      	ldr	r3, [pc, #128]	@ (8001b04 <HAL_SPI_MspInit+0x14c>)
 8001a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a84:	4a1f      	ldr	r2, [pc, #124]	@ (8001b04 <HAL_SPI_MspInit+0x14c>)
 8001a86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b04 <HAL_SPI_MspInit+0x14c>)
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	4b19      	ldr	r3, [pc, #100]	@ (8001b04 <HAL_SPI_MspInit+0x14c>)
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa0:	4a18      	ldr	r2, [pc, #96]	@ (8001b04 <HAL_SPI_MspInit+0x14c>)
 8001aa2:	f043 0304 	orr.w	r3, r3, #4
 8001aa6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa8:	4b16      	ldr	r3, [pc, #88]	@ (8001b04 <HAL_SPI_MspInit+0x14c>)
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8001ac4:	2305      	movs	r3, #5
 8001ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac8:	f107 031c 	add.w	r3, r7, #28
 8001acc:	4619      	mov	r1, r3
 8001ace:	480e      	ldr	r0, [pc, #56]	@ (8001b08 <HAL_SPI_MspInit+0x150>)
 8001ad0:	f000 fe9e 	bl	8002810 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ad4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ada:	2302      	movs	r3, #2
 8001adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ae6:	2306      	movs	r3, #6
 8001ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aea:	f107 031c 	add.w	r3, r7, #28
 8001aee:	4619      	mov	r1, r3
 8001af0:	4805      	ldr	r0, [pc, #20]	@ (8001b08 <HAL_SPI_MspInit+0x150>)
 8001af2:	f000 fe8d 	bl	8002810 <HAL_GPIO_Init>
}
 8001af6:	bf00      	nop
 8001af8:	3730      	adds	r7, #48	@ 0x30
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40003800 	.word	0x40003800
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40020800 	.word	0x40020800
 8001b0c:	40020400 	.word	0x40020400
 8001b10:	40003c00 	.word	0x40003c00

08001b14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08c      	sub	sp, #48	@ 0x30
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 031c 	add.w	r3, r7, #28
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a4a      	ldr	r2, [pc, #296]	@ (8001c5c <HAL_UART_MspInit+0x148>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d15c      	bne.n	8001bf0 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
 8001b3a:	4b49      	ldr	r3, [pc, #292]	@ (8001c60 <HAL_UART_MspInit+0x14c>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3e:	4a48      	ldr	r2, [pc, #288]	@ (8001c60 <HAL_UART_MspInit+0x14c>)
 8001b40:	f043 0310 	orr.w	r3, r3, #16
 8001b44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b46:	4b46      	ldr	r3, [pc, #280]	@ (8001c60 <HAL_UART_MspInit+0x14c>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	61bb      	str	r3, [r7, #24]
 8001b50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	4b42      	ldr	r3, [pc, #264]	@ (8001c60 <HAL_UART_MspInit+0x14c>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	4a41      	ldr	r2, [pc, #260]	@ (8001c60 <HAL_UART_MspInit+0x14c>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b62:	4b3f      	ldr	r3, [pc, #252]	@ (8001c60 <HAL_UART_MspInit+0x14c>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b6e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b80:	2307      	movs	r3, #7
 8001b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b84:	f107 031c 	add.w	r3, r7, #28
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4836      	ldr	r0, [pc, #216]	@ (8001c64 <HAL_UART_MspInit+0x150>)
 8001b8c:	f000 fe40 	bl	8002810 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001b90:	4b35      	ldr	r3, [pc, #212]	@ (8001c68 <HAL_UART_MspInit+0x154>)
 8001b92:	4a36      	ldr	r2, [pc, #216]	@ (8001c6c <HAL_UART_MspInit+0x158>)
 8001b94:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001b96:	4b34      	ldr	r3, [pc, #208]	@ (8001c68 <HAL_UART_MspInit+0x154>)
 8001b98:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b9c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b9e:	4b32      	ldr	r3, [pc, #200]	@ (8001c68 <HAL_UART_MspInit+0x154>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ba4:	4b30      	ldr	r3, [pc, #192]	@ (8001c68 <HAL_UART_MspInit+0x154>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001baa:	4b2f      	ldr	r3, [pc, #188]	@ (8001c68 <HAL_UART_MspInit+0x154>)
 8001bac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bb0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bb2:	4b2d      	ldr	r3, [pc, #180]	@ (8001c68 <HAL_UART_MspInit+0x154>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001c68 <HAL_UART_MspInit+0x154>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001bbe:	4b2a      	ldr	r3, [pc, #168]	@ (8001c68 <HAL_UART_MspInit+0x154>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001bc4:	4b28      	ldr	r3, [pc, #160]	@ (8001c68 <HAL_UART_MspInit+0x154>)
 8001bc6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001bca:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bcc:	4b26      	ldr	r3, [pc, #152]	@ (8001c68 <HAL_UART_MspInit+0x154>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001bd2:	4825      	ldr	r0, [pc, #148]	@ (8001c68 <HAL_UART_MspInit+0x154>)
 8001bd4:	f000 faac 	bl	8002130 <HAL_DMA_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001bde:	f7ff feb9 	bl	8001954 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a20      	ldr	r2, [pc, #128]	@ (8001c68 <HAL_UART_MspInit+0x154>)
 8001be6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001be8:	4a1f      	ldr	r2, [pc, #124]	@ (8001c68 <HAL_UART_MspInit+0x154>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bee:	e030      	b.n	8001c52 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a1e      	ldr	r2, [pc, #120]	@ (8001c70 <HAL_UART_MspInit+0x15c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d12b      	bne.n	8001c52 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	4b18      	ldr	r3, [pc, #96]	@ (8001c60 <HAL_UART_MspInit+0x14c>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c02:	4a17      	ldr	r2, [pc, #92]	@ (8001c60 <HAL_UART_MspInit+0x14c>)
 8001c04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c0a:	4b15      	ldr	r3, [pc, #84]	@ (8001c60 <HAL_UART_MspInit+0x14c>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	4b11      	ldr	r3, [pc, #68]	@ (8001c60 <HAL_UART_MspInit+0x14c>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	4a10      	ldr	r2, [pc, #64]	@ (8001c60 <HAL_UART_MspInit+0x14c>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c26:	4b0e      	ldr	r3, [pc, #56]	@ (8001c60 <HAL_UART_MspInit+0x14c>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c32:	230c      	movs	r3, #12
 8001c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c36:	2302      	movs	r3, #2
 8001c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c42:	2307      	movs	r3, #7
 8001c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c46:	f107 031c 	add.w	r3, r7, #28
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4805      	ldr	r0, [pc, #20]	@ (8001c64 <HAL_UART_MspInit+0x150>)
 8001c4e:	f000 fddf 	bl	8002810 <HAL_GPIO_Init>
}
 8001c52:	bf00      	nop
 8001c54:	3730      	adds	r7, #48	@ 0x30
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40011000 	.word	0x40011000
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40020000 	.word	0x40020000
 8001c68:	20000460 	.word	0x20000460
 8001c6c:	40026440 	.word	0x40026440
 8001c70:	40004400 	.word	0x40004400

08001c74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08c      	sub	sp, #48	@ 0x30
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c84:	2300      	movs	r3, #0
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	4b2f      	ldr	r3, [pc, #188]	@ (8001d48 <HAL_InitTick+0xd4>)
 8001c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8c:	4a2e      	ldr	r2, [pc, #184]	@ (8001d48 <HAL_InitTick+0xd4>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c94:	4b2c      	ldr	r3, [pc, #176]	@ (8001d48 <HAL_InitTick+0xd4>)
 8001c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ca0:	f107 020c 	add.w	r2, r7, #12
 8001ca4:	f107 0310 	add.w	r3, r7, #16
 8001ca8:	4611      	mov	r1, r2
 8001caa:	4618      	mov	r0, r3
 8001cac:	f001 f8c8 	bl	8002e40 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001cb0:	f001 f8b2 	bl	8002e18 <HAL_RCC_GetPCLK2Freq>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cbc:	4a23      	ldr	r2, [pc, #140]	@ (8001d4c <HAL_InitTick+0xd8>)
 8001cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc2:	0c9b      	lsrs	r3, r3, #18
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001cc8:	4b21      	ldr	r3, [pc, #132]	@ (8001d50 <HAL_InitTick+0xdc>)
 8001cca:	4a22      	ldr	r2, [pc, #136]	@ (8001d54 <HAL_InitTick+0xe0>)
 8001ccc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001cce:	4b20      	ldr	r3, [pc, #128]	@ (8001d50 <HAL_InitTick+0xdc>)
 8001cd0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001cd4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001cd6:	4a1e      	ldr	r2, [pc, #120]	@ (8001d50 <HAL_InitTick+0xdc>)
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cda:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8001d50 <HAL_InitTick+0xdc>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d50 <HAL_InitTick+0xdc>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce8:	4b19      	ldr	r3, [pc, #100]	@ (8001d50 <HAL_InitTick+0xdc>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001cee:	4818      	ldr	r0, [pc, #96]	@ (8001d50 <HAL_InitTick+0xdc>)
 8001cf0:	f002 fb86 	bl	8004400 <HAL_TIM_Base_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001cfa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d11b      	bne.n	8001d3a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001d02:	4813      	ldr	r0, [pc, #76]	@ (8001d50 <HAL_InitTick+0xdc>)
 8001d04:	f002 fbd6 	bl	80044b4 <HAL_TIM_Base_Start_IT>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001d0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d111      	bne.n	8001d3a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d16:	2019      	movs	r0, #25
 8001d18:	f000 f9fc 	bl	8002114 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b0f      	cmp	r3, #15
 8001d20:	d808      	bhi.n	8001d34 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001d22:	2200      	movs	r2, #0
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	2019      	movs	r0, #25
 8001d28:	f000 f9d8 	bl	80020dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d58 <HAL_InitTick+0xe4>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	e002      	b.n	8001d3a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001d3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3730      	adds	r7, #48	@ 0x30
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	431bde83 	.word	0x431bde83
 8001d50:	20000a4c 	.word	0x20000a4c
 8001d54:	40010000 	.word	0x40010000
 8001d58:	20000004 	.word	0x20000004

08001d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d60:	bf00      	nop
 8001d62:	e7fd      	b.n	8001d60 <NMI_Handler+0x4>

08001d64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <HardFault_Handler+0x4>

08001d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d70:	bf00      	nop
 8001d72:	e7fd      	b.n	8001d70 <MemManage_Handler+0x4>

08001d74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d78:	bf00      	nop
 8001d7a:	e7fd      	b.n	8001d78 <BusFault_Handler+0x4>

08001d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d80:	bf00      	nop
 8001d82:	e7fd      	b.n	8001d80 <UsageFault_Handler+0x4>

08001d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d98:	4802      	ldr	r0, [pc, #8]	@ (8001da4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001d9a:	f002 fbfb 	bl	8004594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000a4c 	.word	0x20000a4c

08001da8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001dac:	4802      	ldr	r0, [pc, #8]	@ (8001db8 <DMA2_Stream2_IRQHandler+0x10>)
 8001dae:	f000 fac5 	bl	800233c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000460 	.word	0x20000460

08001dbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dc4:	4a14      	ldr	r2, [pc, #80]	@ (8001e18 <_sbrk+0x5c>)
 8001dc6:	4b15      	ldr	r3, [pc, #84]	@ (8001e1c <_sbrk+0x60>)
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd0:	4b13      	ldr	r3, [pc, #76]	@ (8001e20 <_sbrk+0x64>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d102      	bne.n	8001dde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dd8:	4b11      	ldr	r3, [pc, #68]	@ (8001e20 <_sbrk+0x64>)
 8001dda:	4a12      	ldr	r2, [pc, #72]	@ (8001e24 <_sbrk+0x68>)
 8001ddc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dde:	4b10      	ldr	r3, [pc, #64]	@ (8001e20 <_sbrk+0x64>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4413      	add	r3, r2
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d207      	bcs.n	8001dfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dec:	f005 f856 	bl	8006e9c <__errno>
 8001df0:	4603      	mov	r3, r0
 8001df2:	220c      	movs	r2, #12
 8001df4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001df6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfa:	e009      	b.n	8001e10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dfc:	4b08      	ldr	r3, [pc, #32]	@ (8001e20 <_sbrk+0x64>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e02:	4b07      	ldr	r3, [pc, #28]	@ (8001e20 <_sbrk+0x64>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	4a05      	ldr	r2, [pc, #20]	@ (8001e20 <_sbrk+0x64>)
 8001e0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20020000 	.word	0x20020000
 8001e1c:	00000400 	.word	0x00000400
 8001e20:	20000a94 	.word	0x20000a94
 8001e24:	20004938 	.word	0x20004938

08001e28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e2c:	4b06      	ldr	r3, [pc, #24]	@ (8001e48 <SystemInit+0x20>)
 8001e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e32:	4a05      	ldr	r2, [pc, #20]	@ (8001e48 <SystemInit+0x20>)
 8001e34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e50:	f7ff ffea 	bl	8001e28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e54:	480c      	ldr	r0, [pc, #48]	@ (8001e88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e56:	490d      	ldr	r1, [pc, #52]	@ (8001e8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e58:	4a0d      	ldr	r2, [pc, #52]	@ (8001e90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e5c:	e002      	b.n	8001e64 <LoopCopyDataInit>

08001e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e62:	3304      	adds	r3, #4

08001e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e68:	d3f9      	bcc.n	8001e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001e98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e70:	e001      	b.n	8001e76 <LoopFillZerobss>

08001e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e74:	3204      	adds	r2, #4

08001e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e78:	d3fb      	bcc.n	8001e72 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001e7a:	f005 f815 	bl	8006ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e7e:	f7fe fe3f 	bl	8000b00 <main>
  bx  lr    
 8001e82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e8c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001e90:	08007944 	.word	0x08007944
  ldr r2, =_sbss
 8001e94:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001e98:	20004938 	.word	0x20004938

08001e9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e9c:	e7fe      	b.n	8001e9c <ADC_IRQHandler>
	...

08001ea0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee0 <HAL_Init+0x40>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee0 <HAL_Init+0x40>)
 8001eaa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <HAL_Init+0x40>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee0 <HAL_Init+0x40>)
 8001eb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001eba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ebc:	4b08      	ldr	r3, [pc, #32]	@ (8001ee0 <HAL_Init+0x40>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a07      	ldr	r2, [pc, #28]	@ (8001ee0 <HAL_Init+0x40>)
 8001ec2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ec6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec8:	2003      	movs	r0, #3
 8001eca:	f000 f8fc 	bl	80020c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ece:	200f      	movs	r0, #15
 8001ed0:	f7ff fed0 	bl	8001c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed4:	f7ff fd44 	bl	8001960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40023c00 	.word	0x40023c00

08001ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee8:	4b06      	ldr	r3, [pc, #24]	@ (8001f04 <HAL_IncTick+0x20>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <HAL_IncTick+0x24>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	4a04      	ldr	r2, [pc, #16]	@ (8001f08 <HAL_IncTick+0x24>)
 8001ef6:	6013      	str	r3, [r2, #0]
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000008 	.word	0x20000008
 8001f08:	20000a98 	.word	0x20000a98

08001f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f10:	4b03      	ldr	r3, [pc, #12]	@ (8001f20 <HAL_GetTick+0x14>)
 8001f12:	681b      	ldr	r3, [r3, #0]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	20000a98 	.word	0x20000a98

08001f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f2c:	f7ff ffee 	bl	8001f0c <HAL_GetTick>
 8001f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3c:	d005      	beq.n	8001f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f68 <HAL_Delay+0x44>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4413      	add	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f4a:	bf00      	nop
 8001f4c:	f7ff ffde 	bl	8001f0c <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d8f7      	bhi.n	8001f4c <HAL_Delay+0x28>
  {
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000008 	.word	0x20000008

08001f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f9e:	4a04      	ldr	r2, [pc, #16]	@ (8001fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	60d3      	str	r3, [r2, #12]
}
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb8:	4b04      	ldr	r3, [pc, #16]	@ (8001fcc <__NVIC_GetPriorityGrouping+0x18>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	0a1b      	lsrs	r3, r3, #8
 8001fbe:	f003 0307 	and.w	r3, r3, #7
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	db0b      	blt.n	8001ffa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	f003 021f 	and.w	r2, r3, #31
 8001fe8:	4907      	ldr	r1, [pc, #28]	@ (8002008 <__NVIC_EnableIRQ+0x38>)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	095b      	lsrs	r3, r3, #5
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000e100 	.word	0xe000e100

0800200c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	6039      	str	r1, [r7, #0]
 8002016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	2b00      	cmp	r3, #0
 800201e:	db0a      	blt.n	8002036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	b2da      	uxtb	r2, r3
 8002024:	490c      	ldr	r1, [pc, #48]	@ (8002058 <__NVIC_SetPriority+0x4c>)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	0112      	lsls	r2, r2, #4
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	440b      	add	r3, r1
 8002030:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002034:	e00a      	b.n	800204c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4908      	ldr	r1, [pc, #32]	@ (800205c <__NVIC_SetPriority+0x50>)
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	3b04      	subs	r3, #4
 8002044:	0112      	lsls	r2, r2, #4
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	440b      	add	r3, r1
 800204a:	761a      	strb	r2, [r3, #24]
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000e100 	.word	0xe000e100
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002060:	b480      	push	{r7}
 8002062:	b089      	sub	sp, #36	@ 0x24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f1c3 0307 	rsb	r3, r3, #7
 800207a:	2b04      	cmp	r3, #4
 800207c:	bf28      	it	cs
 800207e:	2304      	movcs	r3, #4
 8002080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3304      	adds	r3, #4
 8002086:	2b06      	cmp	r3, #6
 8002088:	d902      	bls.n	8002090 <NVIC_EncodePriority+0x30>
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	3b03      	subs	r3, #3
 800208e:	e000      	b.n	8002092 <NVIC_EncodePriority+0x32>
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002094:	f04f 32ff 	mov.w	r2, #4294967295
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43da      	mvns	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	401a      	ands	r2, r3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	fa01 f303 	lsl.w	r3, r1, r3
 80020b2:	43d9      	mvns	r1, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b8:	4313      	orrs	r3, r2
         );
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3724      	adds	r7, #36	@ 0x24
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ff4c 	bl	8001f6c <__NVIC_SetPriorityGrouping>
}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020ee:	f7ff ff61 	bl	8001fb4 <__NVIC_GetPriorityGrouping>
 80020f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	68b9      	ldr	r1, [r7, #8]
 80020f8:	6978      	ldr	r0, [r7, #20]
 80020fa:	f7ff ffb1 	bl	8002060 <NVIC_EncodePriority>
 80020fe:	4602      	mov	r2, r0
 8002100:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ff80 	bl	800200c <__NVIC_SetPriority>
}
 800210c:	bf00      	nop
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff ff54 	bl	8001fd0 <__NVIC_EnableIRQ>
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800213c:	f7ff fee6 	bl	8001f0c <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e099      	b.n	8002280 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2202      	movs	r2, #2
 8002150:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0201 	bic.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800216c:	e00f      	b.n	800218e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800216e:	f7ff fecd 	bl	8001f0c <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b05      	cmp	r3, #5
 800217a:	d908      	bls.n	800218e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2220      	movs	r2, #32
 8002180:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2203      	movs	r2, #3
 8002186:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e078      	b.n	8002280 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1e8      	bne.n	800216e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	4b38      	ldr	r3, [pc, #224]	@ (8002288 <HAL_DMA_Init+0x158>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	4313      	orrs	r3, r2
 80021de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d107      	bne.n	80021f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f0:	4313      	orrs	r3, r2
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	f023 0307 	bic.w	r3, r3, #7
 800220e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	4313      	orrs	r3, r2
 8002218:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221e:	2b04      	cmp	r3, #4
 8002220:	d117      	bne.n	8002252 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4313      	orrs	r3, r2
 800222a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00e      	beq.n	8002252 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 fa6f 	bl	8002718 <DMA_CheckFifoParam>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d008      	beq.n	8002252 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2240      	movs	r2, #64	@ 0x40
 8002244:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800224e:	2301      	movs	r3, #1
 8002250:	e016      	b.n	8002280 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 fa26 	bl	80026ac <DMA_CalcBaseAndBitshift>
 8002260:	4603      	mov	r3, r0
 8002262:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002268:	223f      	movs	r2, #63	@ 0x3f
 800226a:	409a      	lsls	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	f010803f 	.word	0xf010803f

0800228c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
 8002298:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800229a:	2300      	movs	r3, #0
 800229c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d101      	bne.n	80022b2 <HAL_DMA_Start_IT+0x26>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e040      	b.n	8002334 <HAL_DMA_Start_IT+0xa8>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d12f      	bne.n	8002326 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2202      	movs	r2, #2
 80022ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68b9      	ldr	r1, [r7, #8]
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f9b8 	bl	8002650 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e4:	223f      	movs	r2, #63	@ 0x3f
 80022e6:	409a      	lsls	r2, r3
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0216 	orr.w	r2, r2, #22
 80022fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002300:	2b00      	cmp	r3, #0
 8002302:	d007      	beq.n	8002314 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0208 	orr.w	r2, r2, #8
 8002312:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	e005      	b.n	8002332 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800232e:	2302      	movs	r3, #2
 8002330:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002332:	7dfb      	ldrb	r3, [r7, #23]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002348:	4b8e      	ldr	r3, [pc, #568]	@ (8002584 <HAL_DMA_IRQHandler+0x248>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a8e      	ldr	r2, [pc, #568]	@ (8002588 <HAL_DMA_IRQHandler+0x24c>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	0a9b      	lsrs	r3, r3, #10
 8002354:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800235a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002366:	2208      	movs	r2, #8
 8002368:	409a      	lsls	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	4013      	ands	r3, r2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d01a      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d013      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0204 	bic.w	r2, r2, #4
 800238e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002394:	2208      	movs	r2, #8
 8002396:	409a      	lsls	r2, r3
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a0:	f043 0201 	orr.w	r2, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ac:	2201      	movs	r2, #1
 80023ae:	409a      	lsls	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d012      	beq.n	80023de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00b      	beq.n	80023de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ca:	2201      	movs	r2, #1
 80023cc:	409a      	lsls	r2, r3
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d6:	f043 0202 	orr.w	r2, r3, #2
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e2:	2204      	movs	r2, #4
 80023e4:	409a      	lsls	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4013      	ands	r3, r2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d012      	beq.n	8002414 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00b      	beq.n	8002414 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002400:	2204      	movs	r2, #4
 8002402:	409a      	lsls	r2, r3
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800240c:	f043 0204 	orr.w	r2, r3, #4
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002418:	2210      	movs	r2, #16
 800241a:	409a      	lsls	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4013      	ands	r3, r2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d043      	beq.n	80024ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d03c      	beq.n	80024ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002436:	2210      	movs	r2, #16
 8002438:	409a      	lsls	r2, r3
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d018      	beq.n	800247e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d108      	bne.n	800246c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245e:	2b00      	cmp	r3, #0
 8002460:	d024      	beq.n	80024ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	4798      	blx	r3
 800246a:	e01f      	b.n	80024ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002470:	2b00      	cmp	r3, #0
 8002472:	d01b      	beq.n	80024ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	4798      	blx	r3
 800247c:	e016      	b.n	80024ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002488:	2b00      	cmp	r3, #0
 800248a:	d107      	bne.n	800249c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0208 	bic.w	r2, r2, #8
 800249a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b0:	2220      	movs	r2, #32
 80024b2:	409a      	lsls	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 808f 	beq.w	80025dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 8087 	beq.w	80025dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d2:	2220      	movs	r2, #32
 80024d4:	409a      	lsls	r2, r3
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b05      	cmp	r3, #5
 80024e4:	d136      	bne.n	8002554 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0216 	bic.w	r2, r2, #22
 80024f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	695a      	ldr	r2, [r3, #20]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002504:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250a:	2b00      	cmp	r3, #0
 800250c:	d103      	bne.n	8002516 <HAL_DMA_IRQHandler+0x1da>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002512:	2b00      	cmp	r3, #0
 8002514:	d007      	beq.n	8002526 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0208 	bic.w	r2, r2, #8
 8002524:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800252a:	223f      	movs	r2, #63	@ 0x3f
 800252c:	409a      	lsls	r2, r3
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002546:	2b00      	cmp	r3, #0
 8002548:	d07e      	beq.n	8002648 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	4798      	blx	r3
        }
        return;
 8002552:	e079      	b.n	8002648 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d01d      	beq.n	800259e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10d      	bne.n	800258c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002574:	2b00      	cmp	r3, #0
 8002576:	d031      	beq.n	80025dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	4798      	blx	r3
 8002580:	e02c      	b.n	80025dc <HAL_DMA_IRQHandler+0x2a0>
 8002582:	bf00      	nop
 8002584:	20000000 	.word	0x20000000
 8002588:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002590:	2b00      	cmp	r3, #0
 8002592:	d023      	beq.n	80025dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	4798      	blx	r3
 800259c:	e01e      	b.n	80025dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10f      	bne.n	80025cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0210 	bic.w	r2, r2, #16
 80025ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d032      	beq.n	800264a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d022      	beq.n	8002636 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2205      	movs	r2, #5
 80025f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0201 	bic.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	3301      	adds	r3, #1
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	429a      	cmp	r2, r3
 8002612:	d307      	bcc.n	8002624 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f2      	bne.n	8002608 <HAL_DMA_IRQHandler+0x2cc>
 8002622:	e000      	b.n	8002626 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002624:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800263a:	2b00      	cmp	r3, #0
 800263c:	d005      	beq.n	800264a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	4798      	blx	r3
 8002646:	e000      	b.n	800264a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002648:	bf00      	nop
    }
  }
}
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
 800265c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800266c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b40      	cmp	r3, #64	@ 0x40
 800267c:	d108      	bne.n	8002690 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800268e:	e007      	b.n	80026a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	60da      	str	r2, [r3, #12]
}
 80026a0:	bf00      	nop
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	3b10      	subs	r3, #16
 80026bc:	4a14      	ldr	r2, [pc, #80]	@ (8002710 <DMA_CalcBaseAndBitshift+0x64>)
 80026be:	fba2 2303 	umull	r2, r3, r2, r3
 80026c2:	091b      	lsrs	r3, r3, #4
 80026c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026c6:	4a13      	ldr	r2, [pc, #76]	@ (8002714 <DMA_CalcBaseAndBitshift+0x68>)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4413      	add	r3, r2
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2b03      	cmp	r3, #3
 80026d8:	d909      	bls.n	80026ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80026e2:	f023 0303 	bic.w	r3, r3, #3
 80026e6:	1d1a      	adds	r2, r3, #4
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80026ec:	e007      	b.n	80026fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80026f6:	f023 0303 	bic.w	r3, r3, #3
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002702:	4618      	mov	r0, r3
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	aaaaaaab 	.word	0xaaaaaaab
 8002714:	080077f8 	.word	0x080077f8

08002718 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002720:	2300      	movs	r3, #0
 8002722:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002728:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d11f      	bne.n	8002772 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2b03      	cmp	r3, #3
 8002736:	d856      	bhi.n	80027e6 <DMA_CheckFifoParam+0xce>
 8002738:	a201      	add	r2, pc, #4	@ (adr r2, 8002740 <DMA_CheckFifoParam+0x28>)
 800273a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273e:	bf00      	nop
 8002740:	08002751 	.word	0x08002751
 8002744:	08002763 	.word	0x08002763
 8002748:	08002751 	.word	0x08002751
 800274c:	080027e7 	.word	0x080027e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002754:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d046      	beq.n	80027ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002760:	e043      	b.n	80027ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002766:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800276a:	d140      	bne.n	80027ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002770:	e03d      	b.n	80027ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800277a:	d121      	bne.n	80027c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2b03      	cmp	r3, #3
 8002780:	d837      	bhi.n	80027f2 <DMA_CheckFifoParam+0xda>
 8002782:	a201      	add	r2, pc, #4	@ (adr r2, 8002788 <DMA_CheckFifoParam+0x70>)
 8002784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002788:	08002799 	.word	0x08002799
 800278c:	0800279f 	.word	0x0800279f
 8002790:	08002799 	.word	0x08002799
 8002794:	080027b1 	.word	0x080027b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
      break;
 800279c:	e030      	b.n	8002800 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d025      	beq.n	80027f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ae:	e022      	b.n	80027f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027b8:	d11f      	bne.n	80027fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027be:	e01c      	b.n	80027fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d903      	bls.n	80027ce <DMA_CheckFifoParam+0xb6>
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d003      	beq.n	80027d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027cc:	e018      	b.n	8002800 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	73fb      	strb	r3, [r7, #15]
      break;
 80027d2:	e015      	b.n	8002800 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00e      	beq.n	80027fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]
      break;
 80027e4:	e00b      	b.n	80027fe <DMA_CheckFifoParam+0xe6>
      break;
 80027e6:	bf00      	nop
 80027e8:	e00a      	b.n	8002800 <DMA_CheckFifoParam+0xe8>
      break;
 80027ea:	bf00      	nop
 80027ec:	e008      	b.n	8002800 <DMA_CheckFifoParam+0xe8>
      break;
 80027ee:	bf00      	nop
 80027f0:	e006      	b.n	8002800 <DMA_CheckFifoParam+0xe8>
      break;
 80027f2:	bf00      	nop
 80027f4:	e004      	b.n	8002800 <DMA_CheckFifoParam+0xe8>
      break;
 80027f6:	bf00      	nop
 80027f8:	e002      	b.n	8002800 <DMA_CheckFifoParam+0xe8>
      break;   
 80027fa:	bf00      	nop
 80027fc:	e000      	b.n	8002800 <DMA_CheckFifoParam+0xe8>
      break;
 80027fe:	bf00      	nop
    }
  } 
  
  return status; 
 8002800:	7bfb      	ldrb	r3, [r7, #15]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop

08002810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002810:	b480      	push	{r7}
 8002812:	b089      	sub	sp, #36	@ 0x24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800281e:	2300      	movs	r3, #0
 8002820:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002822:	2300      	movs	r3, #0
 8002824:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
 800282a:	e165      	b.n	8002af8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800282c:	2201      	movs	r2, #1
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4013      	ands	r3, r2
 800283e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	429a      	cmp	r2, r3
 8002846:	f040 8154 	bne.w	8002af2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	2b01      	cmp	r3, #1
 8002854:	d005      	beq.n	8002862 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800285e:	2b02      	cmp	r3, #2
 8002860:	d130      	bne.n	80028c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	2203      	movs	r2, #3
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002898:	2201      	movs	r2, #1
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	f003 0201 	and.w	r2, r3, #1
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 0303 	and.w	r3, r3, #3
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d017      	beq.n	8002900 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	2203      	movs	r2, #3
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d123      	bne.n	8002954 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	08da      	lsrs	r2, r3, #3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3208      	adds	r2, #8
 8002914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002918:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	220f      	movs	r2, #15
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	691a      	ldr	r2, [r3, #16]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	08da      	lsrs	r2, r3, #3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3208      	adds	r2, #8
 800294e:	69b9      	ldr	r1, [r7, #24]
 8002950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	2203      	movs	r2, #3
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 0203 	and.w	r2, r3, #3
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 80ae 	beq.w	8002af2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	4b5d      	ldr	r3, [pc, #372]	@ (8002b10 <HAL_GPIO_Init+0x300>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299e:	4a5c      	ldr	r2, [pc, #368]	@ (8002b10 <HAL_GPIO_Init+0x300>)
 80029a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80029a6:	4b5a      	ldr	r3, [pc, #360]	@ (8002b10 <HAL_GPIO_Init+0x300>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029b2:	4a58      	ldr	r2, [pc, #352]	@ (8002b14 <HAL_GPIO_Init+0x304>)
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	089b      	lsrs	r3, r3, #2
 80029b8:	3302      	adds	r3, #2
 80029ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	220f      	movs	r2, #15
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4013      	ands	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a4f      	ldr	r2, [pc, #316]	@ (8002b18 <HAL_GPIO_Init+0x308>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d025      	beq.n	8002a2a <HAL_GPIO_Init+0x21a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a4e      	ldr	r2, [pc, #312]	@ (8002b1c <HAL_GPIO_Init+0x30c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d01f      	beq.n	8002a26 <HAL_GPIO_Init+0x216>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a4d      	ldr	r2, [pc, #308]	@ (8002b20 <HAL_GPIO_Init+0x310>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d019      	beq.n	8002a22 <HAL_GPIO_Init+0x212>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a4c      	ldr	r2, [pc, #304]	@ (8002b24 <HAL_GPIO_Init+0x314>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d013      	beq.n	8002a1e <HAL_GPIO_Init+0x20e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002b28 <HAL_GPIO_Init+0x318>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d00d      	beq.n	8002a1a <HAL_GPIO_Init+0x20a>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a4a      	ldr	r2, [pc, #296]	@ (8002b2c <HAL_GPIO_Init+0x31c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d007      	beq.n	8002a16 <HAL_GPIO_Init+0x206>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a49      	ldr	r2, [pc, #292]	@ (8002b30 <HAL_GPIO_Init+0x320>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d101      	bne.n	8002a12 <HAL_GPIO_Init+0x202>
 8002a0e:	2306      	movs	r3, #6
 8002a10:	e00c      	b.n	8002a2c <HAL_GPIO_Init+0x21c>
 8002a12:	2307      	movs	r3, #7
 8002a14:	e00a      	b.n	8002a2c <HAL_GPIO_Init+0x21c>
 8002a16:	2305      	movs	r3, #5
 8002a18:	e008      	b.n	8002a2c <HAL_GPIO_Init+0x21c>
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	e006      	b.n	8002a2c <HAL_GPIO_Init+0x21c>
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e004      	b.n	8002a2c <HAL_GPIO_Init+0x21c>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e002      	b.n	8002a2c <HAL_GPIO_Init+0x21c>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <HAL_GPIO_Init+0x21c>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	69fa      	ldr	r2, [r7, #28]
 8002a2e:	f002 0203 	and.w	r2, r2, #3
 8002a32:	0092      	lsls	r2, r2, #2
 8002a34:	4093      	lsls	r3, r2
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a3c:	4935      	ldr	r1, [pc, #212]	@ (8002b14 <HAL_GPIO_Init+0x304>)
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	089b      	lsrs	r3, r3, #2
 8002a42:	3302      	adds	r3, #2
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a4a:	4b3a      	ldr	r3, [pc, #232]	@ (8002b34 <HAL_GPIO_Init+0x324>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a6e:	4a31      	ldr	r2, [pc, #196]	@ (8002b34 <HAL_GPIO_Init+0x324>)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a74:	4b2f      	ldr	r3, [pc, #188]	@ (8002b34 <HAL_GPIO_Init+0x324>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a98:	4a26      	ldr	r2, [pc, #152]	@ (8002b34 <HAL_GPIO_Init+0x324>)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a9e:	4b25      	ldr	r3, [pc, #148]	@ (8002b34 <HAL_GPIO_Init+0x324>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8002b34 <HAL_GPIO_Init+0x324>)
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b34 <HAL_GPIO_Init+0x324>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aec:	4a11      	ldr	r2, [pc, #68]	@ (8002b34 <HAL_GPIO_Init+0x324>)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3301      	adds	r3, #1
 8002af6:	61fb      	str	r3, [r7, #28]
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	2b0f      	cmp	r3, #15
 8002afc:	f67f ae96 	bls.w	800282c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b00:	bf00      	nop
 8002b02:	bf00      	nop
 8002b04:	3724      	adds	r7, #36	@ 0x24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40013800 	.word	0x40013800
 8002b18:	40020000 	.word	0x40020000
 8002b1c:	40020400 	.word	0x40020400
 8002b20:	40020800 	.word	0x40020800
 8002b24:	40020c00 	.word	0x40020c00
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	40021400 	.word	0x40021400
 8002b30:	40021800 	.word	0x40021800
 8002b34:	40013c00 	.word	0x40013c00

08002b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	807b      	strh	r3, [r7, #2]
 8002b44:	4613      	mov	r3, r2
 8002b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b48:	787b      	ldrb	r3, [r7, #1]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b4e:	887a      	ldrh	r2, [r7, #2]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b54:	e003      	b.n	8002b5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b56:	887b      	ldrh	r3, [r7, #2]
 8002b58:	041a      	lsls	r2, r3, #16
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	619a      	str	r2, [r3, #24]
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
	...

08002b6c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	603b      	str	r3, [r7, #0]
 8002b7a:	4b20      	ldr	r3, [pc, #128]	@ (8002bfc <HAL_PWREx_EnableOverDrive+0x90>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7e:	4a1f      	ldr	r2, [pc, #124]	@ (8002bfc <HAL_PWREx_EnableOverDrive+0x90>)
 8002b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b86:	4b1d      	ldr	r3, [pc, #116]	@ (8002bfc <HAL_PWREx_EnableOverDrive+0x90>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b92:	4b1b      	ldr	r3, [pc, #108]	@ (8002c00 <HAL_PWREx_EnableOverDrive+0x94>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b98:	f7ff f9b8 	bl	8001f0c <HAL_GetTick>
 8002b9c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b9e:	e009      	b.n	8002bb4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ba0:	f7ff f9b4 	bl	8001f0c <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002bae:	d901      	bls.n	8002bb4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e01f      	b.n	8002bf4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bb4:	4b13      	ldr	r3, [pc, #76]	@ (8002c04 <HAL_PWREx_EnableOverDrive+0x98>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bc0:	d1ee      	bne.n	8002ba0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002bc2:	4b11      	ldr	r3, [pc, #68]	@ (8002c08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bc8:	f7ff f9a0 	bl	8001f0c <HAL_GetTick>
 8002bcc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bce:	e009      	b.n	8002be4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bd0:	f7ff f99c 	bl	8001f0c <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002bde:	d901      	bls.n	8002be4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e007      	b.n	8002bf4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002be4:	4b07      	ldr	r3, [pc, #28]	@ (8002c04 <HAL_PWREx_EnableOverDrive+0x98>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002bf0:	d1ee      	bne.n	8002bd0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	420e0040 	.word	0x420e0040
 8002c04:	40007000 	.word	0x40007000
 8002c08:	420e0044 	.word	0x420e0044

08002c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e0cc      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c20:	4b68      	ldr	r3, [pc, #416]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 030f 	and.w	r3, r3, #15
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d90c      	bls.n	8002c48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2e:	4b65      	ldr	r3, [pc, #404]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c36:	4b63      	ldr	r3, [pc, #396]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0b8      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d020      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c60:	4b59      	ldr	r3, [pc, #356]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	4a58      	ldr	r2, [pc, #352]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c78:	4b53      	ldr	r3, [pc, #332]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	4a52      	ldr	r2, [pc, #328]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c84:	4b50      	ldr	r3, [pc, #320]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	494d      	ldr	r1, [pc, #308]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d044      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d107      	bne.n	8002cba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002caa:	4b47      	ldr	r3, [pc, #284]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d119      	bne.n	8002cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e07f      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d003      	beq.n	8002cca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cc6:	2b03      	cmp	r3, #3
 8002cc8:	d107      	bne.n	8002cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cca:	4b3f      	ldr	r3, [pc, #252]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d109      	bne.n	8002cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e06f      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cda:	4b3b      	ldr	r3, [pc, #236]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e067      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cea:	4b37      	ldr	r3, [pc, #220]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f023 0203 	bic.w	r2, r3, #3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	4934      	ldr	r1, [pc, #208]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cfc:	f7ff f906 	bl	8001f0c <HAL_GetTick>
 8002d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d02:	e00a      	b.n	8002d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d04:	f7ff f902 	bl	8001f0c <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e04f      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1a:	4b2b      	ldr	r3, [pc, #172]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 020c 	and.w	r2, r3, #12
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d1eb      	bne.n	8002d04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d2c:	4b25      	ldr	r3, [pc, #148]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 030f 	and.w	r3, r3, #15
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d20c      	bcs.n	8002d54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3a:	4b22      	ldr	r3, [pc, #136]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d42:	4b20      	ldr	r3, [pc, #128]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e032      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d008      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d60:	4b19      	ldr	r3, [pc, #100]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	4916      	ldr	r1, [pc, #88]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d009      	beq.n	8002d92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d7e:	4b12      	ldr	r3, [pc, #72]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	490e      	ldr	r1, [pc, #56]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d92:	f000 f887 	bl	8002ea4 <HAL_RCC_GetSysClockFreq>
 8002d96:	4602      	mov	r2, r0
 8002d98:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	091b      	lsrs	r3, r3, #4
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	490a      	ldr	r1, [pc, #40]	@ (8002dcc <HAL_RCC_ClockConfig+0x1c0>)
 8002da4:	5ccb      	ldrb	r3, [r1, r3]
 8002da6:	fa22 f303 	lsr.w	r3, r2, r3
 8002daa:	4a09      	ldr	r2, [pc, #36]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002dae:	4b09      	ldr	r3, [pc, #36]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fe ff5e 	bl	8001c74 <HAL_InitTick>

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40023c00 	.word	0x40023c00
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	080077e0 	.word	0x080077e0
 8002dd0:	20000000 	.word	0x20000000
 8002dd4:	20000004 	.word	0x20000004

08002dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ddc:	4b03      	ldr	r3, [pc, #12]	@ (8002dec <HAL_RCC_GetHCLKFreq+0x14>)
 8002dde:	681b      	ldr	r3, [r3, #0]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	20000000 	.word	0x20000000

08002df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002df4:	f7ff fff0 	bl	8002dd8 <HAL_RCC_GetHCLKFreq>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	4b05      	ldr	r3, [pc, #20]	@ (8002e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	0a9b      	lsrs	r3, r3, #10
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	4903      	ldr	r1, [pc, #12]	@ (8002e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e06:	5ccb      	ldrb	r3, [r1, r3]
 8002e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40023800 	.word	0x40023800
 8002e14:	080077f0 	.word	0x080077f0

08002e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e1c:	f7ff ffdc 	bl	8002dd8 <HAL_RCC_GetHCLKFreq>
 8002e20:	4602      	mov	r2, r0
 8002e22:	4b05      	ldr	r3, [pc, #20]	@ (8002e38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	0b5b      	lsrs	r3, r3, #13
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	4903      	ldr	r1, [pc, #12]	@ (8002e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e2e:	5ccb      	ldrb	r3, [r1, r3]
 8002e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	080077f0 	.word	0x080077f0

08002e40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	220f      	movs	r2, #15
 8002e4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e50:	4b12      	ldr	r3, [pc, #72]	@ (8002e9c <HAL_RCC_GetClockConfig+0x5c>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 0203 	and.w	r2, r3, #3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e9c <HAL_RCC_GetClockConfig+0x5c>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e68:	4b0c      	ldr	r3, [pc, #48]	@ (8002e9c <HAL_RCC_GetClockConfig+0x5c>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e74:	4b09      	ldr	r3, [pc, #36]	@ (8002e9c <HAL_RCC_GetClockConfig+0x5c>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	08db      	lsrs	r3, r3, #3
 8002e7a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e82:	4b07      	ldr	r3, [pc, #28]	@ (8002ea0 <HAL_RCC_GetClockConfig+0x60>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 020f 	and.w	r2, r3, #15
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	601a      	str	r2, [r3, #0]
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40023c00 	.word	0x40023c00

08002ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ea8:	b0ae      	sub	sp, #184	@ 0xb8
 8002eaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eca:	4bcb      	ldr	r3, [pc, #812]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 030c 	and.w	r3, r3, #12
 8002ed2:	2b0c      	cmp	r3, #12
 8002ed4:	f200 8206 	bhi.w	80032e4 <HAL_RCC_GetSysClockFreq+0x440>
 8002ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ee0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ede:	bf00      	nop
 8002ee0:	08002f15 	.word	0x08002f15
 8002ee4:	080032e5 	.word	0x080032e5
 8002ee8:	080032e5 	.word	0x080032e5
 8002eec:	080032e5 	.word	0x080032e5
 8002ef0:	08002f1d 	.word	0x08002f1d
 8002ef4:	080032e5 	.word	0x080032e5
 8002ef8:	080032e5 	.word	0x080032e5
 8002efc:	080032e5 	.word	0x080032e5
 8002f00:	08002f25 	.word	0x08002f25
 8002f04:	080032e5 	.word	0x080032e5
 8002f08:	080032e5 	.word	0x080032e5
 8002f0c:	080032e5 	.word	0x080032e5
 8002f10:	08003115 	.word	0x08003115
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f14:	4bb9      	ldr	r3, [pc, #740]	@ (80031fc <HAL_RCC_GetSysClockFreq+0x358>)
 8002f16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f1a:	e1e7      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f1c:	4bb8      	ldr	r3, [pc, #736]	@ (8003200 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002f1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f22:	e1e3      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f24:	4bb4      	ldr	r3, [pc, #720]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f30:	4bb1      	ldr	r3, [pc, #708]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d071      	beq.n	8003020 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f3c:	4bae      	ldr	r3, [pc, #696]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	099b      	lsrs	r3, r3, #6
 8002f42:	2200      	movs	r2, #0
 8002f44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002f48:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002f4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f54:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002f5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002f62:	4622      	mov	r2, r4
 8002f64:	462b      	mov	r3, r5
 8002f66:	f04f 0000 	mov.w	r0, #0
 8002f6a:	f04f 0100 	mov.w	r1, #0
 8002f6e:	0159      	lsls	r1, r3, #5
 8002f70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f74:	0150      	lsls	r0, r2, #5
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4621      	mov	r1, r4
 8002f7c:	1a51      	subs	r1, r2, r1
 8002f7e:	6439      	str	r1, [r7, #64]	@ 0x40
 8002f80:	4629      	mov	r1, r5
 8002f82:	eb63 0301 	sbc.w	r3, r3, r1
 8002f86:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	f04f 0300 	mov.w	r3, #0
 8002f90:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002f94:	4649      	mov	r1, r9
 8002f96:	018b      	lsls	r3, r1, #6
 8002f98:	4641      	mov	r1, r8
 8002f9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f9e:	4641      	mov	r1, r8
 8002fa0:	018a      	lsls	r2, r1, #6
 8002fa2:	4641      	mov	r1, r8
 8002fa4:	1a51      	subs	r1, r2, r1
 8002fa6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002fa8:	4649      	mov	r1, r9
 8002faa:	eb63 0301 	sbc.w	r3, r3, r1
 8002fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002fbc:	4649      	mov	r1, r9
 8002fbe:	00cb      	lsls	r3, r1, #3
 8002fc0:	4641      	mov	r1, r8
 8002fc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fc6:	4641      	mov	r1, r8
 8002fc8:	00ca      	lsls	r2, r1, #3
 8002fca:	4610      	mov	r0, r2
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4603      	mov	r3, r0
 8002fd0:	4622      	mov	r2, r4
 8002fd2:	189b      	adds	r3, r3, r2
 8002fd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fd6:	462b      	mov	r3, r5
 8002fd8:	460a      	mov	r2, r1
 8002fda:	eb42 0303 	adc.w	r3, r2, r3
 8002fde:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002fec:	4629      	mov	r1, r5
 8002fee:	024b      	lsls	r3, r1, #9
 8002ff0:	4621      	mov	r1, r4
 8002ff2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ff6:	4621      	mov	r1, r4
 8002ff8:	024a      	lsls	r2, r1, #9
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003002:	2200      	movs	r2, #0
 8003004:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003008:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800300c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003010:	f7fd f956 	bl	80002c0 <__aeabi_uldivmod>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4613      	mov	r3, r2
 800301a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800301e:	e067      	b.n	80030f0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003020:	4b75      	ldr	r3, [pc, #468]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	099b      	lsrs	r3, r3, #6
 8003026:	2200      	movs	r2, #0
 8003028:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800302c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003030:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003038:	67bb      	str	r3, [r7, #120]	@ 0x78
 800303a:	2300      	movs	r3, #0
 800303c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800303e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003042:	4622      	mov	r2, r4
 8003044:	462b      	mov	r3, r5
 8003046:	f04f 0000 	mov.w	r0, #0
 800304a:	f04f 0100 	mov.w	r1, #0
 800304e:	0159      	lsls	r1, r3, #5
 8003050:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003054:	0150      	lsls	r0, r2, #5
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4621      	mov	r1, r4
 800305c:	1a51      	subs	r1, r2, r1
 800305e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003060:	4629      	mov	r1, r5
 8003062:	eb63 0301 	sbc.w	r3, r3, r1
 8003066:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003074:	4649      	mov	r1, r9
 8003076:	018b      	lsls	r3, r1, #6
 8003078:	4641      	mov	r1, r8
 800307a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800307e:	4641      	mov	r1, r8
 8003080:	018a      	lsls	r2, r1, #6
 8003082:	4641      	mov	r1, r8
 8003084:	ebb2 0a01 	subs.w	sl, r2, r1
 8003088:	4649      	mov	r1, r9
 800308a:	eb63 0b01 	sbc.w	fp, r3, r1
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	f04f 0300 	mov.w	r3, #0
 8003096:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800309a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800309e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030a2:	4692      	mov	sl, r2
 80030a4:	469b      	mov	fp, r3
 80030a6:	4623      	mov	r3, r4
 80030a8:	eb1a 0303 	adds.w	r3, sl, r3
 80030ac:	623b      	str	r3, [r7, #32]
 80030ae:	462b      	mov	r3, r5
 80030b0:	eb4b 0303 	adc.w	r3, fp, r3
 80030b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80030c2:	4629      	mov	r1, r5
 80030c4:	028b      	lsls	r3, r1, #10
 80030c6:	4621      	mov	r1, r4
 80030c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030cc:	4621      	mov	r1, r4
 80030ce:	028a      	lsls	r2, r1, #10
 80030d0:	4610      	mov	r0, r2
 80030d2:	4619      	mov	r1, r3
 80030d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030d8:	2200      	movs	r2, #0
 80030da:	673b      	str	r3, [r7, #112]	@ 0x70
 80030dc:	677a      	str	r2, [r7, #116]	@ 0x74
 80030de:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80030e2:	f7fd f8ed 	bl	80002c0 <__aeabi_uldivmod>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4613      	mov	r3, r2
 80030ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80030f0:	4b41      	ldr	r3, [pc, #260]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x354>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	0c1b      	lsrs	r3, r3, #16
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	3301      	adds	r3, #1
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003102:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003106:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800310a:	fbb2 f3f3 	udiv	r3, r2, r3
 800310e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003112:	e0eb      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003114:	4b38      	ldr	r3, [pc, #224]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800311c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003120:	4b35      	ldr	r3, [pc, #212]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d06b      	beq.n	8003204 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800312c:	4b32      	ldr	r3, [pc, #200]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x354>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	099b      	lsrs	r3, r3, #6
 8003132:	2200      	movs	r2, #0
 8003134:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003136:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003138:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800313a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800313e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003140:	2300      	movs	r3, #0
 8003142:	667b      	str	r3, [r7, #100]	@ 0x64
 8003144:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003148:	4622      	mov	r2, r4
 800314a:	462b      	mov	r3, r5
 800314c:	f04f 0000 	mov.w	r0, #0
 8003150:	f04f 0100 	mov.w	r1, #0
 8003154:	0159      	lsls	r1, r3, #5
 8003156:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800315a:	0150      	lsls	r0, r2, #5
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4621      	mov	r1, r4
 8003162:	1a51      	subs	r1, r2, r1
 8003164:	61b9      	str	r1, [r7, #24]
 8003166:	4629      	mov	r1, r5
 8003168:	eb63 0301 	sbc.w	r3, r3, r1
 800316c:	61fb      	str	r3, [r7, #28]
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800317a:	4659      	mov	r1, fp
 800317c:	018b      	lsls	r3, r1, #6
 800317e:	4651      	mov	r1, sl
 8003180:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003184:	4651      	mov	r1, sl
 8003186:	018a      	lsls	r2, r1, #6
 8003188:	4651      	mov	r1, sl
 800318a:	ebb2 0801 	subs.w	r8, r2, r1
 800318e:	4659      	mov	r1, fp
 8003190:	eb63 0901 	sbc.w	r9, r3, r1
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	f04f 0300 	mov.w	r3, #0
 800319c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031a0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031a8:	4690      	mov	r8, r2
 80031aa:	4699      	mov	r9, r3
 80031ac:	4623      	mov	r3, r4
 80031ae:	eb18 0303 	adds.w	r3, r8, r3
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	462b      	mov	r3, r5
 80031b6:	eb49 0303 	adc.w	r3, r9, r3
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	f04f 0300 	mov.w	r3, #0
 80031c4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80031c8:	4629      	mov	r1, r5
 80031ca:	024b      	lsls	r3, r1, #9
 80031cc:	4621      	mov	r1, r4
 80031ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031d2:	4621      	mov	r1, r4
 80031d4:	024a      	lsls	r2, r1, #9
 80031d6:	4610      	mov	r0, r2
 80031d8:	4619      	mov	r1, r3
 80031da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80031de:	2200      	movs	r2, #0
 80031e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80031e2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80031e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80031e8:	f7fd f86a 	bl	80002c0 <__aeabi_uldivmod>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	4613      	mov	r3, r2
 80031f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80031f6:	e065      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0x420>
 80031f8:	40023800 	.word	0x40023800
 80031fc:	00f42400 	.word	0x00f42400
 8003200:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003204:	4b3d      	ldr	r3, [pc, #244]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x458>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	099b      	lsrs	r3, r3, #6
 800320a:	2200      	movs	r2, #0
 800320c:	4618      	mov	r0, r3
 800320e:	4611      	mov	r1, r2
 8003210:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003214:	653b      	str	r3, [r7, #80]	@ 0x50
 8003216:	2300      	movs	r3, #0
 8003218:	657b      	str	r3, [r7, #84]	@ 0x54
 800321a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800321e:	4642      	mov	r2, r8
 8003220:	464b      	mov	r3, r9
 8003222:	f04f 0000 	mov.w	r0, #0
 8003226:	f04f 0100 	mov.w	r1, #0
 800322a:	0159      	lsls	r1, r3, #5
 800322c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003230:	0150      	lsls	r0, r2, #5
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	4641      	mov	r1, r8
 8003238:	1a51      	subs	r1, r2, r1
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	4649      	mov	r1, r9
 800323e:	eb63 0301 	sbc.w	r3, r3, r1
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003250:	4659      	mov	r1, fp
 8003252:	018b      	lsls	r3, r1, #6
 8003254:	4651      	mov	r1, sl
 8003256:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800325a:	4651      	mov	r1, sl
 800325c:	018a      	lsls	r2, r1, #6
 800325e:	4651      	mov	r1, sl
 8003260:	1a54      	subs	r4, r2, r1
 8003262:	4659      	mov	r1, fp
 8003264:	eb63 0501 	sbc.w	r5, r3, r1
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	00eb      	lsls	r3, r5, #3
 8003272:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003276:	00e2      	lsls	r2, r4, #3
 8003278:	4614      	mov	r4, r2
 800327a:	461d      	mov	r5, r3
 800327c:	4643      	mov	r3, r8
 800327e:	18e3      	adds	r3, r4, r3
 8003280:	603b      	str	r3, [r7, #0]
 8003282:	464b      	mov	r3, r9
 8003284:	eb45 0303 	adc.w	r3, r5, r3
 8003288:	607b      	str	r3, [r7, #4]
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003296:	4629      	mov	r1, r5
 8003298:	028b      	lsls	r3, r1, #10
 800329a:	4621      	mov	r1, r4
 800329c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032a0:	4621      	mov	r1, r4
 80032a2:	028a      	lsls	r2, r1, #10
 80032a4:	4610      	mov	r0, r2
 80032a6:	4619      	mov	r1, r3
 80032a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032ac:	2200      	movs	r2, #0
 80032ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032b0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80032b2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032b6:	f7fd f803 	bl	80002c0 <__aeabi_uldivmod>
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	4613      	mov	r3, r2
 80032c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80032c4:	4b0d      	ldr	r3, [pc, #52]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x458>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	0f1b      	lsrs	r3, r3, #28
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80032d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80032d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80032da:	fbb2 f3f3 	udiv	r3, r2, r3
 80032de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80032e2:	e003      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032e4:	4b06      	ldr	r3, [pc, #24]	@ (8003300 <HAL_RCC_GetSysClockFreq+0x45c>)
 80032e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80032ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	37b8      	adds	r7, #184	@ 0xb8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032fa:	bf00      	nop
 80032fc:	40023800 	.word	0x40023800
 8003300:	00f42400 	.word	0x00f42400

08003304 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e28d      	b.n	8003832 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 8083 	beq.w	800342a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003324:	4b94      	ldr	r3, [pc, #592]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 030c 	and.w	r3, r3, #12
 800332c:	2b04      	cmp	r3, #4
 800332e:	d019      	beq.n	8003364 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003330:	4b91      	ldr	r3, [pc, #580]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 030c 	and.w	r3, r3, #12
        || \
 8003338:	2b08      	cmp	r3, #8
 800333a:	d106      	bne.n	800334a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800333c:	4b8e      	ldr	r3, [pc, #568]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003344:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003348:	d00c      	beq.n	8003364 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800334a:	4b8b      	ldr	r3, [pc, #556]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003352:	2b0c      	cmp	r3, #12
 8003354:	d112      	bne.n	800337c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003356:	4b88      	ldr	r3, [pc, #544]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800335e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003362:	d10b      	bne.n	800337c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003364:	4b84      	ldr	r3, [pc, #528]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d05b      	beq.n	8003428 <HAL_RCC_OscConfig+0x124>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d157      	bne.n	8003428 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e25a      	b.n	8003832 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003384:	d106      	bne.n	8003394 <HAL_RCC_OscConfig+0x90>
 8003386:	4b7c      	ldr	r3, [pc, #496]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a7b      	ldr	r2, [pc, #492]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 800338c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	e01d      	b.n	80033d0 <HAL_RCC_OscConfig+0xcc>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800339c:	d10c      	bne.n	80033b8 <HAL_RCC_OscConfig+0xb4>
 800339e:	4b76      	ldr	r3, [pc, #472]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a75      	ldr	r2, [pc, #468]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 80033a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	4b73      	ldr	r3, [pc, #460]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a72      	ldr	r2, [pc, #456]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 80033b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	e00b      	b.n	80033d0 <HAL_RCC_OscConfig+0xcc>
 80033b8:	4b6f      	ldr	r3, [pc, #444]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a6e      	ldr	r2, [pc, #440]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 80033be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	4b6c      	ldr	r3, [pc, #432]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a6b      	ldr	r2, [pc, #428]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 80033ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d013      	beq.n	8003400 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d8:	f7fe fd98 	bl	8001f0c <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e0:	f7fe fd94 	bl	8001f0c <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b64      	cmp	r3, #100	@ 0x64
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e21f      	b.n	8003832 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f2:	4b61      	ldr	r3, [pc, #388]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0xdc>
 80033fe:	e014      	b.n	800342a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003400:	f7fe fd84 	bl	8001f0c <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003408:	f7fe fd80 	bl	8001f0c <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b64      	cmp	r3, #100	@ 0x64
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e20b      	b.n	8003832 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800341a:	4b57      	ldr	r3, [pc, #348]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0x104>
 8003426:	e000      	b.n	800342a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d06f      	beq.n	8003516 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003436:	4b50      	ldr	r3, [pc, #320]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 030c 	and.w	r3, r3, #12
 800343e:	2b00      	cmp	r3, #0
 8003440:	d017      	beq.n	8003472 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003442:	4b4d      	ldr	r3, [pc, #308]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
        || \
 800344a:	2b08      	cmp	r3, #8
 800344c:	d105      	bne.n	800345a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800344e:	4b4a      	ldr	r3, [pc, #296]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00b      	beq.n	8003472 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800345a:	4b47      	ldr	r3, [pc, #284]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003462:	2b0c      	cmp	r3, #12
 8003464:	d11c      	bne.n	80034a0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003466:	4b44      	ldr	r3, [pc, #272]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d116      	bne.n	80034a0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003472:	4b41      	ldr	r3, [pc, #260]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d005      	beq.n	800348a <HAL_RCC_OscConfig+0x186>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d001      	beq.n	800348a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e1d3      	b.n	8003832 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800348a:	4b3b      	ldr	r3, [pc, #236]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4937      	ldr	r1, [pc, #220]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 800349a:	4313      	orrs	r3, r2
 800349c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800349e:	e03a      	b.n	8003516 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d020      	beq.n	80034ea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034a8:	4b34      	ldr	r3, [pc, #208]	@ (800357c <HAL_RCC_OscConfig+0x278>)
 80034aa:	2201      	movs	r2, #1
 80034ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ae:	f7fe fd2d 	bl	8001f0c <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b6:	f7fe fd29 	bl	8001f0c <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e1b4      	b.n	8003832 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0f0      	beq.n	80034b6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d4:	4b28      	ldr	r3, [pc, #160]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	4925      	ldr	r1, [pc, #148]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	600b      	str	r3, [r1, #0]
 80034e8:	e015      	b.n	8003516 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ea:	4b24      	ldr	r3, [pc, #144]	@ (800357c <HAL_RCC_OscConfig+0x278>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f0:	f7fe fd0c 	bl	8001f0c <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f8:	f7fe fd08 	bl	8001f0c <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e193      	b.n	8003832 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800350a:	4b1b      	ldr	r3, [pc, #108]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d036      	beq.n	8003590 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d016      	beq.n	8003558 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800352a:	4b15      	ldr	r3, [pc, #84]	@ (8003580 <HAL_RCC_OscConfig+0x27c>)
 800352c:	2201      	movs	r2, #1
 800352e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003530:	f7fe fcec 	bl	8001f0c <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003538:	f7fe fce8 	bl	8001f0c <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e173      	b.n	8003832 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354a:	4b0b      	ldr	r3, [pc, #44]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 800354c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0f0      	beq.n	8003538 <HAL_RCC_OscConfig+0x234>
 8003556:	e01b      	b.n	8003590 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003558:	4b09      	ldr	r3, [pc, #36]	@ (8003580 <HAL_RCC_OscConfig+0x27c>)
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355e:	f7fe fcd5 	bl	8001f0c <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003564:	e00e      	b.n	8003584 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003566:	f7fe fcd1 	bl	8001f0c <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d907      	bls.n	8003584 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e15c      	b.n	8003832 <HAL_RCC_OscConfig+0x52e>
 8003578:	40023800 	.word	0x40023800
 800357c:	42470000 	.word	0x42470000
 8003580:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003584:	4b8a      	ldr	r3, [pc, #552]	@ (80037b0 <HAL_RCC_OscConfig+0x4ac>)
 8003586:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1ea      	bne.n	8003566 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 8097 	beq.w	80036cc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800359e:	2300      	movs	r3, #0
 80035a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035a2:	4b83      	ldr	r3, [pc, #524]	@ (80037b0 <HAL_RCC_OscConfig+0x4ac>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10f      	bne.n	80035ce <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	60bb      	str	r3, [r7, #8]
 80035b2:	4b7f      	ldr	r3, [pc, #508]	@ (80037b0 <HAL_RCC_OscConfig+0x4ac>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b6:	4a7e      	ldr	r2, [pc, #504]	@ (80037b0 <HAL_RCC_OscConfig+0x4ac>)
 80035b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80035be:	4b7c      	ldr	r3, [pc, #496]	@ (80037b0 <HAL_RCC_OscConfig+0x4ac>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035c6:	60bb      	str	r3, [r7, #8]
 80035c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ca:	2301      	movs	r3, #1
 80035cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ce:	4b79      	ldr	r3, [pc, #484]	@ (80037b4 <HAL_RCC_OscConfig+0x4b0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d118      	bne.n	800360c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035da:	4b76      	ldr	r3, [pc, #472]	@ (80037b4 <HAL_RCC_OscConfig+0x4b0>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a75      	ldr	r2, [pc, #468]	@ (80037b4 <HAL_RCC_OscConfig+0x4b0>)
 80035e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035e6:	f7fe fc91 	bl	8001f0c <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ee:	f7fe fc8d 	bl	8001f0c <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e118      	b.n	8003832 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003600:	4b6c      	ldr	r3, [pc, #432]	@ (80037b4 <HAL_RCC_OscConfig+0x4b0>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f0      	beq.n	80035ee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d106      	bne.n	8003622 <HAL_RCC_OscConfig+0x31e>
 8003614:	4b66      	ldr	r3, [pc, #408]	@ (80037b0 <HAL_RCC_OscConfig+0x4ac>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003618:	4a65      	ldr	r2, [pc, #404]	@ (80037b0 <HAL_RCC_OscConfig+0x4ac>)
 800361a:	f043 0301 	orr.w	r3, r3, #1
 800361e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003620:	e01c      	b.n	800365c <HAL_RCC_OscConfig+0x358>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	2b05      	cmp	r3, #5
 8003628:	d10c      	bne.n	8003644 <HAL_RCC_OscConfig+0x340>
 800362a:	4b61      	ldr	r3, [pc, #388]	@ (80037b0 <HAL_RCC_OscConfig+0x4ac>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800362e:	4a60      	ldr	r2, [pc, #384]	@ (80037b0 <HAL_RCC_OscConfig+0x4ac>)
 8003630:	f043 0304 	orr.w	r3, r3, #4
 8003634:	6713      	str	r3, [r2, #112]	@ 0x70
 8003636:	4b5e      	ldr	r3, [pc, #376]	@ (80037b0 <HAL_RCC_OscConfig+0x4ac>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800363a:	4a5d      	ldr	r2, [pc, #372]	@ (80037b0 <HAL_RCC_OscConfig+0x4ac>)
 800363c:	f043 0301 	orr.w	r3, r3, #1
 8003640:	6713      	str	r3, [r2, #112]	@ 0x70
 8003642:	e00b      	b.n	800365c <HAL_RCC_OscConfig+0x358>
 8003644:	4b5a      	ldr	r3, [pc, #360]	@ (80037b0 <HAL_RCC_OscConfig+0x4ac>)
 8003646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003648:	4a59      	ldr	r2, [pc, #356]	@ (80037b0 <HAL_RCC_OscConfig+0x4ac>)
 800364a:	f023 0301 	bic.w	r3, r3, #1
 800364e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003650:	4b57      	ldr	r3, [pc, #348]	@ (80037b0 <HAL_RCC_OscConfig+0x4ac>)
 8003652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003654:	4a56      	ldr	r2, [pc, #344]	@ (80037b0 <HAL_RCC_OscConfig+0x4ac>)
 8003656:	f023 0304 	bic.w	r3, r3, #4
 800365a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d015      	beq.n	8003690 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003664:	f7fe fc52 	bl	8001f0c <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366a:	e00a      	b.n	8003682 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800366c:	f7fe fc4e 	bl	8001f0c <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800367a:	4293      	cmp	r3, r2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e0d7      	b.n	8003832 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003682:	4b4b      	ldr	r3, [pc, #300]	@ (80037b0 <HAL_RCC_OscConfig+0x4ac>)
 8003684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0ee      	beq.n	800366c <HAL_RCC_OscConfig+0x368>
 800368e:	e014      	b.n	80036ba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003690:	f7fe fc3c 	bl	8001f0c <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003696:	e00a      	b.n	80036ae <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003698:	f7fe fc38 	bl	8001f0c <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e0c1      	b.n	8003832 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ae:	4b40      	ldr	r3, [pc, #256]	@ (80037b0 <HAL_RCC_OscConfig+0x4ac>)
 80036b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1ee      	bne.n	8003698 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036ba:	7dfb      	ldrb	r3, [r7, #23]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d105      	bne.n	80036cc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c0:	4b3b      	ldr	r3, [pc, #236]	@ (80037b0 <HAL_RCC_OscConfig+0x4ac>)
 80036c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c4:	4a3a      	ldr	r2, [pc, #232]	@ (80037b0 <HAL_RCC_OscConfig+0x4ac>)
 80036c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 80ad 	beq.w	8003830 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036d6:	4b36      	ldr	r3, [pc, #216]	@ (80037b0 <HAL_RCC_OscConfig+0x4ac>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 030c 	and.w	r3, r3, #12
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d060      	beq.n	80037a4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d145      	bne.n	8003776 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ea:	4b33      	ldr	r3, [pc, #204]	@ (80037b8 <HAL_RCC_OscConfig+0x4b4>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f0:	f7fe fc0c 	bl	8001f0c <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f8:	f7fe fc08 	bl	8001f0c <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e093      	b.n	8003832 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370a:	4b29      	ldr	r3, [pc, #164]	@ (80037b0 <HAL_RCC_OscConfig+0x4ac>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1f0      	bne.n	80036f8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69da      	ldr	r2, [r3, #28]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003724:	019b      	lsls	r3, r3, #6
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372c:	085b      	lsrs	r3, r3, #1
 800372e:	3b01      	subs	r3, #1
 8003730:	041b      	lsls	r3, r3, #16
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003738:	061b      	lsls	r3, r3, #24
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003740:	071b      	lsls	r3, r3, #28
 8003742:	491b      	ldr	r1, [pc, #108]	@ (80037b0 <HAL_RCC_OscConfig+0x4ac>)
 8003744:	4313      	orrs	r3, r2
 8003746:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003748:	4b1b      	ldr	r3, [pc, #108]	@ (80037b8 <HAL_RCC_OscConfig+0x4b4>)
 800374a:	2201      	movs	r2, #1
 800374c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374e:	f7fe fbdd 	bl	8001f0c <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003756:	f7fe fbd9 	bl	8001f0c <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e064      	b.n	8003832 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003768:	4b11      	ldr	r3, [pc, #68]	@ (80037b0 <HAL_RCC_OscConfig+0x4ac>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0f0      	beq.n	8003756 <HAL_RCC_OscConfig+0x452>
 8003774:	e05c      	b.n	8003830 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003776:	4b10      	ldr	r3, [pc, #64]	@ (80037b8 <HAL_RCC_OscConfig+0x4b4>)
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377c:	f7fe fbc6 	bl	8001f0c <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003784:	f7fe fbc2 	bl	8001f0c <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e04d      	b.n	8003832 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003796:	4b06      	ldr	r3, [pc, #24]	@ (80037b0 <HAL_RCC_OscConfig+0x4ac>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1f0      	bne.n	8003784 <HAL_RCC_OscConfig+0x480>
 80037a2:	e045      	b.n	8003830 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d107      	bne.n	80037bc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e040      	b.n	8003832 <HAL_RCC_OscConfig+0x52e>
 80037b0:	40023800 	.word	0x40023800
 80037b4:	40007000 	.word	0x40007000
 80037b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037bc:	4b1f      	ldr	r3, [pc, #124]	@ (800383c <HAL_RCC_OscConfig+0x538>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d030      	beq.n	800382c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d129      	bne.n	800382c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d122      	bne.n	800382c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80037ec:	4013      	ands	r3, r2
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d119      	bne.n	800382c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003802:	085b      	lsrs	r3, r3, #1
 8003804:	3b01      	subs	r3, #1
 8003806:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003808:	429a      	cmp	r2, r3
 800380a:	d10f      	bne.n	800382c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003816:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003818:	429a      	cmp	r2, r3
 800381a:	d107      	bne.n	800382c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003826:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003828:	429a      	cmp	r2, r3
 800382a:	d001      	beq.n	8003830 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40023800 	.word	0x40023800

08003840 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e07b      	b.n	800394a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003856:	2b00      	cmp	r3, #0
 8003858:	d108      	bne.n	800386c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003862:	d009      	beq.n	8003878 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	61da      	str	r2, [r3, #28]
 800386a:	e005      	b.n	8003878 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d106      	bne.n	8003898 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7fe f890 	bl	80019b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038e8:	431a      	orrs	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038fc:	ea42 0103 	orr.w	r1, r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003904:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	0c1b      	lsrs	r3, r3, #16
 8003916:	f003 0104 	and.w	r1, r3, #4
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391e:	f003 0210 	and.w	r2, r3, #16
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	69da      	ldr	r2, [r3, #28]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003938:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b088      	sub	sp, #32
 8003956:	af00      	add	r7, sp, #0
 8003958:	60f8      	str	r0, [r7, #12]
 800395a:	60b9      	str	r1, [r7, #8]
 800395c:	603b      	str	r3, [r7, #0]
 800395e:	4613      	mov	r3, r2
 8003960:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003962:	f7fe fad3 	bl	8001f0c <HAL_GetTick>
 8003966:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003968:	88fb      	ldrh	r3, [r7, #6]
 800396a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b01      	cmp	r3, #1
 8003976:	d001      	beq.n	800397c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003978:	2302      	movs	r3, #2
 800397a:	e12a      	b.n	8003bd2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_SPI_Transmit+0x36>
 8003982:	88fb      	ldrh	r3, [r7, #6]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e122      	b.n	8003bd2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_SPI_Transmit+0x48>
 8003996:	2302      	movs	r3, #2
 8003998:	e11b      	b.n	8003bd2 <HAL_SPI_Transmit+0x280>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2203      	movs	r2, #3
 80039a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	88fa      	ldrh	r2, [r7, #6]
 80039ba:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	88fa      	ldrh	r2, [r7, #6]
 80039c0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039e8:	d10f      	bne.n	8003a0a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a14:	2b40      	cmp	r3, #64	@ 0x40
 8003a16:	d007      	beq.n	8003a28 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a30:	d152      	bne.n	8003ad8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_SPI_Transmit+0xee>
 8003a3a:	8b7b      	ldrh	r3, [r7, #26]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d145      	bne.n	8003acc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a44:	881a      	ldrh	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a50:	1c9a      	adds	r2, r3, #2
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a64:	e032      	b.n	8003acc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d112      	bne.n	8003a9a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a78:	881a      	ldrh	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a84:	1c9a      	adds	r2, r3, #2
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003a98:	e018      	b.n	8003acc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a9a:	f7fe fa37 	bl	8001f0c <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d803      	bhi.n	8003ab2 <HAL_SPI_Transmit+0x160>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab0:	d102      	bne.n	8003ab8 <HAL_SPI_Transmit+0x166>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d109      	bne.n	8003acc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e082      	b.n	8003bd2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1c7      	bne.n	8003a66 <HAL_SPI_Transmit+0x114>
 8003ad6:	e053      	b.n	8003b80 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <HAL_SPI_Transmit+0x194>
 8003ae0:	8b7b      	ldrh	r3, [r7, #26]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d147      	bne.n	8003b76 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	330c      	adds	r3, #12
 8003af0:	7812      	ldrb	r2, [r2, #0]
 8003af2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b0c:	e033      	b.n	8003b76 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d113      	bne.n	8003b44 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	330c      	adds	r3, #12
 8003b26:	7812      	ldrb	r2, [r2, #0]
 8003b28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003b42:	e018      	b.n	8003b76 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b44:	f7fe f9e2 	bl	8001f0c <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d803      	bhi.n	8003b5c <HAL_SPI_Transmit+0x20a>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5a:	d102      	bne.n	8003b62 <HAL_SPI_Transmit+0x210>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d109      	bne.n	8003b76 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e02d      	b.n	8003bd2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1c6      	bne.n	8003b0e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b80:	69fa      	ldr	r2, [r7, #28]
 8003b82:	6839      	ldr	r1, [r7, #0]
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 fbe7 	bl	8004358 <SPI_EndRxTxTransaction>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d002      	beq.n	8003b96 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10a      	bne.n	8003bb4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	617b      	str	r3, [r7, #20]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	617b      	str	r3, [r7, #20]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e000      	b.n	8003bd2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
  }
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3720      	adds	r7, #32
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b088      	sub	sp, #32
 8003bde:	af02      	add	r7, sp, #8
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	603b      	str	r3, [r7, #0]
 8003be6:	4613      	mov	r3, r2
 8003be8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d001      	beq.n	8003bfa <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	e104      	b.n	8003e04 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c02:	d112      	bne.n	8003c2a <HAL_SPI_Receive+0x50>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10e      	bne.n	8003c2a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2204      	movs	r2, #4
 8003c10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c14:	88fa      	ldrh	r2, [r7, #6]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	68b9      	ldr	r1, [r7, #8]
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 f8f3 	bl	8003e0c <HAL_SPI_TransmitReceive>
 8003c26:	4603      	mov	r3, r0
 8003c28:	e0ec      	b.n	8003e04 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c2a:	f7fe f96f 	bl	8001f0c <HAL_GetTick>
 8003c2e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <HAL_SPI_Receive+0x62>
 8003c36:	88fb      	ldrh	r3, [r7, #6]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e0e1      	b.n	8003e04 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d101      	bne.n	8003c4e <HAL_SPI_Receive+0x74>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	e0da      	b.n	8003e04 <HAL_SPI_Receive+0x22a>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2204      	movs	r2, #4
 8003c5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	88fa      	ldrh	r2, [r7, #6]
 8003c6e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	88fa      	ldrh	r2, [r7, #6]
 8003c74:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c9c:	d10f      	bne.n	8003cbe <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003cbc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc8:	2b40      	cmp	r3, #64	@ 0x40
 8003cca:	d007      	beq.n	8003cdc <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cda:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d170      	bne.n	8003dc6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003ce4:	e035      	b.n	8003d52 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d115      	bne.n	8003d20 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f103 020c 	add.w	r2, r3, #12
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d00:	7812      	ldrb	r2, [r2, #0]
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d1e:	e018      	b.n	8003d52 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d20:	f7fe f8f4 	bl	8001f0c <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d803      	bhi.n	8003d38 <HAL_SPI_Receive+0x15e>
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d36:	d102      	bne.n	8003d3e <HAL_SPI_Receive+0x164>
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d109      	bne.n	8003d52 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e058      	b.n	8003e04 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1c4      	bne.n	8003ce6 <HAL_SPI_Receive+0x10c>
 8003d5c:	e038      	b.n	8003dd0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d113      	bne.n	8003d94 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d76:	b292      	uxth	r2, r2
 8003d78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7e:	1c9a      	adds	r2, r3, #2
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d92:	e018      	b.n	8003dc6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d94:	f7fe f8ba 	bl	8001f0c <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d803      	bhi.n	8003dac <HAL_SPI_Receive+0x1d2>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003daa:	d102      	bne.n	8003db2 <HAL_SPI_Receive+0x1d8>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d109      	bne.n	8003dc6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e01e      	b.n	8003e04 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1c6      	bne.n	8003d5e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	6839      	ldr	r1, [r7, #0]
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 fa59 	bl	800428c <SPI_EndRxTransaction>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2220      	movs	r2, #32
 8003de4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e000      	b.n	8003e04 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003e02:	2300      	movs	r3, #0
  }
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3718      	adds	r7, #24
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b08a      	sub	sp, #40	@ 0x28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
 8003e18:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e1e:	f7fe f875 	bl	8001f0c <HAL_GetTick>
 8003e22:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e2a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003e32:	887b      	ldrh	r3, [r7, #2]
 8003e34:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e36:	7ffb      	ldrb	r3, [r7, #31]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d00c      	beq.n	8003e56 <HAL_SPI_TransmitReceive+0x4a>
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e42:	d106      	bne.n	8003e52 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d102      	bne.n	8003e52 <HAL_SPI_TransmitReceive+0x46>
 8003e4c:	7ffb      	ldrb	r3, [r7, #31]
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d001      	beq.n	8003e56 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003e52:	2302      	movs	r3, #2
 8003e54:	e17f      	b.n	8004156 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d005      	beq.n	8003e68 <HAL_SPI_TransmitReceive+0x5c>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <HAL_SPI_TransmitReceive+0x5c>
 8003e62:	887b      	ldrh	r3, [r7, #2]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e174      	b.n	8004156 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d101      	bne.n	8003e7a <HAL_SPI_TransmitReceive+0x6e>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e16d      	b.n	8004156 <HAL_SPI_TransmitReceive+0x34a>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d003      	beq.n	8003e96 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2205      	movs	r2, #5
 8003e92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	887a      	ldrh	r2, [r7, #2]
 8003ea6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	887a      	ldrh	r2, [r7, #2]
 8003eac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	887a      	ldrh	r2, [r7, #2]
 8003eb8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	887a      	ldrh	r2, [r7, #2]
 8003ebe:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ed6:	2b40      	cmp	r3, #64	@ 0x40
 8003ed8:	d007      	beq.n	8003eea <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ee8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ef2:	d17e      	bne.n	8003ff2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <HAL_SPI_TransmitReceive+0xf6>
 8003efc:	8afb      	ldrh	r3, [r7, #22]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d16c      	bne.n	8003fdc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f06:	881a      	ldrh	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f12:	1c9a      	adds	r2, r3, #2
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f26:	e059      	b.n	8003fdc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d11b      	bne.n	8003f6e <HAL_SPI_TransmitReceive+0x162>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d016      	beq.n	8003f6e <HAL_SPI_TransmitReceive+0x162>
 8003f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d113      	bne.n	8003f6e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4a:	881a      	ldrh	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f56:	1c9a      	adds	r2, r3, #2
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d119      	bne.n	8003fb0 <HAL_SPI_TransmitReceive+0x1a4>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d014      	beq.n	8003fb0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68da      	ldr	r2, [r3, #12]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f90:	b292      	uxth	r2, r2
 8003f92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f98:	1c9a      	adds	r2, r3, #2
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fac:	2301      	movs	r3, #1
 8003fae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003fb0:	f7fd ffac 	bl	8001f0c <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d80d      	bhi.n	8003fdc <HAL_SPI_TransmitReceive+0x1d0>
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc6:	d009      	beq.n	8003fdc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e0bc      	b.n	8004156 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1a0      	bne.n	8003f28 <HAL_SPI_TransmitReceive+0x11c>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d19b      	bne.n	8003f28 <HAL_SPI_TransmitReceive+0x11c>
 8003ff0:	e082      	b.n	80040f8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <HAL_SPI_TransmitReceive+0x1f4>
 8003ffa:	8afb      	ldrh	r3, [r7, #22]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d171      	bne.n	80040e4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	330c      	adds	r3, #12
 800400a:	7812      	ldrb	r2, [r2, #0]
 800400c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004012:	1c5a      	adds	r2, r3, #1
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800401c:	b29b      	uxth	r3, r3
 800401e:	3b01      	subs	r3, #1
 8004020:	b29a      	uxth	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004026:	e05d      	b.n	80040e4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b02      	cmp	r3, #2
 8004034:	d11c      	bne.n	8004070 <HAL_SPI_TransmitReceive+0x264>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d017      	beq.n	8004070 <HAL_SPI_TransmitReceive+0x264>
 8004040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004042:	2b01      	cmp	r3, #1
 8004044:	d114      	bne.n	8004070 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	330c      	adds	r3, #12
 8004050:	7812      	ldrb	r2, [r2, #0]
 8004052:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b01      	cmp	r3, #1
 800407c:	d119      	bne.n	80040b2 <HAL_SPI_TransmitReceive+0x2a6>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004082:	b29b      	uxth	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	d014      	beq.n	80040b2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409a:	1c5a      	adds	r2, r3, #1
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	3b01      	subs	r3, #1
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040ae:	2301      	movs	r3, #1
 80040b0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040b2:	f7fd ff2b 	bl	8001f0c <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040be:	429a      	cmp	r2, r3
 80040c0:	d803      	bhi.n	80040ca <HAL_SPI_TransmitReceive+0x2be>
 80040c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c8:	d102      	bne.n	80040d0 <HAL_SPI_TransmitReceive+0x2c4>
 80040ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d109      	bne.n	80040e4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e038      	b.n	8004156 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d19c      	bne.n	8004028 <HAL_SPI_TransmitReceive+0x21c>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d197      	bne.n	8004028 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040f8:	6a3a      	ldr	r2, [r7, #32]
 80040fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 f92b 	bl	8004358 <SPI_EndRxTxTransaction>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d008      	beq.n	800411a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2220      	movs	r2, #32
 800410c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e01d      	b.n	8004156 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10a      	bne.n	8004138 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004122:	2300      	movs	r3, #0
 8004124:	613b      	str	r3, [r7, #16]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	613b      	str	r3, [r7, #16]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	613b      	str	r3, [r7, #16]
 8004136:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e000      	b.n	8004156 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004154:	2300      	movs	r3, #0
  }
}
 8004156:	4618      	mov	r0, r3
 8004158:	3728      	adds	r7, #40	@ 0x28
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800416c:	b2db      	uxtb	r3, r3
}
 800416e:	4618      	mov	r0, r3
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
	...

0800417c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	603b      	str	r3, [r7, #0]
 8004188:	4613      	mov	r3, r2
 800418a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800418c:	f7fd febe 	bl	8001f0c <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004194:	1a9b      	subs	r3, r3, r2
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	4413      	add	r3, r2
 800419a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800419c:	f7fd feb6 	bl	8001f0c <HAL_GetTick>
 80041a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041a2:	4b39      	ldr	r3, [pc, #228]	@ (8004288 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	015b      	lsls	r3, r3, #5
 80041a8:	0d1b      	lsrs	r3, r3, #20
 80041aa:	69fa      	ldr	r2, [r7, #28]
 80041ac:	fb02 f303 	mul.w	r3, r2, r3
 80041b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041b2:	e054      	b.n	800425e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ba:	d050      	beq.n	800425e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041bc:	f7fd fea6 	bl	8001f0c <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	69fa      	ldr	r2, [r7, #28]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d902      	bls.n	80041d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d13d      	bne.n	800424e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80041e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041ea:	d111      	bne.n	8004210 <SPI_WaitFlagStateUntilTimeout+0x94>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041f4:	d004      	beq.n	8004200 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041fe:	d107      	bne.n	8004210 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800420e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004214:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004218:	d10f      	bne.n	800423a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004238:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e017      	b.n	800427e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	3b01      	subs	r3, #1
 800425c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	4013      	ands	r3, r2
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	429a      	cmp	r2, r3
 800426c:	bf0c      	ite	eq
 800426e:	2301      	moveq	r3, #1
 8004270:	2300      	movne	r3, #0
 8004272:	b2db      	uxtb	r3, r3
 8004274:	461a      	mov	r2, r3
 8004276:	79fb      	ldrb	r3, [r7, #7]
 8004278:	429a      	cmp	r2, r3
 800427a:	d19b      	bne.n	80041b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3720      	adds	r7, #32
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	20000000 	.word	0x20000000

0800428c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af02      	add	r7, sp, #8
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042a0:	d111      	bne.n	80042c6 <SPI_EndRxTransaction+0x3a>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042aa:	d004      	beq.n	80042b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042b4:	d107      	bne.n	80042c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042c4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042ce:	d12a      	bne.n	8004326 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042d8:	d012      	beq.n	8004300 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	2200      	movs	r2, #0
 80042e2:	2180      	movs	r1, #128	@ 0x80
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f7ff ff49 	bl	800417c <SPI_WaitFlagStateUntilTimeout>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d02d      	beq.n	800434c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f4:	f043 0220 	orr.w	r2, r3, #32
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e026      	b.n	800434e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2200      	movs	r2, #0
 8004308:	2101      	movs	r1, #1
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f7ff ff36 	bl	800417c <SPI_WaitFlagStateUntilTimeout>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d01a      	beq.n	800434c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800431a:	f043 0220 	orr.w	r2, r3, #32
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e013      	b.n	800434e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2200      	movs	r2, #0
 800432e:	2101      	movs	r1, #1
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f7ff ff23 	bl	800417c <SPI_WaitFlagStateUntilTimeout>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d007      	beq.n	800434c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004340:	f043 0220 	orr.w	r2, r3, #32
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e000      	b.n	800434e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
	...

08004358 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b088      	sub	sp, #32
 800435c:	af02      	add	r7, sp, #8
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2201      	movs	r2, #1
 800436c:	2102      	movs	r1, #2
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f7ff ff04 	bl	800417c <SPI_WaitFlagStateUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d007      	beq.n	800438a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800437e:	f043 0220 	orr.w	r2, r3, #32
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e032      	b.n	80043f0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800438a:	4b1b      	ldr	r3, [pc, #108]	@ (80043f8 <SPI_EndRxTxTransaction+0xa0>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a1b      	ldr	r2, [pc, #108]	@ (80043fc <SPI_EndRxTxTransaction+0xa4>)
 8004390:	fba2 2303 	umull	r2, r3, r2, r3
 8004394:	0d5b      	lsrs	r3, r3, #21
 8004396:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800439a:	fb02 f303 	mul.w	r3, r2, r3
 800439e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043a8:	d112      	bne.n	80043d0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	2200      	movs	r2, #0
 80043b2:	2180      	movs	r1, #128	@ 0x80
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f7ff fee1 	bl	800417c <SPI_WaitFlagStateUntilTimeout>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d016      	beq.n	80043ee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043c4:	f043 0220 	orr.w	r2, r3, #32
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e00f      	b.n	80043f0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	3b01      	subs	r3, #1
 80043da:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043e6:	2b80      	cmp	r3, #128	@ 0x80
 80043e8:	d0f2      	beq.n	80043d0 <SPI_EndRxTxTransaction+0x78>
 80043ea:	e000      	b.n	80043ee <SPI_EndRxTxTransaction+0x96>
        break;
 80043ec:	bf00      	nop
  }

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3718      	adds	r7, #24
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	20000000 	.word	0x20000000
 80043fc:	165e9f81 	.word	0x165e9f81

08004400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e041      	b.n	8004496 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d106      	bne.n	800442c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f839 	bl	800449e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3304      	adds	r3, #4
 800443c:	4619      	mov	r1, r3
 800443e:	4610      	mov	r0, r2
 8004440:	f000 f9c0 	bl	80047c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
	...

080044b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d001      	beq.n	80044cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e04e      	b.n	800456a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a23      	ldr	r2, [pc, #140]	@ (8004578 <HAL_TIM_Base_Start_IT+0xc4>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d022      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x80>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044f6:	d01d      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x80>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a1f      	ldr	r2, [pc, #124]	@ (800457c <HAL_TIM_Base_Start_IT+0xc8>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d018      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x80>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a1e      	ldr	r2, [pc, #120]	@ (8004580 <HAL_TIM_Base_Start_IT+0xcc>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d013      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x80>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a1c      	ldr	r2, [pc, #112]	@ (8004584 <HAL_TIM_Base_Start_IT+0xd0>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d00e      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x80>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a1b      	ldr	r2, [pc, #108]	@ (8004588 <HAL_TIM_Base_Start_IT+0xd4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d009      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x80>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a19      	ldr	r2, [pc, #100]	@ (800458c <HAL_TIM_Base_Start_IT+0xd8>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d004      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x80>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a18      	ldr	r2, [pc, #96]	@ (8004590 <HAL_TIM_Base_Start_IT+0xdc>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d111      	bne.n	8004558 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2b06      	cmp	r3, #6
 8004544:	d010      	beq.n	8004568 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f042 0201 	orr.w	r2, r2, #1
 8004554:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004556:	e007      	b.n	8004568 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0201 	orr.w	r2, r2, #1
 8004566:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40010000 	.word	0x40010000
 800457c:	40000400 	.word	0x40000400
 8004580:	40000800 	.word	0x40000800
 8004584:	40000c00 	.word	0x40000c00
 8004588:	40010400 	.word	0x40010400
 800458c:	40014000 	.word	0x40014000
 8004590:	40001800 	.word	0x40001800

08004594 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d020      	beq.n	80045f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d01b      	beq.n	80045f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f06f 0202 	mvn.w	r2, #2
 80045c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f8d2 	bl	8004788 <HAL_TIM_IC_CaptureCallback>
 80045e4:	e005      	b.n	80045f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f8c4 	bl	8004774 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f8d5 	bl	800479c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d020      	beq.n	8004644 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d01b      	beq.n	8004644 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f06f 0204 	mvn.w	r2, #4
 8004614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2202      	movs	r2, #2
 800461a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f8ac 	bl	8004788 <HAL_TIM_IC_CaptureCallback>
 8004630:	e005      	b.n	800463e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f89e 	bl	8004774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f8af 	bl	800479c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d020      	beq.n	8004690 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f003 0308 	and.w	r3, r3, #8
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01b      	beq.n	8004690 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f06f 0208 	mvn.w	r2, #8
 8004660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2204      	movs	r2, #4
 8004666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f886 	bl	8004788 <HAL_TIM_IC_CaptureCallback>
 800467c:	e005      	b.n	800468a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f878 	bl	8004774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f889 	bl	800479c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f003 0310 	and.w	r3, r3, #16
 8004696:	2b00      	cmp	r3, #0
 8004698:	d020      	beq.n	80046dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f003 0310 	and.w	r3, r3, #16
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d01b      	beq.n	80046dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f06f 0210 	mvn.w	r2, #16
 80046ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2208      	movs	r2, #8
 80046b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f860 	bl	8004788 <HAL_TIM_IC_CaptureCallback>
 80046c8:	e005      	b.n	80046d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f852 	bl	8004774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f863 	bl	800479c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00c      	beq.n	8004700 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d007      	beq.n	8004700 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f06f 0201 	mvn.w	r2, #1
 80046f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7fc fd36 	bl	800116c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00c      	beq.n	8004724 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004710:	2b00      	cmp	r3, #0
 8004712:	d007      	beq.n	8004724 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800471c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f906 	bl	8004930 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00c      	beq.n	8004748 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004734:	2b00      	cmp	r3, #0
 8004736:	d007      	beq.n	8004748 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f834 	bl	80047b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00c      	beq.n	800476c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f003 0320 	and.w	r3, r3, #32
 8004758:	2b00      	cmp	r3, #0
 800475a:	d007      	beq.n	800476c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f06f 0220 	mvn.w	r2, #32
 8004764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f8d8 	bl	800491c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800476c:	bf00      	nop
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a46      	ldr	r2, [pc, #280]	@ (80048f0 <TIM_Base_SetConfig+0x12c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d013      	beq.n	8004804 <TIM_Base_SetConfig+0x40>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047e2:	d00f      	beq.n	8004804 <TIM_Base_SetConfig+0x40>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a43      	ldr	r2, [pc, #268]	@ (80048f4 <TIM_Base_SetConfig+0x130>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d00b      	beq.n	8004804 <TIM_Base_SetConfig+0x40>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a42      	ldr	r2, [pc, #264]	@ (80048f8 <TIM_Base_SetConfig+0x134>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d007      	beq.n	8004804 <TIM_Base_SetConfig+0x40>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a41      	ldr	r2, [pc, #260]	@ (80048fc <TIM_Base_SetConfig+0x138>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d003      	beq.n	8004804 <TIM_Base_SetConfig+0x40>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a40      	ldr	r2, [pc, #256]	@ (8004900 <TIM_Base_SetConfig+0x13c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d108      	bne.n	8004816 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800480a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a35      	ldr	r2, [pc, #212]	@ (80048f0 <TIM_Base_SetConfig+0x12c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d02b      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004824:	d027      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a32      	ldr	r2, [pc, #200]	@ (80048f4 <TIM_Base_SetConfig+0x130>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d023      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a31      	ldr	r2, [pc, #196]	@ (80048f8 <TIM_Base_SetConfig+0x134>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d01f      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a30      	ldr	r2, [pc, #192]	@ (80048fc <TIM_Base_SetConfig+0x138>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d01b      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a2f      	ldr	r2, [pc, #188]	@ (8004900 <TIM_Base_SetConfig+0x13c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d017      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a2e      	ldr	r2, [pc, #184]	@ (8004904 <TIM_Base_SetConfig+0x140>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d013      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a2d      	ldr	r2, [pc, #180]	@ (8004908 <TIM_Base_SetConfig+0x144>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00f      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a2c      	ldr	r2, [pc, #176]	@ (800490c <TIM_Base_SetConfig+0x148>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00b      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a2b      	ldr	r2, [pc, #172]	@ (8004910 <TIM_Base_SetConfig+0x14c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d007      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a2a      	ldr	r2, [pc, #168]	@ (8004914 <TIM_Base_SetConfig+0x150>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d003      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a29      	ldr	r2, [pc, #164]	@ (8004918 <TIM_Base_SetConfig+0x154>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d108      	bne.n	8004888 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800487c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4313      	orrs	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a10      	ldr	r2, [pc, #64]	@ (80048f0 <TIM_Base_SetConfig+0x12c>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d003      	beq.n	80048bc <TIM_Base_SetConfig+0xf8>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a12      	ldr	r2, [pc, #72]	@ (8004900 <TIM_Base_SetConfig+0x13c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d103      	bne.n	80048c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	691a      	ldr	r2, [r3, #16]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d105      	bne.n	80048e2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f023 0201 	bic.w	r2, r3, #1
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	611a      	str	r2, [r3, #16]
  }
}
 80048e2:	bf00      	nop
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	40010000 	.word	0x40010000
 80048f4:	40000400 	.word	0x40000400
 80048f8:	40000800 	.word	0x40000800
 80048fc:	40000c00 	.word	0x40000c00
 8004900:	40010400 	.word	0x40010400
 8004904:	40014000 	.word	0x40014000
 8004908:	40014400 	.word	0x40014400
 800490c:	40014800 	.word	0x40014800
 8004910:	40001800 	.word	0x40001800
 8004914:	40001c00 	.word	0x40001c00
 8004918:	40002000 	.word	0x40002000

0800491c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e042      	b.n	80049dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d106      	bne.n	8004970 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fd f8d2 	bl	8001b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2224      	movs	r2, #36	@ 0x24
 8004974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004986:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fb83 	bl	8005094 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800499c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	695a      	ldr	r2, [r3, #20]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68da      	ldr	r2, [r3, #12]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3708      	adds	r7, #8
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b08a      	sub	sp, #40	@ 0x28
 80049e8:	af02      	add	r7, sp, #8
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	603b      	str	r3, [r7, #0]
 80049f0:	4613      	mov	r3, r2
 80049f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b20      	cmp	r3, #32
 8004a02:	d175      	bne.n	8004af0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <HAL_UART_Transmit+0x2c>
 8004a0a:	88fb      	ldrh	r3, [r7, #6]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e06e      	b.n	8004af2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2221      	movs	r2, #33	@ 0x21
 8004a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a22:	f7fd fa73 	bl	8001f0c <HAL_GetTick>
 8004a26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	88fa      	ldrh	r2, [r7, #6]
 8004a2c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	88fa      	ldrh	r2, [r7, #6]
 8004a32:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a3c:	d108      	bne.n	8004a50 <HAL_UART_Transmit+0x6c>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d104      	bne.n	8004a50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004a46:	2300      	movs	r3, #0
 8004a48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	61bb      	str	r3, [r7, #24]
 8004a4e:	e003      	b.n	8004a58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a54:	2300      	movs	r3, #0
 8004a56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a58:	e02e      	b.n	8004ab8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2200      	movs	r2, #0
 8004a62:	2180      	movs	r1, #128	@ 0x80
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 f995 	bl	8004d94 <UART_WaitOnFlagUntilTimeout>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e03a      	b.n	8004af2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10b      	bne.n	8004a9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	881b      	ldrh	r3, [r3, #0]
 8004a86:	461a      	mov	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	3302      	adds	r3, #2
 8004a96:	61bb      	str	r3, [r7, #24]
 8004a98:	e007      	b.n	8004aaa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	781a      	ldrb	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1cb      	bne.n	8004a5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	2140      	movs	r1, #64	@ 0x40
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 f961 	bl	8004d94 <UART_WaitOnFlagUntilTimeout>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d005      	beq.n	8004ae4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e006      	b.n	8004af2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004aec:	2300      	movs	r3, #0
 8004aee:	e000      	b.n	8004af2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004af0:	2302      	movs	r3, #2
  }
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3720      	adds	r7, #32
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b084      	sub	sp, #16
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	60f8      	str	r0, [r7, #12]
 8004b02:	60b9      	str	r1, [r7, #8]
 8004b04:	4613      	mov	r3, r2
 8004b06:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	d112      	bne.n	8004b3a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <HAL_UART_Receive_DMA+0x26>
 8004b1a:	88fb      	ldrh	r3, [r7, #6]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e00b      	b.n	8004b3c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004b2a:	88fb      	ldrh	r3, [r7, #6]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	68b9      	ldr	r1, [r7, #8]
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 f989 	bl	8004e48 <UART_Start_Receive_DMA>
 8004b36:	4603      	mov	r3, r0
 8004b38:	e000      	b.n	8004b3c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004b3a:	2302      	movs	r3, #2
  }
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b09c      	sub	sp, #112	@ 0x70
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d172      	bne.n	8004c9a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004bb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	330c      	adds	r3, #12
 8004bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bc4:	e853 3f00 	ldrex	r3, [r3]
 8004bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004bca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	330c      	adds	r3, #12
 8004bd8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004bda:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004bdc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bde:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004be0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004be2:	e841 2300 	strex	r3, r2, [r1]
 8004be6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004be8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1e5      	bne.n	8004bba <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	3314      	adds	r3, #20
 8004bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf8:	e853 3f00 	ldrex	r3, [r3]
 8004bfc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c00:	f023 0301 	bic.w	r3, r3, #1
 8004c04:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	3314      	adds	r3, #20
 8004c0c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004c0e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c10:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c16:	e841 2300 	strex	r3, r2, [r1]
 8004c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1e5      	bne.n	8004bee <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	3314      	adds	r3, #20
 8004c28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2c:	e853 3f00 	ldrex	r3, [r3]
 8004c30:	623b      	str	r3, [r7, #32]
   return(result);
 8004c32:	6a3b      	ldr	r3, [r7, #32]
 8004c34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c38:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	3314      	adds	r3, #20
 8004c40:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004c42:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c4a:	e841 2300 	strex	r3, r2, [r1]
 8004c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1e5      	bne.n	8004c22 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004c56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c58:	2220      	movs	r2, #32
 8004c5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d119      	bne.n	8004c9a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	330c      	adds	r3, #12
 8004c6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	e853 3f00 	ldrex	r3, [r3]
 8004c74:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f023 0310 	bic.w	r3, r3, #16
 8004c7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	330c      	adds	r3, #12
 8004c84:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004c86:	61fa      	str	r2, [r7, #28]
 8004c88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8a:	69b9      	ldr	r1, [r7, #24]
 8004c8c:	69fa      	ldr	r2, [r7, #28]
 8004c8e:	e841 2300 	strex	r3, r2, [r1]
 8004c92:	617b      	str	r3, [r7, #20]
   return(result);
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1e5      	bne.n	8004c66 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ca0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d106      	bne.n	8004cb6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ca8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004caa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004cac:	4619      	mov	r1, r3
 8004cae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004cb0:	f7ff ff66 	bl	8004b80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004cb4:	e002      	b.n	8004cbc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004cb6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004cb8:	f7ff ff44 	bl	8004b44 <HAL_UART_RxCpltCallback>
}
 8004cbc:	bf00      	nop
 8004cbe:	3770      	adds	r7, #112	@ 0x70
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d108      	bne.n	8004cf2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ce4:	085b      	lsrs	r3, r3, #1
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	4619      	mov	r1, r3
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f7ff ff48 	bl	8004b80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004cf0:	e002      	b.n	8004cf8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f7ff ff30 	bl	8004b58 <HAL_UART_RxHalfCpltCallback>
}
 8004cf8:	bf00      	nop
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d10:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d1c:	2b80      	cmp	r3, #128	@ 0x80
 8004d1e:	bf0c      	ite	eq
 8004d20:	2301      	moveq	r3, #1
 8004d22:	2300      	movne	r3, #0
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b21      	cmp	r3, #33	@ 0x21
 8004d32:	d108      	bne.n	8004d46 <UART_DMAError+0x46>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d005      	beq.n	8004d46 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004d40:	68b8      	ldr	r0, [r7, #8]
 8004d42:	f000 f91b 	bl	8004f7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d50:	2b40      	cmp	r3, #64	@ 0x40
 8004d52:	bf0c      	ite	eq
 8004d54:	2301      	moveq	r3, #1
 8004d56:	2300      	movne	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b22      	cmp	r3, #34	@ 0x22
 8004d66:	d108      	bne.n	8004d7a <UART_DMAError+0x7a>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d005      	beq.n	8004d7a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2200      	movs	r2, #0
 8004d72:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004d74:	68b8      	ldr	r0, [r7, #8]
 8004d76:	f000 f929 	bl	8004fcc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d7e:	f043 0210 	orr.w	r2, r3, #16
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d86:	68b8      	ldr	r0, [r7, #8]
 8004d88:	f7ff fef0 	bl	8004b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d8c:	bf00      	nop
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	603b      	str	r3, [r7, #0]
 8004da0:	4613      	mov	r3, r2
 8004da2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004da4:	e03b      	b.n	8004e1e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dac:	d037      	beq.n	8004e1e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dae:	f7fd f8ad 	bl	8001f0c <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	6a3a      	ldr	r2, [r7, #32]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d302      	bcc.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e03a      	b.n	8004e3e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f003 0304 	and.w	r3, r3, #4
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d023      	beq.n	8004e1e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2b80      	cmp	r3, #128	@ 0x80
 8004dda:	d020      	beq.n	8004e1e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	2b40      	cmp	r3, #64	@ 0x40
 8004de0:	d01d      	beq.n	8004e1e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0308 	and.w	r3, r3, #8
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d116      	bne.n	8004e1e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004df0:	2300      	movs	r3, #0
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f000 f8e0 	bl	8004fcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2208      	movs	r2, #8
 8004e10:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e00f      	b.n	8004e3e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	4013      	ands	r3, r2
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	bf0c      	ite	eq
 8004e2e:	2301      	moveq	r3, #1
 8004e30:	2300      	movne	r3, #0
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	461a      	mov	r2, r3
 8004e36:	79fb      	ldrb	r3, [r7, #7]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d0b4      	beq.n	8004da6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3718      	adds	r7, #24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
	...

08004e48 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b098      	sub	sp, #96	@ 0x60
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	4613      	mov	r3, r2
 8004e54:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	88fa      	ldrh	r2, [r7, #6]
 8004e60:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2222      	movs	r2, #34	@ 0x22
 8004e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e74:	4a3e      	ldr	r2, [pc, #248]	@ (8004f70 <UART_Start_Receive_DMA+0x128>)
 8004e76:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7c:	4a3d      	ldr	r2, [pc, #244]	@ (8004f74 <UART_Start_Receive_DMA+0x12c>)
 8004e7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e84:	4a3c      	ldr	r2, [pc, #240]	@ (8004f78 <UART_Start_Receive_DMA+0x130>)
 8004e86:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004e90:	f107 0308 	add.w	r3, r7, #8
 8004e94:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	88fb      	ldrh	r3, [r7, #6]
 8004ea8:	f7fd f9f0 	bl	800228c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004eac:	2300      	movs	r3, #0
 8004eae:	613b      	str	r3, [r7, #16]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	613b      	str	r3, [r7, #16]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	613b      	str	r3, [r7, #16]
 8004ec0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d019      	beq.n	8004efe <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	330c      	adds	r3, #12
 8004ed0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ed4:	e853 3f00 	ldrex	r3, [r3]
 8004ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004edc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ee0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	330c      	adds	r3, #12
 8004ee8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004eea:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004eec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eee:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004ef0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ef2:	e841 2300 	strex	r3, r2, [r1]
 8004ef6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004ef8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1e5      	bne.n	8004eca <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	3314      	adds	r3, #20
 8004f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f08:	e853 3f00 	ldrex	r3, [r3]
 8004f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f10:	f043 0301 	orr.w	r3, r3, #1
 8004f14:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	3314      	adds	r3, #20
 8004f1c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004f1e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004f20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f22:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004f24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f26:	e841 2300 	strex	r3, r2, [r1]
 8004f2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1e5      	bne.n	8004efe <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3314      	adds	r3, #20
 8004f38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	e853 3f00 	ldrex	r3, [r3]
 8004f40:	617b      	str	r3, [r7, #20]
   return(result);
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f48:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	3314      	adds	r3, #20
 8004f50:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004f52:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f56:	6a39      	ldr	r1, [r7, #32]
 8004f58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f5a:	e841 2300 	strex	r3, r2, [r1]
 8004f5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1e5      	bne.n	8004f32 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3760      	adds	r7, #96	@ 0x60
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	08004b99 	.word	0x08004b99
 8004f74:	08004cc5 	.word	0x08004cc5
 8004f78:	08004d01 	.word	0x08004d01

08004f7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b089      	sub	sp, #36	@ 0x24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	330c      	adds	r3, #12
 8004f8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	e853 3f00 	ldrex	r3, [r3]
 8004f92:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004f9a:	61fb      	str	r3, [r7, #28]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	330c      	adds	r3, #12
 8004fa2:	69fa      	ldr	r2, [r7, #28]
 8004fa4:	61ba      	str	r2, [r7, #24]
 8004fa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa8:	6979      	ldr	r1, [r7, #20]
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	e841 2300 	strex	r3, r2, [r1]
 8004fb0:	613b      	str	r3, [r7, #16]
   return(result);
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1e5      	bne.n	8004f84 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004fc0:	bf00      	nop
 8004fc2:	3724      	adds	r7, #36	@ 0x24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b095      	sub	sp, #84	@ 0x54
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	330c      	adds	r3, #12
 8004fda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fde:	e853 3f00 	ldrex	r3, [r3]
 8004fe2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	330c      	adds	r3, #12
 8004ff2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ff4:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ffa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ffc:	e841 2300 	strex	r3, r2, [r1]
 8005000:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1e5      	bne.n	8004fd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3314      	adds	r3, #20
 800500e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005010:	6a3b      	ldr	r3, [r7, #32]
 8005012:	e853 3f00 	ldrex	r3, [r3]
 8005016:	61fb      	str	r3, [r7, #28]
   return(result);
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	f023 0301 	bic.w	r3, r3, #1
 800501e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	3314      	adds	r3, #20
 8005026:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005028:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800502a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800502e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005030:	e841 2300 	strex	r3, r2, [r1]
 8005034:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1e5      	bne.n	8005008 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005040:	2b01      	cmp	r3, #1
 8005042:	d119      	bne.n	8005078 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	330c      	adds	r3, #12
 800504a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	e853 3f00 	ldrex	r3, [r3]
 8005052:	60bb      	str	r3, [r7, #8]
   return(result);
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	f023 0310 	bic.w	r3, r3, #16
 800505a:	647b      	str	r3, [r7, #68]	@ 0x44
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	330c      	adds	r3, #12
 8005062:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005064:	61ba      	str	r2, [r7, #24]
 8005066:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005068:	6979      	ldr	r1, [r7, #20]
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	e841 2300 	strex	r3, r2, [r1]
 8005070:	613b      	str	r3, [r7, #16]
   return(result);
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e5      	bne.n	8005044 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2220      	movs	r2, #32
 800507c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005086:	bf00      	nop
 8005088:	3754      	adds	r7, #84	@ 0x54
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
	...

08005094 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005098:	b0c0      	sub	sp, #256	@ 0x100
 800509a:	af00      	add	r7, sp, #0
 800509c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80050ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b0:	68d9      	ldr	r1, [r3, #12]
 80050b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	ea40 0301 	orr.w	r3, r0, r1
 80050bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	431a      	orrs	r2, r3
 80050cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	431a      	orrs	r2, r3
 80050d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	4313      	orrs	r3, r2
 80050dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80050e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80050ec:	f021 010c 	bic.w	r1, r1, #12
 80050f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80050fa:	430b      	orrs	r3, r1
 80050fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800510a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800510e:	6999      	ldr	r1, [r3, #24]
 8005110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	ea40 0301 	orr.w	r3, r0, r1
 800511a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800511c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	4b8f      	ldr	r3, [pc, #572]	@ (8005360 <UART_SetConfig+0x2cc>)
 8005124:	429a      	cmp	r2, r3
 8005126:	d005      	beq.n	8005134 <UART_SetConfig+0xa0>
 8005128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	4b8d      	ldr	r3, [pc, #564]	@ (8005364 <UART_SetConfig+0x2d0>)
 8005130:	429a      	cmp	r2, r3
 8005132:	d104      	bne.n	800513e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005134:	f7fd fe70 	bl	8002e18 <HAL_RCC_GetPCLK2Freq>
 8005138:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800513c:	e003      	b.n	8005146 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800513e:	f7fd fe57 	bl	8002df0 <HAL_RCC_GetPCLK1Freq>
 8005142:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800514a:	69db      	ldr	r3, [r3, #28]
 800514c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005150:	f040 810c 	bne.w	800536c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005158:	2200      	movs	r2, #0
 800515a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800515e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005162:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005166:	4622      	mov	r2, r4
 8005168:	462b      	mov	r3, r5
 800516a:	1891      	adds	r1, r2, r2
 800516c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800516e:	415b      	adcs	r3, r3
 8005170:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005172:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005176:	4621      	mov	r1, r4
 8005178:	eb12 0801 	adds.w	r8, r2, r1
 800517c:	4629      	mov	r1, r5
 800517e:	eb43 0901 	adc.w	r9, r3, r1
 8005182:	f04f 0200 	mov.w	r2, #0
 8005186:	f04f 0300 	mov.w	r3, #0
 800518a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800518e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005192:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005196:	4690      	mov	r8, r2
 8005198:	4699      	mov	r9, r3
 800519a:	4623      	mov	r3, r4
 800519c:	eb18 0303 	adds.w	r3, r8, r3
 80051a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80051a4:	462b      	mov	r3, r5
 80051a6:	eb49 0303 	adc.w	r3, r9, r3
 80051aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80051ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80051ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80051be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80051c2:	460b      	mov	r3, r1
 80051c4:	18db      	adds	r3, r3, r3
 80051c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80051c8:	4613      	mov	r3, r2
 80051ca:	eb42 0303 	adc.w	r3, r2, r3
 80051ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80051d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80051d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80051d8:	f7fb f872 	bl	80002c0 <__aeabi_uldivmod>
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4b61      	ldr	r3, [pc, #388]	@ (8005368 <UART_SetConfig+0x2d4>)
 80051e2:	fba3 2302 	umull	r2, r3, r3, r2
 80051e6:	095b      	lsrs	r3, r3, #5
 80051e8:	011c      	lsls	r4, r3, #4
 80051ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051ee:	2200      	movs	r2, #0
 80051f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80051f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80051fc:	4642      	mov	r2, r8
 80051fe:	464b      	mov	r3, r9
 8005200:	1891      	adds	r1, r2, r2
 8005202:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005204:	415b      	adcs	r3, r3
 8005206:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005208:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800520c:	4641      	mov	r1, r8
 800520e:	eb12 0a01 	adds.w	sl, r2, r1
 8005212:	4649      	mov	r1, r9
 8005214:	eb43 0b01 	adc.w	fp, r3, r1
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005224:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005228:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800522c:	4692      	mov	sl, r2
 800522e:	469b      	mov	fp, r3
 8005230:	4643      	mov	r3, r8
 8005232:	eb1a 0303 	adds.w	r3, sl, r3
 8005236:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800523a:	464b      	mov	r3, r9
 800523c:	eb4b 0303 	adc.w	r3, fp, r3
 8005240:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005250:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005254:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005258:	460b      	mov	r3, r1
 800525a:	18db      	adds	r3, r3, r3
 800525c:	643b      	str	r3, [r7, #64]	@ 0x40
 800525e:	4613      	mov	r3, r2
 8005260:	eb42 0303 	adc.w	r3, r2, r3
 8005264:	647b      	str	r3, [r7, #68]	@ 0x44
 8005266:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800526a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800526e:	f7fb f827 	bl	80002c0 <__aeabi_uldivmod>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4611      	mov	r1, r2
 8005278:	4b3b      	ldr	r3, [pc, #236]	@ (8005368 <UART_SetConfig+0x2d4>)
 800527a:	fba3 2301 	umull	r2, r3, r3, r1
 800527e:	095b      	lsrs	r3, r3, #5
 8005280:	2264      	movs	r2, #100	@ 0x64
 8005282:	fb02 f303 	mul.w	r3, r2, r3
 8005286:	1acb      	subs	r3, r1, r3
 8005288:	00db      	lsls	r3, r3, #3
 800528a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800528e:	4b36      	ldr	r3, [pc, #216]	@ (8005368 <UART_SetConfig+0x2d4>)
 8005290:	fba3 2302 	umull	r2, r3, r3, r2
 8005294:	095b      	lsrs	r3, r3, #5
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800529c:	441c      	add	r4, r3
 800529e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052a2:	2200      	movs	r2, #0
 80052a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80052ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80052b0:	4642      	mov	r2, r8
 80052b2:	464b      	mov	r3, r9
 80052b4:	1891      	adds	r1, r2, r2
 80052b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80052b8:	415b      	adcs	r3, r3
 80052ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80052c0:	4641      	mov	r1, r8
 80052c2:	1851      	adds	r1, r2, r1
 80052c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80052c6:	4649      	mov	r1, r9
 80052c8:	414b      	adcs	r3, r1
 80052ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80052cc:	f04f 0200 	mov.w	r2, #0
 80052d0:	f04f 0300 	mov.w	r3, #0
 80052d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80052d8:	4659      	mov	r1, fp
 80052da:	00cb      	lsls	r3, r1, #3
 80052dc:	4651      	mov	r1, sl
 80052de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052e2:	4651      	mov	r1, sl
 80052e4:	00ca      	lsls	r2, r1, #3
 80052e6:	4610      	mov	r0, r2
 80052e8:	4619      	mov	r1, r3
 80052ea:	4603      	mov	r3, r0
 80052ec:	4642      	mov	r2, r8
 80052ee:	189b      	adds	r3, r3, r2
 80052f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052f4:	464b      	mov	r3, r9
 80052f6:	460a      	mov	r2, r1
 80052f8:	eb42 0303 	adc.w	r3, r2, r3
 80052fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800530c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005310:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005314:	460b      	mov	r3, r1
 8005316:	18db      	adds	r3, r3, r3
 8005318:	62bb      	str	r3, [r7, #40]	@ 0x28
 800531a:	4613      	mov	r3, r2
 800531c:	eb42 0303 	adc.w	r3, r2, r3
 8005320:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005322:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005326:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800532a:	f7fa ffc9 	bl	80002c0 <__aeabi_uldivmod>
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	4b0d      	ldr	r3, [pc, #52]	@ (8005368 <UART_SetConfig+0x2d4>)
 8005334:	fba3 1302 	umull	r1, r3, r3, r2
 8005338:	095b      	lsrs	r3, r3, #5
 800533a:	2164      	movs	r1, #100	@ 0x64
 800533c:	fb01 f303 	mul.w	r3, r1, r3
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	3332      	adds	r3, #50	@ 0x32
 8005346:	4a08      	ldr	r2, [pc, #32]	@ (8005368 <UART_SetConfig+0x2d4>)
 8005348:	fba2 2303 	umull	r2, r3, r2, r3
 800534c:	095b      	lsrs	r3, r3, #5
 800534e:	f003 0207 	and.w	r2, r3, #7
 8005352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4422      	add	r2, r4
 800535a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800535c:	e106      	b.n	800556c <UART_SetConfig+0x4d8>
 800535e:	bf00      	nop
 8005360:	40011000 	.word	0x40011000
 8005364:	40011400 	.word	0x40011400
 8005368:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800536c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005370:	2200      	movs	r2, #0
 8005372:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005376:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800537a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800537e:	4642      	mov	r2, r8
 8005380:	464b      	mov	r3, r9
 8005382:	1891      	adds	r1, r2, r2
 8005384:	6239      	str	r1, [r7, #32]
 8005386:	415b      	adcs	r3, r3
 8005388:	627b      	str	r3, [r7, #36]	@ 0x24
 800538a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800538e:	4641      	mov	r1, r8
 8005390:	1854      	adds	r4, r2, r1
 8005392:	4649      	mov	r1, r9
 8005394:	eb43 0501 	adc.w	r5, r3, r1
 8005398:	f04f 0200 	mov.w	r2, #0
 800539c:	f04f 0300 	mov.w	r3, #0
 80053a0:	00eb      	lsls	r3, r5, #3
 80053a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053a6:	00e2      	lsls	r2, r4, #3
 80053a8:	4614      	mov	r4, r2
 80053aa:	461d      	mov	r5, r3
 80053ac:	4643      	mov	r3, r8
 80053ae:	18e3      	adds	r3, r4, r3
 80053b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80053b4:	464b      	mov	r3, r9
 80053b6:	eb45 0303 	adc.w	r3, r5, r3
 80053ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80053be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80053ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80053ce:	f04f 0200 	mov.w	r2, #0
 80053d2:	f04f 0300 	mov.w	r3, #0
 80053d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80053da:	4629      	mov	r1, r5
 80053dc:	008b      	lsls	r3, r1, #2
 80053de:	4621      	mov	r1, r4
 80053e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053e4:	4621      	mov	r1, r4
 80053e6:	008a      	lsls	r2, r1, #2
 80053e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80053ec:	f7fa ff68 	bl	80002c0 <__aeabi_uldivmod>
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	4b60      	ldr	r3, [pc, #384]	@ (8005578 <UART_SetConfig+0x4e4>)
 80053f6:	fba3 2302 	umull	r2, r3, r3, r2
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	011c      	lsls	r4, r3, #4
 80053fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005402:	2200      	movs	r2, #0
 8005404:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005408:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800540c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005410:	4642      	mov	r2, r8
 8005412:	464b      	mov	r3, r9
 8005414:	1891      	adds	r1, r2, r2
 8005416:	61b9      	str	r1, [r7, #24]
 8005418:	415b      	adcs	r3, r3
 800541a:	61fb      	str	r3, [r7, #28]
 800541c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005420:	4641      	mov	r1, r8
 8005422:	1851      	adds	r1, r2, r1
 8005424:	6139      	str	r1, [r7, #16]
 8005426:	4649      	mov	r1, r9
 8005428:	414b      	adcs	r3, r1
 800542a:	617b      	str	r3, [r7, #20]
 800542c:	f04f 0200 	mov.w	r2, #0
 8005430:	f04f 0300 	mov.w	r3, #0
 8005434:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005438:	4659      	mov	r1, fp
 800543a:	00cb      	lsls	r3, r1, #3
 800543c:	4651      	mov	r1, sl
 800543e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005442:	4651      	mov	r1, sl
 8005444:	00ca      	lsls	r2, r1, #3
 8005446:	4610      	mov	r0, r2
 8005448:	4619      	mov	r1, r3
 800544a:	4603      	mov	r3, r0
 800544c:	4642      	mov	r2, r8
 800544e:	189b      	adds	r3, r3, r2
 8005450:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005454:	464b      	mov	r3, r9
 8005456:	460a      	mov	r2, r1
 8005458:	eb42 0303 	adc.w	r3, r2, r3
 800545c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	67bb      	str	r3, [r7, #120]	@ 0x78
 800546a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800546c:	f04f 0200 	mov.w	r2, #0
 8005470:	f04f 0300 	mov.w	r3, #0
 8005474:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005478:	4649      	mov	r1, r9
 800547a:	008b      	lsls	r3, r1, #2
 800547c:	4641      	mov	r1, r8
 800547e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005482:	4641      	mov	r1, r8
 8005484:	008a      	lsls	r2, r1, #2
 8005486:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800548a:	f7fa ff19 	bl	80002c0 <__aeabi_uldivmod>
 800548e:	4602      	mov	r2, r0
 8005490:	460b      	mov	r3, r1
 8005492:	4611      	mov	r1, r2
 8005494:	4b38      	ldr	r3, [pc, #224]	@ (8005578 <UART_SetConfig+0x4e4>)
 8005496:	fba3 2301 	umull	r2, r3, r3, r1
 800549a:	095b      	lsrs	r3, r3, #5
 800549c:	2264      	movs	r2, #100	@ 0x64
 800549e:	fb02 f303 	mul.w	r3, r2, r3
 80054a2:	1acb      	subs	r3, r1, r3
 80054a4:	011b      	lsls	r3, r3, #4
 80054a6:	3332      	adds	r3, #50	@ 0x32
 80054a8:	4a33      	ldr	r2, [pc, #204]	@ (8005578 <UART_SetConfig+0x4e4>)
 80054aa:	fba2 2303 	umull	r2, r3, r2, r3
 80054ae:	095b      	lsrs	r3, r3, #5
 80054b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054b4:	441c      	add	r4, r3
 80054b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054ba:	2200      	movs	r2, #0
 80054bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80054be:	677a      	str	r2, [r7, #116]	@ 0x74
 80054c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80054c4:	4642      	mov	r2, r8
 80054c6:	464b      	mov	r3, r9
 80054c8:	1891      	adds	r1, r2, r2
 80054ca:	60b9      	str	r1, [r7, #8]
 80054cc:	415b      	adcs	r3, r3
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054d4:	4641      	mov	r1, r8
 80054d6:	1851      	adds	r1, r2, r1
 80054d8:	6039      	str	r1, [r7, #0]
 80054da:	4649      	mov	r1, r9
 80054dc:	414b      	adcs	r3, r1
 80054de:	607b      	str	r3, [r7, #4]
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	f04f 0300 	mov.w	r3, #0
 80054e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80054ec:	4659      	mov	r1, fp
 80054ee:	00cb      	lsls	r3, r1, #3
 80054f0:	4651      	mov	r1, sl
 80054f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054f6:	4651      	mov	r1, sl
 80054f8:	00ca      	lsls	r2, r1, #3
 80054fa:	4610      	mov	r0, r2
 80054fc:	4619      	mov	r1, r3
 80054fe:	4603      	mov	r3, r0
 8005500:	4642      	mov	r2, r8
 8005502:	189b      	adds	r3, r3, r2
 8005504:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005506:	464b      	mov	r3, r9
 8005508:	460a      	mov	r2, r1
 800550a:	eb42 0303 	adc.w	r3, r2, r3
 800550e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	663b      	str	r3, [r7, #96]	@ 0x60
 800551a:	667a      	str	r2, [r7, #100]	@ 0x64
 800551c:	f04f 0200 	mov.w	r2, #0
 8005520:	f04f 0300 	mov.w	r3, #0
 8005524:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005528:	4649      	mov	r1, r9
 800552a:	008b      	lsls	r3, r1, #2
 800552c:	4641      	mov	r1, r8
 800552e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005532:	4641      	mov	r1, r8
 8005534:	008a      	lsls	r2, r1, #2
 8005536:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800553a:	f7fa fec1 	bl	80002c0 <__aeabi_uldivmod>
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	4b0d      	ldr	r3, [pc, #52]	@ (8005578 <UART_SetConfig+0x4e4>)
 8005544:	fba3 1302 	umull	r1, r3, r3, r2
 8005548:	095b      	lsrs	r3, r3, #5
 800554a:	2164      	movs	r1, #100	@ 0x64
 800554c:	fb01 f303 	mul.w	r3, r1, r3
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	011b      	lsls	r3, r3, #4
 8005554:	3332      	adds	r3, #50	@ 0x32
 8005556:	4a08      	ldr	r2, [pc, #32]	@ (8005578 <UART_SetConfig+0x4e4>)
 8005558:	fba2 2303 	umull	r2, r3, r2, r3
 800555c:	095b      	lsrs	r3, r3, #5
 800555e:	f003 020f 	and.w	r2, r3, #15
 8005562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4422      	add	r2, r4
 800556a:	609a      	str	r2, [r3, #8]
}
 800556c:	bf00      	nop
 800556e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005572:	46bd      	mov	sp, r7
 8005574:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005578:	51eb851f 	.word	0x51eb851f

0800557c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	4603      	mov	r3, r0
 8005584:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800558a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800558e:	2b84      	cmp	r3, #132	@ 0x84
 8005590:	d005      	beq.n	800559e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005592:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4413      	add	r3, r2
 800559a:	3303      	adds	r3, #3
 800559c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800559e:	68fb      	ldr	r3, [r7, #12]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80055b0:	f000 fb00 	bl	8005bb4 <vTaskStartScheduler>
  
  return osOK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	bd80      	pop	{r7, pc}

080055ba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80055ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055bc:	b089      	sub	sp, #36	@ 0x24
 80055be:	af04      	add	r7, sp, #16
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d020      	beq.n	800560e <osThreadCreate+0x54>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d01c      	beq.n	800560e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685c      	ldr	r4, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	691e      	ldr	r6, [r3, #16]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7ff ffc8 	bl	800557c <makeFreeRtosPriority>
 80055ec:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055f6:	9202      	str	r2, [sp, #8]
 80055f8:	9301      	str	r3, [sp, #4]
 80055fa:	9100      	str	r1, [sp, #0]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	4632      	mov	r2, r6
 8005600:	4629      	mov	r1, r5
 8005602:	4620      	mov	r0, r4
 8005604:	f000 f8ed 	bl	80057e2 <xTaskCreateStatic>
 8005608:	4603      	mov	r3, r0
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	e01c      	b.n	8005648 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685c      	ldr	r4, [r3, #4]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800561a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005622:	4618      	mov	r0, r3
 8005624:	f7ff ffaa 	bl	800557c <makeFreeRtosPriority>
 8005628:	4602      	mov	r2, r0
 800562a:	f107 030c 	add.w	r3, r7, #12
 800562e:	9301      	str	r3, [sp, #4]
 8005630:	9200      	str	r2, [sp, #0]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	4632      	mov	r2, r6
 8005636:	4629      	mov	r1, r5
 8005638:	4620      	mov	r0, r4
 800563a:	f000 f932 	bl	80058a2 <xTaskCreate>
 800563e:	4603      	mov	r3, r0
 8005640:	2b01      	cmp	r3, #1
 8005642:	d001      	beq.n	8005648 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005644:	2300      	movs	r3, #0
 8005646:	e000      	b.n	800564a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005648:	68fb      	ldr	r3, [r7, #12]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005652 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b084      	sub	sp, #16
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <osDelay+0x16>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	e000      	b.n	800566a <osDelay+0x18>
 8005668:	2301      	movs	r3, #1
 800566a:	4618      	mov	r0, r3
 800566c:	f000 fa6c 	bl	8005b48 <vTaskDelay>
  
  return osOK;
 8005670:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f103 0208 	add.w	r2, r3, #8
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f04f 32ff 	mov.w	r2, #4294967295
 8005692:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f103 0208 	add.w	r2, r3, #8
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f103 0208 	add.w	r2, r3, #8
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056ae:	bf00      	nop
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80056ba:	b480      	push	{r7}
 80056bc:	b083      	sub	sp, #12
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	601a      	str	r2, [r3, #0]
}
 8005710:	bf00      	nop
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005732:	d103      	bne.n	800573c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	60fb      	str	r3, [r7, #12]
 800573a:	e00c      	b.n	8005756 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3308      	adds	r3, #8
 8005740:	60fb      	str	r3, [r7, #12]
 8005742:	e002      	b.n	800574a <vListInsert+0x2e>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	60fb      	str	r3, [r7, #12]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	429a      	cmp	r2, r3
 8005754:	d2f6      	bcs.n	8005744 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	1c5a      	adds	r2, r3, #1
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	601a      	str	r2, [r3, #0]
}
 8005782:	bf00      	nop
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800578e:	b480      	push	{r7}
 8005790:	b085      	sub	sp, #20
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6892      	ldr	r2, [r2, #8]
 80057a4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6852      	ldr	r2, [r2, #4]
 80057ae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d103      	bne.n	80057c2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	689a      	ldr	r2, [r3, #8]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	1e5a      	subs	r2, r3, #1
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b08e      	sub	sp, #56	@ 0x38
 80057e6:	af04      	add	r7, sp, #16
 80057e8:	60f8      	str	r0, [r7, #12]
 80057ea:	60b9      	str	r1, [r7, #8]
 80057ec:	607a      	str	r2, [r7, #4]
 80057ee:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80057f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10b      	bne.n	800580e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057fa:	f383 8811 	msr	BASEPRI, r3
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005808:	bf00      	nop
 800580a:	bf00      	nop
 800580c:	e7fd      	b.n	800580a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800580e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10b      	bne.n	800582c <xTaskCreateStatic+0x4a>
	__asm volatile
 8005814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005818:	f383 8811 	msr	BASEPRI, r3
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	61fb      	str	r3, [r7, #28]
}
 8005826:	bf00      	nop
 8005828:	bf00      	nop
 800582a:	e7fd      	b.n	8005828 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800582c:	23a0      	movs	r3, #160	@ 0xa0
 800582e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	2ba0      	cmp	r3, #160	@ 0xa0
 8005834:	d00b      	beq.n	800584e <xTaskCreateStatic+0x6c>
	__asm volatile
 8005836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	61bb      	str	r3, [r7, #24]
}
 8005848:	bf00      	nop
 800584a:	bf00      	nop
 800584c:	e7fd      	b.n	800584a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800584e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005852:	2b00      	cmp	r3, #0
 8005854:	d01e      	beq.n	8005894 <xTaskCreateStatic+0xb2>
 8005856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005858:	2b00      	cmp	r3, #0
 800585a:	d01b      	beq.n	8005894 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800585c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800585e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005862:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005864:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005868:	2202      	movs	r2, #2
 800586a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800586e:	2300      	movs	r3, #0
 8005870:	9303      	str	r3, [sp, #12]
 8005872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005874:	9302      	str	r3, [sp, #8]
 8005876:	f107 0314 	add.w	r3, r7, #20
 800587a:	9301      	str	r3, [sp, #4]
 800587c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	68b9      	ldr	r1, [r7, #8]
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 f850 	bl	800592c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800588c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800588e:	f000 f8f1 	bl	8005a74 <prvAddNewTaskToReadyList>
 8005892:	e001      	b.n	8005898 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005894:	2300      	movs	r3, #0
 8005896:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005898:	697b      	ldr	r3, [r7, #20]
	}
 800589a:	4618      	mov	r0, r3
 800589c:	3728      	adds	r7, #40	@ 0x28
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b08c      	sub	sp, #48	@ 0x30
 80058a6:	af04      	add	r7, sp, #16
 80058a8:	60f8      	str	r0, [r7, #12]
 80058aa:	60b9      	str	r1, [r7, #8]
 80058ac:	603b      	str	r3, [r7, #0]
 80058ae:	4613      	mov	r3, r2
 80058b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80058b2:	88fb      	ldrh	r3, [r7, #6]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 ff06 	bl	80066c8 <pvPortMalloc>
 80058bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00e      	beq.n	80058e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80058c4:	20a0      	movs	r0, #160	@ 0xa0
 80058c6:	f000 feff 	bl	80066c8 <pvPortMalloc>
 80058ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80058d8:	e005      	b.n	80058e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80058da:	6978      	ldr	r0, [r7, #20]
 80058dc:	f000 ffc2 	bl	8006864 <vPortFree>
 80058e0:	e001      	b.n	80058e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80058e2:	2300      	movs	r3, #0
 80058e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d017      	beq.n	800591c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058f4:	88fa      	ldrh	r2, [r7, #6]
 80058f6:	2300      	movs	r3, #0
 80058f8:	9303      	str	r3, [sp, #12]
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	9302      	str	r3, [sp, #8]
 80058fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005900:	9301      	str	r3, [sp, #4]
 8005902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	68b9      	ldr	r1, [r7, #8]
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 f80e 	bl	800592c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005910:	69f8      	ldr	r0, [r7, #28]
 8005912:	f000 f8af 	bl	8005a74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005916:	2301      	movs	r3, #1
 8005918:	61bb      	str	r3, [r7, #24]
 800591a:	e002      	b.n	8005922 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800591c:	f04f 33ff 	mov.w	r3, #4294967295
 8005920:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005922:	69bb      	ldr	r3, [r7, #24]
	}
 8005924:	4618      	mov	r0, r3
 8005926:	3720      	adds	r7, #32
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b088      	sub	sp, #32
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
 8005938:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800593a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005944:	3b01      	subs	r3, #1
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	f023 0307 	bic.w	r3, r3, #7
 8005952:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00b      	beq.n	8005976 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800595e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	617b      	str	r3, [r7, #20]
}
 8005970:	bf00      	nop
 8005972:	bf00      	nop
 8005974:	e7fd      	b.n	8005972 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d01f      	beq.n	80059bc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800597c:	2300      	movs	r3, #0
 800597e:	61fb      	str	r3, [r7, #28]
 8005980:	e012      	b.n	80059a8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	4413      	add	r3, r2
 8005988:	7819      	ldrb	r1, [r3, #0]
 800598a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	4413      	add	r3, r2
 8005990:	3334      	adds	r3, #52	@ 0x34
 8005992:	460a      	mov	r2, r1
 8005994:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	4413      	add	r3, r2
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d006      	beq.n	80059b0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	3301      	adds	r3, #1
 80059a6:	61fb      	str	r3, [r7, #28]
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	2b0f      	cmp	r3, #15
 80059ac:	d9e9      	bls.n	8005982 <prvInitialiseNewTask+0x56>
 80059ae:	e000      	b.n	80059b2 <prvInitialiseNewTask+0x86>
			{
				break;
 80059b0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80059b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059ba:	e003      	b.n	80059c4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80059bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80059c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c6:	2b06      	cmp	r3, #6
 80059c8:	d901      	bls.n	80059ce <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80059ca:	2306      	movs	r3, #6
 80059cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80059ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059d2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80059d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059d8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80059da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059dc:	2200      	movs	r2, #0
 80059de:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e2:	3304      	adds	r3, #4
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7ff fe68 	bl	80056ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ec:	3318      	adds	r3, #24
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7ff fe63 	bl	80056ba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fc:	f1c3 0207 	rsb	r2, r3, #7
 8005a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a02:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a08:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a1c:	334c      	adds	r3, #76	@ 0x4c
 8005a1e:	224c      	movs	r2, #76	@ 0x4c
 8005a20:	2100      	movs	r1, #0
 8005a22:	4618      	mov	r0, r3
 8005a24:	f001 f9cc 	bl	8006dc0 <memset>
 8005a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2a:	4a0f      	ldr	r2, [pc, #60]	@ (8005a68 <prvInitialiseNewTask+0x13c>)
 8005a2c:	651a      	str	r2, [r3, #80]	@ 0x50
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a30:	4a0e      	ldr	r2, [pc, #56]	@ (8005a6c <prvInitialiseNewTask+0x140>)
 8005a32:	655a      	str	r2, [r3, #84]	@ 0x54
 8005a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a36:	4a0e      	ldr	r2, [pc, #56]	@ (8005a70 <prvInitialiseNewTask+0x144>)
 8005a38:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	68f9      	ldr	r1, [r7, #12]
 8005a46:	69b8      	ldr	r0, [r7, #24]
 8005a48:	f000 fc2e 	bl	80062a8 <pxPortInitialiseStack>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a50:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <prvInitialiseNewTask+0x132>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a5e:	bf00      	nop
 8005a60:	3720      	adds	r7, #32
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	200047f8 	.word	0x200047f8
 8005a6c:	20004860 	.word	0x20004860
 8005a70:	200048c8 	.word	0x200048c8

08005a74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a7c:	f000 fd44 	bl	8006508 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a80:	4b2a      	ldr	r3, [pc, #168]	@ (8005b2c <prvAddNewTaskToReadyList+0xb8>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3301      	adds	r3, #1
 8005a86:	4a29      	ldr	r2, [pc, #164]	@ (8005b2c <prvAddNewTaskToReadyList+0xb8>)
 8005a88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a8a:	4b29      	ldr	r3, [pc, #164]	@ (8005b30 <prvAddNewTaskToReadyList+0xbc>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d109      	bne.n	8005aa6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a92:	4a27      	ldr	r2, [pc, #156]	@ (8005b30 <prvAddNewTaskToReadyList+0xbc>)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a98:	4b24      	ldr	r3, [pc, #144]	@ (8005b2c <prvAddNewTaskToReadyList+0xb8>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d110      	bne.n	8005ac2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005aa0:	f000 fad4 	bl	800604c <prvInitialiseTaskLists>
 8005aa4:	e00d      	b.n	8005ac2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005aa6:	4b23      	ldr	r3, [pc, #140]	@ (8005b34 <prvAddNewTaskToReadyList+0xc0>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d109      	bne.n	8005ac2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005aae:	4b20      	ldr	r3, [pc, #128]	@ (8005b30 <prvAddNewTaskToReadyList+0xbc>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d802      	bhi.n	8005ac2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005abc:	4a1c      	ldr	r2, [pc, #112]	@ (8005b30 <prvAddNewTaskToReadyList+0xbc>)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ac2:	4b1d      	ldr	r3, [pc, #116]	@ (8005b38 <prvAddNewTaskToReadyList+0xc4>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8005b38 <prvAddNewTaskToReadyList+0xc4>)
 8005aca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	409a      	lsls	r2, r3
 8005ad4:	4b19      	ldr	r3, [pc, #100]	@ (8005b3c <prvAddNewTaskToReadyList+0xc8>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	4a18      	ldr	r2, [pc, #96]	@ (8005b3c <prvAddNewTaskToReadyList+0xc8>)
 8005adc:	6013      	str	r3, [r2, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4a15      	ldr	r2, [pc, #84]	@ (8005b40 <prvAddNewTaskToReadyList+0xcc>)
 8005aec:	441a      	add	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	3304      	adds	r3, #4
 8005af2:	4619      	mov	r1, r3
 8005af4:	4610      	mov	r0, r2
 8005af6:	f7ff fded 	bl	80056d4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005afa:	f000 fd37 	bl	800656c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005afe:	4b0d      	ldr	r3, [pc, #52]	@ (8005b34 <prvAddNewTaskToReadyList+0xc0>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00e      	beq.n	8005b24 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b06:	4b0a      	ldr	r3, [pc, #40]	@ (8005b30 <prvAddNewTaskToReadyList+0xbc>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d207      	bcs.n	8005b24 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b14:	4b0b      	ldr	r3, [pc, #44]	@ (8005b44 <prvAddNewTaskToReadyList+0xd0>)
 8005b16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b24:	bf00      	nop
 8005b26:	3708      	adds	r7, #8
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	20000b9c 	.word	0x20000b9c
 8005b30:	20000a9c 	.word	0x20000a9c
 8005b34:	20000ba8 	.word	0x20000ba8
 8005b38:	20000bb8 	.word	0x20000bb8
 8005b3c:	20000ba4 	.word	0x20000ba4
 8005b40:	20000aa0 	.word	0x20000aa0
 8005b44:	e000ed04 	.word	0xe000ed04

08005b48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b50:	2300      	movs	r3, #0
 8005b52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d018      	beq.n	8005b8c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b5a:	4b14      	ldr	r3, [pc, #80]	@ (8005bac <vTaskDelay+0x64>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00b      	beq.n	8005b7a <vTaskDelay+0x32>
	__asm volatile
 8005b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	60bb      	str	r3, [r7, #8]
}
 8005b74:	bf00      	nop
 8005b76:	bf00      	nop
 8005b78:	e7fd      	b.n	8005b76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005b7a:	f000 f885 	bl	8005c88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b7e:	2100      	movs	r1, #0
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 fb27 	bl	80061d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b86:	f000 f88d 	bl	8005ca4 <xTaskResumeAll>
 8005b8a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d107      	bne.n	8005ba2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005b92:	4b07      	ldr	r3, [pc, #28]	@ (8005bb0 <vTaskDelay+0x68>)
 8005b94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ba2:	bf00      	nop
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	20000bc4 	.word	0x20000bc4
 8005bb0:	e000ed04 	.word	0xe000ed04

08005bb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b08a      	sub	sp, #40	@ 0x28
 8005bb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005bc2:	463a      	mov	r2, r7
 8005bc4:	1d39      	adds	r1, r7, #4
 8005bc6:	f107 0308 	add.w	r3, r7, #8
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7fa ff7e 	bl	8000acc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005bd0:	6839      	ldr	r1, [r7, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	9202      	str	r2, [sp, #8]
 8005bd8:	9301      	str	r3, [sp, #4]
 8005bda:	2300      	movs	r3, #0
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	2300      	movs	r3, #0
 8005be0:	460a      	mov	r2, r1
 8005be2:	4921      	ldr	r1, [pc, #132]	@ (8005c68 <vTaskStartScheduler+0xb4>)
 8005be4:	4821      	ldr	r0, [pc, #132]	@ (8005c6c <vTaskStartScheduler+0xb8>)
 8005be6:	f7ff fdfc 	bl	80057e2 <xTaskCreateStatic>
 8005bea:	4603      	mov	r3, r0
 8005bec:	4a20      	ldr	r2, [pc, #128]	@ (8005c70 <vTaskStartScheduler+0xbc>)
 8005bee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005bf0:	4b1f      	ldr	r3, [pc, #124]	@ (8005c70 <vTaskStartScheduler+0xbc>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	617b      	str	r3, [r7, #20]
 8005bfc:	e001      	b.n	8005c02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d11b      	bne.n	8005c40 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0c:	f383 8811 	msr	BASEPRI, r3
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	613b      	str	r3, [r7, #16]
}
 8005c1a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c1c:	4b15      	ldr	r3, [pc, #84]	@ (8005c74 <vTaskStartScheduler+0xc0>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	334c      	adds	r3, #76	@ 0x4c
 8005c22:	4a15      	ldr	r2, [pc, #84]	@ (8005c78 <vTaskStartScheduler+0xc4>)
 8005c24:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c26:	4b15      	ldr	r3, [pc, #84]	@ (8005c7c <vTaskStartScheduler+0xc8>)
 8005c28:	f04f 32ff 	mov.w	r2, #4294967295
 8005c2c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c2e:	4b14      	ldr	r3, [pc, #80]	@ (8005c80 <vTaskStartScheduler+0xcc>)
 8005c30:	2201      	movs	r2, #1
 8005c32:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c34:	4b13      	ldr	r3, [pc, #76]	@ (8005c84 <vTaskStartScheduler+0xd0>)
 8005c36:	2200      	movs	r2, #0
 8005c38:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c3a:	f000 fbc1 	bl	80063c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c3e:	e00f      	b.n	8005c60 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c46:	d10b      	bne.n	8005c60 <vTaskStartScheduler+0xac>
	__asm volatile
 8005c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c4c:	f383 8811 	msr	BASEPRI, r3
 8005c50:	f3bf 8f6f 	isb	sy
 8005c54:	f3bf 8f4f 	dsb	sy
 8005c58:	60fb      	str	r3, [r7, #12]
}
 8005c5a:	bf00      	nop
 8005c5c:	bf00      	nop
 8005c5e:	e7fd      	b.n	8005c5c <vTaskStartScheduler+0xa8>
}
 8005c60:	bf00      	nop
 8005c62:	3718      	adds	r7, #24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	080077d8 	.word	0x080077d8
 8005c6c:	0800601d 	.word	0x0800601d
 8005c70:	20000bc0 	.word	0x20000bc0
 8005c74:	20000a9c 	.word	0x20000a9c
 8005c78:	20000010 	.word	0x20000010
 8005c7c:	20000bbc 	.word	0x20000bbc
 8005c80:	20000ba8 	.word	0x20000ba8
 8005c84:	20000ba0 	.word	0x20000ba0

08005c88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005c8c:	4b04      	ldr	r3, [pc, #16]	@ (8005ca0 <vTaskSuspendAll+0x18>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3301      	adds	r3, #1
 8005c92:	4a03      	ldr	r2, [pc, #12]	@ (8005ca0 <vTaskSuspendAll+0x18>)
 8005c94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005c96:	bf00      	nop
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	20000bc4 	.word	0x20000bc4

08005ca4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005caa:	2300      	movs	r3, #0
 8005cac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005cb2:	4b42      	ldr	r3, [pc, #264]	@ (8005dbc <xTaskResumeAll+0x118>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10b      	bne.n	8005cd2 <xTaskResumeAll+0x2e>
	__asm volatile
 8005cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cbe:	f383 8811 	msr	BASEPRI, r3
 8005cc2:	f3bf 8f6f 	isb	sy
 8005cc6:	f3bf 8f4f 	dsb	sy
 8005cca:	603b      	str	r3, [r7, #0]
}
 8005ccc:	bf00      	nop
 8005cce:	bf00      	nop
 8005cd0:	e7fd      	b.n	8005cce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005cd2:	f000 fc19 	bl	8006508 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005cd6:	4b39      	ldr	r3, [pc, #228]	@ (8005dbc <xTaskResumeAll+0x118>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	4a37      	ldr	r2, [pc, #220]	@ (8005dbc <xTaskResumeAll+0x118>)
 8005cde:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ce0:	4b36      	ldr	r3, [pc, #216]	@ (8005dbc <xTaskResumeAll+0x118>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d161      	bne.n	8005dac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ce8:	4b35      	ldr	r3, [pc, #212]	@ (8005dc0 <xTaskResumeAll+0x11c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d05d      	beq.n	8005dac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cf0:	e02e      	b.n	8005d50 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cf2:	4b34      	ldr	r3, [pc, #208]	@ (8005dc4 <xTaskResumeAll+0x120>)
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	3318      	adds	r3, #24
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7ff fd45 	bl	800578e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	3304      	adds	r3, #4
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7ff fd40 	bl	800578e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d12:	2201      	movs	r2, #1
 8005d14:	409a      	lsls	r2, r3
 8005d16:	4b2c      	ldr	r3, [pc, #176]	@ (8005dc8 <xTaskResumeAll+0x124>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	4a2a      	ldr	r2, [pc, #168]	@ (8005dc8 <xTaskResumeAll+0x124>)
 8005d1e:	6013      	str	r3, [r2, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4a27      	ldr	r2, [pc, #156]	@ (8005dcc <xTaskResumeAll+0x128>)
 8005d2e:	441a      	add	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	3304      	adds	r3, #4
 8005d34:	4619      	mov	r1, r3
 8005d36:	4610      	mov	r0, r2
 8005d38:	f7ff fccc 	bl	80056d4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d40:	4b23      	ldr	r3, [pc, #140]	@ (8005dd0 <xTaskResumeAll+0x12c>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d302      	bcc.n	8005d50 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005d4a:	4b22      	ldr	r3, [pc, #136]	@ (8005dd4 <xTaskResumeAll+0x130>)
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d50:	4b1c      	ldr	r3, [pc, #112]	@ (8005dc4 <xTaskResumeAll+0x120>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1cc      	bne.n	8005cf2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d5e:	f000 fa19 	bl	8006194 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005d62:	4b1d      	ldr	r3, [pc, #116]	@ (8005dd8 <xTaskResumeAll+0x134>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d010      	beq.n	8005d90 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d6e:	f000 f837 	bl	8005de0 <xTaskIncrementTick>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d002      	beq.n	8005d7e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005d78:	4b16      	ldr	r3, [pc, #88]	@ (8005dd4 <xTaskResumeAll+0x130>)
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	3b01      	subs	r3, #1
 8005d82:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1f1      	bne.n	8005d6e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005d8a:	4b13      	ldr	r3, [pc, #76]	@ (8005dd8 <xTaskResumeAll+0x134>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d90:	4b10      	ldr	r3, [pc, #64]	@ (8005dd4 <xTaskResumeAll+0x130>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d009      	beq.n	8005dac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8005ddc <xTaskResumeAll+0x138>)
 8005d9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005dac:	f000 fbde 	bl	800656c <vPortExitCritical>

	return xAlreadyYielded;
 8005db0:	68bb      	ldr	r3, [r7, #8]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	20000bc4 	.word	0x20000bc4
 8005dc0:	20000b9c 	.word	0x20000b9c
 8005dc4:	20000b5c 	.word	0x20000b5c
 8005dc8:	20000ba4 	.word	0x20000ba4
 8005dcc:	20000aa0 	.word	0x20000aa0
 8005dd0:	20000a9c 	.word	0x20000a9c
 8005dd4:	20000bb0 	.word	0x20000bb0
 8005dd8:	20000bac 	.word	0x20000bac
 8005ddc:	e000ed04 	.word	0xe000ed04

08005de0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005de6:	2300      	movs	r3, #0
 8005de8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dea:	4b4f      	ldr	r3, [pc, #316]	@ (8005f28 <xTaskIncrementTick+0x148>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f040 808f 	bne.w	8005f12 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005df4:	4b4d      	ldr	r3, [pc, #308]	@ (8005f2c <xTaskIncrementTick+0x14c>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005dfc:	4a4b      	ldr	r2, [pc, #300]	@ (8005f2c <xTaskIncrementTick+0x14c>)
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d121      	bne.n	8005e4c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e08:	4b49      	ldr	r3, [pc, #292]	@ (8005f30 <xTaskIncrementTick+0x150>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00b      	beq.n	8005e2a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	603b      	str	r3, [r7, #0]
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop
 8005e28:	e7fd      	b.n	8005e26 <xTaskIncrementTick+0x46>
 8005e2a:	4b41      	ldr	r3, [pc, #260]	@ (8005f30 <xTaskIncrementTick+0x150>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	4b40      	ldr	r3, [pc, #256]	@ (8005f34 <xTaskIncrementTick+0x154>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a3e      	ldr	r2, [pc, #248]	@ (8005f30 <xTaskIncrementTick+0x150>)
 8005e36:	6013      	str	r3, [r2, #0]
 8005e38:	4a3e      	ldr	r2, [pc, #248]	@ (8005f34 <xTaskIncrementTick+0x154>)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	4b3e      	ldr	r3, [pc, #248]	@ (8005f38 <xTaskIncrementTick+0x158>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3301      	adds	r3, #1
 8005e44:	4a3c      	ldr	r2, [pc, #240]	@ (8005f38 <xTaskIncrementTick+0x158>)
 8005e46:	6013      	str	r3, [r2, #0]
 8005e48:	f000 f9a4 	bl	8006194 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e4c:	4b3b      	ldr	r3, [pc, #236]	@ (8005f3c <xTaskIncrementTick+0x15c>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d348      	bcc.n	8005ee8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e56:	4b36      	ldr	r3, [pc, #216]	@ (8005f30 <xTaskIncrementTick+0x150>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d104      	bne.n	8005e6a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e60:	4b36      	ldr	r3, [pc, #216]	@ (8005f3c <xTaskIncrementTick+0x15c>)
 8005e62:	f04f 32ff 	mov.w	r2, #4294967295
 8005e66:	601a      	str	r2, [r3, #0]
					break;
 8005e68:	e03e      	b.n	8005ee8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e6a:	4b31      	ldr	r3, [pc, #196]	@ (8005f30 <xTaskIncrementTick+0x150>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d203      	bcs.n	8005e8a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e82:	4a2e      	ldr	r2, [pc, #184]	@ (8005f3c <xTaskIncrementTick+0x15c>)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e88:	e02e      	b.n	8005ee8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7ff fc7d 	bl	800578e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d004      	beq.n	8005ea6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	3318      	adds	r3, #24
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7ff fc74 	bl	800578e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eaa:	2201      	movs	r2, #1
 8005eac:	409a      	lsls	r2, r3
 8005eae:	4b24      	ldr	r3, [pc, #144]	@ (8005f40 <xTaskIncrementTick+0x160>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	4a22      	ldr	r2, [pc, #136]	@ (8005f40 <xTaskIncrementTick+0x160>)
 8005eb6:	6013      	str	r3, [r2, #0]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4a1f      	ldr	r2, [pc, #124]	@ (8005f44 <xTaskIncrementTick+0x164>)
 8005ec6:	441a      	add	r2, r3
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	3304      	adds	r3, #4
 8005ecc:	4619      	mov	r1, r3
 8005ece:	4610      	mov	r0, r2
 8005ed0:	f7ff fc00 	bl	80056d4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8005f48 <xTaskIncrementTick+0x168>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d3b9      	bcc.n	8005e56 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ee6:	e7b6      	b.n	8005e56 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ee8:	4b17      	ldr	r3, [pc, #92]	@ (8005f48 <xTaskIncrementTick+0x168>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eee:	4915      	ldr	r1, [pc, #84]	@ (8005f44 <xTaskIncrementTick+0x164>)
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	440b      	add	r3, r1
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d901      	bls.n	8005f04 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005f00:	2301      	movs	r3, #1
 8005f02:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005f04:	4b11      	ldr	r3, [pc, #68]	@ (8005f4c <xTaskIncrementTick+0x16c>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d007      	beq.n	8005f1c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	617b      	str	r3, [r7, #20]
 8005f10:	e004      	b.n	8005f1c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005f12:	4b0f      	ldr	r3, [pc, #60]	@ (8005f50 <xTaskIncrementTick+0x170>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3301      	adds	r3, #1
 8005f18:	4a0d      	ldr	r2, [pc, #52]	@ (8005f50 <xTaskIncrementTick+0x170>)
 8005f1a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f1c:	697b      	ldr	r3, [r7, #20]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	20000bc4 	.word	0x20000bc4
 8005f2c:	20000ba0 	.word	0x20000ba0
 8005f30:	20000b54 	.word	0x20000b54
 8005f34:	20000b58 	.word	0x20000b58
 8005f38:	20000bb4 	.word	0x20000bb4
 8005f3c:	20000bbc 	.word	0x20000bbc
 8005f40:	20000ba4 	.word	0x20000ba4
 8005f44:	20000aa0 	.word	0x20000aa0
 8005f48:	20000a9c 	.word	0x20000a9c
 8005f4c:	20000bb0 	.word	0x20000bb0
 8005f50:	20000bac 	.word	0x20000bac

08005f54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f5a:	4b2a      	ldr	r3, [pc, #168]	@ (8006004 <vTaskSwitchContext+0xb0>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f62:	4b29      	ldr	r3, [pc, #164]	@ (8006008 <vTaskSwitchContext+0xb4>)
 8005f64:	2201      	movs	r2, #1
 8005f66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f68:	e045      	b.n	8005ff6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005f6a:	4b27      	ldr	r3, [pc, #156]	@ (8006008 <vTaskSwitchContext+0xb4>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f70:	4b26      	ldr	r3, [pc, #152]	@ (800600c <vTaskSwitchContext+0xb8>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	fab3 f383 	clz	r3, r3
 8005f7c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005f7e:	7afb      	ldrb	r3, [r7, #11]
 8005f80:	f1c3 031f 	rsb	r3, r3, #31
 8005f84:	617b      	str	r3, [r7, #20]
 8005f86:	4922      	ldr	r1, [pc, #136]	@ (8006010 <vTaskSwitchContext+0xbc>)
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	440b      	add	r3, r1
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10b      	bne.n	8005fb2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8005f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f9e:	f383 8811 	msr	BASEPRI, r3
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	607b      	str	r3, [r7, #4]
}
 8005fac:	bf00      	nop
 8005fae:	bf00      	nop
 8005fb0:	e7fd      	b.n	8005fae <vTaskSwitchContext+0x5a>
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4a14      	ldr	r2, [pc, #80]	@ (8006010 <vTaskSwitchContext+0xbc>)
 8005fbe:	4413      	add	r3, r2
 8005fc0:	613b      	str	r3, [r7, #16]
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	605a      	str	r2, [r3, #4]
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	3308      	adds	r3, #8
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d104      	bne.n	8005fe2 <vTaskSwitchContext+0x8e>
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	605a      	str	r2, [r3, #4]
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	4a0a      	ldr	r2, [pc, #40]	@ (8006014 <vTaskSwitchContext+0xc0>)
 8005fea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005fec:	4b09      	ldr	r3, [pc, #36]	@ (8006014 <vTaskSwitchContext+0xc0>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	334c      	adds	r3, #76	@ 0x4c
 8005ff2:	4a09      	ldr	r2, [pc, #36]	@ (8006018 <vTaskSwitchContext+0xc4>)
 8005ff4:	6013      	str	r3, [r2, #0]
}
 8005ff6:	bf00      	nop
 8005ff8:	371c      	adds	r7, #28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	20000bc4 	.word	0x20000bc4
 8006008:	20000bb0 	.word	0x20000bb0
 800600c:	20000ba4 	.word	0x20000ba4
 8006010:	20000aa0 	.word	0x20000aa0
 8006014:	20000a9c 	.word	0x20000a9c
 8006018:	20000010 	.word	0x20000010

0800601c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006024:	f000 f852 	bl	80060cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006028:	4b06      	ldr	r3, [pc, #24]	@ (8006044 <prvIdleTask+0x28>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d9f9      	bls.n	8006024 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006030:	4b05      	ldr	r3, [pc, #20]	@ (8006048 <prvIdleTask+0x2c>)
 8006032:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006040:	e7f0      	b.n	8006024 <prvIdleTask+0x8>
 8006042:	bf00      	nop
 8006044:	20000aa0 	.word	0x20000aa0
 8006048:	e000ed04 	.word	0xe000ed04

0800604c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006052:	2300      	movs	r3, #0
 8006054:	607b      	str	r3, [r7, #4]
 8006056:	e00c      	b.n	8006072 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	4613      	mov	r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4413      	add	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4a12      	ldr	r2, [pc, #72]	@ (80060ac <prvInitialiseTaskLists+0x60>)
 8006064:	4413      	add	r3, r2
 8006066:	4618      	mov	r0, r3
 8006068:	f7ff fb07 	bl	800567a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	3301      	adds	r3, #1
 8006070:	607b      	str	r3, [r7, #4]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b06      	cmp	r3, #6
 8006076:	d9ef      	bls.n	8006058 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006078:	480d      	ldr	r0, [pc, #52]	@ (80060b0 <prvInitialiseTaskLists+0x64>)
 800607a:	f7ff fafe 	bl	800567a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800607e:	480d      	ldr	r0, [pc, #52]	@ (80060b4 <prvInitialiseTaskLists+0x68>)
 8006080:	f7ff fafb 	bl	800567a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006084:	480c      	ldr	r0, [pc, #48]	@ (80060b8 <prvInitialiseTaskLists+0x6c>)
 8006086:	f7ff faf8 	bl	800567a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800608a:	480c      	ldr	r0, [pc, #48]	@ (80060bc <prvInitialiseTaskLists+0x70>)
 800608c:	f7ff faf5 	bl	800567a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006090:	480b      	ldr	r0, [pc, #44]	@ (80060c0 <prvInitialiseTaskLists+0x74>)
 8006092:	f7ff faf2 	bl	800567a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006096:	4b0b      	ldr	r3, [pc, #44]	@ (80060c4 <prvInitialiseTaskLists+0x78>)
 8006098:	4a05      	ldr	r2, [pc, #20]	@ (80060b0 <prvInitialiseTaskLists+0x64>)
 800609a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800609c:	4b0a      	ldr	r3, [pc, #40]	@ (80060c8 <prvInitialiseTaskLists+0x7c>)
 800609e:	4a05      	ldr	r2, [pc, #20]	@ (80060b4 <prvInitialiseTaskLists+0x68>)
 80060a0:	601a      	str	r2, [r3, #0]
}
 80060a2:	bf00      	nop
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	20000aa0 	.word	0x20000aa0
 80060b0:	20000b2c 	.word	0x20000b2c
 80060b4:	20000b40 	.word	0x20000b40
 80060b8:	20000b5c 	.word	0x20000b5c
 80060bc:	20000b70 	.word	0x20000b70
 80060c0:	20000b88 	.word	0x20000b88
 80060c4:	20000b54 	.word	0x20000b54
 80060c8:	20000b58 	.word	0x20000b58

080060cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060d2:	e019      	b.n	8006108 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80060d4:	f000 fa18 	bl	8006508 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060d8:	4b10      	ldr	r3, [pc, #64]	@ (800611c <prvCheckTasksWaitingTermination+0x50>)
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	3304      	adds	r3, #4
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7ff fb52 	bl	800578e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80060ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006120 <prvCheckTasksWaitingTermination+0x54>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3b01      	subs	r3, #1
 80060f0:	4a0b      	ldr	r2, [pc, #44]	@ (8006120 <prvCheckTasksWaitingTermination+0x54>)
 80060f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80060f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006124 <prvCheckTasksWaitingTermination+0x58>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3b01      	subs	r3, #1
 80060fa:	4a0a      	ldr	r2, [pc, #40]	@ (8006124 <prvCheckTasksWaitingTermination+0x58>)
 80060fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80060fe:	f000 fa35 	bl	800656c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f810 	bl	8006128 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006108:	4b06      	ldr	r3, [pc, #24]	@ (8006124 <prvCheckTasksWaitingTermination+0x58>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1e1      	bne.n	80060d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006110:	bf00      	nop
 8006112:	bf00      	nop
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	20000b70 	.word	0x20000b70
 8006120:	20000b9c 	.word	0x20000b9c
 8006124:	20000b84 	.word	0x20000b84

08006128 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	334c      	adds	r3, #76	@ 0x4c
 8006134:	4618      	mov	r0, r3
 8006136:	f000 fe4b 	bl	8006dd0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006140:	2b00      	cmp	r3, #0
 8006142:	d108      	bne.n	8006156 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006148:	4618      	mov	r0, r3
 800614a:	f000 fb8b 	bl	8006864 <vPortFree>
				vPortFree( pxTCB );
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fb88 	bl	8006864 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006154:	e019      	b.n	800618a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800615c:	2b01      	cmp	r3, #1
 800615e:	d103      	bne.n	8006168 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fb7f 	bl	8006864 <vPortFree>
	}
 8006166:	e010      	b.n	800618a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800616e:	2b02      	cmp	r3, #2
 8006170:	d00b      	beq.n	800618a <prvDeleteTCB+0x62>
	__asm volatile
 8006172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006176:	f383 8811 	msr	BASEPRI, r3
 800617a:	f3bf 8f6f 	isb	sy
 800617e:	f3bf 8f4f 	dsb	sy
 8006182:	60fb      	str	r3, [r7, #12]
}
 8006184:	bf00      	nop
 8006186:	bf00      	nop
 8006188:	e7fd      	b.n	8006186 <prvDeleteTCB+0x5e>
	}
 800618a:	bf00      	nop
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
	...

08006194 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800619a:	4b0c      	ldr	r3, [pc, #48]	@ (80061cc <prvResetNextTaskUnblockTime+0x38>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d104      	bne.n	80061ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80061a4:	4b0a      	ldr	r3, [pc, #40]	@ (80061d0 <prvResetNextTaskUnblockTime+0x3c>)
 80061a6:	f04f 32ff 	mov.w	r2, #4294967295
 80061aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80061ac:	e008      	b.n	80061c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061ae:	4b07      	ldr	r3, [pc, #28]	@ (80061cc <prvResetNextTaskUnblockTime+0x38>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	4a04      	ldr	r2, [pc, #16]	@ (80061d0 <prvResetNextTaskUnblockTime+0x3c>)
 80061be:	6013      	str	r3, [r2, #0]
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	20000b54 	.word	0x20000b54
 80061d0:	20000bbc 	.word	0x20000bbc

080061d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061de:	4b2b      	ldr	r3, [pc, #172]	@ (800628c <prvAddCurrentTaskToDelayedList+0xb8>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80061e4:	4b2a      	ldr	r3, [pc, #168]	@ (8006290 <prvAddCurrentTaskToDelayedList+0xbc>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061ee:	4b28      	ldr	r3, [pc, #160]	@ (8006290 <prvAddCurrentTaskToDelayedList+0xbc>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3304      	adds	r3, #4
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7ff faca 	bl	800578e <uxListRemove>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10b      	bne.n	8006218 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006200:	4b23      	ldr	r3, [pc, #140]	@ (8006290 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006206:	2201      	movs	r2, #1
 8006208:	fa02 f303 	lsl.w	r3, r2, r3
 800620c:	43da      	mvns	r2, r3
 800620e:	4b21      	ldr	r3, [pc, #132]	@ (8006294 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4013      	ands	r3, r2
 8006214:	4a1f      	ldr	r2, [pc, #124]	@ (8006294 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006216:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621e:	d10a      	bne.n	8006236 <prvAddCurrentTaskToDelayedList+0x62>
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d007      	beq.n	8006236 <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006226:	4b1a      	ldr	r3, [pc, #104]	@ (8006290 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	3304      	adds	r3, #4
 800622c:	4619      	mov	r1, r3
 800622e:	481a      	ldr	r0, [pc, #104]	@ (8006298 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006230:	f7ff fa50 	bl	80056d4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006234:	e026      	b.n	8006284 <prvAddCurrentTaskToDelayedList+0xb0>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4413      	add	r3, r2
 800623c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800623e:	4b14      	ldr	r3, [pc, #80]	@ (8006290 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006246:	68ba      	ldr	r2, [r7, #8]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	429a      	cmp	r2, r3
 800624c:	d209      	bcs.n	8006262 <prvAddCurrentTaskToDelayedList+0x8e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800624e:	4b13      	ldr	r3, [pc, #76]	@ (800629c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	4b0f      	ldr	r3, [pc, #60]	@ (8006290 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	3304      	adds	r3, #4
 8006258:	4619      	mov	r1, r3
 800625a:	4610      	mov	r0, r2
 800625c:	f7ff fa5e 	bl	800571c <vListInsert>
}
 8006260:	e010      	b.n	8006284 <prvAddCurrentTaskToDelayedList+0xb0>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006262:	4b0f      	ldr	r3, [pc, #60]	@ (80062a0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	4b0a      	ldr	r3, [pc, #40]	@ (8006290 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	3304      	adds	r3, #4
 800626c:	4619      	mov	r1, r3
 800626e:	4610      	mov	r0, r2
 8006270:	f7ff fa54 	bl	800571c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006274:	4b0b      	ldr	r3, [pc, #44]	@ (80062a4 <prvAddCurrentTaskToDelayedList+0xd0>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	429a      	cmp	r2, r3
 800627c:	d202      	bcs.n	8006284 <prvAddCurrentTaskToDelayedList+0xb0>
					xNextTaskUnblockTime = xTimeToWake;
 800627e:	4a09      	ldr	r2, [pc, #36]	@ (80062a4 <prvAddCurrentTaskToDelayedList+0xd0>)
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	6013      	str	r3, [r2, #0]
}
 8006284:	bf00      	nop
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	20000ba0 	.word	0x20000ba0
 8006290:	20000a9c 	.word	0x20000a9c
 8006294:	20000ba4 	.word	0x20000ba4
 8006298:	20000b88 	.word	0x20000b88
 800629c:	20000b58 	.word	0x20000b58
 80062a0:	20000b54 	.word	0x20000b54
 80062a4:	20000bbc 	.word	0x20000bbc

080062a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	3b04      	subs	r3, #4
 80062b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80062c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3b04      	subs	r3, #4
 80062c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f023 0201 	bic.w	r2, r3, #1
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	3b04      	subs	r3, #4
 80062d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80062d8:	4a0c      	ldr	r2, [pc, #48]	@ (800630c <pxPortInitialiseStack+0x64>)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3b14      	subs	r3, #20
 80062e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3b04      	subs	r3, #4
 80062ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f06f 0202 	mvn.w	r2, #2
 80062f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	3b20      	subs	r3, #32
 80062fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80062fe:	68fb      	ldr	r3, [r7, #12]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3714      	adds	r7, #20
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	08006311 	.word	0x08006311

08006310 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006316:	2300      	movs	r3, #0
 8006318:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800631a:	4b13      	ldr	r3, [pc, #76]	@ (8006368 <prvTaskExitError+0x58>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006322:	d00b      	beq.n	800633c <prvTaskExitError+0x2c>
	__asm volatile
 8006324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	60fb      	str	r3, [r7, #12]
}
 8006336:	bf00      	nop
 8006338:	bf00      	nop
 800633a:	e7fd      	b.n	8006338 <prvTaskExitError+0x28>
	__asm volatile
 800633c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006340:	f383 8811 	msr	BASEPRI, r3
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	60bb      	str	r3, [r7, #8]
}
 800634e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006350:	bf00      	nop
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d0fc      	beq.n	8006352 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006358:	bf00      	nop
 800635a:	bf00      	nop
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	2000000c 	.word	0x2000000c
 800636c:	00000000 	.word	0x00000000

08006370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006370:	4b07      	ldr	r3, [pc, #28]	@ (8006390 <pxCurrentTCBConst2>)
 8006372:	6819      	ldr	r1, [r3, #0]
 8006374:	6808      	ldr	r0, [r1, #0]
 8006376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800637a:	f380 8809 	msr	PSP, r0
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f04f 0000 	mov.w	r0, #0
 8006386:	f380 8811 	msr	BASEPRI, r0
 800638a:	4770      	bx	lr
 800638c:	f3af 8000 	nop.w

08006390 <pxCurrentTCBConst2>:
 8006390:	20000a9c 	.word	0x20000a9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006394:	bf00      	nop
 8006396:	bf00      	nop

08006398 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006398:	4808      	ldr	r0, [pc, #32]	@ (80063bc <prvPortStartFirstTask+0x24>)
 800639a:	6800      	ldr	r0, [r0, #0]
 800639c:	6800      	ldr	r0, [r0, #0]
 800639e:	f380 8808 	msr	MSP, r0
 80063a2:	f04f 0000 	mov.w	r0, #0
 80063a6:	f380 8814 	msr	CONTROL, r0
 80063aa:	b662      	cpsie	i
 80063ac:	b661      	cpsie	f
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	df00      	svc	0
 80063b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80063ba:	bf00      	nop
 80063bc:	e000ed08 	.word	0xe000ed08

080063c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80063c6:	4b47      	ldr	r3, [pc, #284]	@ (80064e4 <xPortStartScheduler+0x124>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a47      	ldr	r2, [pc, #284]	@ (80064e8 <xPortStartScheduler+0x128>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d10b      	bne.n	80063e8 <xPortStartScheduler+0x28>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	613b      	str	r3, [r7, #16]
}
 80063e2:	bf00      	nop
 80063e4:	bf00      	nop
 80063e6:	e7fd      	b.n	80063e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80063e8:	4b3e      	ldr	r3, [pc, #248]	@ (80064e4 <xPortStartScheduler+0x124>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a3f      	ldr	r2, [pc, #252]	@ (80064ec <xPortStartScheduler+0x12c>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d10b      	bne.n	800640a <xPortStartScheduler+0x4a>
	__asm volatile
 80063f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	60fb      	str	r3, [r7, #12]
}
 8006404:	bf00      	nop
 8006406:	bf00      	nop
 8006408:	e7fd      	b.n	8006406 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800640a:	4b39      	ldr	r3, [pc, #228]	@ (80064f0 <xPortStartScheduler+0x130>)
 800640c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	b2db      	uxtb	r3, r3
 8006414:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	22ff      	movs	r2, #255	@ 0xff
 800641a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	b2db      	uxtb	r3, r3
 8006422:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006424:	78fb      	ldrb	r3, [r7, #3]
 8006426:	b2db      	uxtb	r3, r3
 8006428:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800642c:	b2da      	uxtb	r2, r3
 800642e:	4b31      	ldr	r3, [pc, #196]	@ (80064f4 <xPortStartScheduler+0x134>)
 8006430:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006432:	4b31      	ldr	r3, [pc, #196]	@ (80064f8 <xPortStartScheduler+0x138>)
 8006434:	2207      	movs	r2, #7
 8006436:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006438:	e009      	b.n	800644e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800643a:	4b2f      	ldr	r3, [pc, #188]	@ (80064f8 <xPortStartScheduler+0x138>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	3b01      	subs	r3, #1
 8006440:	4a2d      	ldr	r2, [pc, #180]	@ (80064f8 <xPortStartScheduler+0x138>)
 8006442:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006444:	78fb      	ldrb	r3, [r7, #3]
 8006446:	b2db      	uxtb	r3, r3
 8006448:	005b      	lsls	r3, r3, #1
 800644a:	b2db      	uxtb	r3, r3
 800644c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800644e:	78fb      	ldrb	r3, [r7, #3]
 8006450:	b2db      	uxtb	r3, r3
 8006452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006456:	2b80      	cmp	r3, #128	@ 0x80
 8006458:	d0ef      	beq.n	800643a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800645a:	4b27      	ldr	r3, [pc, #156]	@ (80064f8 <xPortStartScheduler+0x138>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f1c3 0307 	rsb	r3, r3, #7
 8006462:	2b04      	cmp	r3, #4
 8006464:	d00b      	beq.n	800647e <xPortStartScheduler+0xbe>
	__asm volatile
 8006466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800646a:	f383 8811 	msr	BASEPRI, r3
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f3bf 8f4f 	dsb	sy
 8006476:	60bb      	str	r3, [r7, #8]
}
 8006478:	bf00      	nop
 800647a:	bf00      	nop
 800647c:	e7fd      	b.n	800647a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800647e:	4b1e      	ldr	r3, [pc, #120]	@ (80064f8 <xPortStartScheduler+0x138>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	021b      	lsls	r3, r3, #8
 8006484:	4a1c      	ldr	r2, [pc, #112]	@ (80064f8 <xPortStartScheduler+0x138>)
 8006486:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006488:	4b1b      	ldr	r3, [pc, #108]	@ (80064f8 <xPortStartScheduler+0x138>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006490:	4a19      	ldr	r2, [pc, #100]	@ (80064f8 <xPortStartScheduler+0x138>)
 8006492:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	b2da      	uxtb	r2, r3
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800649c:	4b17      	ldr	r3, [pc, #92]	@ (80064fc <xPortStartScheduler+0x13c>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a16      	ldr	r2, [pc, #88]	@ (80064fc <xPortStartScheduler+0x13c>)
 80064a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80064a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80064a8:	4b14      	ldr	r3, [pc, #80]	@ (80064fc <xPortStartScheduler+0x13c>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a13      	ldr	r2, [pc, #76]	@ (80064fc <xPortStartScheduler+0x13c>)
 80064ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80064b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80064b4:	f000 f8da 	bl	800666c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80064b8:	4b11      	ldr	r3, [pc, #68]	@ (8006500 <xPortStartScheduler+0x140>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80064be:	f000 f8f9 	bl	80066b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80064c2:	4b10      	ldr	r3, [pc, #64]	@ (8006504 <xPortStartScheduler+0x144>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a0f      	ldr	r2, [pc, #60]	@ (8006504 <xPortStartScheduler+0x144>)
 80064c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80064cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80064ce:	f7ff ff63 	bl	8006398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80064d2:	f7ff fd3f 	bl	8005f54 <vTaskSwitchContext>
	prvTaskExitError();
 80064d6:	f7ff ff1b 	bl	8006310 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3718      	adds	r7, #24
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	e000ed00 	.word	0xe000ed00
 80064e8:	410fc271 	.word	0x410fc271
 80064ec:	410fc270 	.word	0x410fc270
 80064f0:	e000e400 	.word	0xe000e400
 80064f4:	20000bc8 	.word	0x20000bc8
 80064f8:	20000bcc 	.word	0x20000bcc
 80064fc:	e000ed20 	.word	0xe000ed20
 8006500:	2000000c 	.word	0x2000000c
 8006504:	e000ef34 	.word	0xe000ef34

08006508 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
	__asm volatile
 800650e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	607b      	str	r3, [r7, #4]
}
 8006520:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006522:	4b10      	ldr	r3, [pc, #64]	@ (8006564 <vPortEnterCritical+0x5c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	3301      	adds	r3, #1
 8006528:	4a0e      	ldr	r2, [pc, #56]	@ (8006564 <vPortEnterCritical+0x5c>)
 800652a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800652c:	4b0d      	ldr	r3, [pc, #52]	@ (8006564 <vPortEnterCritical+0x5c>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d110      	bne.n	8006556 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006534:	4b0c      	ldr	r3, [pc, #48]	@ (8006568 <vPortEnterCritical+0x60>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00b      	beq.n	8006556 <vPortEnterCritical+0x4e>
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	603b      	str	r3, [r7, #0]
}
 8006550:	bf00      	nop
 8006552:	bf00      	nop
 8006554:	e7fd      	b.n	8006552 <vPortEnterCritical+0x4a>
	}
}
 8006556:	bf00      	nop
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	2000000c 	.word	0x2000000c
 8006568:	e000ed04 	.word	0xe000ed04

0800656c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006572:	4b12      	ldr	r3, [pc, #72]	@ (80065bc <vPortExitCritical+0x50>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10b      	bne.n	8006592 <vPortExitCritical+0x26>
	__asm volatile
 800657a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800657e:	f383 8811 	msr	BASEPRI, r3
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	f3bf 8f4f 	dsb	sy
 800658a:	607b      	str	r3, [r7, #4]
}
 800658c:	bf00      	nop
 800658e:	bf00      	nop
 8006590:	e7fd      	b.n	800658e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006592:	4b0a      	ldr	r3, [pc, #40]	@ (80065bc <vPortExitCritical+0x50>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	3b01      	subs	r3, #1
 8006598:	4a08      	ldr	r2, [pc, #32]	@ (80065bc <vPortExitCritical+0x50>)
 800659a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800659c:	4b07      	ldr	r3, [pc, #28]	@ (80065bc <vPortExitCritical+0x50>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d105      	bne.n	80065b0 <vPortExitCritical+0x44>
 80065a4:	2300      	movs	r3, #0
 80065a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80065ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	2000000c 	.word	0x2000000c

080065c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80065c0:	f3ef 8009 	mrs	r0, PSP
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	4b15      	ldr	r3, [pc, #84]	@ (8006620 <pxCurrentTCBConst>)
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	f01e 0f10 	tst.w	lr, #16
 80065d0:	bf08      	it	eq
 80065d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80065d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065da:	6010      	str	r0, [r2, #0]
 80065dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80065e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80065e4:	f380 8811 	msr	BASEPRI, r0
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	f3bf 8f6f 	isb	sy
 80065f0:	f7ff fcb0 	bl	8005f54 <vTaskSwitchContext>
 80065f4:	f04f 0000 	mov.w	r0, #0
 80065f8:	f380 8811 	msr	BASEPRI, r0
 80065fc:	bc09      	pop	{r0, r3}
 80065fe:	6819      	ldr	r1, [r3, #0]
 8006600:	6808      	ldr	r0, [r1, #0]
 8006602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006606:	f01e 0f10 	tst.w	lr, #16
 800660a:	bf08      	it	eq
 800660c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006610:	f380 8809 	msr	PSP, r0
 8006614:	f3bf 8f6f 	isb	sy
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	f3af 8000 	nop.w

08006620 <pxCurrentTCBConst>:
 8006620:	20000a9c 	.word	0x20000a9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006624:	bf00      	nop
 8006626:	bf00      	nop

08006628 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
	__asm volatile
 800662e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	607b      	str	r3, [r7, #4]
}
 8006640:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006642:	f7ff fbcd 	bl	8005de0 <xTaskIncrementTick>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800664c:	4b06      	ldr	r3, [pc, #24]	@ (8006668 <SysTick_Handler+0x40>)
 800664e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006652:	601a      	str	r2, [r3, #0]
 8006654:	2300      	movs	r3, #0
 8006656:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	f383 8811 	msr	BASEPRI, r3
}
 800665e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006660:	bf00      	nop
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	e000ed04 	.word	0xe000ed04

0800666c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800666c:	b480      	push	{r7}
 800666e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006670:	4b0b      	ldr	r3, [pc, #44]	@ (80066a0 <vPortSetupTimerInterrupt+0x34>)
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006676:	4b0b      	ldr	r3, [pc, #44]	@ (80066a4 <vPortSetupTimerInterrupt+0x38>)
 8006678:	2200      	movs	r2, #0
 800667a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800667c:	4b0a      	ldr	r3, [pc, #40]	@ (80066a8 <vPortSetupTimerInterrupt+0x3c>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a0a      	ldr	r2, [pc, #40]	@ (80066ac <vPortSetupTimerInterrupt+0x40>)
 8006682:	fba2 2303 	umull	r2, r3, r2, r3
 8006686:	099b      	lsrs	r3, r3, #6
 8006688:	4a09      	ldr	r2, [pc, #36]	@ (80066b0 <vPortSetupTimerInterrupt+0x44>)
 800668a:	3b01      	subs	r3, #1
 800668c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800668e:	4b04      	ldr	r3, [pc, #16]	@ (80066a0 <vPortSetupTimerInterrupt+0x34>)
 8006690:	2207      	movs	r2, #7
 8006692:	601a      	str	r2, [r3, #0]
}
 8006694:	bf00      	nop
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	e000e010 	.word	0xe000e010
 80066a4:	e000e018 	.word	0xe000e018
 80066a8:	20000000 	.word	0x20000000
 80066ac:	10624dd3 	.word	0x10624dd3
 80066b0:	e000e014 	.word	0xe000e014

080066b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80066b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80066c4 <vPortEnableVFP+0x10>
 80066b8:	6801      	ldr	r1, [r0, #0]
 80066ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80066be:	6001      	str	r1, [r0, #0]
 80066c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80066c2:	bf00      	nop
 80066c4:	e000ed88 	.word	0xe000ed88

080066c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b08a      	sub	sp, #40	@ 0x28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066d0:	2300      	movs	r3, #0
 80066d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066d4:	f7ff fad8 	bl	8005c88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066d8:	4b5c      	ldr	r3, [pc, #368]	@ (800684c <pvPortMalloc+0x184>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066e0:	f000 f924 	bl	800692c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066e4:	4b5a      	ldr	r3, [pc, #360]	@ (8006850 <pvPortMalloc+0x188>)
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4013      	ands	r3, r2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f040 8095 	bne.w	800681c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d01e      	beq.n	8006736 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80066f8:	2208      	movs	r2, #8
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4413      	add	r3, r2
 80066fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f003 0307 	and.w	r3, r3, #7
 8006706:	2b00      	cmp	r3, #0
 8006708:	d015      	beq.n	8006736 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f023 0307 	bic.w	r3, r3, #7
 8006710:	3308      	adds	r3, #8
 8006712:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f003 0307 	and.w	r3, r3, #7
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00b      	beq.n	8006736 <pvPortMalloc+0x6e>
	__asm volatile
 800671e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	617b      	str	r3, [r7, #20]
}
 8006730:	bf00      	nop
 8006732:	bf00      	nop
 8006734:	e7fd      	b.n	8006732 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d06f      	beq.n	800681c <pvPortMalloc+0x154>
 800673c:	4b45      	ldr	r3, [pc, #276]	@ (8006854 <pvPortMalloc+0x18c>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	429a      	cmp	r2, r3
 8006744:	d86a      	bhi.n	800681c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006746:	4b44      	ldr	r3, [pc, #272]	@ (8006858 <pvPortMalloc+0x190>)
 8006748:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800674a:	4b43      	ldr	r3, [pc, #268]	@ (8006858 <pvPortMalloc+0x190>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006750:	e004      	b.n	800675c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006754:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800675c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	429a      	cmp	r2, r3
 8006764:	d903      	bls.n	800676e <pvPortMalloc+0xa6>
 8006766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1f1      	bne.n	8006752 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800676e:	4b37      	ldr	r3, [pc, #220]	@ (800684c <pvPortMalloc+0x184>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006774:	429a      	cmp	r2, r3
 8006776:	d051      	beq.n	800681c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2208      	movs	r2, #8
 800677e:	4413      	add	r3, r2
 8006780:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	6a3b      	ldr	r3, [r7, #32]
 8006788:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800678a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678c:	685a      	ldr	r2, [r3, #4]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	1ad2      	subs	r2, r2, r3
 8006792:	2308      	movs	r3, #8
 8006794:	005b      	lsls	r3, r3, #1
 8006796:	429a      	cmp	r2, r3
 8006798:	d920      	bls.n	80067dc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800679a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4413      	add	r3, r2
 80067a0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	f003 0307 	and.w	r3, r3, #7
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00b      	beq.n	80067c4 <pvPortMalloc+0xfc>
	__asm volatile
 80067ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b0:	f383 8811 	msr	BASEPRI, r3
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	613b      	str	r3, [r7, #16]
}
 80067be:	bf00      	nop
 80067c0:	bf00      	nop
 80067c2:	e7fd      	b.n	80067c0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	1ad2      	subs	r2, r2, r3
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067d6:	69b8      	ldr	r0, [r7, #24]
 80067d8:	f000 f90a 	bl	80069f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067dc:	4b1d      	ldr	r3, [pc, #116]	@ (8006854 <pvPortMalloc+0x18c>)
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006854 <pvPortMalloc+0x18c>)
 80067e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067ea:	4b1a      	ldr	r3, [pc, #104]	@ (8006854 <pvPortMalloc+0x18c>)
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	4b1b      	ldr	r3, [pc, #108]	@ (800685c <pvPortMalloc+0x194>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d203      	bcs.n	80067fe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067f6:	4b17      	ldr	r3, [pc, #92]	@ (8006854 <pvPortMalloc+0x18c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a18      	ldr	r2, [pc, #96]	@ (800685c <pvPortMalloc+0x194>)
 80067fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	4b13      	ldr	r3, [pc, #76]	@ (8006850 <pvPortMalloc+0x188>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	431a      	orrs	r2, r3
 8006808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800680c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680e:	2200      	movs	r2, #0
 8006810:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006812:	4b13      	ldr	r3, [pc, #76]	@ (8006860 <pvPortMalloc+0x198>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3301      	adds	r3, #1
 8006818:	4a11      	ldr	r2, [pc, #68]	@ (8006860 <pvPortMalloc+0x198>)
 800681a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800681c:	f7ff fa42 	bl	8005ca4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	f003 0307 	and.w	r3, r3, #7
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00b      	beq.n	8006842 <pvPortMalloc+0x17a>
	__asm volatile
 800682a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800682e:	f383 8811 	msr	BASEPRI, r3
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	60fb      	str	r3, [r7, #12]
}
 800683c:	bf00      	nop
 800683e:	bf00      	nop
 8006840:	e7fd      	b.n	800683e <pvPortMalloc+0x176>
	return pvReturn;
 8006842:	69fb      	ldr	r3, [r7, #28]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3728      	adds	r7, #40	@ 0x28
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	200047d8 	.word	0x200047d8
 8006850:	200047ec 	.word	0x200047ec
 8006854:	200047dc 	.word	0x200047dc
 8006858:	200047d0 	.word	0x200047d0
 800685c:	200047e0 	.word	0x200047e0
 8006860:	200047e4 	.word	0x200047e4

08006864 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d04f      	beq.n	8006916 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006876:	2308      	movs	r3, #8
 8006878:	425b      	negs	r3, r3
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	4413      	add	r3, r2
 800687e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	4b25      	ldr	r3, [pc, #148]	@ (8006920 <vPortFree+0xbc>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4013      	ands	r3, r2
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10b      	bne.n	80068aa <vPortFree+0x46>
	__asm volatile
 8006892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	60fb      	str	r3, [r7, #12]
}
 80068a4:	bf00      	nop
 80068a6:	bf00      	nop
 80068a8:	e7fd      	b.n	80068a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00b      	beq.n	80068ca <vPortFree+0x66>
	__asm volatile
 80068b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b6:	f383 8811 	msr	BASEPRI, r3
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	60bb      	str	r3, [r7, #8]
}
 80068c4:	bf00      	nop
 80068c6:	bf00      	nop
 80068c8:	e7fd      	b.n	80068c6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	685a      	ldr	r2, [r3, #4]
 80068ce:	4b14      	ldr	r3, [pc, #80]	@ (8006920 <vPortFree+0xbc>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4013      	ands	r3, r2
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d01e      	beq.n	8006916 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d11a      	bne.n	8006916 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	685a      	ldr	r2, [r3, #4]
 80068e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006920 <vPortFree+0xbc>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	43db      	mvns	r3, r3
 80068ea:	401a      	ands	r2, r3
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80068f0:	f7ff f9ca 	bl	8005c88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	4b0a      	ldr	r3, [pc, #40]	@ (8006924 <vPortFree+0xc0>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4413      	add	r3, r2
 80068fe:	4a09      	ldr	r2, [pc, #36]	@ (8006924 <vPortFree+0xc0>)
 8006900:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006902:	6938      	ldr	r0, [r7, #16]
 8006904:	f000 f874 	bl	80069f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006908:	4b07      	ldr	r3, [pc, #28]	@ (8006928 <vPortFree+0xc4>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	3301      	adds	r3, #1
 800690e:	4a06      	ldr	r2, [pc, #24]	@ (8006928 <vPortFree+0xc4>)
 8006910:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006912:	f7ff f9c7 	bl	8005ca4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006916:	bf00      	nop
 8006918:	3718      	adds	r7, #24
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	200047ec 	.word	0x200047ec
 8006924:	200047dc 	.word	0x200047dc
 8006928:	200047e8 	.word	0x200047e8

0800692c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006932:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006936:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006938:	4b27      	ldr	r3, [pc, #156]	@ (80069d8 <prvHeapInit+0xac>)
 800693a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f003 0307 	and.w	r3, r3, #7
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00c      	beq.n	8006960 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	3307      	adds	r3, #7
 800694a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f023 0307 	bic.w	r3, r3, #7
 8006952:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	4a1f      	ldr	r2, [pc, #124]	@ (80069d8 <prvHeapInit+0xac>)
 800695c:	4413      	add	r3, r2
 800695e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006964:	4a1d      	ldr	r2, [pc, #116]	@ (80069dc <prvHeapInit+0xb0>)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800696a:	4b1c      	ldr	r3, [pc, #112]	@ (80069dc <prvHeapInit+0xb0>)
 800696c:	2200      	movs	r2, #0
 800696e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	4413      	add	r3, r2
 8006976:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006978:	2208      	movs	r2, #8
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	1a9b      	subs	r3, r3, r2
 800697e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f023 0307 	bic.w	r3, r3, #7
 8006986:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	4a15      	ldr	r2, [pc, #84]	@ (80069e0 <prvHeapInit+0xb4>)
 800698c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800698e:	4b14      	ldr	r3, [pc, #80]	@ (80069e0 <prvHeapInit+0xb4>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2200      	movs	r2, #0
 8006994:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006996:	4b12      	ldr	r3, [pc, #72]	@ (80069e0 <prvHeapInit+0xb4>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2200      	movs	r2, #0
 800699c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	1ad2      	subs	r2, r2, r3
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069ac:	4b0c      	ldr	r3, [pc, #48]	@ (80069e0 <prvHeapInit+0xb4>)
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	4a0a      	ldr	r2, [pc, #40]	@ (80069e4 <prvHeapInit+0xb8>)
 80069ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	4a09      	ldr	r2, [pc, #36]	@ (80069e8 <prvHeapInit+0xbc>)
 80069c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80069c4:	4b09      	ldr	r3, [pc, #36]	@ (80069ec <prvHeapInit+0xc0>)
 80069c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80069ca:	601a      	str	r2, [r3, #0]
}
 80069cc:	bf00      	nop
 80069ce:	3714      	adds	r7, #20
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr
 80069d8:	20000bd0 	.word	0x20000bd0
 80069dc:	200047d0 	.word	0x200047d0
 80069e0:	200047d8 	.word	0x200047d8
 80069e4:	200047e0 	.word	0x200047e0
 80069e8:	200047dc 	.word	0x200047dc
 80069ec:	200047ec 	.word	0x200047ec

080069f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069f8:	4b28      	ldr	r3, [pc, #160]	@ (8006a9c <prvInsertBlockIntoFreeList+0xac>)
 80069fa:	60fb      	str	r3, [r7, #12]
 80069fc:	e002      	b.n	8006a04 <prvInsertBlockIntoFreeList+0x14>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d8f7      	bhi.n	80069fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	4413      	add	r3, r2
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d108      	bne.n	8006a32 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	441a      	add	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	441a      	add	r2, r3
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d118      	bne.n	8006a78 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	4b15      	ldr	r3, [pc, #84]	@ (8006aa0 <prvInsertBlockIntoFreeList+0xb0>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d00d      	beq.n	8006a6e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685a      	ldr	r2, [r3, #4]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	441a      	add	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	601a      	str	r2, [r3, #0]
 8006a6c:	e008      	b.n	8006a80 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa0 <prvInsertBlockIntoFreeList+0xb0>)
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	601a      	str	r2, [r3, #0]
 8006a76:	e003      	b.n	8006a80 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d002      	beq.n	8006a8e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a8e:	bf00      	nop
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	200047d0 	.word	0x200047d0
 8006aa0:	200047d8 	.word	0x200047d8

08006aa4 <malloc>:
 8006aa4:	4b02      	ldr	r3, [pc, #8]	@ (8006ab0 <malloc+0xc>)
 8006aa6:	4601      	mov	r1, r0
 8006aa8:	6818      	ldr	r0, [r3, #0]
 8006aaa:	f000 b825 	b.w	8006af8 <_malloc_r>
 8006aae:	bf00      	nop
 8006ab0:	20000010 	.word	0x20000010

08006ab4 <sbrk_aligned>:
 8006ab4:	b570      	push	{r4, r5, r6, lr}
 8006ab6:	4e0f      	ldr	r6, [pc, #60]	@ (8006af4 <sbrk_aligned+0x40>)
 8006ab8:	460c      	mov	r4, r1
 8006aba:	6831      	ldr	r1, [r6, #0]
 8006abc:	4605      	mov	r5, r0
 8006abe:	b911      	cbnz	r1, 8006ac6 <sbrk_aligned+0x12>
 8006ac0:	f000 f9dc 	bl	8006e7c <_sbrk_r>
 8006ac4:	6030      	str	r0, [r6, #0]
 8006ac6:	4621      	mov	r1, r4
 8006ac8:	4628      	mov	r0, r5
 8006aca:	f000 f9d7 	bl	8006e7c <_sbrk_r>
 8006ace:	1c43      	adds	r3, r0, #1
 8006ad0:	d103      	bne.n	8006ada <sbrk_aligned+0x26>
 8006ad2:	f04f 34ff 	mov.w	r4, #4294967295
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	bd70      	pop	{r4, r5, r6, pc}
 8006ada:	1cc4      	adds	r4, r0, #3
 8006adc:	f024 0403 	bic.w	r4, r4, #3
 8006ae0:	42a0      	cmp	r0, r4
 8006ae2:	d0f8      	beq.n	8006ad6 <sbrk_aligned+0x22>
 8006ae4:	1a21      	subs	r1, r4, r0
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	f000 f9c8 	bl	8006e7c <_sbrk_r>
 8006aec:	3001      	adds	r0, #1
 8006aee:	d1f2      	bne.n	8006ad6 <sbrk_aligned+0x22>
 8006af0:	e7ef      	b.n	8006ad2 <sbrk_aligned+0x1e>
 8006af2:	bf00      	nop
 8006af4:	200047f0 	.word	0x200047f0

08006af8 <_malloc_r>:
 8006af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006afc:	1ccd      	adds	r5, r1, #3
 8006afe:	f025 0503 	bic.w	r5, r5, #3
 8006b02:	3508      	adds	r5, #8
 8006b04:	2d0c      	cmp	r5, #12
 8006b06:	bf38      	it	cc
 8006b08:	250c      	movcc	r5, #12
 8006b0a:	2d00      	cmp	r5, #0
 8006b0c:	4606      	mov	r6, r0
 8006b0e:	db01      	blt.n	8006b14 <_malloc_r+0x1c>
 8006b10:	42a9      	cmp	r1, r5
 8006b12:	d904      	bls.n	8006b1e <_malloc_r+0x26>
 8006b14:	230c      	movs	r3, #12
 8006b16:	6033      	str	r3, [r6, #0]
 8006b18:	2000      	movs	r0, #0
 8006b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006bf4 <_malloc_r+0xfc>
 8006b22:	f000 f869 	bl	8006bf8 <__malloc_lock>
 8006b26:	f8d8 3000 	ldr.w	r3, [r8]
 8006b2a:	461c      	mov	r4, r3
 8006b2c:	bb44      	cbnz	r4, 8006b80 <_malloc_r+0x88>
 8006b2e:	4629      	mov	r1, r5
 8006b30:	4630      	mov	r0, r6
 8006b32:	f7ff ffbf 	bl	8006ab4 <sbrk_aligned>
 8006b36:	1c43      	adds	r3, r0, #1
 8006b38:	4604      	mov	r4, r0
 8006b3a:	d158      	bne.n	8006bee <_malloc_r+0xf6>
 8006b3c:	f8d8 4000 	ldr.w	r4, [r8]
 8006b40:	4627      	mov	r7, r4
 8006b42:	2f00      	cmp	r7, #0
 8006b44:	d143      	bne.n	8006bce <_malloc_r+0xd6>
 8006b46:	2c00      	cmp	r4, #0
 8006b48:	d04b      	beq.n	8006be2 <_malloc_r+0xea>
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	4639      	mov	r1, r7
 8006b4e:	4630      	mov	r0, r6
 8006b50:	eb04 0903 	add.w	r9, r4, r3
 8006b54:	f000 f992 	bl	8006e7c <_sbrk_r>
 8006b58:	4581      	cmp	r9, r0
 8006b5a:	d142      	bne.n	8006be2 <_malloc_r+0xea>
 8006b5c:	6821      	ldr	r1, [r4, #0]
 8006b5e:	1a6d      	subs	r5, r5, r1
 8006b60:	4629      	mov	r1, r5
 8006b62:	4630      	mov	r0, r6
 8006b64:	f7ff ffa6 	bl	8006ab4 <sbrk_aligned>
 8006b68:	3001      	adds	r0, #1
 8006b6a:	d03a      	beq.n	8006be2 <_malloc_r+0xea>
 8006b6c:	6823      	ldr	r3, [r4, #0]
 8006b6e:	442b      	add	r3, r5
 8006b70:	6023      	str	r3, [r4, #0]
 8006b72:	f8d8 3000 	ldr.w	r3, [r8]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	bb62      	cbnz	r2, 8006bd4 <_malloc_r+0xdc>
 8006b7a:	f8c8 7000 	str.w	r7, [r8]
 8006b7e:	e00f      	b.n	8006ba0 <_malloc_r+0xa8>
 8006b80:	6822      	ldr	r2, [r4, #0]
 8006b82:	1b52      	subs	r2, r2, r5
 8006b84:	d420      	bmi.n	8006bc8 <_malloc_r+0xd0>
 8006b86:	2a0b      	cmp	r2, #11
 8006b88:	d917      	bls.n	8006bba <_malloc_r+0xc2>
 8006b8a:	1961      	adds	r1, r4, r5
 8006b8c:	42a3      	cmp	r3, r4
 8006b8e:	6025      	str	r5, [r4, #0]
 8006b90:	bf18      	it	ne
 8006b92:	6059      	strne	r1, [r3, #4]
 8006b94:	6863      	ldr	r3, [r4, #4]
 8006b96:	bf08      	it	eq
 8006b98:	f8c8 1000 	streq.w	r1, [r8]
 8006b9c:	5162      	str	r2, [r4, r5]
 8006b9e:	604b      	str	r3, [r1, #4]
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	f000 f82f 	bl	8006c04 <__malloc_unlock>
 8006ba6:	f104 000b 	add.w	r0, r4, #11
 8006baa:	1d23      	adds	r3, r4, #4
 8006bac:	f020 0007 	bic.w	r0, r0, #7
 8006bb0:	1ac2      	subs	r2, r0, r3
 8006bb2:	bf1c      	itt	ne
 8006bb4:	1a1b      	subne	r3, r3, r0
 8006bb6:	50a3      	strne	r3, [r4, r2]
 8006bb8:	e7af      	b.n	8006b1a <_malloc_r+0x22>
 8006bba:	6862      	ldr	r2, [r4, #4]
 8006bbc:	42a3      	cmp	r3, r4
 8006bbe:	bf0c      	ite	eq
 8006bc0:	f8c8 2000 	streq.w	r2, [r8]
 8006bc4:	605a      	strne	r2, [r3, #4]
 8006bc6:	e7eb      	b.n	8006ba0 <_malloc_r+0xa8>
 8006bc8:	4623      	mov	r3, r4
 8006bca:	6864      	ldr	r4, [r4, #4]
 8006bcc:	e7ae      	b.n	8006b2c <_malloc_r+0x34>
 8006bce:	463c      	mov	r4, r7
 8006bd0:	687f      	ldr	r7, [r7, #4]
 8006bd2:	e7b6      	b.n	8006b42 <_malloc_r+0x4a>
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	42a3      	cmp	r3, r4
 8006bda:	d1fb      	bne.n	8006bd4 <_malloc_r+0xdc>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	6053      	str	r3, [r2, #4]
 8006be0:	e7de      	b.n	8006ba0 <_malloc_r+0xa8>
 8006be2:	230c      	movs	r3, #12
 8006be4:	6033      	str	r3, [r6, #0]
 8006be6:	4630      	mov	r0, r6
 8006be8:	f000 f80c 	bl	8006c04 <__malloc_unlock>
 8006bec:	e794      	b.n	8006b18 <_malloc_r+0x20>
 8006bee:	6005      	str	r5, [r0, #0]
 8006bf0:	e7d6      	b.n	8006ba0 <_malloc_r+0xa8>
 8006bf2:	bf00      	nop
 8006bf4:	200047f4 	.word	0x200047f4

08006bf8 <__malloc_lock>:
 8006bf8:	4801      	ldr	r0, [pc, #4]	@ (8006c00 <__malloc_lock+0x8>)
 8006bfa:	f000 b979 	b.w	8006ef0 <__retarget_lock_acquire_recursive>
 8006bfe:	bf00      	nop
 8006c00:	20004934 	.word	0x20004934

08006c04 <__malloc_unlock>:
 8006c04:	4801      	ldr	r0, [pc, #4]	@ (8006c0c <__malloc_unlock+0x8>)
 8006c06:	f000 b974 	b.w	8006ef2 <__retarget_lock_release_recursive>
 8006c0a:	bf00      	nop
 8006c0c:	20004934 	.word	0x20004934

08006c10 <_strtol_l.constprop.0>:
 8006c10:	2b24      	cmp	r3, #36	@ 0x24
 8006c12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c16:	4686      	mov	lr, r0
 8006c18:	4690      	mov	r8, r2
 8006c1a:	d801      	bhi.n	8006c20 <_strtol_l.constprop.0+0x10>
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d106      	bne.n	8006c2e <_strtol_l.constprop.0+0x1e>
 8006c20:	f000 f93c 	bl	8006e9c <__errno>
 8006c24:	2316      	movs	r3, #22
 8006c26:	6003      	str	r3, [r0, #0]
 8006c28:	2000      	movs	r0, #0
 8006c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c2e:	4834      	ldr	r0, [pc, #208]	@ (8006d00 <_strtol_l.constprop.0+0xf0>)
 8006c30:	460d      	mov	r5, r1
 8006c32:	462a      	mov	r2, r5
 8006c34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c38:	5d06      	ldrb	r6, [r0, r4]
 8006c3a:	f016 0608 	ands.w	r6, r6, #8
 8006c3e:	d1f8      	bne.n	8006c32 <_strtol_l.constprop.0+0x22>
 8006c40:	2c2d      	cmp	r4, #45	@ 0x2d
 8006c42:	d12d      	bne.n	8006ca0 <_strtol_l.constprop.0+0x90>
 8006c44:	782c      	ldrb	r4, [r5, #0]
 8006c46:	2601      	movs	r6, #1
 8006c48:	1c95      	adds	r5, r2, #2
 8006c4a:	f033 0210 	bics.w	r2, r3, #16
 8006c4e:	d109      	bne.n	8006c64 <_strtol_l.constprop.0+0x54>
 8006c50:	2c30      	cmp	r4, #48	@ 0x30
 8006c52:	d12a      	bne.n	8006caa <_strtol_l.constprop.0+0x9a>
 8006c54:	782a      	ldrb	r2, [r5, #0]
 8006c56:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006c5a:	2a58      	cmp	r2, #88	@ 0x58
 8006c5c:	d125      	bne.n	8006caa <_strtol_l.constprop.0+0x9a>
 8006c5e:	786c      	ldrb	r4, [r5, #1]
 8006c60:	2310      	movs	r3, #16
 8006c62:	3502      	adds	r5, #2
 8006c64:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006c68:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	fbbc f9f3 	udiv	r9, ip, r3
 8006c72:	4610      	mov	r0, r2
 8006c74:	fb03 ca19 	mls	sl, r3, r9, ip
 8006c78:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006c7c:	2f09      	cmp	r7, #9
 8006c7e:	d81b      	bhi.n	8006cb8 <_strtol_l.constprop.0+0xa8>
 8006c80:	463c      	mov	r4, r7
 8006c82:	42a3      	cmp	r3, r4
 8006c84:	dd27      	ble.n	8006cd6 <_strtol_l.constprop.0+0xc6>
 8006c86:	1c57      	adds	r7, r2, #1
 8006c88:	d007      	beq.n	8006c9a <_strtol_l.constprop.0+0x8a>
 8006c8a:	4581      	cmp	r9, r0
 8006c8c:	d320      	bcc.n	8006cd0 <_strtol_l.constprop.0+0xc0>
 8006c8e:	d101      	bne.n	8006c94 <_strtol_l.constprop.0+0x84>
 8006c90:	45a2      	cmp	sl, r4
 8006c92:	db1d      	blt.n	8006cd0 <_strtol_l.constprop.0+0xc0>
 8006c94:	fb00 4003 	mla	r0, r0, r3, r4
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c9e:	e7eb      	b.n	8006c78 <_strtol_l.constprop.0+0x68>
 8006ca0:	2c2b      	cmp	r4, #43	@ 0x2b
 8006ca2:	bf04      	itt	eq
 8006ca4:	782c      	ldrbeq	r4, [r5, #0]
 8006ca6:	1c95      	addeq	r5, r2, #2
 8006ca8:	e7cf      	b.n	8006c4a <_strtol_l.constprop.0+0x3a>
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1da      	bne.n	8006c64 <_strtol_l.constprop.0+0x54>
 8006cae:	2c30      	cmp	r4, #48	@ 0x30
 8006cb0:	bf0c      	ite	eq
 8006cb2:	2308      	moveq	r3, #8
 8006cb4:	230a      	movne	r3, #10
 8006cb6:	e7d5      	b.n	8006c64 <_strtol_l.constprop.0+0x54>
 8006cb8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006cbc:	2f19      	cmp	r7, #25
 8006cbe:	d801      	bhi.n	8006cc4 <_strtol_l.constprop.0+0xb4>
 8006cc0:	3c37      	subs	r4, #55	@ 0x37
 8006cc2:	e7de      	b.n	8006c82 <_strtol_l.constprop.0+0x72>
 8006cc4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006cc8:	2f19      	cmp	r7, #25
 8006cca:	d804      	bhi.n	8006cd6 <_strtol_l.constprop.0+0xc6>
 8006ccc:	3c57      	subs	r4, #87	@ 0x57
 8006cce:	e7d8      	b.n	8006c82 <_strtol_l.constprop.0+0x72>
 8006cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd4:	e7e1      	b.n	8006c9a <_strtol_l.constprop.0+0x8a>
 8006cd6:	1c53      	adds	r3, r2, #1
 8006cd8:	d108      	bne.n	8006cec <_strtol_l.constprop.0+0xdc>
 8006cda:	2322      	movs	r3, #34	@ 0x22
 8006cdc:	f8ce 3000 	str.w	r3, [lr]
 8006ce0:	4660      	mov	r0, ip
 8006ce2:	f1b8 0f00 	cmp.w	r8, #0
 8006ce6:	d0a0      	beq.n	8006c2a <_strtol_l.constprop.0+0x1a>
 8006ce8:	1e69      	subs	r1, r5, #1
 8006cea:	e006      	b.n	8006cfa <_strtol_l.constprop.0+0xea>
 8006cec:	b106      	cbz	r6, 8006cf0 <_strtol_l.constprop.0+0xe0>
 8006cee:	4240      	negs	r0, r0
 8006cf0:	f1b8 0f00 	cmp.w	r8, #0
 8006cf4:	d099      	beq.n	8006c2a <_strtol_l.constprop.0+0x1a>
 8006cf6:	2a00      	cmp	r2, #0
 8006cf8:	d1f6      	bne.n	8006ce8 <_strtol_l.constprop.0+0xd8>
 8006cfa:	f8c8 1000 	str.w	r1, [r8]
 8006cfe:	e794      	b.n	8006c2a <_strtol_l.constprop.0+0x1a>
 8006d00:	08007801 	.word	0x08007801

08006d04 <strtol>:
 8006d04:	4613      	mov	r3, r2
 8006d06:	460a      	mov	r2, r1
 8006d08:	4601      	mov	r1, r0
 8006d0a:	4802      	ldr	r0, [pc, #8]	@ (8006d14 <strtol+0x10>)
 8006d0c:	6800      	ldr	r0, [r0, #0]
 8006d0e:	f7ff bf7f 	b.w	8006c10 <_strtol_l.constprop.0>
 8006d12:	bf00      	nop
 8006d14:	20000010 	.word	0x20000010

08006d18 <sniprintf>:
 8006d18:	b40c      	push	{r2, r3}
 8006d1a:	b530      	push	{r4, r5, lr}
 8006d1c:	4b17      	ldr	r3, [pc, #92]	@ (8006d7c <sniprintf+0x64>)
 8006d1e:	1e0c      	subs	r4, r1, #0
 8006d20:	681d      	ldr	r5, [r3, #0]
 8006d22:	b09d      	sub	sp, #116	@ 0x74
 8006d24:	da08      	bge.n	8006d38 <sniprintf+0x20>
 8006d26:	238b      	movs	r3, #139	@ 0x8b
 8006d28:	602b      	str	r3, [r5, #0]
 8006d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d2e:	b01d      	add	sp, #116	@ 0x74
 8006d30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d34:	b002      	add	sp, #8
 8006d36:	4770      	bx	lr
 8006d38:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006d3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006d40:	bf14      	ite	ne
 8006d42:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006d46:	4623      	moveq	r3, r4
 8006d48:	9304      	str	r3, [sp, #16]
 8006d4a:	9307      	str	r3, [sp, #28]
 8006d4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006d50:	9002      	str	r0, [sp, #8]
 8006d52:	9006      	str	r0, [sp, #24]
 8006d54:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006d58:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006d5a:	ab21      	add	r3, sp, #132	@ 0x84
 8006d5c:	a902      	add	r1, sp, #8
 8006d5e:	4628      	mov	r0, r5
 8006d60:	9301      	str	r3, [sp, #4]
 8006d62:	f000 f97b 	bl	800705c <_svfiprintf_r>
 8006d66:	1c43      	adds	r3, r0, #1
 8006d68:	bfbc      	itt	lt
 8006d6a:	238b      	movlt	r3, #139	@ 0x8b
 8006d6c:	602b      	strlt	r3, [r5, #0]
 8006d6e:	2c00      	cmp	r4, #0
 8006d70:	d0dd      	beq.n	8006d2e <sniprintf+0x16>
 8006d72:	9b02      	ldr	r3, [sp, #8]
 8006d74:	2200      	movs	r2, #0
 8006d76:	701a      	strb	r2, [r3, #0]
 8006d78:	e7d9      	b.n	8006d2e <sniprintf+0x16>
 8006d7a:	bf00      	nop
 8006d7c:	20000010 	.word	0x20000010

08006d80 <siprintf>:
 8006d80:	b40e      	push	{r1, r2, r3}
 8006d82:	b500      	push	{lr}
 8006d84:	b09c      	sub	sp, #112	@ 0x70
 8006d86:	ab1d      	add	r3, sp, #116	@ 0x74
 8006d88:	9002      	str	r0, [sp, #8]
 8006d8a:	9006      	str	r0, [sp, #24]
 8006d8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006d90:	4809      	ldr	r0, [pc, #36]	@ (8006db8 <siprintf+0x38>)
 8006d92:	9107      	str	r1, [sp, #28]
 8006d94:	9104      	str	r1, [sp, #16]
 8006d96:	4909      	ldr	r1, [pc, #36]	@ (8006dbc <siprintf+0x3c>)
 8006d98:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d9c:	9105      	str	r1, [sp, #20]
 8006d9e:	6800      	ldr	r0, [r0, #0]
 8006da0:	9301      	str	r3, [sp, #4]
 8006da2:	a902      	add	r1, sp, #8
 8006da4:	f000 f95a 	bl	800705c <_svfiprintf_r>
 8006da8:	9b02      	ldr	r3, [sp, #8]
 8006daa:	2200      	movs	r2, #0
 8006dac:	701a      	strb	r2, [r3, #0]
 8006dae:	b01c      	add	sp, #112	@ 0x70
 8006db0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006db4:	b003      	add	sp, #12
 8006db6:	4770      	bx	lr
 8006db8:	20000010 	.word	0x20000010
 8006dbc:	ffff0208 	.word	0xffff0208

08006dc0 <memset>:
 8006dc0:	4402      	add	r2, r0
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d100      	bne.n	8006dca <memset+0xa>
 8006dc8:	4770      	bx	lr
 8006dca:	f803 1b01 	strb.w	r1, [r3], #1
 8006dce:	e7f9      	b.n	8006dc4 <memset+0x4>

08006dd0 <_reclaim_reent>:
 8006dd0:	4b29      	ldr	r3, [pc, #164]	@ (8006e78 <_reclaim_reent+0xa8>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4283      	cmp	r3, r0
 8006dd6:	b570      	push	{r4, r5, r6, lr}
 8006dd8:	4604      	mov	r4, r0
 8006dda:	d04b      	beq.n	8006e74 <_reclaim_reent+0xa4>
 8006ddc:	69c3      	ldr	r3, [r0, #28]
 8006dde:	b1ab      	cbz	r3, 8006e0c <_reclaim_reent+0x3c>
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	b16b      	cbz	r3, 8006e00 <_reclaim_reent+0x30>
 8006de4:	2500      	movs	r5, #0
 8006de6:	69e3      	ldr	r3, [r4, #28]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	5959      	ldr	r1, [r3, r5]
 8006dec:	2900      	cmp	r1, #0
 8006dee:	d13b      	bne.n	8006e68 <_reclaim_reent+0x98>
 8006df0:	3504      	adds	r5, #4
 8006df2:	2d80      	cmp	r5, #128	@ 0x80
 8006df4:	d1f7      	bne.n	8006de6 <_reclaim_reent+0x16>
 8006df6:	69e3      	ldr	r3, [r4, #28]
 8006df8:	4620      	mov	r0, r4
 8006dfa:	68d9      	ldr	r1, [r3, #12]
 8006dfc:	f000 f888 	bl	8006f10 <_free_r>
 8006e00:	69e3      	ldr	r3, [r4, #28]
 8006e02:	6819      	ldr	r1, [r3, #0]
 8006e04:	b111      	cbz	r1, 8006e0c <_reclaim_reent+0x3c>
 8006e06:	4620      	mov	r0, r4
 8006e08:	f000 f882 	bl	8006f10 <_free_r>
 8006e0c:	6961      	ldr	r1, [r4, #20]
 8006e0e:	b111      	cbz	r1, 8006e16 <_reclaim_reent+0x46>
 8006e10:	4620      	mov	r0, r4
 8006e12:	f000 f87d 	bl	8006f10 <_free_r>
 8006e16:	69e1      	ldr	r1, [r4, #28]
 8006e18:	b111      	cbz	r1, 8006e20 <_reclaim_reent+0x50>
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f000 f878 	bl	8006f10 <_free_r>
 8006e20:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006e22:	b111      	cbz	r1, 8006e2a <_reclaim_reent+0x5a>
 8006e24:	4620      	mov	r0, r4
 8006e26:	f000 f873 	bl	8006f10 <_free_r>
 8006e2a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e2c:	b111      	cbz	r1, 8006e34 <_reclaim_reent+0x64>
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f000 f86e 	bl	8006f10 <_free_r>
 8006e34:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006e36:	b111      	cbz	r1, 8006e3e <_reclaim_reent+0x6e>
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f000 f869 	bl	8006f10 <_free_r>
 8006e3e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006e40:	b111      	cbz	r1, 8006e48 <_reclaim_reent+0x78>
 8006e42:	4620      	mov	r0, r4
 8006e44:	f000 f864 	bl	8006f10 <_free_r>
 8006e48:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006e4a:	b111      	cbz	r1, 8006e52 <_reclaim_reent+0x82>
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	f000 f85f 	bl	8006f10 <_free_r>
 8006e52:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006e54:	b111      	cbz	r1, 8006e5c <_reclaim_reent+0x8c>
 8006e56:	4620      	mov	r0, r4
 8006e58:	f000 f85a 	bl	8006f10 <_free_r>
 8006e5c:	6a23      	ldr	r3, [r4, #32]
 8006e5e:	b14b      	cbz	r3, 8006e74 <_reclaim_reent+0xa4>
 8006e60:	4620      	mov	r0, r4
 8006e62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006e66:	4718      	bx	r3
 8006e68:	680e      	ldr	r6, [r1, #0]
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	f000 f850 	bl	8006f10 <_free_r>
 8006e70:	4631      	mov	r1, r6
 8006e72:	e7bb      	b.n	8006dec <_reclaim_reent+0x1c>
 8006e74:	bd70      	pop	{r4, r5, r6, pc}
 8006e76:	bf00      	nop
 8006e78:	20000010 	.word	0x20000010

08006e7c <_sbrk_r>:
 8006e7c:	b538      	push	{r3, r4, r5, lr}
 8006e7e:	4d06      	ldr	r5, [pc, #24]	@ (8006e98 <_sbrk_r+0x1c>)
 8006e80:	2300      	movs	r3, #0
 8006e82:	4604      	mov	r4, r0
 8006e84:	4608      	mov	r0, r1
 8006e86:	602b      	str	r3, [r5, #0]
 8006e88:	f7fa ff98 	bl	8001dbc <_sbrk>
 8006e8c:	1c43      	adds	r3, r0, #1
 8006e8e:	d102      	bne.n	8006e96 <_sbrk_r+0x1a>
 8006e90:	682b      	ldr	r3, [r5, #0]
 8006e92:	b103      	cbz	r3, 8006e96 <_sbrk_r+0x1a>
 8006e94:	6023      	str	r3, [r4, #0]
 8006e96:	bd38      	pop	{r3, r4, r5, pc}
 8006e98:	20004930 	.word	0x20004930

08006e9c <__errno>:
 8006e9c:	4b01      	ldr	r3, [pc, #4]	@ (8006ea4 <__errno+0x8>)
 8006e9e:	6818      	ldr	r0, [r3, #0]
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	20000010 	.word	0x20000010

08006ea8 <__libc_init_array>:
 8006ea8:	b570      	push	{r4, r5, r6, lr}
 8006eaa:	4d0d      	ldr	r5, [pc, #52]	@ (8006ee0 <__libc_init_array+0x38>)
 8006eac:	4c0d      	ldr	r4, [pc, #52]	@ (8006ee4 <__libc_init_array+0x3c>)
 8006eae:	1b64      	subs	r4, r4, r5
 8006eb0:	10a4      	asrs	r4, r4, #2
 8006eb2:	2600      	movs	r6, #0
 8006eb4:	42a6      	cmp	r6, r4
 8006eb6:	d109      	bne.n	8006ecc <__libc_init_array+0x24>
 8006eb8:	4d0b      	ldr	r5, [pc, #44]	@ (8006ee8 <__libc_init_array+0x40>)
 8006eba:	4c0c      	ldr	r4, [pc, #48]	@ (8006eec <__libc_init_array+0x44>)
 8006ebc:	f000 fba8 	bl	8007610 <_init>
 8006ec0:	1b64      	subs	r4, r4, r5
 8006ec2:	10a4      	asrs	r4, r4, #2
 8006ec4:	2600      	movs	r6, #0
 8006ec6:	42a6      	cmp	r6, r4
 8006ec8:	d105      	bne.n	8006ed6 <__libc_init_array+0x2e>
 8006eca:	bd70      	pop	{r4, r5, r6, pc}
 8006ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ed0:	4798      	blx	r3
 8006ed2:	3601      	adds	r6, #1
 8006ed4:	e7ee      	b.n	8006eb4 <__libc_init_array+0xc>
 8006ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eda:	4798      	blx	r3
 8006edc:	3601      	adds	r6, #1
 8006ede:	e7f2      	b.n	8006ec6 <__libc_init_array+0x1e>
 8006ee0:	0800793c 	.word	0x0800793c
 8006ee4:	0800793c 	.word	0x0800793c
 8006ee8:	0800793c 	.word	0x0800793c
 8006eec:	08007940 	.word	0x08007940

08006ef0 <__retarget_lock_acquire_recursive>:
 8006ef0:	4770      	bx	lr

08006ef2 <__retarget_lock_release_recursive>:
 8006ef2:	4770      	bx	lr

08006ef4 <memcpy>:
 8006ef4:	440a      	add	r2, r1
 8006ef6:	4291      	cmp	r1, r2
 8006ef8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006efc:	d100      	bne.n	8006f00 <memcpy+0xc>
 8006efe:	4770      	bx	lr
 8006f00:	b510      	push	{r4, lr}
 8006f02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f0a:	4291      	cmp	r1, r2
 8006f0c:	d1f9      	bne.n	8006f02 <memcpy+0xe>
 8006f0e:	bd10      	pop	{r4, pc}

08006f10 <_free_r>:
 8006f10:	b538      	push	{r3, r4, r5, lr}
 8006f12:	4605      	mov	r5, r0
 8006f14:	2900      	cmp	r1, #0
 8006f16:	d041      	beq.n	8006f9c <_free_r+0x8c>
 8006f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f1c:	1f0c      	subs	r4, r1, #4
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	bfb8      	it	lt
 8006f22:	18e4      	addlt	r4, r4, r3
 8006f24:	f7ff fe68 	bl	8006bf8 <__malloc_lock>
 8006f28:	4a1d      	ldr	r2, [pc, #116]	@ (8006fa0 <_free_r+0x90>)
 8006f2a:	6813      	ldr	r3, [r2, #0]
 8006f2c:	b933      	cbnz	r3, 8006f3c <_free_r+0x2c>
 8006f2e:	6063      	str	r3, [r4, #4]
 8006f30:	6014      	str	r4, [r2, #0]
 8006f32:	4628      	mov	r0, r5
 8006f34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f38:	f7ff be64 	b.w	8006c04 <__malloc_unlock>
 8006f3c:	42a3      	cmp	r3, r4
 8006f3e:	d908      	bls.n	8006f52 <_free_r+0x42>
 8006f40:	6820      	ldr	r0, [r4, #0]
 8006f42:	1821      	adds	r1, r4, r0
 8006f44:	428b      	cmp	r3, r1
 8006f46:	bf01      	itttt	eq
 8006f48:	6819      	ldreq	r1, [r3, #0]
 8006f4a:	685b      	ldreq	r3, [r3, #4]
 8006f4c:	1809      	addeq	r1, r1, r0
 8006f4e:	6021      	streq	r1, [r4, #0]
 8006f50:	e7ed      	b.n	8006f2e <_free_r+0x1e>
 8006f52:	461a      	mov	r2, r3
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	b10b      	cbz	r3, 8006f5c <_free_r+0x4c>
 8006f58:	42a3      	cmp	r3, r4
 8006f5a:	d9fa      	bls.n	8006f52 <_free_r+0x42>
 8006f5c:	6811      	ldr	r1, [r2, #0]
 8006f5e:	1850      	adds	r0, r2, r1
 8006f60:	42a0      	cmp	r0, r4
 8006f62:	d10b      	bne.n	8006f7c <_free_r+0x6c>
 8006f64:	6820      	ldr	r0, [r4, #0]
 8006f66:	4401      	add	r1, r0
 8006f68:	1850      	adds	r0, r2, r1
 8006f6a:	4283      	cmp	r3, r0
 8006f6c:	6011      	str	r1, [r2, #0]
 8006f6e:	d1e0      	bne.n	8006f32 <_free_r+0x22>
 8006f70:	6818      	ldr	r0, [r3, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	6053      	str	r3, [r2, #4]
 8006f76:	4408      	add	r0, r1
 8006f78:	6010      	str	r0, [r2, #0]
 8006f7a:	e7da      	b.n	8006f32 <_free_r+0x22>
 8006f7c:	d902      	bls.n	8006f84 <_free_r+0x74>
 8006f7e:	230c      	movs	r3, #12
 8006f80:	602b      	str	r3, [r5, #0]
 8006f82:	e7d6      	b.n	8006f32 <_free_r+0x22>
 8006f84:	6820      	ldr	r0, [r4, #0]
 8006f86:	1821      	adds	r1, r4, r0
 8006f88:	428b      	cmp	r3, r1
 8006f8a:	bf04      	itt	eq
 8006f8c:	6819      	ldreq	r1, [r3, #0]
 8006f8e:	685b      	ldreq	r3, [r3, #4]
 8006f90:	6063      	str	r3, [r4, #4]
 8006f92:	bf04      	itt	eq
 8006f94:	1809      	addeq	r1, r1, r0
 8006f96:	6021      	streq	r1, [r4, #0]
 8006f98:	6054      	str	r4, [r2, #4]
 8006f9a:	e7ca      	b.n	8006f32 <_free_r+0x22>
 8006f9c:	bd38      	pop	{r3, r4, r5, pc}
 8006f9e:	bf00      	nop
 8006fa0:	200047f4 	.word	0x200047f4

08006fa4 <__ssputs_r>:
 8006fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa8:	688e      	ldr	r6, [r1, #8]
 8006faa:	461f      	mov	r7, r3
 8006fac:	42be      	cmp	r6, r7
 8006fae:	680b      	ldr	r3, [r1, #0]
 8006fb0:	4682      	mov	sl, r0
 8006fb2:	460c      	mov	r4, r1
 8006fb4:	4690      	mov	r8, r2
 8006fb6:	d82d      	bhi.n	8007014 <__ssputs_r+0x70>
 8006fb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006fbc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006fc0:	d026      	beq.n	8007010 <__ssputs_r+0x6c>
 8006fc2:	6965      	ldr	r5, [r4, #20]
 8006fc4:	6909      	ldr	r1, [r1, #16]
 8006fc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fca:	eba3 0901 	sub.w	r9, r3, r1
 8006fce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fd2:	1c7b      	adds	r3, r7, #1
 8006fd4:	444b      	add	r3, r9
 8006fd6:	106d      	asrs	r5, r5, #1
 8006fd8:	429d      	cmp	r5, r3
 8006fda:	bf38      	it	cc
 8006fdc:	461d      	movcc	r5, r3
 8006fde:	0553      	lsls	r3, r2, #21
 8006fe0:	d527      	bpl.n	8007032 <__ssputs_r+0x8e>
 8006fe2:	4629      	mov	r1, r5
 8006fe4:	f7ff fd88 	bl	8006af8 <_malloc_r>
 8006fe8:	4606      	mov	r6, r0
 8006fea:	b360      	cbz	r0, 8007046 <__ssputs_r+0xa2>
 8006fec:	6921      	ldr	r1, [r4, #16]
 8006fee:	464a      	mov	r2, r9
 8006ff0:	f7ff ff80 	bl	8006ef4 <memcpy>
 8006ff4:	89a3      	ldrh	r3, [r4, #12]
 8006ff6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ffe:	81a3      	strh	r3, [r4, #12]
 8007000:	6126      	str	r6, [r4, #16]
 8007002:	6165      	str	r5, [r4, #20]
 8007004:	444e      	add	r6, r9
 8007006:	eba5 0509 	sub.w	r5, r5, r9
 800700a:	6026      	str	r6, [r4, #0]
 800700c:	60a5      	str	r5, [r4, #8]
 800700e:	463e      	mov	r6, r7
 8007010:	42be      	cmp	r6, r7
 8007012:	d900      	bls.n	8007016 <__ssputs_r+0x72>
 8007014:	463e      	mov	r6, r7
 8007016:	6820      	ldr	r0, [r4, #0]
 8007018:	4632      	mov	r2, r6
 800701a:	4641      	mov	r1, r8
 800701c:	f000 faa8 	bl	8007570 <memmove>
 8007020:	68a3      	ldr	r3, [r4, #8]
 8007022:	1b9b      	subs	r3, r3, r6
 8007024:	60a3      	str	r3, [r4, #8]
 8007026:	6823      	ldr	r3, [r4, #0]
 8007028:	4433      	add	r3, r6
 800702a:	6023      	str	r3, [r4, #0]
 800702c:	2000      	movs	r0, #0
 800702e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007032:	462a      	mov	r2, r5
 8007034:	f000 fab6 	bl	80075a4 <_realloc_r>
 8007038:	4606      	mov	r6, r0
 800703a:	2800      	cmp	r0, #0
 800703c:	d1e0      	bne.n	8007000 <__ssputs_r+0x5c>
 800703e:	6921      	ldr	r1, [r4, #16]
 8007040:	4650      	mov	r0, sl
 8007042:	f7ff ff65 	bl	8006f10 <_free_r>
 8007046:	230c      	movs	r3, #12
 8007048:	f8ca 3000 	str.w	r3, [sl]
 800704c:	89a3      	ldrh	r3, [r4, #12]
 800704e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007052:	81a3      	strh	r3, [r4, #12]
 8007054:	f04f 30ff 	mov.w	r0, #4294967295
 8007058:	e7e9      	b.n	800702e <__ssputs_r+0x8a>
	...

0800705c <_svfiprintf_r>:
 800705c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007060:	4698      	mov	r8, r3
 8007062:	898b      	ldrh	r3, [r1, #12]
 8007064:	061b      	lsls	r3, r3, #24
 8007066:	b09d      	sub	sp, #116	@ 0x74
 8007068:	4607      	mov	r7, r0
 800706a:	460d      	mov	r5, r1
 800706c:	4614      	mov	r4, r2
 800706e:	d510      	bpl.n	8007092 <_svfiprintf_r+0x36>
 8007070:	690b      	ldr	r3, [r1, #16]
 8007072:	b973      	cbnz	r3, 8007092 <_svfiprintf_r+0x36>
 8007074:	2140      	movs	r1, #64	@ 0x40
 8007076:	f7ff fd3f 	bl	8006af8 <_malloc_r>
 800707a:	6028      	str	r0, [r5, #0]
 800707c:	6128      	str	r0, [r5, #16]
 800707e:	b930      	cbnz	r0, 800708e <_svfiprintf_r+0x32>
 8007080:	230c      	movs	r3, #12
 8007082:	603b      	str	r3, [r7, #0]
 8007084:	f04f 30ff 	mov.w	r0, #4294967295
 8007088:	b01d      	add	sp, #116	@ 0x74
 800708a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800708e:	2340      	movs	r3, #64	@ 0x40
 8007090:	616b      	str	r3, [r5, #20]
 8007092:	2300      	movs	r3, #0
 8007094:	9309      	str	r3, [sp, #36]	@ 0x24
 8007096:	2320      	movs	r3, #32
 8007098:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800709c:	f8cd 800c 	str.w	r8, [sp, #12]
 80070a0:	2330      	movs	r3, #48	@ 0x30
 80070a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007240 <_svfiprintf_r+0x1e4>
 80070a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80070aa:	f04f 0901 	mov.w	r9, #1
 80070ae:	4623      	mov	r3, r4
 80070b0:	469a      	mov	sl, r3
 80070b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070b6:	b10a      	cbz	r2, 80070bc <_svfiprintf_r+0x60>
 80070b8:	2a25      	cmp	r2, #37	@ 0x25
 80070ba:	d1f9      	bne.n	80070b0 <_svfiprintf_r+0x54>
 80070bc:	ebba 0b04 	subs.w	fp, sl, r4
 80070c0:	d00b      	beq.n	80070da <_svfiprintf_r+0x7e>
 80070c2:	465b      	mov	r3, fp
 80070c4:	4622      	mov	r2, r4
 80070c6:	4629      	mov	r1, r5
 80070c8:	4638      	mov	r0, r7
 80070ca:	f7ff ff6b 	bl	8006fa4 <__ssputs_r>
 80070ce:	3001      	adds	r0, #1
 80070d0:	f000 80a7 	beq.w	8007222 <_svfiprintf_r+0x1c6>
 80070d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070d6:	445a      	add	r2, fp
 80070d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80070da:	f89a 3000 	ldrb.w	r3, [sl]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f000 809f 	beq.w	8007222 <_svfiprintf_r+0x1c6>
 80070e4:	2300      	movs	r3, #0
 80070e6:	f04f 32ff 	mov.w	r2, #4294967295
 80070ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070ee:	f10a 0a01 	add.w	sl, sl, #1
 80070f2:	9304      	str	r3, [sp, #16]
 80070f4:	9307      	str	r3, [sp, #28]
 80070f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80070fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80070fc:	4654      	mov	r4, sl
 80070fe:	2205      	movs	r2, #5
 8007100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007104:	484e      	ldr	r0, [pc, #312]	@ (8007240 <_svfiprintf_r+0x1e4>)
 8007106:	f7f9 f88b 	bl	8000220 <memchr>
 800710a:	9a04      	ldr	r2, [sp, #16]
 800710c:	b9d8      	cbnz	r0, 8007146 <_svfiprintf_r+0xea>
 800710e:	06d0      	lsls	r0, r2, #27
 8007110:	bf44      	itt	mi
 8007112:	2320      	movmi	r3, #32
 8007114:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007118:	0711      	lsls	r1, r2, #28
 800711a:	bf44      	itt	mi
 800711c:	232b      	movmi	r3, #43	@ 0x2b
 800711e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007122:	f89a 3000 	ldrb.w	r3, [sl]
 8007126:	2b2a      	cmp	r3, #42	@ 0x2a
 8007128:	d015      	beq.n	8007156 <_svfiprintf_r+0xfa>
 800712a:	9a07      	ldr	r2, [sp, #28]
 800712c:	4654      	mov	r4, sl
 800712e:	2000      	movs	r0, #0
 8007130:	f04f 0c0a 	mov.w	ip, #10
 8007134:	4621      	mov	r1, r4
 8007136:	f811 3b01 	ldrb.w	r3, [r1], #1
 800713a:	3b30      	subs	r3, #48	@ 0x30
 800713c:	2b09      	cmp	r3, #9
 800713e:	d94b      	bls.n	80071d8 <_svfiprintf_r+0x17c>
 8007140:	b1b0      	cbz	r0, 8007170 <_svfiprintf_r+0x114>
 8007142:	9207      	str	r2, [sp, #28]
 8007144:	e014      	b.n	8007170 <_svfiprintf_r+0x114>
 8007146:	eba0 0308 	sub.w	r3, r0, r8
 800714a:	fa09 f303 	lsl.w	r3, r9, r3
 800714e:	4313      	orrs	r3, r2
 8007150:	9304      	str	r3, [sp, #16]
 8007152:	46a2      	mov	sl, r4
 8007154:	e7d2      	b.n	80070fc <_svfiprintf_r+0xa0>
 8007156:	9b03      	ldr	r3, [sp, #12]
 8007158:	1d19      	adds	r1, r3, #4
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	9103      	str	r1, [sp, #12]
 800715e:	2b00      	cmp	r3, #0
 8007160:	bfbb      	ittet	lt
 8007162:	425b      	neglt	r3, r3
 8007164:	f042 0202 	orrlt.w	r2, r2, #2
 8007168:	9307      	strge	r3, [sp, #28]
 800716a:	9307      	strlt	r3, [sp, #28]
 800716c:	bfb8      	it	lt
 800716e:	9204      	strlt	r2, [sp, #16]
 8007170:	7823      	ldrb	r3, [r4, #0]
 8007172:	2b2e      	cmp	r3, #46	@ 0x2e
 8007174:	d10a      	bne.n	800718c <_svfiprintf_r+0x130>
 8007176:	7863      	ldrb	r3, [r4, #1]
 8007178:	2b2a      	cmp	r3, #42	@ 0x2a
 800717a:	d132      	bne.n	80071e2 <_svfiprintf_r+0x186>
 800717c:	9b03      	ldr	r3, [sp, #12]
 800717e:	1d1a      	adds	r2, r3, #4
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	9203      	str	r2, [sp, #12]
 8007184:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007188:	3402      	adds	r4, #2
 800718a:	9305      	str	r3, [sp, #20]
 800718c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007250 <_svfiprintf_r+0x1f4>
 8007190:	7821      	ldrb	r1, [r4, #0]
 8007192:	2203      	movs	r2, #3
 8007194:	4650      	mov	r0, sl
 8007196:	f7f9 f843 	bl	8000220 <memchr>
 800719a:	b138      	cbz	r0, 80071ac <_svfiprintf_r+0x150>
 800719c:	9b04      	ldr	r3, [sp, #16]
 800719e:	eba0 000a 	sub.w	r0, r0, sl
 80071a2:	2240      	movs	r2, #64	@ 0x40
 80071a4:	4082      	lsls	r2, r0
 80071a6:	4313      	orrs	r3, r2
 80071a8:	3401      	adds	r4, #1
 80071aa:	9304      	str	r3, [sp, #16]
 80071ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071b0:	4824      	ldr	r0, [pc, #144]	@ (8007244 <_svfiprintf_r+0x1e8>)
 80071b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80071b6:	2206      	movs	r2, #6
 80071b8:	f7f9 f832 	bl	8000220 <memchr>
 80071bc:	2800      	cmp	r0, #0
 80071be:	d036      	beq.n	800722e <_svfiprintf_r+0x1d2>
 80071c0:	4b21      	ldr	r3, [pc, #132]	@ (8007248 <_svfiprintf_r+0x1ec>)
 80071c2:	bb1b      	cbnz	r3, 800720c <_svfiprintf_r+0x1b0>
 80071c4:	9b03      	ldr	r3, [sp, #12]
 80071c6:	3307      	adds	r3, #7
 80071c8:	f023 0307 	bic.w	r3, r3, #7
 80071cc:	3308      	adds	r3, #8
 80071ce:	9303      	str	r3, [sp, #12]
 80071d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071d2:	4433      	add	r3, r6
 80071d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80071d6:	e76a      	b.n	80070ae <_svfiprintf_r+0x52>
 80071d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80071dc:	460c      	mov	r4, r1
 80071de:	2001      	movs	r0, #1
 80071e0:	e7a8      	b.n	8007134 <_svfiprintf_r+0xd8>
 80071e2:	2300      	movs	r3, #0
 80071e4:	3401      	adds	r4, #1
 80071e6:	9305      	str	r3, [sp, #20]
 80071e8:	4619      	mov	r1, r3
 80071ea:	f04f 0c0a 	mov.w	ip, #10
 80071ee:	4620      	mov	r0, r4
 80071f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071f4:	3a30      	subs	r2, #48	@ 0x30
 80071f6:	2a09      	cmp	r2, #9
 80071f8:	d903      	bls.n	8007202 <_svfiprintf_r+0x1a6>
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d0c6      	beq.n	800718c <_svfiprintf_r+0x130>
 80071fe:	9105      	str	r1, [sp, #20]
 8007200:	e7c4      	b.n	800718c <_svfiprintf_r+0x130>
 8007202:	fb0c 2101 	mla	r1, ip, r1, r2
 8007206:	4604      	mov	r4, r0
 8007208:	2301      	movs	r3, #1
 800720a:	e7f0      	b.n	80071ee <_svfiprintf_r+0x192>
 800720c:	ab03      	add	r3, sp, #12
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	462a      	mov	r2, r5
 8007212:	4b0e      	ldr	r3, [pc, #56]	@ (800724c <_svfiprintf_r+0x1f0>)
 8007214:	a904      	add	r1, sp, #16
 8007216:	4638      	mov	r0, r7
 8007218:	f3af 8000 	nop.w
 800721c:	1c42      	adds	r2, r0, #1
 800721e:	4606      	mov	r6, r0
 8007220:	d1d6      	bne.n	80071d0 <_svfiprintf_r+0x174>
 8007222:	89ab      	ldrh	r3, [r5, #12]
 8007224:	065b      	lsls	r3, r3, #25
 8007226:	f53f af2d 	bmi.w	8007084 <_svfiprintf_r+0x28>
 800722a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800722c:	e72c      	b.n	8007088 <_svfiprintf_r+0x2c>
 800722e:	ab03      	add	r3, sp, #12
 8007230:	9300      	str	r3, [sp, #0]
 8007232:	462a      	mov	r2, r5
 8007234:	4b05      	ldr	r3, [pc, #20]	@ (800724c <_svfiprintf_r+0x1f0>)
 8007236:	a904      	add	r1, sp, #16
 8007238:	4638      	mov	r0, r7
 800723a:	f000 f879 	bl	8007330 <_printf_i>
 800723e:	e7ed      	b.n	800721c <_svfiprintf_r+0x1c0>
 8007240:	08007901 	.word	0x08007901
 8007244:	0800790b 	.word	0x0800790b
 8007248:	00000000 	.word	0x00000000
 800724c:	08006fa5 	.word	0x08006fa5
 8007250:	08007907 	.word	0x08007907

08007254 <_printf_common>:
 8007254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007258:	4616      	mov	r6, r2
 800725a:	4698      	mov	r8, r3
 800725c:	688a      	ldr	r2, [r1, #8]
 800725e:	690b      	ldr	r3, [r1, #16]
 8007260:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007264:	4293      	cmp	r3, r2
 8007266:	bfb8      	it	lt
 8007268:	4613      	movlt	r3, r2
 800726a:	6033      	str	r3, [r6, #0]
 800726c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007270:	4607      	mov	r7, r0
 8007272:	460c      	mov	r4, r1
 8007274:	b10a      	cbz	r2, 800727a <_printf_common+0x26>
 8007276:	3301      	adds	r3, #1
 8007278:	6033      	str	r3, [r6, #0]
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	0699      	lsls	r1, r3, #26
 800727e:	bf42      	ittt	mi
 8007280:	6833      	ldrmi	r3, [r6, #0]
 8007282:	3302      	addmi	r3, #2
 8007284:	6033      	strmi	r3, [r6, #0]
 8007286:	6825      	ldr	r5, [r4, #0]
 8007288:	f015 0506 	ands.w	r5, r5, #6
 800728c:	d106      	bne.n	800729c <_printf_common+0x48>
 800728e:	f104 0a19 	add.w	sl, r4, #25
 8007292:	68e3      	ldr	r3, [r4, #12]
 8007294:	6832      	ldr	r2, [r6, #0]
 8007296:	1a9b      	subs	r3, r3, r2
 8007298:	42ab      	cmp	r3, r5
 800729a:	dc26      	bgt.n	80072ea <_printf_common+0x96>
 800729c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80072a0:	6822      	ldr	r2, [r4, #0]
 80072a2:	3b00      	subs	r3, #0
 80072a4:	bf18      	it	ne
 80072a6:	2301      	movne	r3, #1
 80072a8:	0692      	lsls	r2, r2, #26
 80072aa:	d42b      	bmi.n	8007304 <_printf_common+0xb0>
 80072ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80072b0:	4641      	mov	r1, r8
 80072b2:	4638      	mov	r0, r7
 80072b4:	47c8      	blx	r9
 80072b6:	3001      	adds	r0, #1
 80072b8:	d01e      	beq.n	80072f8 <_printf_common+0xa4>
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	6922      	ldr	r2, [r4, #16]
 80072be:	f003 0306 	and.w	r3, r3, #6
 80072c2:	2b04      	cmp	r3, #4
 80072c4:	bf02      	ittt	eq
 80072c6:	68e5      	ldreq	r5, [r4, #12]
 80072c8:	6833      	ldreq	r3, [r6, #0]
 80072ca:	1aed      	subeq	r5, r5, r3
 80072cc:	68a3      	ldr	r3, [r4, #8]
 80072ce:	bf0c      	ite	eq
 80072d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072d4:	2500      	movne	r5, #0
 80072d6:	4293      	cmp	r3, r2
 80072d8:	bfc4      	itt	gt
 80072da:	1a9b      	subgt	r3, r3, r2
 80072dc:	18ed      	addgt	r5, r5, r3
 80072de:	2600      	movs	r6, #0
 80072e0:	341a      	adds	r4, #26
 80072e2:	42b5      	cmp	r5, r6
 80072e4:	d11a      	bne.n	800731c <_printf_common+0xc8>
 80072e6:	2000      	movs	r0, #0
 80072e8:	e008      	b.n	80072fc <_printf_common+0xa8>
 80072ea:	2301      	movs	r3, #1
 80072ec:	4652      	mov	r2, sl
 80072ee:	4641      	mov	r1, r8
 80072f0:	4638      	mov	r0, r7
 80072f2:	47c8      	blx	r9
 80072f4:	3001      	adds	r0, #1
 80072f6:	d103      	bne.n	8007300 <_printf_common+0xac>
 80072f8:	f04f 30ff 	mov.w	r0, #4294967295
 80072fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007300:	3501      	adds	r5, #1
 8007302:	e7c6      	b.n	8007292 <_printf_common+0x3e>
 8007304:	18e1      	adds	r1, r4, r3
 8007306:	1c5a      	adds	r2, r3, #1
 8007308:	2030      	movs	r0, #48	@ 0x30
 800730a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800730e:	4422      	add	r2, r4
 8007310:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007314:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007318:	3302      	adds	r3, #2
 800731a:	e7c7      	b.n	80072ac <_printf_common+0x58>
 800731c:	2301      	movs	r3, #1
 800731e:	4622      	mov	r2, r4
 8007320:	4641      	mov	r1, r8
 8007322:	4638      	mov	r0, r7
 8007324:	47c8      	blx	r9
 8007326:	3001      	adds	r0, #1
 8007328:	d0e6      	beq.n	80072f8 <_printf_common+0xa4>
 800732a:	3601      	adds	r6, #1
 800732c:	e7d9      	b.n	80072e2 <_printf_common+0x8e>
	...

08007330 <_printf_i>:
 8007330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007334:	7e0f      	ldrb	r7, [r1, #24]
 8007336:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007338:	2f78      	cmp	r7, #120	@ 0x78
 800733a:	4691      	mov	r9, r2
 800733c:	4680      	mov	r8, r0
 800733e:	460c      	mov	r4, r1
 8007340:	469a      	mov	sl, r3
 8007342:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007346:	d807      	bhi.n	8007358 <_printf_i+0x28>
 8007348:	2f62      	cmp	r7, #98	@ 0x62
 800734a:	d80a      	bhi.n	8007362 <_printf_i+0x32>
 800734c:	2f00      	cmp	r7, #0
 800734e:	f000 80d2 	beq.w	80074f6 <_printf_i+0x1c6>
 8007352:	2f58      	cmp	r7, #88	@ 0x58
 8007354:	f000 80b9 	beq.w	80074ca <_printf_i+0x19a>
 8007358:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800735c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007360:	e03a      	b.n	80073d8 <_printf_i+0xa8>
 8007362:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007366:	2b15      	cmp	r3, #21
 8007368:	d8f6      	bhi.n	8007358 <_printf_i+0x28>
 800736a:	a101      	add	r1, pc, #4	@ (adr r1, 8007370 <_printf_i+0x40>)
 800736c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007370:	080073c9 	.word	0x080073c9
 8007374:	080073dd 	.word	0x080073dd
 8007378:	08007359 	.word	0x08007359
 800737c:	08007359 	.word	0x08007359
 8007380:	08007359 	.word	0x08007359
 8007384:	08007359 	.word	0x08007359
 8007388:	080073dd 	.word	0x080073dd
 800738c:	08007359 	.word	0x08007359
 8007390:	08007359 	.word	0x08007359
 8007394:	08007359 	.word	0x08007359
 8007398:	08007359 	.word	0x08007359
 800739c:	080074dd 	.word	0x080074dd
 80073a0:	08007407 	.word	0x08007407
 80073a4:	08007497 	.word	0x08007497
 80073a8:	08007359 	.word	0x08007359
 80073ac:	08007359 	.word	0x08007359
 80073b0:	080074ff 	.word	0x080074ff
 80073b4:	08007359 	.word	0x08007359
 80073b8:	08007407 	.word	0x08007407
 80073bc:	08007359 	.word	0x08007359
 80073c0:	08007359 	.word	0x08007359
 80073c4:	0800749f 	.word	0x0800749f
 80073c8:	6833      	ldr	r3, [r6, #0]
 80073ca:	1d1a      	adds	r2, r3, #4
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	6032      	str	r2, [r6, #0]
 80073d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80073d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80073d8:	2301      	movs	r3, #1
 80073da:	e09d      	b.n	8007518 <_printf_i+0x1e8>
 80073dc:	6833      	ldr	r3, [r6, #0]
 80073de:	6820      	ldr	r0, [r4, #0]
 80073e0:	1d19      	adds	r1, r3, #4
 80073e2:	6031      	str	r1, [r6, #0]
 80073e4:	0606      	lsls	r6, r0, #24
 80073e6:	d501      	bpl.n	80073ec <_printf_i+0xbc>
 80073e8:	681d      	ldr	r5, [r3, #0]
 80073ea:	e003      	b.n	80073f4 <_printf_i+0xc4>
 80073ec:	0645      	lsls	r5, r0, #25
 80073ee:	d5fb      	bpl.n	80073e8 <_printf_i+0xb8>
 80073f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80073f4:	2d00      	cmp	r5, #0
 80073f6:	da03      	bge.n	8007400 <_printf_i+0xd0>
 80073f8:	232d      	movs	r3, #45	@ 0x2d
 80073fa:	426d      	negs	r5, r5
 80073fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007400:	4859      	ldr	r0, [pc, #356]	@ (8007568 <_printf_i+0x238>)
 8007402:	230a      	movs	r3, #10
 8007404:	e011      	b.n	800742a <_printf_i+0xfa>
 8007406:	6821      	ldr	r1, [r4, #0]
 8007408:	6833      	ldr	r3, [r6, #0]
 800740a:	0608      	lsls	r0, r1, #24
 800740c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007410:	d402      	bmi.n	8007418 <_printf_i+0xe8>
 8007412:	0649      	lsls	r1, r1, #25
 8007414:	bf48      	it	mi
 8007416:	b2ad      	uxthmi	r5, r5
 8007418:	2f6f      	cmp	r7, #111	@ 0x6f
 800741a:	4853      	ldr	r0, [pc, #332]	@ (8007568 <_printf_i+0x238>)
 800741c:	6033      	str	r3, [r6, #0]
 800741e:	bf14      	ite	ne
 8007420:	230a      	movne	r3, #10
 8007422:	2308      	moveq	r3, #8
 8007424:	2100      	movs	r1, #0
 8007426:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800742a:	6866      	ldr	r6, [r4, #4]
 800742c:	60a6      	str	r6, [r4, #8]
 800742e:	2e00      	cmp	r6, #0
 8007430:	bfa2      	ittt	ge
 8007432:	6821      	ldrge	r1, [r4, #0]
 8007434:	f021 0104 	bicge.w	r1, r1, #4
 8007438:	6021      	strge	r1, [r4, #0]
 800743a:	b90d      	cbnz	r5, 8007440 <_printf_i+0x110>
 800743c:	2e00      	cmp	r6, #0
 800743e:	d04b      	beq.n	80074d8 <_printf_i+0x1a8>
 8007440:	4616      	mov	r6, r2
 8007442:	fbb5 f1f3 	udiv	r1, r5, r3
 8007446:	fb03 5711 	mls	r7, r3, r1, r5
 800744a:	5dc7      	ldrb	r7, [r0, r7]
 800744c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007450:	462f      	mov	r7, r5
 8007452:	42bb      	cmp	r3, r7
 8007454:	460d      	mov	r5, r1
 8007456:	d9f4      	bls.n	8007442 <_printf_i+0x112>
 8007458:	2b08      	cmp	r3, #8
 800745a:	d10b      	bne.n	8007474 <_printf_i+0x144>
 800745c:	6823      	ldr	r3, [r4, #0]
 800745e:	07df      	lsls	r7, r3, #31
 8007460:	d508      	bpl.n	8007474 <_printf_i+0x144>
 8007462:	6923      	ldr	r3, [r4, #16]
 8007464:	6861      	ldr	r1, [r4, #4]
 8007466:	4299      	cmp	r1, r3
 8007468:	bfde      	ittt	le
 800746a:	2330      	movle	r3, #48	@ 0x30
 800746c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007470:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007474:	1b92      	subs	r2, r2, r6
 8007476:	6122      	str	r2, [r4, #16]
 8007478:	f8cd a000 	str.w	sl, [sp]
 800747c:	464b      	mov	r3, r9
 800747e:	aa03      	add	r2, sp, #12
 8007480:	4621      	mov	r1, r4
 8007482:	4640      	mov	r0, r8
 8007484:	f7ff fee6 	bl	8007254 <_printf_common>
 8007488:	3001      	adds	r0, #1
 800748a:	d14a      	bne.n	8007522 <_printf_i+0x1f2>
 800748c:	f04f 30ff 	mov.w	r0, #4294967295
 8007490:	b004      	add	sp, #16
 8007492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007496:	6823      	ldr	r3, [r4, #0]
 8007498:	f043 0320 	orr.w	r3, r3, #32
 800749c:	6023      	str	r3, [r4, #0]
 800749e:	4833      	ldr	r0, [pc, #204]	@ (800756c <_printf_i+0x23c>)
 80074a0:	2778      	movs	r7, #120	@ 0x78
 80074a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80074a6:	6823      	ldr	r3, [r4, #0]
 80074a8:	6831      	ldr	r1, [r6, #0]
 80074aa:	061f      	lsls	r7, r3, #24
 80074ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80074b0:	d402      	bmi.n	80074b8 <_printf_i+0x188>
 80074b2:	065f      	lsls	r7, r3, #25
 80074b4:	bf48      	it	mi
 80074b6:	b2ad      	uxthmi	r5, r5
 80074b8:	6031      	str	r1, [r6, #0]
 80074ba:	07d9      	lsls	r1, r3, #31
 80074bc:	bf44      	itt	mi
 80074be:	f043 0320 	orrmi.w	r3, r3, #32
 80074c2:	6023      	strmi	r3, [r4, #0]
 80074c4:	b11d      	cbz	r5, 80074ce <_printf_i+0x19e>
 80074c6:	2310      	movs	r3, #16
 80074c8:	e7ac      	b.n	8007424 <_printf_i+0xf4>
 80074ca:	4827      	ldr	r0, [pc, #156]	@ (8007568 <_printf_i+0x238>)
 80074cc:	e7e9      	b.n	80074a2 <_printf_i+0x172>
 80074ce:	6823      	ldr	r3, [r4, #0]
 80074d0:	f023 0320 	bic.w	r3, r3, #32
 80074d4:	6023      	str	r3, [r4, #0]
 80074d6:	e7f6      	b.n	80074c6 <_printf_i+0x196>
 80074d8:	4616      	mov	r6, r2
 80074da:	e7bd      	b.n	8007458 <_printf_i+0x128>
 80074dc:	6833      	ldr	r3, [r6, #0]
 80074de:	6825      	ldr	r5, [r4, #0]
 80074e0:	6961      	ldr	r1, [r4, #20]
 80074e2:	1d18      	adds	r0, r3, #4
 80074e4:	6030      	str	r0, [r6, #0]
 80074e6:	062e      	lsls	r6, r5, #24
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	d501      	bpl.n	80074f0 <_printf_i+0x1c0>
 80074ec:	6019      	str	r1, [r3, #0]
 80074ee:	e002      	b.n	80074f6 <_printf_i+0x1c6>
 80074f0:	0668      	lsls	r0, r5, #25
 80074f2:	d5fb      	bpl.n	80074ec <_printf_i+0x1bc>
 80074f4:	8019      	strh	r1, [r3, #0]
 80074f6:	2300      	movs	r3, #0
 80074f8:	6123      	str	r3, [r4, #16]
 80074fa:	4616      	mov	r6, r2
 80074fc:	e7bc      	b.n	8007478 <_printf_i+0x148>
 80074fe:	6833      	ldr	r3, [r6, #0]
 8007500:	1d1a      	adds	r2, r3, #4
 8007502:	6032      	str	r2, [r6, #0]
 8007504:	681e      	ldr	r6, [r3, #0]
 8007506:	6862      	ldr	r2, [r4, #4]
 8007508:	2100      	movs	r1, #0
 800750a:	4630      	mov	r0, r6
 800750c:	f7f8 fe88 	bl	8000220 <memchr>
 8007510:	b108      	cbz	r0, 8007516 <_printf_i+0x1e6>
 8007512:	1b80      	subs	r0, r0, r6
 8007514:	6060      	str	r0, [r4, #4]
 8007516:	6863      	ldr	r3, [r4, #4]
 8007518:	6123      	str	r3, [r4, #16]
 800751a:	2300      	movs	r3, #0
 800751c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007520:	e7aa      	b.n	8007478 <_printf_i+0x148>
 8007522:	6923      	ldr	r3, [r4, #16]
 8007524:	4632      	mov	r2, r6
 8007526:	4649      	mov	r1, r9
 8007528:	4640      	mov	r0, r8
 800752a:	47d0      	blx	sl
 800752c:	3001      	adds	r0, #1
 800752e:	d0ad      	beq.n	800748c <_printf_i+0x15c>
 8007530:	6823      	ldr	r3, [r4, #0]
 8007532:	079b      	lsls	r3, r3, #30
 8007534:	d413      	bmi.n	800755e <_printf_i+0x22e>
 8007536:	68e0      	ldr	r0, [r4, #12]
 8007538:	9b03      	ldr	r3, [sp, #12]
 800753a:	4298      	cmp	r0, r3
 800753c:	bfb8      	it	lt
 800753e:	4618      	movlt	r0, r3
 8007540:	e7a6      	b.n	8007490 <_printf_i+0x160>
 8007542:	2301      	movs	r3, #1
 8007544:	4632      	mov	r2, r6
 8007546:	4649      	mov	r1, r9
 8007548:	4640      	mov	r0, r8
 800754a:	47d0      	blx	sl
 800754c:	3001      	adds	r0, #1
 800754e:	d09d      	beq.n	800748c <_printf_i+0x15c>
 8007550:	3501      	adds	r5, #1
 8007552:	68e3      	ldr	r3, [r4, #12]
 8007554:	9903      	ldr	r1, [sp, #12]
 8007556:	1a5b      	subs	r3, r3, r1
 8007558:	42ab      	cmp	r3, r5
 800755a:	dcf2      	bgt.n	8007542 <_printf_i+0x212>
 800755c:	e7eb      	b.n	8007536 <_printf_i+0x206>
 800755e:	2500      	movs	r5, #0
 8007560:	f104 0619 	add.w	r6, r4, #25
 8007564:	e7f5      	b.n	8007552 <_printf_i+0x222>
 8007566:	bf00      	nop
 8007568:	08007912 	.word	0x08007912
 800756c:	08007923 	.word	0x08007923

08007570 <memmove>:
 8007570:	4288      	cmp	r0, r1
 8007572:	b510      	push	{r4, lr}
 8007574:	eb01 0402 	add.w	r4, r1, r2
 8007578:	d902      	bls.n	8007580 <memmove+0x10>
 800757a:	4284      	cmp	r4, r0
 800757c:	4623      	mov	r3, r4
 800757e:	d807      	bhi.n	8007590 <memmove+0x20>
 8007580:	1e43      	subs	r3, r0, #1
 8007582:	42a1      	cmp	r1, r4
 8007584:	d008      	beq.n	8007598 <memmove+0x28>
 8007586:	f811 2b01 	ldrb.w	r2, [r1], #1
 800758a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800758e:	e7f8      	b.n	8007582 <memmove+0x12>
 8007590:	4402      	add	r2, r0
 8007592:	4601      	mov	r1, r0
 8007594:	428a      	cmp	r2, r1
 8007596:	d100      	bne.n	800759a <memmove+0x2a>
 8007598:	bd10      	pop	{r4, pc}
 800759a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800759e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075a2:	e7f7      	b.n	8007594 <memmove+0x24>

080075a4 <_realloc_r>:
 80075a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075a8:	4680      	mov	r8, r0
 80075aa:	4615      	mov	r5, r2
 80075ac:	460c      	mov	r4, r1
 80075ae:	b921      	cbnz	r1, 80075ba <_realloc_r+0x16>
 80075b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075b4:	4611      	mov	r1, r2
 80075b6:	f7ff ba9f 	b.w	8006af8 <_malloc_r>
 80075ba:	b92a      	cbnz	r2, 80075c8 <_realloc_r+0x24>
 80075bc:	f7ff fca8 	bl	8006f10 <_free_r>
 80075c0:	2400      	movs	r4, #0
 80075c2:	4620      	mov	r0, r4
 80075c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075c8:	f000 f81a 	bl	8007600 <_malloc_usable_size_r>
 80075cc:	4285      	cmp	r5, r0
 80075ce:	4606      	mov	r6, r0
 80075d0:	d802      	bhi.n	80075d8 <_realloc_r+0x34>
 80075d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80075d6:	d8f4      	bhi.n	80075c2 <_realloc_r+0x1e>
 80075d8:	4629      	mov	r1, r5
 80075da:	4640      	mov	r0, r8
 80075dc:	f7ff fa8c 	bl	8006af8 <_malloc_r>
 80075e0:	4607      	mov	r7, r0
 80075e2:	2800      	cmp	r0, #0
 80075e4:	d0ec      	beq.n	80075c0 <_realloc_r+0x1c>
 80075e6:	42b5      	cmp	r5, r6
 80075e8:	462a      	mov	r2, r5
 80075ea:	4621      	mov	r1, r4
 80075ec:	bf28      	it	cs
 80075ee:	4632      	movcs	r2, r6
 80075f0:	f7ff fc80 	bl	8006ef4 <memcpy>
 80075f4:	4621      	mov	r1, r4
 80075f6:	4640      	mov	r0, r8
 80075f8:	f7ff fc8a 	bl	8006f10 <_free_r>
 80075fc:	463c      	mov	r4, r7
 80075fe:	e7e0      	b.n	80075c2 <_realloc_r+0x1e>

08007600 <_malloc_usable_size_r>:
 8007600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007604:	1f18      	subs	r0, r3, #4
 8007606:	2b00      	cmp	r3, #0
 8007608:	bfbc      	itt	lt
 800760a:	580b      	ldrlt	r3, [r1, r0]
 800760c:	18c0      	addlt	r0, r0, r3
 800760e:	4770      	bx	lr

08007610 <_init>:
 8007610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007612:	bf00      	nop
 8007614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007616:	bc08      	pop	{r3}
 8007618:	469e      	mov	lr, r3
 800761a:	4770      	bx	lr

0800761c <_fini>:
 800761c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761e:	bf00      	nop
 8007620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007622:	bc08      	pop	{r3}
 8007624:	469e      	mov	lr, r3
 8007626:	4770      	bx	lr
