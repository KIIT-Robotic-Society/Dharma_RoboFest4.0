
LORA_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dfc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08005fd0  08005fd0  00006fd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060c0  080060c0  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  080060c0  080060c0  000070c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060c8  080060c8  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060c8  080060c8  000070c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080060cc  080060cc  000070cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080060d0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  2000005c  0800612c  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  0800612c  00008464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df08  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024b7  00000000  00000000  00015f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  00018450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000092e  00000000  00000000  00019050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002286a  00000000  00000000  0001997e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f7f2  00000000  00000000  0003c1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd860  00000000  00000000  0004b9da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011923a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003748  00000000  00000000  00119280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0011c9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005fb4 	.word	0x08005fb4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08005fb4 	.word	0x08005fb4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b96a 	b.w	8000d88 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9d08      	ldr	r5, [sp, #32]
 8000ad2:	460c      	mov	r4, r1
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d14e      	bne.n	8000b76 <__udivmoddi4+0xaa>
 8000ad8:	4694      	mov	ip, r2
 8000ada:	458c      	cmp	ip, r1
 8000adc:	4686      	mov	lr, r0
 8000ade:	fab2 f282 	clz	r2, r2
 8000ae2:	d962      	bls.n	8000baa <__udivmoddi4+0xde>
 8000ae4:	b14a      	cbz	r2, 8000afa <__udivmoddi4+0x2e>
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	4091      	lsls	r1, r2
 8000aec:	fa20 f303 	lsr.w	r3, r0, r3
 8000af0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af4:	4319      	orrs	r1, r3
 8000af6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000afa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afe:	fa1f f68c 	uxth.w	r6, ip
 8000b02:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b06:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b0a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b12:	fb04 f106 	mul.w	r1, r4, r6
 8000b16:	4299      	cmp	r1, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x64>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b22:	f080 8112 	bcs.w	8000d4a <__udivmoddi4+0x27e>
 8000b26:	4299      	cmp	r1, r3
 8000b28:	f240 810f 	bls.w	8000d4a <__udivmoddi4+0x27e>
 8000b2c:	3c02      	subs	r4, #2
 8000b2e:	4463      	add	r3, ip
 8000b30:	1a59      	subs	r1, r3, r1
 8000b32:	fa1f f38e 	uxth.w	r3, lr
 8000b36:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b3a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b42:	fb00 f606 	mul.w	r6, r0, r6
 8000b46:	429e      	cmp	r6, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x94>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b52:	f080 80fc 	bcs.w	8000d4e <__udivmoddi4+0x282>
 8000b56:	429e      	cmp	r6, r3
 8000b58:	f240 80f9 	bls.w	8000d4e <__udivmoddi4+0x282>
 8000b5c:	4463      	add	r3, ip
 8000b5e:	3802      	subs	r0, #2
 8000b60:	1b9b      	subs	r3, r3, r6
 8000b62:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b66:	2100      	movs	r1, #0
 8000b68:	b11d      	cbz	r5, 8000b72 <__udivmoddi4+0xa6>
 8000b6a:	40d3      	lsrs	r3, r2
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d905      	bls.n	8000b86 <__udivmoddi4+0xba>
 8000b7a:	b10d      	cbz	r5, 8000b80 <__udivmoddi4+0xb4>
 8000b7c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b80:	2100      	movs	r1, #0
 8000b82:	4608      	mov	r0, r1
 8000b84:	e7f5      	b.n	8000b72 <__udivmoddi4+0xa6>
 8000b86:	fab3 f183 	clz	r1, r3
 8000b8a:	2900      	cmp	r1, #0
 8000b8c:	d146      	bne.n	8000c1c <__udivmoddi4+0x150>
 8000b8e:	42a3      	cmp	r3, r4
 8000b90:	d302      	bcc.n	8000b98 <__udivmoddi4+0xcc>
 8000b92:	4290      	cmp	r0, r2
 8000b94:	f0c0 80f0 	bcc.w	8000d78 <__udivmoddi4+0x2ac>
 8000b98:	1a86      	subs	r6, r0, r2
 8000b9a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	2d00      	cmp	r5, #0
 8000ba2:	d0e6      	beq.n	8000b72 <__udivmoddi4+0xa6>
 8000ba4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba8:	e7e3      	b.n	8000b72 <__udivmoddi4+0xa6>
 8000baa:	2a00      	cmp	r2, #0
 8000bac:	f040 8090 	bne.w	8000cd0 <__udivmoddi4+0x204>
 8000bb0:	eba1 040c 	sub.w	r4, r1, ip
 8000bb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb8:	fa1f f78c 	uxth.w	r7, ip
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bce:	fb07 f006 	mul.w	r0, r7, r6
 8000bd2:	4298      	cmp	r0, r3
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x11c>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x11a>
 8000be0:	4298      	cmp	r0, r3
 8000be2:	f200 80cd 	bhi.w	8000d80 <__udivmoddi4+0x2b4>
 8000be6:	4626      	mov	r6, r4
 8000be8:	1a1c      	subs	r4, r3, r0
 8000bea:	fa1f f38e 	uxth.w	r3, lr
 8000bee:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bf2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bfa:	fb00 f707 	mul.w	r7, r0, r7
 8000bfe:	429f      	cmp	r7, r3
 8000c00:	d908      	bls.n	8000c14 <__udivmoddi4+0x148>
 8000c02:	eb1c 0303 	adds.w	r3, ip, r3
 8000c06:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c0a:	d202      	bcs.n	8000c12 <__udivmoddi4+0x146>
 8000c0c:	429f      	cmp	r7, r3
 8000c0e:	f200 80b0 	bhi.w	8000d72 <__udivmoddi4+0x2a6>
 8000c12:	4620      	mov	r0, r4
 8000c14:	1bdb      	subs	r3, r3, r7
 8000c16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c1a:	e7a5      	b.n	8000b68 <__udivmoddi4+0x9c>
 8000c1c:	f1c1 0620 	rsb	r6, r1, #32
 8000c20:	408b      	lsls	r3, r1
 8000c22:	fa22 f706 	lsr.w	r7, r2, r6
 8000c26:	431f      	orrs	r7, r3
 8000c28:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c2c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c30:	ea43 030c 	orr.w	r3, r3, ip
 8000c34:	40f4      	lsrs	r4, r6
 8000c36:	fa00 f801 	lsl.w	r8, r0, r1
 8000c3a:	0c38      	lsrs	r0, r7, #16
 8000c3c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c40:	fbb4 fef0 	udiv	lr, r4, r0
 8000c44:	fa1f fc87 	uxth.w	ip, r7
 8000c48:	fb00 441e 	mls	r4, r0, lr, r4
 8000c4c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c50:	fb0e f90c 	mul.w	r9, lr, ip
 8000c54:	45a1      	cmp	r9, r4
 8000c56:	fa02 f201 	lsl.w	r2, r2, r1
 8000c5a:	d90a      	bls.n	8000c72 <__udivmoddi4+0x1a6>
 8000c5c:	193c      	adds	r4, r7, r4
 8000c5e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c62:	f080 8084 	bcs.w	8000d6e <__udivmoddi4+0x2a2>
 8000c66:	45a1      	cmp	r9, r4
 8000c68:	f240 8081 	bls.w	8000d6e <__udivmoddi4+0x2a2>
 8000c6c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c70:	443c      	add	r4, r7
 8000c72:	eba4 0409 	sub.w	r4, r4, r9
 8000c76:	fa1f f983 	uxth.w	r9, r3
 8000c7a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c7e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c82:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c86:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	d907      	bls.n	8000c9e <__udivmoddi4+0x1d2>
 8000c8e:	193c      	adds	r4, r7, r4
 8000c90:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c94:	d267      	bcs.n	8000d66 <__udivmoddi4+0x29a>
 8000c96:	45a4      	cmp	ip, r4
 8000c98:	d965      	bls.n	8000d66 <__udivmoddi4+0x29a>
 8000c9a:	3b02      	subs	r3, #2
 8000c9c:	443c      	add	r4, r7
 8000c9e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ca2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ca6:	eba4 040c 	sub.w	r4, r4, ip
 8000caa:	429c      	cmp	r4, r3
 8000cac:	46ce      	mov	lr, r9
 8000cae:	469c      	mov	ip, r3
 8000cb0:	d351      	bcc.n	8000d56 <__udivmoddi4+0x28a>
 8000cb2:	d04e      	beq.n	8000d52 <__udivmoddi4+0x286>
 8000cb4:	b155      	cbz	r5, 8000ccc <__udivmoddi4+0x200>
 8000cb6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cba:	eb64 040c 	sbc.w	r4, r4, ip
 8000cbe:	fa04 f606 	lsl.w	r6, r4, r6
 8000cc2:	40cb      	lsrs	r3, r1
 8000cc4:	431e      	orrs	r6, r3
 8000cc6:	40cc      	lsrs	r4, r1
 8000cc8:	e9c5 6400 	strd	r6, r4, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	e750      	b.n	8000b72 <__udivmoddi4+0xa6>
 8000cd0:	f1c2 0320 	rsb	r3, r2, #32
 8000cd4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cdc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ce0:	4094      	lsls	r4, r2
 8000ce2:	430c      	orrs	r4, r1
 8000ce4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cec:	fa1f f78c 	uxth.w	r7, ip
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf8:	0c23      	lsrs	r3, r4, #16
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f107 	mul.w	r1, r0, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x24c>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d0e:	d22c      	bcs.n	8000d6a <__udivmoddi4+0x29e>
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d92a      	bls.n	8000d6a <__udivmoddi4+0x29e>
 8000d14:	3802      	subs	r0, #2
 8000d16:	4463      	add	r3, ip
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d20:	fb08 3311 	mls	r3, r8, r1, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb01 f307 	mul.w	r3, r1, r7
 8000d2c:	42a3      	cmp	r3, r4
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0x276>
 8000d30:	eb1c 0404 	adds.w	r4, ip, r4
 8000d34:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d38:	d213      	bcs.n	8000d62 <__udivmoddi4+0x296>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d911      	bls.n	8000d62 <__udivmoddi4+0x296>
 8000d3e:	3902      	subs	r1, #2
 8000d40:	4464      	add	r4, ip
 8000d42:	1ae4      	subs	r4, r4, r3
 8000d44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d48:	e739      	b.n	8000bbe <__udivmoddi4+0xf2>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	e6f0      	b.n	8000b30 <__udivmoddi4+0x64>
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e706      	b.n	8000b60 <__udivmoddi4+0x94>
 8000d52:	45c8      	cmp	r8, r9
 8000d54:	d2ae      	bcs.n	8000cb4 <__udivmoddi4+0x1e8>
 8000d56:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d5a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d5e:	3801      	subs	r0, #1
 8000d60:	e7a8      	b.n	8000cb4 <__udivmoddi4+0x1e8>
 8000d62:	4631      	mov	r1, r6
 8000d64:	e7ed      	b.n	8000d42 <__udivmoddi4+0x276>
 8000d66:	4603      	mov	r3, r0
 8000d68:	e799      	b.n	8000c9e <__udivmoddi4+0x1d2>
 8000d6a:	4630      	mov	r0, r6
 8000d6c:	e7d4      	b.n	8000d18 <__udivmoddi4+0x24c>
 8000d6e:	46d6      	mov	lr, sl
 8000d70:	e77f      	b.n	8000c72 <__udivmoddi4+0x1a6>
 8000d72:	4463      	add	r3, ip
 8000d74:	3802      	subs	r0, #2
 8000d76:	e74d      	b.n	8000c14 <__udivmoddi4+0x148>
 8000d78:	4606      	mov	r6, r0
 8000d7a:	4623      	mov	r3, r4
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	e70f      	b.n	8000ba0 <__udivmoddi4+0xd4>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	4463      	add	r3, ip
 8000d84:	e730      	b.n	8000be8 <__udivmoddi4+0x11c>
 8000d86:	bf00      	nop

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <J3_IBUS_new>:
#include "J3_IBUS_FLYSKY.h"


//typedef struct TRxIBus TRxIBus;

TRxIBus* J3_IBUS_new(UART_HandleTypeDef* _uart, uint8_t _qtdCanal){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	70fb      	strb	r3, [r7, #3]
  TRxIBus* auxRxIBus;

  auxRxIBus = malloc(sizeof(TRxIBus));
 8000d98:	2018      	movs	r0, #24
 8000d9a:	f004 fc63 	bl	8005664 <malloc>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	60fb      	str	r3, [r7, #12]
  auxRxIBus->uart = _uart;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	601a      	str	r2, [r3, #0]
  auxRxIBus->qdtCanal = _qtdCanal;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	78fa      	ldrb	r2, [r7, #3]
 8000dac:	711a      	strb	r2, [r3, #4]

  auxRxIBus->buffer_size = ((auxRxIBus->qdtCanal * 2) + 4) * 2; /* Armazena 2 buffers para garantir ler o pacote inteiro */
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	791b      	ldrb	r3, [r3, #4]
 8000db2:	3302      	adds	r3, #2
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	731a      	strb	r2, [r3, #12]
  /* Esse + 4 �  1 byte de inicio, 2 bytes de checksum, 1 byte de finalizador  */

  auxRxIBus->buffer = malloc(auxRxIBus->buffer_size * sizeof(uint8_t));
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	7b1b      	ldrb	r3, [r3, #12]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f004 fc4e 	bl	8005664 <malloc>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461a      	mov	r2, r3
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	609a      	str	r2, [r3, #8]
  memset(auxRxIBus->buffer, 0x00, auxRxIBus->buffer_size * sizeof(uint8_t));
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	6898      	ldr	r0, [r3, #8]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	7b1b      	ldrb	r3, [r3, #12]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	2100      	movs	r1, #0
 8000ddc:	f004 fd18 	bl	8005810 <memset>

  auxRxIBus->canais = malloc(auxRxIBus->qdtCanal * sizeof(uint16_t));
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	791b      	ldrb	r3, [r3, #4]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	4618      	mov	r0, r3
 8000de8:	f004 fc3c 	bl	8005664 <malloc>
 8000dec:	4603      	mov	r3, r0
 8000dee:	461a      	mov	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  memset(auxRxIBus->canais, 0x00, auxRxIBus->qdtCanal * sizeof(uint16_t));
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	6918      	ldr	r0, [r3, #16]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	791b      	ldrb	r3, [r3, #4]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	461a      	mov	r2, r3
 8000e00:	2100      	movs	r1, #0
 8000e02:	f004 fd05 	bl	8005810 <memset>

  /* Armazena os valores enquanto processa */
  auxRxIBus->canais_tmp = malloc(auxRxIBus->qdtCanal * sizeof(uint16_t));
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	791b      	ldrb	r3, [r3, #4]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f004 fc29 	bl	8005664 <malloc>
 8000e12:	4603      	mov	r3, r0
 8000e14:	461a      	mov	r2, r3
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	615a      	str	r2, [r3, #20]
  memset(auxRxIBus->canais_tmp, 0x00, auxRxIBus->qdtCanal * sizeof(uint16_t));
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	6958      	ldr	r0, [r3, #20]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	791b      	ldrb	r3, [r3, #4]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	461a      	mov	r2, r3
 8000e26:	2100      	movs	r1, #0
 8000e28:	f004 fcf2 	bl	8005810 <memset>


  return auxRxIBus;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <J3_IBUS_GetCh>:
	  _RxIBus->canais[i] = _RxIBus->canais_tmp[i];
	}
  }
}

uint16_t J3_IBUS_GetCh(TRxIBus* _RxIBus, uint8_t _canal){
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	70fb      	strb	r3, [r7, #3]
  if (_canal == 0)
 8000e42:	78fb      	ldrb	r3, [r7, #3]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d101      	bne.n	8000e4c <J3_IBUS_GetCh+0x16>
    return 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	e00f      	b.n	8000e6c <J3_IBUS_GetCh+0x36>
  if (_canal > _RxIBus->qdtCanal)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	791b      	ldrb	r3, [r3, #4]
 8000e50:	78fa      	ldrb	r2, [r7, #3]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d901      	bls.n	8000e5a <J3_IBUS_GetCh+0x24>
    return 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e008      	b.n	8000e6c <J3_IBUS_GetCh+0x36>

  return _RxIBus->canais[_canal-1];
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	691a      	ldr	r2, [r3, #16]
 8000e5e:	78fb      	ldrb	r3, [r7, #3]
 8000e60:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8000e64:	3b01      	subs	r3, #1
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	4413      	add	r3, r2
 8000e6a:	881b      	ldrh	r3, [r3, #0]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000e78:	b4b0      	push	{r4, r5, r7}
 8000e7a:	b08f      	sub	sp, #60	@ 0x3c
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000e80:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000e86:	2307      	movs	r3, #7
 8000e88:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000e8c:	2307      	movs	r3, #7
 8000e8e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000e92:	2301      	movs	r3, #1
 8000e94:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8000e98:	23ff      	movs	r3, #255	@ 0xff
 8000e9a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000e9e:	2364      	movs	r3, #100	@ 0x64
 8000ea0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000ea4:	2308      	movs	r3, #8
 8000ea6:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	461d      	mov	r5, r3
 8000eac:	f107 040c 	add.w	r4, r7, #12
 8000eb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eb8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000ebc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	373c      	adds	r7, #60	@ 0x3c
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bcb0      	pop	{r4, r5, r7}
 8000ec8:	4770      	bx	lr

08000eca <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6898      	ldr	r0, [r3, #8]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	899b      	ldrh	r3, [r3, #12]
 8000eda:	2200      	movs	r2, #0
 8000edc:	4619      	mov	r1, r3
 8000ede:	f002 f973 	bl	80031c8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f001 fa3a 	bl	800235c <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6898      	ldr	r0, [r3, #8]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	899b      	ldrh	r3, [r3, #12]
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f002 f968 	bl	80031c8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000ef8:	2064      	movs	r0, #100	@ 0x64
 8000efa:	f001 fa2f 	bl	800235c <HAL_Delay>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b084      	sub	sp, #16
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000f10:	2101      	movs	r1, #1
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f000 f9ff 	bl	8001316 <LoRa_read>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000f1c:	7bbb      	ldrb	r3, [r7, #14]
 8000f1e:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d107      	bne.n	8000f36 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000f26:	7bbb      	ldrb	r3, [r7, #14]
 8000f28:	f023 0307 	bic.w	r3, r3, #7
 8000f2c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	61da      	str	r2, [r3, #28]
 8000f34:	e03e      	b.n	8000fb4 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d10c      	bne.n	8000f56 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000f3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f40:	f023 0307 	bic.w	r3, r3, #7
 8000f44:	b25b      	sxtb	r3, r3
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	b25b      	sxtb	r3, r3
 8000f4c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2201      	movs	r2, #1
 8000f52:	61da      	str	r2, [r3, #28]
 8000f54:	e02e      	b.n	8000fb4 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	2b03      	cmp	r3, #3
 8000f5a:	d10c      	bne.n	8000f76 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000f5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f60:	f023 0307 	bic.w	r3, r3, #7
 8000f64:	b25b      	sxtb	r3, r3
 8000f66:	f043 0303 	orr.w	r3, r3, #3
 8000f6a:	b25b      	sxtb	r3, r3
 8000f6c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2203      	movs	r2, #3
 8000f72:	61da      	str	r2, [r3, #28]
 8000f74:	e01e      	b.n	8000fb4 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	2b05      	cmp	r3, #5
 8000f7a:	d10c      	bne.n	8000f96 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000f7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f80:	f023 0307 	bic.w	r3, r3, #7
 8000f84:	b25b      	sxtb	r3, r3
 8000f86:	f043 0305 	orr.w	r3, r3, #5
 8000f8a:	b25b      	sxtb	r3, r3
 8000f8c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2205      	movs	r2, #5
 8000f92:	61da      	str	r2, [r3, #28]
 8000f94:	e00e      	b.n	8000fb4 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	2b06      	cmp	r3, #6
 8000f9a:	d10b      	bne.n	8000fb4 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000f9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fa0:	f023 0307 	bic.w	r3, r3, #7
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	f043 0306 	orr.w	r3, r3, #6
 8000faa:	b25b      	sxtb	r3, r3
 8000fac:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2206      	movs	r2, #6
 8000fb2:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	2101      	movs	r1, #1
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 f9c5 	bl	800134a <LoRa_write>
	//HAL_Delay(10);
}
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	603b      	str	r3, [r7, #0]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6818      	ldr	r0, [r3, #0]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	889b      	ldrh	r3, [r3, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f002 f8f0 	bl	80031c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	6998      	ldr	r0, [r3, #24]
 8000fec:	88fa      	ldrh	r2, [r7, #6]
 8000fee:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ff2:	68b9      	ldr	r1, [r7, #8]
 8000ff4:	f002 ffc3 	bl	8003f7e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000ff8:	bf00      	nop
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f003 fbc3 	bl	800478a <HAL_SPI_GetState>
 8001004:	4603      	mov	r3, r0
 8001006:	2b01      	cmp	r3, #1
 8001008:	d1f7      	bne.n	8000ffa <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6998      	ldr	r0, [r3, #24]
 800100e:	8b3a      	ldrh	r2, [r7, #24]
 8001010:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001014:	6839      	ldr	r1, [r7, #0]
 8001016:	f003 f8f6 	bl	8004206 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800101a:	bf00      	nop
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	4618      	mov	r0, r3
 8001022:	f003 fbb2 	bl	800478a <HAL_SPI_GetState>
 8001026:	4603      	mov	r3, r0
 8001028:	2b01      	cmp	r3, #1
 800102a:	d1f7      	bne.n	800101c <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6818      	ldr	r0, [r3, #0]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	889b      	ldrh	r3, [r3, #4]
 8001034:	2201      	movs	r2, #1
 8001036:	4619      	mov	r1, r3
 8001038:	f002 f8c6 	bl	80031c8 <HAL_GPIO_WritePin>
}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	4613      	mov	r3, r2
 8001052:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	6818      	ldr	r0, [r3, #0]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	889b      	ldrh	r3, [r3, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	4619      	mov	r1, r3
 8001060:	f002 f8b2 	bl	80031c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	6998      	ldr	r0, [r3, #24]
 8001068:	88fa      	ldrh	r2, [r7, #6]
 800106a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800106e:	68b9      	ldr	r1, [r7, #8]
 8001070:	f002 ff85 	bl	8003f7e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001074:	bf00      	nop
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	4618      	mov	r0, r3
 800107c:	f003 fb85 	bl	800478a <HAL_SPI_GetState>
 8001080:	4603      	mov	r3, r0
 8001082:	2b01      	cmp	r3, #1
 8001084:	d1f7      	bne.n	8001076 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	6998      	ldr	r0, [r3, #24]
 800108a:	8b3a      	ldrh	r2, [r7, #24]
 800108c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001090:	6839      	ldr	r1, [r7, #0]
 8001092:	f002 ff74 	bl	8003f7e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001096:	bf00      	nop
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4618      	mov	r0, r3
 800109e:	f003 fb74 	bl	800478a <HAL_SPI_GetState>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d1f7      	bne.n	8001098 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	889b      	ldrh	r3, [r3, #4]
 80010b0:	2201      	movs	r2, #1
 80010b2:	4619      	mov	r1, r3
 80010b4:	f002 f888 	bl	80031c8 <HAL_GPIO_WritePin>
}
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 80010cc:	2126      	movs	r1, #38	@ 0x26
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 f921 	bl	8001316 <LoRa_read>
 80010d4:	4603      	mov	r3, r0
 80010d6:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 80010d8:	78fb      	ldrb	r3, [r7, #3]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d004      	beq.n	80010e8 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 80010de:	7bbb      	ldrb	r3, [r7, #14]
 80010e0:	f043 0308 	orr.w	r3, r3, #8
 80010e4:	73fb      	strb	r3, [r7, #15]
 80010e6:	e003      	b.n	80010f0 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 80010e8:	7bbb      	ldrb	r3, [r7, #14]
 80010ea:	f023 0308 	bic.w	r3, r3, #8
 80010ee:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	461a      	mov	r2, r3
 80010f4:	2126      	movs	r1, #38	@ 0x26
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 f927 	bl	800134a <LoRa_write>
	HAL_Delay(10);
 80010fc:	200a      	movs	r0, #10
 80010fe:	f001 f92d 	bl	800235c <HAL_Delay>
}
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 800110c:	b580      	push	{r7, lr}
 800110e:	b096      	sub	sp, #88	@ 0x58
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8001114:	4a17      	ldr	r2, [pc, #92]	@ (8001174 <LoRa_setAutoLDO+0x68>)
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	4611      	mov	r1, r2
 800111c:	2250      	movs	r2, #80	@ 0x50
 800111e:	4618      	mov	r0, r3
 8001120:	f004 fbba 	bl	8005898 <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800112a:	461a      	mov	r2, r3
 800112c:	2301      	movs	r3, #1
 800112e:	4093      	lsls	r3, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fa0f 	bl	8000554 <__aeabi_i2d>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	3358      	adds	r3, #88	@ 0x58
 8001140:	443b      	add	r3, r7
 8001142:	3b50      	subs	r3, #80	@ 0x50
 8001144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001148:	f7ff fb98 	bl	800087c <__aeabi_ddiv>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4610      	mov	r0, r2
 8001152:	4619      	mov	r1, r3
 8001154:	f7ff fc7a 	bl	8000a4c <__aeabi_d2iz>
 8001158:	4603      	mov	r3, r0
 800115a:	2b10      	cmp	r3, #16
 800115c:	bfcc      	ite	gt
 800115e:	2301      	movgt	r3, #1
 8001160:	2300      	movle	r3, #0
 8001162:	b2db      	uxtb	r3, r3
 8001164:	4619      	mov	r1, r3
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff ffaa 	bl	80010c0 <LoRa_setLowDaraRateOptimization>
}
 800116c:	bf00      	nop
 800116e:	3758      	adds	r7, #88	@ 0x58
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	08005fd0 	.word	0x08005fd0

08001178 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	04db      	lsls	r3, r3, #19
 8001186:	115b      	asrs	r3, r3, #5
 8001188:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	0c1b      	lsrs	r3, r3, #16
 800118e:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001190:	7afb      	ldrb	r3, [r7, #11]
 8001192:	461a      	mov	r2, r3
 8001194:	2106      	movs	r1, #6
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f8d7 	bl	800134a <LoRa_write>
	HAL_Delay(5);
 800119c:	2005      	movs	r0, #5
 800119e:	f001 f8dd 	bl	800235c <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80011a8:	7afb      	ldrb	r3, [r7, #11]
 80011aa:	461a      	mov	r2, r3
 80011ac:	2107      	movs	r1, #7
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 f8cb 	bl	800134a <LoRa_write>
	HAL_Delay(5);
 80011b4:	2005      	movs	r0, #5
 80011b6:	f001 f8d1 	bl	800235c <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 80011be:	7afb      	ldrb	r3, [r7, #11]
 80011c0:	461a      	mov	r2, r3
 80011c2:	2108      	movs	r1, #8
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f000 f8c0 	bl	800134a <LoRa_write>
	HAL_Delay(5);
 80011ca:	2005      	movs	r0, #5
 80011cc:	f001 f8c6 	bl	800235c <HAL_Delay>
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	2b0c      	cmp	r3, #12
 80011e6:	dd01      	ble.n	80011ec <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80011e8:	230c      	movs	r3, #12
 80011ea:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	2b06      	cmp	r3, #6
 80011f0:	dc01      	bgt.n	80011f6 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80011f2:	2307      	movs	r3, #7
 80011f4:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80011f6:	211e      	movs	r1, #30
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 f88c 	bl	8001316 <LoRa_read>
 80011fe:	4603      	mov	r3, r0
 8001200:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001202:	200a      	movs	r0, #10
 8001204:	f001 f8aa 	bl	800235c <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	011b      	lsls	r3, r3, #4
 800120e:	b2da      	uxtb	r2, r3
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	b2db      	uxtb	r3, r3
 8001218:	4413      	add	r3, r2
 800121a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 800121c:	7bbb      	ldrb	r3, [r7, #14]
 800121e:	461a      	mov	r2, r3
 8001220:	211e      	movs	r1, #30
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 f891 	bl	800134a <LoRa_write>
	HAL_Delay(10);
 8001228:	200a      	movs	r0, #10
 800122a:	f001 f897 	bl	800235c <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ff6c 	bl	800110c <LoRa_setAutoLDO>
}
 8001234:	bf00      	nop
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001248:	78fb      	ldrb	r3, [r7, #3]
 800124a:	461a      	mov	r2, r3
 800124c:	2109      	movs	r1, #9
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 f87b 	bl	800134a <LoRa_write>
	HAL_Delay(10);
 8001254:	200a      	movs	r0, #10
 8001256:	f001 f881 	bl	800235c <HAL_Delay>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001274:	78fb      	ldrb	r3, [r7, #3]
 8001276:	2b2c      	cmp	r3, #44	@ 0x2c
 8001278:	d801      	bhi.n	800127e <LoRa_setOCP+0x1a>
		current = 45;
 800127a:	232d      	movs	r3, #45	@ 0x2d
 800127c:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 800127e:	78fb      	ldrb	r3, [r7, #3]
 8001280:	2bf0      	cmp	r3, #240	@ 0xf0
 8001282:	d901      	bls.n	8001288 <LoRa_setOCP+0x24>
		current = 240;
 8001284:	23f0      	movs	r3, #240	@ 0xf0
 8001286:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	2b78      	cmp	r3, #120	@ 0x78
 800128c:	d809      	bhi.n	80012a2 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 800128e:	78fb      	ldrb	r3, [r7, #3]
 8001290:	3b2d      	subs	r3, #45	@ 0x2d
 8001292:	4a12      	ldr	r2, [pc, #72]	@ (80012dc <LoRa_setOCP+0x78>)
 8001294:	fb82 1203 	smull	r1, r2, r2, r3
 8001298:	1052      	asrs	r2, r2, #1
 800129a:	17db      	asrs	r3, r3, #31
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	73fb      	strb	r3, [r7, #15]
 80012a0:	e00b      	b.n	80012ba <LoRa_setOCP+0x56>
	else if(current <= 240)
 80012a2:	78fb      	ldrb	r3, [r7, #3]
 80012a4:	2bf0      	cmp	r3, #240	@ 0xf0
 80012a6:	d808      	bhi.n	80012ba <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80012a8:	78fb      	ldrb	r3, [r7, #3]
 80012aa:	331e      	adds	r3, #30
 80012ac:	4a0b      	ldr	r2, [pc, #44]	@ (80012dc <LoRa_setOCP+0x78>)
 80012ae:	fb82 1203 	smull	r1, r2, r2, r3
 80012b2:	1092      	asrs	r2, r2, #2
 80012b4:	17db      	asrs	r3, r3, #31
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	3320      	adds	r3, #32
 80012be:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	461a      	mov	r2, r3
 80012c4:	210b      	movs	r1, #11
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 f83f 	bl	800134a <LoRa_write>
	HAL_Delay(10);
 80012cc:	200a      	movs	r0, #10
 80012ce:	f001 f845 	bl	800235c <HAL_Delay>
}
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	66666667 	.word	0x66666667

080012e0 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80012e8:	211e      	movs	r1, #30
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 f813 	bl	8001316 <LoRa_read>
 80012f0:	4603      	mov	r3, r0
 80012f2:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	f043 0307 	orr.w	r3, r3, #7
 80012fa:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80012fc:	7bbb      	ldrb	r3, [r7, #14]
 80012fe:	461a      	mov	r2, r3
 8001300:	211e      	movs	r1, #30
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 f821 	bl	800134a <LoRa_write>
	HAL_Delay(10);
 8001308:	200a      	movs	r0, #10
 800130a:	f001 f827 	bl	800235c <HAL_Delay>
}
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001316:	b580      	push	{r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af02      	add	r7, sp, #8
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	460b      	mov	r3, r1
 8001320:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001322:	78fb      	ldrb	r3, [r7, #3]
 8001324:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001328:	b2db      	uxtb	r3, r3
 800132a:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 800132c:	f107 030f 	add.w	r3, r7, #15
 8001330:	f107 010e 	add.w	r1, r7, #14
 8001334:	2201      	movs	r2, #1
 8001336:	9200      	str	r2, [sp, #0]
 8001338:	2201      	movs	r2, #1
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff fe44 	bl	8000fc8 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001340:	7bfb      	ldrb	r3, [r7, #15]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af02      	add	r7, sp, #8
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	460b      	mov	r3, r1
 8001354:	70fb      	strb	r3, [r7, #3]
 8001356:	4613      	mov	r3, r2
 8001358:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800135a:	78fb      	ldrb	r3, [r7, #3]
 800135c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001360:	b2db      	uxtb	r3, r3
 8001362:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001364:	78bb      	ldrb	r3, [r7, #2]
 8001366:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001368:	f107 030f 	add.w	r3, r7, #15
 800136c:	f107 010e 	add.w	r1, r7, #14
 8001370:	2201      	movs	r2, #1
 8001372:	9200      	str	r2, [sp, #0]
 8001374:	2201      	movs	r2, #1
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff fe64 	bl	8001044 <LoRa_writeReg>
	//HAL_Delay(5);
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]

	return 1;
 800138c:	2301      	movs	r3, #1
}
 800138e:	4618      	mov	r0, r3
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 800139a:	b580      	push	{r7, lr}
 800139c:	b084      	sub	sp, #16
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ffee 	bl	8001384 <LoRa_isvalid>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f000 8096 	beq.w	80014dc <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80013b0:	2100      	movs	r1, #0
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff fda7 	bl	8000f06 <LoRa_gotoMode>
			HAL_Delay(10);
 80013b8:	200a      	movs	r0, #10
 80013ba:	f000 ffcf 	bl	800235c <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80013be:	2101      	movs	r1, #1
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ffa8 	bl	8001316 <LoRa_read>
 80013c6:	4603      	mov	r3, r0
 80013c8:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80013ca:	200a      	movs	r0, #10
 80013cc:	f000 ffc6 	bl	800235c <HAL_Delay>
			data = read | 0x80;
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013d6:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80013d8:	7bbb      	ldrb	r3, [r7, #14]
 80013da:	461a      	mov	r2, r3
 80013dc:	2101      	movs	r1, #1
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff ffb3 	bl	800134a <LoRa_write>
			HAL_Delay(100);
 80013e4:	2064      	movs	r0, #100	@ 0x64
 80013e6:	f000 ffb9 	bl	800235c <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	4619      	mov	r1, r3
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff fec1 	bl	8001178 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80013fc:	4619      	mov	r1, r3
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ff1c 	bl	800123c <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800140a:	4619      	mov	r1, r3
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ff29 	bl	8001264 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8001412:	2223      	movs	r2, #35	@ 0x23
 8001414:	210c      	movs	r1, #12
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff ff97 	bl	800134a <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ff5f 	bl	80012e0 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001428:	4619      	mov	r1, r3
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff fed4 	bl	80011d8 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001430:	22ff      	movs	r2, #255	@ 0xff
 8001432:	211f      	movs	r1, #31
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ff88 	bl	800134a <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001444:	011b      	lsls	r3, r3, #4
 8001446:	b2da      	uxtb	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	b2db      	uxtb	r3, r3
 8001452:	4413      	add	r3, r2
 8001454:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001456:	7bbb      	ldrb	r3, [r7, #14]
 8001458:	461a      	mov	r2, r3
 800145a:	211d      	movs	r1, #29
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ff74 	bl	800134a <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff fe52 	bl	800110c <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800146c:	0a1b      	lsrs	r3, r3, #8
 800146e:	b29b      	uxth	r3, r3
 8001470:	b2db      	uxtb	r3, r3
 8001472:	461a      	mov	r2, r3
 8001474:	2120      	movs	r1, #32
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ff67 	bl	800134a <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001480:	b2db      	uxtb	r3, r3
 8001482:	461a      	mov	r2, r3
 8001484:	2121      	movs	r1, #33	@ 0x21
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ff5f 	bl	800134a <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 800148c:	2140      	movs	r1, #64	@ 0x40
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ff41 	bl	8001316 <LoRa_read>
 8001494:	4603      	mov	r3, r0
 8001496:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 800149e:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 80014a0:	7bbb      	ldrb	r3, [r7, #14]
 80014a2:	461a      	mov	r2, r3
 80014a4:	2140      	movs	r1, #64	@ 0x40
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ff4f 	bl	800134a <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 80014ac:	2101      	movs	r1, #1
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff fd29 	bl	8000f06 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80014ba:	200a      	movs	r0, #10
 80014bc:	f000 ff4e 	bl	800235c <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80014c0:	2142      	movs	r1, #66	@ 0x42
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ff27 	bl	8001316 <LoRa_read>
 80014c8:	4603      	mov	r3, r0
 80014ca:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	2b12      	cmp	r3, #18
 80014d0:	d101      	bne.n	80014d6 <LoRa_init+0x13c>
				return LORA_OK;
 80014d2:	23c8      	movs	r3, #200	@ 0xc8
 80014d4:	e004      	b.n	80014e0 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 80014d6:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 80014da:	e001      	b.n	80014e0 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 80014dc:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e8:	b5b0      	push	{r4, r5, r7, lr}
 80014ea:	b08c      	sub	sp, #48	@ 0x30
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ee:	f000 fec3 	bl	8002278 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f2:	f000 f9f5 	bl	80018e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f6:	f000 fb79 	bl	8001bec <MX_GPIO_Init>
  MX_DMA_Init();
 80014fa:	f000 fb57 	bl	8001bac <MX_DMA_Init>
  MX_SPI3_Init();
 80014fe:	f000 facb 	bl	8001a98 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8001502:	f000 fb29 	bl	8001b58 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001506:	f000 fa91 	bl	8001a2c <MX_SPI2_Init>
  MX_CAN1_Init();
 800150a:	f000 fa5b 	bl	80019c4 <MX_CAN1_Init>
  MX_UART5_Init();
 800150e:	f000 faf9 	bl	8001b04 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  LoRa_Receive = newLoRa();
 8001512:	4cb5      	ldr	r4, [pc, #724]	@ (80017e8 <main+0x300>)
 8001514:	463b      	mov	r3, r7
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fcae 	bl	8000e78 <newLoRa>
 800151c:	4625      	mov	r5, r4
 800151e:	463c      	mov	r4, r7
 8001520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001522:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001526:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001528:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800152c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  LoRa_Transmit = newLoRa();
 8001530:	4cae      	ldr	r4, [pc, #696]	@ (80017ec <main+0x304>)
 8001532:	463b      	mov	r3, r7
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fc9f 	bl	8000e78 <newLoRa>
 800153a:	4625      	mov	r5, r4
 800153c:	463c      	mov	r4, r7
 800153e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001540:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001544:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001546:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800154a:	e885 0007 	stmia.w	r5, {r0, r1, r2}

	LoRa_Receive.hSPIx                 = &hspi3;
 800154e:	4ba6      	ldr	r3, [pc, #664]	@ (80017e8 <main+0x300>)
 8001550:	4aa7      	ldr	r2, [pc, #668]	@ (80017f0 <main+0x308>)
 8001552:	619a      	str	r2, [r3, #24]
	LoRa_Receive.CS_port               = NSS_Tx_GPIO_Port;
 8001554:	4ba4      	ldr	r3, [pc, #656]	@ (80017e8 <main+0x300>)
 8001556:	4aa7      	ldr	r2, [pc, #668]	@ (80017f4 <main+0x30c>)
 8001558:	601a      	str	r2, [r3, #0]
	LoRa_Receive.CS_pin                = NSS_Tx_Pin;
 800155a:	4ba3      	ldr	r3, [pc, #652]	@ (80017e8 <main+0x300>)
 800155c:	2204      	movs	r2, #4
 800155e:	809a      	strh	r2, [r3, #4]
	LoRa_Receive.reset_port            = RST_Tx_GPIO_Port;
 8001560:	4ba1      	ldr	r3, [pc, #644]	@ (80017e8 <main+0x300>)
 8001562:	4aa4      	ldr	r2, [pc, #656]	@ (80017f4 <main+0x30c>)
 8001564:	609a      	str	r2, [r3, #8]
	LoRa_Receive.reset_pin             = RST_Tx_Pin;
 8001566:	4ba0      	ldr	r3, [pc, #640]	@ (80017e8 <main+0x300>)
 8001568:	2201      	movs	r2, #1
 800156a:	819a      	strh	r2, [r3, #12]
	//LoRa_Receive.DIO0_port			 =   DIO0_Tx_GPIO_Port;
	///LoRa_Receive.DIO0_pin				 = DIO0_Tx_Pin;

	LoRa_Receive.frequency             = 450;							  // default = 433 MHz
 800156c:	4b9e      	ldr	r3, [pc, #632]	@ (80017e8 <main+0x300>)
 800156e:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001572:	621a      	str	r2, [r3, #32]
	LoRa_Receive.spredingFactor        = SF_7;							// default = SF_7
 8001574:	4b9c      	ldr	r3, [pc, #624]	@ (80017e8 <main+0x300>)
 8001576:	2207      	movs	r2, #7
 8001578:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	LoRa_Receive.bandWidth			 = BW_125KHz;				  // default = BW_125KHz
 800157c:	4b9a      	ldr	r3, [pc, #616]	@ (80017e8 <main+0x300>)
 800157e:	2207      	movs	r2, #7
 8001580:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	LoRa_Receive.crcRate				 = CR_4_5;						// default = CR_4_5
 8001584:	4b98      	ldr	r3, [pc, #608]	@ (80017e8 <main+0x300>)
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	LoRa_Receive.power			     = POWER_20db;				// default = 20db
 800158c:	4b96      	ldr	r3, [pc, #600]	@ (80017e8 <main+0x300>)
 800158e:	22ff      	movs	r2, #255	@ 0xff
 8001590:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	LoRa_Receive.overCurrentProtection = 120; 							// default = 100 mA
 8001594:	4b94      	ldr	r3, [pc, #592]	@ (80017e8 <main+0x300>)
 8001596:	2278      	movs	r2, #120	@ 0x78
 8001598:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	LoRa_Receive.preamble				 = 10;	// default = 8;
 800159c:	4b92      	ldr	r3, [pc, #584]	@ (80017e8 <main+0x300>)
 800159e:	220a      	movs	r2, #10
 80015a0:	851a      	strh	r2, [r3, #40]	@ 0x28


	LoRa_Transmit.hSPIx                 = &hspi2;
 80015a2:	4b92      	ldr	r3, [pc, #584]	@ (80017ec <main+0x304>)
 80015a4:	4a94      	ldr	r2, [pc, #592]	@ (80017f8 <main+0x310>)
 80015a6:	619a      	str	r2, [r3, #24]
	LoRa_Transmit.CS_port               = NSS_Rx_GPIO_Port;
 80015a8:	4b90      	ldr	r3, [pc, #576]	@ (80017ec <main+0x304>)
 80015aa:	4a94      	ldr	r2, [pc, #592]	@ (80017fc <main+0x314>)
 80015ac:	601a      	str	r2, [r3, #0]
	LoRa_Transmit.CS_pin                = NSS_Rx_Pin;
 80015ae:	4b8f      	ldr	r3, [pc, #572]	@ (80017ec <main+0x304>)
 80015b0:	2280      	movs	r2, #128	@ 0x80
 80015b2:	809a      	strh	r2, [r3, #4]
	LoRa_Transmit.reset_port            = RST_Rx_GPIO_Port;
 80015b4:	4b8d      	ldr	r3, [pc, #564]	@ (80017ec <main+0x304>)
 80015b6:	4a8f      	ldr	r2, [pc, #572]	@ (80017f4 <main+0x30c>)
 80015b8:	609a      	str	r2, [r3, #8]
	LoRa_Transmit.reset_pin             = RST_Rx_Pin;
 80015ba:	4b8c      	ldr	r3, [pc, #560]	@ (80017ec <main+0x304>)
 80015bc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80015c0:	819a      	strh	r2, [r3, #12]
	LoRa_Transmit.DIO0_port			 	= DIO0_Rx_GPIO_Port;
 80015c2:	4b8a      	ldr	r3, [pc, #552]	@ (80017ec <main+0x304>)
 80015c4:	4a8d      	ldr	r2, [pc, #564]	@ (80017fc <main+0x314>)
 80015c6:	611a      	str	r2, [r3, #16]
	LoRa_Transmit.DIO0_pin				= DIO0_Rx_Pin;
 80015c8:	4b88      	ldr	r3, [pc, #544]	@ (80017ec <main+0x304>)
 80015ca:	2240      	movs	r2, #64	@ 0x40
 80015cc:	829a      	strh	r2, [r3, #20]

	LoRa_Transmit.frequency             = 433;							  // default = 433 MHz
 80015ce:	4b87      	ldr	r3, [pc, #540]	@ (80017ec <main+0x304>)
 80015d0:	f240 12b1 	movw	r2, #433	@ 0x1b1
 80015d4:	621a      	str	r2, [r3, #32]
	LoRa_Transmit.spredingFactor        = SF_7;							// default = SF_7
 80015d6:	4b85      	ldr	r3, [pc, #532]	@ (80017ec <main+0x304>)
 80015d8:	2207      	movs	r2, #7
 80015da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	LoRa_Transmit.bandWidth			 = BW_125KHz;				  // default = BW_125KHz
 80015de:	4b83      	ldr	r3, [pc, #524]	@ (80017ec <main+0x304>)
 80015e0:	2207      	movs	r2, #7
 80015e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	LoRa_Transmit.crcRate				 = CR_4_5;						// default = CR_4_5
 80015e6:	4b81      	ldr	r3, [pc, #516]	@ (80017ec <main+0x304>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	LoRa_Transmit.power			     = POWER_20db;				// default = 20db
 80015ee:	4b7f      	ldr	r3, [pc, #508]	@ (80017ec <main+0x304>)
 80015f0:	22ff      	movs	r2, #255	@ 0xff
 80015f2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	LoRa_Transmit.overCurrentProtection = 120; 							// default = 100 mA
 80015f6:	4b7d      	ldr	r3, [pc, #500]	@ (80017ec <main+0x304>)
 80015f8:	2278      	movs	r2, #120	@ 0x78
 80015fa:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	LoRa_Transmit.preamble				 = 10;
 80015fe:	4b7b      	ldr	r3, [pc, #492]	@ (80017ec <main+0x304>)
 8001600:	220a      	movs	r2, #10
 8001602:	851a      	strh	r2, [r3, #40]	@ 0x28



	LoRa_reset(&LoRa_Receive);
 8001604:	4878      	ldr	r0, [pc, #480]	@ (80017e8 <main+0x300>)
 8001606:	f7ff fc60 	bl	8000eca <LoRa_reset>
	LoRa_reset(&LoRa_Transmit);
 800160a:	4878      	ldr	r0, [pc, #480]	@ (80017ec <main+0x304>)
 800160c:	f7ff fc5d 	bl	8000eca <LoRa_reset>
	LoRa_init(&LoRa_Receive);
 8001610:	4875      	ldr	r0, [pc, #468]	@ (80017e8 <main+0x300>)
 8001612:	f7ff fec2 	bl	800139a <LoRa_init>
	LoRa_init(&LoRa_Transmit);
 8001616:	4875      	ldr	r0, [pc, #468]	@ (80017ec <main+0x304>)
 8001618:	f7ff febf 	bl	800139a <LoRa_init>
	HAL_UART_Transmit(&huart2, (uint8_t*)"Ready to receive!\n", 18, HAL_MAX_DELAY);
 800161c:	f04f 33ff 	mov.w	r3, #4294967295
 8001620:	2212      	movs	r2, #18
 8001622:	4977      	ldr	r1, [pc, #476]	@ (8001800 <main+0x318>)
 8001624:	4877      	ldr	r0, [pc, #476]	@ (8001804 <main+0x31c>)
 8001626:	f003 fa51 	bl	8004acc <HAL_UART_Transmit>

	 RxIBus = J3_IBUS_new(&huart5, 14);
 800162a:	210e      	movs	r1, #14
 800162c:	4876      	ldr	r0, [pc, #472]	@ (8001808 <main+0x320>)
 800162e:	f7ff fbad 	bl	8000d8c <J3_IBUS_new>
 8001632:	4603      	mov	r3, r0
 8001634:	4a75      	ldr	r2, [pc, #468]	@ (800180c <main+0x324>)
 8001636:	6013      	str	r3, [r2, #0]

	 HAL_UART_Receive_DMA(&huart5, RxIBus->buffer, 64);
 8001638:	4b74      	ldr	r3, [pc, #464]	@ (800180c <main+0x324>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	2240      	movs	r2, #64	@ 0x40
 8001640:	4619      	mov	r1, r3
 8001642:	4871      	ldr	r0, [pc, #452]	@ (8001808 <main+0x320>)
 8001644:	f003 facd 	bl	8004be2 <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */
	    /* USER CODE END WHILE */
		  /* USER CODE END WHILE */
		 	  HAL_UART_Transmit(&huart2, "CH1:", 4, 100);
 8001648:	2364      	movs	r3, #100	@ 0x64
 800164a:	2204      	movs	r2, #4
 800164c:	4970      	ldr	r1, [pc, #448]	@ (8001810 <main+0x328>)
 800164e:	486d      	ldr	r0, [pc, #436]	@ (8001804 <main+0x31c>)
 8001650:	f003 fa3c 	bl	8004acc <HAL_UART_Transmit>
		 	  sprintf(buf, "%d", J3_IBUS_GetCh(RxIBus, 1));
 8001654:	4b6d      	ldr	r3, [pc, #436]	@ (800180c <main+0x324>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2101      	movs	r1, #1
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fbeb 	bl	8000e36 <J3_IBUS_GetCh>
 8001660:	4603      	mov	r3, r0
 8001662:	461a      	mov	r2, r3
 8001664:	496b      	ldr	r1, [pc, #428]	@ (8001814 <main+0x32c>)
 8001666:	486c      	ldr	r0, [pc, #432]	@ (8001818 <main+0x330>)
 8001668:	f004 f8b2 	bl	80057d0 <siprintf>
		 	  HAL_UART_Transmit(&huart2, (char*)buf, sprintf(buf, "%d", J3_IBUS_GetCh(RxIBus, 1)), 100);
 800166c:	4b67      	ldr	r3, [pc, #412]	@ (800180c <main+0x324>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2101      	movs	r1, #1
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fbdf 	bl	8000e36 <J3_IBUS_GetCh>
 8001678:	4603      	mov	r3, r0
 800167a:	461a      	mov	r2, r3
 800167c:	4965      	ldr	r1, [pc, #404]	@ (8001814 <main+0x32c>)
 800167e:	4866      	ldr	r0, [pc, #408]	@ (8001818 <main+0x330>)
 8001680:	f004 f8a6 	bl	80057d0 <siprintf>
 8001684:	4603      	mov	r3, r0
 8001686:	b29a      	uxth	r2, r3
 8001688:	2364      	movs	r3, #100	@ 0x64
 800168a:	4963      	ldr	r1, [pc, #396]	@ (8001818 <main+0x330>)
 800168c:	485d      	ldr	r0, [pc, #372]	@ (8001804 <main+0x31c>)
 800168e:	f003 fa1d 	bl	8004acc <HAL_UART_Transmit>
		 	  HAL_UART_Transmit(&huart2, "\r\n", 2, 100);
 8001692:	2364      	movs	r3, #100	@ 0x64
 8001694:	2202      	movs	r2, #2
 8001696:	4961      	ldr	r1, [pc, #388]	@ (800181c <main+0x334>)
 8001698:	485a      	ldr	r0, [pc, #360]	@ (8001804 <main+0x31c>)
 800169a:	f003 fa17 	bl	8004acc <HAL_UART_Transmit>

		 	  HAL_UART_Transmit(&huart2, "CH2:", 4, 100);
 800169e:	2364      	movs	r3, #100	@ 0x64
 80016a0:	2204      	movs	r2, #4
 80016a2:	495f      	ldr	r1, [pc, #380]	@ (8001820 <main+0x338>)
 80016a4:	4857      	ldr	r0, [pc, #348]	@ (8001804 <main+0x31c>)
 80016a6:	f003 fa11 	bl	8004acc <HAL_UART_Transmit>
		 	  sprintf(buf1, "%d", J3_IBUS_GetCh(RxIBus, 2));
 80016aa:	4b58      	ldr	r3, [pc, #352]	@ (800180c <main+0x324>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2102      	movs	r1, #2
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fbc0 	bl	8000e36 <J3_IBUS_GetCh>
 80016b6:	4603      	mov	r3, r0
 80016b8:	461a      	mov	r2, r3
 80016ba:	4956      	ldr	r1, [pc, #344]	@ (8001814 <main+0x32c>)
 80016bc:	4859      	ldr	r0, [pc, #356]	@ (8001824 <main+0x33c>)
 80016be:	f004 f887 	bl	80057d0 <siprintf>
		 	  HAL_UART_Transmit(&huart2, (char*)buf1, sprintf(buf1, "%d", J3_IBUS_GetCh(RxIBus, 2)), 100);
 80016c2:	4b52      	ldr	r3, [pc, #328]	@ (800180c <main+0x324>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2102      	movs	r1, #2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fbb4 	bl	8000e36 <J3_IBUS_GetCh>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461a      	mov	r2, r3
 80016d2:	4950      	ldr	r1, [pc, #320]	@ (8001814 <main+0x32c>)
 80016d4:	4853      	ldr	r0, [pc, #332]	@ (8001824 <main+0x33c>)
 80016d6:	f004 f87b 	bl	80057d0 <siprintf>
 80016da:	4603      	mov	r3, r0
 80016dc:	b29a      	uxth	r2, r3
 80016de:	2364      	movs	r3, #100	@ 0x64
 80016e0:	4950      	ldr	r1, [pc, #320]	@ (8001824 <main+0x33c>)
 80016e2:	4848      	ldr	r0, [pc, #288]	@ (8001804 <main+0x31c>)
 80016e4:	f003 f9f2 	bl	8004acc <HAL_UART_Transmit>
		 	  HAL_UART_Transmit(&huart2, "\r\n", 2, 100);
 80016e8:	2364      	movs	r3, #100	@ 0x64
 80016ea:	2202      	movs	r2, #2
 80016ec:	494b      	ldr	r1, [pc, #300]	@ (800181c <main+0x334>)
 80016ee:	4845      	ldr	r0, [pc, #276]	@ (8001804 <main+0x31c>)
 80016f0:	f003 f9ec 	bl	8004acc <HAL_UART_Transmit>

		 	  HAL_UART_Transmit(&huart2, "CH3:", 4, 100);
 80016f4:	2364      	movs	r3, #100	@ 0x64
 80016f6:	2204      	movs	r2, #4
 80016f8:	494b      	ldr	r1, [pc, #300]	@ (8001828 <main+0x340>)
 80016fa:	4842      	ldr	r0, [pc, #264]	@ (8001804 <main+0x31c>)
 80016fc:	f003 f9e6 	bl	8004acc <HAL_UART_Transmit>
		 	  sprintf(buf2, "%d", J3_IBUS_GetCh(RxIBus, 3));
 8001700:	4b42      	ldr	r3, [pc, #264]	@ (800180c <main+0x324>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2103      	movs	r1, #3
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fb95 	bl	8000e36 <J3_IBUS_GetCh>
 800170c:	4603      	mov	r3, r0
 800170e:	461a      	mov	r2, r3
 8001710:	4940      	ldr	r1, [pc, #256]	@ (8001814 <main+0x32c>)
 8001712:	4846      	ldr	r0, [pc, #280]	@ (800182c <main+0x344>)
 8001714:	f004 f85c 	bl	80057d0 <siprintf>
		 	  HAL_UART_Transmit(&huart2, (char*)buf2, sprintf(buf2, "%d", J3_IBUS_GetCh(RxIBus, 3)), 100);
 8001718:	4b3c      	ldr	r3, [pc, #240]	@ (800180c <main+0x324>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2103      	movs	r1, #3
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fb89 	bl	8000e36 <J3_IBUS_GetCh>
 8001724:	4603      	mov	r3, r0
 8001726:	461a      	mov	r2, r3
 8001728:	493a      	ldr	r1, [pc, #232]	@ (8001814 <main+0x32c>)
 800172a:	4840      	ldr	r0, [pc, #256]	@ (800182c <main+0x344>)
 800172c:	f004 f850 	bl	80057d0 <siprintf>
 8001730:	4603      	mov	r3, r0
 8001732:	b29a      	uxth	r2, r3
 8001734:	2364      	movs	r3, #100	@ 0x64
 8001736:	493d      	ldr	r1, [pc, #244]	@ (800182c <main+0x344>)
 8001738:	4832      	ldr	r0, [pc, #200]	@ (8001804 <main+0x31c>)
 800173a:	f003 f9c7 	bl	8004acc <HAL_UART_Transmit>
		 	  HAL_UART_Transmit(&huart2, "\r\n", 2, 100);
 800173e:	2364      	movs	r3, #100	@ 0x64
 8001740:	2202      	movs	r2, #2
 8001742:	4936      	ldr	r1, [pc, #216]	@ (800181c <main+0x334>)
 8001744:	482f      	ldr	r0, [pc, #188]	@ (8001804 <main+0x31c>)
 8001746:	f003 f9c1 	bl	8004acc <HAL_UART_Transmit>

		 	  HAL_UART_Transmit(&huart2, "CH4:", 4, 100);
 800174a:	2364      	movs	r3, #100	@ 0x64
 800174c:	2204      	movs	r2, #4
 800174e:	4938      	ldr	r1, [pc, #224]	@ (8001830 <main+0x348>)
 8001750:	482c      	ldr	r0, [pc, #176]	@ (8001804 <main+0x31c>)
 8001752:	f003 f9bb 	bl	8004acc <HAL_UART_Transmit>
		 	  sprintf(buf3, "%d", J3_IBUS_GetCh(RxIBus, 4));
 8001756:	4b2d      	ldr	r3, [pc, #180]	@ (800180c <main+0x324>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2104      	movs	r1, #4
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fb6a 	bl	8000e36 <J3_IBUS_GetCh>
 8001762:	4603      	mov	r3, r0
 8001764:	461a      	mov	r2, r3
 8001766:	492b      	ldr	r1, [pc, #172]	@ (8001814 <main+0x32c>)
 8001768:	4832      	ldr	r0, [pc, #200]	@ (8001834 <main+0x34c>)
 800176a:	f004 f831 	bl	80057d0 <siprintf>
		 	  HAL_UART_Transmit(&huart2, (char*)buf3, sprintf(buf3, "%d", J3_IBUS_GetCh(RxIBus, 4)), 100);
 800176e:	4b27      	ldr	r3, [pc, #156]	@ (800180c <main+0x324>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2104      	movs	r1, #4
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fb5e 	bl	8000e36 <J3_IBUS_GetCh>
 800177a:	4603      	mov	r3, r0
 800177c:	461a      	mov	r2, r3
 800177e:	4925      	ldr	r1, [pc, #148]	@ (8001814 <main+0x32c>)
 8001780:	482c      	ldr	r0, [pc, #176]	@ (8001834 <main+0x34c>)
 8001782:	f004 f825 	bl	80057d0 <siprintf>
 8001786:	4603      	mov	r3, r0
 8001788:	b29a      	uxth	r2, r3
 800178a:	2364      	movs	r3, #100	@ 0x64
 800178c:	4929      	ldr	r1, [pc, #164]	@ (8001834 <main+0x34c>)
 800178e:	481d      	ldr	r0, [pc, #116]	@ (8001804 <main+0x31c>)
 8001790:	f003 f99c 	bl	8004acc <HAL_UART_Transmit>
		 	  HAL_UART_Transmit(&huart2, "\r\n", 2, 100);
 8001794:	2364      	movs	r3, #100	@ 0x64
 8001796:	2202      	movs	r2, #2
 8001798:	4920      	ldr	r1, [pc, #128]	@ (800181c <main+0x334>)
 800179a:	481a      	ldr	r0, [pc, #104]	@ (8001804 <main+0x31c>)
 800179c:	f003 f996 	bl	8004acc <HAL_UART_Transmit>


		 	  HAL_UART_Transmit(&huart2, "CH5:", 4, 100);
 80017a0:	2364      	movs	r3, #100	@ 0x64
 80017a2:	2204      	movs	r2, #4
 80017a4:	4924      	ldr	r1, [pc, #144]	@ (8001838 <main+0x350>)
 80017a6:	4817      	ldr	r0, [pc, #92]	@ (8001804 <main+0x31c>)
 80017a8:	f003 f990 	bl	8004acc <HAL_UART_Transmit>
		 	  sprintf(buf4, "%d", J3_IBUS_GetCh(RxIBus, 5));
 80017ac:	4b17      	ldr	r3, [pc, #92]	@ (800180c <main+0x324>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2105      	movs	r1, #5
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fb3f 	bl	8000e36 <J3_IBUS_GetCh>
 80017b8:	4603      	mov	r3, r0
 80017ba:	461a      	mov	r2, r3
 80017bc:	4915      	ldr	r1, [pc, #84]	@ (8001814 <main+0x32c>)
 80017be:	481f      	ldr	r0, [pc, #124]	@ (800183c <main+0x354>)
 80017c0:	f004 f806 	bl	80057d0 <siprintf>
		 	  HAL_UART_Transmit(&huart2, (char*)buf4, sprintf(buf4, "%d", J3_IBUS_GetCh(RxIBus, 5)), 100);
 80017c4:	4b11      	ldr	r3, [pc, #68]	@ (800180c <main+0x324>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2105      	movs	r1, #5
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fb33 	bl	8000e36 <J3_IBUS_GetCh>
 80017d0:	4603      	mov	r3, r0
 80017d2:	461a      	mov	r2, r3
 80017d4:	490f      	ldr	r1, [pc, #60]	@ (8001814 <main+0x32c>)
 80017d6:	4819      	ldr	r0, [pc, #100]	@ (800183c <main+0x354>)
 80017d8:	f003 fffa 	bl	80057d0 <siprintf>
 80017dc:	4603      	mov	r3, r0
 80017de:	b29a      	uxth	r2, r3
 80017e0:	2364      	movs	r3, #100	@ 0x64
 80017e2:	4916      	ldr	r1, [pc, #88]	@ (800183c <main+0x354>)
 80017e4:	e02c      	b.n	8001840 <main+0x358>
 80017e6:	bf00      	nop
 80017e8:	20000078 	.word	0x20000078
 80017ec:	200000a4 	.word	0x200000a4
 80017f0:	200001cc 	.word	0x200001cc
 80017f4:	40020400 	.word	0x40020400
 80017f8:	20000174 	.word	0x20000174
 80017fc:	40020800 	.word	0x40020800
 8001800:	08006020 	.word	0x08006020
 8001804:	2000026c 	.word	0x2000026c
 8001808:	20000224 	.word	0x20000224
 800180c:	20000148 	.word	0x20000148
 8001810:	08006034 	.word	0x08006034
 8001814:	0800603c 	.word	0x0800603c
 8001818:	200000d0 	.word	0x200000d0
 800181c:	08006040 	.word	0x08006040
 8001820:	08006044 	.word	0x08006044
 8001824:	200000e4 	.word	0x200000e4
 8001828:	0800604c 	.word	0x0800604c
 800182c:	200000f8 	.word	0x200000f8
 8001830:	08006054 	.word	0x08006054
 8001834:	2000010c 	.word	0x2000010c
 8001838:	0800605c 	.word	0x0800605c
 800183c:	20000120 	.word	0x20000120
 8001840:	4821      	ldr	r0, [pc, #132]	@ (80018c8 <main+0x3e0>)
 8001842:	f003 f943 	bl	8004acc <HAL_UART_Transmit>
		 	  HAL_UART_Transmit(&huart2, "\r\n", 2, 100);
 8001846:	2364      	movs	r3, #100	@ 0x64
 8001848:	2202      	movs	r2, #2
 800184a:	4920      	ldr	r1, [pc, #128]	@ (80018cc <main+0x3e4>)
 800184c:	481e      	ldr	r0, [pc, #120]	@ (80018c8 <main+0x3e0>)
 800184e:	f003 f93d 	bl	8004acc <HAL_UART_Transmit>

		 	  HAL_UART_Transmit(&huart2, "CH6:", 4, 100);
 8001852:	2364      	movs	r3, #100	@ 0x64
 8001854:	2204      	movs	r2, #4
 8001856:	491e      	ldr	r1, [pc, #120]	@ (80018d0 <main+0x3e8>)
 8001858:	481b      	ldr	r0, [pc, #108]	@ (80018c8 <main+0x3e0>)
 800185a:	f003 f937 	bl	8004acc <HAL_UART_Transmit>
		 	  sprintf(buf5, "%d", J3_IBUS_GetCh(RxIBus, 6));
 800185e:	4b1d      	ldr	r3, [pc, #116]	@ (80018d4 <main+0x3ec>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2106      	movs	r1, #6
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fae6 	bl	8000e36 <J3_IBUS_GetCh>
 800186a:	4603      	mov	r3, r0
 800186c:	461a      	mov	r2, r3
 800186e:	491a      	ldr	r1, [pc, #104]	@ (80018d8 <main+0x3f0>)
 8001870:	481a      	ldr	r0, [pc, #104]	@ (80018dc <main+0x3f4>)
 8001872:	f003 ffad 	bl	80057d0 <siprintf>
		 	  HAL_UART_Transmit(&huart2, (char*)buf5, sprintf(buf5, "%d", J3_IBUS_GetCh(RxIBus, 6)), 100);
 8001876:	4b17      	ldr	r3, [pc, #92]	@ (80018d4 <main+0x3ec>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2106      	movs	r1, #6
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fada 	bl	8000e36 <J3_IBUS_GetCh>
 8001882:	4603      	mov	r3, r0
 8001884:	461a      	mov	r2, r3
 8001886:	4914      	ldr	r1, [pc, #80]	@ (80018d8 <main+0x3f0>)
 8001888:	4814      	ldr	r0, [pc, #80]	@ (80018dc <main+0x3f4>)
 800188a:	f003 ffa1 	bl	80057d0 <siprintf>
 800188e:	4603      	mov	r3, r0
 8001890:	b29a      	uxth	r2, r3
 8001892:	2364      	movs	r3, #100	@ 0x64
 8001894:	4911      	ldr	r1, [pc, #68]	@ (80018dc <main+0x3f4>)
 8001896:	480c      	ldr	r0, [pc, #48]	@ (80018c8 <main+0x3e0>)
 8001898:	f003 f918 	bl	8004acc <HAL_UART_Transmit>
		 	  HAL_UART_Transmit(&huart2, "\r\n", 2, 100);
 800189c:	2364      	movs	r3, #100	@ 0x64
 800189e:	2202      	movs	r2, #2
 80018a0:	490a      	ldr	r1, [pc, #40]	@ (80018cc <main+0x3e4>)
 80018a2:	4809      	ldr	r0, [pc, #36]	@ (80018c8 <main+0x3e0>)
 80018a4:	f003 f912 	bl	8004acc <HAL_UART_Transmit>


		 	  HAL_UART_Transmit(&huart2, RxIBus->buffer, 64, 100);
 80018a8:	4b0a      	ldr	r3, [pc, #40]	@ (80018d4 <main+0x3ec>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6899      	ldr	r1, [r3, #8]
 80018ae:	2364      	movs	r3, #100	@ 0x64
 80018b0:	2240      	movs	r2, #64	@ 0x40
 80018b2:	4805      	ldr	r0, [pc, #20]	@ (80018c8 <main+0x3e0>)
 80018b4:	f003 f90a 	bl	8004acc <HAL_UART_Transmit>
		 	  HAL_UART_Transmit(&huart2, "\r\n", 2, 100);
 80018b8:	2364      	movs	r3, #100	@ 0x64
 80018ba:	2202      	movs	r2, #2
 80018bc:	4903      	ldr	r1, [pc, #12]	@ (80018cc <main+0x3e4>)
 80018be:	4802      	ldr	r0, [pc, #8]	@ (80018c8 <main+0x3e0>)
 80018c0:	f003 f904 	bl	8004acc <HAL_UART_Transmit>
		 	  HAL_UART_Transmit(&huart2, "CH1:", 4, 100);
 80018c4:	bf00      	nop
 80018c6:	e6bf      	b.n	8001648 <main+0x160>
 80018c8:	2000026c 	.word	0x2000026c
 80018cc:	08006040 	.word	0x08006040
 80018d0:	08006064 	.word	0x08006064
 80018d4:	20000148 	.word	0x20000148
 80018d8:	0800603c 	.word	0x0800603c
 80018dc:	20000134 	.word	0x20000134

080018e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b094      	sub	sp, #80	@ 0x50
 80018e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018e6:	f107 031c 	add.w	r3, r7, #28
 80018ea:	2234      	movs	r2, #52	@ 0x34
 80018ec:	2100      	movs	r1, #0
 80018ee:	4618      	mov	r0, r3
 80018f0:	f003 ff8e 	bl	8005810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018f4:	f107 0308 	add.w	r3, r7, #8
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001904:	2300      	movs	r3, #0
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	4b2c      	ldr	r3, [pc, #176]	@ (80019bc <SystemClock_Config+0xdc>)
 800190a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190c:	4a2b      	ldr	r2, [pc, #172]	@ (80019bc <SystemClock_Config+0xdc>)
 800190e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001912:	6413      	str	r3, [r2, #64]	@ 0x40
 8001914:	4b29      	ldr	r3, [pc, #164]	@ (80019bc <SystemClock_Config+0xdc>)
 8001916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001920:	2300      	movs	r3, #0
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	4b26      	ldr	r3, [pc, #152]	@ (80019c0 <SystemClock_Config+0xe0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a25      	ldr	r2, [pc, #148]	@ (80019c0 <SystemClock_Config+0xe0>)
 800192a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	4b23      	ldr	r3, [pc, #140]	@ (80019c0 <SystemClock_Config+0xe0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001938:	603b      	str	r3, [r7, #0]
 800193a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800193c:	2302      	movs	r3, #2
 800193e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001940:	2301      	movs	r3, #1
 8001942:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001944:	2310      	movs	r3, #16
 8001946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001948:	2302      	movs	r3, #2
 800194a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800194c:	2300      	movs	r3, #0
 800194e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001950:	2308      	movs	r3, #8
 8001952:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001954:	23b4      	movs	r3, #180	@ 0xb4
 8001956:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001958:	2302      	movs	r3, #2
 800195a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800195c:	2302      	movs	r3, #2
 800195e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001960:	2302      	movs	r3, #2
 8001962:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001964:	f107 031c 	add.w	r3, r7, #28
 8001968:	4618      	mov	r0, r3
 800196a:	f001 ffe1 	bl	8003930 <HAL_RCC_OscConfig>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001974:	f000 f9e0 	bl	8001d38 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001978:	f001 fc40 	bl	80031fc <HAL_PWREx_EnableOverDrive>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001982:	f000 f9d9 	bl	8001d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001986:	230f      	movs	r3, #15
 8001988:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800198a:	2302      	movs	r3, #2
 800198c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001992:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001996:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001998:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800199c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800199e:	f107 0308 	add.w	r3, r7, #8
 80019a2:	2105      	movs	r1, #5
 80019a4:	4618      	mov	r0, r3
 80019a6:	f001 fc79 	bl	800329c <HAL_RCC_ClockConfig>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80019b0:	f000 f9c2 	bl	8001d38 <Error_Handler>
  }
}
 80019b4:	bf00      	nop
 80019b6:	3750      	adds	r7, #80	@ 0x50
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40007000 	.word	0x40007000

080019c4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80019c8:	4b16      	ldr	r3, [pc, #88]	@ (8001a24 <MX_CAN1_Init+0x60>)
 80019ca:	4a17      	ldr	r2, [pc, #92]	@ (8001a28 <MX_CAN1_Init+0x64>)
 80019cc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80019ce:	4b15      	ldr	r3, [pc, #84]	@ (8001a24 <MX_CAN1_Init+0x60>)
 80019d0:	2210      	movs	r2, #16
 80019d2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80019d4:	4b13      	ldr	r3, [pc, #76]	@ (8001a24 <MX_CAN1_Init+0x60>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80019da:	4b12      	ldr	r3, [pc, #72]	@ (8001a24 <MX_CAN1_Init+0x60>)
 80019dc:	2200      	movs	r2, #0
 80019de:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80019e0:	4b10      	ldr	r3, [pc, #64]	@ (8001a24 <MX_CAN1_Init+0x60>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80019e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a24 <MX_CAN1_Init+0x60>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80019ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001a24 <MX_CAN1_Init+0x60>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80019f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001a24 <MX_CAN1_Init+0x60>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80019f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001a24 <MX_CAN1_Init+0x60>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80019fe:	4b09      	ldr	r3, [pc, #36]	@ (8001a24 <MX_CAN1_Init+0x60>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a04:	4b07      	ldr	r3, [pc, #28]	@ (8001a24 <MX_CAN1_Init+0x60>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001a0a:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <MX_CAN1_Init+0x60>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a10:	4804      	ldr	r0, [pc, #16]	@ (8001a24 <MX_CAN1_Init+0x60>)
 8001a12:	f000 fcc7 	bl	80023a4 <HAL_CAN_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001a1c:	f000 f98c 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	2000014c 	.word	0x2000014c
 8001a28:	40006400 	.word	0x40006400

08001a2c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a30:	4b17      	ldr	r3, [pc, #92]	@ (8001a90 <MX_SPI2_Init+0x64>)
 8001a32:	4a18      	ldr	r2, [pc, #96]	@ (8001a94 <MX_SPI2_Init+0x68>)
 8001a34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a36:	4b16      	ldr	r3, [pc, #88]	@ (8001a90 <MX_SPI2_Init+0x64>)
 8001a38:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a3e:	4b14      	ldr	r3, [pc, #80]	@ (8001a90 <MX_SPI2_Init+0x64>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a44:	4b12      	ldr	r3, [pc, #72]	@ (8001a90 <MX_SPI2_Init+0x64>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a4a:	4b11      	ldr	r3, [pc, #68]	@ (8001a90 <MX_SPI2_Init+0x64>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a50:	4b0f      	ldr	r3, [pc, #60]	@ (8001a90 <MX_SPI2_Init+0x64>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a56:	4b0e      	ldr	r3, [pc, #56]	@ (8001a90 <MX_SPI2_Init+0x64>)
 8001a58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a5c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <MX_SPI2_Init+0x64>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a64:	4b0a      	ldr	r3, [pc, #40]	@ (8001a90 <MX_SPI2_Init+0x64>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a6a:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <MX_SPI2_Init+0x64>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a70:	4b07      	ldr	r3, [pc, #28]	@ (8001a90 <MX_SPI2_Init+0x64>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a76:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <MX_SPI2_Init+0x64>)
 8001a78:	220a      	movs	r2, #10
 8001a7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a7c:	4804      	ldr	r0, [pc, #16]	@ (8001a90 <MX_SPI2_Init+0x64>)
 8001a7e:	f002 f9f5 	bl	8003e6c <HAL_SPI_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a88:	f000 f956 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000174 	.word	0x20000174
 8001a94:	40003800 	.word	0x40003800

08001a98 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001a9c:	4b17      	ldr	r3, [pc, #92]	@ (8001afc <MX_SPI3_Init+0x64>)
 8001a9e:	4a18      	ldr	r2, [pc, #96]	@ (8001b00 <MX_SPI3_Init+0x68>)
 8001aa0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001aa2:	4b16      	ldr	r3, [pc, #88]	@ (8001afc <MX_SPI3_Init+0x64>)
 8001aa4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001aa8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001aaa:	4b14      	ldr	r3, [pc, #80]	@ (8001afc <MX_SPI3_Init+0x64>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ab0:	4b12      	ldr	r3, [pc, #72]	@ (8001afc <MX_SPI3_Init+0x64>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ab6:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <MX_SPI3_Init+0x64>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001abc:	4b0f      	ldr	r3, [pc, #60]	@ (8001afc <MX_SPI3_Init+0x64>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8001afc <MX_SPI3_Init+0x64>)
 8001ac4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ac8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001aca:	4b0c      	ldr	r3, [pc, #48]	@ (8001afc <MX_SPI3_Init+0x64>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8001afc <MX_SPI3_Init+0x64>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ad6:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <MX_SPI3_Init+0x64>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001adc:	4b07      	ldr	r3, [pc, #28]	@ (8001afc <MX_SPI3_Init+0x64>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001ae2:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <MX_SPI3_Init+0x64>)
 8001ae4:	220a      	movs	r2, #10
 8001ae6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ae8:	4804      	ldr	r0, [pc, #16]	@ (8001afc <MX_SPI3_Init+0x64>)
 8001aea:	f002 f9bf 	bl	8003e6c <HAL_SPI_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001af4:	f000 f920 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	200001cc 	.word	0x200001cc
 8001b00:	40003c00 	.word	0x40003c00

08001b04 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001b08:	4b11      	ldr	r3, [pc, #68]	@ (8001b50 <MX_UART5_Init+0x4c>)
 8001b0a:	4a12      	ldr	r2, [pc, #72]	@ (8001b54 <MX_UART5_Init+0x50>)
 8001b0c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001b0e:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <MX_UART5_Init+0x4c>)
 8001b10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b14:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001b16:	4b0e      	ldr	r3, [pc, #56]	@ (8001b50 <MX_UART5_Init+0x4c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <MX_UART5_Init+0x4c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001b22:	4b0b      	ldr	r3, [pc, #44]	@ (8001b50 <MX_UART5_Init+0x4c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001b28:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <MX_UART5_Init+0x4c>)
 8001b2a:	220c      	movs	r2, #12
 8001b2c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b2e:	4b08      	ldr	r3, [pc, #32]	@ (8001b50 <MX_UART5_Init+0x4c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b34:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <MX_UART5_Init+0x4c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001b3a:	4805      	ldr	r0, [pc, #20]	@ (8001b50 <MX_UART5_Init+0x4c>)
 8001b3c:	f002 ff76 	bl	8004a2c <HAL_UART_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001b46:	f000 f8f7 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000224 	.word	0x20000224
 8001b54:	40005000 	.word	0x40005000

08001b58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ba4 <MX_USART2_UART_Init+0x4c>)
 8001b5e:	4a12      	ldr	r2, [pc, #72]	@ (8001ba8 <MX_USART2_UART_Init+0x50>)
 8001b60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b62:	4b10      	ldr	r3, [pc, #64]	@ (8001ba4 <MX_USART2_UART_Init+0x4c>)
 8001b64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba4 <MX_USART2_UART_Init+0x4c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba4 <MX_USART2_UART_Init+0x4c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba4 <MX_USART2_UART_Init+0x4c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ba4 <MX_USART2_UART_Init+0x4c>)
 8001b7e:	220c      	movs	r2, #12
 8001b80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b82:	4b08      	ldr	r3, [pc, #32]	@ (8001ba4 <MX_USART2_UART_Init+0x4c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b88:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <MX_USART2_UART_Init+0x4c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b8e:	4805      	ldr	r0, [pc, #20]	@ (8001ba4 <MX_USART2_UART_Init+0x4c>)
 8001b90:	f002 ff4c 	bl	8004a2c <HAL_UART_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b9a:	f000 f8cd 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	2000026c 	.word	0x2000026c
 8001ba8:	40004400 	.word	0x40004400

08001bac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001be8 <MX_DMA_Init+0x3c>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bba:	4a0b      	ldr	r2, [pc, #44]	@ (8001be8 <MX_DMA_Init+0x3c>)
 8001bbc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc2:	4b09      	ldr	r3, [pc, #36]	@ (8001be8 <MX_DMA_Init+0x3c>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	200b      	movs	r0, #11
 8001bd4:	f000 fdbd 	bl	8002752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001bd8:	200b      	movs	r0, #11
 8001bda:	f000 fdd6 	bl	800278a <HAL_NVIC_EnableIRQ>

}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800

08001bec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	@ 0x28
 8001bf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	4b48      	ldr	r3, [pc, #288]	@ (8001d28 <MX_GPIO_Init+0x13c>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	4a47      	ldr	r2, [pc, #284]	@ (8001d28 <MX_GPIO_Init+0x13c>)
 8001c0c:	f043 0304 	orr.w	r3, r3, #4
 8001c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c12:	4b45      	ldr	r3, [pc, #276]	@ (8001d28 <MX_GPIO_Init+0x13c>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	4b41      	ldr	r3, [pc, #260]	@ (8001d28 <MX_GPIO_Init+0x13c>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	4a40      	ldr	r2, [pc, #256]	@ (8001d28 <MX_GPIO_Init+0x13c>)
 8001c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d28 <MX_GPIO_Init+0x13c>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d28 <MX_GPIO_Init+0x13c>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c42:	4a39      	ldr	r2, [pc, #228]	@ (8001d28 <MX_GPIO_Init+0x13c>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4a:	4b37      	ldr	r3, [pc, #220]	@ (8001d28 <MX_GPIO_Init+0x13c>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	4b33      	ldr	r3, [pc, #204]	@ (8001d28 <MX_GPIO_Init+0x13c>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	4a32      	ldr	r2, [pc, #200]	@ (8001d28 <MX_GPIO_Init+0x13c>)
 8001c60:	f043 0302 	orr.w	r3, r3, #2
 8001c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c66:	4b30      	ldr	r3, [pc, #192]	@ (8001d28 <MX_GPIO_Init+0x13c>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	607b      	str	r3, [r7, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	603b      	str	r3, [r7, #0]
 8001c76:	4b2c      	ldr	r3, [pc, #176]	@ (8001d28 <MX_GPIO_Init+0x13c>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	4a2b      	ldr	r2, [pc, #172]	@ (8001d28 <MX_GPIO_Init+0x13c>)
 8001c7c:	f043 0308 	orr.w	r3, r3, #8
 8001c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c82:	4b29      	ldr	r3, [pc, #164]	@ (8001d28 <MX_GPIO_Init+0x13c>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	603b      	str	r3, [r7, #0]
 8001c8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2120      	movs	r1, #32
 8001c92:	4826      	ldr	r0, [pc, #152]	@ (8001d2c <MX_GPIO_Init+0x140>)
 8001c94:	f001 fa98 	bl	80031c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_Tx_Pin|GPIO_PIN_1|NSS_Tx_Pin|RST_Rx_Pin, GPIO_PIN_RESET);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f248 0107 	movw	r1, #32775	@ 0x8007
 8001c9e:	4824      	ldr	r0, [pc, #144]	@ (8001d30 <MX_GPIO_Init+0x144>)
 8001ca0:	f001 fa92 	bl	80031c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIO0_Rx_Pin|NSS_Rx_Pin, GPIO_PIN_RESET);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	21c0      	movs	r1, #192	@ 0xc0
 8001ca8:	4822      	ldr	r0, [pc, #136]	@ (8001d34 <MX_GPIO_Init+0x148>)
 8001caa:	f001 fa8d 	bl	80031c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cb4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001cb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cbe:	f107 0314 	add.w	r3, r7, #20
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	481b      	ldr	r0, [pc, #108]	@ (8001d34 <MX_GPIO_Init+0x148>)
 8001cc6:	f001 f8eb 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001cca:	2320      	movs	r3, #32
 8001ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001cda:	f107 0314 	add.w	r3, r7, #20
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4812      	ldr	r0, [pc, #72]	@ (8001d2c <MX_GPIO_Init+0x140>)
 8001ce2:	f001 f8dd 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Tx_Pin PB1 NSS_Tx_Pin RST_Rx_Pin */
  GPIO_InitStruct.Pin = RST_Tx_Pin|GPIO_PIN_1|NSS_Tx_Pin|RST_Rx_Pin;
 8001ce6:	f248 0307 	movw	r3, #32775	@ 0x8007
 8001cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cec:	2301      	movs	r3, #1
 8001cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	480c      	ldr	r0, [pc, #48]	@ (8001d30 <MX_GPIO_Init+0x144>)
 8001d00:	f001 f8ce 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO0_Rx_Pin NSS_Rx_Pin */
  GPIO_InitStruct.Pin = DIO0_Rx_Pin|NSS_Rx_Pin;
 8001d04:	23c0      	movs	r3, #192	@ 0xc0
 8001d06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d10:	2300      	movs	r3, #0
 8001d12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4806      	ldr	r0, [pc, #24]	@ (8001d34 <MX_GPIO_Init+0x148>)
 8001d1c:	f001 f8c0 	bl	8002ea0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d20:	bf00      	nop
 8001d22:	3728      	adds	r7, #40	@ 0x28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40020000 	.word	0x40020000
 8001d30:	40020400 	.word	0x40020400
 8001d34:	40020800 	.word	0x40020800

08001d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d3c:	b672      	cpsid	i
}
 8001d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <Error_Handler+0x8>

08001d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	4b10      	ldr	r3, [pc, #64]	@ (8001d90 <HAL_MspInit+0x4c>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d52:	4a0f      	ldr	r2, [pc, #60]	@ (8001d90 <HAL_MspInit+0x4c>)
 8001d54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d90 <HAL_MspInit+0x4c>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	603b      	str	r3, [r7, #0]
 8001d6a:	4b09      	ldr	r3, [pc, #36]	@ (8001d90 <HAL_MspInit+0x4c>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6e:	4a08      	ldr	r2, [pc, #32]	@ (8001d90 <HAL_MspInit+0x4c>)
 8001d70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d76:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <HAL_MspInit+0x4c>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d82:	2007      	movs	r0, #7
 8001d84:	f000 fcda 	bl	800273c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40023800 	.word	0x40023800

08001d94 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	@ 0x28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a19      	ldr	r2, [pc, #100]	@ (8001e18 <HAL_CAN_MspInit+0x84>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d12c      	bne.n	8001e10 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	4b18      	ldr	r3, [pc, #96]	@ (8001e1c <HAL_CAN_MspInit+0x88>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbe:	4a17      	ldr	r2, [pc, #92]	@ (8001e1c <HAL_CAN_MspInit+0x88>)
 8001dc0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dc6:	4b15      	ldr	r3, [pc, #84]	@ (8001e1c <HAL_CAN_MspInit+0x88>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	4b11      	ldr	r3, [pc, #68]	@ (8001e1c <HAL_CAN_MspInit+0x88>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	4a10      	ldr	r2, [pc, #64]	@ (8001e1c <HAL_CAN_MspInit+0x88>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e1c <HAL_CAN_MspInit+0x88>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001dee:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001e00:	2309      	movs	r3, #9
 8001e02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4805      	ldr	r0, [pc, #20]	@ (8001e20 <HAL_CAN_MspInit+0x8c>)
 8001e0c:	f001 f848 	bl	8002ea0 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001e10:	bf00      	nop
 8001e12:	3728      	adds	r7, #40	@ 0x28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40006400 	.word	0x40006400
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40020000 	.word	0x40020000

08001e24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08c      	sub	sp, #48	@ 0x30
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 031c 	add.w	r3, r7, #28
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a4a      	ldr	r2, [pc, #296]	@ (8001f6c <HAL_SPI_MspInit+0x148>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d14b      	bne.n	8001ede <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	61bb      	str	r3, [r7, #24]
 8001e4a:	4b49      	ldr	r3, [pc, #292]	@ (8001f70 <HAL_SPI_MspInit+0x14c>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	4a48      	ldr	r2, [pc, #288]	@ (8001f70 <HAL_SPI_MspInit+0x14c>)
 8001e50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e56:	4b46      	ldr	r3, [pc, #280]	@ (8001f70 <HAL_SPI_MspInit+0x14c>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e5e:	61bb      	str	r3, [r7, #24]
 8001e60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	4b42      	ldr	r3, [pc, #264]	@ (8001f70 <HAL_SPI_MspInit+0x14c>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	4a41      	ldr	r2, [pc, #260]	@ (8001f70 <HAL_SPI_MspInit+0x14c>)
 8001e6c:	f043 0304 	orr.w	r3, r3, #4
 8001e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e72:	4b3f      	ldr	r3, [pc, #252]	@ (8001f70 <HAL_SPI_MspInit+0x14c>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	4b3b      	ldr	r3, [pc, #236]	@ (8001f70 <HAL_SPI_MspInit+0x14c>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	4a3a      	ldr	r2, [pc, #232]	@ (8001f70 <HAL_SPI_MspInit+0x14c>)
 8001e88:	f043 0302 	orr.w	r3, r3, #2
 8001e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e8e:	4b38      	ldr	r3, [pc, #224]	@ (8001f70 <HAL_SPI_MspInit+0x14c>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e9a:	230c      	movs	r3, #12
 8001e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001eaa:	2305      	movs	r3, #5
 8001eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eae:	f107 031c 	add.w	r3, r7, #28
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	482f      	ldr	r0, [pc, #188]	@ (8001f74 <HAL_SPI_MspInit+0x150>)
 8001eb6:	f000 fff3 	bl	8002ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001eba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ecc:	2305      	movs	r3, #5
 8001ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed0:	f107 031c 	add.w	r3, r7, #28
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4828      	ldr	r0, [pc, #160]	@ (8001f78 <HAL_SPI_MspInit+0x154>)
 8001ed8:	f000 ffe2 	bl	8002ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001edc:	e041      	b.n	8001f62 <HAL_SPI_MspInit+0x13e>
  else if(hspi->Instance==SPI3)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a26      	ldr	r2, [pc, #152]	@ (8001f7c <HAL_SPI_MspInit+0x158>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d13c      	bne.n	8001f62 <HAL_SPI_MspInit+0x13e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	4b20      	ldr	r3, [pc, #128]	@ (8001f70 <HAL_SPI_MspInit+0x14c>)
 8001eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f70 <HAL_SPI_MspInit+0x14c>)
 8001ef2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ef6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f70 <HAL_SPI_MspInit+0x14c>)
 8001efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f04:	2300      	movs	r3, #0
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	4b19      	ldr	r3, [pc, #100]	@ (8001f70 <HAL_SPI_MspInit+0x14c>)
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0c:	4a18      	ldr	r2, [pc, #96]	@ (8001f70 <HAL_SPI_MspInit+0x14c>)
 8001f0e:	f043 0304 	orr.w	r3, r3, #4
 8001f12:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f14:	4b16      	ldr	r3, [pc, #88]	@ (8001f70 <HAL_SPI_MspInit+0x14c>)
 8001f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f20:	2302      	movs	r3, #2
 8001f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8001f30:	2305      	movs	r3, #5
 8001f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f34:	f107 031c 	add.w	r3, r7, #28
 8001f38:	4619      	mov	r1, r3
 8001f3a:	480e      	ldr	r0, [pc, #56]	@ (8001f74 <HAL_SPI_MspInit+0x150>)
 8001f3c:	f000 ffb0 	bl	8002ea0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f40:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f52:	2306      	movs	r3, #6
 8001f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f56:	f107 031c 	add.w	r3, r7, #28
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4805      	ldr	r0, [pc, #20]	@ (8001f74 <HAL_SPI_MspInit+0x150>)
 8001f5e:	f000 ff9f 	bl	8002ea0 <HAL_GPIO_Init>
}
 8001f62:	bf00      	nop
 8001f64:	3730      	adds	r7, #48	@ 0x30
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40003800 	.word	0x40003800
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40020800 	.word	0x40020800
 8001f78:	40020400 	.word	0x40020400
 8001f7c:	40003c00 	.word	0x40003c00

08001f80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08c      	sub	sp, #48	@ 0x30
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 031c 	add.w	r3, r7, #28
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a58      	ldr	r2, [pc, #352]	@ (8002100 <HAL_UART_MspInit+0x180>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d179      	bne.n	8002096 <HAL_UART_MspInit+0x116>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
 8001fa6:	4b57      	ldr	r3, [pc, #348]	@ (8002104 <HAL_UART_MspInit+0x184>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	4a56      	ldr	r2, [pc, #344]	@ (8002104 <HAL_UART_MspInit+0x184>)
 8001fac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fb2:	4b54      	ldr	r3, [pc, #336]	@ (8002104 <HAL_UART_MspInit+0x184>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fba:	61bb      	str	r3, [r7, #24]
 8001fbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	4b50      	ldr	r3, [pc, #320]	@ (8002104 <HAL_UART_MspInit+0x184>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	4a4f      	ldr	r2, [pc, #316]	@ (8002104 <HAL_UART_MspInit+0x184>)
 8001fc8:	f043 0304 	orr.w	r3, r3, #4
 8001fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fce:	4b4d      	ldr	r3, [pc, #308]	@ (8002104 <HAL_UART_MspInit+0x184>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	4b49      	ldr	r3, [pc, #292]	@ (8002104 <HAL_UART_MspInit+0x184>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	4a48      	ldr	r2, [pc, #288]	@ (8002104 <HAL_UART_MspInit+0x184>)
 8001fe4:	f043 0308 	orr.w	r3, r3, #8
 8001fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fea:	4b46      	ldr	r3, [pc, #280]	@ (8002104 <HAL_UART_MspInit+0x184>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ff6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002004:	2303      	movs	r3, #3
 8002006:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002008:	2308      	movs	r3, #8
 800200a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800200c:	f107 031c 	add.w	r3, r7, #28
 8002010:	4619      	mov	r1, r3
 8002012:	483d      	ldr	r0, [pc, #244]	@ (8002108 <HAL_UART_MspInit+0x188>)
 8002014:	f000 ff44 	bl	8002ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002018:	2304      	movs	r3, #4
 800201a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	2302      	movs	r3, #2
 800201e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002024:	2303      	movs	r3, #3
 8002026:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002028:	2308      	movs	r3, #8
 800202a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800202c:	f107 031c 	add.w	r3, r7, #28
 8002030:	4619      	mov	r1, r3
 8002032:	4836      	ldr	r0, [pc, #216]	@ (800210c <HAL_UART_MspInit+0x18c>)
 8002034:	f000 ff34 	bl	8002ea0 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002038:	4b35      	ldr	r3, [pc, #212]	@ (8002110 <HAL_UART_MspInit+0x190>)
 800203a:	4a36      	ldr	r2, [pc, #216]	@ (8002114 <HAL_UART_MspInit+0x194>)
 800203c:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800203e:	4b34      	ldr	r3, [pc, #208]	@ (8002110 <HAL_UART_MspInit+0x190>)
 8002040:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002044:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002046:	4b32      	ldr	r3, [pc, #200]	@ (8002110 <HAL_UART_MspInit+0x190>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800204c:	4b30      	ldr	r3, [pc, #192]	@ (8002110 <HAL_UART_MspInit+0x190>)
 800204e:	2200      	movs	r2, #0
 8002050:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002052:	4b2f      	ldr	r3, [pc, #188]	@ (8002110 <HAL_UART_MspInit+0x190>)
 8002054:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002058:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800205a:	4b2d      	ldr	r3, [pc, #180]	@ (8002110 <HAL_UART_MspInit+0x190>)
 800205c:	2200      	movs	r2, #0
 800205e:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002060:	4b2b      	ldr	r3, [pc, #172]	@ (8002110 <HAL_UART_MspInit+0x190>)
 8002062:	2200      	movs	r2, #0
 8002064:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002066:	4b2a      	ldr	r3, [pc, #168]	@ (8002110 <HAL_UART_MspInit+0x190>)
 8002068:	2200      	movs	r2, #0
 800206a:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800206c:	4b28      	ldr	r3, [pc, #160]	@ (8002110 <HAL_UART_MspInit+0x190>)
 800206e:	2200      	movs	r2, #0
 8002070:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002072:	4b27      	ldr	r3, [pc, #156]	@ (8002110 <HAL_UART_MspInit+0x190>)
 8002074:	2200      	movs	r2, #0
 8002076:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002078:	4825      	ldr	r0, [pc, #148]	@ (8002110 <HAL_UART_MspInit+0x190>)
 800207a:	f000 fba1 	bl	80027c0 <HAL_DMA_Init>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8002084:	f7ff fe58 	bl	8001d38 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a21      	ldr	r2, [pc, #132]	@ (8002110 <HAL_UART_MspInit+0x190>)
 800208c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800208e:	4a20      	ldr	r2, [pc, #128]	@ (8002110 <HAL_UART_MspInit+0x190>)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002094:	e030      	b.n	80020f8 <HAL_UART_MspInit+0x178>
  else if(huart->Instance==USART2)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a1f      	ldr	r2, [pc, #124]	@ (8002118 <HAL_UART_MspInit+0x198>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d12b      	bne.n	80020f8 <HAL_UART_MspInit+0x178>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	4b17      	ldr	r3, [pc, #92]	@ (8002104 <HAL_UART_MspInit+0x184>)
 80020a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a8:	4a16      	ldr	r2, [pc, #88]	@ (8002104 <HAL_UART_MspInit+0x184>)
 80020aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80020b0:	4b14      	ldr	r3, [pc, #80]	@ (8002104 <HAL_UART_MspInit+0x184>)
 80020b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020bc:	2300      	movs	r3, #0
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	4b10      	ldr	r3, [pc, #64]	@ (8002104 <HAL_UART_MspInit+0x184>)
 80020c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002104 <HAL_UART_MspInit+0x184>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80020cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002104 <HAL_UART_MspInit+0x184>)
 80020ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020d8:	230c      	movs	r3, #12
 80020da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020dc:	2302      	movs	r3, #2
 80020de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e4:	2303      	movs	r3, #3
 80020e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020e8:	2307      	movs	r3, #7
 80020ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ec:	f107 031c 	add.w	r3, r7, #28
 80020f0:	4619      	mov	r1, r3
 80020f2:	480a      	ldr	r0, [pc, #40]	@ (800211c <HAL_UART_MspInit+0x19c>)
 80020f4:	f000 fed4 	bl	8002ea0 <HAL_GPIO_Init>
}
 80020f8:	bf00      	nop
 80020fa:	3730      	adds	r7, #48	@ 0x30
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40005000 	.word	0x40005000
 8002104:	40023800 	.word	0x40023800
 8002108:	40020800 	.word	0x40020800
 800210c:	40020c00 	.word	0x40020c00
 8002110:	200002b4 	.word	0x200002b4
 8002114:	40026010 	.word	0x40026010
 8002118:	40004400 	.word	0x40004400
 800211c:	40020000 	.word	0x40020000

08002120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002124:	bf00      	nop
 8002126:	e7fd      	b.n	8002124 <NMI_Handler+0x4>

08002128 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800212c:	bf00      	nop
 800212e:	e7fd      	b.n	800212c <HardFault_Handler+0x4>

08002130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002134:	bf00      	nop
 8002136:	e7fd      	b.n	8002134 <MemManage_Handler+0x4>

08002138 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800213c:	bf00      	nop
 800213e:	e7fd      	b.n	800213c <BusFault_Handler+0x4>

08002140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002144:	bf00      	nop
 8002146:	e7fd      	b.n	8002144 <UsageFault_Handler+0x4>

08002148 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002176:	f000 f8d1 	bl	800231c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002184:	4802      	ldr	r0, [pc, #8]	@ (8002190 <DMA1_Stream0_IRQHandler+0x10>)
 8002186:	f000 fc21 	bl	80029cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	200002b4 	.word	0x200002b4

08002194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800219c:	4a14      	ldr	r2, [pc, #80]	@ (80021f0 <_sbrk+0x5c>)
 800219e:	4b15      	ldr	r3, [pc, #84]	@ (80021f4 <_sbrk+0x60>)
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021a8:	4b13      	ldr	r3, [pc, #76]	@ (80021f8 <_sbrk+0x64>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d102      	bne.n	80021b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b0:	4b11      	ldr	r3, [pc, #68]	@ (80021f8 <_sbrk+0x64>)
 80021b2:	4a12      	ldr	r2, [pc, #72]	@ (80021fc <_sbrk+0x68>)
 80021b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021b6:	4b10      	ldr	r3, [pc, #64]	@ (80021f8 <_sbrk+0x64>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d207      	bcs.n	80021d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021c4:	f003 fb3c 	bl	8005840 <__errno>
 80021c8:	4603      	mov	r3, r0
 80021ca:	220c      	movs	r2, #12
 80021cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ce:	f04f 33ff 	mov.w	r3, #4294967295
 80021d2:	e009      	b.n	80021e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021d4:	4b08      	ldr	r3, [pc, #32]	@ (80021f8 <_sbrk+0x64>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021da:	4b07      	ldr	r3, [pc, #28]	@ (80021f8 <_sbrk+0x64>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4413      	add	r3, r2
 80021e2:	4a05      	ldr	r2, [pc, #20]	@ (80021f8 <_sbrk+0x64>)
 80021e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021e6:	68fb      	ldr	r3, [r7, #12]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20020000 	.word	0x20020000
 80021f4:	00000400 	.word	0x00000400
 80021f8:	20000314 	.word	0x20000314
 80021fc:	20000468 	.word	0x20000468

08002200 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002204:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <SystemInit+0x20>)
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800220a:	4a05      	ldr	r2, [pc, #20]	@ (8002220 <SystemInit+0x20>)
 800220c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002210:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002224:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800225c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002228:	f7ff ffea 	bl	8002200 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800222c:	480c      	ldr	r0, [pc, #48]	@ (8002260 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800222e:	490d      	ldr	r1, [pc, #52]	@ (8002264 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002230:	4a0d      	ldr	r2, [pc, #52]	@ (8002268 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002234:	e002      	b.n	800223c <LoopCopyDataInit>

08002236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800223a:	3304      	adds	r3, #4

0800223c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800223c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002240:	d3f9      	bcc.n	8002236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002242:	4a0a      	ldr	r2, [pc, #40]	@ (800226c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002244:	4c0a      	ldr	r4, [pc, #40]	@ (8002270 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002248:	e001      	b.n	800224e <LoopFillZerobss>

0800224a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800224a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800224c:	3204      	adds	r2, #4

0800224e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002250:	d3fb      	bcc.n	800224a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002252:	f003 fafb 	bl	800584c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002256:	f7ff f947 	bl	80014e8 <main>
  bx  lr    
 800225a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800225c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002264:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002268:	080060d0 	.word	0x080060d0
  ldr r2, =_sbss
 800226c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002270:	20000464 	.word	0x20000464

08002274 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002274:	e7fe      	b.n	8002274 <ADC_IRQHandler>
	...

08002278 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800227c:	4b0e      	ldr	r3, [pc, #56]	@ (80022b8 <HAL_Init+0x40>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0d      	ldr	r2, [pc, #52]	@ (80022b8 <HAL_Init+0x40>)
 8002282:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002286:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002288:	4b0b      	ldr	r3, [pc, #44]	@ (80022b8 <HAL_Init+0x40>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0a      	ldr	r2, [pc, #40]	@ (80022b8 <HAL_Init+0x40>)
 800228e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002292:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002294:	4b08      	ldr	r3, [pc, #32]	@ (80022b8 <HAL_Init+0x40>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a07      	ldr	r2, [pc, #28]	@ (80022b8 <HAL_Init+0x40>)
 800229a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800229e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a0:	2003      	movs	r0, #3
 80022a2:	f000 fa4b 	bl	800273c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022a6:	2000      	movs	r0, #0
 80022a8:	f000 f808 	bl	80022bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022ac:	f7ff fd4a 	bl	8001d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40023c00 	.word	0x40023c00

080022bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c4:	4b12      	ldr	r3, [pc, #72]	@ (8002310 <HAL_InitTick+0x54>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4b12      	ldr	r3, [pc, #72]	@ (8002314 <HAL_InitTick+0x58>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	4619      	mov	r1, r3
 80022ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 fa63 	bl	80027a6 <HAL_SYSTICK_Config>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e00e      	b.n	8002308 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b0f      	cmp	r3, #15
 80022ee:	d80a      	bhi.n	8002306 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f0:	2200      	movs	r2, #0
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	f04f 30ff 	mov.w	r0, #4294967295
 80022f8:	f000 fa2b 	bl	8002752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022fc:	4a06      	ldr	r2, [pc, #24]	@ (8002318 <HAL_InitTick+0x5c>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	e000      	b.n	8002308 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
}
 8002308:	4618      	mov	r0, r3
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20000000 	.word	0x20000000
 8002314:	20000008 	.word	0x20000008
 8002318:	20000004 	.word	0x20000004

0800231c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002320:	4b06      	ldr	r3, [pc, #24]	@ (800233c <HAL_IncTick+0x20>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	461a      	mov	r2, r3
 8002326:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <HAL_IncTick+0x24>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4413      	add	r3, r2
 800232c:	4a04      	ldr	r2, [pc, #16]	@ (8002340 <HAL_IncTick+0x24>)
 800232e:	6013      	str	r3, [r2, #0]
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	20000008 	.word	0x20000008
 8002340:	20000318 	.word	0x20000318

08002344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return uwTick;
 8002348:	4b03      	ldr	r3, [pc, #12]	@ (8002358 <HAL_GetTick+0x14>)
 800234a:	681b      	ldr	r3, [r3, #0]
}
 800234c:	4618      	mov	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	20000318 	.word	0x20000318

0800235c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002364:	f7ff ffee 	bl	8002344 <HAL_GetTick>
 8002368:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002374:	d005      	beq.n	8002382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002376:	4b0a      	ldr	r3, [pc, #40]	@ (80023a0 <HAL_Delay+0x44>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4413      	add	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002382:	bf00      	nop
 8002384:	f7ff ffde 	bl	8002344 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	429a      	cmp	r2, r3
 8002392:	d8f7      	bhi.n	8002384 <HAL_Delay+0x28>
  {
  }
}
 8002394:	bf00      	nop
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000008 	.word	0x20000008

080023a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e0ed      	b.n	8002592 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d102      	bne.n	80023c8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff fce6 	bl	8001d94 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0201 	orr.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023d8:	f7ff ffb4 	bl	8002344 <HAL_GetTick>
 80023dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023de:	e012      	b.n	8002406 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023e0:	f7ff ffb0 	bl	8002344 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b0a      	cmp	r3, #10
 80023ec:	d90b      	bls.n	8002406 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2205      	movs	r2, #5
 80023fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e0c5      	b.n	8002592 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0e5      	beq.n	80023e0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0202 	bic.w	r2, r2, #2
 8002422:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002424:	f7ff ff8e 	bl	8002344 <HAL_GetTick>
 8002428:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800242a:	e012      	b.n	8002452 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800242c:	f7ff ff8a 	bl	8002344 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b0a      	cmp	r3, #10
 8002438:	d90b      	bls.n	8002452 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2205      	movs	r2, #5
 800244a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e09f      	b.n	8002592 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1e5      	bne.n	800242c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	7e1b      	ldrb	r3, [r3, #24]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d108      	bne.n	800247a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	e007      	b.n	800248a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002488:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	7e5b      	ldrb	r3, [r3, #25]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d108      	bne.n	80024a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	e007      	b.n	80024b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	7e9b      	ldrb	r3, [r3, #26]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d108      	bne.n	80024ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0220 	orr.w	r2, r2, #32
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	e007      	b.n	80024de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 0220 	bic.w	r2, r2, #32
 80024dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	7edb      	ldrb	r3, [r3, #27]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d108      	bne.n	80024f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0210 	bic.w	r2, r2, #16
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	e007      	b.n	8002508 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0210 	orr.w	r2, r2, #16
 8002506:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	7f1b      	ldrb	r3, [r3, #28]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d108      	bne.n	8002522 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0208 	orr.w	r2, r2, #8
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	e007      	b.n	8002532 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0208 	bic.w	r2, r2, #8
 8002530:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	7f5b      	ldrb	r3, [r3, #29]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d108      	bne.n	800254c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f042 0204 	orr.w	r2, r2, #4
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	e007      	b.n	800255c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0204 	bic.w	r2, r2, #4
 800255a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	431a      	orrs	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	ea42 0103 	orr.w	r1, r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	1e5a      	subs	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025ac:	4b0c      	ldr	r3, [pc, #48]	@ (80025e0 <__NVIC_SetPriorityGrouping+0x44>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025b8:	4013      	ands	r3, r2
 80025ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ce:	4a04      	ldr	r2, [pc, #16]	@ (80025e0 <__NVIC_SetPriorityGrouping+0x44>)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	60d3      	str	r3, [r2, #12]
}
 80025d4:	bf00      	nop
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e8:	4b04      	ldr	r3, [pc, #16]	@ (80025fc <__NVIC_GetPriorityGrouping+0x18>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	0a1b      	lsrs	r3, r3, #8
 80025ee:	f003 0307 	and.w	r3, r3, #7
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	2b00      	cmp	r3, #0
 8002610:	db0b      	blt.n	800262a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	f003 021f 	and.w	r2, r3, #31
 8002618:	4907      	ldr	r1, [pc, #28]	@ (8002638 <__NVIC_EnableIRQ+0x38>)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	2001      	movs	r0, #1
 8002622:	fa00 f202 	lsl.w	r2, r0, r2
 8002626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	e000e100 	.word	0xe000e100

0800263c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	6039      	str	r1, [r7, #0]
 8002646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264c:	2b00      	cmp	r3, #0
 800264e:	db0a      	blt.n	8002666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	b2da      	uxtb	r2, r3
 8002654:	490c      	ldr	r1, [pc, #48]	@ (8002688 <__NVIC_SetPriority+0x4c>)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	0112      	lsls	r2, r2, #4
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	440b      	add	r3, r1
 8002660:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002664:	e00a      	b.n	800267c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4908      	ldr	r1, [pc, #32]	@ (800268c <__NVIC_SetPriority+0x50>)
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	3b04      	subs	r3, #4
 8002674:	0112      	lsls	r2, r2, #4
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	440b      	add	r3, r1
 800267a:	761a      	strb	r2, [r3, #24]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	e000e100 	.word	0xe000e100
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002690:	b480      	push	{r7}
 8002692:	b089      	sub	sp, #36	@ 0x24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f1c3 0307 	rsb	r3, r3, #7
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	bf28      	it	cs
 80026ae:	2304      	movcs	r3, #4
 80026b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3304      	adds	r3, #4
 80026b6:	2b06      	cmp	r3, #6
 80026b8:	d902      	bls.n	80026c0 <NVIC_EncodePriority+0x30>
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3b03      	subs	r3, #3
 80026be:	e000      	b.n	80026c2 <NVIC_EncodePriority+0x32>
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c4:	f04f 32ff 	mov.w	r2, #4294967295
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43da      	mvns	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	401a      	ands	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d8:	f04f 31ff 	mov.w	r1, #4294967295
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	fa01 f303 	lsl.w	r3, r1, r3
 80026e2:	43d9      	mvns	r1, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e8:	4313      	orrs	r3, r2
         );
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3724      	adds	r7, #36	@ 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3b01      	subs	r3, #1
 8002704:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002708:	d301      	bcc.n	800270e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800270a:	2301      	movs	r3, #1
 800270c:	e00f      	b.n	800272e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800270e:	4a0a      	ldr	r2, [pc, #40]	@ (8002738 <SysTick_Config+0x40>)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3b01      	subs	r3, #1
 8002714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002716:	210f      	movs	r1, #15
 8002718:	f04f 30ff 	mov.w	r0, #4294967295
 800271c:	f7ff ff8e 	bl	800263c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002720:	4b05      	ldr	r3, [pc, #20]	@ (8002738 <SysTick_Config+0x40>)
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002726:	4b04      	ldr	r3, [pc, #16]	@ (8002738 <SysTick_Config+0x40>)
 8002728:	2207      	movs	r2, #7
 800272a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	e000e010 	.word	0xe000e010

0800273c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff ff29 	bl	800259c <__NVIC_SetPriorityGrouping>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002752:	b580      	push	{r7, lr}
 8002754:	b086      	sub	sp, #24
 8002756:	af00      	add	r7, sp, #0
 8002758:	4603      	mov	r3, r0
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
 800275e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002764:	f7ff ff3e 	bl	80025e4 <__NVIC_GetPriorityGrouping>
 8002768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	68b9      	ldr	r1, [r7, #8]
 800276e:	6978      	ldr	r0, [r7, #20]
 8002770:	f7ff ff8e 	bl	8002690 <NVIC_EncodePriority>
 8002774:	4602      	mov	r2, r0
 8002776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800277a:	4611      	mov	r1, r2
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff ff5d 	bl	800263c <__NVIC_SetPriority>
}
 8002782:	bf00      	nop
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	4603      	mov	r3, r0
 8002792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff ff31 	bl	8002600 <__NVIC_EnableIRQ>
}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b082      	sub	sp, #8
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff ffa2 	bl	80026f8 <SysTick_Config>
 80027b4:	4603      	mov	r3, r0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027cc:	f7ff fdba 	bl	8002344 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e099      	b.n	8002910 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0201 	bic.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027fc:	e00f      	b.n	800281e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027fe:	f7ff fda1 	bl	8002344 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b05      	cmp	r3, #5
 800280a:	d908      	bls.n	800281e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2220      	movs	r2, #32
 8002810:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2203      	movs	r2, #3
 8002816:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e078      	b.n	8002910 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1e8      	bne.n	80027fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	4b38      	ldr	r3, [pc, #224]	@ (8002918 <HAL_DMA_Init+0x158>)
 8002838:	4013      	ands	r3, r2
 800283a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800284a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002856:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002862:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	4313      	orrs	r3, r2
 800286e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002874:	2b04      	cmp	r3, #4
 8002876:	d107      	bne.n	8002888 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002880:	4313      	orrs	r3, r2
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	4313      	orrs	r3, r2
 8002886:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f023 0307 	bic.w	r3, r3, #7
 800289e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d117      	bne.n	80028e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00e      	beq.n	80028e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 fa6f 	bl	8002da8 <DMA_CheckFifoParam>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2240      	movs	r2, #64	@ 0x40
 80028d4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80028de:	2301      	movs	r3, #1
 80028e0:	e016      	b.n	8002910 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 fa26 	bl	8002d3c <DMA_CalcBaseAndBitshift>
 80028f0:	4603      	mov	r3, r0
 80028f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f8:	223f      	movs	r2, #63	@ 0x3f
 80028fa:	409a      	lsls	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	f010803f 	.word	0xf010803f

0800291c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
 8002928:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002932:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_DMA_Start_IT+0x26>
 800293e:	2302      	movs	r3, #2
 8002940:	e040      	b.n	80029c4 <HAL_DMA_Start_IT+0xa8>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b01      	cmp	r3, #1
 8002954:	d12f      	bne.n	80029b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2202      	movs	r2, #2
 800295a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f9b8 	bl	8002ce0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002974:	223f      	movs	r2, #63	@ 0x3f
 8002976:	409a      	lsls	r2, r3
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0216 	orr.w	r2, r2, #22
 800298a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002990:	2b00      	cmp	r3, #0
 8002992:	d007      	beq.n	80029a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0208 	orr.w	r2, r2, #8
 80029a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0201 	orr.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	e005      	b.n	80029c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80029be:	2302      	movs	r3, #2
 80029c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029d8:	4b8e      	ldr	r3, [pc, #568]	@ (8002c14 <HAL_DMA_IRQHandler+0x248>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a8e      	ldr	r2, [pc, #568]	@ (8002c18 <HAL_DMA_IRQHandler+0x24c>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	0a9b      	lsrs	r3, r3, #10
 80029e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f6:	2208      	movs	r2, #8
 80029f8:	409a      	lsls	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d01a      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d013      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0204 	bic.w	r2, r2, #4
 8002a1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a24:	2208      	movs	r2, #8
 8002a26:	409a      	lsls	r2, r3
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a30:	f043 0201 	orr.w	r2, r3, #1
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	409a      	lsls	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d012      	beq.n	8002a6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00b      	beq.n	8002a6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	409a      	lsls	r2, r3
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a66:	f043 0202 	orr.w	r2, r3, #2
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a72:	2204      	movs	r2, #4
 8002a74:	409a      	lsls	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d012      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00b      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a90:	2204      	movs	r2, #4
 8002a92:	409a      	lsls	r2, r3
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a9c:	f043 0204 	orr.w	r2, r3, #4
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa8:	2210      	movs	r2, #16
 8002aaa:	409a      	lsls	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d043      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d03c      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac6:	2210      	movs	r2, #16
 8002ac8:	409a      	lsls	r2, r3
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d018      	beq.n	8002b0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d108      	bne.n	8002afc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d024      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	4798      	blx	r3
 8002afa:	e01f      	b.n	8002b3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d01b      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	4798      	blx	r3
 8002b0c:	e016      	b.n	8002b3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d107      	bne.n	8002b2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0208 	bic.w	r2, r2, #8
 8002b2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b40:	2220      	movs	r2, #32
 8002b42:	409a      	lsls	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4013      	ands	r3, r2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 808f 	beq.w	8002c6c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 8087 	beq.w	8002c6c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b62:	2220      	movs	r2, #32
 8002b64:	409a      	lsls	r2, r3
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b05      	cmp	r3, #5
 8002b74:	d136      	bne.n	8002be4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0216 	bic.w	r2, r2, #22
 8002b84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695a      	ldr	r2, [r3, #20]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d103      	bne.n	8002ba6 <HAL_DMA_IRQHandler+0x1da>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d007      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0208 	bic.w	r2, r2, #8
 8002bb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bba:	223f      	movs	r2, #63	@ 0x3f
 8002bbc:	409a      	lsls	r2, r3
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d07e      	beq.n	8002cd8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	4798      	blx	r3
        }
        return;
 8002be2:	e079      	b.n	8002cd8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d01d      	beq.n	8002c2e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10d      	bne.n	8002c1c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d031      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	4798      	blx	r3
 8002c10:	e02c      	b.n	8002c6c <HAL_DMA_IRQHandler+0x2a0>
 8002c12:	bf00      	nop
 8002c14:	20000000 	.word	0x20000000
 8002c18:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d023      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	4798      	blx	r3
 8002c2c:	e01e      	b.n	8002c6c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10f      	bne.n	8002c5c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0210 	bic.w	r2, r2, #16
 8002c4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d032      	beq.n	8002cda <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d022      	beq.n	8002cc6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2205      	movs	r2, #5
 8002c84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0201 	bic.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d307      	bcc.n	8002cb4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f2      	bne.n	8002c98 <HAL_DMA_IRQHandler+0x2cc>
 8002cb2:	e000      	b.n	8002cb6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002cb4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d005      	beq.n	8002cda <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	4798      	blx	r3
 8002cd6:	e000      	b.n	8002cda <HAL_DMA_IRQHandler+0x30e>
        return;
 8002cd8:	bf00      	nop
    }
  }
}
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
 8002cec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002cfc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	2b40      	cmp	r3, #64	@ 0x40
 8002d0c:	d108      	bne.n	8002d20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d1e:	e007      	b.n	8002d30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	60da      	str	r2, [r3, #12]
}
 8002d30:	bf00      	nop
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	3b10      	subs	r3, #16
 8002d4c:	4a14      	ldr	r2, [pc, #80]	@ (8002da0 <DMA_CalcBaseAndBitshift+0x64>)
 8002d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d52:	091b      	lsrs	r3, r3, #4
 8002d54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d56:	4a13      	ldr	r2, [pc, #76]	@ (8002da4 <DMA_CalcBaseAndBitshift+0x68>)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d909      	bls.n	8002d7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002d72:	f023 0303 	bic.w	r3, r3, #3
 8002d76:	1d1a      	adds	r2, r3, #4
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d7c:	e007      	b.n	8002d8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002d86:	f023 0303 	bic.w	r3, r3, #3
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	aaaaaaab 	.word	0xaaaaaaab
 8002da4:	08006084 	.word	0x08006084

08002da8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d11f      	bne.n	8002e02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d856      	bhi.n	8002e76 <DMA_CheckFifoParam+0xce>
 8002dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8002dd0 <DMA_CheckFifoParam+0x28>)
 8002dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dce:	bf00      	nop
 8002dd0:	08002de1 	.word	0x08002de1
 8002dd4:	08002df3 	.word	0x08002df3
 8002dd8:	08002de1 	.word	0x08002de1
 8002ddc:	08002e77 	.word	0x08002e77
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d046      	beq.n	8002e7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002df0:	e043      	b.n	8002e7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002dfa:	d140      	bne.n	8002e7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e00:	e03d      	b.n	8002e7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e0a:	d121      	bne.n	8002e50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	d837      	bhi.n	8002e82 <DMA_CheckFifoParam+0xda>
 8002e12:	a201      	add	r2, pc, #4	@ (adr r2, 8002e18 <DMA_CheckFifoParam+0x70>)
 8002e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e18:	08002e29 	.word	0x08002e29
 8002e1c:	08002e2f 	.word	0x08002e2f
 8002e20:	08002e29 	.word	0x08002e29
 8002e24:	08002e41 	.word	0x08002e41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e2c:	e030      	b.n	8002e90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d025      	beq.n	8002e86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e3e:	e022      	b.n	8002e86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e44:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e48:	d11f      	bne.n	8002e8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e4e:	e01c      	b.n	8002e8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d903      	bls.n	8002e5e <DMA_CheckFifoParam+0xb6>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d003      	beq.n	8002e64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e5c:	e018      	b.n	8002e90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	73fb      	strb	r3, [r7, #15]
      break;
 8002e62:	e015      	b.n	8002e90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00e      	beq.n	8002e8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	73fb      	strb	r3, [r7, #15]
      break;
 8002e74:	e00b      	b.n	8002e8e <DMA_CheckFifoParam+0xe6>
      break;
 8002e76:	bf00      	nop
 8002e78:	e00a      	b.n	8002e90 <DMA_CheckFifoParam+0xe8>
      break;
 8002e7a:	bf00      	nop
 8002e7c:	e008      	b.n	8002e90 <DMA_CheckFifoParam+0xe8>
      break;
 8002e7e:	bf00      	nop
 8002e80:	e006      	b.n	8002e90 <DMA_CheckFifoParam+0xe8>
      break;
 8002e82:	bf00      	nop
 8002e84:	e004      	b.n	8002e90 <DMA_CheckFifoParam+0xe8>
      break;
 8002e86:	bf00      	nop
 8002e88:	e002      	b.n	8002e90 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e8a:	bf00      	nop
 8002e8c:	e000      	b.n	8002e90 <DMA_CheckFifoParam+0xe8>
      break;
 8002e8e:	bf00      	nop
    }
  } 
  
  return status; 
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop

08002ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b089      	sub	sp, #36	@ 0x24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61fb      	str	r3, [r7, #28]
 8002eba:	e165      	b.n	8003188 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	f040 8154 	bne.w	8003182 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d005      	beq.n	8002ef2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d130      	bne.n	8002f54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	2203      	movs	r2, #3
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43db      	mvns	r3, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4013      	ands	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f28:	2201      	movs	r2, #1
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4013      	ands	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	091b      	lsrs	r3, r3, #4
 8002f3e:	f003 0201 	and.w	r2, r3, #1
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d017      	beq.n	8002f90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	43db      	mvns	r3, r3
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4013      	ands	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d123      	bne.n	8002fe4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	08da      	lsrs	r2, r3, #3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3208      	adds	r2, #8
 8002fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	220f      	movs	r2, #15
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	08da      	lsrs	r2, r3, #3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	3208      	adds	r2, #8
 8002fde:	69b9      	ldr	r1, [r7, #24]
 8002fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	2203      	movs	r2, #3
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f003 0203 	and.w	r2, r3, #3
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 80ae 	beq.w	8003182 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	4b5d      	ldr	r3, [pc, #372]	@ (80031a0 <HAL_GPIO_Init+0x300>)
 800302c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800302e:	4a5c      	ldr	r2, [pc, #368]	@ (80031a0 <HAL_GPIO_Init+0x300>)
 8003030:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003034:	6453      	str	r3, [r2, #68]	@ 0x44
 8003036:	4b5a      	ldr	r3, [pc, #360]	@ (80031a0 <HAL_GPIO_Init+0x300>)
 8003038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003042:	4a58      	ldr	r2, [pc, #352]	@ (80031a4 <HAL_GPIO_Init+0x304>)
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	089b      	lsrs	r3, r3, #2
 8003048:	3302      	adds	r3, #2
 800304a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800304e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	220f      	movs	r2, #15
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4013      	ands	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a4f      	ldr	r2, [pc, #316]	@ (80031a8 <HAL_GPIO_Init+0x308>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d025      	beq.n	80030ba <HAL_GPIO_Init+0x21a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a4e      	ldr	r2, [pc, #312]	@ (80031ac <HAL_GPIO_Init+0x30c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d01f      	beq.n	80030b6 <HAL_GPIO_Init+0x216>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a4d      	ldr	r2, [pc, #308]	@ (80031b0 <HAL_GPIO_Init+0x310>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d019      	beq.n	80030b2 <HAL_GPIO_Init+0x212>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a4c      	ldr	r2, [pc, #304]	@ (80031b4 <HAL_GPIO_Init+0x314>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d013      	beq.n	80030ae <HAL_GPIO_Init+0x20e>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a4b      	ldr	r2, [pc, #300]	@ (80031b8 <HAL_GPIO_Init+0x318>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d00d      	beq.n	80030aa <HAL_GPIO_Init+0x20a>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a4a      	ldr	r2, [pc, #296]	@ (80031bc <HAL_GPIO_Init+0x31c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d007      	beq.n	80030a6 <HAL_GPIO_Init+0x206>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a49      	ldr	r2, [pc, #292]	@ (80031c0 <HAL_GPIO_Init+0x320>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d101      	bne.n	80030a2 <HAL_GPIO_Init+0x202>
 800309e:	2306      	movs	r3, #6
 80030a0:	e00c      	b.n	80030bc <HAL_GPIO_Init+0x21c>
 80030a2:	2307      	movs	r3, #7
 80030a4:	e00a      	b.n	80030bc <HAL_GPIO_Init+0x21c>
 80030a6:	2305      	movs	r3, #5
 80030a8:	e008      	b.n	80030bc <HAL_GPIO_Init+0x21c>
 80030aa:	2304      	movs	r3, #4
 80030ac:	e006      	b.n	80030bc <HAL_GPIO_Init+0x21c>
 80030ae:	2303      	movs	r3, #3
 80030b0:	e004      	b.n	80030bc <HAL_GPIO_Init+0x21c>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e002      	b.n	80030bc <HAL_GPIO_Init+0x21c>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <HAL_GPIO_Init+0x21c>
 80030ba:	2300      	movs	r3, #0
 80030bc:	69fa      	ldr	r2, [r7, #28]
 80030be:	f002 0203 	and.w	r2, r2, #3
 80030c2:	0092      	lsls	r2, r2, #2
 80030c4:	4093      	lsls	r3, r2
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030cc:	4935      	ldr	r1, [pc, #212]	@ (80031a4 <HAL_GPIO_Init+0x304>)
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	089b      	lsrs	r3, r3, #2
 80030d2:	3302      	adds	r3, #2
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030da:	4b3a      	ldr	r3, [pc, #232]	@ (80031c4 <HAL_GPIO_Init+0x324>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	43db      	mvns	r3, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4013      	ands	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030fe:	4a31      	ldr	r2, [pc, #196]	@ (80031c4 <HAL_GPIO_Init+0x324>)
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003104:	4b2f      	ldr	r3, [pc, #188]	@ (80031c4 <HAL_GPIO_Init+0x324>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4313      	orrs	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003128:	4a26      	ldr	r2, [pc, #152]	@ (80031c4 <HAL_GPIO_Init+0x324>)
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800312e:	4b25      	ldr	r3, [pc, #148]	@ (80031c4 <HAL_GPIO_Init+0x324>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	43db      	mvns	r3, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4013      	ands	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003152:	4a1c      	ldr	r2, [pc, #112]	@ (80031c4 <HAL_GPIO_Init+0x324>)
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003158:	4b1a      	ldr	r3, [pc, #104]	@ (80031c4 <HAL_GPIO_Init+0x324>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800317c:	4a11      	ldr	r2, [pc, #68]	@ (80031c4 <HAL_GPIO_Init+0x324>)
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	3301      	adds	r3, #1
 8003186:	61fb      	str	r3, [r7, #28]
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	2b0f      	cmp	r3, #15
 800318c:	f67f ae96 	bls.w	8002ebc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003190:	bf00      	nop
 8003192:	bf00      	nop
 8003194:	3724      	adds	r7, #36	@ 0x24
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40023800 	.word	0x40023800
 80031a4:	40013800 	.word	0x40013800
 80031a8:	40020000 	.word	0x40020000
 80031ac:	40020400 	.word	0x40020400
 80031b0:	40020800 	.word	0x40020800
 80031b4:	40020c00 	.word	0x40020c00
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40021400 	.word	0x40021400
 80031c0:	40021800 	.word	0x40021800
 80031c4:	40013c00 	.word	0x40013c00

080031c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	807b      	strh	r3, [r7, #2]
 80031d4:	4613      	mov	r3, r2
 80031d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031d8:	787b      	ldrb	r3, [r7, #1]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031de:	887a      	ldrh	r2, [r7, #2]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031e4:	e003      	b.n	80031ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031e6:	887b      	ldrh	r3, [r7, #2]
 80031e8:	041a      	lsls	r2, r3, #16
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	619a      	str	r2, [r3, #24]
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
	...

080031fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003202:	2300      	movs	r3, #0
 8003204:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	4b20      	ldr	r3, [pc, #128]	@ (800328c <HAL_PWREx_EnableOverDrive+0x90>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320e:	4a1f      	ldr	r2, [pc, #124]	@ (800328c <HAL_PWREx_EnableOverDrive+0x90>)
 8003210:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003214:	6413      	str	r3, [r2, #64]	@ 0x40
 8003216:	4b1d      	ldr	r3, [pc, #116]	@ (800328c <HAL_PWREx_EnableOverDrive+0x90>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003222:	4b1b      	ldr	r3, [pc, #108]	@ (8003290 <HAL_PWREx_EnableOverDrive+0x94>)
 8003224:	2201      	movs	r2, #1
 8003226:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003228:	f7ff f88c 	bl	8002344 <HAL_GetTick>
 800322c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800322e:	e009      	b.n	8003244 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003230:	f7ff f888 	bl	8002344 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800323e:	d901      	bls.n	8003244 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e01f      	b.n	8003284 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003244:	4b13      	ldr	r3, [pc, #76]	@ (8003294 <HAL_PWREx_EnableOverDrive+0x98>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800324c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003250:	d1ee      	bne.n	8003230 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003252:	4b11      	ldr	r3, [pc, #68]	@ (8003298 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003254:	2201      	movs	r2, #1
 8003256:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003258:	f7ff f874 	bl	8002344 <HAL_GetTick>
 800325c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800325e:	e009      	b.n	8003274 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003260:	f7ff f870 	bl	8002344 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800326e:	d901      	bls.n	8003274 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e007      	b.n	8003284 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003274:	4b07      	ldr	r3, [pc, #28]	@ (8003294 <HAL_PWREx_EnableOverDrive+0x98>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800327c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003280:	d1ee      	bne.n	8003260 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40023800 	.word	0x40023800
 8003290:	420e0040 	.word	0x420e0040
 8003294:	40007000 	.word	0x40007000
 8003298:	420e0044 	.word	0x420e0044

0800329c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e0cc      	b.n	800344a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032b0:	4b68      	ldr	r3, [pc, #416]	@ (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 030f 	and.w	r3, r3, #15
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d90c      	bls.n	80032d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032be:	4b65      	ldr	r3, [pc, #404]	@ (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c6:	4b63      	ldr	r3, [pc, #396]	@ (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d001      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0b8      	b.n	800344a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d020      	beq.n	8003326 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032f0:	4b59      	ldr	r3, [pc, #356]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	4a58      	ldr	r2, [pc, #352]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003308:	4b53      	ldr	r3, [pc, #332]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	4a52      	ldr	r2, [pc, #328]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003312:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003314:	4b50      	ldr	r3, [pc, #320]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	494d      	ldr	r1, [pc, #308]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	4313      	orrs	r3, r2
 8003324:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d044      	beq.n	80033bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d107      	bne.n	800334a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333a:	4b47      	ldr	r3, [pc, #284]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d119      	bne.n	800337a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e07f      	b.n	800344a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d003      	beq.n	800335a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003356:	2b03      	cmp	r3, #3
 8003358:	d107      	bne.n	800336a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800335a:	4b3f      	ldr	r3, [pc, #252]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d109      	bne.n	800337a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e06f      	b.n	800344a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336a:	4b3b      	ldr	r3, [pc, #236]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e067      	b.n	800344a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800337a:	4b37      	ldr	r3, [pc, #220]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f023 0203 	bic.w	r2, r3, #3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	4934      	ldr	r1, [pc, #208]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 8003388:	4313      	orrs	r3, r2
 800338a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800338c:	f7fe ffda 	bl	8002344 <HAL_GetTick>
 8003390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003392:	e00a      	b.n	80033aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003394:	f7fe ffd6 	bl	8002344 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e04f      	b.n	800344a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033aa:	4b2b      	ldr	r3, [pc, #172]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 020c 	and.w	r2, r3, #12
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d1eb      	bne.n	8003394 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033bc:	4b25      	ldr	r3, [pc, #148]	@ (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 030f 	and.w	r3, r3, #15
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d20c      	bcs.n	80033e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ca:	4b22      	ldr	r3, [pc, #136]	@ (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d2:	4b20      	ldr	r3, [pc, #128]	@ (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d001      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e032      	b.n	800344a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d008      	beq.n	8003402 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033f0:	4b19      	ldr	r3, [pc, #100]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	4916      	ldr	r1, [pc, #88]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b00      	cmp	r3, #0
 800340c:	d009      	beq.n	8003422 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800340e:	4b12      	ldr	r3, [pc, #72]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	490e      	ldr	r1, [pc, #56]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	4313      	orrs	r3, r2
 8003420:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003422:	f000 f855 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 8003426:	4602      	mov	r2, r0
 8003428:	4b0b      	ldr	r3, [pc, #44]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	091b      	lsrs	r3, r3, #4
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	490a      	ldr	r1, [pc, #40]	@ (800345c <HAL_RCC_ClockConfig+0x1c0>)
 8003434:	5ccb      	ldrb	r3, [r1, r3]
 8003436:	fa22 f303 	lsr.w	r3, r2, r3
 800343a:	4a09      	ldr	r2, [pc, #36]	@ (8003460 <HAL_RCC_ClockConfig+0x1c4>)
 800343c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800343e:	4b09      	ldr	r3, [pc, #36]	@ (8003464 <HAL_RCC_ClockConfig+0x1c8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f7fe ff3a 	bl	80022bc <HAL_InitTick>

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40023c00 	.word	0x40023c00
 8003458:	40023800 	.word	0x40023800
 800345c:	0800606c 	.word	0x0800606c
 8003460:	20000000 	.word	0x20000000
 8003464:	20000004 	.word	0x20000004

08003468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800346c:	4b03      	ldr	r3, [pc, #12]	@ (800347c <HAL_RCC_GetHCLKFreq+0x14>)
 800346e:	681b      	ldr	r3, [r3, #0]
}
 8003470:	4618      	mov	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	20000000 	.word	0x20000000

08003480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003484:	f7ff fff0 	bl	8003468 <HAL_RCC_GetHCLKFreq>
 8003488:	4602      	mov	r2, r0
 800348a:	4b05      	ldr	r3, [pc, #20]	@ (80034a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	0a9b      	lsrs	r3, r3, #10
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	4903      	ldr	r1, [pc, #12]	@ (80034a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003496:	5ccb      	ldrb	r3, [r1, r3]
 8003498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800349c:	4618      	mov	r0, r3
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40023800 	.word	0x40023800
 80034a4:	0800607c 	.word	0x0800607c

080034a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034ac:	f7ff ffdc 	bl	8003468 <HAL_RCC_GetHCLKFreq>
 80034b0:	4602      	mov	r2, r0
 80034b2:	4b05      	ldr	r3, [pc, #20]	@ (80034c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	0b5b      	lsrs	r3, r3, #13
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	4903      	ldr	r1, [pc, #12]	@ (80034cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80034be:	5ccb      	ldrb	r3, [r1, r3]
 80034c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40023800 	.word	0x40023800
 80034cc:	0800607c 	.word	0x0800607c

080034d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034d4:	b0ae      	sub	sp, #184	@ 0xb8
 80034d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80034de:	2300      	movs	r3, #0
 80034e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034f6:	4bcb      	ldr	r3, [pc, #812]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x354>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	2b0c      	cmp	r3, #12
 8003500:	f200 8206 	bhi.w	8003910 <HAL_RCC_GetSysClockFreq+0x440>
 8003504:	a201      	add	r2, pc, #4	@ (adr r2, 800350c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350a:	bf00      	nop
 800350c:	08003541 	.word	0x08003541
 8003510:	08003911 	.word	0x08003911
 8003514:	08003911 	.word	0x08003911
 8003518:	08003911 	.word	0x08003911
 800351c:	08003549 	.word	0x08003549
 8003520:	08003911 	.word	0x08003911
 8003524:	08003911 	.word	0x08003911
 8003528:	08003911 	.word	0x08003911
 800352c:	08003551 	.word	0x08003551
 8003530:	08003911 	.word	0x08003911
 8003534:	08003911 	.word	0x08003911
 8003538:	08003911 	.word	0x08003911
 800353c:	08003741 	.word	0x08003741
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003540:	4bb9      	ldr	r3, [pc, #740]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x358>)
 8003542:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003546:	e1e7      	b.n	8003918 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003548:	4bb8      	ldr	r3, [pc, #736]	@ (800382c <HAL_RCC_GetSysClockFreq+0x35c>)
 800354a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800354e:	e1e3      	b.n	8003918 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003550:	4bb4      	ldr	r3, [pc, #720]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x354>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003558:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800355c:	4bb1      	ldr	r3, [pc, #708]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x354>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d071      	beq.n	800364c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003568:	4bae      	ldr	r3, [pc, #696]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x354>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	099b      	lsrs	r3, r3, #6
 800356e:	2200      	movs	r2, #0
 8003570:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003574:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003578:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800357c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003580:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003584:	2300      	movs	r3, #0
 8003586:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800358a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800358e:	4622      	mov	r2, r4
 8003590:	462b      	mov	r3, r5
 8003592:	f04f 0000 	mov.w	r0, #0
 8003596:	f04f 0100 	mov.w	r1, #0
 800359a:	0159      	lsls	r1, r3, #5
 800359c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035a0:	0150      	lsls	r0, r2, #5
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	4621      	mov	r1, r4
 80035a8:	1a51      	subs	r1, r2, r1
 80035aa:	6439      	str	r1, [r7, #64]	@ 0x40
 80035ac:	4629      	mov	r1, r5
 80035ae:	eb63 0301 	sbc.w	r3, r3, r1
 80035b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	f04f 0300 	mov.w	r3, #0
 80035bc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80035c0:	4649      	mov	r1, r9
 80035c2:	018b      	lsls	r3, r1, #6
 80035c4:	4641      	mov	r1, r8
 80035c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035ca:	4641      	mov	r1, r8
 80035cc:	018a      	lsls	r2, r1, #6
 80035ce:	4641      	mov	r1, r8
 80035d0:	1a51      	subs	r1, r2, r1
 80035d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80035d4:	4649      	mov	r1, r9
 80035d6:	eb63 0301 	sbc.w	r3, r3, r1
 80035da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80035e8:	4649      	mov	r1, r9
 80035ea:	00cb      	lsls	r3, r1, #3
 80035ec:	4641      	mov	r1, r8
 80035ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035f2:	4641      	mov	r1, r8
 80035f4:	00ca      	lsls	r2, r1, #3
 80035f6:	4610      	mov	r0, r2
 80035f8:	4619      	mov	r1, r3
 80035fa:	4603      	mov	r3, r0
 80035fc:	4622      	mov	r2, r4
 80035fe:	189b      	adds	r3, r3, r2
 8003600:	633b      	str	r3, [r7, #48]	@ 0x30
 8003602:	462b      	mov	r3, r5
 8003604:	460a      	mov	r2, r1
 8003606:	eb42 0303 	adc.w	r3, r2, r3
 800360a:	637b      	str	r3, [r7, #52]	@ 0x34
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003618:	4629      	mov	r1, r5
 800361a:	024b      	lsls	r3, r1, #9
 800361c:	4621      	mov	r1, r4
 800361e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003622:	4621      	mov	r1, r4
 8003624:	024a      	lsls	r2, r1, #9
 8003626:	4610      	mov	r0, r2
 8003628:	4619      	mov	r1, r3
 800362a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800362e:	2200      	movs	r2, #0
 8003630:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003634:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003638:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800363c:	f7fd fa2e 	bl	8000a9c <__aeabi_uldivmod>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4613      	mov	r3, r2
 8003646:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800364a:	e067      	b.n	800371c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800364c:	4b75      	ldr	r3, [pc, #468]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x354>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	099b      	lsrs	r3, r3, #6
 8003652:	2200      	movs	r2, #0
 8003654:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003658:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800365c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003664:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003666:	2300      	movs	r3, #0
 8003668:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800366a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800366e:	4622      	mov	r2, r4
 8003670:	462b      	mov	r3, r5
 8003672:	f04f 0000 	mov.w	r0, #0
 8003676:	f04f 0100 	mov.w	r1, #0
 800367a:	0159      	lsls	r1, r3, #5
 800367c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003680:	0150      	lsls	r0, r2, #5
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4621      	mov	r1, r4
 8003688:	1a51      	subs	r1, r2, r1
 800368a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800368c:	4629      	mov	r1, r5
 800368e:	eb63 0301 	sbc.w	r3, r3, r1
 8003692:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	f04f 0300 	mov.w	r3, #0
 800369c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80036a0:	4649      	mov	r1, r9
 80036a2:	018b      	lsls	r3, r1, #6
 80036a4:	4641      	mov	r1, r8
 80036a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036aa:	4641      	mov	r1, r8
 80036ac:	018a      	lsls	r2, r1, #6
 80036ae:	4641      	mov	r1, r8
 80036b0:	ebb2 0a01 	subs.w	sl, r2, r1
 80036b4:	4649      	mov	r1, r9
 80036b6:	eb63 0b01 	sbc.w	fp, r3, r1
 80036ba:	f04f 0200 	mov.w	r2, #0
 80036be:	f04f 0300 	mov.w	r3, #0
 80036c2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036c6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036ce:	4692      	mov	sl, r2
 80036d0:	469b      	mov	fp, r3
 80036d2:	4623      	mov	r3, r4
 80036d4:	eb1a 0303 	adds.w	r3, sl, r3
 80036d8:	623b      	str	r3, [r7, #32]
 80036da:	462b      	mov	r3, r5
 80036dc:	eb4b 0303 	adc.w	r3, fp, r3
 80036e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80036ee:	4629      	mov	r1, r5
 80036f0:	028b      	lsls	r3, r1, #10
 80036f2:	4621      	mov	r1, r4
 80036f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036f8:	4621      	mov	r1, r4
 80036fa:	028a      	lsls	r2, r1, #10
 80036fc:	4610      	mov	r0, r2
 80036fe:	4619      	mov	r1, r3
 8003700:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003704:	2200      	movs	r2, #0
 8003706:	673b      	str	r3, [r7, #112]	@ 0x70
 8003708:	677a      	str	r2, [r7, #116]	@ 0x74
 800370a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800370e:	f7fd f9c5 	bl	8000a9c <__aeabi_uldivmod>
 8003712:	4602      	mov	r2, r0
 8003714:	460b      	mov	r3, r1
 8003716:	4613      	mov	r3, r2
 8003718:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800371c:	4b41      	ldr	r3, [pc, #260]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x354>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	0c1b      	lsrs	r3, r3, #16
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	3301      	adds	r3, #1
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800372e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003732:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003736:	fbb2 f3f3 	udiv	r3, r2, r3
 800373a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800373e:	e0eb      	b.n	8003918 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003740:	4b38      	ldr	r3, [pc, #224]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x354>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003748:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800374c:	4b35      	ldr	r3, [pc, #212]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x354>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d06b      	beq.n	8003830 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003758:	4b32      	ldr	r3, [pc, #200]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x354>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	099b      	lsrs	r3, r3, #6
 800375e:	2200      	movs	r2, #0
 8003760:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003762:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003764:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800376a:	663b      	str	r3, [r7, #96]	@ 0x60
 800376c:	2300      	movs	r3, #0
 800376e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003770:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003774:	4622      	mov	r2, r4
 8003776:	462b      	mov	r3, r5
 8003778:	f04f 0000 	mov.w	r0, #0
 800377c:	f04f 0100 	mov.w	r1, #0
 8003780:	0159      	lsls	r1, r3, #5
 8003782:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003786:	0150      	lsls	r0, r2, #5
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	4621      	mov	r1, r4
 800378e:	1a51      	subs	r1, r2, r1
 8003790:	61b9      	str	r1, [r7, #24]
 8003792:	4629      	mov	r1, r5
 8003794:	eb63 0301 	sbc.w	r3, r3, r1
 8003798:	61fb      	str	r3, [r7, #28]
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	f04f 0300 	mov.w	r3, #0
 80037a2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80037a6:	4659      	mov	r1, fp
 80037a8:	018b      	lsls	r3, r1, #6
 80037aa:	4651      	mov	r1, sl
 80037ac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037b0:	4651      	mov	r1, sl
 80037b2:	018a      	lsls	r2, r1, #6
 80037b4:	4651      	mov	r1, sl
 80037b6:	ebb2 0801 	subs.w	r8, r2, r1
 80037ba:	4659      	mov	r1, fp
 80037bc:	eb63 0901 	sbc.w	r9, r3, r1
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037d4:	4690      	mov	r8, r2
 80037d6:	4699      	mov	r9, r3
 80037d8:	4623      	mov	r3, r4
 80037da:	eb18 0303 	adds.w	r3, r8, r3
 80037de:	613b      	str	r3, [r7, #16]
 80037e0:	462b      	mov	r3, r5
 80037e2:	eb49 0303 	adc.w	r3, r9, r3
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80037f4:	4629      	mov	r1, r5
 80037f6:	024b      	lsls	r3, r1, #9
 80037f8:	4621      	mov	r1, r4
 80037fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037fe:	4621      	mov	r1, r4
 8003800:	024a      	lsls	r2, r1, #9
 8003802:	4610      	mov	r0, r2
 8003804:	4619      	mov	r1, r3
 8003806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800380a:	2200      	movs	r2, #0
 800380c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800380e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003810:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003814:	f7fd f942 	bl	8000a9c <__aeabi_uldivmod>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4613      	mov	r3, r2
 800381e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003822:	e065      	b.n	80038f0 <HAL_RCC_GetSysClockFreq+0x420>
 8003824:	40023800 	.word	0x40023800
 8003828:	00f42400 	.word	0x00f42400
 800382c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003830:	4b3d      	ldr	r3, [pc, #244]	@ (8003928 <HAL_RCC_GetSysClockFreq+0x458>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	099b      	lsrs	r3, r3, #6
 8003836:	2200      	movs	r2, #0
 8003838:	4618      	mov	r0, r3
 800383a:	4611      	mov	r1, r2
 800383c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003840:	653b      	str	r3, [r7, #80]	@ 0x50
 8003842:	2300      	movs	r3, #0
 8003844:	657b      	str	r3, [r7, #84]	@ 0x54
 8003846:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800384a:	4642      	mov	r2, r8
 800384c:	464b      	mov	r3, r9
 800384e:	f04f 0000 	mov.w	r0, #0
 8003852:	f04f 0100 	mov.w	r1, #0
 8003856:	0159      	lsls	r1, r3, #5
 8003858:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800385c:	0150      	lsls	r0, r2, #5
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
 8003862:	4641      	mov	r1, r8
 8003864:	1a51      	subs	r1, r2, r1
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	4649      	mov	r1, r9
 800386a:	eb63 0301 	sbc.w	r3, r3, r1
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	f04f 0200 	mov.w	r2, #0
 8003874:	f04f 0300 	mov.w	r3, #0
 8003878:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800387c:	4659      	mov	r1, fp
 800387e:	018b      	lsls	r3, r1, #6
 8003880:	4651      	mov	r1, sl
 8003882:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003886:	4651      	mov	r1, sl
 8003888:	018a      	lsls	r2, r1, #6
 800388a:	4651      	mov	r1, sl
 800388c:	1a54      	subs	r4, r2, r1
 800388e:	4659      	mov	r1, fp
 8003890:	eb63 0501 	sbc.w	r5, r3, r1
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	00eb      	lsls	r3, r5, #3
 800389e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038a2:	00e2      	lsls	r2, r4, #3
 80038a4:	4614      	mov	r4, r2
 80038a6:	461d      	mov	r5, r3
 80038a8:	4643      	mov	r3, r8
 80038aa:	18e3      	adds	r3, r4, r3
 80038ac:	603b      	str	r3, [r7, #0]
 80038ae:	464b      	mov	r3, r9
 80038b0:	eb45 0303 	adc.w	r3, r5, r3
 80038b4:	607b      	str	r3, [r7, #4]
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038c2:	4629      	mov	r1, r5
 80038c4:	028b      	lsls	r3, r1, #10
 80038c6:	4621      	mov	r1, r4
 80038c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038cc:	4621      	mov	r1, r4
 80038ce:	028a      	lsls	r2, r1, #10
 80038d0:	4610      	mov	r0, r2
 80038d2:	4619      	mov	r1, r3
 80038d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80038d8:	2200      	movs	r2, #0
 80038da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038dc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80038de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80038e2:	f7fd f8db 	bl	8000a9c <__aeabi_uldivmod>
 80038e6:	4602      	mov	r2, r0
 80038e8:	460b      	mov	r3, r1
 80038ea:	4613      	mov	r3, r2
 80038ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80038f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003928 <HAL_RCC_GetSysClockFreq+0x458>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	0f1b      	lsrs	r3, r3, #28
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80038fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003902:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003906:	fbb2 f3f3 	udiv	r3, r2, r3
 800390a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800390e:	e003      	b.n	8003918 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003910:	4b06      	ldr	r3, [pc, #24]	@ (800392c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003912:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003916:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003918:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800391c:	4618      	mov	r0, r3
 800391e:	37b8      	adds	r7, #184	@ 0xb8
 8003920:	46bd      	mov	sp, r7
 8003922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003926:	bf00      	nop
 8003928:	40023800 	.word	0x40023800
 800392c:	00f42400 	.word	0x00f42400

08003930 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e28d      	b.n	8003e5e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 8083 	beq.w	8003a56 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003950:	4b94      	ldr	r3, [pc, #592]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f003 030c 	and.w	r3, r3, #12
 8003958:	2b04      	cmp	r3, #4
 800395a:	d019      	beq.n	8003990 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800395c:	4b91      	ldr	r3, [pc, #580]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 030c 	and.w	r3, r3, #12
        || \
 8003964:	2b08      	cmp	r3, #8
 8003966:	d106      	bne.n	8003976 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003968:	4b8e      	ldr	r3, [pc, #568]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003970:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003974:	d00c      	beq.n	8003990 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003976:	4b8b      	ldr	r3, [pc, #556]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800397e:	2b0c      	cmp	r3, #12
 8003980:	d112      	bne.n	80039a8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003982:	4b88      	ldr	r3, [pc, #544]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800398a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800398e:	d10b      	bne.n	80039a8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003990:	4b84      	ldr	r3, [pc, #528]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d05b      	beq.n	8003a54 <HAL_RCC_OscConfig+0x124>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d157      	bne.n	8003a54 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e25a      	b.n	8003e5e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039b0:	d106      	bne.n	80039c0 <HAL_RCC_OscConfig+0x90>
 80039b2:	4b7c      	ldr	r3, [pc, #496]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a7b      	ldr	r2, [pc, #492]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 80039b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	e01d      	b.n	80039fc <HAL_RCC_OscConfig+0xcc>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039c8:	d10c      	bne.n	80039e4 <HAL_RCC_OscConfig+0xb4>
 80039ca:	4b76      	ldr	r3, [pc, #472]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a75      	ldr	r2, [pc, #468]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 80039d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	4b73      	ldr	r3, [pc, #460]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a72      	ldr	r2, [pc, #456]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 80039dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	e00b      	b.n	80039fc <HAL_RCC_OscConfig+0xcc>
 80039e4:	4b6f      	ldr	r3, [pc, #444]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a6e      	ldr	r2, [pc, #440]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 80039ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	4b6c      	ldr	r3, [pc, #432]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a6b      	ldr	r2, [pc, #428]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 80039f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d013      	beq.n	8003a2c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a04:	f7fe fc9e 	bl	8002344 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a0c:	f7fe fc9a 	bl	8002344 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b64      	cmp	r3, #100	@ 0x64
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e21f      	b.n	8003e5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1e:	4b61      	ldr	r3, [pc, #388]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0f0      	beq.n	8003a0c <HAL_RCC_OscConfig+0xdc>
 8003a2a:	e014      	b.n	8003a56 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7fe fc8a 	bl	8002344 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a34:	f7fe fc86 	bl	8002344 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b64      	cmp	r3, #100	@ 0x64
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e20b      	b.n	8003e5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a46:	4b57      	ldr	r3, [pc, #348]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_OscConfig+0x104>
 8003a52:	e000      	b.n	8003a56 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d06f      	beq.n	8003b42 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003a62:	4b50      	ldr	r3, [pc, #320]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 030c 	and.w	r3, r3, #12
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d017      	beq.n	8003a9e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003a6e:	4b4d      	ldr	r3, [pc, #308]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 030c 	and.w	r3, r3, #12
        || \
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d105      	bne.n	8003a86 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003a7a:	4b4a      	ldr	r3, [pc, #296]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00b      	beq.n	8003a9e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a86:	4b47      	ldr	r3, [pc, #284]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003a8e:	2b0c      	cmp	r3, #12
 8003a90:	d11c      	bne.n	8003acc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a92:	4b44      	ldr	r3, [pc, #272]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d116      	bne.n	8003acc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a9e:	4b41      	ldr	r3, [pc, #260]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d005      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x186>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d001      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e1d3      	b.n	8003e5e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	4937      	ldr	r1, [pc, #220]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aca:	e03a      	b.n	8003b42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d020      	beq.n	8003b16 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ad4:	4b34      	ldr	r3, [pc, #208]	@ (8003ba8 <HAL_RCC_OscConfig+0x278>)
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ada:	f7fe fc33 	bl	8002344 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae0:	e008      	b.n	8003af4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ae2:	f7fe fc2f 	bl	8002344 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e1b4      	b.n	8003e5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af4:	4b2b      	ldr	r3, [pc, #172]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0f0      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b00:	4b28      	ldr	r3, [pc, #160]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	4925      	ldr	r1, [pc, #148]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	600b      	str	r3, [r1, #0]
 8003b14:	e015      	b.n	8003b42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b16:	4b24      	ldr	r3, [pc, #144]	@ (8003ba8 <HAL_RCC_OscConfig+0x278>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1c:	f7fe fc12 	bl	8002344 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b24:	f7fe fc0e 	bl	8002344 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e193      	b.n	8003e5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b36:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f0      	bne.n	8003b24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d036      	beq.n	8003bbc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d016      	beq.n	8003b84 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b56:	4b15      	ldr	r3, [pc, #84]	@ (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003b58:	2201      	movs	r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5c:	f7fe fbf2 	bl	8002344 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b64:	f7fe fbee 	bl	8002344 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e173      	b.n	8003e5e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b76:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 8003b78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0f0      	beq.n	8003b64 <HAL_RCC_OscConfig+0x234>
 8003b82:	e01b      	b.n	8003bbc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b84:	4b09      	ldr	r3, [pc, #36]	@ (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8a:	f7fe fbdb 	bl	8002344 <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b90:	e00e      	b.n	8003bb0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b92:	f7fe fbd7 	bl	8002344 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d907      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e15c      	b.n	8003e5e <HAL_RCC_OscConfig+0x52e>
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	42470000 	.word	0x42470000
 8003bac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb0:	4b8a      	ldr	r3, [pc, #552]	@ (8003ddc <HAL_RCC_OscConfig+0x4ac>)
 8003bb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1ea      	bne.n	8003b92 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 8097 	beq.w	8003cf8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bce:	4b83      	ldr	r3, [pc, #524]	@ (8003ddc <HAL_RCC_OscConfig+0x4ac>)
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10f      	bne.n	8003bfa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60bb      	str	r3, [r7, #8]
 8003bde:	4b7f      	ldr	r3, [pc, #508]	@ (8003ddc <HAL_RCC_OscConfig+0x4ac>)
 8003be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be2:	4a7e      	ldr	r2, [pc, #504]	@ (8003ddc <HAL_RCC_OscConfig+0x4ac>)
 8003be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bea:	4b7c      	ldr	r3, [pc, #496]	@ (8003ddc <HAL_RCC_OscConfig+0x4ac>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bf2:	60bb      	str	r3, [r7, #8]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfa:	4b79      	ldr	r3, [pc, #484]	@ (8003de0 <HAL_RCC_OscConfig+0x4b0>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d118      	bne.n	8003c38 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c06:	4b76      	ldr	r3, [pc, #472]	@ (8003de0 <HAL_RCC_OscConfig+0x4b0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a75      	ldr	r2, [pc, #468]	@ (8003de0 <HAL_RCC_OscConfig+0x4b0>)
 8003c0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c12:	f7fe fb97 	bl	8002344 <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c1a:	f7fe fb93 	bl	8002344 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e118      	b.n	8003e5e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c2c:	4b6c      	ldr	r3, [pc, #432]	@ (8003de0 <HAL_RCC_OscConfig+0x4b0>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0f0      	beq.n	8003c1a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d106      	bne.n	8003c4e <HAL_RCC_OscConfig+0x31e>
 8003c40:	4b66      	ldr	r3, [pc, #408]	@ (8003ddc <HAL_RCC_OscConfig+0x4ac>)
 8003c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c44:	4a65      	ldr	r2, [pc, #404]	@ (8003ddc <HAL_RCC_OscConfig+0x4ac>)
 8003c46:	f043 0301 	orr.w	r3, r3, #1
 8003c4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c4c:	e01c      	b.n	8003c88 <HAL_RCC_OscConfig+0x358>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	2b05      	cmp	r3, #5
 8003c54:	d10c      	bne.n	8003c70 <HAL_RCC_OscConfig+0x340>
 8003c56:	4b61      	ldr	r3, [pc, #388]	@ (8003ddc <HAL_RCC_OscConfig+0x4ac>)
 8003c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c5a:	4a60      	ldr	r2, [pc, #384]	@ (8003ddc <HAL_RCC_OscConfig+0x4ac>)
 8003c5c:	f043 0304 	orr.w	r3, r3, #4
 8003c60:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c62:	4b5e      	ldr	r3, [pc, #376]	@ (8003ddc <HAL_RCC_OscConfig+0x4ac>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c66:	4a5d      	ldr	r2, [pc, #372]	@ (8003ddc <HAL_RCC_OscConfig+0x4ac>)
 8003c68:	f043 0301 	orr.w	r3, r3, #1
 8003c6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c6e:	e00b      	b.n	8003c88 <HAL_RCC_OscConfig+0x358>
 8003c70:	4b5a      	ldr	r3, [pc, #360]	@ (8003ddc <HAL_RCC_OscConfig+0x4ac>)
 8003c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c74:	4a59      	ldr	r2, [pc, #356]	@ (8003ddc <HAL_RCC_OscConfig+0x4ac>)
 8003c76:	f023 0301 	bic.w	r3, r3, #1
 8003c7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c7c:	4b57      	ldr	r3, [pc, #348]	@ (8003ddc <HAL_RCC_OscConfig+0x4ac>)
 8003c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c80:	4a56      	ldr	r2, [pc, #344]	@ (8003ddc <HAL_RCC_OscConfig+0x4ac>)
 8003c82:	f023 0304 	bic.w	r3, r3, #4
 8003c86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d015      	beq.n	8003cbc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c90:	f7fe fb58 	bl	8002344 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c96:	e00a      	b.n	8003cae <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c98:	f7fe fb54 	bl	8002344 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e0d7      	b.n	8003e5e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cae:	4b4b      	ldr	r3, [pc, #300]	@ (8003ddc <HAL_RCC_OscConfig+0x4ac>)
 8003cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0ee      	beq.n	8003c98 <HAL_RCC_OscConfig+0x368>
 8003cba:	e014      	b.n	8003ce6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cbc:	f7fe fb42 	bl	8002344 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc2:	e00a      	b.n	8003cda <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc4:	f7fe fb3e 	bl	8002344 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e0c1      	b.n	8003e5e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cda:	4b40      	ldr	r3, [pc, #256]	@ (8003ddc <HAL_RCC_OscConfig+0x4ac>)
 8003cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1ee      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ce6:	7dfb      	ldrb	r3, [r7, #23]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d105      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cec:	4b3b      	ldr	r3, [pc, #236]	@ (8003ddc <HAL_RCC_OscConfig+0x4ac>)
 8003cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf0:	4a3a      	ldr	r2, [pc, #232]	@ (8003ddc <HAL_RCC_OscConfig+0x4ac>)
 8003cf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cf6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 80ad 	beq.w	8003e5c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d02:	4b36      	ldr	r3, [pc, #216]	@ (8003ddc <HAL_RCC_OscConfig+0x4ac>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 030c 	and.w	r3, r3, #12
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d060      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d145      	bne.n	8003da2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d16:	4b33      	ldr	r3, [pc, #204]	@ (8003de4 <HAL_RCC_OscConfig+0x4b4>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1c:	f7fe fb12 	bl	8002344 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d24:	f7fe fb0e 	bl	8002344 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e093      	b.n	8003e5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d36:	4b29      	ldr	r3, [pc, #164]	@ (8003ddc <HAL_RCC_OscConfig+0x4ac>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1f0      	bne.n	8003d24 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69da      	ldr	r2, [r3, #28]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d50:	019b      	lsls	r3, r3, #6
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d58:	085b      	lsrs	r3, r3, #1
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	041b      	lsls	r3, r3, #16
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d64:	061b      	lsls	r3, r3, #24
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6c:	071b      	lsls	r3, r3, #28
 8003d6e:	491b      	ldr	r1, [pc, #108]	@ (8003ddc <HAL_RCC_OscConfig+0x4ac>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d74:	4b1b      	ldr	r3, [pc, #108]	@ (8003de4 <HAL_RCC_OscConfig+0x4b4>)
 8003d76:	2201      	movs	r2, #1
 8003d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7a:	f7fe fae3 	bl	8002344 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d82:	f7fe fadf 	bl	8002344 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e064      	b.n	8003e5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d94:	4b11      	ldr	r3, [pc, #68]	@ (8003ddc <HAL_RCC_OscConfig+0x4ac>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0f0      	beq.n	8003d82 <HAL_RCC_OscConfig+0x452>
 8003da0:	e05c      	b.n	8003e5c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da2:	4b10      	ldr	r3, [pc, #64]	@ (8003de4 <HAL_RCC_OscConfig+0x4b4>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da8:	f7fe facc 	bl	8002344 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db0:	f7fe fac8 	bl	8002344 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e04d      	b.n	8003e5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc2:	4b06      	ldr	r3, [pc, #24]	@ (8003ddc <HAL_RCC_OscConfig+0x4ac>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1f0      	bne.n	8003db0 <HAL_RCC_OscConfig+0x480>
 8003dce:	e045      	b.n	8003e5c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d107      	bne.n	8003de8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e040      	b.n	8003e5e <HAL_RCC_OscConfig+0x52e>
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	40007000 	.word	0x40007000
 8003de4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003de8:	4b1f      	ldr	r3, [pc, #124]	@ (8003e68 <HAL_RCC_OscConfig+0x538>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d030      	beq.n	8003e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d129      	bne.n	8003e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d122      	bne.n	8003e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e18:	4013      	ands	r3, r2
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d119      	bne.n	8003e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e2e:	085b      	lsrs	r3, r3, #1
 8003e30:	3b01      	subs	r3, #1
 8003e32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d10f      	bne.n	8003e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d107      	bne.n	8003e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e52:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d001      	beq.n	8003e5c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e000      	b.n	8003e5e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3718      	adds	r7, #24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	40023800 	.word	0x40023800

08003e6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e07b      	b.n	8003f76 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d108      	bne.n	8003e98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e8e:	d009      	beq.n	8003ea4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	61da      	str	r2, [r3, #28]
 8003e96:	e005      	b.n	8003ea4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d106      	bne.n	8003ec4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7fd ffb0 	bl	8001e24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003eda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003eec:	431a      	orrs	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f28:	ea42 0103 	orr.w	r1, r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f30:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	0c1b      	lsrs	r3, r3, #16
 8003f42:	f003 0104 	and.w	r1, r3, #4
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4a:	f003 0210 	and.w	r2, r3, #16
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	69da      	ldr	r2, [r3, #28]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b088      	sub	sp, #32
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	60f8      	str	r0, [r7, #12]
 8003f86:	60b9      	str	r1, [r7, #8]
 8003f88:	603b      	str	r3, [r7, #0]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f8e:	f7fe f9d9 	bl	8002344 <HAL_GetTick>
 8003f92:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003f94:	88fb      	ldrh	r3, [r7, #6]
 8003f96:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d001      	beq.n	8003fa8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e12a      	b.n	80041fe <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <HAL_SPI_Transmit+0x36>
 8003fae:	88fb      	ldrh	r3, [r7, #6]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e122      	b.n	80041fe <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_SPI_Transmit+0x48>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e11b      	b.n	80041fe <HAL_SPI_Transmit+0x280>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2203      	movs	r2, #3
 8003fd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	88fa      	ldrh	r2, [r7, #6]
 8003fe6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	88fa      	ldrh	r2, [r7, #6]
 8003fec:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004014:	d10f      	bne.n	8004036 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004024:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004034:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004040:	2b40      	cmp	r3, #64	@ 0x40
 8004042:	d007      	beq.n	8004054 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004052:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800405c:	d152      	bne.n	8004104 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <HAL_SPI_Transmit+0xee>
 8004066:	8b7b      	ldrh	r3, [r7, #26]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d145      	bne.n	80040f8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004070:	881a      	ldrh	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800407c:	1c9a      	adds	r2, r3, #2
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004086:	b29b      	uxth	r3, r3
 8004088:	3b01      	subs	r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004090:	e032      	b.n	80040f8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b02      	cmp	r3, #2
 800409e:	d112      	bne.n	80040c6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a4:	881a      	ldrh	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b0:	1c9a      	adds	r2, r3, #2
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80040c4:	e018      	b.n	80040f8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040c6:	f7fe f93d 	bl	8002344 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d803      	bhi.n	80040de <HAL_SPI_Transmit+0x160>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040dc:	d102      	bne.n	80040e4 <HAL_SPI_Transmit+0x166>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d109      	bne.n	80040f8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e082      	b.n	80041fe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1c7      	bne.n	8004092 <HAL_SPI_Transmit+0x114>
 8004102:	e053      	b.n	80041ac <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <HAL_SPI_Transmit+0x194>
 800410c:	8b7b      	ldrh	r3, [r7, #26]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d147      	bne.n	80041a2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	330c      	adds	r3, #12
 800411c:	7812      	ldrb	r2, [r2, #0]
 800411e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004138:	e033      	b.n	80041a2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b02      	cmp	r3, #2
 8004146:	d113      	bne.n	8004170 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	330c      	adds	r3, #12
 8004152:	7812      	ldrb	r2, [r2, #0]
 8004154:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415a:	1c5a      	adds	r2, r3, #1
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004164:	b29b      	uxth	r3, r3
 8004166:	3b01      	subs	r3, #1
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800416e:	e018      	b.n	80041a2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004170:	f7fe f8e8 	bl	8002344 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	429a      	cmp	r2, r3
 800417e:	d803      	bhi.n	8004188 <HAL_SPI_Transmit+0x20a>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004186:	d102      	bne.n	800418e <HAL_SPI_Transmit+0x210>
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d109      	bne.n	80041a2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e02d      	b.n	80041fe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1c6      	bne.n	800413a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041ac:	69fa      	ldr	r2, [r7, #28]
 80041ae:	6839      	ldr	r1, [r7, #0]
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 fbe7 	bl	8004984 <SPI_EndRxTxTransaction>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2220      	movs	r2, #32
 80041c0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10a      	bne.n	80041e0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041ca:	2300      	movs	r3, #0
 80041cc:	617b      	str	r3, [r7, #20]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e000      	b.n	80041fe <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80041fc:	2300      	movs	r3, #0
  }
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3720      	adds	r7, #32
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b088      	sub	sp, #32
 800420a:	af02      	add	r7, sp, #8
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	603b      	str	r3, [r7, #0]
 8004212:	4613      	mov	r3, r2
 8004214:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b01      	cmp	r3, #1
 8004220:	d001      	beq.n	8004226 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004222:	2302      	movs	r3, #2
 8004224:	e104      	b.n	8004430 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800422e:	d112      	bne.n	8004256 <HAL_SPI_Receive+0x50>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10e      	bne.n	8004256 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2204      	movs	r2, #4
 800423c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004240:	88fa      	ldrh	r2, [r7, #6]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	4613      	mov	r3, r2
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	68b9      	ldr	r1, [r7, #8]
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 f8f3 	bl	8004438 <HAL_SPI_TransmitReceive>
 8004252:	4603      	mov	r3, r0
 8004254:	e0ec      	b.n	8004430 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004256:	f7fe f875 	bl	8002344 <HAL_GetTick>
 800425a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d002      	beq.n	8004268 <HAL_SPI_Receive+0x62>
 8004262:	88fb      	ldrh	r3, [r7, #6]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e0e1      	b.n	8004430 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004272:	2b01      	cmp	r3, #1
 8004274:	d101      	bne.n	800427a <HAL_SPI_Receive+0x74>
 8004276:	2302      	movs	r3, #2
 8004278:	e0da      	b.n	8004430 <HAL_SPI_Receive+0x22a>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2204      	movs	r2, #4
 8004286:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	88fa      	ldrh	r2, [r7, #6]
 800429a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	88fa      	ldrh	r2, [r7, #6]
 80042a0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042c8:	d10f      	bne.n	80042ea <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80042e8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f4:	2b40      	cmp	r3, #64	@ 0x40
 80042f6:	d007      	beq.n	8004308 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004306:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d170      	bne.n	80043f2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004310:	e035      	b.n	800437e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b01      	cmp	r3, #1
 800431e:	d115      	bne.n	800434c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f103 020c 	add.w	r2, r3, #12
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800432c:	7812      	ldrb	r2, [r2, #0]
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004336:	1c5a      	adds	r2, r3, #1
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004340:	b29b      	uxth	r3, r3
 8004342:	3b01      	subs	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800434a:	e018      	b.n	800437e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800434c:	f7fd fffa 	bl	8002344 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	429a      	cmp	r2, r3
 800435a:	d803      	bhi.n	8004364 <HAL_SPI_Receive+0x15e>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004362:	d102      	bne.n	800436a <HAL_SPI_Receive+0x164>
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d109      	bne.n	800437e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e058      	b.n	8004430 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004382:	b29b      	uxth	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1c4      	bne.n	8004312 <HAL_SPI_Receive+0x10c>
 8004388:	e038      	b.n	80043fc <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b01      	cmp	r3, #1
 8004396:	d113      	bne.n	80043c0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a2:	b292      	uxth	r2, r2
 80043a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043aa:	1c9a      	adds	r2, r3, #2
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80043be:	e018      	b.n	80043f2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043c0:	f7fd ffc0 	bl	8002344 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d803      	bhi.n	80043d8 <HAL_SPI_Receive+0x1d2>
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d6:	d102      	bne.n	80043de <HAL_SPI_Receive+0x1d8>
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d109      	bne.n	80043f2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e01e      	b.n	8004430 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1c6      	bne.n	800438a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	6839      	ldr	r1, [r7, #0]
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 fa59 	bl	80048b8 <SPI_EndRxTransaction>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2220      	movs	r2, #32
 8004410:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e000      	b.n	8004430 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800442e:	2300      	movs	r3, #0
  }
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b08a      	sub	sp, #40	@ 0x28
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
 8004444:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004446:	2301      	movs	r3, #1
 8004448:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800444a:	f7fd ff7b 	bl	8002344 <HAL_GetTick>
 800444e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004456:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800445e:	887b      	ldrh	r3, [r7, #2]
 8004460:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004462:	7ffb      	ldrb	r3, [r7, #31]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d00c      	beq.n	8004482 <HAL_SPI_TransmitReceive+0x4a>
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800446e:	d106      	bne.n	800447e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d102      	bne.n	800447e <HAL_SPI_TransmitReceive+0x46>
 8004478:	7ffb      	ldrb	r3, [r7, #31]
 800447a:	2b04      	cmp	r3, #4
 800447c:	d001      	beq.n	8004482 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800447e:	2302      	movs	r3, #2
 8004480:	e17f      	b.n	8004782 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d005      	beq.n	8004494 <HAL_SPI_TransmitReceive+0x5c>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <HAL_SPI_TransmitReceive+0x5c>
 800448e:	887b      	ldrh	r3, [r7, #2]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e174      	b.n	8004782 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d101      	bne.n	80044a6 <HAL_SPI_TransmitReceive+0x6e>
 80044a2:	2302      	movs	r3, #2
 80044a4:	e16d      	b.n	8004782 <HAL_SPI_TransmitReceive+0x34a>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d003      	beq.n	80044c2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2205      	movs	r2, #5
 80044be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	887a      	ldrh	r2, [r7, #2]
 80044d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	887a      	ldrh	r2, [r7, #2]
 80044d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	887a      	ldrh	r2, [r7, #2]
 80044e4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	887a      	ldrh	r2, [r7, #2]
 80044ea:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004502:	2b40      	cmp	r3, #64	@ 0x40
 8004504:	d007      	beq.n	8004516 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004514:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800451e:	d17e      	bne.n	800461e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <HAL_SPI_TransmitReceive+0xf6>
 8004528:	8afb      	ldrh	r3, [r7, #22]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d16c      	bne.n	8004608 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004532:	881a      	ldrh	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453e:	1c9a      	adds	r2, r3, #2
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004548:	b29b      	uxth	r3, r3
 800454a:	3b01      	subs	r3, #1
 800454c:	b29a      	uxth	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004552:	e059      	b.n	8004608 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b02      	cmp	r3, #2
 8004560:	d11b      	bne.n	800459a <HAL_SPI_TransmitReceive+0x162>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004566:	b29b      	uxth	r3, r3
 8004568:	2b00      	cmp	r3, #0
 800456a:	d016      	beq.n	800459a <HAL_SPI_TransmitReceive+0x162>
 800456c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456e:	2b01      	cmp	r3, #1
 8004570:	d113      	bne.n	800459a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004576:	881a      	ldrh	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004582:	1c9a      	adds	r2, r3, #2
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800458c:	b29b      	uxth	r3, r3
 800458e:	3b01      	subs	r3, #1
 8004590:	b29a      	uxth	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d119      	bne.n	80045dc <HAL_SPI_TransmitReceive+0x1a4>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d014      	beq.n	80045dc <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68da      	ldr	r2, [r3, #12]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045bc:	b292      	uxth	r2, r2
 80045be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c4:	1c9a      	adds	r2, r3, #2
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045d8:	2301      	movs	r3, #1
 80045da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045dc:	f7fd feb2 	bl	8002344 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d80d      	bhi.n	8004608 <HAL_SPI_TransmitReceive+0x1d0>
 80045ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f2:	d009      	beq.n	8004608 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e0bc      	b.n	8004782 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800460c:	b29b      	uxth	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1a0      	bne.n	8004554 <HAL_SPI_TransmitReceive+0x11c>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004616:	b29b      	uxth	r3, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	d19b      	bne.n	8004554 <HAL_SPI_TransmitReceive+0x11c>
 800461c:	e082      	b.n	8004724 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <HAL_SPI_TransmitReceive+0x1f4>
 8004626:	8afb      	ldrh	r3, [r7, #22]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d171      	bne.n	8004710 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	330c      	adds	r3, #12
 8004636:	7812      	ldrb	r2, [r2, #0]
 8004638:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004648:	b29b      	uxth	r3, r3
 800464a:	3b01      	subs	r3, #1
 800464c:	b29a      	uxth	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004652:	e05d      	b.n	8004710 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b02      	cmp	r3, #2
 8004660:	d11c      	bne.n	800469c <HAL_SPI_TransmitReceive+0x264>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004666:	b29b      	uxth	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d017      	beq.n	800469c <HAL_SPI_TransmitReceive+0x264>
 800466c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466e:	2b01      	cmp	r3, #1
 8004670:	d114      	bne.n	800469c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	330c      	adds	r3, #12
 800467c:	7812      	ldrb	r2, [r2, #0]
 800467e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800468e:	b29b      	uxth	r3, r3
 8004690:	3b01      	subs	r3, #1
 8004692:	b29a      	uxth	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d119      	bne.n	80046de <HAL_SPI_TransmitReceive+0x2a6>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d014      	beq.n	80046de <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68da      	ldr	r2, [r3, #12]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046da:	2301      	movs	r3, #1
 80046dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046de:	f7fd fe31 	bl	8002344 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d803      	bhi.n	80046f6 <HAL_SPI_TransmitReceive+0x2be>
 80046ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f4:	d102      	bne.n	80046fc <HAL_SPI_TransmitReceive+0x2c4>
 80046f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d109      	bne.n	8004710 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e038      	b.n	8004782 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004714:	b29b      	uxth	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d19c      	bne.n	8004654 <HAL_SPI_TransmitReceive+0x21c>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800471e:	b29b      	uxth	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d197      	bne.n	8004654 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004724:	6a3a      	ldr	r2, [r7, #32]
 8004726:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 f92b 	bl	8004984 <SPI_EndRxTxTransaction>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d008      	beq.n	8004746 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2220      	movs	r2, #32
 8004738:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e01d      	b.n	8004782 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10a      	bne.n	8004764 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800474e:	2300      	movs	r3, #0
 8004750:	613b      	str	r3, [r7, #16]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	613b      	str	r3, [r7, #16]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	613b      	str	r3, [r7, #16]
 8004762:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004780:	2300      	movs	r3, #0
  }
}
 8004782:	4618      	mov	r0, r3
 8004784:	3728      	adds	r7, #40	@ 0x28
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004798:	b2db      	uxtb	r3, r3
}
 800479a:	4618      	mov	r0, r3
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
	...

080047a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	603b      	str	r3, [r7, #0]
 80047b4:	4613      	mov	r3, r2
 80047b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047b8:	f7fd fdc4 	bl	8002344 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c0:	1a9b      	subs	r3, r3, r2
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	4413      	add	r3, r2
 80047c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047c8:	f7fd fdbc 	bl	8002344 <HAL_GetTick>
 80047cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047ce:	4b39      	ldr	r3, [pc, #228]	@ (80048b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	015b      	lsls	r3, r3, #5
 80047d4:	0d1b      	lsrs	r3, r3, #20
 80047d6:	69fa      	ldr	r2, [r7, #28]
 80047d8:	fb02 f303 	mul.w	r3, r2, r3
 80047dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047de:	e054      	b.n	800488a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e6:	d050      	beq.n	800488a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047e8:	f7fd fdac 	bl	8002344 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	69fa      	ldr	r2, [r7, #28]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d902      	bls.n	80047fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d13d      	bne.n	800487a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800480c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004816:	d111      	bne.n	800483c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004820:	d004      	beq.n	800482c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800482a:	d107      	bne.n	800483c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800483a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004840:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004844:	d10f      	bne.n	8004866 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004864:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e017      	b.n	80048aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	3b01      	subs	r3, #1
 8004888:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	4013      	ands	r3, r2
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	429a      	cmp	r2, r3
 8004898:	bf0c      	ite	eq
 800489a:	2301      	moveq	r3, #1
 800489c:	2300      	movne	r3, #0
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	461a      	mov	r2, r3
 80048a2:	79fb      	ldrb	r3, [r7, #7]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d19b      	bne.n	80047e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3720      	adds	r7, #32
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	20000000 	.word	0x20000000

080048b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af02      	add	r7, sp, #8
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048cc:	d111      	bne.n	80048f2 <SPI_EndRxTransaction+0x3a>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048d6:	d004      	beq.n	80048e2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048e0:	d107      	bne.n	80048f2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048f0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048fa:	d12a      	bne.n	8004952 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004904:	d012      	beq.n	800492c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2200      	movs	r2, #0
 800490e:	2180      	movs	r1, #128	@ 0x80
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f7ff ff49 	bl	80047a8 <SPI_WaitFlagStateUntilTimeout>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d02d      	beq.n	8004978 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004920:	f043 0220 	orr.w	r2, r3, #32
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e026      	b.n	800497a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2200      	movs	r2, #0
 8004934:	2101      	movs	r1, #1
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f7ff ff36 	bl	80047a8 <SPI_WaitFlagStateUntilTimeout>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d01a      	beq.n	8004978 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004946:	f043 0220 	orr.w	r2, r3, #32
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e013      	b.n	800497a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2200      	movs	r2, #0
 800495a:	2101      	movs	r1, #1
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f7ff ff23 	bl	80047a8 <SPI_WaitFlagStateUntilTimeout>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d007      	beq.n	8004978 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800496c:	f043 0220 	orr.w	r2, r3, #32
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e000      	b.n	800497a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
	...

08004984 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b088      	sub	sp, #32
 8004988:	af02      	add	r7, sp, #8
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	2201      	movs	r2, #1
 8004998:	2102      	movs	r1, #2
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f7ff ff04 	bl	80047a8 <SPI_WaitFlagStateUntilTimeout>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d007      	beq.n	80049b6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049aa:	f043 0220 	orr.w	r2, r3, #32
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e032      	b.n	8004a1c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80049b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004a24 <SPI_EndRxTxTransaction+0xa0>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a1b      	ldr	r2, [pc, #108]	@ (8004a28 <SPI_EndRxTxTransaction+0xa4>)
 80049bc:	fba2 2303 	umull	r2, r3, r2, r3
 80049c0:	0d5b      	lsrs	r3, r3, #21
 80049c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80049c6:	fb02 f303 	mul.w	r3, r2, r3
 80049ca:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049d4:	d112      	bne.n	80049fc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2200      	movs	r2, #0
 80049de:	2180      	movs	r1, #128	@ 0x80
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f7ff fee1 	bl	80047a8 <SPI_WaitFlagStateUntilTimeout>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d016      	beq.n	8004a1a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f0:	f043 0220 	orr.w	r2, r3, #32
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e00f      	b.n	8004a1c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	3b01      	subs	r3, #1
 8004a06:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a12:	2b80      	cmp	r3, #128	@ 0x80
 8004a14:	d0f2      	beq.n	80049fc <SPI_EndRxTxTransaction+0x78>
 8004a16:	e000      	b.n	8004a1a <SPI_EndRxTxTransaction+0x96>
        break;
 8004a18:	bf00      	nop
  }

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3718      	adds	r7, #24
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	20000000 	.word	0x20000000
 8004a28:	165e9f81 	.word	0x165e9f81

08004a2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e042      	b.n	8004ac4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d106      	bne.n	8004a58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7fd fa94 	bl	8001f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2224      	movs	r2, #36	@ 0x24
 8004a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 fb83 	bl	800517c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	691a      	ldr	r2, [r3, #16]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	695a      	ldr	r2, [r3, #20]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68da      	ldr	r2, [r3, #12]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004aa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3708      	adds	r7, #8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b08a      	sub	sp, #40	@ 0x28
 8004ad0:	af02      	add	r7, sp, #8
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	603b      	str	r3, [r7, #0]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b20      	cmp	r3, #32
 8004aea:	d175      	bne.n	8004bd8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <HAL_UART_Transmit+0x2c>
 8004af2:	88fb      	ldrh	r3, [r7, #6]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e06e      	b.n	8004bda <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2221      	movs	r2, #33	@ 0x21
 8004b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b0a:	f7fd fc1b 	bl	8002344 <HAL_GetTick>
 8004b0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	88fa      	ldrh	r2, [r7, #6]
 8004b14:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	88fa      	ldrh	r2, [r7, #6]
 8004b1a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b24:	d108      	bne.n	8004b38 <HAL_UART_Transmit+0x6c>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d104      	bne.n	8004b38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	61bb      	str	r3, [r7, #24]
 8004b36:	e003      	b.n	8004b40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b40:	e02e      	b.n	8004ba0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	2180      	movs	r1, #128	@ 0x80
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 f995 	bl	8004e7c <UART_WaitOnFlagUntilTimeout>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d005      	beq.n	8004b64 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e03a      	b.n	8004bda <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10b      	bne.n	8004b82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	3302      	adds	r3, #2
 8004b7e:	61bb      	str	r3, [r7, #24]
 8004b80:	e007      	b.n	8004b92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	781a      	ldrb	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1cb      	bne.n	8004b42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	2140      	movs	r1, #64	@ 0x40
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 f961 	bl	8004e7c <UART_WaitOnFlagUntilTimeout>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d005      	beq.n	8004bcc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e006      	b.n	8004bda <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	e000      	b.n	8004bda <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004bd8:	2302      	movs	r3, #2
  }
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3720      	adds	r7, #32
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b084      	sub	sp, #16
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	60f8      	str	r0, [r7, #12]
 8004bea:	60b9      	str	r1, [r7, #8]
 8004bec:	4613      	mov	r3, r2
 8004bee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b20      	cmp	r3, #32
 8004bfa:	d112      	bne.n	8004c22 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <HAL_UART_Receive_DMA+0x26>
 8004c02:	88fb      	ldrh	r3, [r7, #6]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e00b      	b.n	8004c24 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004c12:	88fb      	ldrh	r3, [r7, #6]
 8004c14:	461a      	mov	r2, r3
 8004c16:	68b9      	ldr	r1, [r7, #8]
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 f989 	bl	8004f30 <UART_Start_Receive_DMA>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	e000      	b.n	8004c24 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004c22:	2302      	movs	r3, #2
  }
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	460b      	mov	r3, r1
 8004c72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b09c      	sub	sp, #112	@ 0x70
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c8c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d172      	bne.n	8004d82 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004c9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ca2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	330c      	adds	r3, #12
 8004ca8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004caa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cac:	e853 3f00 	ldrex	r3, [r3]
 8004cb0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004cb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	330c      	adds	r3, #12
 8004cc0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004cc2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004cc4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004cc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004cca:	e841 2300 	strex	r3, r2, [r1]
 8004cce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004cd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1e5      	bne.n	8004ca2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3314      	adds	r3, #20
 8004cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce0:	e853 3f00 	ldrex	r3, [r3]
 8004ce4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ce8:	f023 0301 	bic.w	r3, r3, #1
 8004cec:	667b      	str	r3, [r7, #100]	@ 0x64
 8004cee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3314      	adds	r3, #20
 8004cf4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004cf6:	647a      	str	r2, [r7, #68]	@ 0x44
 8004cf8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cfe:	e841 2300 	strex	r3, r2, [r1]
 8004d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1e5      	bne.n	8004cd6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3314      	adds	r3, #20
 8004d10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d14:	e853 3f00 	ldrex	r3, [r3]
 8004d18:	623b      	str	r3, [r7, #32]
   return(result);
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d20:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3314      	adds	r3, #20
 8004d28:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004d2a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d32:	e841 2300 	strex	r3, r2, [r1]
 8004d36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1e5      	bne.n	8004d0a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d40:	2220      	movs	r2, #32
 8004d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d119      	bne.n	8004d82 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	330c      	adds	r3, #12
 8004d54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	e853 3f00 	ldrex	r3, [r3]
 8004d5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f023 0310 	bic.w	r3, r3, #16
 8004d64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	330c      	adds	r3, #12
 8004d6c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004d6e:	61fa      	str	r2, [r7, #28]
 8004d70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d72:	69b9      	ldr	r1, [r7, #24]
 8004d74:	69fa      	ldr	r2, [r7, #28]
 8004d76:	e841 2300 	strex	r3, r2, [r1]
 8004d7a:	617b      	str	r3, [r7, #20]
   return(result);
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1e5      	bne.n	8004d4e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d84:	2200      	movs	r2, #0
 8004d86:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d106      	bne.n	8004d9e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d92:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d94:	4619      	mov	r1, r3
 8004d96:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004d98:	f7ff ff66 	bl	8004c68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d9c:	e002      	b.n	8004da4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004d9e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004da0:	f7ff ff44 	bl	8004c2c <HAL_UART_RxCpltCallback>
}
 8004da4:	bf00      	nop
 8004da6:	3770      	adds	r7, #112	@ 0x70
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d108      	bne.n	8004dda <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004dcc:	085b      	lsrs	r3, r3, #1
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f7ff ff48 	bl	8004c68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004dd8:	e002      	b.n	8004de0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f7ff ff30 	bl	8004c40 <HAL_UART_RxHalfCpltCallback>
}
 8004de0:	bf00      	nop
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004df0:	2300      	movs	r3, #0
 8004df2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e04:	2b80      	cmp	r3, #128	@ 0x80
 8004e06:	bf0c      	ite	eq
 8004e08:	2301      	moveq	r3, #1
 8004e0a:	2300      	movne	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b21      	cmp	r3, #33	@ 0x21
 8004e1a:	d108      	bne.n	8004e2e <UART_DMAError+0x46>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d005      	beq.n	8004e2e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2200      	movs	r2, #0
 8004e26:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004e28:	68b8      	ldr	r0, [r7, #8]
 8004e2a:	f000 f91b 	bl	8005064 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e38:	2b40      	cmp	r3, #64	@ 0x40
 8004e3a:	bf0c      	ite	eq
 8004e3c:	2301      	moveq	r3, #1
 8004e3e:	2300      	movne	r3, #0
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b22      	cmp	r3, #34	@ 0x22
 8004e4e:	d108      	bne.n	8004e62 <UART_DMAError+0x7a>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d005      	beq.n	8004e62 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004e5c:	68b8      	ldr	r0, [r7, #8]
 8004e5e:	f000 f929 	bl	80050b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e66:	f043 0210 	orr.w	r2, r3, #16
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e6e:	68b8      	ldr	r0, [r7, #8]
 8004e70:	f7ff fef0 	bl	8004c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e74:	bf00      	nop
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	603b      	str	r3, [r7, #0]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e8c:	e03b      	b.n	8004f06 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e94:	d037      	beq.n	8004f06 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e96:	f7fd fa55 	bl	8002344 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	6a3a      	ldr	r2, [r7, #32]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d302      	bcc.n	8004eac <UART_WaitOnFlagUntilTimeout+0x30>
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e03a      	b.n	8004f26 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f003 0304 	and.w	r3, r3, #4
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d023      	beq.n	8004f06 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	2b80      	cmp	r3, #128	@ 0x80
 8004ec2:	d020      	beq.n	8004f06 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	2b40      	cmp	r3, #64	@ 0x40
 8004ec8:	d01d      	beq.n	8004f06 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0308 	and.w	r3, r3, #8
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	d116      	bne.n	8004f06 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004ed8:	2300      	movs	r3, #0
 8004eda:	617b      	str	r3, [r7, #20]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	617b      	str	r3, [r7, #20]
 8004eec:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 f8e0 	bl	80050b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2208      	movs	r2, #8
 8004ef8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e00f      	b.n	8004f26 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	bf0c      	ite	eq
 8004f16:	2301      	moveq	r3, #1
 8004f18:	2300      	movne	r3, #0
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	79fb      	ldrb	r3, [r7, #7]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d0b4      	beq.n	8004e8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3718      	adds	r7, #24
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b098      	sub	sp, #96	@ 0x60
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	88fa      	ldrh	r2, [r7, #6]
 8004f48:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2222      	movs	r2, #34	@ 0x22
 8004f54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f5c:	4a3e      	ldr	r2, [pc, #248]	@ (8005058 <UART_Start_Receive_DMA+0x128>)
 8004f5e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f64:	4a3d      	ldr	r2, [pc, #244]	@ (800505c <UART_Start_Receive_DMA+0x12c>)
 8004f66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f6c:	4a3c      	ldr	r2, [pc, #240]	@ (8005060 <UART_Start_Receive_DMA+0x130>)
 8004f6e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f74:	2200      	movs	r2, #0
 8004f76:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004f78:	f107 0308 	add.w	r3, r7, #8
 8004f7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	3304      	adds	r3, #4
 8004f88:	4619      	mov	r1, r3
 8004f8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	88fb      	ldrh	r3, [r7, #6]
 8004f90:	f7fd fcc4 	bl	800291c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004f94:	2300      	movs	r3, #0
 8004f96:	613b      	str	r3, [r7, #16]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	613b      	str	r3, [r7, #16]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	613b      	str	r3, [r7, #16]
 8004fa8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d019      	beq.n	8004fe6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	330c      	adds	r3, #12
 8004fb8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fbc:	e853 3f00 	ldrex	r3, [r3]
 8004fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fc8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	330c      	adds	r3, #12
 8004fd0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004fd2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004fd8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004fda:	e841 2300 	strex	r3, r2, [r1]
 8004fde:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004fe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1e5      	bne.n	8004fb2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	3314      	adds	r3, #20
 8004fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ff0:	e853 3f00 	ldrex	r3, [r3]
 8004ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff8:	f043 0301 	orr.w	r3, r3, #1
 8004ffc:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	3314      	adds	r3, #20
 8005004:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005006:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005008:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800500c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800500e:	e841 2300 	strex	r3, r2, [r1]
 8005012:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1e5      	bne.n	8004fe6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3314      	adds	r3, #20
 8005020:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	e853 3f00 	ldrex	r3, [r3]
 8005028:	617b      	str	r3, [r7, #20]
   return(result);
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005030:	653b      	str	r3, [r7, #80]	@ 0x50
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	3314      	adds	r3, #20
 8005038:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800503a:	627a      	str	r2, [r7, #36]	@ 0x24
 800503c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503e:	6a39      	ldr	r1, [r7, #32]
 8005040:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005042:	e841 2300 	strex	r3, r2, [r1]
 8005046:	61fb      	str	r3, [r7, #28]
   return(result);
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1e5      	bne.n	800501a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3760      	adds	r7, #96	@ 0x60
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	08004c81 	.word	0x08004c81
 800505c:	08004dad 	.word	0x08004dad
 8005060:	08004de9 	.word	0x08004de9

08005064 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005064:	b480      	push	{r7}
 8005066:	b089      	sub	sp, #36	@ 0x24
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	330c      	adds	r3, #12
 8005072:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	e853 3f00 	ldrex	r3, [r3]
 800507a:	60bb      	str	r3, [r7, #8]
   return(result);
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005082:	61fb      	str	r3, [r7, #28]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	330c      	adds	r3, #12
 800508a:	69fa      	ldr	r2, [r7, #28]
 800508c:	61ba      	str	r2, [r7, #24]
 800508e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005090:	6979      	ldr	r1, [r7, #20]
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	e841 2300 	strex	r3, r2, [r1]
 8005098:	613b      	str	r3, [r7, #16]
   return(result);
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1e5      	bne.n	800506c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2220      	movs	r2, #32
 80050a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80050a8:	bf00      	nop
 80050aa:	3724      	adds	r7, #36	@ 0x24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b095      	sub	sp, #84	@ 0x54
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	330c      	adds	r3, #12
 80050c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050c6:	e853 3f00 	ldrex	r3, [r3]
 80050ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	330c      	adds	r3, #12
 80050da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80050dc:	643a      	str	r2, [r7, #64]	@ 0x40
 80050de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050e4:	e841 2300 	strex	r3, r2, [r1]
 80050e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1e5      	bne.n	80050bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3314      	adds	r3, #20
 80050f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	e853 3f00 	ldrex	r3, [r3]
 80050fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	f023 0301 	bic.w	r3, r3, #1
 8005106:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3314      	adds	r3, #20
 800510e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005110:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005112:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005114:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005116:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005118:	e841 2300 	strex	r3, r2, [r1]
 800511c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800511e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1e5      	bne.n	80050f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005128:	2b01      	cmp	r3, #1
 800512a:	d119      	bne.n	8005160 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	330c      	adds	r3, #12
 8005132:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	e853 3f00 	ldrex	r3, [r3]
 800513a:	60bb      	str	r3, [r7, #8]
   return(result);
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f023 0310 	bic.w	r3, r3, #16
 8005142:	647b      	str	r3, [r7, #68]	@ 0x44
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	330c      	adds	r3, #12
 800514a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800514c:	61ba      	str	r2, [r7, #24]
 800514e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005150:	6979      	ldr	r1, [r7, #20]
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	e841 2300 	strex	r3, r2, [r1]
 8005158:	613b      	str	r3, [r7, #16]
   return(result);
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e5      	bne.n	800512c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800516e:	bf00      	nop
 8005170:	3754      	adds	r7, #84	@ 0x54
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
	...

0800517c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800517c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005180:	b0c0      	sub	sp, #256	@ 0x100
 8005182:	af00      	add	r7, sp, #0
 8005184:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005198:	68d9      	ldr	r1, [r3, #12]
 800519a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	ea40 0301 	orr.w	r3, r0, r1
 80051a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	431a      	orrs	r2, r3
 80051b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	431a      	orrs	r2, r3
 80051bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80051d4:	f021 010c 	bic.w	r1, r1, #12
 80051d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80051e2:	430b      	orrs	r3, r1
 80051e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80051f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f6:	6999      	ldr	r1, [r3, #24]
 80051f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	ea40 0301 	orr.w	r3, r0, r1
 8005202:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	4b8f      	ldr	r3, [pc, #572]	@ (8005448 <UART_SetConfig+0x2cc>)
 800520c:	429a      	cmp	r2, r3
 800520e:	d005      	beq.n	800521c <UART_SetConfig+0xa0>
 8005210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	4b8d      	ldr	r3, [pc, #564]	@ (800544c <UART_SetConfig+0x2d0>)
 8005218:	429a      	cmp	r2, r3
 800521a:	d104      	bne.n	8005226 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800521c:	f7fe f944 	bl	80034a8 <HAL_RCC_GetPCLK2Freq>
 8005220:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005224:	e003      	b.n	800522e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005226:	f7fe f92b 	bl	8003480 <HAL_RCC_GetPCLK1Freq>
 800522a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800522e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005238:	f040 810c 	bne.w	8005454 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800523c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005240:	2200      	movs	r2, #0
 8005242:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005246:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800524a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800524e:	4622      	mov	r2, r4
 8005250:	462b      	mov	r3, r5
 8005252:	1891      	adds	r1, r2, r2
 8005254:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005256:	415b      	adcs	r3, r3
 8005258:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800525a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800525e:	4621      	mov	r1, r4
 8005260:	eb12 0801 	adds.w	r8, r2, r1
 8005264:	4629      	mov	r1, r5
 8005266:	eb43 0901 	adc.w	r9, r3, r1
 800526a:	f04f 0200 	mov.w	r2, #0
 800526e:	f04f 0300 	mov.w	r3, #0
 8005272:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005276:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800527a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800527e:	4690      	mov	r8, r2
 8005280:	4699      	mov	r9, r3
 8005282:	4623      	mov	r3, r4
 8005284:	eb18 0303 	adds.w	r3, r8, r3
 8005288:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800528c:	462b      	mov	r3, r5
 800528e:	eb49 0303 	adc.w	r3, r9, r3
 8005292:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80052a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80052a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80052aa:	460b      	mov	r3, r1
 80052ac:	18db      	adds	r3, r3, r3
 80052ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80052b0:	4613      	mov	r3, r2
 80052b2:	eb42 0303 	adc.w	r3, r2, r3
 80052b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80052b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80052bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80052c0:	f7fb fbec 	bl	8000a9c <__aeabi_uldivmod>
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	4b61      	ldr	r3, [pc, #388]	@ (8005450 <UART_SetConfig+0x2d4>)
 80052ca:	fba3 2302 	umull	r2, r3, r3, r2
 80052ce:	095b      	lsrs	r3, r3, #5
 80052d0:	011c      	lsls	r4, r3, #4
 80052d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052d6:	2200      	movs	r2, #0
 80052d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80052e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80052e4:	4642      	mov	r2, r8
 80052e6:	464b      	mov	r3, r9
 80052e8:	1891      	adds	r1, r2, r2
 80052ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 80052ec:	415b      	adcs	r3, r3
 80052ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80052f4:	4641      	mov	r1, r8
 80052f6:	eb12 0a01 	adds.w	sl, r2, r1
 80052fa:	4649      	mov	r1, r9
 80052fc:	eb43 0b01 	adc.w	fp, r3, r1
 8005300:	f04f 0200 	mov.w	r2, #0
 8005304:	f04f 0300 	mov.w	r3, #0
 8005308:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800530c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005310:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005314:	4692      	mov	sl, r2
 8005316:	469b      	mov	fp, r3
 8005318:	4643      	mov	r3, r8
 800531a:	eb1a 0303 	adds.w	r3, sl, r3
 800531e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005322:	464b      	mov	r3, r9
 8005324:	eb4b 0303 	adc.w	r3, fp, r3
 8005328:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800532c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005338:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800533c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005340:	460b      	mov	r3, r1
 8005342:	18db      	adds	r3, r3, r3
 8005344:	643b      	str	r3, [r7, #64]	@ 0x40
 8005346:	4613      	mov	r3, r2
 8005348:	eb42 0303 	adc.w	r3, r2, r3
 800534c:	647b      	str	r3, [r7, #68]	@ 0x44
 800534e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005352:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005356:	f7fb fba1 	bl	8000a9c <__aeabi_uldivmod>
 800535a:	4602      	mov	r2, r0
 800535c:	460b      	mov	r3, r1
 800535e:	4611      	mov	r1, r2
 8005360:	4b3b      	ldr	r3, [pc, #236]	@ (8005450 <UART_SetConfig+0x2d4>)
 8005362:	fba3 2301 	umull	r2, r3, r3, r1
 8005366:	095b      	lsrs	r3, r3, #5
 8005368:	2264      	movs	r2, #100	@ 0x64
 800536a:	fb02 f303 	mul.w	r3, r2, r3
 800536e:	1acb      	subs	r3, r1, r3
 8005370:	00db      	lsls	r3, r3, #3
 8005372:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005376:	4b36      	ldr	r3, [pc, #216]	@ (8005450 <UART_SetConfig+0x2d4>)
 8005378:	fba3 2302 	umull	r2, r3, r3, r2
 800537c:	095b      	lsrs	r3, r3, #5
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005384:	441c      	add	r4, r3
 8005386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800538a:	2200      	movs	r2, #0
 800538c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005390:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005394:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005398:	4642      	mov	r2, r8
 800539a:	464b      	mov	r3, r9
 800539c:	1891      	adds	r1, r2, r2
 800539e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80053a0:	415b      	adcs	r3, r3
 80053a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80053a8:	4641      	mov	r1, r8
 80053aa:	1851      	adds	r1, r2, r1
 80053ac:	6339      	str	r1, [r7, #48]	@ 0x30
 80053ae:	4649      	mov	r1, r9
 80053b0:	414b      	adcs	r3, r1
 80053b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80053b4:	f04f 0200 	mov.w	r2, #0
 80053b8:	f04f 0300 	mov.w	r3, #0
 80053bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80053c0:	4659      	mov	r1, fp
 80053c2:	00cb      	lsls	r3, r1, #3
 80053c4:	4651      	mov	r1, sl
 80053c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053ca:	4651      	mov	r1, sl
 80053cc:	00ca      	lsls	r2, r1, #3
 80053ce:	4610      	mov	r0, r2
 80053d0:	4619      	mov	r1, r3
 80053d2:	4603      	mov	r3, r0
 80053d4:	4642      	mov	r2, r8
 80053d6:	189b      	adds	r3, r3, r2
 80053d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053dc:	464b      	mov	r3, r9
 80053de:	460a      	mov	r2, r1
 80053e0:	eb42 0303 	adc.w	r3, r2, r3
 80053e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80053f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80053f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80053fc:	460b      	mov	r3, r1
 80053fe:	18db      	adds	r3, r3, r3
 8005400:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005402:	4613      	mov	r3, r2
 8005404:	eb42 0303 	adc.w	r3, r2, r3
 8005408:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800540a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800540e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005412:	f7fb fb43 	bl	8000a9c <__aeabi_uldivmod>
 8005416:	4602      	mov	r2, r0
 8005418:	460b      	mov	r3, r1
 800541a:	4b0d      	ldr	r3, [pc, #52]	@ (8005450 <UART_SetConfig+0x2d4>)
 800541c:	fba3 1302 	umull	r1, r3, r3, r2
 8005420:	095b      	lsrs	r3, r3, #5
 8005422:	2164      	movs	r1, #100	@ 0x64
 8005424:	fb01 f303 	mul.w	r3, r1, r3
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	3332      	adds	r3, #50	@ 0x32
 800542e:	4a08      	ldr	r2, [pc, #32]	@ (8005450 <UART_SetConfig+0x2d4>)
 8005430:	fba2 2303 	umull	r2, r3, r2, r3
 8005434:	095b      	lsrs	r3, r3, #5
 8005436:	f003 0207 	and.w	r2, r3, #7
 800543a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4422      	add	r2, r4
 8005442:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005444:	e106      	b.n	8005654 <UART_SetConfig+0x4d8>
 8005446:	bf00      	nop
 8005448:	40011000 	.word	0x40011000
 800544c:	40011400 	.word	0x40011400
 8005450:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005454:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005458:	2200      	movs	r2, #0
 800545a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800545e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005462:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005466:	4642      	mov	r2, r8
 8005468:	464b      	mov	r3, r9
 800546a:	1891      	adds	r1, r2, r2
 800546c:	6239      	str	r1, [r7, #32]
 800546e:	415b      	adcs	r3, r3
 8005470:	627b      	str	r3, [r7, #36]	@ 0x24
 8005472:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005476:	4641      	mov	r1, r8
 8005478:	1854      	adds	r4, r2, r1
 800547a:	4649      	mov	r1, r9
 800547c:	eb43 0501 	adc.w	r5, r3, r1
 8005480:	f04f 0200 	mov.w	r2, #0
 8005484:	f04f 0300 	mov.w	r3, #0
 8005488:	00eb      	lsls	r3, r5, #3
 800548a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800548e:	00e2      	lsls	r2, r4, #3
 8005490:	4614      	mov	r4, r2
 8005492:	461d      	mov	r5, r3
 8005494:	4643      	mov	r3, r8
 8005496:	18e3      	adds	r3, r4, r3
 8005498:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800549c:	464b      	mov	r3, r9
 800549e:	eb45 0303 	adc.w	r3, r5, r3
 80054a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80054a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80054b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	f04f 0300 	mov.w	r3, #0
 80054be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80054c2:	4629      	mov	r1, r5
 80054c4:	008b      	lsls	r3, r1, #2
 80054c6:	4621      	mov	r1, r4
 80054c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054cc:	4621      	mov	r1, r4
 80054ce:	008a      	lsls	r2, r1, #2
 80054d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80054d4:	f7fb fae2 	bl	8000a9c <__aeabi_uldivmod>
 80054d8:	4602      	mov	r2, r0
 80054da:	460b      	mov	r3, r1
 80054dc:	4b60      	ldr	r3, [pc, #384]	@ (8005660 <UART_SetConfig+0x4e4>)
 80054de:	fba3 2302 	umull	r2, r3, r3, r2
 80054e2:	095b      	lsrs	r3, r3, #5
 80054e4:	011c      	lsls	r4, r3, #4
 80054e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054ea:	2200      	movs	r2, #0
 80054ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80054f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80054f8:	4642      	mov	r2, r8
 80054fa:	464b      	mov	r3, r9
 80054fc:	1891      	adds	r1, r2, r2
 80054fe:	61b9      	str	r1, [r7, #24]
 8005500:	415b      	adcs	r3, r3
 8005502:	61fb      	str	r3, [r7, #28]
 8005504:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005508:	4641      	mov	r1, r8
 800550a:	1851      	adds	r1, r2, r1
 800550c:	6139      	str	r1, [r7, #16]
 800550e:	4649      	mov	r1, r9
 8005510:	414b      	adcs	r3, r1
 8005512:	617b      	str	r3, [r7, #20]
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	f04f 0300 	mov.w	r3, #0
 800551c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005520:	4659      	mov	r1, fp
 8005522:	00cb      	lsls	r3, r1, #3
 8005524:	4651      	mov	r1, sl
 8005526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800552a:	4651      	mov	r1, sl
 800552c:	00ca      	lsls	r2, r1, #3
 800552e:	4610      	mov	r0, r2
 8005530:	4619      	mov	r1, r3
 8005532:	4603      	mov	r3, r0
 8005534:	4642      	mov	r2, r8
 8005536:	189b      	adds	r3, r3, r2
 8005538:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800553c:	464b      	mov	r3, r9
 800553e:	460a      	mov	r2, r1
 8005540:	eb42 0303 	adc.w	r3, r2, r3
 8005544:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005552:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005554:	f04f 0200 	mov.w	r2, #0
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005560:	4649      	mov	r1, r9
 8005562:	008b      	lsls	r3, r1, #2
 8005564:	4641      	mov	r1, r8
 8005566:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800556a:	4641      	mov	r1, r8
 800556c:	008a      	lsls	r2, r1, #2
 800556e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005572:	f7fb fa93 	bl	8000a9c <__aeabi_uldivmod>
 8005576:	4602      	mov	r2, r0
 8005578:	460b      	mov	r3, r1
 800557a:	4611      	mov	r1, r2
 800557c:	4b38      	ldr	r3, [pc, #224]	@ (8005660 <UART_SetConfig+0x4e4>)
 800557e:	fba3 2301 	umull	r2, r3, r3, r1
 8005582:	095b      	lsrs	r3, r3, #5
 8005584:	2264      	movs	r2, #100	@ 0x64
 8005586:	fb02 f303 	mul.w	r3, r2, r3
 800558a:	1acb      	subs	r3, r1, r3
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	3332      	adds	r3, #50	@ 0x32
 8005590:	4a33      	ldr	r2, [pc, #204]	@ (8005660 <UART_SetConfig+0x4e4>)
 8005592:	fba2 2303 	umull	r2, r3, r2, r3
 8005596:	095b      	lsrs	r3, r3, #5
 8005598:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800559c:	441c      	add	r4, r3
 800559e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055a2:	2200      	movs	r2, #0
 80055a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80055a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80055a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80055ac:	4642      	mov	r2, r8
 80055ae:	464b      	mov	r3, r9
 80055b0:	1891      	adds	r1, r2, r2
 80055b2:	60b9      	str	r1, [r7, #8]
 80055b4:	415b      	adcs	r3, r3
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055bc:	4641      	mov	r1, r8
 80055be:	1851      	adds	r1, r2, r1
 80055c0:	6039      	str	r1, [r7, #0]
 80055c2:	4649      	mov	r1, r9
 80055c4:	414b      	adcs	r3, r1
 80055c6:	607b      	str	r3, [r7, #4]
 80055c8:	f04f 0200 	mov.w	r2, #0
 80055cc:	f04f 0300 	mov.w	r3, #0
 80055d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055d4:	4659      	mov	r1, fp
 80055d6:	00cb      	lsls	r3, r1, #3
 80055d8:	4651      	mov	r1, sl
 80055da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055de:	4651      	mov	r1, sl
 80055e0:	00ca      	lsls	r2, r1, #3
 80055e2:	4610      	mov	r0, r2
 80055e4:	4619      	mov	r1, r3
 80055e6:	4603      	mov	r3, r0
 80055e8:	4642      	mov	r2, r8
 80055ea:	189b      	adds	r3, r3, r2
 80055ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055ee:	464b      	mov	r3, r9
 80055f0:	460a      	mov	r2, r1
 80055f2:	eb42 0303 	adc.w	r3, r2, r3
 80055f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	663b      	str	r3, [r7, #96]	@ 0x60
 8005602:	667a      	str	r2, [r7, #100]	@ 0x64
 8005604:	f04f 0200 	mov.w	r2, #0
 8005608:	f04f 0300 	mov.w	r3, #0
 800560c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005610:	4649      	mov	r1, r9
 8005612:	008b      	lsls	r3, r1, #2
 8005614:	4641      	mov	r1, r8
 8005616:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800561a:	4641      	mov	r1, r8
 800561c:	008a      	lsls	r2, r1, #2
 800561e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005622:	f7fb fa3b 	bl	8000a9c <__aeabi_uldivmod>
 8005626:	4602      	mov	r2, r0
 8005628:	460b      	mov	r3, r1
 800562a:	4b0d      	ldr	r3, [pc, #52]	@ (8005660 <UART_SetConfig+0x4e4>)
 800562c:	fba3 1302 	umull	r1, r3, r3, r2
 8005630:	095b      	lsrs	r3, r3, #5
 8005632:	2164      	movs	r1, #100	@ 0x64
 8005634:	fb01 f303 	mul.w	r3, r1, r3
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	3332      	adds	r3, #50	@ 0x32
 800563e:	4a08      	ldr	r2, [pc, #32]	@ (8005660 <UART_SetConfig+0x4e4>)
 8005640:	fba2 2303 	umull	r2, r3, r2, r3
 8005644:	095b      	lsrs	r3, r3, #5
 8005646:	f003 020f 	and.w	r2, r3, #15
 800564a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4422      	add	r2, r4
 8005652:	609a      	str	r2, [r3, #8]
}
 8005654:	bf00      	nop
 8005656:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800565a:	46bd      	mov	sp, r7
 800565c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005660:	51eb851f 	.word	0x51eb851f

08005664 <malloc>:
 8005664:	4b02      	ldr	r3, [pc, #8]	@ (8005670 <malloc+0xc>)
 8005666:	4601      	mov	r1, r0
 8005668:	6818      	ldr	r0, [r3, #0]
 800566a:	f000 b825 	b.w	80056b8 <_malloc_r>
 800566e:	bf00      	nop
 8005670:	2000000c 	.word	0x2000000c

08005674 <sbrk_aligned>:
 8005674:	b570      	push	{r4, r5, r6, lr}
 8005676:	4e0f      	ldr	r6, [pc, #60]	@ (80056b4 <sbrk_aligned+0x40>)
 8005678:	460c      	mov	r4, r1
 800567a:	6831      	ldr	r1, [r6, #0]
 800567c:	4605      	mov	r5, r0
 800567e:	b911      	cbnz	r1, 8005686 <sbrk_aligned+0x12>
 8005680:	f000 f8ce 	bl	8005820 <_sbrk_r>
 8005684:	6030      	str	r0, [r6, #0]
 8005686:	4621      	mov	r1, r4
 8005688:	4628      	mov	r0, r5
 800568a:	f000 f8c9 	bl	8005820 <_sbrk_r>
 800568e:	1c43      	adds	r3, r0, #1
 8005690:	d103      	bne.n	800569a <sbrk_aligned+0x26>
 8005692:	f04f 34ff 	mov.w	r4, #4294967295
 8005696:	4620      	mov	r0, r4
 8005698:	bd70      	pop	{r4, r5, r6, pc}
 800569a:	1cc4      	adds	r4, r0, #3
 800569c:	f024 0403 	bic.w	r4, r4, #3
 80056a0:	42a0      	cmp	r0, r4
 80056a2:	d0f8      	beq.n	8005696 <sbrk_aligned+0x22>
 80056a4:	1a21      	subs	r1, r4, r0
 80056a6:	4628      	mov	r0, r5
 80056a8:	f000 f8ba 	bl	8005820 <_sbrk_r>
 80056ac:	3001      	adds	r0, #1
 80056ae:	d1f2      	bne.n	8005696 <sbrk_aligned+0x22>
 80056b0:	e7ef      	b.n	8005692 <sbrk_aligned+0x1e>
 80056b2:	bf00      	nop
 80056b4:	2000031c 	.word	0x2000031c

080056b8 <_malloc_r>:
 80056b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056bc:	1ccd      	adds	r5, r1, #3
 80056be:	f025 0503 	bic.w	r5, r5, #3
 80056c2:	3508      	adds	r5, #8
 80056c4:	2d0c      	cmp	r5, #12
 80056c6:	bf38      	it	cc
 80056c8:	250c      	movcc	r5, #12
 80056ca:	2d00      	cmp	r5, #0
 80056cc:	4606      	mov	r6, r0
 80056ce:	db01      	blt.n	80056d4 <_malloc_r+0x1c>
 80056d0:	42a9      	cmp	r1, r5
 80056d2:	d904      	bls.n	80056de <_malloc_r+0x26>
 80056d4:	230c      	movs	r3, #12
 80056d6:	6033      	str	r3, [r6, #0]
 80056d8:	2000      	movs	r0, #0
 80056da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80057b4 <_malloc_r+0xfc>
 80056e2:	f000 f869 	bl	80057b8 <__malloc_lock>
 80056e6:	f8d8 3000 	ldr.w	r3, [r8]
 80056ea:	461c      	mov	r4, r3
 80056ec:	bb44      	cbnz	r4, 8005740 <_malloc_r+0x88>
 80056ee:	4629      	mov	r1, r5
 80056f0:	4630      	mov	r0, r6
 80056f2:	f7ff ffbf 	bl	8005674 <sbrk_aligned>
 80056f6:	1c43      	adds	r3, r0, #1
 80056f8:	4604      	mov	r4, r0
 80056fa:	d158      	bne.n	80057ae <_malloc_r+0xf6>
 80056fc:	f8d8 4000 	ldr.w	r4, [r8]
 8005700:	4627      	mov	r7, r4
 8005702:	2f00      	cmp	r7, #0
 8005704:	d143      	bne.n	800578e <_malloc_r+0xd6>
 8005706:	2c00      	cmp	r4, #0
 8005708:	d04b      	beq.n	80057a2 <_malloc_r+0xea>
 800570a:	6823      	ldr	r3, [r4, #0]
 800570c:	4639      	mov	r1, r7
 800570e:	4630      	mov	r0, r6
 8005710:	eb04 0903 	add.w	r9, r4, r3
 8005714:	f000 f884 	bl	8005820 <_sbrk_r>
 8005718:	4581      	cmp	r9, r0
 800571a:	d142      	bne.n	80057a2 <_malloc_r+0xea>
 800571c:	6821      	ldr	r1, [r4, #0]
 800571e:	1a6d      	subs	r5, r5, r1
 8005720:	4629      	mov	r1, r5
 8005722:	4630      	mov	r0, r6
 8005724:	f7ff ffa6 	bl	8005674 <sbrk_aligned>
 8005728:	3001      	adds	r0, #1
 800572a:	d03a      	beq.n	80057a2 <_malloc_r+0xea>
 800572c:	6823      	ldr	r3, [r4, #0]
 800572e:	442b      	add	r3, r5
 8005730:	6023      	str	r3, [r4, #0]
 8005732:	f8d8 3000 	ldr.w	r3, [r8]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	bb62      	cbnz	r2, 8005794 <_malloc_r+0xdc>
 800573a:	f8c8 7000 	str.w	r7, [r8]
 800573e:	e00f      	b.n	8005760 <_malloc_r+0xa8>
 8005740:	6822      	ldr	r2, [r4, #0]
 8005742:	1b52      	subs	r2, r2, r5
 8005744:	d420      	bmi.n	8005788 <_malloc_r+0xd0>
 8005746:	2a0b      	cmp	r2, #11
 8005748:	d917      	bls.n	800577a <_malloc_r+0xc2>
 800574a:	1961      	adds	r1, r4, r5
 800574c:	42a3      	cmp	r3, r4
 800574e:	6025      	str	r5, [r4, #0]
 8005750:	bf18      	it	ne
 8005752:	6059      	strne	r1, [r3, #4]
 8005754:	6863      	ldr	r3, [r4, #4]
 8005756:	bf08      	it	eq
 8005758:	f8c8 1000 	streq.w	r1, [r8]
 800575c:	5162      	str	r2, [r4, r5]
 800575e:	604b      	str	r3, [r1, #4]
 8005760:	4630      	mov	r0, r6
 8005762:	f000 f82f 	bl	80057c4 <__malloc_unlock>
 8005766:	f104 000b 	add.w	r0, r4, #11
 800576a:	1d23      	adds	r3, r4, #4
 800576c:	f020 0007 	bic.w	r0, r0, #7
 8005770:	1ac2      	subs	r2, r0, r3
 8005772:	bf1c      	itt	ne
 8005774:	1a1b      	subne	r3, r3, r0
 8005776:	50a3      	strne	r3, [r4, r2]
 8005778:	e7af      	b.n	80056da <_malloc_r+0x22>
 800577a:	6862      	ldr	r2, [r4, #4]
 800577c:	42a3      	cmp	r3, r4
 800577e:	bf0c      	ite	eq
 8005780:	f8c8 2000 	streq.w	r2, [r8]
 8005784:	605a      	strne	r2, [r3, #4]
 8005786:	e7eb      	b.n	8005760 <_malloc_r+0xa8>
 8005788:	4623      	mov	r3, r4
 800578a:	6864      	ldr	r4, [r4, #4]
 800578c:	e7ae      	b.n	80056ec <_malloc_r+0x34>
 800578e:	463c      	mov	r4, r7
 8005790:	687f      	ldr	r7, [r7, #4]
 8005792:	e7b6      	b.n	8005702 <_malloc_r+0x4a>
 8005794:	461a      	mov	r2, r3
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	42a3      	cmp	r3, r4
 800579a:	d1fb      	bne.n	8005794 <_malloc_r+0xdc>
 800579c:	2300      	movs	r3, #0
 800579e:	6053      	str	r3, [r2, #4]
 80057a0:	e7de      	b.n	8005760 <_malloc_r+0xa8>
 80057a2:	230c      	movs	r3, #12
 80057a4:	6033      	str	r3, [r6, #0]
 80057a6:	4630      	mov	r0, r6
 80057a8:	f000 f80c 	bl	80057c4 <__malloc_unlock>
 80057ac:	e794      	b.n	80056d8 <_malloc_r+0x20>
 80057ae:	6005      	str	r5, [r0, #0]
 80057b0:	e7d6      	b.n	8005760 <_malloc_r+0xa8>
 80057b2:	bf00      	nop
 80057b4:	20000320 	.word	0x20000320

080057b8 <__malloc_lock>:
 80057b8:	4801      	ldr	r0, [pc, #4]	@ (80057c0 <__malloc_lock+0x8>)
 80057ba:	f000 b86b 	b.w	8005894 <__retarget_lock_acquire_recursive>
 80057be:	bf00      	nop
 80057c0:	20000460 	.word	0x20000460

080057c4 <__malloc_unlock>:
 80057c4:	4801      	ldr	r0, [pc, #4]	@ (80057cc <__malloc_unlock+0x8>)
 80057c6:	f000 b866 	b.w	8005896 <__retarget_lock_release_recursive>
 80057ca:	bf00      	nop
 80057cc:	20000460 	.word	0x20000460

080057d0 <siprintf>:
 80057d0:	b40e      	push	{r1, r2, r3}
 80057d2:	b500      	push	{lr}
 80057d4:	b09c      	sub	sp, #112	@ 0x70
 80057d6:	ab1d      	add	r3, sp, #116	@ 0x74
 80057d8:	9002      	str	r0, [sp, #8]
 80057da:	9006      	str	r0, [sp, #24]
 80057dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80057e0:	4809      	ldr	r0, [pc, #36]	@ (8005808 <siprintf+0x38>)
 80057e2:	9107      	str	r1, [sp, #28]
 80057e4:	9104      	str	r1, [sp, #16]
 80057e6:	4909      	ldr	r1, [pc, #36]	@ (800580c <siprintf+0x3c>)
 80057e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80057ec:	9105      	str	r1, [sp, #20]
 80057ee:	6800      	ldr	r0, [r0, #0]
 80057f0:	9301      	str	r3, [sp, #4]
 80057f2:	a902      	add	r1, sp, #8
 80057f4:	f000 f904 	bl	8005a00 <_svfiprintf_r>
 80057f8:	9b02      	ldr	r3, [sp, #8]
 80057fa:	2200      	movs	r2, #0
 80057fc:	701a      	strb	r2, [r3, #0]
 80057fe:	b01c      	add	sp, #112	@ 0x70
 8005800:	f85d eb04 	ldr.w	lr, [sp], #4
 8005804:	b003      	add	sp, #12
 8005806:	4770      	bx	lr
 8005808:	2000000c 	.word	0x2000000c
 800580c:	ffff0208 	.word	0xffff0208

08005810 <memset>:
 8005810:	4402      	add	r2, r0
 8005812:	4603      	mov	r3, r0
 8005814:	4293      	cmp	r3, r2
 8005816:	d100      	bne.n	800581a <memset+0xa>
 8005818:	4770      	bx	lr
 800581a:	f803 1b01 	strb.w	r1, [r3], #1
 800581e:	e7f9      	b.n	8005814 <memset+0x4>

08005820 <_sbrk_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4d06      	ldr	r5, [pc, #24]	@ (800583c <_sbrk_r+0x1c>)
 8005824:	2300      	movs	r3, #0
 8005826:	4604      	mov	r4, r0
 8005828:	4608      	mov	r0, r1
 800582a:	602b      	str	r3, [r5, #0]
 800582c:	f7fc fcb2 	bl	8002194 <_sbrk>
 8005830:	1c43      	adds	r3, r0, #1
 8005832:	d102      	bne.n	800583a <_sbrk_r+0x1a>
 8005834:	682b      	ldr	r3, [r5, #0]
 8005836:	b103      	cbz	r3, 800583a <_sbrk_r+0x1a>
 8005838:	6023      	str	r3, [r4, #0]
 800583a:	bd38      	pop	{r3, r4, r5, pc}
 800583c:	2000045c 	.word	0x2000045c

08005840 <__errno>:
 8005840:	4b01      	ldr	r3, [pc, #4]	@ (8005848 <__errno+0x8>)
 8005842:	6818      	ldr	r0, [r3, #0]
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	2000000c 	.word	0x2000000c

0800584c <__libc_init_array>:
 800584c:	b570      	push	{r4, r5, r6, lr}
 800584e:	4d0d      	ldr	r5, [pc, #52]	@ (8005884 <__libc_init_array+0x38>)
 8005850:	4c0d      	ldr	r4, [pc, #52]	@ (8005888 <__libc_init_array+0x3c>)
 8005852:	1b64      	subs	r4, r4, r5
 8005854:	10a4      	asrs	r4, r4, #2
 8005856:	2600      	movs	r6, #0
 8005858:	42a6      	cmp	r6, r4
 800585a:	d109      	bne.n	8005870 <__libc_init_array+0x24>
 800585c:	4d0b      	ldr	r5, [pc, #44]	@ (800588c <__libc_init_array+0x40>)
 800585e:	4c0c      	ldr	r4, [pc, #48]	@ (8005890 <__libc_init_array+0x44>)
 8005860:	f000 fba8 	bl	8005fb4 <_init>
 8005864:	1b64      	subs	r4, r4, r5
 8005866:	10a4      	asrs	r4, r4, #2
 8005868:	2600      	movs	r6, #0
 800586a:	42a6      	cmp	r6, r4
 800586c:	d105      	bne.n	800587a <__libc_init_array+0x2e>
 800586e:	bd70      	pop	{r4, r5, r6, pc}
 8005870:	f855 3b04 	ldr.w	r3, [r5], #4
 8005874:	4798      	blx	r3
 8005876:	3601      	adds	r6, #1
 8005878:	e7ee      	b.n	8005858 <__libc_init_array+0xc>
 800587a:	f855 3b04 	ldr.w	r3, [r5], #4
 800587e:	4798      	blx	r3
 8005880:	3601      	adds	r6, #1
 8005882:	e7f2      	b.n	800586a <__libc_init_array+0x1e>
 8005884:	080060c8 	.word	0x080060c8
 8005888:	080060c8 	.word	0x080060c8
 800588c:	080060c8 	.word	0x080060c8
 8005890:	080060cc 	.word	0x080060cc

08005894 <__retarget_lock_acquire_recursive>:
 8005894:	4770      	bx	lr

08005896 <__retarget_lock_release_recursive>:
 8005896:	4770      	bx	lr

08005898 <memcpy>:
 8005898:	440a      	add	r2, r1
 800589a:	4291      	cmp	r1, r2
 800589c:	f100 33ff 	add.w	r3, r0, #4294967295
 80058a0:	d100      	bne.n	80058a4 <memcpy+0xc>
 80058a2:	4770      	bx	lr
 80058a4:	b510      	push	{r4, lr}
 80058a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058ae:	4291      	cmp	r1, r2
 80058b0:	d1f9      	bne.n	80058a6 <memcpy+0xe>
 80058b2:	bd10      	pop	{r4, pc}

080058b4 <_free_r>:
 80058b4:	b538      	push	{r3, r4, r5, lr}
 80058b6:	4605      	mov	r5, r0
 80058b8:	2900      	cmp	r1, #0
 80058ba:	d041      	beq.n	8005940 <_free_r+0x8c>
 80058bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058c0:	1f0c      	subs	r4, r1, #4
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	bfb8      	it	lt
 80058c6:	18e4      	addlt	r4, r4, r3
 80058c8:	f7ff ff76 	bl	80057b8 <__malloc_lock>
 80058cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005944 <_free_r+0x90>)
 80058ce:	6813      	ldr	r3, [r2, #0]
 80058d0:	b933      	cbnz	r3, 80058e0 <_free_r+0x2c>
 80058d2:	6063      	str	r3, [r4, #4]
 80058d4:	6014      	str	r4, [r2, #0]
 80058d6:	4628      	mov	r0, r5
 80058d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058dc:	f7ff bf72 	b.w	80057c4 <__malloc_unlock>
 80058e0:	42a3      	cmp	r3, r4
 80058e2:	d908      	bls.n	80058f6 <_free_r+0x42>
 80058e4:	6820      	ldr	r0, [r4, #0]
 80058e6:	1821      	adds	r1, r4, r0
 80058e8:	428b      	cmp	r3, r1
 80058ea:	bf01      	itttt	eq
 80058ec:	6819      	ldreq	r1, [r3, #0]
 80058ee:	685b      	ldreq	r3, [r3, #4]
 80058f0:	1809      	addeq	r1, r1, r0
 80058f2:	6021      	streq	r1, [r4, #0]
 80058f4:	e7ed      	b.n	80058d2 <_free_r+0x1e>
 80058f6:	461a      	mov	r2, r3
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	b10b      	cbz	r3, 8005900 <_free_r+0x4c>
 80058fc:	42a3      	cmp	r3, r4
 80058fe:	d9fa      	bls.n	80058f6 <_free_r+0x42>
 8005900:	6811      	ldr	r1, [r2, #0]
 8005902:	1850      	adds	r0, r2, r1
 8005904:	42a0      	cmp	r0, r4
 8005906:	d10b      	bne.n	8005920 <_free_r+0x6c>
 8005908:	6820      	ldr	r0, [r4, #0]
 800590a:	4401      	add	r1, r0
 800590c:	1850      	adds	r0, r2, r1
 800590e:	4283      	cmp	r3, r0
 8005910:	6011      	str	r1, [r2, #0]
 8005912:	d1e0      	bne.n	80058d6 <_free_r+0x22>
 8005914:	6818      	ldr	r0, [r3, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	6053      	str	r3, [r2, #4]
 800591a:	4408      	add	r0, r1
 800591c:	6010      	str	r0, [r2, #0]
 800591e:	e7da      	b.n	80058d6 <_free_r+0x22>
 8005920:	d902      	bls.n	8005928 <_free_r+0x74>
 8005922:	230c      	movs	r3, #12
 8005924:	602b      	str	r3, [r5, #0]
 8005926:	e7d6      	b.n	80058d6 <_free_r+0x22>
 8005928:	6820      	ldr	r0, [r4, #0]
 800592a:	1821      	adds	r1, r4, r0
 800592c:	428b      	cmp	r3, r1
 800592e:	bf04      	itt	eq
 8005930:	6819      	ldreq	r1, [r3, #0]
 8005932:	685b      	ldreq	r3, [r3, #4]
 8005934:	6063      	str	r3, [r4, #4]
 8005936:	bf04      	itt	eq
 8005938:	1809      	addeq	r1, r1, r0
 800593a:	6021      	streq	r1, [r4, #0]
 800593c:	6054      	str	r4, [r2, #4]
 800593e:	e7ca      	b.n	80058d6 <_free_r+0x22>
 8005940:	bd38      	pop	{r3, r4, r5, pc}
 8005942:	bf00      	nop
 8005944:	20000320 	.word	0x20000320

08005948 <__ssputs_r>:
 8005948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800594c:	688e      	ldr	r6, [r1, #8]
 800594e:	461f      	mov	r7, r3
 8005950:	42be      	cmp	r6, r7
 8005952:	680b      	ldr	r3, [r1, #0]
 8005954:	4682      	mov	sl, r0
 8005956:	460c      	mov	r4, r1
 8005958:	4690      	mov	r8, r2
 800595a:	d82d      	bhi.n	80059b8 <__ssputs_r+0x70>
 800595c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005960:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005964:	d026      	beq.n	80059b4 <__ssputs_r+0x6c>
 8005966:	6965      	ldr	r5, [r4, #20]
 8005968:	6909      	ldr	r1, [r1, #16]
 800596a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800596e:	eba3 0901 	sub.w	r9, r3, r1
 8005972:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005976:	1c7b      	adds	r3, r7, #1
 8005978:	444b      	add	r3, r9
 800597a:	106d      	asrs	r5, r5, #1
 800597c:	429d      	cmp	r5, r3
 800597e:	bf38      	it	cc
 8005980:	461d      	movcc	r5, r3
 8005982:	0553      	lsls	r3, r2, #21
 8005984:	d527      	bpl.n	80059d6 <__ssputs_r+0x8e>
 8005986:	4629      	mov	r1, r5
 8005988:	f7ff fe96 	bl	80056b8 <_malloc_r>
 800598c:	4606      	mov	r6, r0
 800598e:	b360      	cbz	r0, 80059ea <__ssputs_r+0xa2>
 8005990:	6921      	ldr	r1, [r4, #16]
 8005992:	464a      	mov	r2, r9
 8005994:	f7ff ff80 	bl	8005898 <memcpy>
 8005998:	89a3      	ldrh	r3, [r4, #12]
 800599a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800599e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059a2:	81a3      	strh	r3, [r4, #12]
 80059a4:	6126      	str	r6, [r4, #16]
 80059a6:	6165      	str	r5, [r4, #20]
 80059a8:	444e      	add	r6, r9
 80059aa:	eba5 0509 	sub.w	r5, r5, r9
 80059ae:	6026      	str	r6, [r4, #0]
 80059b0:	60a5      	str	r5, [r4, #8]
 80059b2:	463e      	mov	r6, r7
 80059b4:	42be      	cmp	r6, r7
 80059b6:	d900      	bls.n	80059ba <__ssputs_r+0x72>
 80059b8:	463e      	mov	r6, r7
 80059ba:	6820      	ldr	r0, [r4, #0]
 80059bc:	4632      	mov	r2, r6
 80059be:	4641      	mov	r1, r8
 80059c0:	f000 faa8 	bl	8005f14 <memmove>
 80059c4:	68a3      	ldr	r3, [r4, #8]
 80059c6:	1b9b      	subs	r3, r3, r6
 80059c8:	60a3      	str	r3, [r4, #8]
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	4433      	add	r3, r6
 80059ce:	6023      	str	r3, [r4, #0]
 80059d0:	2000      	movs	r0, #0
 80059d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059d6:	462a      	mov	r2, r5
 80059d8:	f000 fab6 	bl	8005f48 <_realloc_r>
 80059dc:	4606      	mov	r6, r0
 80059de:	2800      	cmp	r0, #0
 80059e0:	d1e0      	bne.n	80059a4 <__ssputs_r+0x5c>
 80059e2:	6921      	ldr	r1, [r4, #16]
 80059e4:	4650      	mov	r0, sl
 80059e6:	f7ff ff65 	bl	80058b4 <_free_r>
 80059ea:	230c      	movs	r3, #12
 80059ec:	f8ca 3000 	str.w	r3, [sl]
 80059f0:	89a3      	ldrh	r3, [r4, #12]
 80059f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059f6:	81a3      	strh	r3, [r4, #12]
 80059f8:	f04f 30ff 	mov.w	r0, #4294967295
 80059fc:	e7e9      	b.n	80059d2 <__ssputs_r+0x8a>
	...

08005a00 <_svfiprintf_r>:
 8005a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a04:	4698      	mov	r8, r3
 8005a06:	898b      	ldrh	r3, [r1, #12]
 8005a08:	061b      	lsls	r3, r3, #24
 8005a0a:	b09d      	sub	sp, #116	@ 0x74
 8005a0c:	4607      	mov	r7, r0
 8005a0e:	460d      	mov	r5, r1
 8005a10:	4614      	mov	r4, r2
 8005a12:	d510      	bpl.n	8005a36 <_svfiprintf_r+0x36>
 8005a14:	690b      	ldr	r3, [r1, #16]
 8005a16:	b973      	cbnz	r3, 8005a36 <_svfiprintf_r+0x36>
 8005a18:	2140      	movs	r1, #64	@ 0x40
 8005a1a:	f7ff fe4d 	bl	80056b8 <_malloc_r>
 8005a1e:	6028      	str	r0, [r5, #0]
 8005a20:	6128      	str	r0, [r5, #16]
 8005a22:	b930      	cbnz	r0, 8005a32 <_svfiprintf_r+0x32>
 8005a24:	230c      	movs	r3, #12
 8005a26:	603b      	str	r3, [r7, #0]
 8005a28:	f04f 30ff 	mov.w	r0, #4294967295
 8005a2c:	b01d      	add	sp, #116	@ 0x74
 8005a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a32:	2340      	movs	r3, #64	@ 0x40
 8005a34:	616b      	str	r3, [r5, #20]
 8005a36:	2300      	movs	r3, #0
 8005a38:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a3a:	2320      	movs	r3, #32
 8005a3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a40:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a44:	2330      	movs	r3, #48	@ 0x30
 8005a46:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005be4 <_svfiprintf_r+0x1e4>
 8005a4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a4e:	f04f 0901 	mov.w	r9, #1
 8005a52:	4623      	mov	r3, r4
 8005a54:	469a      	mov	sl, r3
 8005a56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a5a:	b10a      	cbz	r2, 8005a60 <_svfiprintf_r+0x60>
 8005a5c:	2a25      	cmp	r2, #37	@ 0x25
 8005a5e:	d1f9      	bne.n	8005a54 <_svfiprintf_r+0x54>
 8005a60:	ebba 0b04 	subs.w	fp, sl, r4
 8005a64:	d00b      	beq.n	8005a7e <_svfiprintf_r+0x7e>
 8005a66:	465b      	mov	r3, fp
 8005a68:	4622      	mov	r2, r4
 8005a6a:	4629      	mov	r1, r5
 8005a6c:	4638      	mov	r0, r7
 8005a6e:	f7ff ff6b 	bl	8005948 <__ssputs_r>
 8005a72:	3001      	adds	r0, #1
 8005a74:	f000 80a7 	beq.w	8005bc6 <_svfiprintf_r+0x1c6>
 8005a78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a7a:	445a      	add	r2, fp
 8005a7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a7e:	f89a 3000 	ldrb.w	r3, [sl]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 809f 	beq.w	8005bc6 <_svfiprintf_r+0x1c6>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a92:	f10a 0a01 	add.w	sl, sl, #1
 8005a96:	9304      	str	r3, [sp, #16]
 8005a98:	9307      	str	r3, [sp, #28]
 8005a9a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a9e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005aa0:	4654      	mov	r4, sl
 8005aa2:	2205      	movs	r2, #5
 8005aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aa8:	484e      	ldr	r0, [pc, #312]	@ (8005be4 <_svfiprintf_r+0x1e4>)
 8005aaa:	f7fa fbb1 	bl	8000210 <memchr>
 8005aae:	9a04      	ldr	r2, [sp, #16]
 8005ab0:	b9d8      	cbnz	r0, 8005aea <_svfiprintf_r+0xea>
 8005ab2:	06d0      	lsls	r0, r2, #27
 8005ab4:	bf44      	itt	mi
 8005ab6:	2320      	movmi	r3, #32
 8005ab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005abc:	0711      	lsls	r1, r2, #28
 8005abe:	bf44      	itt	mi
 8005ac0:	232b      	movmi	r3, #43	@ 0x2b
 8005ac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8005aca:	2b2a      	cmp	r3, #42	@ 0x2a
 8005acc:	d015      	beq.n	8005afa <_svfiprintf_r+0xfa>
 8005ace:	9a07      	ldr	r2, [sp, #28]
 8005ad0:	4654      	mov	r4, sl
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	f04f 0c0a 	mov.w	ip, #10
 8005ad8:	4621      	mov	r1, r4
 8005ada:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ade:	3b30      	subs	r3, #48	@ 0x30
 8005ae0:	2b09      	cmp	r3, #9
 8005ae2:	d94b      	bls.n	8005b7c <_svfiprintf_r+0x17c>
 8005ae4:	b1b0      	cbz	r0, 8005b14 <_svfiprintf_r+0x114>
 8005ae6:	9207      	str	r2, [sp, #28]
 8005ae8:	e014      	b.n	8005b14 <_svfiprintf_r+0x114>
 8005aea:	eba0 0308 	sub.w	r3, r0, r8
 8005aee:	fa09 f303 	lsl.w	r3, r9, r3
 8005af2:	4313      	orrs	r3, r2
 8005af4:	9304      	str	r3, [sp, #16]
 8005af6:	46a2      	mov	sl, r4
 8005af8:	e7d2      	b.n	8005aa0 <_svfiprintf_r+0xa0>
 8005afa:	9b03      	ldr	r3, [sp, #12]
 8005afc:	1d19      	adds	r1, r3, #4
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	9103      	str	r1, [sp, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	bfbb      	ittet	lt
 8005b06:	425b      	neglt	r3, r3
 8005b08:	f042 0202 	orrlt.w	r2, r2, #2
 8005b0c:	9307      	strge	r3, [sp, #28]
 8005b0e:	9307      	strlt	r3, [sp, #28]
 8005b10:	bfb8      	it	lt
 8005b12:	9204      	strlt	r2, [sp, #16]
 8005b14:	7823      	ldrb	r3, [r4, #0]
 8005b16:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b18:	d10a      	bne.n	8005b30 <_svfiprintf_r+0x130>
 8005b1a:	7863      	ldrb	r3, [r4, #1]
 8005b1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b1e:	d132      	bne.n	8005b86 <_svfiprintf_r+0x186>
 8005b20:	9b03      	ldr	r3, [sp, #12]
 8005b22:	1d1a      	adds	r2, r3, #4
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	9203      	str	r2, [sp, #12]
 8005b28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b2c:	3402      	adds	r4, #2
 8005b2e:	9305      	str	r3, [sp, #20]
 8005b30:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005bf4 <_svfiprintf_r+0x1f4>
 8005b34:	7821      	ldrb	r1, [r4, #0]
 8005b36:	2203      	movs	r2, #3
 8005b38:	4650      	mov	r0, sl
 8005b3a:	f7fa fb69 	bl	8000210 <memchr>
 8005b3e:	b138      	cbz	r0, 8005b50 <_svfiprintf_r+0x150>
 8005b40:	9b04      	ldr	r3, [sp, #16]
 8005b42:	eba0 000a 	sub.w	r0, r0, sl
 8005b46:	2240      	movs	r2, #64	@ 0x40
 8005b48:	4082      	lsls	r2, r0
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	3401      	adds	r4, #1
 8005b4e:	9304      	str	r3, [sp, #16]
 8005b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b54:	4824      	ldr	r0, [pc, #144]	@ (8005be8 <_svfiprintf_r+0x1e8>)
 8005b56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b5a:	2206      	movs	r2, #6
 8005b5c:	f7fa fb58 	bl	8000210 <memchr>
 8005b60:	2800      	cmp	r0, #0
 8005b62:	d036      	beq.n	8005bd2 <_svfiprintf_r+0x1d2>
 8005b64:	4b21      	ldr	r3, [pc, #132]	@ (8005bec <_svfiprintf_r+0x1ec>)
 8005b66:	bb1b      	cbnz	r3, 8005bb0 <_svfiprintf_r+0x1b0>
 8005b68:	9b03      	ldr	r3, [sp, #12]
 8005b6a:	3307      	adds	r3, #7
 8005b6c:	f023 0307 	bic.w	r3, r3, #7
 8005b70:	3308      	adds	r3, #8
 8005b72:	9303      	str	r3, [sp, #12]
 8005b74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b76:	4433      	add	r3, r6
 8005b78:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b7a:	e76a      	b.n	8005a52 <_svfiprintf_r+0x52>
 8005b7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b80:	460c      	mov	r4, r1
 8005b82:	2001      	movs	r0, #1
 8005b84:	e7a8      	b.n	8005ad8 <_svfiprintf_r+0xd8>
 8005b86:	2300      	movs	r3, #0
 8005b88:	3401      	adds	r4, #1
 8005b8a:	9305      	str	r3, [sp, #20]
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	f04f 0c0a 	mov.w	ip, #10
 8005b92:	4620      	mov	r0, r4
 8005b94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b98:	3a30      	subs	r2, #48	@ 0x30
 8005b9a:	2a09      	cmp	r2, #9
 8005b9c:	d903      	bls.n	8005ba6 <_svfiprintf_r+0x1a6>
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d0c6      	beq.n	8005b30 <_svfiprintf_r+0x130>
 8005ba2:	9105      	str	r1, [sp, #20]
 8005ba4:	e7c4      	b.n	8005b30 <_svfiprintf_r+0x130>
 8005ba6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005baa:	4604      	mov	r4, r0
 8005bac:	2301      	movs	r3, #1
 8005bae:	e7f0      	b.n	8005b92 <_svfiprintf_r+0x192>
 8005bb0:	ab03      	add	r3, sp, #12
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	462a      	mov	r2, r5
 8005bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8005bf0 <_svfiprintf_r+0x1f0>)
 8005bb8:	a904      	add	r1, sp, #16
 8005bba:	4638      	mov	r0, r7
 8005bbc:	f3af 8000 	nop.w
 8005bc0:	1c42      	adds	r2, r0, #1
 8005bc2:	4606      	mov	r6, r0
 8005bc4:	d1d6      	bne.n	8005b74 <_svfiprintf_r+0x174>
 8005bc6:	89ab      	ldrh	r3, [r5, #12]
 8005bc8:	065b      	lsls	r3, r3, #25
 8005bca:	f53f af2d 	bmi.w	8005a28 <_svfiprintf_r+0x28>
 8005bce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005bd0:	e72c      	b.n	8005a2c <_svfiprintf_r+0x2c>
 8005bd2:	ab03      	add	r3, sp, #12
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	462a      	mov	r2, r5
 8005bd8:	4b05      	ldr	r3, [pc, #20]	@ (8005bf0 <_svfiprintf_r+0x1f0>)
 8005bda:	a904      	add	r1, sp, #16
 8005bdc:	4638      	mov	r0, r7
 8005bde:	f000 f879 	bl	8005cd4 <_printf_i>
 8005be2:	e7ed      	b.n	8005bc0 <_svfiprintf_r+0x1c0>
 8005be4:	0800608c 	.word	0x0800608c
 8005be8:	08006096 	.word	0x08006096
 8005bec:	00000000 	.word	0x00000000
 8005bf0:	08005949 	.word	0x08005949
 8005bf4:	08006092 	.word	0x08006092

08005bf8 <_printf_common>:
 8005bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bfc:	4616      	mov	r6, r2
 8005bfe:	4698      	mov	r8, r3
 8005c00:	688a      	ldr	r2, [r1, #8]
 8005c02:	690b      	ldr	r3, [r1, #16]
 8005c04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	bfb8      	it	lt
 8005c0c:	4613      	movlt	r3, r2
 8005c0e:	6033      	str	r3, [r6, #0]
 8005c10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c14:	4607      	mov	r7, r0
 8005c16:	460c      	mov	r4, r1
 8005c18:	b10a      	cbz	r2, 8005c1e <_printf_common+0x26>
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	6033      	str	r3, [r6, #0]
 8005c1e:	6823      	ldr	r3, [r4, #0]
 8005c20:	0699      	lsls	r1, r3, #26
 8005c22:	bf42      	ittt	mi
 8005c24:	6833      	ldrmi	r3, [r6, #0]
 8005c26:	3302      	addmi	r3, #2
 8005c28:	6033      	strmi	r3, [r6, #0]
 8005c2a:	6825      	ldr	r5, [r4, #0]
 8005c2c:	f015 0506 	ands.w	r5, r5, #6
 8005c30:	d106      	bne.n	8005c40 <_printf_common+0x48>
 8005c32:	f104 0a19 	add.w	sl, r4, #25
 8005c36:	68e3      	ldr	r3, [r4, #12]
 8005c38:	6832      	ldr	r2, [r6, #0]
 8005c3a:	1a9b      	subs	r3, r3, r2
 8005c3c:	42ab      	cmp	r3, r5
 8005c3e:	dc26      	bgt.n	8005c8e <_printf_common+0x96>
 8005c40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c44:	6822      	ldr	r2, [r4, #0]
 8005c46:	3b00      	subs	r3, #0
 8005c48:	bf18      	it	ne
 8005c4a:	2301      	movne	r3, #1
 8005c4c:	0692      	lsls	r2, r2, #26
 8005c4e:	d42b      	bmi.n	8005ca8 <_printf_common+0xb0>
 8005c50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c54:	4641      	mov	r1, r8
 8005c56:	4638      	mov	r0, r7
 8005c58:	47c8      	blx	r9
 8005c5a:	3001      	adds	r0, #1
 8005c5c:	d01e      	beq.n	8005c9c <_printf_common+0xa4>
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	6922      	ldr	r2, [r4, #16]
 8005c62:	f003 0306 	and.w	r3, r3, #6
 8005c66:	2b04      	cmp	r3, #4
 8005c68:	bf02      	ittt	eq
 8005c6a:	68e5      	ldreq	r5, [r4, #12]
 8005c6c:	6833      	ldreq	r3, [r6, #0]
 8005c6e:	1aed      	subeq	r5, r5, r3
 8005c70:	68a3      	ldr	r3, [r4, #8]
 8005c72:	bf0c      	ite	eq
 8005c74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c78:	2500      	movne	r5, #0
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	bfc4      	itt	gt
 8005c7e:	1a9b      	subgt	r3, r3, r2
 8005c80:	18ed      	addgt	r5, r5, r3
 8005c82:	2600      	movs	r6, #0
 8005c84:	341a      	adds	r4, #26
 8005c86:	42b5      	cmp	r5, r6
 8005c88:	d11a      	bne.n	8005cc0 <_printf_common+0xc8>
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	e008      	b.n	8005ca0 <_printf_common+0xa8>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	4652      	mov	r2, sl
 8005c92:	4641      	mov	r1, r8
 8005c94:	4638      	mov	r0, r7
 8005c96:	47c8      	blx	r9
 8005c98:	3001      	adds	r0, #1
 8005c9a:	d103      	bne.n	8005ca4 <_printf_common+0xac>
 8005c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca4:	3501      	adds	r5, #1
 8005ca6:	e7c6      	b.n	8005c36 <_printf_common+0x3e>
 8005ca8:	18e1      	adds	r1, r4, r3
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	2030      	movs	r0, #48	@ 0x30
 8005cae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005cb2:	4422      	add	r2, r4
 8005cb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005cb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005cbc:	3302      	adds	r3, #2
 8005cbe:	e7c7      	b.n	8005c50 <_printf_common+0x58>
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	4622      	mov	r2, r4
 8005cc4:	4641      	mov	r1, r8
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	47c8      	blx	r9
 8005cca:	3001      	adds	r0, #1
 8005ccc:	d0e6      	beq.n	8005c9c <_printf_common+0xa4>
 8005cce:	3601      	adds	r6, #1
 8005cd0:	e7d9      	b.n	8005c86 <_printf_common+0x8e>
	...

08005cd4 <_printf_i>:
 8005cd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd8:	7e0f      	ldrb	r7, [r1, #24]
 8005cda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005cdc:	2f78      	cmp	r7, #120	@ 0x78
 8005cde:	4691      	mov	r9, r2
 8005ce0:	4680      	mov	r8, r0
 8005ce2:	460c      	mov	r4, r1
 8005ce4:	469a      	mov	sl, r3
 8005ce6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005cea:	d807      	bhi.n	8005cfc <_printf_i+0x28>
 8005cec:	2f62      	cmp	r7, #98	@ 0x62
 8005cee:	d80a      	bhi.n	8005d06 <_printf_i+0x32>
 8005cf0:	2f00      	cmp	r7, #0
 8005cf2:	f000 80d2 	beq.w	8005e9a <_printf_i+0x1c6>
 8005cf6:	2f58      	cmp	r7, #88	@ 0x58
 8005cf8:	f000 80b9 	beq.w	8005e6e <_printf_i+0x19a>
 8005cfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d04:	e03a      	b.n	8005d7c <_printf_i+0xa8>
 8005d06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d0a:	2b15      	cmp	r3, #21
 8005d0c:	d8f6      	bhi.n	8005cfc <_printf_i+0x28>
 8005d0e:	a101      	add	r1, pc, #4	@ (adr r1, 8005d14 <_printf_i+0x40>)
 8005d10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d14:	08005d6d 	.word	0x08005d6d
 8005d18:	08005d81 	.word	0x08005d81
 8005d1c:	08005cfd 	.word	0x08005cfd
 8005d20:	08005cfd 	.word	0x08005cfd
 8005d24:	08005cfd 	.word	0x08005cfd
 8005d28:	08005cfd 	.word	0x08005cfd
 8005d2c:	08005d81 	.word	0x08005d81
 8005d30:	08005cfd 	.word	0x08005cfd
 8005d34:	08005cfd 	.word	0x08005cfd
 8005d38:	08005cfd 	.word	0x08005cfd
 8005d3c:	08005cfd 	.word	0x08005cfd
 8005d40:	08005e81 	.word	0x08005e81
 8005d44:	08005dab 	.word	0x08005dab
 8005d48:	08005e3b 	.word	0x08005e3b
 8005d4c:	08005cfd 	.word	0x08005cfd
 8005d50:	08005cfd 	.word	0x08005cfd
 8005d54:	08005ea3 	.word	0x08005ea3
 8005d58:	08005cfd 	.word	0x08005cfd
 8005d5c:	08005dab 	.word	0x08005dab
 8005d60:	08005cfd 	.word	0x08005cfd
 8005d64:	08005cfd 	.word	0x08005cfd
 8005d68:	08005e43 	.word	0x08005e43
 8005d6c:	6833      	ldr	r3, [r6, #0]
 8005d6e:	1d1a      	adds	r2, r3, #4
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6032      	str	r2, [r6, #0]
 8005d74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e09d      	b.n	8005ebc <_printf_i+0x1e8>
 8005d80:	6833      	ldr	r3, [r6, #0]
 8005d82:	6820      	ldr	r0, [r4, #0]
 8005d84:	1d19      	adds	r1, r3, #4
 8005d86:	6031      	str	r1, [r6, #0]
 8005d88:	0606      	lsls	r6, r0, #24
 8005d8a:	d501      	bpl.n	8005d90 <_printf_i+0xbc>
 8005d8c:	681d      	ldr	r5, [r3, #0]
 8005d8e:	e003      	b.n	8005d98 <_printf_i+0xc4>
 8005d90:	0645      	lsls	r5, r0, #25
 8005d92:	d5fb      	bpl.n	8005d8c <_printf_i+0xb8>
 8005d94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d98:	2d00      	cmp	r5, #0
 8005d9a:	da03      	bge.n	8005da4 <_printf_i+0xd0>
 8005d9c:	232d      	movs	r3, #45	@ 0x2d
 8005d9e:	426d      	negs	r5, r5
 8005da0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005da4:	4859      	ldr	r0, [pc, #356]	@ (8005f0c <_printf_i+0x238>)
 8005da6:	230a      	movs	r3, #10
 8005da8:	e011      	b.n	8005dce <_printf_i+0xfa>
 8005daa:	6821      	ldr	r1, [r4, #0]
 8005dac:	6833      	ldr	r3, [r6, #0]
 8005dae:	0608      	lsls	r0, r1, #24
 8005db0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005db4:	d402      	bmi.n	8005dbc <_printf_i+0xe8>
 8005db6:	0649      	lsls	r1, r1, #25
 8005db8:	bf48      	it	mi
 8005dba:	b2ad      	uxthmi	r5, r5
 8005dbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8005dbe:	4853      	ldr	r0, [pc, #332]	@ (8005f0c <_printf_i+0x238>)
 8005dc0:	6033      	str	r3, [r6, #0]
 8005dc2:	bf14      	ite	ne
 8005dc4:	230a      	movne	r3, #10
 8005dc6:	2308      	moveq	r3, #8
 8005dc8:	2100      	movs	r1, #0
 8005dca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005dce:	6866      	ldr	r6, [r4, #4]
 8005dd0:	60a6      	str	r6, [r4, #8]
 8005dd2:	2e00      	cmp	r6, #0
 8005dd4:	bfa2      	ittt	ge
 8005dd6:	6821      	ldrge	r1, [r4, #0]
 8005dd8:	f021 0104 	bicge.w	r1, r1, #4
 8005ddc:	6021      	strge	r1, [r4, #0]
 8005dde:	b90d      	cbnz	r5, 8005de4 <_printf_i+0x110>
 8005de0:	2e00      	cmp	r6, #0
 8005de2:	d04b      	beq.n	8005e7c <_printf_i+0x1a8>
 8005de4:	4616      	mov	r6, r2
 8005de6:	fbb5 f1f3 	udiv	r1, r5, r3
 8005dea:	fb03 5711 	mls	r7, r3, r1, r5
 8005dee:	5dc7      	ldrb	r7, [r0, r7]
 8005df0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005df4:	462f      	mov	r7, r5
 8005df6:	42bb      	cmp	r3, r7
 8005df8:	460d      	mov	r5, r1
 8005dfa:	d9f4      	bls.n	8005de6 <_printf_i+0x112>
 8005dfc:	2b08      	cmp	r3, #8
 8005dfe:	d10b      	bne.n	8005e18 <_printf_i+0x144>
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	07df      	lsls	r7, r3, #31
 8005e04:	d508      	bpl.n	8005e18 <_printf_i+0x144>
 8005e06:	6923      	ldr	r3, [r4, #16]
 8005e08:	6861      	ldr	r1, [r4, #4]
 8005e0a:	4299      	cmp	r1, r3
 8005e0c:	bfde      	ittt	le
 8005e0e:	2330      	movle	r3, #48	@ 0x30
 8005e10:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e14:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e18:	1b92      	subs	r2, r2, r6
 8005e1a:	6122      	str	r2, [r4, #16]
 8005e1c:	f8cd a000 	str.w	sl, [sp]
 8005e20:	464b      	mov	r3, r9
 8005e22:	aa03      	add	r2, sp, #12
 8005e24:	4621      	mov	r1, r4
 8005e26:	4640      	mov	r0, r8
 8005e28:	f7ff fee6 	bl	8005bf8 <_printf_common>
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	d14a      	bne.n	8005ec6 <_printf_i+0x1f2>
 8005e30:	f04f 30ff 	mov.w	r0, #4294967295
 8005e34:	b004      	add	sp, #16
 8005e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e3a:	6823      	ldr	r3, [r4, #0]
 8005e3c:	f043 0320 	orr.w	r3, r3, #32
 8005e40:	6023      	str	r3, [r4, #0]
 8005e42:	4833      	ldr	r0, [pc, #204]	@ (8005f10 <_printf_i+0x23c>)
 8005e44:	2778      	movs	r7, #120	@ 0x78
 8005e46:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	6831      	ldr	r1, [r6, #0]
 8005e4e:	061f      	lsls	r7, r3, #24
 8005e50:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e54:	d402      	bmi.n	8005e5c <_printf_i+0x188>
 8005e56:	065f      	lsls	r7, r3, #25
 8005e58:	bf48      	it	mi
 8005e5a:	b2ad      	uxthmi	r5, r5
 8005e5c:	6031      	str	r1, [r6, #0]
 8005e5e:	07d9      	lsls	r1, r3, #31
 8005e60:	bf44      	itt	mi
 8005e62:	f043 0320 	orrmi.w	r3, r3, #32
 8005e66:	6023      	strmi	r3, [r4, #0]
 8005e68:	b11d      	cbz	r5, 8005e72 <_printf_i+0x19e>
 8005e6a:	2310      	movs	r3, #16
 8005e6c:	e7ac      	b.n	8005dc8 <_printf_i+0xf4>
 8005e6e:	4827      	ldr	r0, [pc, #156]	@ (8005f0c <_printf_i+0x238>)
 8005e70:	e7e9      	b.n	8005e46 <_printf_i+0x172>
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	f023 0320 	bic.w	r3, r3, #32
 8005e78:	6023      	str	r3, [r4, #0]
 8005e7a:	e7f6      	b.n	8005e6a <_printf_i+0x196>
 8005e7c:	4616      	mov	r6, r2
 8005e7e:	e7bd      	b.n	8005dfc <_printf_i+0x128>
 8005e80:	6833      	ldr	r3, [r6, #0]
 8005e82:	6825      	ldr	r5, [r4, #0]
 8005e84:	6961      	ldr	r1, [r4, #20]
 8005e86:	1d18      	adds	r0, r3, #4
 8005e88:	6030      	str	r0, [r6, #0]
 8005e8a:	062e      	lsls	r6, r5, #24
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	d501      	bpl.n	8005e94 <_printf_i+0x1c0>
 8005e90:	6019      	str	r1, [r3, #0]
 8005e92:	e002      	b.n	8005e9a <_printf_i+0x1c6>
 8005e94:	0668      	lsls	r0, r5, #25
 8005e96:	d5fb      	bpl.n	8005e90 <_printf_i+0x1bc>
 8005e98:	8019      	strh	r1, [r3, #0]
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	6123      	str	r3, [r4, #16]
 8005e9e:	4616      	mov	r6, r2
 8005ea0:	e7bc      	b.n	8005e1c <_printf_i+0x148>
 8005ea2:	6833      	ldr	r3, [r6, #0]
 8005ea4:	1d1a      	adds	r2, r3, #4
 8005ea6:	6032      	str	r2, [r6, #0]
 8005ea8:	681e      	ldr	r6, [r3, #0]
 8005eaa:	6862      	ldr	r2, [r4, #4]
 8005eac:	2100      	movs	r1, #0
 8005eae:	4630      	mov	r0, r6
 8005eb0:	f7fa f9ae 	bl	8000210 <memchr>
 8005eb4:	b108      	cbz	r0, 8005eba <_printf_i+0x1e6>
 8005eb6:	1b80      	subs	r0, r0, r6
 8005eb8:	6060      	str	r0, [r4, #4]
 8005eba:	6863      	ldr	r3, [r4, #4]
 8005ebc:	6123      	str	r3, [r4, #16]
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ec4:	e7aa      	b.n	8005e1c <_printf_i+0x148>
 8005ec6:	6923      	ldr	r3, [r4, #16]
 8005ec8:	4632      	mov	r2, r6
 8005eca:	4649      	mov	r1, r9
 8005ecc:	4640      	mov	r0, r8
 8005ece:	47d0      	blx	sl
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	d0ad      	beq.n	8005e30 <_printf_i+0x15c>
 8005ed4:	6823      	ldr	r3, [r4, #0]
 8005ed6:	079b      	lsls	r3, r3, #30
 8005ed8:	d413      	bmi.n	8005f02 <_printf_i+0x22e>
 8005eda:	68e0      	ldr	r0, [r4, #12]
 8005edc:	9b03      	ldr	r3, [sp, #12]
 8005ede:	4298      	cmp	r0, r3
 8005ee0:	bfb8      	it	lt
 8005ee2:	4618      	movlt	r0, r3
 8005ee4:	e7a6      	b.n	8005e34 <_printf_i+0x160>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	4632      	mov	r2, r6
 8005eea:	4649      	mov	r1, r9
 8005eec:	4640      	mov	r0, r8
 8005eee:	47d0      	blx	sl
 8005ef0:	3001      	adds	r0, #1
 8005ef2:	d09d      	beq.n	8005e30 <_printf_i+0x15c>
 8005ef4:	3501      	adds	r5, #1
 8005ef6:	68e3      	ldr	r3, [r4, #12]
 8005ef8:	9903      	ldr	r1, [sp, #12]
 8005efa:	1a5b      	subs	r3, r3, r1
 8005efc:	42ab      	cmp	r3, r5
 8005efe:	dcf2      	bgt.n	8005ee6 <_printf_i+0x212>
 8005f00:	e7eb      	b.n	8005eda <_printf_i+0x206>
 8005f02:	2500      	movs	r5, #0
 8005f04:	f104 0619 	add.w	r6, r4, #25
 8005f08:	e7f5      	b.n	8005ef6 <_printf_i+0x222>
 8005f0a:	bf00      	nop
 8005f0c:	0800609d 	.word	0x0800609d
 8005f10:	080060ae 	.word	0x080060ae

08005f14 <memmove>:
 8005f14:	4288      	cmp	r0, r1
 8005f16:	b510      	push	{r4, lr}
 8005f18:	eb01 0402 	add.w	r4, r1, r2
 8005f1c:	d902      	bls.n	8005f24 <memmove+0x10>
 8005f1e:	4284      	cmp	r4, r0
 8005f20:	4623      	mov	r3, r4
 8005f22:	d807      	bhi.n	8005f34 <memmove+0x20>
 8005f24:	1e43      	subs	r3, r0, #1
 8005f26:	42a1      	cmp	r1, r4
 8005f28:	d008      	beq.n	8005f3c <memmove+0x28>
 8005f2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f32:	e7f8      	b.n	8005f26 <memmove+0x12>
 8005f34:	4402      	add	r2, r0
 8005f36:	4601      	mov	r1, r0
 8005f38:	428a      	cmp	r2, r1
 8005f3a:	d100      	bne.n	8005f3e <memmove+0x2a>
 8005f3c:	bd10      	pop	{r4, pc}
 8005f3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f46:	e7f7      	b.n	8005f38 <memmove+0x24>

08005f48 <_realloc_r>:
 8005f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f4c:	4680      	mov	r8, r0
 8005f4e:	4615      	mov	r5, r2
 8005f50:	460c      	mov	r4, r1
 8005f52:	b921      	cbnz	r1, 8005f5e <_realloc_r+0x16>
 8005f54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f58:	4611      	mov	r1, r2
 8005f5a:	f7ff bbad 	b.w	80056b8 <_malloc_r>
 8005f5e:	b92a      	cbnz	r2, 8005f6c <_realloc_r+0x24>
 8005f60:	f7ff fca8 	bl	80058b4 <_free_r>
 8005f64:	2400      	movs	r4, #0
 8005f66:	4620      	mov	r0, r4
 8005f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f6c:	f000 f81a 	bl	8005fa4 <_malloc_usable_size_r>
 8005f70:	4285      	cmp	r5, r0
 8005f72:	4606      	mov	r6, r0
 8005f74:	d802      	bhi.n	8005f7c <_realloc_r+0x34>
 8005f76:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005f7a:	d8f4      	bhi.n	8005f66 <_realloc_r+0x1e>
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	4640      	mov	r0, r8
 8005f80:	f7ff fb9a 	bl	80056b8 <_malloc_r>
 8005f84:	4607      	mov	r7, r0
 8005f86:	2800      	cmp	r0, #0
 8005f88:	d0ec      	beq.n	8005f64 <_realloc_r+0x1c>
 8005f8a:	42b5      	cmp	r5, r6
 8005f8c:	462a      	mov	r2, r5
 8005f8e:	4621      	mov	r1, r4
 8005f90:	bf28      	it	cs
 8005f92:	4632      	movcs	r2, r6
 8005f94:	f7ff fc80 	bl	8005898 <memcpy>
 8005f98:	4621      	mov	r1, r4
 8005f9a:	4640      	mov	r0, r8
 8005f9c:	f7ff fc8a 	bl	80058b4 <_free_r>
 8005fa0:	463c      	mov	r4, r7
 8005fa2:	e7e0      	b.n	8005f66 <_realloc_r+0x1e>

08005fa4 <_malloc_usable_size_r>:
 8005fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fa8:	1f18      	subs	r0, r3, #4
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	bfbc      	itt	lt
 8005fae:	580b      	ldrlt	r3, [r1, r0]
 8005fb0:	18c0      	addlt	r0, r0, r3
 8005fb2:	4770      	bx	lr

08005fb4 <_init>:
 8005fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb6:	bf00      	nop
 8005fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fba:	bc08      	pop	{r3}
 8005fbc:	469e      	mov	lr, r3
 8005fbe:	4770      	bx	lr

08005fc0 <_fini>:
 8005fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc2:	bf00      	nop
 8005fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fc6:	bc08      	pop	{r3}
 8005fc8:	469e      	mov	lr, r3
 8005fca:	4770      	bx	lr
