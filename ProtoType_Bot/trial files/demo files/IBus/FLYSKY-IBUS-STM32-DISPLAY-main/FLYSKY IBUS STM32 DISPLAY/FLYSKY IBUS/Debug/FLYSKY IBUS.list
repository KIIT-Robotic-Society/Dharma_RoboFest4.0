
FLYSKY IBUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cfc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000180c  08003e08  08003e08  00013e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005614  08005614  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08005614  08005614  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005614  08005614  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005614  08005614  00015614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005618  08005618  00015618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800561c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  2000005c  08005678  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08005678  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a9a4  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e18  00000000  00000000  0002aa6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000978  00000000  00000000  0002c888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000741  00000000  00000000  0002d200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017ce2  00000000  00000000  0002d941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c188  00000000  00000000  00045623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084b7f  00000000  00000000  000517ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b0c  00000000  00000000  000d632c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000d8e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003df0 	.word	0x08003df0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003df0 	.word	0x08003df0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <J3_IBUS_new>:
#include "J3_IBUS_FLYSKY.h"


//typedef struct TRxIBus TRxIBus;

TRxIBus* J3_IBUS_new(UART_HandleTypeDef* _uart, uint8_t _qtdCanal){
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	460b      	mov	r3, r1
 8000166:	70fb      	strb	r3, [r7, #3]
  TRxIBus* auxRxIBus;

  auxRxIBus = malloc(sizeof(TRxIBus));
 8000168:	2018      	movs	r0, #24
 800016a:	f003 f987 	bl	800347c <malloc>
 800016e:	4603      	mov	r3, r0
 8000170:	60fb      	str	r3, [r7, #12]
  auxRxIBus->uart = _uart;
 8000172:	68fb      	ldr	r3, [r7, #12]
 8000174:	687a      	ldr	r2, [r7, #4]
 8000176:	601a      	str	r2, [r3, #0]
  auxRxIBus->qdtCanal = _qtdCanal;
 8000178:	68fb      	ldr	r3, [r7, #12]
 800017a:	78fa      	ldrb	r2, [r7, #3]
 800017c:	711a      	strb	r2, [r3, #4]

  auxRxIBus->buffer_size = ((auxRxIBus->qdtCanal * 2) + 4) * 2; /* Armazena 2 buffers para garantir ler o pacote inteiro */
 800017e:	68fb      	ldr	r3, [r7, #12]
 8000180:	791b      	ldrb	r3, [r3, #4]
 8000182:	3302      	adds	r3, #2
 8000184:	b2db      	uxtb	r3, r3
 8000186:	009b      	lsls	r3, r3, #2
 8000188:	b2da      	uxtb	r2, r3
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	731a      	strb	r2, [r3, #12]
  /* Esse + 4 ï¿½  1 byte de inicio, 2 bytes de checksum, 1 byte de finalizador  */

  auxRxIBus->buffer = malloc(auxRxIBus->buffer_size * sizeof(uint8_t));
 800018e:	68fb      	ldr	r3, [r7, #12]
 8000190:	7b1b      	ldrb	r3, [r3, #12]
 8000192:	4618      	mov	r0, r3
 8000194:	f003 f972 	bl	800347c <malloc>
 8000198:	4603      	mov	r3, r0
 800019a:	461a      	mov	r2, r3
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	609a      	str	r2, [r3, #8]
  memset(auxRxIBus->buffer, 0x00, auxRxIBus->buffer_size * sizeof(uint8_t));
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	6898      	ldr	r0, [r3, #8]
 80001a4:	68fb      	ldr	r3, [r7, #12]
 80001a6:	7b1b      	ldrb	r3, [r3, #12]
 80001a8:	461a      	mov	r2, r3
 80001aa:	2100      	movs	r1, #0
 80001ac:	f003 fa3a 	bl	8003624 <memset>

  auxRxIBus->canais = malloc(auxRxIBus->qdtCanal * sizeof(uint16_t));
 80001b0:	68fb      	ldr	r3, [r7, #12]
 80001b2:	791b      	ldrb	r3, [r3, #4]
 80001b4:	005b      	lsls	r3, r3, #1
 80001b6:	4618      	mov	r0, r3
 80001b8:	f003 f960 	bl	800347c <malloc>
 80001bc:	4603      	mov	r3, r0
 80001be:	461a      	mov	r2, r3
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	611a      	str	r2, [r3, #16]
  memset(auxRxIBus->canais, 0x00, auxRxIBus->qdtCanal * sizeof(uint16_t));
 80001c4:	68fb      	ldr	r3, [r7, #12]
 80001c6:	6918      	ldr	r0, [r3, #16]
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	791b      	ldrb	r3, [r3, #4]
 80001cc:	005b      	lsls	r3, r3, #1
 80001ce:	461a      	mov	r2, r3
 80001d0:	2100      	movs	r1, #0
 80001d2:	f003 fa27 	bl	8003624 <memset>

  /* Armazena os valores enquanto processa */
  auxRxIBus->canais_tmp = malloc(auxRxIBus->qdtCanal * sizeof(uint16_t));
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	791b      	ldrb	r3, [r3, #4]
 80001da:	005b      	lsls	r3, r3, #1
 80001dc:	4618      	mov	r0, r3
 80001de:	f003 f94d 	bl	800347c <malloc>
 80001e2:	4603      	mov	r3, r0
 80001e4:	461a      	mov	r2, r3
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	615a      	str	r2, [r3, #20]
  memset(auxRxIBus->canais_tmp, 0x00, auxRxIBus->qdtCanal * sizeof(uint16_t));
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	6958      	ldr	r0, [r3, #20]
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	791b      	ldrb	r3, [r3, #4]
 80001f2:	005b      	lsls	r3, r3, #1
 80001f4:	461a      	mov	r2, r3
 80001f6:	2100      	movs	r1, #0
 80001f8:	f003 fa14 	bl	8003624 <memset>


  return auxRxIBus;
 80001fc:	68fb      	ldr	r3, [r7, #12]
}
 80001fe:	4618      	mov	r0, r3
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}

08000206 <J3_IBUS_ProcessBuffer>:

void J3_IBUS_ProcessBuffer(TRxIBus* _RxIBus){
 8000206:	b480      	push	{r7}
 8000208:	b087      	sub	sp, #28
 800020a:	af00      	add	r7, sp, #0
 800020c:	6078      	str	r0, [r7, #4]
 * 1 byte finalizado 0x20
 */

  uint8_t auxI;
  uint8_t offset_buffer;
  uint16_t auxChkSum = 0xffff;
 800020e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000212:	82bb      	strh	r3, [r7, #20]
  uint16_t chkSum = 0;
 8000214:	2300      	movs	r3, #0
 8000216:	81fb      	strh	r3, [r7, #14]

  for(uint8_t i=0; i<32; i++){
 8000218:	2300      	movs	r3, #0
 800021a:	74fb      	strb	r3, [r7, #19]
 800021c:	e00c      	b.n	8000238 <J3_IBUS_ProcessBuffer+0x32>
    if (_RxIBus->buffer[i] == 0x20){
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	689a      	ldr	r2, [r3, #8]
 8000222:	7cfb      	ldrb	r3, [r7, #19]
 8000224:	4413      	add	r3, r2
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	2b20      	cmp	r3, #32
 800022a:	d102      	bne.n	8000232 <J3_IBUS_ProcessBuffer+0x2c>
      offset_buffer = i;
 800022c:	7cfb      	ldrb	r3, [r7, #19]
 800022e:	75fb      	strb	r3, [r7, #23]
      break;
 8000230:	e005      	b.n	800023e <J3_IBUS_ProcessBuffer+0x38>
  for(uint8_t i=0; i<32; i++){
 8000232:	7cfb      	ldrb	r3, [r7, #19]
 8000234:	3301      	adds	r3, #1
 8000236:	74fb      	strb	r3, [r7, #19]
 8000238:	7cfb      	ldrb	r3, [r7, #19]
 800023a:	2b1f      	cmp	r3, #31
 800023c:	d9ef      	bls.n	800021e <J3_IBUS_ProcessBuffer+0x18>
    }
  }

  /* Subtrai logo os bytes de cabecalho e finalizacao */
  auxChkSum -= _RxIBus->buffer[offset_buffer + 1]; /* subtrair todos os bytes do pacote de 0xffff */
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	689a      	ldr	r2, [r3, #8]
 8000242:	7dfb      	ldrb	r3, [r7, #23]
 8000244:	3301      	adds	r3, #1
 8000246:	4413      	add	r3, r2
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	b29b      	uxth	r3, r3
 800024c:	8aba      	ldrh	r2, [r7, #20]
 800024e:	1ad3      	subs	r3, r2, r3
 8000250:	82bb      	strh	r3, [r7, #20]
  auxChkSum -= 0x20;
 8000252:	8abb      	ldrh	r3, [r7, #20]
 8000254:	3b20      	subs	r3, #32
 8000256:	82bb      	strh	r3, [r7, #20]
  /*------------------------- */

  for(uint8_t i=0; i<_RxIBus->qdtCanal; i++){
 8000258:	2300      	movs	r3, #0
 800025a:	74bb      	strb	r3, [r7, #18]
 800025c:	e034      	b.n	80002c8 <J3_IBUS_ProcessBuffer+0xc2>
    auxI = (i*2 + 2 + offset_buffer);
 800025e:	7cbb      	ldrb	r3, [r7, #18]
 8000260:	3301      	adds	r3, #1
 8000262:	b2db      	uxtb	r3, r3
 8000264:	005b      	lsls	r3, r3, #1
 8000266:	b2da      	uxtb	r2, r3
 8000268:	7dfb      	ldrb	r3, [r7, #23]
 800026a:	4413      	add	r3, r2
 800026c:	737b      	strb	r3, [r7, #13]
    _RxIBus->canais_tmp[i] = (_RxIBus->buffer[auxI + 1] << 8) | _RxIBus->buffer[auxI];
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	689a      	ldr	r2, [r3, #8]
 8000272:	7b7b      	ldrb	r3, [r7, #13]
 8000274:	3301      	adds	r3, #1
 8000276:	4413      	add	r3, r2
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	021b      	lsls	r3, r3, #8
 800027c:	b21a      	sxth	r2, r3
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	6899      	ldr	r1, [r3, #8]
 8000282:	7b7b      	ldrb	r3, [r7, #13]
 8000284:	440b      	add	r3, r1
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	b21b      	sxth	r3, r3
 800028a:	4313      	orrs	r3, r2
 800028c:	b219      	sxth	r1, r3
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	695a      	ldr	r2, [r3, #20]
 8000292:	7cbb      	ldrb	r3, [r7, #18]
 8000294:	005b      	lsls	r3, r3, #1
 8000296:	4413      	add	r3, r2
 8000298:	b28a      	uxth	r2, r1
 800029a:	801a      	strh	r2, [r3, #0]
    auxChkSum -= _RxIBus->buffer[auxI];
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	689a      	ldr	r2, [r3, #8]
 80002a0:	7b7b      	ldrb	r3, [r7, #13]
 80002a2:	4413      	add	r3, r2
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	b29b      	uxth	r3, r3
 80002a8:	8aba      	ldrh	r2, [r7, #20]
 80002aa:	1ad3      	subs	r3, r2, r3
 80002ac:	82bb      	strh	r3, [r7, #20]
    auxChkSum -= _RxIBus->buffer[auxI + 1];
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	689a      	ldr	r2, [r3, #8]
 80002b2:	7b7b      	ldrb	r3, [r7, #13]
 80002b4:	3301      	adds	r3, #1
 80002b6:	4413      	add	r3, r2
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	b29b      	uxth	r3, r3
 80002bc:	8aba      	ldrh	r2, [r7, #20]
 80002be:	1ad3      	subs	r3, r2, r3
 80002c0:	82bb      	strh	r3, [r7, #20]
  for(uint8_t i=0; i<_RxIBus->qdtCanal; i++){
 80002c2:	7cbb      	ldrb	r3, [r7, #18]
 80002c4:	3301      	adds	r3, #1
 80002c6:	74bb      	strb	r3, [r7, #18]
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	791b      	ldrb	r3, [r3, #4]
 80002cc:	7cba      	ldrb	r2, [r7, #18]
 80002ce:	429a      	cmp	r2, r3
 80002d0:	d3c5      	bcc.n	800025e <J3_IBUS_ProcessBuffer+0x58>
  }

  /* Os bytes final do ChkSum */

  auxI = ((_RxIBus->qdtCanal * 2) + 2 + offset_buffer);
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	791b      	ldrb	r3, [r3, #4]
 80002d6:	3301      	adds	r3, #1
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	005b      	lsls	r3, r3, #1
 80002dc:	b2da      	uxtb	r2, r3
 80002de:	7dfb      	ldrb	r3, [r7, #23]
 80002e0:	4413      	add	r3, r2
 80002e2:	737b      	strb	r3, [r7, #13]
  chkSum = (_RxIBus->buffer[auxI + 1] << 8) | _RxIBus->buffer[auxI];
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	689a      	ldr	r2, [r3, #8]
 80002e8:	7b7b      	ldrb	r3, [r7, #13]
 80002ea:	3301      	adds	r3, #1
 80002ec:	4413      	add	r3, r2
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	021b      	lsls	r3, r3, #8
 80002f2:	b21a      	sxth	r2, r3
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	6899      	ldr	r1, [r3, #8]
 80002f8:	7b7b      	ldrb	r3, [r7, #13]
 80002fa:	440b      	add	r3, r1
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	b21b      	sxth	r3, r3
 8000300:	4313      	orrs	r3, r2
 8000302:	b21b      	sxth	r3, r3
 8000304:	81fb      	strh	r3, [r7, #14]

  /* Verifcar se o chksum bateu */
  if(chkSum == auxChkSum)
 8000306:	89fa      	ldrh	r2, [r7, #14]
 8000308:	8abb      	ldrh	r3, [r7, #20]
 800030a:	429a      	cmp	r2, r3
 800030c:	d116      	bne.n	800033c <J3_IBUS_ProcessBuffer+0x136>
  {
    for(uint8_t i=0; i<_RxIBus->qdtCanal; i++)
 800030e:	2300      	movs	r3, #0
 8000310:	747b      	strb	r3, [r7, #17]
 8000312:	e00e      	b.n	8000332 <J3_IBUS_ProcessBuffer+0x12c>
    {
	  _RxIBus->canais[i] = _RxIBus->canais_tmp[i];
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	695a      	ldr	r2, [r3, #20]
 8000318:	7c7b      	ldrb	r3, [r7, #17]
 800031a:	005b      	lsls	r3, r3, #1
 800031c:	441a      	add	r2, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	6919      	ldr	r1, [r3, #16]
 8000322:	7c7b      	ldrb	r3, [r7, #17]
 8000324:	005b      	lsls	r3, r3, #1
 8000326:	440b      	add	r3, r1
 8000328:	8812      	ldrh	r2, [r2, #0]
 800032a:	801a      	strh	r2, [r3, #0]
    for(uint8_t i=0; i<_RxIBus->qdtCanal; i++)
 800032c:	7c7b      	ldrb	r3, [r7, #17]
 800032e:	3301      	adds	r3, #1
 8000330:	747b      	strb	r3, [r7, #17]
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	791b      	ldrb	r3, [r3, #4]
 8000336:	7c7a      	ldrb	r2, [r7, #17]
 8000338:	429a      	cmp	r2, r3
 800033a:	d3eb      	bcc.n	8000314 <J3_IBUS_ProcessBuffer+0x10e>
	}
  }
}
 800033c:	bf00      	nop
 800033e:	371c      	adds	r7, #28
 8000340:	46bd      	mov	sp, r7
 8000342:	bc80      	pop	{r7}
 8000344:	4770      	bx	lr

08000346 <J3_IBUS_GetCh>:

uint16_t J3_IBUS_GetCh(TRxIBus* _RxIBus, uint8_t _canal){
 8000346:	b480      	push	{r7}
 8000348:	b083      	sub	sp, #12
 800034a:	af00      	add	r7, sp, #0
 800034c:	6078      	str	r0, [r7, #4]
 800034e:	460b      	mov	r3, r1
 8000350:	70fb      	strb	r3, [r7, #3]
  if (_canal == 0)
 8000352:	78fb      	ldrb	r3, [r7, #3]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d101      	bne.n	800035c <J3_IBUS_GetCh+0x16>
    return 0;
 8000358:	2300      	movs	r3, #0
 800035a:	e00f      	b.n	800037c <J3_IBUS_GetCh+0x36>
  if (_canal > _RxIBus->qdtCanal)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	791b      	ldrb	r3, [r3, #4]
 8000360:	78fa      	ldrb	r2, [r7, #3]
 8000362:	429a      	cmp	r2, r3
 8000364:	d901      	bls.n	800036a <J3_IBUS_GetCh+0x24>
    return 0;
 8000366:	2300      	movs	r3, #0
 8000368:	e008      	b.n	800037c <J3_IBUS_GetCh+0x36>

  return _RxIBus->canais[_canal-1];
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	691a      	ldr	r2, [r3, #16]
 800036e:	78fb      	ldrb	r3, [r7, #3]
 8000370:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000374:	3b01      	subs	r3, #1
 8000376:	005b      	lsls	r3, r3, #1
 8000378:	4413      	add	r3, r2
 800037a:	881b      	ldrh	r3, [r3, #0]
}
 800037c:	4618      	mov	r0, r3
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	bc80      	pop	{r7}
 8000384:	4770      	bx	lr
	...

08000388 <ILI9341_Select>:
#include "stm32f1xx_hal.h"
#include "ili9341.h"
#include "string.h"


static void ILI9341_Select() {
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000392:	4802      	ldr	r0, [pc, #8]	; (800039c <ILI9341_Select+0x14>)
 8000394:	f001 fda2 	bl	8001edc <HAL_GPIO_WritePin>
}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}
 800039c:	40011000 	.word	0x40011000

080003a0 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 80003a4:	2201      	movs	r2, #1
 80003a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003aa:	4802      	ldr	r0, [pc, #8]	; (80003b4 <ILI9341_Unselect+0x14>)
 80003ac:	f001 fd96 	bl	8001edc <HAL_GPIO_WritePin>
}
 80003b0:	bf00      	nop
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40011000 	.word	0x40011000

080003b8 <ILI9341_Reset>:

static void ILI9341_Reset() {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003c2:	4807      	ldr	r0, [pc, #28]	; (80003e0 <ILI9341_Reset+0x28>)
 80003c4:	f001 fd8a 	bl	8001edc <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80003c8:	2005      	movs	r0, #5
 80003ca:	f001 f8e3 	bl	8001594 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 80003ce:	2201      	movs	r2, #1
 80003d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003d4:	4802      	ldr	r0, [pc, #8]	; (80003e0 <ILI9341_Reset+0x28>)
 80003d6:	f001 fd81 	bl	8001edc <HAL_GPIO_WritePin>
}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40011000 	.word	0x40011000

080003e4 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 80003ee:	2200      	movs	r2, #0
 80003f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003f4:	4806      	ldr	r0, [pc, #24]	; (8000410 <ILI9341_WriteCommand+0x2c>)
 80003f6:	f001 fd71 	bl	8001edc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80003fa:	1df9      	adds	r1, r7, #7
 80003fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000400:	2201      	movs	r2, #1
 8000402:	4804      	ldr	r0, [pc, #16]	; (8000414 <ILI9341_WriteCommand+0x30>)
 8000404:	f002 fa16 	bl	8002834 <HAL_SPI_Transmit>
}
 8000408:	bf00      	nop
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40011000 	.word	0x40011000
 8000414:	200000f4 	.word	0x200000f4

08000418 <DelayUs>:


__STATIC_INLINE void DelayUs(volatile uint32_t us)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	us *= (SystemCoreClock / 1000000);
 8000420:	4b0a      	ldr	r3, [pc, #40]	; (800044c <DelayUs+0x34>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a0a      	ldr	r2, [pc, #40]	; (8000450 <DelayUs+0x38>)
 8000426:	fba2 2303 	umull	r2, r3, r2, r3
 800042a:	0c9b      	lsrs	r3, r3, #18
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	fb02 f303 	mul.w	r3, r2, r3
 8000432:	607b      	str	r3, [r7, #4]
	while (us--);
 8000434:	bf00      	nop
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	1e5a      	subs	r2, r3, #1
 800043a:	607a      	str	r2, [r7, #4]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d1fa      	bne.n	8000436 <DelayUs+0x1e>
}
 8000440:	bf00      	nop
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	20000000 	.word	0x20000000
 8000450:	431bde83 	.word	0x431bde83

08000454 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800045e:	2201      	movs	r2, #1
 8000460:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000464:	4812      	ldr	r0, [pc, #72]	; (80004b0 <ILI9341_WriteData+0x5c>)
 8000466:	f001 fd39 	bl	8001edc <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 800046a:	e018      	b.n	800049e <ILI9341_WriteData+0x4a>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000472:	bf28      	it	cs
 8000474:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8000478:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 800047a:	89fa      	ldrh	r2, [r7, #14]
 800047c:	f04f 33ff 	mov.w	r3, #4294967295
 8000480:	6879      	ldr	r1, [r7, #4]
 8000482:	480c      	ldr	r0, [pc, #48]	; (80004b4 <ILI9341_WriteData+0x60>)
 8000484:	f002 f9d6 	bl	8002834 <HAL_SPI_Transmit>
        DelayUs(1);
 8000488:	2001      	movs	r0, #1
 800048a:	f7ff ffc5 	bl	8000418 <DelayUs>
        buff += chunk_size;
 800048e:	89fb      	ldrh	r3, [r7, #14]
 8000490:	687a      	ldr	r2, [r7, #4]
 8000492:	4413      	add	r3, r2
 8000494:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8000496:	89fb      	ldrh	r3, [r7, #14]
 8000498:	683a      	ldr	r2, [r7, #0]
 800049a:	1ad3      	subs	r3, r2, r3
 800049c:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d1e3      	bne.n	800046c <ILI9341_WriteData+0x18>
    }
}
 80004a4:	bf00      	nop
 80004a6:	bf00      	nop
 80004a8:	3710      	adds	r7, #16
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40011000 	.word	0x40011000
 80004b4:	200000f4 	.word	0x200000f4

080004b8 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80004b8:	b590      	push	{r4, r7, lr}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4604      	mov	r4, r0
 80004c0:	4608      	mov	r0, r1
 80004c2:	4611      	mov	r1, r2
 80004c4:	461a      	mov	r2, r3
 80004c6:	4623      	mov	r3, r4
 80004c8:	80fb      	strh	r3, [r7, #6]
 80004ca:	4603      	mov	r3, r0
 80004cc:	80bb      	strh	r3, [r7, #4]
 80004ce:	460b      	mov	r3, r1
 80004d0:	807b      	strh	r3, [r7, #2]
 80004d2:	4613      	mov	r3, r2
 80004d4:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 80004d6:	202a      	movs	r0, #42	; 0x2a
 80004d8:	f7ff ff84 	bl	80003e4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 80004dc:	88fb      	ldrh	r3, [r7, #6]
 80004de:	0a1b      	lsrs	r3, r3, #8
 80004e0:	b29b      	uxth	r3, r3
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	733b      	strb	r3, [r7, #12]
 80004e6:	88fb      	ldrh	r3, [r7, #6]
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	737b      	strb	r3, [r7, #13]
 80004ec:	887b      	ldrh	r3, [r7, #2]
 80004ee:	0a1b      	lsrs	r3, r3, #8
 80004f0:	b29b      	uxth	r3, r3
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	73bb      	strb	r3, [r7, #14]
 80004f6:	887b      	ldrh	r3, [r7, #2]
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 80004fc:	f107 030c 	add.w	r3, r7, #12
 8000500:	2104      	movs	r1, #4
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff ffa6 	bl	8000454 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8000508:	202b      	movs	r0, #43	; 0x2b
 800050a:	f7ff ff6b 	bl	80003e4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 800050e:	88bb      	ldrh	r3, [r7, #4]
 8000510:	0a1b      	lsrs	r3, r3, #8
 8000512:	b29b      	uxth	r3, r3
 8000514:	b2db      	uxtb	r3, r3
 8000516:	723b      	strb	r3, [r7, #8]
 8000518:	88bb      	ldrh	r3, [r7, #4]
 800051a:	b2db      	uxtb	r3, r3
 800051c:	727b      	strb	r3, [r7, #9]
 800051e:	883b      	ldrh	r3, [r7, #0]
 8000520:	0a1b      	lsrs	r3, r3, #8
 8000522:	b29b      	uxth	r3, r3
 8000524:	b2db      	uxtb	r3, r3
 8000526:	72bb      	strb	r3, [r7, #10]
 8000528:	883b      	ldrh	r3, [r7, #0]
 800052a:	b2db      	uxtb	r3, r3
 800052c:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 800052e:	f107 0308 	add.w	r3, r7, #8
 8000532:	2104      	movs	r1, #4
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff ff8d 	bl	8000454 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 800053a:	202c      	movs	r0, #44	; 0x2c
 800053c:	f7ff ff52 	bl	80003e4 <ILI9341_WriteCommand>
}
 8000540:	bf00      	nop
 8000542:	3714      	adds	r7, #20
 8000544:	46bd      	mov	sp, r7
 8000546:	bd90      	pop	{r4, r7, pc}

08000548 <ILI9341_Init>:

void ILI9341_Init() {
 8000548:	b590      	push	{r4, r7, lr}
 800054a:	b09b      	sub	sp, #108	; 0x6c
 800054c:	af00      	add	r7, sp, #0
    ILI9341_Select();
 800054e:	f7ff ff1b 	bl	8000388 <ILI9341_Select>
    ILI9341_Reset();
 8000552:	f7ff ff31 	bl	80003b8 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 8000556:	2001      	movs	r0, #1
 8000558:	f7ff ff44 	bl	80003e4 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 800055c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000560:	f001 f818 	bl	8001594 <HAL_Delay>
        
    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8000564:	20cb      	movs	r0, #203	; 0xcb
 8000566:	f7ff ff3d 	bl	80003e4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 800056a:	4a87      	ldr	r2, [pc, #540]	; (8000788 <ILI9341_Init+0x240>)
 800056c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000570:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000574:	6018      	str	r0, [r3, #0]
 8000576:	3304      	adds	r3, #4
 8000578:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800057a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800057e:	2105      	movs	r1, #5
 8000580:	4618      	mov	r0, r3
 8000582:	f7ff ff67 	bl	8000454 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 8000586:	20cf      	movs	r0, #207	; 0xcf
 8000588:	f7ff ff2c 	bl	80003e4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 800058c:	4a7f      	ldr	r2, [pc, #508]	; (800078c <ILI9341_Init+0x244>)
 800058e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000592:	6812      	ldr	r2, [r2, #0]
 8000594:	4611      	mov	r1, r2
 8000596:	8019      	strh	r1, [r3, #0]
 8000598:	3302      	adds	r3, #2
 800059a:	0c12      	lsrs	r2, r2, #16
 800059c:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800059e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005a2:	2103      	movs	r1, #3
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff ff55 	bl	8000454 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 80005aa:	20e8      	movs	r0, #232	; 0xe8
 80005ac:	f7ff ff1a 	bl	80003e4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 80005b0:	4a77      	ldr	r2, [pc, #476]	; (8000790 <ILI9341_Init+0x248>)
 80005b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005b6:	6812      	ldr	r2, [r2, #0]
 80005b8:	4611      	mov	r1, r2
 80005ba:	8019      	strh	r1, [r3, #0]
 80005bc:	3302      	adds	r3, #2
 80005be:	0c12      	lsrs	r2, r2, #16
 80005c0:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80005c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005c6:	2103      	movs	r1, #3
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff ff43 	bl	8000454 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 80005ce:	20ea      	movs	r0, #234	; 0xea
 80005d0:	f7ff ff08 	bl	80003e4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        ILI9341_WriteData(data, sizeof(data));
 80005da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005de:	2102      	movs	r1, #2
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ff37 	bl	8000454 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 80005e6:	20ed      	movs	r0, #237	; 0xed
 80005e8:	f7ff fefc 	bl	80003e4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 80005ec:	4b69      	ldr	r3, [pc, #420]	; (8000794 <ILI9341_Init+0x24c>)
 80005ee:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData(data, sizeof(data));
 80005f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005f4:	2104      	movs	r1, #4
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ff2c 	bl	8000454 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 80005fc:	20f7      	movs	r0, #247	; 0xf7
 80005fe:	f7ff fef1 	bl	80003e4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 8000602:	2320      	movs	r3, #32
 8000604:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8000608:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800060c:	2101      	movs	r1, #1
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff ff20 	bl	8000454 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8000614:	20c0      	movs	r0, #192	; 0xc0
 8000616:	f7ff fee5 	bl	80003e4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 800061a:	2323      	movs	r3, #35	; 0x23
 800061c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 8000620:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000624:	2101      	movs	r1, #1
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff ff14 	bl	8000454 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 800062c:	20c1      	movs	r0, #193	; 0xc1
 800062e:	f7ff fed9 	bl	80003e4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8000632:	2310      	movs	r3, #16
 8000634:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData(data, sizeof(data));
 8000638:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800063c:	2101      	movs	r1, #1
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ff08 	bl	8000454 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8000644:	20c5      	movs	r0, #197	; 0xc5
 8000646:	f7ff fecd 	bl	80003e4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 800064a:	f642 033e 	movw	r3, #10302	; 0x283e
 800064e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData(data, sizeof(data));
 8000652:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000656:	2102      	movs	r1, #2
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff fefb 	bl	8000454 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 800065e:	20c7      	movs	r0, #199	; 0xc7
 8000660:	f7ff fec0 	bl	80003e4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8000664:	2386      	movs	r3, #134	; 0x86
 8000666:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData(data, sizeof(data));
 800066a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800066e:	2101      	movs	r1, #1
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff feef 	bl	8000454 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 8000676:	2036      	movs	r0, #54	; 0x36
 8000678:	f7ff feb4 	bl	80003e4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 800067c:	2348      	movs	r3, #72	; 0x48
 800067e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData(data, sizeof(data));
 8000682:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000686:	2101      	movs	r1, #1
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff fee3 	bl	8000454 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 800068e:	203a      	movs	r0, #58	; 0x3a
 8000690:	f7ff fea8 	bl	80003e4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8000694:	2355      	movs	r3, #85	; 0x55
 8000696:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData(data, sizeof(data));
 800069a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800069e:	2101      	movs	r1, #1
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff fed7 	bl	8000454 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 80006a6:	20b1      	movs	r0, #177	; 0xb1
 80006a8:	f7ff fe9c 	bl	80003e4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 80006ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006b0:	863b      	strh	r3, [r7, #48]	; 0x30
        ILI9341_WriteData(data, sizeof(data));
 80006b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006b6:	2102      	movs	r1, #2
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff fecb 	bl	8000454 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 80006be:	20b6      	movs	r0, #182	; 0xb6
 80006c0:	f7ff fe90 	bl	80003e4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 80006c4:	4a34      	ldr	r2, [pc, #208]	; (8000798 <ILI9341_Init+0x250>)
 80006c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006ca:	6812      	ldr	r2, [r2, #0]
 80006cc:	4611      	mov	r1, r2
 80006ce:	8019      	strh	r1, [r3, #0]
 80006d0:	3302      	adds	r3, #2
 80006d2:	0c12      	lsrs	r2, r2, #16
 80006d4:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80006d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006da:	2103      	movs	r1, #3
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff feb9 	bl	8000454 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 80006e2:	20f2      	movs	r0, #242	; 0xf2
 80006e4:	f7ff fe7e 	bl	80003e4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 80006e8:	2300      	movs	r3, #0
 80006ea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData(data, sizeof(data));
 80006ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006f2:	2101      	movs	r1, #1
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff fead 	bl	8000454 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 80006fa:	2026      	movs	r0, #38	; 0x26
 80006fc:	f7ff fe72 	bl	80003e4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8000700:	2301      	movs	r3, #1
 8000702:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData(data, sizeof(data));
 8000706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800070a:	2101      	movs	r1, #1
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff fea1 	bl	8000454 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 8000712:	20e0      	movs	r0, #224	; 0xe0
 8000714:	f7ff fe66 	bl	80003e4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8000718:	4b20      	ldr	r3, [pc, #128]	; (800079c <ILI9341_Init+0x254>)
 800071a:	f107 0414 	add.w	r4, r7, #20
 800071e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000720:	c407      	stmia	r4!, {r0, r1, r2}
 8000722:	8023      	strh	r3, [r4, #0]
 8000724:	3402      	adds	r4, #2
 8000726:	0c1b      	lsrs	r3, r3, #16
 8000728:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	210f      	movs	r1, #15
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fe8f 	bl	8000454 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 8000736:	20e1      	movs	r0, #225	; 0xe1
 8000738:	f7ff fe54 	bl	80003e4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 800073c:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <ILI9341_Init+0x258>)
 800073e:	1d3c      	adds	r4, r7, #4
 8000740:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000742:	c407      	stmia	r4!, {r0, r1, r2}
 8000744:	8023      	strh	r3, [r4, #0]
 8000746:	3402      	adds	r4, #2
 8000748:	0c1b      	lsrs	r3, r3, #16
 800074a:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	210f      	movs	r1, #15
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff fe7f 	bl	8000454 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 8000756:	2011      	movs	r0, #17
 8000758:	f7ff fe44 	bl	80003e4 <ILI9341_WriteCommand>
    HAL_Delay(120);
 800075c:	2078      	movs	r0, #120	; 0x78
 800075e:	f000 ff19 	bl	8001594 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 8000762:	2029      	movs	r0, #41	; 0x29
 8000764:	f7ff fe3e 	bl	80003e4 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 8000768:	2036      	movs	r0, #54	; 0x36
 800076a:	f7ff fe3b 	bl	80003e4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 800076e:	23e8      	movs	r3, #232	; 0xe8
 8000770:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000772:	463b      	mov	r3, r7
 8000774:	2101      	movs	r1, #1
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff fe6c 	bl	8000454 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 800077c:	f7ff fe10 	bl	80003a0 <ILI9341_Unselect>
}
 8000780:	bf00      	nop
 8000782:	376c      	adds	r7, #108	; 0x6c
 8000784:	46bd      	mov	sp, r7
 8000786:	bd90      	pop	{r4, r7, pc}
 8000788:	08003e08 	.word	0x08003e08
 800078c:	08003e10 	.word	0x08003e10
 8000790:	08003e14 	.word	0x08003e14
 8000794:	81120364 	.word	0x81120364
 8000798:	08003e18 	.word	0x08003e18
 800079c:	08003e1c 	.word	0x08003e1c
 80007a0:	08003e2c 	.word	0x08003e2c

080007a4 <ILI9341_FillRectangle>:
    }

    ILI9341_Unselect();
}

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80007a4:	b590      	push	{r4, r7, lr}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4604      	mov	r4, r0
 80007ac:	4608      	mov	r0, r1
 80007ae:	4611      	mov	r1, r2
 80007b0:	461a      	mov	r2, r3
 80007b2:	4623      	mov	r3, r4
 80007b4:	80fb      	strh	r3, [r7, #6]
 80007b6:	4603      	mov	r3, r0
 80007b8:	80bb      	strh	r3, [r7, #4]
 80007ba:	460b      	mov	r3, r1
 80007bc:	807b      	strh	r3, [r7, #2]
 80007be:	4613      	mov	r3, r2
 80007c0:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80007c2:	88fb      	ldrh	r3, [r7, #6]
 80007c4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80007c8:	d253      	bcs.n	8000872 <ILI9341_FillRectangle+0xce>
 80007ca:	88bb      	ldrh	r3, [r7, #4]
 80007cc:	2bef      	cmp	r3, #239	; 0xef
 80007ce:	d850      	bhi.n	8000872 <ILI9341_FillRectangle+0xce>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 80007d0:	88fa      	ldrh	r2, [r7, #6]
 80007d2:	887b      	ldrh	r3, [r7, #2]
 80007d4:	4413      	add	r3, r2
 80007d6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80007da:	dd03      	ble.n	80007e4 <ILI9341_FillRectangle+0x40>
 80007dc:	88fb      	ldrh	r3, [r7, #6]
 80007de:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 80007e2:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 80007e4:	88ba      	ldrh	r2, [r7, #4]
 80007e6:	883b      	ldrh	r3, [r7, #0]
 80007e8:	4413      	add	r3, r2
 80007ea:	2bf0      	cmp	r3, #240	; 0xf0
 80007ec:	dd03      	ble.n	80007f6 <ILI9341_FillRectangle+0x52>
 80007ee:	88bb      	ldrh	r3, [r7, #4]
 80007f0:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80007f4:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 80007f6:	f7ff fdc7 	bl	8000388 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 80007fa:	88fa      	ldrh	r2, [r7, #6]
 80007fc:	887b      	ldrh	r3, [r7, #2]
 80007fe:	4413      	add	r3, r2
 8000800:	b29b      	uxth	r3, r3
 8000802:	3b01      	subs	r3, #1
 8000804:	b29c      	uxth	r4, r3
 8000806:	88ba      	ldrh	r2, [r7, #4]
 8000808:	883b      	ldrh	r3, [r7, #0]
 800080a:	4413      	add	r3, r2
 800080c:	b29b      	uxth	r3, r3
 800080e:	3b01      	subs	r3, #1
 8000810:	b29b      	uxth	r3, r3
 8000812:	88b9      	ldrh	r1, [r7, #4]
 8000814:	88f8      	ldrh	r0, [r7, #6]
 8000816:	4622      	mov	r2, r4
 8000818:	f7ff fe4e 	bl	80004b8 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800081c:	8c3b      	ldrh	r3, [r7, #32]
 800081e:	0a1b      	lsrs	r3, r3, #8
 8000820:	b29b      	uxth	r3, r3
 8000822:	b2db      	uxtb	r3, r3
 8000824:	733b      	strb	r3, [r7, #12]
 8000826:	8c3b      	ldrh	r3, [r7, #32]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800082c:	2201      	movs	r2, #1
 800082e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000832:	4812      	ldr	r0, [pc, #72]	; (800087c <ILI9341_FillRectangle+0xd8>)
 8000834:	f001 fb52 	bl	8001edc <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000838:	883b      	ldrh	r3, [r7, #0]
 800083a:	80bb      	strh	r3, [r7, #4]
 800083c:	e013      	b.n	8000866 <ILI9341_FillRectangle+0xc2>
        for(x = w; x > 0; x--) {
 800083e:	887b      	ldrh	r3, [r7, #2]
 8000840:	80fb      	strh	r3, [r7, #6]
 8000842:	e00a      	b.n	800085a <ILI9341_FillRectangle+0xb6>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000844:	f107 010c 	add.w	r1, r7, #12
 8000848:	f04f 33ff 	mov.w	r3, #4294967295
 800084c:	2202      	movs	r2, #2
 800084e:	480c      	ldr	r0, [pc, #48]	; (8000880 <ILI9341_FillRectangle+0xdc>)
 8000850:	f001 fff0 	bl	8002834 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000854:	88fb      	ldrh	r3, [r7, #6]
 8000856:	3b01      	subs	r3, #1
 8000858:	80fb      	strh	r3, [r7, #6]
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d1f1      	bne.n	8000844 <ILI9341_FillRectangle+0xa0>
    for(y = h; y > 0; y--) {
 8000860:	88bb      	ldrh	r3, [r7, #4]
 8000862:	3b01      	subs	r3, #1
 8000864:	80bb      	strh	r3, [r7, #4]
 8000866:	88bb      	ldrh	r3, [r7, #4]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d1e8      	bne.n	800083e <ILI9341_FillRectangle+0x9a>
        }
    }

    ILI9341_Unselect();
 800086c:	f7ff fd98 	bl	80003a0 <ILI9341_Unselect>
 8000870:	e000      	b.n	8000874 <ILI9341_FillRectangle+0xd0>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000872:	bf00      	nop
}
 8000874:	3714      	adds	r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	bd90      	pop	{r4, r7, pc}
 800087a:	bf00      	nop
 800087c:	40011000 	.word	0x40011000
 8000880:	200000f4 	.word	0x200000f4

08000884 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af02      	add	r7, sp, #8
 800088a:	4603      	mov	r3, r0
 800088c:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	23f0      	movs	r3, #240	; 0xf0
 8000894:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000898:	2100      	movs	r1, #0
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff ff82 	bl	80007a4 <ILI9341_FillRectangle>
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <LCD_Char>:
}



void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b08b      	sub	sp, #44	; 0x2c
 80008ac:	af02      	add	r7, sp, #8
 80008ae:	60ba      	str	r2, [r7, #8]
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4603      	mov	r3, r0
 80008b4:	81fb      	strh	r3, [r7, #14]
 80008b6:	460b      	mov	r3, r1
 80008b8:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	881b      	ldrh	r3, [r3, #0]
 80008c4:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	777b      	strb	r3, [r7, #29]
 80008ca:	2300      	movs	r3, #0
 80008cc:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for (cur_y = 0; cur_y < glyph -> height; cur_y++)
 80008d2:	2300      	movs	r3, #0
 80008d4:	763b      	strb	r3, [r7, #24]
 80008d6:	e095      	b.n	8000a04 <LCD_Char+0x15c>
	{
		for (cur_x = 0; cur_x < glyph -> width; cur_x++)
 80008d8:	2300      	movs	r3, #0
 80008da:	767b      	strb	r3, [r7, #25]
 80008dc:	e053      	b.n	8000986 <LCD_Char+0xde>
		{
			if (bit == 0)
 80008de:	7f3b      	ldrb	r3, [r7, #28]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d109      	bne.n	80008f8 <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 80008e4:	8bfb      	ldrh	r3, [r7, #30]
 80008e6:	1c5a      	adds	r2, r3, #1
 80008e8:	83fa      	strh	r2, [r7, #30]
 80008ea:	461a      	mov	r2, r3
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	4413      	add	r3, r2
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 80008f4:	2380      	movs	r3, #128	; 0x80
 80008f6:	773b      	strb	r3, [r7, #28]
			}
			if (bits & bit) set_pixels++;
 80008f8:	7f7a      	ldrb	r2, [r7, #29]
 80008fa:	7f3b      	ldrb	r3, [r7, #28]
 80008fc:	4013      	ands	r3, r2
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	2b00      	cmp	r3, #0
 8000902:	d003      	beq.n	800090c <LCD_Char+0x64>
 8000904:	8b7b      	ldrh	r3, [r7, #26]
 8000906:	3301      	adds	r3, #1
 8000908:	837b      	strh	r3, [r7, #26]
 800090a:	e036      	b.n	800097a <LCD_Char+0xd2>
			else if (set_pixels > 0)
 800090c:	8b7b      	ldrh	r3, [r7, #26]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d033      	beq.n	800097a <LCD_Char+0xd2>
			{
				ILI9341_FillRectangle(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000918:	461a      	mov	r2, r3
 800091a:	7e7b      	ldrb	r3, [r7, #25]
 800091c:	441a      	add	r2, r3
 800091e:	8b7b      	ldrh	r3, [r7, #26]
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	b29b      	uxth	r3, r3
 8000924:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000928:	b292      	uxth	r2, r2
 800092a:	fb02 f303 	mul.w	r3, r2, r3
 800092e:	b29a      	uxth	r2, r3
 8000930:	89fb      	ldrh	r3, [r7, #14]
 8000932:	4413      	add	r3, r2
 8000934:	b298      	uxth	r0, r3
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800093c:	461a      	mov	r2, r3
 800093e:	7e3b      	ldrb	r3, [r7, #24]
 8000940:	4413      	add	r3, r2
 8000942:	b29b      	uxth	r3, r3
 8000944:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000948:	b292      	uxth	r2, r2
 800094a:	fb02 f303 	mul.w	r3, r2, r3
 800094e:	b29a      	uxth	r2, r3
 8000950:	89bb      	ldrh	r3, [r7, #12]
 8000952:	4413      	add	r3, r2
 8000954:	b299      	uxth	r1, r3
 8000956:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800095a:	b29b      	uxth	r3, r3
 800095c:	8b7a      	ldrh	r2, [r7, #26]
 800095e:	fb02 f303 	mul.w	r3, r2, r3
 8000962:	b29a      	uxth	r2, r3
 8000964:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000968:	b29c      	uxth	r4, r3
 800096a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800096c:	b29b      	uxth	r3, r3
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	4623      	mov	r3, r4
 8000972:	f7ff ff17 	bl	80007a4 <ILI9341_FillRectangle>
				set_pixels = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 800097a:	7f3b      	ldrb	r3, [r7, #28]
 800097c:	085b      	lsrs	r3, r3, #1
 800097e:	773b      	strb	r3, [r7, #28]
		for (cur_x = 0; cur_x < glyph -> width; cur_x++)
 8000980:	7e7b      	ldrb	r3, [r7, #25]
 8000982:	3301      	adds	r3, #1
 8000984:	767b      	strb	r3, [r7, #25]
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	789b      	ldrb	r3, [r3, #2]
 800098a:	7e7a      	ldrb	r2, [r7, #25]
 800098c:	429a      	cmp	r2, r3
 800098e:	d3a6      	bcc.n	80008de <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 8000990:	8b7b      	ldrh	r3, [r7, #26]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d033      	beq.n	80009fe <LCD_Char+0x156>
		{
			ILI9341_FillRectangle(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800099c:	461a      	mov	r2, r3
 800099e:	7e7b      	ldrb	r3, [r7, #25]
 80009a0:	441a      	add	r2, r3
 80009a2:	8b7b      	ldrh	r3, [r7, #26]
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80009ac:	b292      	uxth	r2, r2
 80009ae:	fb02 f303 	mul.w	r3, r2, r3
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	89fb      	ldrh	r3, [r7, #14]
 80009b6:	4413      	add	r3, r2
 80009b8:	b298      	uxth	r0, r3
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80009c0:	461a      	mov	r2, r3
 80009c2:	7e3b      	ldrb	r3, [r7, #24]
 80009c4:	4413      	add	r3, r2
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80009cc:	b292      	uxth	r2, r2
 80009ce:	fb02 f303 	mul.w	r3, r2, r3
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	89bb      	ldrh	r3, [r7, #12]
 80009d6:	4413      	add	r3, r2
 80009d8:	b299      	uxth	r1, r3
 80009da:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80009de:	b29b      	uxth	r3, r3
 80009e0:	8b7a      	ldrh	r2, [r7, #26]
 80009e2:	fb02 f303 	mul.w	r3, r2, r3
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80009ec:	b29c      	uxth	r4, r3
 80009ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	4623      	mov	r3, r4
 80009f6:	f7ff fed5 	bl	80007a4 <ILI9341_FillRectangle>
			set_pixels = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	837b      	strh	r3, [r7, #26]
	for (cur_y = 0; cur_y < glyph -> height; cur_y++)
 80009fe:	7e3b      	ldrb	r3, [r7, #24]
 8000a00:	3301      	adds	r3, #1
 8000a02:	763b      	strb	r3, [r7, #24]
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	78db      	ldrb	r3, [r3, #3]
 8000a08:	7e3a      	ldrb	r2, [r7, #24]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	f4ff af64 	bcc.w	80008d8 <LCD_Char+0x30>
		}
	}
}
 8000a10:	bf00      	nop
 8000a12:	bf00      	nop
 8000a14:	3724      	adds	r7, #36	; 0x24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd90      	pop	{r4, r7, pc}

08000a1a <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 8000a1a:	b590      	push	{r4, r7, lr}
 8000a1c:	b08f      	sub	sp, #60	; 0x3c
 8000a1e:	af02      	add	r7, sp, #8
 8000a20:	60ba      	str	r2, [r7, #8]
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	4603      	mov	r3, r0
 8000a26:	81fb      	strh	r3, [r7, #14]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 8000a2c:	89fb      	ldrh	r3, [r7, #14]
 8000a2e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y;
 8000a30:	89bb      	ldrh	r3, [r7, #12]
 8000a32:	85bb      	strh	r3, [r7, #44]	; 0x2c
	GFXfont font;
	memcpy(&font, p_font, sizeof(GFXfont));
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	220c      	movs	r2, #12
 8000a3a:	6879      	ldr	r1, [r7, #4]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f002 fe35 	bl	80036ac <memcpy>
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8000a42:	2300      	movs	r3, #0
 8000a44:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000a46:	e056      	b.n	8000af6 <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 8000a48:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if (c == '\n')
 8000a54:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000a58:	2b0a      	cmp	r3, #10
 8000a5a:	d10f      	bne.n	8000a7c <LCD_Font+0x62>
		{
			cursor_x = x;
 8000a5c:	89fb      	ldrh	r3, [r7, #14]
 8000a5e:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 8000a60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000a6a:	b292      	uxth	r2, r2
 8000a6c:	fb02 f303 	mul.w	r3, r2, r3
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000a74:	4413      	add	r3, r2
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000a7a:	e039      	b.n	8000af0 <LCD_Font+0xd6>
		}
		else if (c >= font.first && c <= font.last && c != '\r')
 8000a7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000a80:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d333      	bcc.n	8000af0 <LCD_Font+0xd6>
 8000a88:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000a8c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d82d      	bhi.n	8000af0 <LCD_Font+0xd6>
 8000a94:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000a98:	2b0d      	cmp	r3, #13
 8000a9a:	d029      	beq.n	8000af0 <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy(&glyph, &font.glyph[c - font.first], sizeof(GFXglyph));
 8000a9c:	6a3a      	ldr	r2, [r7, #32]
 8000a9e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000aa2:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000aa6:	1a5b      	subs	r3, r3, r1
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	18d1      	adds	r1, r2, r3
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	2208      	movs	r2, #8
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f002 fdfa 	bl	80036ac <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8000ab8:	f107 041c 	add.w	r4, r7, #28
 8000abc:	f107 0214 	add.w	r2, r7, #20
 8000ac0:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8000ac4:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8000ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000aca:	9301      	str	r3, [sp, #4]
 8000acc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	4623      	mov	r3, r4
 8000ad4:	f7ff fee8 	bl	80008a8 <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 8000ad8:	7e3b      	ldrb	r3, [r7, #24]
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000ae0:	b292      	uxth	r2, r2
 8000ae2:	fb02 f303 	mul.w	r3, r2, r3
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000aea:	4413      	add	r3, r2
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8000af0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000af2:	3301      	adds	r3, #1
 8000af4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000af6:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8000af8:	68b8      	ldr	r0, [r7, #8]
 8000afa:	f7ff fb27 	bl	800014c <strlen>
 8000afe:	4603      	mov	r3, r0
 8000b00:	429c      	cmp	r4, r3
 8000b02:	d3a1      	bcc.n	8000a48 <LCD_Font+0x2e>
		}
	}
}
 8000b04:	bf00      	nop
 8000b06:	bf00      	nop
 8000b08:	3734      	adds	r7, #52	; 0x34
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd90      	pop	{r4, r7, pc}
	...

08000b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b16:	f000 fcdb 	bl	80014d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b1a:	f000 fa2f 	bl	8000f7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b1e:	f000 faf1 	bl	8001104 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b22:	f000 fad1 	bl	80010c8 <MX_DMA_Init>
  MX_SPI2_Init();
 8000b26:	f000 fa6f 	bl	8001008 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000b2a:	f000 faa3 	bl	8001074 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 8000b2e:	f7ff fd0b 	bl	8000548 <ILI9341_Init>
  ILI9341_FillScreen(WHITE);
 8000b32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b36:	f7ff fea5 	bl	8000884 <ILI9341_FillScreen>

  LCD_Font(10, 30, "CHANNEL1", _Open_Sans_Bold_36  , 1, PURPLE);
 8000b3a:	f647 030f 	movw	r3, #30735	; 0x780f
 8000b3e:	9301      	str	r3, [sp, #4]
 8000b40:	2301      	movs	r3, #1
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	4bba      	ldr	r3, [pc, #744]	; (8000e30 <main+0x320>)
 8000b46:	4abb      	ldr	r2, [pc, #748]	; (8000e34 <main+0x324>)
 8000b48:	211e      	movs	r1, #30
 8000b4a:	200a      	movs	r0, #10
 8000b4c:	f7ff ff65 	bl	8000a1a <LCD_Font>
  LCD_Font(10, 70, "CHANNEL2", _Open_Sans_Bold_36  , 1, BLUE);
 8000b50:	231f      	movs	r3, #31
 8000b52:	9301      	str	r3, [sp, #4]
 8000b54:	2301      	movs	r3, #1
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	4bb5      	ldr	r3, [pc, #724]	; (8000e30 <main+0x320>)
 8000b5a:	4ab7      	ldr	r2, [pc, #732]	; (8000e38 <main+0x328>)
 8000b5c:	2146      	movs	r1, #70	; 0x46
 8000b5e:	200a      	movs	r0, #10
 8000b60:	f7ff ff5b 	bl	8000a1a <LCD_Font>
  LCD_Font(10, 110, "CHANNEL3", _Open_Sans_Bold_36  , 1, GREEN);
 8000b64:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000b68:	9301      	str	r3, [sp, #4]
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	4bb0      	ldr	r3, [pc, #704]	; (8000e30 <main+0x320>)
 8000b70:	4ab2      	ldr	r2, [pc, #712]	; (8000e3c <main+0x32c>)
 8000b72:	216e      	movs	r1, #110	; 0x6e
 8000b74:	200a      	movs	r0, #10
 8000b76:	f7ff ff50 	bl	8000a1a <LCD_Font>
  LCD_Font(10, 150, "CHANNEL4", _Open_Sans_Bold_36  , 1, RED);
 8000b7a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000b7e:	9301      	str	r3, [sp, #4]
 8000b80:	2301      	movs	r3, #1
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	4baa      	ldr	r3, [pc, #680]	; (8000e30 <main+0x320>)
 8000b86:	4aae      	ldr	r2, [pc, #696]	; (8000e40 <main+0x330>)
 8000b88:	2196      	movs	r1, #150	; 0x96
 8000b8a:	200a      	movs	r0, #10
 8000b8c:	f7ff ff45 	bl	8000a1a <LCD_Font>
  LCD_Font(10, 190, "CHANNEL5", _Open_Sans_Bold_36  , 1, MAGENTA);
 8000b90:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8000b94:	9301      	str	r3, [sp, #4]
 8000b96:	2301      	movs	r3, #1
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	4ba5      	ldr	r3, [pc, #660]	; (8000e30 <main+0x320>)
 8000b9c:	4aa9      	ldr	r2, [pc, #676]	; (8000e44 <main+0x334>)
 8000b9e:	21be      	movs	r1, #190	; 0xbe
 8000ba0:	200a      	movs	r0, #10
 8000ba2:	f7ff ff3a 	bl	8000a1a <LCD_Font>
  LCD_Font(10, 230, "CHANNEL6", _Open_Sans_Bold_36  , 1, ORANGE);
 8000ba6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8000baa:	9301      	str	r3, [sp, #4]
 8000bac:	2301      	movs	r3, #1
 8000bae:	9300      	str	r3, [sp, #0]
 8000bb0:	4b9f      	ldr	r3, [pc, #636]	; (8000e30 <main+0x320>)
 8000bb2:	4aa5      	ldr	r2, [pc, #660]	; (8000e48 <main+0x338>)
 8000bb4:	21e6      	movs	r1, #230	; 0xe6
 8000bb6:	200a      	movs	r0, #10
 8000bb8:	f7ff ff2f 	bl	8000a1a <LCD_Font>

  RxIBus = J3_IBUS_new(&huart1, 14);
 8000bbc:	210e      	movs	r1, #14
 8000bbe:	48a3      	ldr	r0, [pc, #652]	; (8000e4c <main+0x33c>)
 8000bc0:	f7ff facc 	bl	800015c <J3_IBUS_new>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	4aa2      	ldr	r2, [pc, #648]	; (8000e50 <main+0x340>)
 8000bc8:	6013      	str	r3, [r2, #0]

  HAL_UART_Receive_DMA(&huart1, RxIBus->buffer, 64);
 8000bca:	4ba1      	ldr	r3, [pc, #644]	; (8000e50 <main+0x340>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	2240      	movs	r2, #64	; 0x40
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	489d      	ldr	r0, [pc, #628]	; (8000e4c <main+0x33c>)
 8000bd6:	f002 f905 	bl	8002de4 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Transmit(&huart1, "CH1:", 4, 100);
 8000bda:	2364      	movs	r3, #100	; 0x64
 8000bdc:	2204      	movs	r2, #4
 8000bde:	499d      	ldr	r1, [pc, #628]	; (8000e54 <main+0x344>)
 8000be0:	489a      	ldr	r0, [pc, #616]	; (8000e4c <main+0x33c>)
 8000be2:	f002 f874 	bl	8002cce <HAL_UART_Transmit>
	  LCD_Font(230, 30, buf, _Open_Sans_Bold_36  , 1, WHITE);
 8000be6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bea:	9301      	str	r3, [sp, #4]
 8000bec:	2301      	movs	r3, #1
 8000bee:	9300      	str	r3, [sp, #0]
 8000bf0:	4b8f      	ldr	r3, [pc, #572]	; (8000e30 <main+0x320>)
 8000bf2:	4a99      	ldr	r2, [pc, #612]	; (8000e58 <main+0x348>)
 8000bf4:	211e      	movs	r1, #30
 8000bf6:	20e6      	movs	r0, #230	; 0xe6
 8000bf8:	f7ff ff0f 	bl	8000a1a <LCD_Font>
	  sprintf(buf, "%d", J3_IBUS_GetCh(RxIBus, 1));
 8000bfc:	4b94      	ldr	r3, [pc, #592]	; (8000e50 <main+0x340>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2101      	movs	r1, #1
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fb9f 	bl	8000346 <J3_IBUS_GetCh>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4993      	ldr	r1, [pc, #588]	; (8000e5c <main+0x34c>)
 8000c0e:	4892      	ldr	r0, [pc, #584]	; (8000e58 <main+0x348>)
 8000c10:	f002 fce8 	bl	80035e4 <siprintf>
	  HAL_UART_Transmit(&huart1, (char*)buf, sprintf(buf, "%d", J3_IBUS_GetCh(RxIBus, 1)), 100);
 8000c14:	4b8e      	ldr	r3, [pc, #568]	; (8000e50 <main+0x340>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2101      	movs	r1, #1
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fb93 	bl	8000346 <J3_IBUS_GetCh>
 8000c20:	4603      	mov	r3, r0
 8000c22:	461a      	mov	r2, r3
 8000c24:	498d      	ldr	r1, [pc, #564]	; (8000e5c <main+0x34c>)
 8000c26:	488c      	ldr	r0, [pc, #560]	; (8000e58 <main+0x348>)
 8000c28:	f002 fcdc 	bl	80035e4 <siprintf>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	2364      	movs	r3, #100	; 0x64
 8000c32:	4989      	ldr	r1, [pc, #548]	; (8000e58 <main+0x348>)
 8000c34:	4885      	ldr	r0, [pc, #532]	; (8000e4c <main+0x33c>)
 8000c36:	f002 f84a 	bl	8002cce <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, "\r\n", 2, 100);
 8000c3a:	2364      	movs	r3, #100	; 0x64
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	4988      	ldr	r1, [pc, #544]	; (8000e60 <main+0x350>)
 8000c40:	4882      	ldr	r0, [pc, #520]	; (8000e4c <main+0x33c>)
 8000c42:	f002 f844 	bl	8002cce <HAL_UART_Transmit>
//	  ILI9341_printText(str, 0, 0, COLOR_WHITE, COLOR_BLACK, 1);
	  LCD_Font(230, 30, buf, _Open_Sans_Bold_36  , 1, PURPLE);
 8000c46:	f647 030f 	movw	r3, #30735	; 0x780f
 8000c4a:	9301      	str	r3, [sp, #4]
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	4b77      	ldr	r3, [pc, #476]	; (8000e30 <main+0x320>)
 8000c52:	4a81      	ldr	r2, [pc, #516]	; (8000e58 <main+0x348>)
 8000c54:	211e      	movs	r1, #30
 8000c56:	20e6      	movs	r0, #230	; 0xe6
 8000c58:	f7ff fedf 	bl	8000a1a <LCD_Font>

	  HAL_UART_Transmit(&huart1, "CH2:", 4, 100);
 8000c5c:	2364      	movs	r3, #100	; 0x64
 8000c5e:	2204      	movs	r2, #4
 8000c60:	4980      	ldr	r1, [pc, #512]	; (8000e64 <main+0x354>)
 8000c62:	487a      	ldr	r0, [pc, #488]	; (8000e4c <main+0x33c>)
 8000c64:	f002 f833 	bl	8002cce <HAL_UART_Transmit>
	  LCD_Font(230, 70, buf1, _Open_Sans_Bold_36  , 1, WHITE);
 8000c68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c6c:	9301      	str	r3, [sp, #4]
 8000c6e:	2301      	movs	r3, #1
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	4b6f      	ldr	r3, [pc, #444]	; (8000e30 <main+0x320>)
 8000c74:	4a7c      	ldr	r2, [pc, #496]	; (8000e68 <main+0x358>)
 8000c76:	2146      	movs	r1, #70	; 0x46
 8000c78:	20e6      	movs	r0, #230	; 0xe6
 8000c7a:	f7ff fece 	bl	8000a1a <LCD_Font>
	  sprintf(buf1, "%d", J3_IBUS_GetCh(RxIBus, 2));
 8000c7e:	4b74      	ldr	r3, [pc, #464]	; (8000e50 <main+0x340>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2102      	movs	r1, #2
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fb5e 	bl	8000346 <J3_IBUS_GetCh>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4973      	ldr	r1, [pc, #460]	; (8000e5c <main+0x34c>)
 8000c90:	4875      	ldr	r0, [pc, #468]	; (8000e68 <main+0x358>)
 8000c92:	f002 fca7 	bl	80035e4 <siprintf>
	  HAL_UART_Transmit(&huart1, (char*)buf1, sprintf(buf1, "%d", J3_IBUS_GetCh(RxIBus, 2)), 100);
 8000c96:	4b6e      	ldr	r3, [pc, #440]	; (8000e50 <main+0x340>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2102      	movs	r1, #2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fb52 	bl	8000346 <J3_IBUS_GetCh>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	496d      	ldr	r1, [pc, #436]	; (8000e5c <main+0x34c>)
 8000ca8:	486f      	ldr	r0, [pc, #444]	; (8000e68 <main+0x358>)
 8000caa:	f002 fc9b 	bl	80035e4 <siprintf>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	2364      	movs	r3, #100	; 0x64
 8000cb4:	496c      	ldr	r1, [pc, #432]	; (8000e68 <main+0x358>)
 8000cb6:	4865      	ldr	r0, [pc, #404]	; (8000e4c <main+0x33c>)
 8000cb8:	f002 f809 	bl	8002cce <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, "\r\n", 2, 100);
 8000cbc:	2364      	movs	r3, #100	; 0x64
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	4967      	ldr	r1, [pc, #412]	; (8000e60 <main+0x350>)
 8000cc2:	4862      	ldr	r0, [pc, #392]	; (8000e4c <main+0x33c>)
 8000cc4:	f002 f803 	bl	8002cce <HAL_UART_Transmit>
//	  ILI9341_printText(buf1, 0, 20, COLOR_WHITE, COLOR_BLACK, 1);
	  LCD_Font(230, 70, buf1, _Open_Sans_Bold_36  , 1, BLUE);
 8000cc8:	231f      	movs	r3, #31
 8000cca:	9301      	str	r3, [sp, #4]
 8000ccc:	2301      	movs	r3, #1
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	4b57      	ldr	r3, [pc, #348]	; (8000e30 <main+0x320>)
 8000cd2:	4a65      	ldr	r2, [pc, #404]	; (8000e68 <main+0x358>)
 8000cd4:	2146      	movs	r1, #70	; 0x46
 8000cd6:	20e6      	movs	r0, #230	; 0xe6
 8000cd8:	f7ff fe9f 	bl	8000a1a <LCD_Font>

	  HAL_UART_Transmit(&huart1, "CH3:", 4, 100);
 8000cdc:	2364      	movs	r3, #100	; 0x64
 8000cde:	2204      	movs	r2, #4
 8000ce0:	4962      	ldr	r1, [pc, #392]	; (8000e6c <main+0x35c>)
 8000ce2:	485a      	ldr	r0, [pc, #360]	; (8000e4c <main+0x33c>)
 8000ce4:	f001 fff3 	bl	8002cce <HAL_UART_Transmit>
	  LCD_Font(230, 110, buf2, _Open_Sans_Bold_36  , 1, WHITE);
 8000ce8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cec:	9301      	str	r3, [sp, #4]
 8000cee:	2301      	movs	r3, #1
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	4b4f      	ldr	r3, [pc, #316]	; (8000e30 <main+0x320>)
 8000cf4:	4a5e      	ldr	r2, [pc, #376]	; (8000e70 <main+0x360>)
 8000cf6:	216e      	movs	r1, #110	; 0x6e
 8000cf8:	20e6      	movs	r0, #230	; 0xe6
 8000cfa:	f7ff fe8e 	bl	8000a1a <LCD_Font>
	  sprintf(buf2, "%d", J3_IBUS_GetCh(RxIBus, 3));
 8000cfe:	4b54      	ldr	r3, [pc, #336]	; (8000e50 <main+0x340>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2103      	movs	r1, #3
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fb1e 	bl	8000346 <J3_IBUS_GetCh>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4953      	ldr	r1, [pc, #332]	; (8000e5c <main+0x34c>)
 8000d10:	4857      	ldr	r0, [pc, #348]	; (8000e70 <main+0x360>)
 8000d12:	f002 fc67 	bl	80035e4 <siprintf>
	  HAL_UART_Transmit(&huart1, (char*)buf2, sprintf(buf2, "%d", J3_IBUS_GetCh(RxIBus, 3)), 100);
 8000d16:	4b4e      	ldr	r3, [pc, #312]	; (8000e50 <main+0x340>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2103      	movs	r1, #3
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fb12 	bl	8000346 <J3_IBUS_GetCh>
 8000d22:	4603      	mov	r3, r0
 8000d24:	461a      	mov	r2, r3
 8000d26:	494d      	ldr	r1, [pc, #308]	; (8000e5c <main+0x34c>)
 8000d28:	4851      	ldr	r0, [pc, #324]	; (8000e70 <main+0x360>)
 8000d2a:	f002 fc5b 	bl	80035e4 <siprintf>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	2364      	movs	r3, #100	; 0x64
 8000d34:	494e      	ldr	r1, [pc, #312]	; (8000e70 <main+0x360>)
 8000d36:	4845      	ldr	r0, [pc, #276]	; (8000e4c <main+0x33c>)
 8000d38:	f001 ffc9 	bl	8002cce <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, "\r\n", 2, 100);
 8000d3c:	2364      	movs	r3, #100	; 0x64
 8000d3e:	2202      	movs	r2, #2
 8000d40:	4947      	ldr	r1, [pc, #284]	; (8000e60 <main+0x350>)
 8000d42:	4842      	ldr	r0, [pc, #264]	; (8000e4c <main+0x33c>)
 8000d44:	f001 ffc3 	bl	8002cce <HAL_UART_Transmit>
//	  ILI9341_printText(str, 0, 40, COLOR_WHITE, COLOR_BLACK, 1);
	  LCD_Font(230, 110, buf2, _Open_Sans_Bold_36  , 1, GREEN);
 8000d48:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000d4c:	9301      	str	r3, [sp, #4]
 8000d4e:	2301      	movs	r3, #1
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	4b37      	ldr	r3, [pc, #220]	; (8000e30 <main+0x320>)
 8000d54:	4a46      	ldr	r2, [pc, #280]	; (8000e70 <main+0x360>)
 8000d56:	216e      	movs	r1, #110	; 0x6e
 8000d58:	20e6      	movs	r0, #230	; 0xe6
 8000d5a:	f7ff fe5e 	bl	8000a1a <LCD_Font>

	  HAL_UART_Transmit(&huart1, "CH4:", 4, 100);
 8000d5e:	2364      	movs	r3, #100	; 0x64
 8000d60:	2204      	movs	r2, #4
 8000d62:	4944      	ldr	r1, [pc, #272]	; (8000e74 <main+0x364>)
 8000d64:	4839      	ldr	r0, [pc, #228]	; (8000e4c <main+0x33c>)
 8000d66:	f001 ffb2 	bl	8002cce <HAL_UART_Transmit>
	  LCD_Font(230, 150, buf3, _Open_Sans_Bold_36  , 1, WHITE);
 8000d6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d6e:	9301      	str	r3, [sp, #4]
 8000d70:	2301      	movs	r3, #1
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	4b2e      	ldr	r3, [pc, #184]	; (8000e30 <main+0x320>)
 8000d76:	4a40      	ldr	r2, [pc, #256]	; (8000e78 <main+0x368>)
 8000d78:	2196      	movs	r1, #150	; 0x96
 8000d7a:	20e6      	movs	r0, #230	; 0xe6
 8000d7c:	f7ff fe4d 	bl	8000a1a <LCD_Font>
	  sprintf(buf3, "%d", J3_IBUS_GetCh(RxIBus, 4));
 8000d80:	4b33      	ldr	r3, [pc, #204]	; (8000e50 <main+0x340>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2104      	movs	r1, #4
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fadd 	bl	8000346 <J3_IBUS_GetCh>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4932      	ldr	r1, [pc, #200]	; (8000e5c <main+0x34c>)
 8000d92:	4839      	ldr	r0, [pc, #228]	; (8000e78 <main+0x368>)
 8000d94:	f002 fc26 	bl	80035e4 <siprintf>
	  HAL_UART_Transmit(&huart1, (char*)buf3, sprintf(buf3, "%d", J3_IBUS_GetCh(RxIBus, 4)), 100);
 8000d98:	4b2d      	ldr	r3, [pc, #180]	; (8000e50 <main+0x340>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2104      	movs	r1, #4
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fad1 	bl	8000346 <J3_IBUS_GetCh>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	492c      	ldr	r1, [pc, #176]	; (8000e5c <main+0x34c>)
 8000daa:	4833      	ldr	r0, [pc, #204]	; (8000e78 <main+0x368>)
 8000dac:	f002 fc1a 	bl	80035e4 <siprintf>
 8000db0:	4603      	mov	r3, r0
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	2364      	movs	r3, #100	; 0x64
 8000db6:	4930      	ldr	r1, [pc, #192]	; (8000e78 <main+0x368>)
 8000db8:	4824      	ldr	r0, [pc, #144]	; (8000e4c <main+0x33c>)
 8000dba:	f001 ff88 	bl	8002cce <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, "\r\n", 2, 100);
 8000dbe:	2364      	movs	r3, #100	; 0x64
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	4927      	ldr	r1, [pc, #156]	; (8000e60 <main+0x350>)
 8000dc4:	4821      	ldr	r0, [pc, #132]	; (8000e4c <main+0x33c>)
 8000dc6:	f001 ff82 	bl	8002cce <HAL_UART_Transmit>
//	  ILI9341_printText(str, 0, 60, COLOR_WHITE, COLOR_BLACK, 1);
	  LCD_Font(230, 150, buf3, _Open_Sans_Bold_36  , 1, RED);
 8000dca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000dce:	9301      	str	r3, [sp, #4]
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <main+0x320>)
 8000dd6:	4a28      	ldr	r2, [pc, #160]	; (8000e78 <main+0x368>)
 8000dd8:	2196      	movs	r1, #150	; 0x96
 8000dda:	20e6      	movs	r0, #230	; 0xe6
 8000ddc:	f7ff fe1d 	bl	8000a1a <LCD_Font>

	  HAL_UART_Transmit(&huart1, "CH4:", 4, 100);
 8000de0:	2364      	movs	r3, #100	; 0x64
 8000de2:	2204      	movs	r2, #4
 8000de4:	4923      	ldr	r1, [pc, #140]	; (8000e74 <main+0x364>)
 8000de6:	4819      	ldr	r0, [pc, #100]	; (8000e4c <main+0x33c>)
 8000de8:	f001 ff71 	bl	8002cce <HAL_UART_Transmit>
	  LCD_Font(230, 190, buf4, _Open_Sans_Bold_36  , 1, WHITE);
 8000dec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000df0:	9301      	str	r3, [sp, #4]
 8000df2:	2301      	movs	r3, #1
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <main+0x320>)
 8000df8:	4a20      	ldr	r2, [pc, #128]	; (8000e7c <main+0x36c>)
 8000dfa:	21be      	movs	r1, #190	; 0xbe
 8000dfc:	20e6      	movs	r0, #230	; 0xe6
 8000dfe:	f7ff fe0c 	bl	8000a1a <LCD_Font>
	  sprintf(buf4, "%d", J3_IBUS_GetCh(RxIBus, 5));
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <main+0x340>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2105      	movs	r1, #5
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fa9c 	bl	8000346 <J3_IBUS_GetCh>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	461a      	mov	r2, r3
 8000e12:	4912      	ldr	r1, [pc, #72]	; (8000e5c <main+0x34c>)
 8000e14:	4819      	ldr	r0, [pc, #100]	; (8000e7c <main+0x36c>)
 8000e16:	f002 fbe5 	bl	80035e4 <siprintf>
	  HAL_UART_Transmit(&huart1, (char*)buf4, sprintf(buf4, "%d", J3_IBUS_GetCh(RxIBus, 5)), 100);
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <main+0x340>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2105      	movs	r1, #5
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fa90 	bl	8000346 <J3_IBUS_GetCh>
 8000e26:	4603      	mov	r3, r0
 8000e28:	461a      	mov	r2, r3
 8000e2a:	490c      	ldr	r1, [pc, #48]	; (8000e5c <main+0x34c>)
 8000e2c:	e028      	b.n	8000e80 <main+0x370>
 8000e2e:	bf00      	nop
 8000e30:	080055a8 	.word	0x080055a8
 8000e34:	08003e3c 	.word	0x08003e3c
 8000e38:	08003e48 	.word	0x08003e48
 8000e3c:	08003e54 	.word	0x08003e54
 8000e40:	08003e60 	.word	0x08003e60
 8000e44:	08003e6c 	.word	0x08003e6c
 8000e48:	08003e78 	.word	0x08003e78
 8000e4c:	2000014c 	.word	0x2000014c
 8000e50:	200000f0 	.word	0x200000f0
 8000e54:	08003e84 	.word	0x08003e84
 8000e58:	20000078 	.word	0x20000078
 8000e5c:	08003e8c 	.word	0x08003e8c
 8000e60:	08003e90 	.word	0x08003e90
 8000e64:	08003e94 	.word	0x08003e94
 8000e68:	2000008c 	.word	0x2000008c
 8000e6c:	08003e9c 	.word	0x08003e9c
 8000e70:	200000a0 	.word	0x200000a0
 8000e74:	08003ea4 	.word	0x08003ea4
 8000e78:	200000b4 	.word	0x200000b4
 8000e7c:	200000c8 	.word	0x200000c8
 8000e80:	4836      	ldr	r0, [pc, #216]	; (8000f5c <main+0x44c>)
 8000e82:	f002 fbaf 	bl	80035e4 <siprintf>
 8000e86:	4603      	mov	r3, r0
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	2364      	movs	r3, #100	; 0x64
 8000e8c:	4933      	ldr	r1, [pc, #204]	; (8000f5c <main+0x44c>)
 8000e8e:	4834      	ldr	r0, [pc, #208]	; (8000f60 <main+0x450>)
 8000e90:	f001 ff1d 	bl	8002cce <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, "\r\n", 2, 100);
 8000e94:	2364      	movs	r3, #100	; 0x64
 8000e96:	2202      	movs	r2, #2
 8000e98:	4932      	ldr	r1, [pc, #200]	; (8000f64 <main+0x454>)
 8000e9a:	4831      	ldr	r0, [pc, #196]	; (8000f60 <main+0x450>)
 8000e9c:	f001 ff17 	bl	8002cce <HAL_UART_Transmit>
//	  ILI9341_printText(str, 0, 80, COLOR_WHITE, COLOR_BLACK, 1);
	  LCD_Font(230, 190, buf4, _Open_Sans_Bold_36  , 1, MAGENTA);
 8000ea0:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8000ea4:	9301      	str	r3, [sp, #4]
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	4b2f      	ldr	r3, [pc, #188]	; (8000f68 <main+0x458>)
 8000eac:	4a2b      	ldr	r2, [pc, #172]	; (8000f5c <main+0x44c>)
 8000eae:	21be      	movs	r1, #190	; 0xbe
 8000eb0:	20e6      	movs	r0, #230	; 0xe6
 8000eb2:	f7ff fdb2 	bl	8000a1a <LCD_Font>

	  HAL_UART_Transmit(&huart1, "CH4:", 4, 100);
 8000eb6:	2364      	movs	r3, #100	; 0x64
 8000eb8:	2204      	movs	r2, #4
 8000eba:	492c      	ldr	r1, [pc, #176]	; (8000f6c <main+0x45c>)
 8000ebc:	4828      	ldr	r0, [pc, #160]	; (8000f60 <main+0x450>)
 8000ebe:	f001 ff06 	bl	8002cce <HAL_UART_Transmit>
	  LCD_Font(230, 230, buf5, _Open_Sans_Bold_36  , 1, WHITE);
 8000ec2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	4b26      	ldr	r3, [pc, #152]	; (8000f68 <main+0x458>)
 8000ece:	4a28      	ldr	r2, [pc, #160]	; (8000f70 <main+0x460>)
 8000ed0:	21e6      	movs	r1, #230	; 0xe6
 8000ed2:	20e6      	movs	r0, #230	; 0xe6
 8000ed4:	f7ff fda1 	bl	8000a1a <LCD_Font>
	  sprintf(buf5, "%d", J3_IBUS_GetCh(RxIBus, 6));
 8000ed8:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <main+0x464>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2106      	movs	r1, #6
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fa31 	bl	8000346 <J3_IBUS_GetCh>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4923      	ldr	r1, [pc, #140]	; (8000f78 <main+0x468>)
 8000eea:	4821      	ldr	r0, [pc, #132]	; (8000f70 <main+0x460>)
 8000eec:	f002 fb7a 	bl	80035e4 <siprintf>
	  HAL_UART_Transmit(&huart1, (char*)buf5, sprintf(buf5, "%d", J3_IBUS_GetCh(RxIBus, 6)), 100);
 8000ef0:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <main+0x464>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2106      	movs	r1, #6
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fa25 	bl	8000346 <J3_IBUS_GetCh>
 8000efc:	4603      	mov	r3, r0
 8000efe:	461a      	mov	r2, r3
 8000f00:	491d      	ldr	r1, [pc, #116]	; (8000f78 <main+0x468>)
 8000f02:	481b      	ldr	r0, [pc, #108]	; (8000f70 <main+0x460>)
 8000f04:	f002 fb6e 	bl	80035e4 <siprintf>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	2364      	movs	r3, #100	; 0x64
 8000f0e:	4918      	ldr	r1, [pc, #96]	; (8000f70 <main+0x460>)
 8000f10:	4813      	ldr	r0, [pc, #76]	; (8000f60 <main+0x450>)
 8000f12:	f001 fedc 	bl	8002cce <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, "\r\n", 2, 100);
 8000f16:	2364      	movs	r3, #100	; 0x64
 8000f18:	2202      	movs	r2, #2
 8000f1a:	4912      	ldr	r1, [pc, #72]	; (8000f64 <main+0x454>)
 8000f1c:	4810      	ldr	r0, [pc, #64]	; (8000f60 <main+0x450>)
 8000f1e:	f001 fed6 	bl	8002cce <HAL_UART_Transmit>
//	  ILI9341_printText(str, 0, 100, COLOR_WHITE, COLOR_BLACK, 1);
	  LCD_Font(230, 230, buf5, _Open_Sans_Bold_36  , 1, ORANGE);
 8000f22:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8000f26:	9301      	str	r3, [sp, #4]
 8000f28:	2301      	movs	r3, #1
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <main+0x458>)
 8000f2e:	4a10      	ldr	r2, [pc, #64]	; (8000f70 <main+0x460>)
 8000f30:	21e6      	movs	r1, #230	; 0xe6
 8000f32:	20e6      	movs	r0, #230	; 0xe6
 8000f34:	f7ff fd71 	bl	8000a1a <LCD_Font>





	  HAL_UART_Transmit(&huart1, RxIBus->buffer, 64, 100);
 8000f38:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <main+0x464>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	6899      	ldr	r1, [r3, #8]
 8000f3e:	2364      	movs	r3, #100	; 0x64
 8000f40:	2240      	movs	r2, #64	; 0x40
 8000f42:	4807      	ldr	r0, [pc, #28]	; (8000f60 <main+0x450>)
 8000f44:	f001 fec3 	bl	8002cce <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, "\r\n", 2, 100);
 8000f48:	2364      	movs	r3, #100	; 0x64
 8000f4a:	2202      	movs	r2, #2
 8000f4c:	4905      	ldr	r1, [pc, #20]	; (8000f64 <main+0x454>)
 8000f4e:	4804      	ldr	r0, [pc, #16]	; (8000f60 <main+0x450>)
 8000f50:	f001 febd 	bl	8002cce <HAL_UART_Transmit>
//	  ILI9341_printText(str, 0, 60, COLOR_WHITE, COLOR_BLACK, 1);


	  HAL_Delay(100);
 8000f54:	2064      	movs	r0, #100	; 0x64
 8000f56:	f000 fb1d 	bl	8001594 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, "CH1:", 4, 100);
 8000f5a:	e63e      	b.n	8000bda <main+0xca>
 8000f5c:	200000c8 	.word	0x200000c8
 8000f60:	2000014c 	.word	0x2000014c
 8000f64:	08003e90 	.word	0x08003e90
 8000f68:	080055a8 	.word	0x080055a8
 8000f6c:	08003ea4 	.word	0x08003ea4
 8000f70:	200000dc 	.word	0x200000dc
 8000f74:	200000f0 	.word	0x200000f0
 8000f78:	08003e8c 	.word	0x08003e8c

08000f7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b090      	sub	sp, #64	; 0x40
 8000f80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f82:	f107 0318 	add.w	r3, r7, #24
 8000f86:	2228      	movs	r2, #40	; 0x28
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f002 fb4a 	bl	8003624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
 8000f9c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fac:	2301      	movs	r3, #1
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc0:	f107 0318 	add.w	r3, r7, #24
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 ffa1 	bl	8001f0c <HAL_RCC_OscConfig>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000fd0:	f000 f8fe 	bl	80011d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fe4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2102      	movs	r1, #2
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f001 fa0e 	bl	8002410 <HAL_RCC_ClockConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ffa:	f000 f8e9 	bl	80011d0 <Error_Handler>
  }
}
 8000ffe:	bf00      	nop
 8001000:	3740      	adds	r7, #64	; 0x40
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800100c:	4b17      	ldr	r3, [pc, #92]	; (800106c <MX_SPI2_Init+0x64>)
 800100e:	4a18      	ldr	r2, [pc, #96]	; (8001070 <MX_SPI2_Init+0x68>)
 8001010:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001012:	4b16      	ldr	r3, [pc, #88]	; (800106c <MX_SPI2_Init+0x64>)
 8001014:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001018:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800101a:	4b14      	ldr	r3, [pc, #80]	; (800106c <MX_SPI2_Init+0x64>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <MX_SPI2_Init+0x64>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <MX_SPI2_Init+0x64>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <MX_SPI2_Init+0x64>)
 800102e:	2200      	movs	r2, #0
 8001030:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <MX_SPI2_Init+0x64>)
 8001034:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001038:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800103a:	4b0c      	ldr	r3, [pc, #48]	; (800106c <MX_SPI2_Init+0x64>)
 800103c:	2200      	movs	r2, #0
 800103e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001040:	4b0a      	ldr	r3, [pc, #40]	; (800106c <MX_SPI2_Init+0x64>)
 8001042:	2200      	movs	r2, #0
 8001044:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <MX_SPI2_Init+0x64>)
 8001048:	2200      	movs	r2, #0
 800104a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <MX_SPI2_Init+0x64>)
 800104e:	2200      	movs	r2, #0
 8001050:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <MX_SPI2_Init+0x64>)
 8001054:	220a      	movs	r2, #10
 8001056:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001058:	4804      	ldr	r0, [pc, #16]	; (800106c <MX_SPI2_Init+0x64>)
 800105a:	f001 fb67 	bl	800272c <HAL_SPI_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001064:	f000 f8b4 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200000f4 	.word	0x200000f4
 8001070:	40003800 	.word	0x40003800

08001074 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_USART1_UART_Init+0x4c>)
 800107a:	4a12      	ldr	r2, [pc, #72]	; (80010c4 <MX_USART1_UART_Init+0x50>)
 800107c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <MX_USART1_UART_Init+0x4c>)
 8001080:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001084:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <MX_USART1_UART_Init+0x4c>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_USART1_UART_Init+0x4c>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <MX_USART1_UART_Init+0x4c>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_USART1_UART_Init+0x4c>)
 800109a:	220c      	movs	r2, #12
 800109c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <MX_USART1_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_USART1_UART_Init+0x4c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <MX_USART1_UART_Init+0x4c>)
 80010ac:	f001 fdbf 	bl	8002c2e <HAL_UART_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010b6:	f000 f88b 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	2000014c 	.word	0x2000014c
 80010c4:	40013800 	.word	0x40013800

080010c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <MX_DMA_Init+0x38>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <MX_DMA_Init+0x38>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	6153      	str	r3, [r2, #20]
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <MX_DMA_Init+0x38>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	200f      	movs	r0, #15
 80010ec:	f000 fb4d 	bl	800178a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80010f0:	200f      	movs	r0, #15
 80010f2:	f000 fb66 	bl	80017c2 <HAL_NVIC_EnableIRQ>

}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40021000 	.word	0x40021000

08001104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001118:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <MX_GPIO_Init+0x90>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	4a1d      	ldr	r2, [pc, #116]	; (8001194 <MX_GPIO_Init+0x90>)
 800111e:	f043 0310 	orr.w	r3, r3, #16
 8001122:	6193      	str	r3, [r2, #24]
 8001124:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <MX_GPIO_Init+0x90>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	f003 0310 	and.w	r3, r3, #16
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <MX_GPIO_Init+0x90>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a17      	ldr	r2, [pc, #92]	; (8001194 <MX_GPIO_Init+0x90>)
 8001136:	f043 0320 	orr.w	r3, r3, #32
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <MX_GPIO_Init+0x90>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f003 0320 	and.w	r3, r3, #32
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <MX_GPIO_Init+0x90>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a11      	ldr	r2, [pc, #68]	; (8001194 <MX_GPIO_Init+0x90>)
 800114e:	f043 0308 	orr.w	r3, r3, #8
 8001152:	6193      	str	r3, [r2, #24]
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <MX_GPIO_Init+0x90>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	f003 0308 	and.w	r3, r3, #8
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|RESET_Pin|DC_Pin, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001166:	480c      	ldr	r0, [pc, #48]	; (8001198 <MX_GPIO_Init+0x94>)
 8001168:	f000 feb8 	bl	8001edc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_Pin RESET_Pin DC_Pin */
  GPIO_InitStruct.Pin = CS_Pin|RESET_Pin|DC_Pin;
 800116c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001170:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001172:	2301      	movs	r3, #1
 8001174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2302      	movs	r3, #2
 800117c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117e:	f107 0310 	add.w	r3, r7, #16
 8001182:	4619      	mov	r1, r3
 8001184:	4804      	ldr	r0, [pc, #16]	; (8001198 <MX_GPIO_Init+0x94>)
 8001186:	f000 fd25 	bl	8001bd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800118a:	bf00      	nop
 800118c:	3720      	adds	r7, #32
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000
 8001198:	40011000 	.word	0x40011000

0800119c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]

  J3_IBUS_ProcessBuffer(RxIBus);
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <HAL_UART_RxCpltCallback+0x2c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f82c 	bl	8000206 <J3_IBUS_ProcessBuffer>
  HAL_UART_Receive_DMA(&huart1, RxIBus->buffer, 64);
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_UART_RxCpltCallback+0x2c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	2240      	movs	r2, #64	; 0x40
 80011b6:	4619      	mov	r1, r3
 80011b8:	4804      	ldr	r0, [pc, #16]	; (80011cc <HAL_UART_RxCpltCallback+0x30>)
 80011ba:	f001 fe13 	bl	8002de4 <HAL_UART_Receive_DMA>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200000f0 	.word	0x200000f0
 80011cc:	2000014c 	.word	0x2000014c

080011d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d4:	b672      	cpsid	i
}
 80011d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <Error_Handler+0x8>
	...

080011dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <HAL_MspInit+0x40>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	4a0d      	ldr	r2, [pc, #52]	; (800121c <HAL_MspInit+0x40>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6193      	str	r3, [r2, #24]
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_MspInit+0x40>)
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <HAL_MspInit+0x40>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	4a07      	ldr	r2, [pc, #28]	; (800121c <HAL_MspInit+0x40>)
 8001200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001204:	61d3      	str	r3, [r2, #28]
 8001206:	4b05      	ldr	r3, [pc, #20]	; (800121c <HAL_MspInit+0x40>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120e:	603b      	str	r3, [r7, #0]
 8001210:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	40021000 	.word	0x40021000

08001220 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a16      	ldr	r2, [pc, #88]	; (8001294 <HAL_SPI_MspInit+0x74>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d124      	bne.n	800128a <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <HAL_SPI_MspInit+0x78>)
 8001242:	69db      	ldr	r3, [r3, #28]
 8001244:	4a14      	ldr	r2, [pc, #80]	; (8001298 <HAL_SPI_MspInit+0x78>)
 8001246:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800124a:	61d3      	str	r3, [r2, #28]
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_SPI_MspInit+0x78>)
 800124e:	69db      	ldr	r3, [r3, #28]
 8001250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <HAL_SPI_MspInit+0x78>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <HAL_SPI_MspInit+0x78>)
 800125e:	f043 0308 	orr.w	r3, r3, #8
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <HAL_SPI_MspInit+0x78>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001270:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001274:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800127a:	2303      	movs	r3, #3
 800127c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	4619      	mov	r1, r3
 8001284:	4805      	ldr	r0, [pc, #20]	; (800129c <HAL_SPI_MspInit+0x7c>)
 8001286:	f000 fca5 	bl	8001bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800128a:	bf00      	nop
 800128c:	3720      	adds	r7, #32
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40003800 	.word	0x40003800
 8001298:	40021000 	.word	0x40021000
 800129c:	40010c00 	.word	0x40010c00

080012a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a35      	ldr	r2, [pc, #212]	; (8001390 <HAL_UART_MspInit+0xf0>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d163      	bne.n	8001388 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012c0:	4b34      	ldr	r3, [pc, #208]	; (8001394 <HAL_UART_MspInit+0xf4>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a33      	ldr	r2, [pc, #204]	; (8001394 <HAL_UART_MspInit+0xf4>)
 80012c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b31      	ldr	r3, [pc, #196]	; (8001394 <HAL_UART_MspInit+0xf4>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d8:	4b2e      	ldr	r3, [pc, #184]	; (8001394 <HAL_UART_MspInit+0xf4>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a2d      	ldr	r2, [pc, #180]	; (8001394 <HAL_UART_MspInit+0xf4>)
 80012de:	f043 0308 	orr.w	r3, r3, #8
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b2b      	ldr	r3, [pc, #172]	; (8001394 <HAL_UART_MspInit+0xf4>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012f0:	2340      	movs	r3, #64	; 0x40
 80012f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f8:	2303      	movs	r3, #3
 80012fa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	4825      	ldr	r0, [pc, #148]	; (8001398 <HAL_UART_MspInit+0xf8>)
 8001304:	f000 fc66 	bl	8001bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130c:	2300      	movs	r3, #0
 800130e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	481f      	ldr	r0, [pc, #124]	; (8001398 <HAL_UART_MspInit+0xf8>)
 800131c:	f000 fc5a 	bl	8001bd4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001320:	4b1e      	ldr	r3, [pc, #120]	; (800139c <HAL_UART_MspInit+0xfc>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	f043 0304 	orr.w	r3, r3, #4
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
 8001336:	4a19      	ldr	r2, [pc, #100]	; (800139c <HAL_UART_MspInit+0xfc>)
 8001338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133a:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800133c:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <HAL_UART_MspInit+0x100>)
 800133e:	4a19      	ldr	r2, [pc, #100]	; (80013a4 <HAL_UART_MspInit+0x104>)
 8001340:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <HAL_UART_MspInit+0x100>)
 8001344:	2200      	movs	r2, #0
 8001346:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <HAL_UART_MspInit+0x100>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <HAL_UART_MspInit+0x100>)
 8001350:	2280      	movs	r2, #128	; 0x80
 8001352:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_UART_MspInit+0x100>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <HAL_UART_MspInit+0x100>)
 800135c:	2200      	movs	r2, #0
 800135e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_UART_MspInit+0x100>)
 8001362:	2200      	movs	r2, #0
 8001364:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <HAL_UART_MspInit+0x100>)
 8001368:	2200      	movs	r2, #0
 800136a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800136c:	480c      	ldr	r0, [pc, #48]	; (80013a0 <HAL_UART_MspInit+0x100>)
 800136e:	f000 fa43 	bl	80017f8 <HAL_DMA_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <HAL_UART_MspInit+0xdc>
    {
      Error_Handler();
 8001378:	f7ff ff2a 	bl	80011d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a08      	ldr	r2, [pc, #32]	; (80013a0 <HAL_UART_MspInit+0x100>)
 8001380:	63da      	str	r2, [r3, #60]	; 0x3c
 8001382:	4a07      	ldr	r2, [pc, #28]	; (80013a0 <HAL_UART_MspInit+0x100>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001388:	bf00      	nop
 800138a:	3728      	adds	r7, #40	; 0x28
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40013800 	.word	0x40013800
 8001394:	40021000 	.word	0x40021000
 8001398:	40010c00 	.word	0x40010c00
 800139c:	40010000 	.word	0x40010000
 80013a0:	20000194 	.word	0x20000194
 80013a4:	40020058 	.word	0x40020058

080013a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <NMI_Handler+0x4>

080013ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <HardFault_Handler+0x4>

080013b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <MemManage_Handler+0x4>

080013ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <BusFault_Handler+0x4>

080013c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <UsageFault_Handler+0x4>

080013c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr

080013d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr

080013de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr

080013ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ee:	f000 f8b5 	bl	800155c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <DMA1_Channel5_IRQHandler+0x10>)
 80013fe:	f000 fab5 	bl	800196c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000194 	.word	0x20000194

0800140c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001414:	4a14      	ldr	r2, [pc, #80]	; (8001468 <_sbrk+0x5c>)
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <_sbrk+0x60>)
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <_sbrk+0x64>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d102      	bne.n	800142e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <_sbrk+0x64>)
 800142a:	4a12      	ldr	r2, [pc, #72]	; (8001474 <_sbrk+0x68>)
 800142c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <_sbrk+0x64>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	429a      	cmp	r2, r3
 800143a:	d207      	bcs.n	800144c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800143c:	f002 f90a 	bl	8003654 <__errno>
 8001440:	4603      	mov	r3, r0
 8001442:	220c      	movs	r2, #12
 8001444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
 800144a:	e009      	b.n	8001460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <_sbrk+0x64>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001452:	4b07      	ldr	r3, [pc, #28]	; (8001470 <_sbrk+0x64>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	4a05      	ldr	r2, [pc, #20]	; (8001470 <_sbrk+0x64>)
 800145c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800145e:	68fb      	ldr	r3, [r7, #12]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20005000 	.word	0x20005000
 800146c:	00000400 	.word	0x00000400
 8001470:	200001d8 	.word	0x200001d8
 8001474:	20000328 	.word	0x20000328

08001478 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001484:	f7ff fff8 	bl	8001478 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001488:	480b      	ldr	r0, [pc, #44]	; (80014b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800148a:	490c      	ldr	r1, [pc, #48]	; (80014bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800148c:	4a0c      	ldr	r2, [pc, #48]	; (80014c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001490:	e002      	b.n	8001498 <LoopCopyDataInit>

08001492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001496:	3304      	adds	r3, #4

08001498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800149c:	d3f9      	bcc.n	8001492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149e:	4a09      	ldr	r2, [pc, #36]	; (80014c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014a0:	4c09      	ldr	r4, [pc, #36]	; (80014c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a4:	e001      	b.n	80014aa <LoopFillZerobss>

080014a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a8:	3204      	adds	r2, #4

080014aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ac:	d3fb      	bcc.n	80014a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ae:	f002 f8d7 	bl	8003660 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014b2:	f7ff fb2d 	bl	8000b10 <main>
  bx lr
 80014b6:	4770      	bx	lr
  ldr r0, =_sdata
 80014b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014bc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80014c0:	0800561c 	.word	0x0800561c
  ldr r2, =_sbss
 80014c4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80014c8:	20000328 	.word	0x20000328

080014cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014cc:	e7fe      	b.n	80014cc <ADC1_2_IRQHandler>
	...

080014d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <HAL_Init+0x28>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a07      	ldr	r2, [pc, #28]	; (80014f8 <HAL_Init+0x28>)
 80014da:	f043 0310 	orr.w	r3, r3, #16
 80014de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e0:	2003      	movs	r0, #3
 80014e2:	f000 f947 	bl	8001774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014e6:	200f      	movs	r0, #15
 80014e8:	f000 f808 	bl	80014fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014ec:	f7ff fe76 	bl	80011dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40022000 	.word	0x40022000

080014fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_InitTick+0x54>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_InitTick+0x58>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001512:	fbb3 f3f1 	udiv	r3, r3, r1
 8001516:	fbb2 f3f3 	udiv	r3, r2, r3
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f95f 	bl	80017de <HAL_SYSTICK_Config>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e00e      	b.n	8001548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b0f      	cmp	r3, #15
 800152e:	d80a      	bhi.n	8001546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001530:	2200      	movs	r2, #0
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	f04f 30ff 	mov.w	r0, #4294967295
 8001538:	f000 f927 	bl	800178a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800153c:	4a06      	ldr	r2, [pc, #24]	; (8001558 <HAL_InitTick+0x5c>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	e000      	b.n	8001548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000000 	.word	0x20000000
 8001554:	20000008 	.word	0x20000008
 8001558:	20000004 	.word	0x20000004

0800155c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <HAL_IncTick+0x1c>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_IncTick+0x20>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4413      	add	r3, r2
 800156c:	4a03      	ldr	r2, [pc, #12]	; (800157c <HAL_IncTick+0x20>)
 800156e:	6013      	str	r3, [r2, #0]
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	20000008 	.word	0x20000008
 800157c:	200001dc 	.word	0x200001dc

08001580 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return uwTick;
 8001584:	4b02      	ldr	r3, [pc, #8]	; (8001590 <HAL_GetTick+0x10>)
 8001586:	681b      	ldr	r3, [r3, #0]
}
 8001588:	4618      	mov	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr
 8001590:	200001dc 	.word	0x200001dc

08001594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800159c:	f7ff fff0 	bl	8001580 <HAL_GetTick>
 80015a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ac:	d005      	beq.n	80015ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_Delay+0x44>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ba:	bf00      	nop
 80015bc:	f7ff ffe0 	bl	8001580 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d8f7      	bhi.n	80015bc <HAL_Delay+0x28>
  {
  }
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000008 	.word	0x20000008

080015dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015f8:	4013      	ands	r3, r2
 80015fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800160c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800160e:	4a04      	ldr	r2, [pc, #16]	; (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	60d3      	str	r3, [r2, #12]
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001628:	4b04      	ldr	r3, [pc, #16]	; (800163c <__NVIC_GetPriorityGrouping+0x18>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	0a1b      	lsrs	r3, r3, #8
 800162e:	f003 0307 	and.w	r3, r3, #7
}
 8001632:	4618      	mov	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	2b00      	cmp	r3, #0
 8001650:	db0b      	blt.n	800166a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	f003 021f 	and.w	r2, r3, #31
 8001658:	4906      	ldr	r1, [pc, #24]	; (8001674 <__NVIC_EnableIRQ+0x34>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	095b      	lsrs	r3, r3, #5
 8001660:	2001      	movs	r0, #1
 8001662:	fa00 f202 	lsl.w	r2, r0, r2
 8001666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	e000e100 	.word	0xe000e100

08001678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	db0a      	blt.n	80016a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	b2da      	uxtb	r2, r3
 8001690:	490c      	ldr	r1, [pc, #48]	; (80016c4 <__NVIC_SetPriority+0x4c>)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	0112      	lsls	r2, r2, #4
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	440b      	add	r3, r1
 800169c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a0:	e00a      	b.n	80016b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4908      	ldr	r1, [pc, #32]	; (80016c8 <__NVIC_SetPriority+0x50>)
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	3b04      	subs	r3, #4
 80016b0:	0112      	lsls	r2, r2, #4
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	440b      	add	r3, r1
 80016b6:	761a      	strb	r2, [r3, #24]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000e100 	.word	0xe000e100
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	; 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f1c3 0307 	rsb	r3, r3, #7
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	bf28      	it	cs
 80016ea:	2304      	movcs	r3, #4
 80016ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3304      	adds	r3, #4
 80016f2:	2b06      	cmp	r3, #6
 80016f4:	d902      	bls.n	80016fc <NVIC_EncodePriority+0x30>
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3b03      	subs	r3, #3
 80016fa:	e000      	b.n	80016fe <NVIC_EncodePriority+0x32>
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	f04f 32ff 	mov.w	r2, #4294967295
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43da      	mvns	r2, r3
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	401a      	ands	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001714:	f04f 31ff 	mov.w	r1, #4294967295
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	fa01 f303 	lsl.w	r3, r1, r3
 800171e:	43d9      	mvns	r1, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	4313      	orrs	r3, r2
         );
}
 8001726:	4618      	mov	r0, r3
 8001728:	3724      	adds	r7, #36	; 0x24
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001740:	d301      	bcc.n	8001746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001742:	2301      	movs	r3, #1
 8001744:	e00f      	b.n	8001766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001746:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <SysTick_Config+0x40>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800174e:	210f      	movs	r1, #15
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f7ff ff90 	bl	8001678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <SysTick_Config+0x40>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800175e:	4b04      	ldr	r3, [pc, #16]	; (8001770 <SysTick_Config+0x40>)
 8001760:	2207      	movs	r2, #7
 8001762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	e000e010 	.word	0xe000e010

08001774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff2d 	bl	80015dc <__NVIC_SetPriorityGrouping>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
 8001796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800179c:	f7ff ff42 	bl	8001624 <__NVIC_GetPriorityGrouping>
 80017a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	6978      	ldr	r0, [r7, #20]
 80017a8:	f7ff ff90 	bl	80016cc <NVIC_EncodePriority>
 80017ac:	4602      	mov	r2, r0
 80017ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff5f 	bl	8001678 <__NVIC_SetPriority>
}
 80017ba:	bf00      	nop
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	4603      	mov	r3, r0
 80017ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff35 	bl	8001640 <__NVIC_EnableIRQ>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff ffa2 	bl	8001730 <SysTick_Config>
 80017ec:	4603      	mov	r3, r0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e043      	b.n	8001896 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <HAL_DMA_Init+0xa8>)
 8001816:	4413      	add	r3, r2
 8001818:	4a22      	ldr	r2, [pc, #136]	; (80018a4 <HAL_DMA_Init+0xac>)
 800181a:	fba2 2303 	umull	r2, r3, r2, r3
 800181e:	091b      	lsrs	r3, r3, #4
 8001820:	009a      	lsls	r2, r3, #2
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a1f      	ldr	r2, [pc, #124]	; (80018a8 <HAL_DMA_Init+0xb0>)
 800182a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2202      	movs	r2, #2
 8001830:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001842:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001846:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001850:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800185c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001868:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	4313      	orrs	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	bffdfff8 	.word	0xbffdfff8
 80018a4:	cccccccd 	.word	0xcccccccd
 80018a8:	40020000 	.word	0x40020000

080018ac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d101      	bne.n	80018cc <HAL_DMA_Start_IT+0x20>
 80018c8:	2302      	movs	r3, #2
 80018ca:	e04b      	b.n	8001964 <HAL_DMA_Start_IT+0xb8>
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d13a      	bne.n	8001956 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2202      	movs	r2, #2
 80018e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 0201 	bic.w	r2, r2, #1
 80018fc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	68b9      	ldr	r1, [r7, #8]
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f000 f937 	bl	8001b78 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190e:	2b00      	cmp	r3, #0
 8001910:	d008      	beq.n	8001924 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f042 020e 	orr.w	r2, r2, #14
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	e00f      	b.n	8001944 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0204 	bic.w	r2, r2, #4
 8001932:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 020a 	orr.w	r2, r2, #10
 8001942:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0201 	orr.w	r2, r2, #1
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	e005      	b.n	8001962 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800195e:	2302      	movs	r3, #2
 8001960:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001962:	7dfb      	ldrb	r3, [r7, #23]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	2204      	movs	r2, #4
 800198a:	409a      	lsls	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4013      	ands	r3, r2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d04f      	beq.n	8001a34 <HAL_DMA_IRQHandler+0xc8>
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	2b00      	cmp	r3, #0
 800199c:	d04a      	beq.n	8001a34 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0320 	and.w	r3, r3, #32
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d107      	bne.n	80019bc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0204 	bic.w	r2, r2, #4
 80019ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a66      	ldr	r2, [pc, #408]	; (8001b5c <HAL_DMA_IRQHandler+0x1f0>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d029      	beq.n	8001a1a <HAL_DMA_IRQHandler+0xae>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a65      	ldr	r2, [pc, #404]	; (8001b60 <HAL_DMA_IRQHandler+0x1f4>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d022      	beq.n	8001a16 <HAL_DMA_IRQHandler+0xaa>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a63      	ldr	r2, [pc, #396]	; (8001b64 <HAL_DMA_IRQHandler+0x1f8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d01a      	beq.n	8001a10 <HAL_DMA_IRQHandler+0xa4>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a62      	ldr	r2, [pc, #392]	; (8001b68 <HAL_DMA_IRQHandler+0x1fc>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d012      	beq.n	8001a0a <HAL_DMA_IRQHandler+0x9e>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a60      	ldr	r2, [pc, #384]	; (8001b6c <HAL_DMA_IRQHandler+0x200>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d00a      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x98>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a5f      	ldr	r2, [pc, #380]	; (8001b70 <HAL_DMA_IRQHandler+0x204>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d102      	bne.n	80019fe <HAL_DMA_IRQHandler+0x92>
 80019f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019fc:	e00e      	b.n	8001a1c <HAL_DMA_IRQHandler+0xb0>
 80019fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a02:	e00b      	b.n	8001a1c <HAL_DMA_IRQHandler+0xb0>
 8001a04:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a08:	e008      	b.n	8001a1c <HAL_DMA_IRQHandler+0xb0>
 8001a0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a0e:	e005      	b.n	8001a1c <HAL_DMA_IRQHandler+0xb0>
 8001a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a14:	e002      	b.n	8001a1c <HAL_DMA_IRQHandler+0xb0>
 8001a16:	2340      	movs	r3, #64	; 0x40
 8001a18:	e000      	b.n	8001a1c <HAL_DMA_IRQHandler+0xb0>
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	4a55      	ldr	r2, [pc, #340]	; (8001b74 <HAL_DMA_IRQHandler+0x208>)
 8001a1e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 8094 	beq.w	8001b52 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a32:	e08e      	b.n	8001b52 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	2202      	movs	r2, #2
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d056      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x186>
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d051      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0320 	and.w	r3, r3, #32
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10b      	bne.n	8001a74 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 020a 	bic.w	r2, r2, #10
 8001a6a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a38      	ldr	r2, [pc, #224]	; (8001b5c <HAL_DMA_IRQHandler+0x1f0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d029      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x166>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a37      	ldr	r2, [pc, #220]	; (8001b60 <HAL_DMA_IRQHandler+0x1f4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d022      	beq.n	8001ace <HAL_DMA_IRQHandler+0x162>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a35      	ldr	r2, [pc, #212]	; (8001b64 <HAL_DMA_IRQHandler+0x1f8>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d01a      	beq.n	8001ac8 <HAL_DMA_IRQHandler+0x15c>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a34      	ldr	r2, [pc, #208]	; (8001b68 <HAL_DMA_IRQHandler+0x1fc>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d012      	beq.n	8001ac2 <HAL_DMA_IRQHandler+0x156>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a32      	ldr	r2, [pc, #200]	; (8001b6c <HAL_DMA_IRQHandler+0x200>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d00a      	beq.n	8001abc <HAL_DMA_IRQHandler+0x150>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a31      	ldr	r2, [pc, #196]	; (8001b70 <HAL_DMA_IRQHandler+0x204>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d102      	bne.n	8001ab6 <HAL_DMA_IRQHandler+0x14a>
 8001ab0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ab4:	e00e      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x168>
 8001ab6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aba:	e00b      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x168>
 8001abc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ac0:	e008      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x168>
 8001ac2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ac6:	e005      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x168>
 8001ac8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001acc:	e002      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x168>
 8001ace:	2320      	movs	r3, #32
 8001ad0:	e000      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x168>
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	4a27      	ldr	r2, [pc, #156]	; (8001b74 <HAL_DMA_IRQHandler+0x208>)
 8001ad6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d034      	beq.n	8001b52 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001af0:	e02f      	b.n	8001b52 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	2208      	movs	r2, #8
 8001af8:	409a      	lsls	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4013      	ands	r3, r2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d028      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x1e8>
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d023      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 020e 	bic.w	r2, r2, #14
 8001b1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b24:	2101      	movs	r1, #1
 8001b26:	fa01 f202 	lsl.w	r2, r1, r2
 8001b2a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d004      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	4798      	blx	r3
    }
  }
  return;
 8001b52:	bf00      	nop
 8001b54:	bf00      	nop
}
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40020008 	.word	0x40020008
 8001b60:	4002001c 	.word	0x4002001c
 8001b64:	40020030 	.word	0x40020030
 8001b68:	40020044 	.word	0x40020044
 8001b6c:	40020058 	.word	0x40020058
 8001b70:	4002006c 	.word	0x4002006c
 8001b74:	40020000 	.word	0x40020000

08001b78 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
 8001b84:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8e:	2101      	movs	r1, #1
 8001b90:	fa01 f202 	lsl.w	r2, r1, r2
 8001b94:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b10      	cmp	r3, #16
 8001ba4:	d108      	bne.n	8001bb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001bb6:	e007      	b.n	8001bc8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68ba      	ldr	r2, [r7, #8]
 8001bbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	60da      	str	r2, [r3, #12]
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
	...

08001bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b08b      	sub	sp, #44	; 0x2c
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bde:	2300      	movs	r3, #0
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001be2:	2300      	movs	r3, #0
 8001be4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001be6:	e169      	b.n	8001ebc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001be8:	2201      	movs	r2, #1
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	69fa      	ldr	r2, [r7, #28]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	f040 8158 	bne.w	8001eb6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	4a9a      	ldr	r2, [pc, #616]	; (8001e74 <HAL_GPIO_Init+0x2a0>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d05e      	beq.n	8001cce <HAL_GPIO_Init+0xfa>
 8001c10:	4a98      	ldr	r2, [pc, #608]	; (8001e74 <HAL_GPIO_Init+0x2a0>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d875      	bhi.n	8001d02 <HAL_GPIO_Init+0x12e>
 8001c16:	4a98      	ldr	r2, [pc, #608]	; (8001e78 <HAL_GPIO_Init+0x2a4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d058      	beq.n	8001cce <HAL_GPIO_Init+0xfa>
 8001c1c:	4a96      	ldr	r2, [pc, #600]	; (8001e78 <HAL_GPIO_Init+0x2a4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d86f      	bhi.n	8001d02 <HAL_GPIO_Init+0x12e>
 8001c22:	4a96      	ldr	r2, [pc, #600]	; (8001e7c <HAL_GPIO_Init+0x2a8>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d052      	beq.n	8001cce <HAL_GPIO_Init+0xfa>
 8001c28:	4a94      	ldr	r2, [pc, #592]	; (8001e7c <HAL_GPIO_Init+0x2a8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d869      	bhi.n	8001d02 <HAL_GPIO_Init+0x12e>
 8001c2e:	4a94      	ldr	r2, [pc, #592]	; (8001e80 <HAL_GPIO_Init+0x2ac>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d04c      	beq.n	8001cce <HAL_GPIO_Init+0xfa>
 8001c34:	4a92      	ldr	r2, [pc, #584]	; (8001e80 <HAL_GPIO_Init+0x2ac>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d863      	bhi.n	8001d02 <HAL_GPIO_Init+0x12e>
 8001c3a:	4a92      	ldr	r2, [pc, #584]	; (8001e84 <HAL_GPIO_Init+0x2b0>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d046      	beq.n	8001cce <HAL_GPIO_Init+0xfa>
 8001c40:	4a90      	ldr	r2, [pc, #576]	; (8001e84 <HAL_GPIO_Init+0x2b0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d85d      	bhi.n	8001d02 <HAL_GPIO_Init+0x12e>
 8001c46:	2b12      	cmp	r3, #18
 8001c48:	d82a      	bhi.n	8001ca0 <HAL_GPIO_Init+0xcc>
 8001c4a:	2b12      	cmp	r3, #18
 8001c4c:	d859      	bhi.n	8001d02 <HAL_GPIO_Init+0x12e>
 8001c4e:	a201      	add	r2, pc, #4	; (adr r2, 8001c54 <HAL_GPIO_Init+0x80>)
 8001c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c54:	08001ccf 	.word	0x08001ccf
 8001c58:	08001ca9 	.word	0x08001ca9
 8001c5c:	08001cbb 	.word	0x08001cbb
 8001c60:	08001cfd 	.word	0x08001cfd
 8001c64:	08001d03 	.word	0x08001d03
 8001c68:	08001d03 	.word	0x08001d03
 8001c6c:	08001d03 	.word	0x08001d03
 8001c70:	08001d03 	.word	0x08001d03
 8001c74:	08001d03 	.word	0x08001d03
 8001c78:	08001d03 	.word	0x08001d03
 8001c7c:	08001d03 	.word	0x08001d03
 8001c80:	08001d03 	.word	0x08001d03
 8001c84:	08001d03 	.word	0x08001d03
 8001c88:	08001d03 	.word	0x08001d03
 8001c8c:	08001d03 	.word	0x08001d03
 8001c90:	08001d03 	.word	0x08001d03
 8001c94:	08001d03 	.word	0x08001d03
 8001c98:	08001cb1 	.word	0x08001cb1
 8001c9c:	08001cc5 	.word	0x08001cc5
 8001ca0:	4a79      	ldr	r2, [pc, #484]	; (8001e88 <HAL_GPIO_Init+0x2b4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d013      	beq.n	8001cce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ca6:	e02c      	b.n	8001d02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	623b      	str	r3, [r7, #32]
          break;
 8001cae:	e029      	b.n	8001d04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	623b      	str	r3, [r7, #32]
          break;
 8001cb8:	e024      	b.n	8001d04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	3308      	adds	r3, #8
 8001cc0:	623b      	str	r3, [r7, #32]
          break;
 8001cc2:	e01f      	b.n	8001d04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	330c      	adds	r3, #12
 8001cca:	623b      	str	r3, [r7, #32]
          break;
 8001ccc:	e01a      	b.n	8001d04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d102      	bne.n	8001cdc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	623b      	str	r3, [r7, #32]
          break;
 8001cda:	e013      	b.n	8001d04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d105      	bne.n	8001cf0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ce4:	2308      	movs	r3, #8
 8001ce6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69fa      	ldr	r2, [r7, #28]
 8001cec:	611a      	str	r2, [r3, #16]
          break;
 8001cee:	e009      	b.n	8001d04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cf0:	2308      	movs	r3, #8
 8001cf2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69fa      	ldr	r2, [r7, #28]
 8001cf8:	615a      	str	r2, [r3, #20]
          break;
 8001cfa:	e003      	b.n	8001d04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	623b      	str	r3, [r7, #32]
          break;
 8001d00:	e000      	b.n	8001d04 <HAL_GPIO_Init+0x130>
          break;
 8001d02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	2bff      	cmp	r3, #255	; 0xff
 8001d08:	d801      	bhi.n	8001d0e <HAL_GPIO_Init+0x13a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	e001      	b.n	8001d12 <HAL_GPIO_Init+0x13e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3304      	adds	r3, #4
 8001d12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	2bff      	cmp	r3, #255	; 0xff
 8001d18:	d802      	bhi.n	8001d20 <HAL_GPIO_Init+0x14c>
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	e002      	b.n	8001d26 <HAL_GPIO_Init+0x152>
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	3b08      	subs	r3, #8
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	210f      	movs	r1, #15
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	fa01 f303 	lsl.w	r3, r1, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	401a      	ands	r2, r3
 8001d38:	6a39      	ldr	r1, [r7, #32]
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d40:	431a      	orrs	r2, r3
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 80b1 	beq.w	8001eb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d54:	4b4d      	ldr	r3, [pc, #308]	; (8001e8c <HAL_GPIO_Init+0x2b8>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	4a4c      	ldr	r2, [pc, #304]	; (8001e8c <HAL_GPIO_Init+0x2b8>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6193      	str	r3, [r2, #24]
 8001d60:	4b4a      	ldr	r3, [pc, #296]	; (8001e8c <HAL_GPIO_Init+0x2b8>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d6c:	4a48      	ldr	r2, [pc, #288]	; (8001e90 <HAL_GPIO_Init+0x2bc>)
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	089b      	lsrs	r3, r3, #2
 8001d72:	3302      	adds	r3, #2
 8001d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	220f      	movs	r2, #15
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a40      	ldr	r2, [pc, #256]	; (8001e94 <HAL_GPIO_Init+0x2c0>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d013      	beq.n	8001dc0 <HAL_GPIO_Init+0x1ec>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a3f      	ldr	r2, [pc, #252]	; (8001e98 <HAL_GPIO_Init+0x2c4>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d00d      	beq.n	8001dbc <HAL_GPIO_Init+0x1e8>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a3e      	ldr	r2, [pc, #248]	; (8001e9c <HAL_GPIO_Init+0x2c8>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d007      	beq.n	8001db8 <HAL_GPIO_Init+0x1e4>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a3d      	ldr	r2, [pc, #244]	; (8001ea0 <HAL_GPIO_Init+0x2cc>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d101      	bne.n	8001db4 <HAL_GPIO_Init+0x1e0>
 8001db0:	2303      	movs	r3, #3
 8001db2:	e006      	b.n	8001dc2 <HAL_GPIO_Init+0x1ee>
 8001db4:	2304      	movs	r3, #4
 8001db6:	e004      	b.n	8001dc2 <HAL_GPIO_Init+0x1ee>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e002      	b.n	8001dc2 <HAL_GPIO_Init+0x1ee>
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e000      	b.n	8001dc2 <HAL_GPIO_Init+0x1ee>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc4:	f002 0203 	and.w	r2, r2, #3
 8001dc8:	0092      	lsls	r2, r2, #2
 8001dca:	4093      	lsls	r3, r2
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dd2:	492f      	ldr	r1, [pc, #188]	; (8001e90 <HAL_GPIO_Init+0x2bc>)
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	3302      	adds	r3, #2
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d006      	beq.n	8001dfa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dec:	4b2d      	ldr	r3, [pc, #180]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	492c      	ldr	r1, [pc, #176]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	608b      	str	r3, [r1, #8]
 8001df8:	e006      	b.n	8001e08 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dfa:	4b2a      	ldr	r3, [pc, #168]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	4928      	ldr	r1, [pc, #160]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d006      	beq.n	8001e22 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e14:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e16:	68da      	ldr	r2, [r3, #12]
 8001e18:	4922      	ldr	r1, [pc, #136]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	60cb      	str	r3, [r1, #12]
 8001e20:	e006      	b.n	8001e30 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e22:	4b20      	ldr	r3, [pc, #128]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	491e      	ldr	r1, [pc, #120]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d006      	beq.n	8001e4a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e3c:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	4918      	ldr	r1, [pc, #96]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	604b      	str	r3, [r1, #4]
 8001e48:	e006      	b.n	8001e58 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e4a:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	4914      	ldr	r1, [pc, #80]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d021      	beq.n	8001ea8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e64:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	490e      	ldr	r1, [pc, #56]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	600b      	str	r3, [r1, #0]
 8001e70:	e021      	b.n	8001eb6 <HAL_GPIO_Init+0x2e2>
 8001e72:	bf00      	nop
 8001e74:	10320000 	.word	0x10320000
 8001e78:	10310000 	.word	0x10310000
 8001e7c:	10220000 	.word	0x10220000
 8001e80:	10210000 	.word	0x10210000
 8001e84:	10120000 	.word	0x10120000
 8001e88:	10110000 	.word	0x10110000
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40010000 	.word	0x40010000
 8001e94:	40010800 	.word	0x40010800
 8001e98:	40010c00 	.word	0x40010c00
 8001e9c:	40011000 	.word	0x40011000
 8001ea0:	40011400 	.word	0x40011400
 8001ea4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <HAL_GPIO_Init+0x304>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	4909      	ldr	r1, [pc, #36]	; (8001ed8 <HAL_GPIO_Init+0x304>)
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	3301      	adds	r3, #1
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f47f ae8e 	bne.w	8001be8 <HAL_GPIO_Init+0x14>
  }
}
 8001ecc:	bf00      	nop
 8001ece:	bf00      	nop
 8001ed0:	372c      	adds	r7, #44	; 0x2c
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr
 8001ed8:	40010400 	.word	0x40010400

08001edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	807b      	strh	r3, [r7, #2]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eec:	787b      	ldrb	r3, [r7, #1]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ef2:	887a      	ldrh	r2, [r7, #2]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ef8:	e003      	b.n	8001f02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001efa:	887b      	ldrh	r3, [r7, #2]
 8001efc:	041a      	lsls	r2, r3, #16
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	611a      	str	r2, [r3, #16]
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e272      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 8087 	beq.w	800203a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f2c:	4b92      	ldr	r3, [pc, #584]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 030c 	and.w	r3, r3, #12
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d00c      	beq.n	8001f52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f38:	4b8f      	ldr	r3, [pc, #572]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 030c 	and.w	r3, r3, #12
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d112      	bne.n	8001f6a <HAL_RCC_OscConfig+0x5e>
 8001f44:	4b8c      	ldr	r3, [pc, #560]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f50:	d10b      	bne.n	8001f6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f52:	4b89      	ldr	r3, [pc, #548]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d06c      	beq.n	8002038 <HAL_RCC_OscConfig+0x12c>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d168      	bne.n	8002038 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e24c      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f72:	d106      	bne.n	8001f82 <HAL_RCC_OscConfig+0x76>
 8001f74:	4b80      	ldr	r3, [pc, #512]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a7f      	ldr	r2, [pc, #508]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	e02e      	b.n	8001fe0 <HAL_RCC_OscConfig+0xd4>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10c      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x98>
 8001f8a:	4b7b      	ldr	r3, [pc, #492]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a7a      	ldr	r2, [pc, #488]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	4b78      	ldr	r3, [pc, #480]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a77      	ldr	r2, [pc, #476]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	e01d      	b.n	8001fe0 <HAL_RCC_OscConfig+0xd4>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fac:	d10c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0xbc>
 8001fae:	4b72      	ldr	r3, [pc, #456]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a71      	ldr	r2, [pc, #452]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	4b6f      	ldr	r3, [pc, #444]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a6e      	ldr	r2, [pc, #440]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	e00b      	b.n	8001fe0 <HAL_RCC_OscConfig+0xd4>
 8001fc8:	4b6b      	ldr	r3, [pc, #428]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a6a      	ldr	r2, [pc, #424]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd2:	6013      	str	r3, [r2, #0]
 8001fd4:	4b68      	ldr	r3, [pc, #416]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a67      	ldr	r2, [pc, #412]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d013      	beq.n	8002010 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe8:	f7ff faca 	bl	8001580 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff0:	f7ff fac6 	bl	8001580 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b64      	cmp	r3, #100	; 0x64
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e200      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002002:	4b5d      	ldr	r3, [pc, #372]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0xe4>
 800200e:	e014      	b.n	800203a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002010:	f7ff fab6 	bl	8001580 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002018:	f7ff fab2 	bl	8001580 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b64      	cmp	r3, #100	; 0x64
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e1ec      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800202a:	4b53      	ldr	r3, [pc, #332]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0x10c>
 8002036:	e000      	b.n	800203a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d063      	beq.n	800210e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002046:	4b4c      	ldr	r3, [pc, #304]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00b      	beq.n	800206a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002052:	4b49      	ldr	r3, [pc, #292]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 030c 	and.w	r3, r3, #12
 800205a:	2b08      	cmp	r3, #8
 800205c:	d11c      	bne.n	8002098 <HAL_RCC_OscConfig+0x18c>
 800205e:	4b46      	ldr	r3, [pc, #280]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d116      	bne.n	8002098 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800206a:	4b43      	ldr	r3, [pc, #268]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d005      	beq.n	8002082 <HAL_RCC_OscConfig+0x176>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d001      	beq.n	8002082 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e1c0      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002082:	4b3d      	ldr	r3, [pc, #244]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4939      	ldr	r1, [pc, #228]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8002092:	4313      	orrs	r3, r2
 8002094:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002096:	e03a      	b.n	800210e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d020      	beq.n	80020e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020a0:	4b36      	ldr	r3, [pc, #216]	; (800217c <HAL_RCC_OscConfig+0x270>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a6:	f7ff fa6b 	bl	8001580 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ae:	f7ff fa67 	bl	8001580 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e1a1      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c0:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f0      	beq.n	80020ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020cc:	4b2a      	ldr	r3, [pc, #168]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4927      	ldr	r1, [pc, #156]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	600b      	str	r3, [r1, #0]
 80020e0:	e015      	b.n	800210e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020e2:	4b26      	ldr	r3, [pc, #152]	; (800217c <HAL_RCC_OscConfig+0x270>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7ff fa4a 	bl	8001580 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f0:	f7ff fa46 	bl	8001580 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e180      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002102:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f0      	bne.n	80020f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d03a      	beq.n	8002190 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d019      	beq.n	8002156 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002122:	4b17      	ldr	r3, [pc, #92]	; (8002180 <HAL_RCC_OscConfig+0x274>)
 8002124:	2201      	movs	r2, #1
 8002126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002128:	f7ff fa2a 	bl	8001580 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002130:	f7ff fa26 	bl	8001580 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e160      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002142:	4b0d      	ldr	r3, [pc, #52]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800214e:	2001      	movs	r0, #1
 8002150:	f000 face 	bl	80026f0 <RCC_Delay>
 8002154:	e01c      	b.n	8002190 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002156:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <HAL_RCC_OscConfig+0x274>)
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215c:	f7ff fa10 	bl	8001580 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002162:	e00f      	b.n	8002184 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002164:	f7ff fa0c 	bl	8001580 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d908      	bls.n	8002184 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e146      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
 8002176:	bf00      	nop
 8002178:	40021000 	.word	0x40021000
 800217c:	42420000 	.word	0x42420000
 8002180:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002184:	4b92      	ldr	r3, [pc, #584]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1e9      	bne.n	8002164 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80a6 	beq.w	80022ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800219e:	2300      	movs	r3, #0
 80021a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021a2:	4b8b      	ldr	r3, [pc, #556]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10d      	bne.n	80021ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ae:	4b88      	ldr	r3, [pc, #544]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	4a87      	ldr	r2, [pc, #540]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 80021b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b8:	61d3      	str	r3, [r2, #28]
 80021ba:	4b85      	ldr	r3, [pc, #532]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021c6:	2301      	movs	r3, #1
 80021c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ca:	4b82      	ldr	r3, [pc, #520]	; (80023d4 <HAL_RCC_OscConfig+0x4c8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d118      	bne.n	8002208 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021d6:	4b7f      	ldr	r3, [pc, #508]	; (80023d4 <HAL_RCC_OscConfig+0x4c8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a7e      	ldr	r2, [pc, #504]	; (80023d4 <HAL_RCC_OscConfig+0x4c8>)
 80021dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021e2:	f7ff f9cd 	bl	8001580 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ea:	f7ff f9c9 	bl	8001580 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b64      	cmp	r3, #100	; 0x64
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e103      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fc:	4b75      	ldr	r3, [pc, #468]	; (80023d4 <HAL_RCC_OscConfig+0x4c8>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0f0      	beq.n	80021ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d106      	bne.n	800221e <HAL_RCC_OscConfig+0x312>
 8002210:	4b6f      	ldr	r3, [pc, #444]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	4a6e      	ldr	r2, [pc, #440]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	6213      	str	r3, [r2, #32]
 800221c:	e02d      	b.n	800227a <HAL_RCC_OscConfig+0x36e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10c      	bne.n	8002240 <HAL_RCC_OscConfig+0x334>
 8002226:	4b6a      	ldr	r3, [pc, #424]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	4a69      	ldr	r2, [pc, #420]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 800222c:	f023 0301 	bic.w	r3, r3, #1
 8002230:	6213      	str	r3, [r2, #32]
 8002232:	4b67      	ldr	r3, [pc, #412]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	4a66      	ldr	r2, [pc, #408]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 8002238:	f023 0304 	bic.w	r3, r3, #4
 800223c:	6213      	str	r3, [r2, #32]
 800223e:	e01c      	b.n	800227a <HAL_RCC_OscConfig+0x36e>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	2b05      	cmp	r3, #5
 8002246:	d10c      	bne.n	8002262 <HAL_RCC_OscConfig+0x356>
 8002248:	4b61      	ldr	r3, [pc, #388]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	4a60      	ldr	r2, [pc, #384]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 800224e:	f043 0304 	orr.w	r3, r3, #4
 8002252:	6213      	str	r3, [r2, #32]
 8002254:	4b5e      	ldr	r3, [pc, #376]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	4a5d      	ldr	r2, [pc, #372]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	6213      	str	r3, [r2, #32]
 8002260:	e00b      	b.n	800227a <HAL_RCC_OscConfig+0x36e>
 8002262:	4b5b      	ldr	r3, [pc, #364]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	4a5a      	ldr	r2, [pc, #360]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 8002268:	f023 0301 	bic.w	r3, r3, #1
 800226c:	6213      	str	r3, [r2, #32]
 800226e:	4b58      	ldr	r3, [pc, #352]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	4a57      	ldr	r2, [pc, #348]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 8002274:	f023 0304 	bic.w	r3, r3, #4
 8002278:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d015      	beq.n	80022ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002282:	f7ff f97d 	bl	8001580 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002288:	e00a      	b.n	80022a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228a:	f7ff f979 	bl	8001580 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	f241 3288 	movw	r2, #5000	; 0x1388
 8002298:	4293      	cmp	r3, r2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e0b1      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a0:	4b4b      	ldr	r3, [pc, #300]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0ee      	beq.n	800228a <HAL_RCC_OscConfig+0x37e>
 80022ac:	e014      	b.n	80022d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ae:	f7ff f967 	bl	8001580 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b4:	e00a      	b.n	80022cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b6:	f7ff f963 	bl	8001580 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e09b      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022cc:	4b40      	ldr	r3, [pc, #256]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1ee      	bne.n	80022b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022d8:	7dfb      	ldrb	r3, [r7, #23]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d105      	bne.n	80022ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022de:	4b3c      	ldr	r3, [pc, #240]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	4a3b      	ldr	r2, [pc, #236]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 8087 	beq.w	8002402 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022f4:	4b36      	ldr	r3, [pc, #216]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 030c 	and.w	r3, r3, #12
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d061      	beq.n	80023c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	2b02      	cmp	r3, #2
 8002306:	d146      	bne.n	8002396 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002308:	4b33      	ldr	r3, [pc, #204]	; (80023d8 <HAL_RCC_OscConfig+0x4cc>)
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230e:	f7ff f937 	bl	8001580 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002316:	f7ff f933 	bl	8001580 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e06d      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002328:	4b29      	ldr	r3, [pc, #164]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f0      	bne.n	8002316 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233c:	d108      	bne.n	8002350 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800233e:	4b24      	ldr	r3, [pc, #144]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	4921      	ldr	r1, [pc, #132]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 800234c:	4313      	orrs	r3, r2
 800234e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002350:	4b1f      	ldr	r3, [pc, #124]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a19      	ldr	r1, [r3, #32]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	430b      	orrs	r3, r1
 8002362:	491b      	ldr	r1, [pc, #108]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002368:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <HAL_RCC_OscConfig+0x4cc>)
 800236a:	2201      	movs	r2, #1
 800236c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236e:	f7ff f907 	bl	8001580 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002376:	f7ff f903 	bl	8001580 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e03d      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f0      	beq.n	8002376 <HAL_RCC_OscConfig+0x46a>
 8002394:	e035      	b.n	8002402 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002396:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <HAL_RCC_OscConfig+0x4cc>)
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7ff f8f0 	bl	8001580 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a4:	f7ff f8ec 	bl	8001580 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e026      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b6:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0x498>
 80023c2:	e01e      	b.n	8002402 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d107      	bne.n	80023dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e019      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40007000 	.word	0x40007000
 80023d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <HAL_RCC_OscConfig+0x500>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d106      	bne.n	80023fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d001      	beq.n	8002402 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40021000 	.word	0x40021000

08002410 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e0d0      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002424:	4b6a      	ldr	r3, [pc, #424]	; (80025d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d910      	bls.n	8002454 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002432:	4b67      	ldr	r3, [pc, #412]	; (80025d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 0207 	bic.w	r2, r3, #7
 800243a:	4965      	ldr	r1, [pc, #404]	; (80025d0 <HAL_RCC_ClockConfig+0x1c0>)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	4313      	orrs	r3, r2
 8002440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002442:	4b63      	ldr	r3, [pc, #396]	; (80025d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d001      	beq.n	8002454 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0b8      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d020      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800246c:	4b59      	ldr	r3, [pc, #356]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	4a58      	ldr	r2, [pc, #352]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002472:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002476:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002484:	4b53      	ldr	r3, [pc, #332]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4a52      	ldr	r2, [pc, #328]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800248e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002490:	4b50      	ldr	r3, [pc, #320]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	494d      	ldr	r1, [pc, #308]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d040      	beq.n	8002530 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d107      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b6:	4b47      	ldr	r3, [pc, #284]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d115      	bne.n	80024ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e07f      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d107      	bne.n	80024de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ce:	4b41      	ldr	r3, [pc, #260]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e073      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024de:	4b3d      	ldr	r3, [pc, #244]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e06b      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ee:	4b39      	ldr	r3, [pc, #228]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f023 0203 	bic.w	r2, r3, #3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	4936      	ldr	r1, [pc, #216]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002500:	f7ff f83e 	bl	8001580 <HAL_GetTick>
 8002504:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002506:	e00a      	b.n	800251e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002508:	f7ff f83a 	bl	8001580 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	f241 3288 	movw	r2, #5000	; 0x1388
 8002516:	4293      	cmp	r3, r2
 8002518:	d901      	bls.n	800251e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e053      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251e:	4b2d      	ldr	r3, [pc, #180]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 020c 	and.w	r2, r3, #12
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	429a      	cmp	r2, r3
 800252e:	d1eb      	bne.n	8002508 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002530:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d210      	bcs.n	8002560 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253e:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 0207 	bic.w	r2, r3, #7
 8002546:	4922      	ldr	r1, [pc, #136]	; (80025d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800254e:	4b20      	ldr	r3, [pc, #128]	; (80025d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d001      	beq.n	8002560 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e032      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800256c:	4b19      	ldr	r3, [pc, #100]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	4916      	ldr	r1, [pc, #88]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 800257a:	4313      	orrs	r3, r2
 800257c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d009      	beq.n	800259e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800258a:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	490e      	ldr	r1, [pc, #56]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 800259a:	4313      	orrs	r3, r2
 800259c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800259e:	f000 f821 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 80025a2:	4602      	mov	r2, r0
 80025a4:	4b0b      	ldr	r3, [pc, #44]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	091b      	lsrs	r3, r3, #4
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	490a      	ldr	r1, [pc, #40]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 80025b0:	5ccb      	ldrb	r3, [r1, r3]
 80025b2:	fa22 f303 	lsr.w	r3, r2, r3
 80025b6:	4a09      	ldr	r2, [pc, #36]	; (80025dc <HAL_RCC_ClockConfig+0x1cc>)
 80025b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025ba:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <HAL_RCC_ClockConfig+0x1d0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe ff9c 	bl	80014fc <HAL_InitTick>

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40022000 	.word	0x40022000
 80025d4:	40021000 	.word	0x40021000
 80025d8:	080055b4 	.word	0x080055b4
 80025dc:	20000000 	.word	0x20000000
 80025e0:	20000004 	.word	0x20000004

080025e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	2300      	movs	r3, #0
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	2300      	movs	r3, #0
 80025f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025fe:	4b1e      	ldr	r3, [pc, #120]	; (8002678 <HAL_RCC_GetSysClockFreq+0x94>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	2b04      	cmp	r3, #4
 800260c:	d002      	beq.n	8002614 <HAL_RCC_GetSysClockFreq+0x30>
 800260e:	2b08      	cmp	r3, #8
 8002610:	d003      	beq.n	800261a <HAL_RCC_GetSysClockFreq+0x36>
 8002612:	e027      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002614:	4b19      	ldr	r3, [pc, #100]	; (800267c <HAL_RCC_GetSysClockFreq+0x98>)
 8002616:	613b      	str	r3, [r7, #16]
      break;
 8002618:	e027      	b.n	800266a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	0c9b      	lsrs	r3, r3, #18
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	4a17      	ldr	r2, [pc, #92]	; (8002680 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002624:	5cd3      	ldrb	r3, [r2, r3]
 8002626:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d010      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002632:	4b11      	ldr	r3, [pc, #68]	; (8002678 <HAL_RCC_GetSysClockFreq+0x94>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	0c5b      	lsrs	r3, r3, #17
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	4a11      	ldr	r2, [pc, #68]	; (8002684 <HAL_RCC_GetSysClockFreq+0xa0>)
 800263e:	5cd3      	ldrb	r3, [r2, r3]
 8002640:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a0d      	ldr	r2, [pc, #52]	; (800267c <HAL_RCC_GetSysClockFreq+0x98>)
 8002646:	fb03 f202 	mul.w	r2, r3, r2
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002650:	617b      	str	r3, [r7, #20]
 8002652:	e004      	b.n	800265e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a0c      	ldr	r2, [pc, #48]	; (8002688 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002658:	fb02 f303 	mul.w	r3, r2, r3
 800265c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	613b      	str	r3, [r7, #16]
      break;
 8002662:	e002      	b.n	800266a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <HAL_RCC_GetSysClockFreq+0x98>)
 8002666:	613b      	str	r3, [r7, #16]
      break;
 8002668:	bf00      	nop
    }
  }
  return sysclockfreq;
 800266a:	693b      	ldr	r3, [r7, #16]
}
 800266c:	4618      	mov	r0, r3
 800266e:	371c      	adds	r7, #28
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40021000 	.word	0x40021000
 800267c:	007a1200 	.word	0x007a1200
 8002680:	080055cc 	.word	0x080055cc
 8002684:	080055dc 	.word	0x080055dc
 8002688:	003d0900 	.word	0x003d0900

0800268c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002690:	4b02      	ldr	r3, [pc, #8]	; (800269c <HAL_RCC_GetHCLKFreq+0x10>)
 8002692:	681b      	ldr	r3, [r3, #0]
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr
 800269c:	20000000 	.word	0x20000000

080026a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026a4:	f7ff fff2 	bl	800268c <HAL_RCC_GetHCLKFreq>
 80026a8:	4602      	mov	r2, r0
 80026aa:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	0a1b      	lsrs	r3, r3, #8
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	4903      	ldr	r1, [pc, #12]	; (80026c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026b6:	5ccb      	ldrb	r3, [r1, r3]
 80026b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026bc:	4618      	mov	r0, r3
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40021000 	.word	0x40021000
 80026c4:	080055c4 	.word	0x080055c4

080026c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026cc:	f7ff ffde 	bl	800268c <HAL_RCC_GetHCLKFreq>
 80026d0:	4602      	mov	r2, r0
 80026d2:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	0adb      	lsrs	r3, r3, #11
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	4903      	ldr	r1, [pc, #12]	; (80026ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80026de:	5ccb      	ldrb	r3, [r1, r3]
 80026e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40021000 	.word	0x40021000
 80026ec:	080055c4 	.word	0x080055c4

080026f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026f8:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <RCC_Delay+0x34>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a0a      	ldr	r2, [pc, #40]	; (8002728 <RCC_Delay+0x38>)
 80026fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002702:	0a5b      	lsrs	r3, r3, #9
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	fb02 f303 	mul.w	r3, r2, r3
 800270a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800270c:	bf00      	nop
  }
  while (Delay --);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	1e5a      	subs	r2, r3, #1
 8002712:	60fa      	str	r2, [r7, #12]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f9      	bne.n	800270c <RCC_Delay+0x1c>
}
 8002718:	bf00      	nop
 800271a:	bf00      	nop
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr
 8002724:	20000000 	.word	0x20000000
 8002728:	10624dd3 	.word	0x10624dd3

0800272c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e076      	b.n	800282c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	2b00      	cmp	r3, #0
 8002744:	d108      	bne.n	8002758 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800274e:	d009      	beq.n	8002764 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	61da      	str	r2, [r3, #28]
 8002756:	e005      	b.n	8002764 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d106      	bne.n	8002784 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fe fd4e 	bl	8001220 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2202      	movs	r2, #2
 8002788:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800279a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e8:	ea42 0103 	orr.w	r1, r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	0c1a      	lsrs	r2, r3, #16
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f002 0204 	and.w	r2, r2, #4
 800280a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	69da      	ldr	r2, [r3, #28]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800281a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b088      	sub	sp, #32
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	603b      	str	r3, [r7, #0]
 8002840:	4613      	mov	r3, r2
 8002842:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002844:	f7fe fe9c 	bl	8001580 <HAL_GetTick>
 8002848:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800284a:	88fb      	ldrh	r3, [r7, #6]
 800284c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b01      	cmp	r3, #1
 8002858:	d001      	beq.n	800285e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800285a:	2302      	movs	r3, #2
 800285c:	e12a      	b.n	8002ab4 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d002      	beq.n	800286a <HAL_SPI_Transmit+0x36>
 8002864:	88fb      	ldrh	r3, [r7, #6]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e122      	b.n	8002ab4 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_SPI_Transmit+0x48>
 8002878:	2302      	movs	r3, #2
 800287a:	e11b      	b.n	8002ab4 <HAL_SPI_Transmit+0x280>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2203      	movs	r2, #3
 8002888:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	88fa      	ldrh	r2, [r7, #6]
 800289c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	88fa      	ldrh	r2, [r7, #6]
 80028a2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028ca:	d10f      	bne.n	80028ec <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f6:	2b40      	cmp	r3, #64	; 0x40
 80028f8:	d007      	beq.n	800290a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002908:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002912:	d152      	bne.n	80029ba <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <HAL_SPI_Transmit+0xee>
 800291c:	8b7b      	ldrh	r3, [r7, #26]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d145      	bne.n	80029ae <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	881a      	ldrh	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	1c9a      	adds	r2, r3, #2
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800293c:	b29b      	uxth	r3, r3
 800293e:	3b01      	subs	r3, #1
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002946:	e032      	b.n	80029ae <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b02      	cmp	r3, #2
 8002954:	d112      	bne.n	800297c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	881a      	ldrh	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	1c9a      	adds	r2, r3, #2
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002970:	b29b      	uxth	r3, r3
 8002972:	3b01      	subs	r3, #1
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	86da      	strh	r2, [r3, #54]	; 0x36
 800297a:	e018      	b.n	80029ae <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800297c:	f7fe fe00 	bl	8001580 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d803      	bhi.n	8002994 <HAL_SPI_Transmit+0x160>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002992:	d102      	bne.n	800299a <HAL_SPI_Transmit+0x166>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d109      	bne.n	80029ae <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e082      	b.n	8002ab4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1c7      	bne.n	8002948 <HAL_SPI_Transmit+0x114>
 80029b8:	e053      	b.n	8002a62 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <HAL_SPI_Transmit+0x194>
 80029c2:	8b7b      	ldrh	r3, [r7, #26]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d147      	bne.n	8002a58 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	330c      	adds	r3, #12
 80029d2:	7812      	ldrb	r2, [r2, #0]
 80029d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80029ee:	e033      	b.n	8002a58 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d113      	bne.n	8002a26 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	330c      	adds	r3, #12
 8002a08:	7812      	ldrb	r2, [r2, #0]
 8002a0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	1c5a      	adds	r2, r3, #1
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a24:	e018      	b.n	8002a58 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a26:	f7fe fdab 	bl	8001580 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d803      	bhi.n	8002a3e <HAL_SPI_Transmit+0x20a>
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3c:	d102      	bne.n	8002a44 <HAL_SPI_Transmit+0x210>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d109      	bne.n	8002a58 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e02d      	b.n	8002ab4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1c6      	bne.n	80029f0 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a62:	69fa      	ldr	r2, [r7, #28]
 8002a64:	6839      	ldr	r1, [r7, #0]
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 f8b0 	bl	8002bcc <SPI_EndRxTxTransaction>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d002      	beq.n	8002a78 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2220      	movs	r2, #32
 8002a76:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10a      	bne.n	8002a96 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
  }
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3720      	adds	r7, #32
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	603b      	str	r3, [r7, #0]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002acc:	f7fe fd58 	bl	8001580 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	4413      	add	r3, r2
 8002ada:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002adc:	f7fe fd50 	bl	8001580 <HAL_GetTick>
 8002ae0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ae2:	4b39      	ldr	r3, [pc, #228]	; (8002bc8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	015b      	lsls	r3, r3, #5
 8002ae8:	0d1b      	lsrs	r3, r3, #20
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	fb02 f303 	mul.w	r3, r2, r3
 8002af0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002af2:	e054      	b.n	8002b9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afa:	d050      	beq.n	8002b9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002afc:	f7fe fd40 	bl	8001580 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d902      	bls.n	8002b12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d13d      	bne.n	8002b8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b2a:	d111      	bne.n	8002b50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b34:	d004      	beq.n	8002b40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b3e:	d107      	bne.n	8002b50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b58:	d10f      	bne.n	8002b7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e017      	b.n	8002bbe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	bf0c      	ite	eq
 8002bae:	2301      	moveq	r3, #1
 8002bb0:	2300      	movne	r3, #0
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d19b      	bne.n	8002af4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3720      	adds	r7, #32
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000000 	.word	0x20000000

08002bcc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2201      	movs	r2, #1
 8002be0:	2102      	movs	r1, #2
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f7ff ff6a 	bl	8002abc <SPI_WaitFlagStateUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d007      	beq.n	8002bfe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf2:	f043 0220 	orr.w	r2, r3, #32
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e013      	b.n	8002c26 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	2200      	movs	r2, #0
 8002c06:	2180      	movs	r1, #128	; 0x80
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f7ff ff57 	bl	8002abc <SPI_WaitFlagStateUntilTimeout>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d007      	beq.n	8002c24 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c18:	f043 0220 	orr.w	r2, r3, #32
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e000      	b.n	8002c26 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e042      	b.n	8002cc6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d106      	bne.n	8002c5a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7fe fb23 	bl	80012a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2224      	movs	r2, #36	; 0x24
 8002c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68da      	ldr	r2, [r3, #12]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c70:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fb74 	bl	8003360 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691a      	ldr	r2, [r3, #16]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c86:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695a      	ldr	r2, [r3, #20]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c96:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ca6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b08a      	sub	sp, #40	; 0x28
 8002cd2:	af02      	add	r7, sp, #8
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	603b      	str	r3, [r7, #0]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b20      	cmp	r3, #32
 8002cec:	d175      	bne.n	8002dda <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HAL_UART_Transmit+0x2c>
 8002cf4:	88fb      	ldrh	r3, [r7, #6]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e06e      	b.n	8002ddc <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2221      	movs	r2, #33	; 0x21
 8002d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d0c:	f7fe fc38 	bl	8001580 <HAL_GetTick>
 8002d10:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	88fa      	ldrh	r2, [r7, #6]
 8002d16:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	88fa      	ldrh	r2, [r7, #6]
 8002d1c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d26:	d108      	bne.n	8002d3a <HAL_UART_Transmit+0x6c>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d104      	bne.n	8002d3a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	61bb      	str	r3, [r7, #24]
 8002d38:	e003      	b.n	8002d42 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d42:	e02e      	b.n	8002da2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2180      	movs	r1, #128	; 0x80
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 f988 	bl	8003064 <UART_WaitOnFlagUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d005      	beq.n	8002d66 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e03a      	b.n	8002ddc <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10b      	bne.n	8002d84 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	461a      	mov	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d7a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	3302      	adds	r3, #2
 8002d80:	61bb      	str	r3, [r7, #24]
 8002d82:	e007      	b.n	8002d94 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	781a      	ldrb	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	3301      	adds	r3, #1
 8002d92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1cb      	bne.n	8002d44 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2200      	movs	r2, #0
 8002db4:	2140      	movs	r1, #64	; 0x40
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f954 	bl	8003064 <UART_WaitOnFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d005      	beq.n	8002dce <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e006      	b.n	8002ddc <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e000      	b.n	8002ddc <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002dda:	2302      	movs	r3, #2
  }
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3720      	adds	r7, #32
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	4613      	mov	r3, r2
 8002df0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b20      	cmp	r3, #32
 8002dfc:	d112      	bne.n	8002e24 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <HAL_UART_Receive_DMA+0x26>
 8002e04:	88fb      	ldrh	r3, [r7, #6]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e00b      	b.n	8002e26 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002e14:	88fb      	ldrh	r3, [r7, #6]
 8002e16:	461a      	mov	r2, r3
 8002e18:	68b9      	ldr	r1, [r7, #8]
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 f97c 	bl	8003118 <UART_Start_Receive_DMA>
 8002e20:	4603      	mov	r3, r0
 8002e22:	e000      	b.n	8002e26 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002e24:	2302      	movs	r3, #2
  }
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr

08002e40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr

08002e52 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr

08002e68 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b09c      	sub	sp, #112	; 0x70
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0320 	and.w	r3, r3, #32
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d172      	bne.n	8002f6a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e86:	2200      	movs	r2, #0
 8002e88:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	330c      	adds	r3, #12
 8002e90:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e94:	e853 3f00 	ldrex	r3, [r3]
 8002e98:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ea0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	330c      	adds	r3, #12
 8002ea8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002eaa:	65ba      	str	r2, [r7, #88]	; 0x58
 8002eac:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002eb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002eb2:	e841 2300 	strex	r3, r2, [r1]
 8002eb6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1e5      	bne.n	8002e8a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	3314      	adds	r3, #20
 8002ec4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec8:	e853 3f00 	ldrex	r3, [r3]
 8002ecc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed0:	f023 0301 	bic.w	r3, r3, #1
 8002ed4:	667b      	str	r3, [r7, #100]	; 0x64
 8002ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	3314      	adds	r3, #20
 8002edc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002ede:	647a      	str	r2, [r7, #68]	; 0x44
 8002ee0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ee4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ee6:	e841 2300 	strex	r3, r2, [r1]
 8002eea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1e5      	bne.n	8002ebe <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	3314      	adds	r3, #20
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	e853 3f00 	ldrex	r3, [r3]
 8002f00:	623b      	str	r3, [r7, #32]
   return(result);
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f08:	663b      	str	r3, [r7, #96]	; 0x60
 8002f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3314      	adds	r3, #20
 8002f10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f12:	633a      	str	r2, [r7, #48]	; 0x30
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f1a:	e841 2300 	strex	r3, r2, [r1]
 8002f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1e5      	bne.n	8002ef2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f28:	2220      	movs	r2, #32
 8002f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d119      	bne.n	8002f6a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	330c      	adds	r3, #12
 8002f3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	e853 3f00 	ldrex	r3, [r3]
 8002f44:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f023 0310 	bic.w	r3, r3, #16
 8002f4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	330c      	adds	r3, #12
 8002f54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f56:	61fa      	str	r2, [r7, #28]
 8002f58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5a:	69b9      	ldr	r1, [r7, #24]
 8002f5c:	69fa      	ldr	r2, [r7, #28]
 8002f5e:	e841 2300 	strex	r3, r2, [r1]
 8002f62:	617b      	str	r3, [r7, #20]
   return(result);
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1e5      	bne.n	8002f36 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d106      	bne.n	8002f86 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f7a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002f80:	f7ff ff67 	bl	8002e52 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f84:	e002      	b.n	8002f8c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002f86:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002f88:	f7fe f908 	bl	800119c <HAL_UART_RxCpltCallback>
}
 8002f8c:	bf00      	nop
 8002f8e:	3770      	adds	r7, #112	; 0x70
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d108      	bne.n	8002fc2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fb4:	085b      	lsrs	r3, r3, #1
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	4619      	mov	r1, r3
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f7ff ff49 	bl	8002e52 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002fc0:	e002      	b.n	8002fc8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f7ff ff33 	bl	8002e2e <HAL_UART_RxHalfCpltCallback>
}
 8002fc8:	bf00      	nop
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	bf14      	ite	ne
 8002ff0:	2301      	movne	r3, #1
 8002ff2:	2300      	moveq	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b21      	cmp	r3, #33	; 0x21
 8003002:	d108      	bne.n	8003016 <UART_DMAError+0x46>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d005      	beq.n	8003016 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2200      	movs	r2, #0
 800300e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003010:	68b8      	ldr	r0, [r7, #8]
 8003012:	f000 f91b 	bl	800324c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003020:	2b00      	cmp	r3, #0
 8003022:	bf14      	ite	ne
 8003024:	2301      	movne	r3, #1
 8003026:	2300      	moveq	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b22      	cmp	r3, #34	; 0x22
 8003036:	d108      	bne.n	800304a <UART_DMAError+0x7a>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d005      	beq.n	800304a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2200      	movs	r2, #0
 8003042:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003044:	68b8      	ldr	r0, [r7, #8]
 8003046:	f000 f928 	bl	800329a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	f043 0210 	orr.w	r2, r3, #16
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003056:	68b8      	ldr	r0, [r7, #8]
 8003058:	f7ff fef2 	bl	8002e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800305c:	bf00      	nop
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	603b      	str	r3, [r7, #0]
 8003070:	4613      	mov	r3, r2
 8003072:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003074:	e03b      	b.n	80030ee <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307c:	d037      	beq.n	80030ee <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307e:	f7fe fa7f 	bl	8001580 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	6a3a      	ldr	r2, [r7, #32]
 800308a:	429a      	cmp	r2, r3
 800308c:	d302      	bcc.n	8003094 <UART_WaitOnFlagUntilTimeout+0x30>
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e03a      	b.n	800310e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d023      	beq.n	80030ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b80      	cmp	r3, #128	; 0x80
 80030aa:	d020      	beq.n	80030ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2b40      	cmp	r3, #64	; 0x40
 80030b0:	d01d      	beq.n	80030ee <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d116      	bne.n	80030ee <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 f8df 	bl	800329a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2208      	movs	r2, #8
 80030e0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e00f      	b.n	800310e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	4013      	ands	r3, r2
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	bf0c      	ite	eq
 80030fe:	2301      	moveq	r3, #1
 8003100:	2300      	movne	r3, #0
 8003102:	b2db      	uxtb	r3, r3
 8003104:	461a      	mov	r2, r3
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	429a      	cmp	r2, r3
 800310a:	d0b4      	beq.n	8003076 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b098      	sub	sp, #96	; 0x60
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	4613      	mov	r3, r2
 8003124:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	88fa      	ldrh	r2, [r7, #6]
 8003130:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2222      	movs	r2, #34	; 0x22
 800313c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003144:	4a3e      	ldr	r2, [pc, #248]	; (8003240 <UART_Start_Receive_DMA+0x128>)
 8003146:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314c:	4a3d      	ldr	r2, [pc, #244]	; (8003244 <UART_Start_Receive_DMA+0x12c>)
 800314e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003154:	4a3c      	ldr	r2, [pc, #240]	; (8003248 <UART_Start_Receive_DMA+0x130>)
 8003156:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315c:	2200      	movs	r2, #0
 800315e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003160:	f107 0308 	add.w	r3, r7, #8
 8003164:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	3304      	adds	r3, #4
 8003170:	4619      	mov	r1, r3
 8003172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	88fb      	ldrh	r3, [r7, #6]
 8003178:	f7fe fb98 	bl	80018ac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800317c:	2300      	movs	r3, #0
 800317e:	613b      	str	r3, [r7, #16]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	613b      	str	r3, [r7, #16]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d019      	beq.n	80031ce <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	330c      	adds	r3, #12
 80031a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031a4:	e853 3f00 	ldrex	r3, [r3]
 80031a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	330c      	adds	r3, #12
 80031b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031ba:	64fa      	str	r2, [r7, #76]	; 0x4c
 80031bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80031c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031c2:	e841 2300 	strex	r3, r2, [r1]
 80031c6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80031c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1e5      	bne.n	800319a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3314      	adds	r3, #20
 80031d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d8:	e853 3f00 	ldrex	r3, [r3]
 80031dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80031de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	657b      	str	r3, [r7, #84]	; 0x54
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	3314      	adds	r3, #20
 80031ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80031ee:	63ba      	str	r2, [r7, #56]	; 0x38
 80031f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80031f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031f6:	e841 2300 	strex	r3, r2, [r1]
 80031fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80031fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1e5      	bne.n	80031ce <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3314      	adds	r3, #20
 8003208:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	e853 3f00 	ldrex	r3, [r3]
 8003210:	617b      	str	r3, [r7, #20]
   return(result);
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003218:	653b      	str	r3, [r7, #80]	; 0x50
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	3314      	adds	r3, #20
 8003220:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003222:	627a      	str	r2, [r7, #36]	; 0x24
 8003224:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003226:	6a39      	ldr	r1, [r7, #32]
 8003228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800322a:	e841 2300 	strex	r3, r2, [r1]
 800322e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1e5      	bne.n	8003202 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3760      	adds	r7, #96	; 0x60
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	08002e69 	.word	0x08002e69
 8003244:	08002f95 	.word	0x08002f95
 8003248:	08002fd1 	.word	0x08002fd1

0800324c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800324c:	b480      	push	{r7}
 800324e:	b089      	sub	sp, #36	; 0x24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	330c      	adds	r3, #12
 800325a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	e853 3f00 	ldrex	r3, [r3]
 8003262:	60bb      	str	r3, [r7, #8]
   return(result);
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800326a:	61fb      	str	r3, [r7, #28]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	330c      	adds	r3, #12
 8003272:	69fa      	ldr	r2, [r7, #28]
 8003274:	61ba      	str	r2, [r7, #24]
 8003276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003278:	6979      	ldr	r1, [r7, #20]
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	e841 2300 	strex	r3, r2, [r1]
 8003280:	613b      	str	r3, [r7, #16]
   return(result);
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1e5      	bne.n	8003254 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8003290:	bf00      	nop
 8003292:	3724      	adds	r7, #36	; 0x24
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr

0800329a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800329a:	b480      	push	{r7}
 800329c:	b095      	sub	sp, #84	; 0x54
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	330c      	adds	r3, #12
 80032a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ac:	e853 3f00 	ldrex	r3, [r3]
 80032b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80032b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	330c      	adds	r3, #12
 80032c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032c2:	643a      	str	r2, [r7, #64]	; 0x40
 80032c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80032c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032ca:	e841 2300 	strex	r3, r2, [r1]
 80032ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1e5      	bne.n	80032a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	3314      	adds	r3, #20
 80032dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	e853 3f00 	ldrex	r3, [r3]
 80032e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	f023 0301 	bic.w	r3, r3, #1
 80032ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	3314      	adds	r3, #20
 80032f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032fe:	e841 2300 	strex	r3, r2, [r1]
 8003302:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1e5      	bne.n	80032d6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	2b01      	cmp	r3, #1
 8003310:	d119      	bne.n	8003346 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	330c      	adds	r3, #12
 8003318:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	e853 3f00 	ldrex	r3, [r3]
 8003320:	60bb      	str	r3, [r7, #8]
   return(result);
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	f023 0310 	bic.w	r3, r3, #16
 8003328:	647b      	str	r3, [r7, #68]	; 0x44
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	330c      	adds	r3, #12
 8003330:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003332:	61ba      	str	r2, [r7, #24]
 8003334:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003336:	6979      	ldr	r1, [r7, #20]
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	e841 2300 	strex	r3, r2, [r1]
 800333e:	613b      	str	r3, [r7, #16]
   return(result);
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1e5      	bne.n	8003312 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003354:	bf00      	nop
 8003356:	3754      	adds	r7, #84	; 0x54
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr
	...

08003360 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800339a:	f023 030c 	bic.w	r3, r3, #12
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6812      	ldr	r2, [r2, #0]
 80033a2:	68b9      	ldr	r1, [r7, #8]
 80033a4:	430b      	orrs	r3, r1
 80033a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699a      	ldr	r2, [r3, #24]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a2c      	ldr	r2, [pc, #176]	; (8003474 <UART_SetConfig+0x114>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d103      	bne.n	80033d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80033c8:	f7ff f97e 	bl	80026c8 <HAL_RCC_GetPCLK2Freq>
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	e002      	b.n	80033d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80033d0:	f7ff f966 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 80033d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	009a      	lsls	r2, r3, #2
 80033e0:	441a      	add	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ec:	4a22      	ldr	r2, [pc, #136]	; (8003478 <UART_SetConfig+0x118>)
 80033ee:	fba2 2303 	umull	r2, r3, r2, r3
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	0119      	lsls	r1, r3, #4
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	009a      	lsls	r2, r3, #2
 8003400:	441a      	add	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	fbb2 f2f3 	udiv	r2, r2, r3
 800340c:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <UART_SetConfig+0x118>)
 800340e:	fba3 0302 	umull	r0, r3, r3, r2
 8003412:	095b      	lsrs	r3, r3, #5
 8003414:	2064      	movs	r0, #100	; 0x64
 8003416:	fb00 f303 	mul.w	r3, r0, r3
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	3332      	adds	r3, #50	; 0x32
 8003420:	4a15      	ldr	r2, [pc, #84]	; (8003478 <UART_SetConfig+0x118>)
 8003422:	fba2 2303 	umull	r2, r3, r2, r3
 8003426:	095b      	lsrs	r3, r3, #5
 8003428:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800342c:	4419      	add	r1, r3
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	009a      	lsls	r2, r3, #2
 8003438:	441a      	add	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	fbb2 f2f3 	udiv	r2, r2, r3
 8003444:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <UART_SetConfig+0x118>)
 8003446:	fba3 0302 	umull	r0, r3, r3, r2
 800344a:	095b      	lsrs	r3, r3, #5
 800344c:	2064      	movs	r0, #100	; 0x64
 800344e:	fb00 f303 	mul.w	r3, r0, r3
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	3332      	adds	r3, #50	; 0x32
 8003458:	4a07      	ldr	r2, [pc, #28]	; (8003478 <UART_SetConfig+0x118>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	f003 020f 	and.w	r2, r3, #15
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	440a      	add	r2, r1
 800346a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800346c:	bf00      	nop
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40013800 	.word	0x40013800
 8003478:	51eb851f 	.word	0x51eb851f

0800347c <malloc>:
 800347c:	4b02      	ldr	r3, [pc, #8]	; (8003488 <malloc+0xc>)
 800347e:	4601      	mov	r1, r0
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	f000 b823 	b.w	80034cc <_malloc_r>
 8003486:	bf00      	nop
 8003488:	20000058 	.word	0x20000058

0800348c <sbrk_aligned>:
 800348c:	b570      	push	{r4, r5, r6, lr}
 800348e:	4e0e      	ldr	r6, [pc, #56]	; (80034c8 <sbrk_aligned+0x3c>)
 8003490:	460c      	mov	r4, r1
 8003492:	6831      	ldr	r1, [r6, #0]
 8003494:	4605      	mov	r5, r0
 8003496:	b911      	cbnz	r1, 800349e <sbrk_aligned+0x12>
 8003498:	f000 f8cc 	bl	8003634 <_sbrk_r>
 800349c:	6030      	str	r0, [r6, #0]
 800349e:	4621      	mov	r1, r4
 80034a0:	4628      	mov	r0, r5
 80034a2:	f000 f8c7 	bl	8003634 <_sbrk_r>
 80034a6:	1c43      	adds	r3, r0, #1
 80034a8:	d00a      	beq.n	80034c0 <sbrk_aligned+0x34>
 80034aa:	1cc4      	adds	r4, r0, #3
 80034ac:	f024 0403 	bic.w	r4, r4, #3
 80034b0:	42a0      	cmp	r0, r4
 80034b2:	d007      	beq.n	80034c4 <sbrk_aligned+0x38>
 80034b4:	1a21      	subs	r1, r4, r0
 80034b6:	4628      	mov	r0, r5
 80034b8:	f000 f8bc 	bl	8003634 <_sbrk_r>
 80034bc:	3001      	adds	r0, #1
 80034be:	d101      	bne.n	80034c4 <sbrk_aligned+0x38>
 80034c0:	f04f 34ff 	mov.w	r4, #4294967295
 80034c4:	4620      	mov	r0, r4
 80034c6:	bd70      	pop	{r4, r5, r6, pc}
 80034c8:	200001e4 	.word	0x200001e4

080034cc <_malloc_r>:
 80034cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034d0:	1ccd      	adds	r5, r1, #3
 80034d2:	f025 0503 	bic.w	r5, r5, #3
 80034d6:	3508      	adds	r5, #8
 80034d8:	2d0c      	cmp	r5, #12
 80034da:	bf38      	it	cc
 80034dc:	250c      	movcc	r5, #12
 80034de:	2d00      	cmp	r5, #0
 80034e0:	4607      	mov	r7, r0
 80034e2:	db01      	blt.n	80034e8 <_malloc_r+0x1c>
 80034e4:	42a9      	cmp	r1, r5
 80034e6:	d905      	bls.n	80034f4 <_malloc_r+0x28>
 80034e8:	230c      	movs	r3, #12
 80034ea:	2600      	movs	r6, #0
 80034ec:	603b      	str	r3, [r7, #0]
 80034ee:	4630      	mov	r0, r6
 80034f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80035c8 <_malloc_r+0xfc>
 80034f8:	f000 f868 	bl	80035cc <__malloc_lock>
 80034fc:	f8d8 3000 	ldr.w	r3, [r8]
 8003500:	461c      	mov	r4, r3
 8003502:	bb5c      	cbnz	r4, 800355c <_malloc_r+0x90>
 8003504:	4629      	mov	r1, r5
 8003506:	4638      	mov	r0, r7
 8003508:	f7ff ffc0 	bl	800348c <sbrk_aligned>
 800350c:	1c43      	adds	r3, r0, #1
 800350e:	4604      	mov	r4, r0
 8003510:	d155      	bne.n	80035be <_malloc_r+0xf2>
 8003512:	f8d8 4000 	ldr.w	r4, [r8]
 8003516:	4626      	mov	r6, r4
 8003518:	2e00      	cmp	r6, #0
 800351a:	d145      	bne.n	80035a8 <_malloc_r+0xdc>
 800351c:	2c00      	cmp	r4, #0
 800351e:	d048      	beq.n	80035b2 <_malloc_r+0xe6>
 8003520:	6823      	ldr	r3, [r4, #0]
 8003522:	4631      	mov	r1, r6
 8003524:	4638      	mov	r0, r7
 8003526:	eb04 0903 	add.w	r9, r4, r3
 800352a:	f000 f883 	bl	8003634 <_sbrk_r>
 800352e:	4581      	cmp	r9, r0
 8003530:	d13f      	bne.n	80035b2 <_malloc_r+0xe6>
 8003532:	6821      	ldr	r1, [r4, #0]
 8003534:	4638      	mov	r0, r7
 8003536:	1a6d      	subs	r5, r5, r1
 8003538:	4629      	mov	r1, r5
 800353a:	f7ff ffa7 	bl	800348c <sbrk_aligned>
 800353e:	3001      	adds	r0, #1
 8003540:	d037      	beq.n	80035b2 <_malloc_r+0xe6>
 8003542:	6823      	ldr	r3, [r4, #0]
 8003544:	442b      	add	r3, r5
 8003546:	6023      	str	r3, [r4, #0]
 8003548:	f8d8 3000 	ldr.w	r3, [r8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d038      	beq.n	80035c2 <_malloc_r+0xf6>
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	42a2      	cmp	r2, r4
 8003554:	d12b      	bne.n	80035ae <_malloc_r+0xe2>
 8003556:	2200      	movs	r2, #0
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	e00f      	b.n	800357c <_malloc_r+0xb0>
 800355c:	6822      	ldr	r2, [r4, #0]
 800355e:	1b52      	subs	r2, r2, r5
 8003560:	d41f      	bmi.n	80035a2 <_malloc_r+0xd6>
 8003562:	2a0b      	cmp	r2, #11
 8003564:	d917      	bls.n	8003596 <_malloc_r+0xca>
 8003566:	1961      	adds	r1, r4, r5
 8003568:	42a3      	cmp	r3, r4
 800356a:	6025      	str	r5, [r4, #0]
 800356c:	bf18      	it	ne
 800356e:	6059      	strne	r1, [r3, #4]
 8003570:	6863      	ldr	r3, [r4, #4]
 8003572:	bf08      	it	eq
 8003574:	f8c8 1000 	streq.w	r1, [r8]
 8003578:	5162      	str	r2, [r4, r5]
 800357a:	604b      	str	r3, [r1, #4]
 800357c:	4638      	mov	r0, r7
 800357e:	f104 060b 	add.w	r6, r4, #11
 8003582:	f000 f829 	bl	80035d8 <__malloc_unlock>
 8003586:	f026 0607 	bic.w	r6, r6, #7
 800358a:	1d23      	adds	r3, r4, #4
 800358c:	1af2      	subs	r2, r6, r3
 800358e:	d0ae      	beq.n	80034ee <_malloc_r+0x22>
 8003590:	1b9b      	subs	r3, r3, r6
 8003592:	50a3      	str	r3, [r4, r2]
 8003594:	e7ab      	b.n	80034ee <_malloc_r+0x22>
 8003596:	42a3      	cmp	r3, r4
 8003598:	6862      	ldr	r2, [r4, #4]
 800359a:	d1dd      	bne.n	8003558 <_malloc_r+0x8c>
 800359c:	f8c8 2000 	str.w	r2, [r8]
 80035a0:	e7ec      	b.n	800357c <_malloc_r+0xb0>
 80035a2:	4623      	mov	r3, r4
 80035a4:	6864      	ldr	r4, [r4, #4]
 80035a6:	e7ac      	b.n	8003502 <_malloc_r+0x36>
 80035a8:	4634      	mov	r4, r6
 80035aa:	6876      	ldr	r6, [r6, #4]
 80035ac:	e7b4      	b.n	8003518 <_malloc_r+0x4c>
 80035ae:	4613      	mov	r3, r2
 80035b0:	e7cc      	b.n	800354c <_malloc_r+0x80>
 80035b2:	230c      	movs	r3, #12
 80035b4:	4638      	mov	r0, r7
 80035b6:	603b      	str	r3, [r7, #0]
 80035b8:	f000 f80e 	bl	80035d8 <__malloc_unlock>
 80035bc:	e797      	b.n	80034ee <_malloc_r+0x22>
 80035be:	6025      	str	r5, [r4, #0]
 80035c0:	e7dc      	b.n	800357c <_malloc_r+0xb0>
 80035c2:	605b      	str	r3, [r3, #4]
 80035c4:	deff      	udf	#255	; 0xff
 80035c6:	bf00      	nop
 80035c8:	200001e0 	.word	0x200001e0

080035cc <__malloc_lock>:
 80035cc:	4801      	ldr	r0, [pc, #4]	; (80035d4 <__malloc_lock+0x8>)
 80035ce:	f000 b86b 	b.w	80036a8 <__retarget_lock_acquire_recursive>
 80035d2:	bf00      	nop
 80035d4:	20000324 	.word	0x20000324

080035d8 <__malloc_unlock>:
 80035d8:	4801      	ldr	r0, [pc, #4]	; (80035e0 <__malloc_unlock+0x8>)
 80035da:	f000 b866 	b.w	80036aa <__retarget_lock_release_recursive>
 80035de:	bf00      	nop
 80035e0:	20000324 	.word	0x20000324

080035e4 <siprintf>:
 80035e4:	b40e      	push	{r1, r2, r3}
 80035e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80035ea:	b500      	push	{lr}
 80035ec:	b09c      	sub	sp, #112	; 0x70
 80035ee:	ab1d      	add	r3, sp, #116	; 0x74
 80035f0:	9002      	str	r0, [sp, #8]
 80035f2:	9006      	str	r0, [sp, #24]
 80035f4:	9107      	str	r1, [sp, #28]
 80035f6:	9104      	str	r1, [sp, #16]
 80035f8:	4808      	ldr	r0, [pc, #32]	; (800361c <siprintf+0x38>)
 80035fa:	4909      	ldr	r1, [pc, #36]	; (8003620 <siprintf+0x3c>)
 80035fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003600:	9105      	str	r1, [sp, #20]
 8003602:	6800      	ldr	r0, [r0, #0]
 8003604:	a902      	add	r1, sp, #8
 8003606:	9301      	str	r3, [sp, #4]
 8003608:	f000 f900 	bl	800380c <_svfiprintf_r>
 800360c:	2200      	movs	r2, #0
 800360e:	9b02      	ldr	r3, [sp, #8]
 8003610:	701a      	strb	r2, [r3, #0]
 8003612:	b01c      	add	sp, #112	; 0x70
 8003614:	f85d eb04 	ldr.w	lr, [sp], #4
 8003618:	b003      	add	sp, #12
 800361a:	4770      	bx	lr
 800361c:	20000058 	.word	0x20000058
 8003620:	ffff0208 	.word	0xffff0208

08003624 <memset>:
 8003624:	4603      	mov	r3, r0
 8003626:	4402      	add	r2, r0
 8003628:	4293      	cmp	r3, r2
 800362a:	d100      	bne.n	800362e <memset+0xa>
 800362c:	4770      	bx	lr
 800362e:	f803 1b01 	strb.w	r1, [r3], #1
 8003632:	e7f9      	b.n	8003628 <memset+0x4>

08003634 <_sbrk_r>:
 8003634:	b538      	push	{r3, r4, r5, lr}
 8003636:	2300      	movs	r3, #0
 8003638:	4d05      	ldr	r5, [pc, #20]	; (8003650 <_sbrk_r+0x1c>)
 800363a:	4604      	mov	r4, r0
 800363c:	4608      	mov	r0, r1
 800363e:	602b      	str	r3, [r5, #0]
 8003640:	f7fd fee4 	bl	800140c <_sbrk>
 8003644:	1c43      	adds	r3, r0, #1
 8003646:	d102      	bne.n	800364e <_sbrk_r+0x1a>
 8003648:	682b      	ldr	r3, [r5, #0]
 800364a:	b103      	cbz	r3, 800364e <_sbrk_r+0x1a>
 800364c:	6023      	str	r3, [r4, #0]
 800364e:	bd38      	pop	{r3, r4, r5, pc}
 8003650:	20000320 	.word	0x20000320

08003654 <__errno>:
 8003654:	4b01      	ldr	r3, [pc, #4]	; (800365c <__errno+0x8>)
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	20000058 	.word	0x20000058

08003660 <__libc_init_array>:
 8003660:	b570      	push	{r4, r5, r6, lr}
 8003662:	2600      	movs	r6, #0
 8003664:	4d0c      	ldr	r5, [pc, #48]	; (8003698 <__libc_init_array+0x38>)
 8003666:	4c0d      	ldr	r4, [pc, #52]	; (800369c <__libc_init_array+0x3c>)
 8003668:	1b64      	subs	r4, r4, r5
 800366a:	10a4      	asrs	r4, r4, #2
 800366c:	42a6      	cmp	r6, r4
 800366e:	d109      	bne.n	8003684 <__libc_init_array+0x24>
 8003670:	f000 fbbe 	bl	8003df0 <_init>
 8003674:	2600      	movs	r6, #0
 8003676:	4d0a      	ldr	r5, [pc, #40]	; (80036a0 <__libc_init_array+0x40>)
 8003678:	4c0a      	ldr	r4, [pc, #40]	; (80036a4 <__libc_init_array+0x44>)
 800367a:	1b64      	subs	r4, r4, r5
 800367c:	10a4      	asrs	r4, r4, #2
 800367e:	42a6      	cmp	r6, r4
 8003680:	d105      	bne.n	800368e <__libc_init_array+0x2e>
 8003682:	bd70      	pop	{r4, r5, r6, pc}
 8003684:	f855 3b04 	ldr.w	r3, [r5], #4
 8003688:	4798      	blx	r3
 800368a:	3601      	adds	r6, #1
 800368c:	e7ee      	b.n	800366c <__libc_init_array+0xc>
 800368e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003692:	4798      	blx	r3
 8003694:	3601      	adds	r6, #1
 8003696:	e7f2      	b.n	800367e <__libc_init_array+0x1e>
 8003698:	08005614 	.word	0x08005614
 800369c:	08005614 	.word	0x08005614
 80036a0:	08005614 	.word	0x08005614
 80036a4:	08005618 	.word	0x08005618

080036a8 <__retarget_lock_acquire_recursive>:
 80036a8:	4770      	bx	lr

080036aa <__retarget_lock_release_recursive>:
 80036aa:	4770      	bx	lr

080036ac <memcpy>:
 80036ac:	440a      	add	r2, r1
 80036ae:	4291      	cmp	r1, r2
 80036b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80036b4:	d100      	bne.n	80036b8 <memcpy+0xc>
 80036b6:	4770      	bx	lr
 80036b8:	b510      	push	{r4, lr}
 80036ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036be:	4291      	cmp	r1, r2
 80036c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036c4:	d1f9      	bne.n	80036ba <memcpy+0xe>
 80036c6:	bd10      	pop	{r4, pc}

080036c8 <_free_r>:
 80036c8:	b538      	push	{r3, r4, r5, lr}
 80036ca:	4605      	mov	r5, r0
 80036cc:	2900      	cmp	r1, #0
 80036ce:	d040      	beq.n	8003752 <_free_r+0x8a>
 80036d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036d4:	1f0c      	subs	r4, r1, #4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	bfb8      	it	lt
 80036da:	18e4      	addlt	r4, r4, r3
 80036dc:	f7ff ff76 	bl	80035cc <__malloc_lock>
 80036e0:	4a1c      	ldr	r2, [pc, #112]	; (8003754 <_free_r+0x8c>)
 80036e2:	6813      	ldr	r3, [r2, #0]
 80036e4:	b933      	cbnz	r3, 80036f4 <_free_r+0x2c>
 80036e6:	6063      	str	r3, [r4, #4]
 80036e8:	6014      	str	r4, [r2, #0]
 80036ea:	4628      	mov	r0, r5
 80036ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036f0:	f7ff bf72 	b.w	80035d8 <__malloc_unlock>
 80036f4:	42a3      	cmp	r3, r4
 80036f6:	d908      	bls.n	800370a <_free_r+0x42>
 80036f8:	6820      	ldr	r0, [r4, #0]
 80036fa:	1821      	adds	r1, r4, r0
 80036fc:	428b      	cmp	r3, r1
 80036fe:	bf01      	itttt	eq
 8003700:	6819      	ldreq	r1, [r3, #0]
 8003702:	685b      	ldreq	r3, [r3, #4]
 8003704:	1809      	addeq	r1, r1, r0
 8003706:	6021      	streq	r1, [r4, #0]
 8003708:	e7ed      	b.n	80036e6 <_free_r+0x1e>
 800370a:	461a      	mov	r2, r3
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	b10b      	cbz	r3, 8003714 <_free_r+0x4c>
 8003710:	42a3      	cmp	r3, r4
 8003712:	d9fa      	bls.n	800370a <_free_r+0x42>
 8003714:	6811      	ldr	r1, [r2, #0]
 8003716:	1850      	adds	r0, r2, r1
 8003718:	42a0      	cmp	r0, r4
 800371a:	d10b      	bne.n	8003734 <_free_r+0x6c>
 800371c:	6820      	ldr	r0, [r4, #0]
 800371e:	4401      	add	r1, r0
 8003720:	1850      	adds	r0, r2, r1
 8003722:	4283      	cmp	r3, r0
 8003724:	6011      	str	r1, [r2, #0]
 8003726:	d1e0      	bne.n	80036ea <_free_r+0x22>
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	4408      	add	r0, r1
 800372e:	6010      	str	r0, [r2, #0]
 8003730:	6053      	str	r3, [r2, #4]
 8003732:	e7da      	b.n	80036ea <_free_r+0x22>
 8003734:	d902      	bls.n	800373c <_free_r+0x74>
 8003736:	230c      	movs	r3, #12
 8003738:	602b      	str	r3, [r5, #0]
 800373a:	e7d6      	b.n	80036ea <_free_r+0x22>
 800373c:	6820      	ldr	r0, [r4, #0]
 800373e:	1821      	adds	r1, r4, r0
 8003740:	428b      	cmp	r3, r1
 8003742:	bf01      	itttt	eq
 8003744:	6819      	ldreq	r1, [r3, #0]
 8003746:	685b      	ldreq	r3, [r3, #4]
 8003748:	1809      	addeq	r1, r1, r0
 800374a:	6021      	streq	r1, [r4, #0]
 800374c:	6063      	str	r3, [r4, #4]
 800374e:	6054      	str	r4, [r2, #4]
 8003750:	e7cb      	b.n	80036ea <_free_r+0x22>
 8003752:	bd38      	pop	{r3, r4, r5, pc}
 8003754:	200001e0 	.word	0x200001e0

08003758 <__ssputs_r>:
 8003758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800375c:	461f      	mov	r7, r3
 800375e:	688e      	ldr	r6, [r1, #8]
 8003760:	4682      	mov	sl, r0
 8003762:	42be      	cmp	r6, r7
 8003764:	460c      	mov	r4, r1
 8003766:	4690      	mov	r8, r2
 8003768:	680b      	ldr	r3, [r1, #0]
 800376a:	d82c      	bhi.n	80037c6 <__ssputs_r+0x6e>
 800376c:	898a      	ldrh	r2, [r1, #12]
 800376e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003772:	d026      	beq.n	80037c2 <__ssputs_r+0x6a>
 8003774:	6965      	ldr	r5, [r4, #20]
 8003776:	6909      	ldr	r1, [r1, #16]
 8003778:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800377c:	eba3 0901 	sub.w	r9, r3, r1
 8003780:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003784:	1c7b      	adds	r3, r7, #1
 8003786:	444b      	add	r3, r9
 8003788:	106d      	asrs	r5, r5, #1
 800378a:	429d      	cmp	r5, r3
 800378c:	bf38      	it	cc
 800378e:	461d      	movcc	r5, r3
 8003790:	0553      	lsls	r3, r2, #21
 8003792:	d527      	bpl.n	80037e4 <__ssputs_r+0x8c>
 8003794:	4629      	mov	r1, r5
 8003796:	f7ff fe99 	bl	80034cc <_malloc_r>
 800379a:	4606      	mov	r6, r0
 800379c:	b360      	cbz	r0, 80037f8 <__ssputs_r+0xa0>
 800379e:	464a      	mov	r2, r9
 80037a0:	6921      	ldr	r1, [r4, #16]
 80037a2:	f7ff ff83 	bl	80036ac <memcpy>
 80037a6:	89a3      	ldrh	r3, [r4, #12]
 80037a8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80037ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037b0:	81a3      	strh	r3, [r4, #12]
 80037b2:	6126      	str	r6, [r4, #16]
 80037b4:	444e      	add	r6, r9
 80037b6:	6026      	str	r6, [r4, #0]
 80037b8:	463e      	mov	r6, r7
 80037ba:	6165      	str	r5, [r4, #20]
 80037bc:	eba5 0509 	sub.w	r5, r5, r9
 80037c0:	60a5      	str	r5, [r4, #8]
 80037c2:	42be      	cmp	r6, r7
 80037c4:	d900      	bls.n	80037c8 <__ssputs_r+0x70>
 80037c6:	463e      	mov	r6, r7
 80037c8:	4632      	mov	r2, r6
 80037ca:	4641      	mov	r1, r8
 80037cc:	6820      	ldr	r0, [r4, #0]
 80037ce:	f000 faaf 	bl	8003d30 <memmove>
 80037d2:	2000      	movs	r0, #0
 80037d4:	68a3      	ldr	r3, [r4, #8]
 80037d6:	1b9b      	subs	r3, r3, r6
 80037d8:	60a3      	str	r3, [r4, #8]
 80037da:	6823      	ldr	r3, [r4, #0]
 80037dc:	4433      	add	r3, r6
 80037de:	6023      	str	r3, [r4, #0]
 80037e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037e4:	462a      	mov	r2, r5
 80037e6:	f000 facb 	bl	8003d80 <_realloc_r>
 80037ea:	4606      	mov	r6, r0
 80037ec:	2800      	cmp	r0, #0
 80037ee:	d1e0      	bne.n	80037b2 <__ssputs_r+0x5a>
 80037f0:	4650      	mov	r0, sl
 80037f2:	6921      	ldr	r1, [r4, #16]
 80037f4:	f7ff ff68 	bl	80036c8 <_free_r>
 80037f8:	230c      	movs	r3, #12
 80037fa:	f8ca 3000 	str.w	r3, [sl]
 80037fe:	89a3      	ldrh	r3, [r4, #12]
 8003800:	f04f 30ff 	mov.w	r0, #4294967295
 8003804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003808:	81a3      	strh	r3, [r4, #12]
 800380a:	e7e9      	b.n	80037e0 <__ssputs_r+0x88>

0800380c <_svfiprintf_r>:
 800380c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003810:	4698      	mov	r8, r3
 8003812:	898b      	ldrh	r3, [r1, #12]
 8003814:	4607      	mov	r7, r0
 8003816:	061b      	lsls	r3, r3, #24
 8003818:	460d      	mov	r5, r1
 800381a:	4614      	mov	r4, r2
 800381c:	b09d      	sub	sp, #116	; 0x74
 800381e:	d50e      	bpl.n	800383e <_svfiprintf_r+0x32>
 8003820:	690b      	ldr	r3, [r1, #16]
 8003822:	b963      	cbnz	r3, 800383e <_svfiprintf_r+0x32>
 8003824:	2140      	movs	r1, #64	; 0x40
 8003826:	f7ff fe51 	bl	80034cc <_malloc_r>
 800382a:	6028      	str	r0, [r5, #0]
 800382c:	6128      	str	r0, [r5, #16]
 800382e:	b920      	cbnz	r0, 800383a <_svfiprintf_r+0x2e>
 8003830:	230c      	movs	r3, #12
 8003832:	603b      	str	r3, [r7, #0]
 8003834:	f04f 30ff 	mov.w	r0, #4294967295
 8003838:	e0d0      	b.n	80039dc <_svfiprintf_r+0x1d0>
 800383a:	2340      	movs	r3, #64	; 0x40
 800383c:	616b      	str	r3, [r5, #20]
 800383e:	2300      	movs	r3, #0
 8003840:	9309      	str	r3, [sp, #36]	; 0x24
 8003842:	2320      	movs	r3, #32
 8003844:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003848:	2330      	movs	r3, #48	; 0x30
 800384a:	f04f 0901 	mov.w	r9, #1
 800384e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003852:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80039f4 <_svfiprintf_r+0x1e8>
 8003856:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800385a:	4623      	mov	r3, r4
 800385c:	469a      	mov	sl, r3
 800385e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003862:	b10a      	cbz	r2, 8003868 <_svfiprintf_r+0x5c>
 8003864:	2a25      	cmp	r2, #37	; 0x25
 8003866:	d1f9      	bne.n	800385c <_svfiprintf_r+0x50>
 8003868:	ebba 0b04 	subs.w	fp, sl, r4
 800386c:	d00b      	beq.n	8003886 <_svfiprintf_r+0x7a>
 800386e:	465b      	mov	r3, fp
 8003870:	4622      	mov	r2, r4
 8003872:	4629      	mov	r1, r5
 8003874:	4638      	mov	r0, r7
 8003876:	f7ff ff6f 	bl	8003758 <__ssputs_r>
 800387a:	3001      	adds	r0, #1
 800387c:	f000 80a9 	beq.w	80039d2 <_svfiprintf_r+0x1c6>
 8003880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003882:	445a      	add	r2, fp
 8003884:	9209      	str	r2, [sp, #36]	; 0x24
 8003886:	f89a 3000 	ldrb.w	r3, [sl]
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 80a1 	beq.w	80039d2 <_svfiprintf_r+0x1c6>
 8003890:	2300      	movs	r3, #0
 8003892:	f04f 32ff 	mov.w	r2, #4294967295
 8003896:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800389a:	f10a 0a01 	add.w	sl, sl, #1
 800389e:	9304      	str	r3, [sp, #16]
 80038a0:	9307      	str	r3, [sp, #28]
 80038a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038a6:	931a      	str	r3, [sp, #104]	; 0x68
 80038a8:	4654      	mov	r4, sl
 80038aa:	2205      	movs	r2, #5
 80038ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038b0:	4850      	ldr	r0, [pc, #320]	; (80039f4 <_svfiprintf_r+0x1e8>)
 80038b2:	f000 fa57 	bl	8003d64 <memchr>
 80038b6:	9a04      	ldr	r2, [sp, #16]
 80038b8:	b9d8      	cbnz	r0, 80038f2 <_svfiprintf_r+0xe6>
 80038ba:	06d0      	lsls	r0, r2, #27
 80038bc:	bf44      	itt	mi
 80038be:	2320      	movmi	r3, #32
 80038c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038c4:	0711      	lsls	r1, r2, #28
 80038c6:	bf44      	itt	mi
 80038c8:	232b      	movmi	r3, #43	; 0x2b
 80038ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038ce:	f89a 3000 	ldrb.w	r3, [sl]
 80038d2:	2b2a      	cmp	r3, #42	; 0x2a
 80038d4:	d015      	beq.n	8003902 <_svfiprintf_r+0xf6>
 80038d6:	4654      	mov	r4, sl
 80038d8:	2000      	movs	r0, #0
 80038da:	f04f 0c0a 	mov.w	ip, #10
 80038de:	9a07      	ldr	r2, [sp, #28]
 80038e0:	4621      	mov	r1, r4
 80038e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038e6:	3b30      	subs	r3, #48	; 0x30
 80038e8:	2b09      	cmp	r3, #9
 80038ea:	d94d      	bls.n	8003988 <_svfiprintf_r+0x17c>
 80038ec:	b1b0      	cbz	r0, 800391c <_svfiprintf_r+0x110>
 80038ee:	9207      	str	r2, [sp, #28]
 80038f0:	e014      	b.n	800391c <_svfiprintf_r+0x110>
 80038f2:	eba0 0308 	sub.w	r3, r0, r8
 80038f6:	fa09 f303 	lsl.w	r3, r9, r3
 80038fa:	4313      	orrs	r3, r2
 80038fc:	46a2      	mov	sl, r4
 80038fe:	9304      	str	r3, [sp, #16]
 8003900:	e7d2      	b.n	80038a8 <_svfiprintf_r+0x9c>
 8003902:	9b03      	ldr	r3, [sp, #12]
 8003904:	1d19      	adds	r1, r3, #4
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	9103      	str	r1, [sp, #12]
 800390a:	2b00      	cmp	r3, #0
 800390c:	bfbb      	ittet	lt
 800390e:	425b      	neglt	r3, r3
 8003910:	f042 0202 	orrlt.w	r2, r2, #2
 8003914:	9307      	strge	r3, [sp, #28]
 8003916:	9307      	strlt	r3, [sp, #28]
 8003918:	bfb8      	it	lt
 800391a:	9204      	strlt	r2, [sp, #16]
 800391c:	7823      	ldrb	r3, [r4, #0]
 800391e:	2b2e      	cmp	r3, #46	; 0x2e
 8003920:	d10c      	bne.n	800393c <_svfiprintf_r+0x130>
 8003922:	7863      	ldrb	r3, [r4, #1]
 8003924:	2b2a      	cmp	r3, #42	; 0x2a
 8003926:	d134      	bne.n	8003992 <_svfiprintf_r+0x186>
 8003928:	9b03      	ldr	r3, [sp, #12]
 800392a:	3402      	adds	r4, #2
 800392c:	1d1a      	adds	r2, r3, #4
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	9203      	str	r2, [sp, #12]
 8003932:	2b00      	cmp	r3, #0
 8003934:	bfb8      	it	lt
 8003936:	f04f 33ff 	movlt.w	r3, #4294967295
 800393a:	9305      	str	r3, [sp, #20]
 800393c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80039f8 <_svfiprintf_r+0x1ec>
 8003940:	2203      	movs	r2, #3
 8003942:	4650      	mov	r0, sl
 8003944:	7821      	ldrb	r1, [r4, #0]
 8003946:	f000 fa0d 	bl	8003d64 <memchr>
 800394a:	b138      	cbz	r0, 800395c <_svfiprintf_r+0x150>
 800394c:	2240      	movs	r2, #64	; 0x40
 800394e:	9b04      	ldr	r3, [sp, #16]
 8003950:	eba0 000a 	sub.w	r0, r0, sl
 8003954:	4082      	lsls	r2, r0
 8003956:	4313      	orrs	r3, r2
 8003958:	3401      	adds	r4, #1
 800395a:	9304      	str	r3, [sp, #16]
 800395c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003960:	2206      	movs	r2, #6
 8003962:	4826      	ldr	r0, [pc, #152]	; (80039fc <_svfiprintf_r+0x1f0>)
 8003964:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003968:	f000 f9fc 	bl	8003d64 <memchr>
 800396c:	2800      	cmp	r0, #0
 800396e:	d038      	beq.n	80039e2 <_svfiprintf_r+0x1d6>
 8003970:	4b23      	ldr	r3, [pc, #140]	; (8003a00 <_svfiprintf_r+0x1f4>)
 8003972:	bb1b      	cbnz	r3, 80039bc <_svfiprintf_r+0x1b0>
 8003974:	9b03      	ldr	r3, [sp, #12]
 8003976:	3307      	adds	r3, #7
 8003978:	f023 0307 	bic.w	r3, r3, #7
 800397c:	3308      	adds	r3, #8
 800397e:	9303      	str	r3, [sp, #12]
 8003980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003982:	4433      	add	r3, r6
 8003984:	9309      	str	r3, [sp, #36]	; 0x24
 8003986:	e768      	b.n	800385a <_svfiprintf_r+0x4e>
 8003988:	460c      	mov	r4, r1
 800398a:	2001      	movs	r0, #1
 800398c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003990:	e7a6      	b.n	80038e0 <_svfiprintf_r+0xd4>
 8003992:	2300      	movs	r3, #0
 8003994:	f04f 0c0a 	mov.w	ip, #10
 8003998:	4619      	mov	r1, r3
 800399a:	3401      	adds	r4, #1
 800399c:	9305      	str	r3, [sp, #20]
 800399e:	4620      	mov	r0, r4
 80039a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039a4:	3a30      	subs	r2, #48	; 0x30
 80039a6:	2a09      	cmp	r2, #9
 80039a8:	d903      	bls.n	80039b2 <_svfiprintf_r+0x1a6>
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0c6      	beq.n	800393c <_svfiprintf_r+0x130>
 80039ae:	9105      	str	r1, [sp, #20]
 80039b0:	e7c4      	b.n	800393c <_svfiprintf_r+0x130>
 80039b2:	4604      	mov	r4, r0
 80039b4:	2301      	movs	r3, #1
 80039b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80039ba:	e7f0      	b.n	800399e <_svfiprintf_r+0x192>
 80039bc:	ab03      	add	r3, sp, #12
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	462a      	mov	r2, r5
 80039c2:	4638      	mov	r0, r7
 80039c4:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <_svfiprintf_r+0x1f8>)
 80039c6:	a904      	add	r1, sp, #16
 80039c8:	f3af 8000 	nop.w
 80039cc:	1c42      	adds	r2, r0, #1
 80039ce:	4606      	mov	r6, r0
 80039d0:	d1d6      	bne.n	8003980 <_svfiprintf_r+0x174>
 80039d2:	89ab      	ldrh	r3, [r5, #12]
 80039d4:	065b      	lsls	r3, r3, #25
 80039d6:	f53f af2d 	bmi.w	8003834 <_svfiprintf_r+0x28>
 80039da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039dc:	b01d      	add	sp, #116	; 0x74
 80039de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039e2:	ab03      	add	r3, sp, #12
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	462a      	mov	r2, r5
 80039e8:	4638      	mov	r0, r7
 80039ea:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <_svfiprintf_r+0x1f8>)
 80039ec:	a904      	add	r1, sp, #16
 80039ee:	f000 f87d 	bl	8003aec <_printf_i>
 80039f2:	e7eb      	b.n	80039cc <_svfiprintf_r+0x1c0>
 80039f4:	080055de 	.word	0x080055de
 80039f8:	080055e4 	.word	0x080055e4
 80039fc:	080055e8 	.word	0x080055e8
 8003a00:	00000000 	.word	0x00000000
 8003a04:	08003759 	.word	0x08003759

08003a08 <_printf_common>:
 8003a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a0c:	4616      	mov	r6, r2
 8003a0e:	4699      	mov	r9, r3
 8003a10:	688a      	ldr	r2, [r1, #8]
 8003a12:	690b      	ldr	r3, [r1, #16]
 8003a14:	4607      	mov	r7, r0
 8003a16:	4293      	cmp	r3, r2
 8003a18:	bfb8      	it	lt
 8003a1a:	4613      	movlt	r3, r2
 8003a1c:	6033      	str	r3, [r6, #0]
 8003a1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a22:	460c      	mov	r4, r1
 8003a24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a28:	b10a      	cbz	r2, 8003a2e <_printf_common+0x26>
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	6033      	str	r3, [r6, #0]
 8003a2e:	6823      	ldr	r3, [r4, #0]
 8003a30:	0699      	lsls	r1, r3, #26
 8003a32:	bf42      	ittt	mi
 8003a34:	6833      	ldrmi	r3, [r6, #0]
 8003a36:	3302      	addmi	r3, #2
 8003a38:	6033      	strmi	r3, [r6, #0]
 8003a3a:	6825      	ldr	r5, [r4, #0]
 8003a3c:	f015 0506 	ands.w	r5, r5, #6
 8003a40:	d106      	bne.n	8003a50 <_printf_common+0x48>
 8003a42:	f104 0a19 	add.w	sl, r4, #25
 8003a46:	68e3      	ldr	r3, [r4, #12]
 8003a48:	6832      	ldr	r2, [r6, #0]
 8003a4a:	1a9b      	subs	r3, r3, r2
 8003a4c:	42ab      	cmp	r3, r5
 8003a4e:	dc2b      	bgt.n	8003aa8 <_printf_common+0xa0>
 8003a50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a54:	1e13      	subs	r3, r2, #0
 8003a56:	6822      	ldr	r2, [r4, #0]
 8003a58:	bf18      	it	ne
 8003a5a:	2301      	movne	r3, #1
 8003a5c:	0692      	lsls	r2, r2, #26
 8003a5e:	d430      	bmi.n	8003ac2 <_printf_common+0xba>
 8003a60:	4649      	mov	r1, r9
 8003a62:	4638      	mov	r0, r7
 8003a64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a68:	47c0      	blx	r8
 8003a6a:	3001      	adds	r0, #1
 8003a6c:	d023      	beq.n	8003ab6 <_printf_common+0xae>
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	6922      	ldr	r2, [r4, #16]
 8003a72:	f003 0306 	and.w	r3, r3, #6
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	bf14      	ite	ne
 8003a7a:	2500      	movne	r5, #0
 8003a7c:	6833      	ldreq	r3, [r6, #0]
 8003a7e:	f04f 0600 	mov.w	r6, #0
 8003a82:	bf08      	it	eq
 8003a84:	68e5      	ldreq	r5, [r4, #12]
 8003a86:	f104 041a 	add.w	r4, r4, #26
 8003a8a:	bf08      	it	eq
 8003a8c:	1aed      	subeq	r5, r5, r3
 8003a8e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003a92:	bf08      	it	eq
 8003a94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	bfc4      	itt	gt
 8003a9c:	1a9b      	subgt	r3, r3, r2
 8003a9e:	18ed      	addgt	r5, r5, r3
 8003aa0:	42b5      	cmp	r5, r6
 8003aa2:	d11a      	bne.n	8003ada <_printf_common+0xd2>
 8003aa4:	2000      	movs	r0, #0
 8003aa6:	e008      	b.n	8003aba <_printf_common+0xb2>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	4652      	mov	r2, sl
 8003aac:	4649      	mov	r1, r9
 8003aae:	4638      	mov	r0, r7
 8003ab0:	47c0      	blx	r8
 8003ab2:	3001      	adds	r0, #1
 8003ab4:	d103      	bne.n	8003abe <_printf_common+0xb6>
 8003ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8003aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003abe:	3501      	adds	r5, #1
 8003ac0:	e7c1      	b.n	8003a46 <_printf_common+0x3e>
 8003ac2:	2030      	movs	r0, #48	; 0x30
 8003ac4:	18e1      	adds	r1, r4, r3
 8003ac6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ad0:	4422      	add	r2, r4
 8003ad2:	3302      	adds	r3, #2
 8003ad4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ad8:	e7c2      	b.n	8003a60 <_printf_common+0x58>
 8003ada:	2301      	movs	r3, #1
 8003adc:	4622      	mov	r2, r4
 8003ade:	4649      	mov	r1, r9
 8003ae0:	4638      	mov	r0, r7
 8003ae2:	47c0      	blx	r8
 8003ae4:	3001      	adds	r0, #1
 8003ae6:	d0e6      	beq.n	8003ab6 <_printf_common+0xae>
 8003ae8:	3601      	adds	r6, #1
 8003aea:	e7d9      	b.n	8003aa0 <_printf_common+0x98>

08003aec <_printf_i>:
 8003aec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003af0:	7e0f      	ldrb	r7, [r1, #24]
 8003af2:	4691      	mov	r9, r2
 8003af4:	2f78      	cmp	r7, #120	; 0x78
 8003af6:	4680      	mov	r8, r0
 8003af8:	460c      	mov	r4, r1
 8003afa:	469a      	mov	sl, r3
 8003afc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003afe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b02:	d807      	bhi.n	8003b14 <_printf_i+0x28>
 8003b04:	2f62      	cmp	r7, #98	; 0x62
 8003b06:	d80a      	bhi.n	8003b1e <_printf_i+0x32>
 8003b08:	2f00      	cmp	r7, #0
 8003b0a:	f000 80d5 	beq.w	8003cb8 <_printf_i+0x1cc>
 8003b0e:	2f58      	cmp	r7, #88	; 0x58
 8003b10:	f000 80c1 	beq.w	8003c96 <_printf_i+0x1aa>
 8003b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b1c:	e03a      	b.n	8003b94 <_printf_i+0xa8>
 8003b1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b22:	2b15      	cmp	r3, #21
 8003b24:	d8f6      	bhi.n	8003b14 <_printf_i+0x28>
 8003b26:	a101      	add	r1, pc, #4	; (adr r1, 8003b2c <_printf_i+0x40>)
 8003b28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b2c:	08003b85 	.word	0x08003b85
 8003b30:	08003b99 	.word	0x08003b99
 8003b34:	08003b15 	.word	0x08003b15
 8003b38:	08003b15 	.word	0x08003b15
 8003b3c:	08003b15 	.word	0x08003b15
 8003b40:	08003b15 	.word	0x08003b15
 8003b44:	08003b99 	.word	0x08003b99
 8003b48:	08003b15 	.word	0x08003b15
 8003b4c:	08003b15 	.word	0x08003b15
 8003b50:	08003b15 	.word	0x08003b15
 8003b54:	08003b15 	.word	0x08003b15
 8003b58:	08003c9f 	.word	0x08003c9f
 8003b5c:	08003bc5 	.word	0x08003bc5
 8003b60:	08003c59 	.word	0x08003c59
 8003b64:	08003b15 	.word	0x08003b15
 8003b68:	08003b15 	.word	0x08003b15
 8003b6c:	08003cc1 	.word	0x08003cc1
 8003b70:	08003b15 	.word	0x08003b15
 8003b74:	08003bc5 	.word	0x08003bc5
 8003b78:	08003b15 	.word	0x08003b15
 8003b7c:	08003b15 	.word	0x08003b15
 8003b80:	08003c61 	.word	0x08003c61
 8003b84:	682b      	ldr	r3, [r5, #0]
 8003b86:	1d1a      	adds	r2, r3, #4
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	602a      	str	r2, [r5, #0]
 8003b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0a0      	b.n	8003cda <_printf_i+0x1ee>
 8003b98:	6820      	ldr	r0, [r4, #0]
 8003b9a:	682b      	ldr	r3, [r5, #0]
 8003b9c:	0607      	lsls	r7, r0, #24
 8003b9e:	f103 0104 	add.w	r1, r3, #4
 8003ba2:	6029      	str	r1, [r5, #0]
 8003ba4:	d501      	bpl.n	8003baa <_printf_i+0xbe>
 8003ba6:	681e      	ldr	r6, [r3, #0]
 8003ba8:	e003      	b.n	8003bb2 <_printf_i+0xc6>
 8003baa:	0646      	lsls	r6, r0, #25
 8003bac:	d5fb      	bpl.n	8003ba6 <_printf_i+0xba>
 8003bae:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003bb2:	2e00      	cmp	r6, #0
 8003bb4:	da03      	bge.n	8003bbe <_printf_i+0xd2>
 8003bb6:	232d      	movs	r3, #45	; 0x2d
 8003bb8:	4276      	negs	r6, r6
 8003bba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bbe:	230a      	movs	r3, #10
 8003bc0:	4859      	ldr	r0, [pc, #356]	; (8003d28 <_printf_i+0x23c>)
 8003bc2:	e012      	b.n	8003bea <_printf_i+0xfe>
 8003bc4:	682b      	ldr	r3, [r5, #0]
 8003bc6:	6820      	ldr	r0, [r4, #0]
 8003bc8:	1d19      	adds	r1, r3, #4
 8003bca:	6029      	str	r1, [r5, #0]
 8003bcc:	0605      	lsls	r5, r0, #24
 8003bce:	d501      	bpl.n	8003bd4 <_printf_i+0xe8>
 8003bd0:	681e      	ldr	r6, [r3, #0]
 8003bd2:	e002      	b.n	8003bda <_printf_i+0xee>
 8003bd4:	0641      	lsls	r1, r0, #25
 8003bd6:	d5fb      	bpl.n	8003bd0 <_printf_i+0xe4>
 8003bd8:	881e      	ldrh	r6, [r3, #0]
 8003bda:	2f6f      	cmp	r7, #111	; 0x6f
 8003bdc:	bf0c      	ite	eq
 8003bde:	2308      	moveq	r3, #8
 8003be0:	230a      	movne	r3, #10
 8003be2:	4851      	ldr	r0, [pc, #324]	; (8003d28 <_printf_i+0x23c>)
 8003be4:	2100      	movs	r1, #0
 8003be6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003bea:	6865      	ldr	r5, [r4, #4]
 8003bec:	2d00      	cmp	r5, #0
 8003bee:	bfa8      	it	ge
 8003bf0:	6821      	ldrge	r1, [r4, #0]
 8003bf2:	60a5      	str	r5, [r4, #8]
 8003bf4:	bfa4      	itt	ge
 8003bf6:	f021 0104 	bicge.w	r1, r1, #4
 8003bfa:	6021      	strge	r1, [r4, #0]
 8003bfc:	b90e      	cbnz	r6, 8003c02 <_printf_i+0x116>
 8003bfe:	2d00      	cmp	r5, #0
 8003c00:	d04b      	beq.n	8003c9a <_printf_i+0x1ae>
 8003c02:	4615      	mov	r5, r2
 8003c04:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c08:	fb03 6711 	mls	r7, r3, r1, r6
 8003c0c:	5dc7      	ldrb	r7, [r0, r7]
 8003c0e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c12:	4637      	mov	r7, r6
 8003c14:	42bb      	cmp	r3, r7
 8003c16:	460e      	mov	r6, r1
 8003c18:	d9f4      	bls.n	8003c04 <_printf_i+0x118>
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d10b      	bne.n	8003c36 <_printf_i+0x14a>
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	07de      	lsls	r6, r3, #31
 8003c22:	d508      	bpl.n	8003c36 <_printf_i+0x14a>
 8003c24:	6923      	ldr	r3, [r4, #16]
 8003c26:	6861      	ldr	r1, [r4, #4]
 8003c28:	4299      	cmp	r1, r3
 8003c2a:	bfde      	ittt	le
 8003c2c:	2330      	movle	r3, #48	; 0x30
 8003c2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c32:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c36:	1b52      	subs	r2, r2, r5
 8003c38:	6122      	str	r2, [r4, #16]
 8003c3a:	464b      	mov	r3, r9
 8003c3c:	4621      	mov	r1, r4
 8003c3e:	4640      	mov	r0, r8
 8003c40:	f8cd a000 	str.w	sl, [sp]
 8003c44:	aa03      	add	r2, sp, #12
 8003c46:	f7ff fedf 	bl	8003a08 <_printf_common>
 8003c4a:	3001      	adds	r0, #1
 8003c4c:	d14a      	bne.n	8003ce4 <_printf_i+0x1f8>
 8003c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8003c52:	b004      	add	sp, #16
 8003c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c58:	6823      	ldr	r3, [r4, #0]
 8003c5a:	f043 0320 	orr.w	r3, r3, #32
 8003c5e:	6023      	str	r3, [r4, #0]
 8003c60:	2778      	movs	r7, #120	; 0x78
 8003c62:	4832      	ldr	r0, [pc, #200]	; (8003d2c <_printf_i+0x240>)
 8003c64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c68:	6823      	ldr	r3, [r4, #0]
 8003c6a:	6829      	ldr	r1, [r5, #0]
 8003c6c:	061f      	lsls	r7, r3, #24
 8003c6e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c72:	d402      	bmi.n	8003c7a <_printf_i+0x18e>
 8003c74:	065f      	lsls	r7, r3, #25
 8003c76:	bf48      	it	mi
 8003c78:	b2b6      	uxthmi	r6, r6
 8003c7a:	07df      	lsls	r7, r3, #31
 8003c7c:	bf48      	it	mi
 8003c7e:	f043 0320 	orrmi.w	r3, r3, #32
 8003c82:	6029      	str	r1, [r5, #0]
 8003c84:	bf48      	it	mi
 8003c86:	6023      	strmi	r3, [r4, #0]
 8003c88:	b91e      	cbnz	r6, 8003c92 <_printf_i+0x1a6>
 8003c8a:	6823      	ldr	r3, [r4, #0]
 8003c8c:	f023 0320 	bic.w	r3, r3, #32
 8003c90:	6023      	str	r3, [r4, #0]
 8003c92:	2310      	movs	r3, #16
 8003c94:	e7a6      	b.n	8003be4 <_printf_i+0xf8>
 8003c96:	4824      	ldr	r0, [pc, #144]	; (8003d28 <_printf_i+0x23c>)
 8003c98:	e7e4      	b.n	8003c64 <_printf_i+0x178>
 8003c9a:	4615      	mov	r5, r2
 8003c9c:	e7bd      	b.n	8003c1a <_printf_i+0x12e>
 8003c9e:	682b      	ldr	r3, [r5, #0]
 8003ca0:	6826      	ldr	r6, [r4, #0]
 8003ca2:	1d18      	adds	r0, r3, #4
 8003ca4:	6961      	ldr	r1, [r4, #20]
 8003ca6:	6028      	str	r0, [r5, #0]
 8003ca8:	0635      	lsls	r5, r6, #24
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	d501      	bpl.n	8003cb2 <_printf_i+0x1c6>
 8003cae:	6019      	str	r1, [r3, #0]
 8003cb0:	e002      	b.n	8003cb8 <_printf_i+0x1cc>
 8003cb2:	0670      	lsls	r0, r6, #25
 8003cb4:	d5fb      	bpl.n	8003cae <_printf_i+0x1c2>
 8003cb6:	8019      	strh	r1, [r3, #0]
 8003cb8:	2300      	movs	r3, #0
 8003cba:	4615      	mov	r5, r2
 8003cbc:	6123      	str	r3, [r4, #16]
 8003cbe:	e7bc      	b.n	8003c3a <_printf_i+0x14e>
 8003cc0:	682b      	ldr	r3, [r5, #0]
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	1d1a      	adds	r2, r3, #4
 8003cc6:	602a      	str	r2, [r5, #0]
 8003cc8:	681d      	ldr	r5, [r3, #0]
 8003cca:	6862      	ldr	r2, [r4, #4]
 8003ccc:	4628      	mov	r0, r5
 8003cce:	f000 f849 	bl	8003d64 <memchr>
 8003cd2:	b108      	cbz	r0, 8003cd8 <_printf_i+0x1ec>
 8003cd4:	1b40      	subs	r0, r0, r5
 8003cd6:	6060      	str	r0, [r4, #4]
 8003cd8:	6863      	ldr	r3, [r4, #4]
 8003cda:	6123      	str	r3, [r4, #16]
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ce2:	e7aa      	b.n	8003c3a <_printf_i+0x14e>
 8003ce4:	462a      	mov	r2, r5
 8003ce6:	4649      	mov	r1, r9
 8003ce8:	4640      	mov	r0, r8
 8003cea:	6923      	ldr	r3, [r4, #16]
 8003cec:	47d0      	blx	sl
 8003cee:	3001      	adds	r0, #1
 8003cf0:	d0ad      	beq.n	8003c4e <_printf_i+0x162>
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	079b      	lsls	r3, r3, #30
 8003cf6:	d413      	bmi.n	8003d20 <_printf_i+0x234>
 8003cf8:	68e0      	ldr	r0, [r4, #12]
 8003cfa:	9b03      	ldr	r3, [sp, #12]
 8003cfc:	4298      	cmp	r0, r3
 8003cfe:	bfb8      	it	lt
 8003d00:	4618      	movlt	r0, r3
 8003d02:	e7a6      	b.n	8003c52 <_printf_i+0x166>
 8003d04:	2301      	movs	r3, #1
 8003d06:	4632      	mov	r2, r6
 8003d08:	4649      	mov	r1, r9
 8003d0a:	4640      	mov	r0, r8
 8003d0c:	47d0      	blx	sl
 8003d0e:	3001      	adds	r0, #1
 8003d10:	d09d      	beq.n	8003c4e <_printf_i+0x162>
 8003d12:	3501      	adds	r5, #1
 8003d14:	68e3      	ldr	r3, [r4, #12]
 8003d16:	9903      	ldr	r1, [sp, #12]
 8003d18:	1a5b      	subs	r3, r3, r1
 8003d1a:	42ab      	cmp	r3, r5
 8003d1c:	dcf2      	bgt.n	8003d04 <_printf_i+0x218>
 8003d1e:	e7eb      	b.n	8003cf8 <_printf_i+0x20c>
 8003d20:	2500      	movs	r5, #0
 8003d22:	f104 0619 	add.w	r6, r4, #25
 8003d26:	e7f5      	b.n	8003d14 <_printf_i+0x228>
 8003d28:	080055ef 	.word	0x080055ef
 8003d2c:	08005600 	.word	0x08005600

08003d30 <memmove>:
 8003d30:	4288      	cmp	r0, r1
 8003d32:	b510      	push	{r4, lr}
 8003d34:	eb01 0402 	add.w	r4, r1, r2
 8003d38:	d902      	bls.n	8003d40 <memmove+0x10>
 8003d3a:	4284      	cmp	r4, r0
 8003d3c:	4623      	mov	r3, r4
 8003d3e:	d807      	bhi.n	8003d50 <memmove+0x20>
 8003d40:	1e43      	subs	r3, r0, #1
 8003d42:	42a1      	cmp	r1, r4
 8003d44:	d008      	beq.n	8003d58 <memmove+0x28>
 8003d46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d4e:	e7f8      	b.n	8003d42 <memmove+0x12>
 8003d50:	4601      	mov	r1, r0
 8003d52:	4402      	add	r2, r0
 8003d54:	428a      	cmp	r2, r1
 8003d56:	d100      	bne.n	8003d5a <memmove+0x2a>
 8003d58:	bd10      	pop	{r4, pc}
 8003d5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d62:	e7f7      	b.n	8003d54 <memmove+0x24>

08003d64 <memchr>:
 8003d64:	4603      	mov	r3, r0
 8003d66:	b510      	push	{r4, lr}
 8003d68:	b2c9      	uxtb	r1, r1
 8003d6a:	4402      	add	r2, r0
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	4618      	mov	r0, r3
 8003d70:	d101      	bne.n	8003d76 <memchr+0x12>
 8003d72:	2000      	movs	r0, #0
 8003d74:	e003      	b.n	8003d7e <memchr+0x1a>
 8003d76:	7804      	ldrb	r4, [r0, #0]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	428c      	cmp	r4, r1
 8003d7c:	d1f6      	bne.n	8003d6c <memchr+0x8>
 8003d7e:	bd10      	pop	{r4, pc}

08003d80 <_realloc_r>:
 8003d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d84:	4680      	mov	r8, r0
 8003d86:	4614      	mov	r4, r2
 8003d88:	460e      	mov	r6, r1
 8003d8a:	b921      	cbnz	r1, 8003d96 <_realloc_r+0x16>
 8003d8c:	4611      	mov	r1, r2
 8003d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d92:	f7ff bb9b 	b.w	80034cc <_malloc_r>
 8003d96:	b92a      	cbnz	r2, 8003da4 <_realloc_r+0x24>
 8003d98:	f7ff fc96 	bl	80036c8 <_free_r>
 8003d9c:	4625      	mov	r5, r4
 8003d9e:	4628      	mov	r0, r5
 8003da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003da4:	f000 f81b 	bl	8003dde <_malloc_usable_size_r>
 8003da8:	4284      	cmp	r4, r0
 8003daa:	4607      	mov	r7, r0
 8003dac:	d802      	bhi.n	8003db4 <_realloc_r+0x34>
 8003dae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003db2:	d812      	bhi.n	8003dda <_realloc_r+0x5a>
 8003db4:	4621      	mov	r1, r4
 8003db6:	4640      	mov	r0, r8
 8003db8:	f7ff fb88 	bl	80034cc <_malloc_r>
 8003dbc:	4605      	mov	r5, r0
 8003dbe:	2800      	cmp	r0, #0
 8003dc0:	d0ed      	beq.n	8003d9e <_realloc_r+0x1e>
 8003dc2:	42bc      	cmp	r4, r7
 8003dc4:	4622      	mov	r2, r4
 8003dc6:	4631      	mov	r1, r6
 8003dc8:	bf28      	it	cs
 8003dca:	463a      	movcs	r2, r7
 8003dcc:	f7ff fc6e 	bl	80036ac <memcpy>
 8003dd0:	4631      	mov	r1, r6
 8003dd2:	4640      	mov	r0, r8
 8003dd4:	f7ff fc78 	bl	80036c8 <_free_r>
 8003dd8:	e7e1      	b.n	8003d9e <_realloc_r+0x1e>
 8003dda:	4635      	mov	r5, r6
 8003ddc:	e7df      	b.n	8003d9e <_realloc_r+0x1e>

08003dde <_malloc_usable_size_r>:
 8003dde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003de2:	1f18      	subs	r0, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	bfbc      	itt	lt
 8003de8:	580b      	ldrlt	r3, [r1, r0]
 8003dea:	18c0      	addlt	r0, r0, r3
 8003dec:	4770      	bx	lr
	...

08003df0 <_init>:
 8003df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df2:	bf00      	nop
 8003df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003df6:	bc08      	pop	{r3}
 8003df8:	469e      	mov	lr, r3
 8003dfa:	4770      	bx	lr

08003dfc <_fini>:
 8003dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfe:	bf00      	nop
 8003e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e02:	bc08      	pop	{r3}
 8003e04:	469e      	mov	lr, r3
 8003e06:	4770      	bx	lr
