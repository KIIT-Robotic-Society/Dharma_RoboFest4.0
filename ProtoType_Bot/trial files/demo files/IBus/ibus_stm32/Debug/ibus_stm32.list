
ibus_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004440  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08004610  08004610  00005610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004860  08004860  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004860  08004860  00005860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004868  08004868  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004868  08004868  00005868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800486c  0800486c  0000586c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004870  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000678  2000005c  080048cc  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006d4  080048cc  000066d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ac8  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bd7  00000000  00000000  0000fb54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  00011730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000643  00000000  00000000  00011ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002163c  00000000  00000000  00012533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b250  00000000  00000000  00033b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c86cc  00000000  00000000  0003edbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010748b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002490  00000000  00000000  001074d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00109960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080045f8 	.word	0x080045f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080045f8 	.word	0x080045f8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <J3_IBUS_new>:
#include "J3_IBUS_FLYSKY.h"


//typedef struct TRxIBus TRxIBus;

TRxIBus* J3_IBUS_new(UART_HandleTypeDef* _uart, uint8_t _qtdCanal){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	460b      	mov	r3, r1
 80005ba:	70fb      	strb	r3, [r7, #3]
  TRxIBus* auxRxIBus;

  auxRxIBus = malloc(sizeof(TRxIBus));
 80005bc:	2018      	movs	r0, #24
 80005be:	f003 fabb 	bl	8003b38 <malloc>
 80005c2:	4603      	mov	r3, r0
 80005c4:	60fb      	str	r3, [r7, #12]
  auxRxIBus->uart = _uart;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	601a      	str	r2, [r3, #0]
  auxRxIBus->qdtCanal = _qtdCanal;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	78fa      	ldrb	r2, [r7, #3]
 80005d0:	711a      	strb	r2, [r3, #4]

  auxRxIBus->buffer_size = ((auxRxIBus->qdtCanal * 2) + 4) * 2; /* Armazena 2 buffers para garantir ler o pacote inteiro */
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	791b      	ldrb	r3, [r3, #4]
 80005d6:	3302      	adds	r3, #2
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	731a      	strb	r2, [r3, #12]
  /* Esse + 4 �  1 byte de inicio, 2 bytes de checksum, 1 byte de finalizador  */

  auxRxIBus->buffer = malloc(auxRxIBus->buffer_size * sizeof(uint8_t));
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	7b1b      	ldrb	r3, [r3, #12]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 faa6 	bl	8003b38 <malloc>
 80005ec:	4603      	mov	r3, r0
 80005ee:	461a      	mov	r2, r3
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	609a      	str	r2, [r3, #8]
  memset(auxRxIBus->buffer, 0x00, auxRxIBus->buffer_size * sizeof(uint8_t));
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	6898      	ldr	r0, [r3, #8]
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	7b1b      	ldrb	r3, [r3, #12]
 80005fc:	461a      	mov	r2, r3
 80005fe:	2100      	movs	r1, #0
 8000600:	f003 fc28 	bl	8003e54 <memset>

  auxRxIBus->canais = malloc(auxRxIBus->qdtCanal * sizeof(uint16_t));
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	791b      	ldrb	r3, [r3, #4]
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	4618      	mov	r0, r3
 800060c:	f003 fa94 	bl	8003b38 <malloc>
 8000610:	4603      	mov	r3, r0
 8000612:	461a      	mov	r2, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	611a      	str	r2, [r3, #16]
  memset(auxRxIBus->canais, 0x00, auxRxIBus->qdtCanal * sizeof(uint16_t));
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	6918      	ldr	r0, [r3, #16]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	791b      	ldrb	r3, [r3, #4]
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	461a      	mov	r2, r3
 8000624:	2100      	movs	r1, #0
 8000626:	f003 fc15 	bl	8003e54 <memset>

  /* Armazena os valores enquanto processa */
  auxRxIBus->canais_tmp = malloc(auxRxIBus->qdtCanal * sizeof(uint16_t));
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	791b      	ldrb	r3, [r3, #4]
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	4618      	mov	r0, r3
 8000632:	f003 fa81 	bl	8003b38 <malloc>
 8000636:	4603      	mov	r3, r0
 8000638:	461a      	mov	r2, r3
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	615a      	str	r2, [r3, #20]
  memset(auxRxIBus->canais_tmp, 0x00, auxRxIBus->qdtCanal * sizeof(uint16_t));
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	6958      	ldr	r0, [r3, #20]
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	791b      	ldrb	r3, [r3, #4]
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	461a      	mov	r2, r3
 800064a:	2100      	movs	r1, #0
 800064c:	f003 fc02 	bl	8003e54 <memset>


  return auxRxIBus;
 8000650:	68fb      	ldr	r3, [r7, #12]
}
 8000652:	4618      	mov	r0, r3
 8000654:	3710      	adds	r7, #16
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <J3_IBUS_RequestNewData>:

  return _RxIBus->canais[_canal-1];
}

// Request new data to the buffer using DMA reception
void J3_IBUS_RequestNewData(TRxIBus* _RxIBus) {
 800065a:	b580      	push	{r7, lr}
 800065c:	b082      	sub	sp, #8
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
    // Clear the buffer before receiving new data
    memset(_RxIBus->buffer, 0, _RxIBus->buffer_size);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6898      	ldr	r0, [r3, #8]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	7b1b      	ldrb	r3, [r3, #12]
 800066a:	461a      	mov	r2, r3
 800066c:	2100      	movs	r1, #0
 800066e:	f003 fbf1 	bl	8003e54 <memset>

    // Start DMA reception to receive data into the buffer
    HAL_UART_Receive_DMA(_RxIBus->uart, _RxIBus->buffer, _RxIBus->buffer_size);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	6818      	ldr	r0, [r3, #0]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6899      	ldr	r1, [r3, #8]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	7b1b      	ldrb	r3, [r3, #12]
 800067e:	461a      	mov	r2, r3
 8000680:	f002 fd19 	bl	80030b6 <HAL_UART_Receive_DMA>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f000 ff88 	bl	80015a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 fc3a 	bl	8000f0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000698:	f000 fd8e 	bl	80011b8 <MX_GPIO_Init>
  MX_DMA_Init();
 800069c:	f000 fd6c 	bl	8001178 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006a0:	f000 fd10 	bl	80010c4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80006a4:	f000 fd3e 	bl	8001124 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, (uint8_t*)"Ready to receive!\n", 18, HAL_MAX_DELAY);
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ac:	2212      	movs	r2, #18
 80006ae:	4914      	ldr	r1, [pc, #80]	@ (8000700 <main+0x74>)
 80006b0:	4814      	ldr	r0, [pc, #80]	@ (8000704 <main+0x78>)
 80006b2:	f002 fc75 	bl	8002fa0 <HAL_UART_Transmit>
  RxIBus = J3_IBUS_new(&huart1, 14);
 80006b6:	210e      	movs	r1, #14
 80006b8:	4813      	ldr	r0, [pc, #76]	@ (8000708 <main+0x7c>)
 80006ba:	f7ff ff79 	bl	80005b0 <J3_IBUS_new>
 80006be:	4603      	mov	r3, r0
 80006c0:	4a12      	ldr	r2, [pc, #72]	@ (800070c <main+0x80>)
 80006c2:	6013      	str	r3, [r2, #0]
  HAL_UART_Receive_DMA(&huart1, RxIBus->buffer, 64);
 80006c4:	4b11      	ldr	r3, [pc, #68]	@ (800070c <main+0x80>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	689b      	ldr	r3, [r3, #8]
 80006ca:	2240      	movs	r2, #64	@ 0x40
 80006cc:	4619      	mov	r1, r3
 80006ce:	480e      	ldr	r0, [pc, #56]	@ (8000708 <main+0x7c>)
 80006d0:	f002 fcf1 	bl	80030b6 <HAL_UART_Receive_DMA>
      HAL_UART_Transmit(&huart2, (uint8_t*)temp_buffer, temp_buffer_index, HAL_MAX_DELAY);
      HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);
      verify_checksum(temp_buffer);
      J3_IBUS_RequestNewData(RxIBus);*/

	  HAL_Delay(100);  // Prevent watchdog reset
 80006d4:	2064      	movs	r0, #100	@ 0x64
 80006d6:	f000 ffd7 	bl	8001688 <HAL_Delay>
	    copy_buffer(RxIBus->buffer, 64);
 80006da:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <main+0x80>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	2140      	movs	r1, #64	@ 0x40
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fc80 	bl	8000fe8 <copy_buffer>
	    //HAL_UART_Transmit(&huart2, temp_buffer,128, HAL_MAX_DELAY);
	    //HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);
	    extract_and_sum_data();
 80006e8:	f000 f812 	bl	8000710 <extract_and_sum_data>
	    channel_value();
 80006ec:	f000 f904 	bl	80008f8 <channel_value>
	    J3_IBUS_RequestNewData(RxIBus);
 80006f0:	4b06      	ldr	r3, [pc, #24]	@ (800070c <main+0x80>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff ffb0 	bl	800065a <J3_IBUS_RequestNewData>
  {
 80006fa:	bf00      	nop
 80006fc:	e7ea      	b.n	80006d4 <main+0x48>
 80006fe:	bf00      	nop
 8000700:	08004610 	.word	0x08004610
 8000704:	200000c0 	.word	0x200000c0
 8000708:	20000078 	.word	0x20000078
 800070c:	20000168 	.word	0x20000168

08000710 <extract_and_sum_data>:
	     // Call the function to sum up to 128 hex values
  }
}

void extract_and_sum_data(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b09c      	sub	sp, #112	@ 0x70
 8000714:	af00      	add	r7, sp, #0
    uint32_t sum = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	66fb      	str	r3, [r7, #108]	@ 0x6c
    uint16_t num_values = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
    uint16_t num_values_x = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
    uint16_t last_two_values[2] = {0};
 8000726:	2300      	movs	r3, #0
 8000728:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint16_t expected_result = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62

    for (uint16_t i = 0; i < temp_buffer_index - 3; i++) {
 8000730:	2300      	movs	r3, #0
 8000732:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8000736:	e04c      	b.n	80007d2 <extract_and_sum_data+0xc2>
        if (temp_buffer[i] == '0' && temp_buffer[i + 1] == 'x') {
 8000738:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800073c:	4a67      	ldr	r2, [pc, #412]	@ (80008dc <extract_and_sum_data+0x1cc>)
 800073e:	5cd3      	ldrb	r3, [r2, r3]
 8000740:	2b30      	cmp	r3, #48	@ 0x30
 8000742:	d141      	bne.n	80007c8 <extract_and_sum_data+0xb8>
 8000744:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8000748:	3301      	adds	r3, #1
 800074a:	4a64      	ldr	r2, [pc, #400]	@ (80008dc <extract_and_sum_data+0x1cc>)
 800074c:	5cd3      	ldrb	r3, [r2, r3]
 800074e:	2b78      	cmp	r3, #120	@ 0x78
 8000750:	d13a      	bne.n	80007c8 <extract_and_sum_data+0xb8>

            char hex_value[3] = {};
 8000752:	4b63      	ldr	r3, [pc, #396]	@ (80008e0 <extract_and_sum_data+0x1d0>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	713b      	strb	r3, [r7, #4]
 8000758:	1d7b      	adds	r3, r7, #5
 800075a:	2200      	movs	r2, #0
 800075c:	801a      	strh	r2, [r3, #0]
            hex_value[0] = temp_buffer[i + 2];
 800075e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8000762:	3302      	adds	r3, #2
 8000764:	4a5d      	ldr	r2, [pc, #372]	@ (80008dc <extract_and_sum_data+0x1cc>)
 8000766:	5cd3      	ldrb	r3, [r2, r3]
 8000768:	713b      	strb	r3, [r7, #4]
            hex_value[1] = temp_buffer[i + 3];
 800076a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800076e:	3303      	adds	r3, #3
 8000770:	4a5a      	ldr	r2, [pc, #360]	@ (80008dc <extract_and_sum_data+0x1cc>)
 8000772:	5cd3      	ldrb	r3, [r2, r3]
 8000774:	717b      	strb	r3, [r7, #5]

            uint8_t value = (uint8_t)strtol(hex_value, NULL, 16);
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2210      	movs	r2, #16
 800077a:	2100      	movs	r1, #0
 800077c:	4618      	mov	r0, r3
 800077e:	f003 fb0b 	bl	8003d98 <strtol>
 8000782:	4603      	mov	r3, r0
 8000784:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
            num_values_x++;
 8000788:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800078c:	3301      	adds	r3, #1
 800078e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
           if (num_values_x == 31) {
 8000792:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8000796:	2b1f      	cmp	r3, #31
 8000798:	d104      	bne.n	80007a4 <extract_and_sum_data+0x94>
                last_two_values[0] = value;
 800079a:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 800079e:	b29b      	uxth	r3, r3
 80007a0:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
            }
            if (num_values_x == 32) {
 80007a4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80007a8:	2b20      	cmp	r3, #32
 80007aa:	d104      	bne.n	80007b6 <extract_and_sum_data+0xa6>
                last_two_values[1] = value;
 80007ac:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
            }

            i += 3;
 80007b6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80007ba:	3303      	adds	r3, #3
 80007bc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

            if (num_values_x >= 32) {
 80007c0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80007c4:	2b1f      	cmp	r3, #31
 80007c6:	d80c      	bhi.n	80007e2 <extract_and_sum_data+0xd2>
    for (uint16_t i = 0; i < temp_buffer_index - 3; i++) {
 80007c8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80007cc:	3301      	adds	r3, #1
 80007ce:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80007d2:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 80007d6:	4b43      	ldr	r3, [pc, #268]	@ (80008e4 <extract_and_sum_data+0x1d4>)
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	3b03      	subs	r3, #3
 80007dc:	429a      	cmp	r2, r3
 80007de:	dbab      	blt.n	8000738 <extract_and_sum_data+0x28>
 80007e0:	e000      	b.n	80007e4 <extract_and_sum_data+0xd4>
                break;
 80007e2:	bf00      	nop
            }
        }
    }


    for (uint16_t i = 0; i < temp_buffer_index - 3; i++) {
 80007e4:	2300      	movs	r3, #0
 80007e6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80007ea:	e03f      	b.n	800086c <extract_and_sum_data+0x15c>
        if (temp_buffer[i] == '0' && temp_buffer[i + 1] == 'x') {
 80007ec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80007f0:	4a3a      	ldr	r2, [pc, #232]	@ (80008dc <extract_and_sum_data+0x1cc>)
 80007f2:	5cd3      	ldrb	r3, [r2, r3]
 80007f4:	2b30      	cmp	r3, #48	@ 0x30
 80007f6:	d134      	bne.n	8000862 <extract_and_sum_data+0x152>
 80007f8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80007fc:	3301      	adds	r3, #1
 80007fe:	4a37      	ldr	r2, [pc, #220]	@ (80008dc <extract_and_sum_data+0x1cc>)
 8000800:	5cd3      	ldrb	r3, [r2, r3]
 8000802:	2b78      	cmp	r3, #120	@ 0x78
 8000804:	d12d      	bne.n	8000862 <extract_and_sum_data+0x152>
            char hex_value[3] = {};
 8000806:	4b36      	ldr	r3, [pc, #216]	@ (80008e0 <extract_and_sum_data+0x1d0>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	703b      	strb	r3, [r7, #0]
 800080c:	1c7b      	adds	r3, r7, #1
 800080e:	2200      	movs	r2, #0
 8000810:	801a      	strh	r2, [r3, #0]
            hex_value[0] = temp_buffer[i + 2];
 8000812:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8000816:	3302      	adds	r3, #2
 8000818:	4a30      	ldr	r2, [pc, #192]	@ (80008dc <extract_and_sum_data+0x1cc>)
 800081a:	5cd3      	ldrb	r3, [r2, r3]
 800081c:	703b      	strb	r3, [r7, #0]
            hex_value[1] = temp_buffer[i + 3];
 800081e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8000822:	3303      	adds	r3, #3
 8000824:	4a2d      	ldr	r2, [pc, #180]	@ (80008dc <extract_and_sum_data+0x1cc>)
 8000826:	5cd3      	ldrb	r3, [r2, r3]
 8000828:	707b      	strb	r3, [r7, #1]

            uint8_t value = (uint8_t)strtol(hex_value, NULL, 16);
 800082a:	463b      	mov	r3, r7
 800082c:	2210      	movs	r2, #16
 800082e:	2100      	movs	r1, #0
 8000830:	4618      	mov	r0, r3
 8000832:	f003 fab1 	bl	8003d98 <strtol>
 8000836:	4603      	mov	r3, r0
 8000838:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
            sum += value;
 800083c:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8000840:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000842:	4413      	add	r3, r2
 8000844:	66fb      	str	r3, [r7, #108]	@ 0x6c
            num_values++;
 8000846:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800084a:	3301      	adds	r3, #1
 800084c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a

            i += 3;
 8000850:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8000854:	3303      	adds	r3, #3
 8000856:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
            if (num_values >= 30) {
 800085a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800085e:	2b1d      	cmp	r3, #29
 8000860:	d80c      	bhi.n	800087c <extract_and_sum_data+0x16c>
    for (uint16_t i = 0; i < temp_buffer_index - 3; i++) {
 8000862:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8000866:	3301      	adds	r3, #1
 8000868:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800086c:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 8000870:	4b1c      	ldr	r3, [pc, #112]	@ (80008e4 <extract_and_sum_data+0x1d4>)
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	3b03      	subs	r3, #3
 8000876:	429a      	cmp	r2, r3
 8000878:	dbb8      	blt.n	80007ec <extract_and_sum_data+0xdc>
 800087a:	e000      	b.n	800087e <extract_and_sum_data+0x16e>
                break;
 800087c:	bf00      	nop
            }
        }
    }

    uint32_t result = 0xFFFF - sum;
 800087e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000880:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8000884:	33ff      	adds	r3, #255	@ 0xff
 8000886:	65fb      	str	r3, [r7, #92]	@ 0x5c


    expected_result = (last_two_values[1] << 8) | last_two_values[0];
 8000888:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800088c:	021b      	lsls	r3, r3, #8
 800088e:	b21a      	sxth	r2, r3
 8000890:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8000894:	b21b      	sxth	r3, r3
 8000896:	4313      	orrs	r3, r2
 8000898:	b21b      	sxth	r3, r3
 800089a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62

    char result_str[40];
    char result_str_2[40];

    snprintf(result_str, sizeof(result_str), "Result: 0x%04X", result);
 800089e:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80008a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80008a4:	4a10      	ldr	r2, [pc, #64]	@ (80008e8 <extract_and_sum_data+0x1d8>)
 80008a6:	2128      	movs	r1, #40	@ 0x28
 80008a8:	f003 fa80 	bl	8003dac <sniprintf>
    /*HAL_UART_Transmit(&huart2, (uint8_t*)result_str, strlen(result_str), HAL_MAX_DELAY);
    HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);  // Send newline after result*/

    // Format the expected result into a string for UART transmission
    snprintf(result_str_2, sizeof(result_str), "Expected: 0x%04X", expected_result);
 80008ac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80008b0:	f107 0008 	add.w	r0, r7, #8
 80008b4:	4a0d      	ldr	r2, [pc, #52]	@ (80008ec <extract_and_sum_data+0x1dc>)
 80008b6:	2128      	movs	r1, #40	@ 0x28
 80008b8:	f003 fa78 	bl	8003dac <sniprintf>
    /*HAL_UART_Transmit(&huart2, (uint8_t*)result_str, strlen(result_str), HAL_MAX_DELAY);
    HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);  // Send newline after expected result*/

    if (result == expected_result) {
 80008bc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80008c0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d006      	beq.n	80008d4 <extract_and_sum_data+0x1c4>
        //HAL_UART_Transmit(&huart2, "Match!\r\n", 8, HAL_MAX_DELAY);
    } else {
        HAL_UART_Transmit(&huart2, "No Match!\r\n", 11, HAL_MAX_DELAY);
 80008c6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ca:	220b      	movs	r2, #11
 80008cc:	4908      	ldr	r1, [pc, #32]	@ (80008f0 <extract_and_sum_data+0x1e0>)
 80008ce:	4809      	ldr	r0, [pc, #36]	@ (80008f4 <extract_and_sum_data+0x1e4>)
 80008d0:	f002 fb66 	bl	8002fa0 <HAL_UART_Transmit>
    }
}
 80008d4:	bf00      	nop
 80008d6:	3770      	adds	r7, #112	@ 0x70
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	2000016c 	.word	0x2000016c
 80008e0:	08004654 	.word	0x08004654
 80008e4:	2000056c 	.word	0x2000056c
 80008e8:	08004624 	.word	0x08004624
 80008ec:	08004634 	.word	0x08004634
 80008f0:	08004648 	.word	0x08004648
 80008f4:	200000c0 	.word	0x200000c0

080008f8 <channel_value>:

void channel_value() {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b0f2      	sub	sp, #456	@ 0x1c8
 80008fc:	af00      	add	r7, sp, #0
    uint32_t sum = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
    uint16_t num_values = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	f8a7 31be 	strh.w	r3, [r7, #446]	@ 0x1be
    uint16_t num_values_x = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	f8a7 31c6 	strh.w	r3, [r7, #454]	@ 0x1c6
    uint16_t channel_1_hex[2] = {0};
 8000910:	2300      	movs	r3, #0
 8000912:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
    uint16_t channel_2_hex[2] = {0};
 8000916:	2300      	movs	r3, #0
 8000918:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    uint16_t channel_3_hex[2] = {0};
 800091c:	2300      	movs	r3, #0
 800091e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
    uint16_t channel_4_hex[2] = {0};
 8000922:	2300      	movs	r3, #0
 8000924:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    uint16_t channel_5_hex[2] = {0};
 8000928:	2300      	movs	r3, #0
 800092a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    uint16_t channel_6_hex[2] = {0};
 800092e:	2300      	movs	r3, #0
 8000930:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    uint16_t channel_7_hex[2] = {0};
 8000934:	2300      	movs	r3, #0
 8000936:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    uint16_t channel_8_hex[2] = {0};
 800093a:	2300      	movs	r3, #0
 800093c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    uint16_t channel_9_hex[2] = {0};
 8000940:	2300      	movs	r3, #0
 8000942:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
    uint16_t channel_10_hex[2] = {0};
 8000946:	2300      	movs	r3, #0
 8000948:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194

    for (uint16_t i = 0; i < temp_buffer_index - 3; i++) {
 800094c:	2300      	movs	r3, #0
 800094e:	f8a7 31c4 	strh.w	r3, [r7, #452]	@ 0x1c4
 8000952:	e0fc      	b.n	8000b4e <channel_value+0x256>
        if (temp_buffer[i] == '0' && temp_buffer[i + 1] == 'x') {
 8000954:	f8b7 31c4 	ldrh.w	r3, [r7, #452]	@ 0x1c4
 8000958:	4a81      	ldr	r2, [pc, #516]	@ (8000b60 <channel_value+0x268>)
 800095a:	5cd3      	ldrb	r3, [r2, r3]
 800095c:	2b30      	cmp	r3, #48	@ 0x30
 800095e:	f040 80f1 	bne.w	8000b44 <channel_value+0x24c>
 8000962:	f8b7 31c4 	ldrh.w	r3, [r7, #452]	@ 0x1c4
 8000966:	3301      	adds	r3, #1
 8000968:	4a7d      	ldr	r2, [pc, #500]	@ (8000b60 <channel_value+0x268>)
 800096a:	5cd3      	ldrb	r3, [r2, r3]
 800096c:	2b78      	cmp	r3, #120	@ 0x78
 800096e:	f040 80e9 	bne.w	8000b44 <channel_value+0x24c>

            char hex_value[3] = {};
 8000972:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8000976:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800097a:	4a7a      	ldr	r2, [pc, #488]	@ (8000b64 <channel_value+0x26c>)
 800097c:	7812      	ldrb	r2, [r2, #0]
 800097e:	701a      	strb	r2, [r3, #0]
 8000980:	3301      	adds	r3, #1
 8000982:	2200      	movs	r2, #0
 8000984:	801a      	strh	r2, [r3, #0]
            hex_value[0] = temp_buffer[i + 2];
 8000986:	f8b7 31c4 	ldrh.w	r3, [r7, #452]	@ 0x1c4
 800098a:	3302      	adds	r3, #2
 800098c:	4a74      	ldr	r2, [pc, #464]	@ (8000b60 <channel_value+0x268>)
 800098e:	5cd2      	ldrb	r2, [r2, r3]
 8000990:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8000994:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8000998:	701a      	strb	r2, [r3, #0]
            hex_value[1] = temp_buffer[i + 3];
 800099a:	f8b7 31c4 	ldrh.w	r3, [r7, #452]	@ 0x1c4
 800099e:	3303      	adds	r3, #3
 80009a0:	4a6f      	ldr	r2, [pc, #444]	@ (8000b60 <channel_value+0x268>)
 80009a2:	5cd2      	ldrb	r2, [r2, r3]
 80009a4:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 80009a8:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80009ac:	705a      	strb	r2, [r3, #1]

            uint8_t value = (uint8_t)strtol(hex_value, NULL, 16);
 80009ae:	463b      	mov	r3, r7
 80009b0:	2210      	movs	r2, #16
 80009b2:	2100      	movs	r1, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f003 f9ef 	bl	8003d98 <strtol>
 80009ba:	4603      	mov	r3, r0
 80009bc:	f887 31bd 	strb.w	r3, [r7, #445]	@ 0x1bd
            num_values_x++;
 80009c0:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	@ 0x1c6
 80009c4:	3301      	adds	r3, #1
 80009c6:	f8a7 31c6 	strh.w	r3, [r7, #454]	@ 0x1c6
            if (num_values_x == 3) {
 80009ca:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	@ 0x1c6
 80009ce:	2b03      	cmp	r3, #3
 80009d0:	d104      	bne.n	80009dc <channel_value+0xe4>
            	channel_1_hex[0] = value;
 80009d2:	f897 31bd 	ldrb.w	r3, [r7, #445]	@ 0x1bd
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	f8a7 31b8 	strh.w	r3, [r7, #440]	@ 0x1b8
            }
            if (num_values_x == 4) {
 80009dc:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	@ 0x1c6
 80009e0:	2b04      	cmp	r3, #4
 80009e2:	d104      	bne.n	80009ee <channel_value+0xf6>
            	channel_1_hex[1] = value;
 80009e4:	f897 31bd 	ldrb.w	r3, [r7, #445]	@ 0x1bd
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
            }
            if (num_values_x == 5) {
 80009ee:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	@ 0x1c6
 80009f2:	2b05      	cmp	r3, #5
 80009f4:	d104      	bne.n	8000a00 <channel_value+0x108>
            	channel_2_hex[0] = value;
 80009f6:	f897 31bd 	ldrb.w	r3, [r7, #445]	@ 0x1bd
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	f8a7 31b4 	strh.w	r3, [r7, #436]	@ 0x1b4
            }
            if (num_values_x == 6) {
 8000a00:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	@ 0x1c6
 8000a04:	2b06      	cmp	r3, #6
 8000a06:	d104      	bne.n	8000a12 <channel_value+0x11a>
            	channel_2_hex[1] = value;
 8000a08:	f897 31bd 	ldrb.w	r3, [r7, #445]	@ 0x1bd
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	f8a7 31b6 	strh.w	r3, [r7, #438]	@ 0x1b6
            }
            if (num_values_x == 7) {
 8000a12:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	@ 0x1c6
 8000a16:	2b07      	cmp	r3, #7
 8000a18:	d104      	bne.n	8000a24 <channel_value+0x12c>
            	channel_3_hex[0] = value;
 8000a1a:	f897 31bd 	ldrb.w	r3, [r7, #445]	@ 0x1bd
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	f8a7 31b0 	strh.w	r3, [r7, #432]	@ 0x1b0
            }
            if (num_values_x == 8) {
 8000a24:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	@ 0x1c6
 8000a28:	2b08      	cmp	r3, #8
 8000a2a:	d104      	bne.n	8000a36 <channel_value+0x13e>
            	channel_3_hex[1] = value;
 8000a2c:	f897 31bd 	ldrb.w	r3, [r7, #445]	@ 0x1bd
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	f8a7 31b2 	strh.w	r3, [r7, #434]	@ 0x1b2
            }
            if (num_values_x == 9) {
 8000a36:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	@ 0x1c6
 8000a3a:	2b09      	cmp	r3, #9
 8000a3c:	d104      	bne.n	8000a48 <channel_value+0x150>
            	channel_4_hex[0] = value;
 8000a3e:	f897 31bd 	ldrb.w	r3, [r7, #445]	@ 0x1bd
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	f8a7 31ac 	strh.w	r3, [r7, #428]	@ 0x1ac
            }
            if (num_values_x == 10) {
 8000a48:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	@ 0x1c6
 8000a4c:	2b0a      	cmp	r3, #10
 8000a4e:	d104      	bne.n	8000a5a <channel_value+0x162>
            	channel_4_hex[1] = value;
 8000a50:	f897 31bd 	ldrb.w	r3, [r7, #445]	@ 0x1bd
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	f8a7 31ae 	strh.w	r3, [r7, #430]	@ 0x1ae
            }
            if (num_values_x == 11) {
 8000a5a:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	@ 0x1c6
 8000a5e:	2b0b      	cmp	r3, #11
 8000a60:	d104      	bne.n	8000a6c <channel_value+0x174>
            	channel_5_hex[0] = value;
 8000a62:	f897 31bd 	ldrb.w	r3, [r7, #445]	@ 0x1bd
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	f8a7 31a8 	strh.w	r3, [r7, #424]	@ 0x1a8
            }
            if (num_values_x == 12) {
 8000a6c:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	@ 0x1c6
 8000a70:	2b0c      	cmp	r3, #12
 8000a72:	d104      	bne.n	8000a7e <channel_value+0x186>
            	channel_5_hex[1] = value;
 8000a74:	f897 31bd 	ldrb.w	r3, [r7, #445]	@ 0x1bd
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	f8a7 31aa 	strh.w	r3, [r7, #426]	@ 0x1aa
            }
            if (num_values_x == 13) {
 8000a7e:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	@ 0x1c6
 8000a82:	2b0d      	cmp	r3, #13
 8000a84:	d104      	bne.n	8000a90 <channel_value+0x198>
            	channel_6_hex[0] = value;
 8000a86:	f897 31bd 	ldrb.w	r3, [r7, #445]	@ 0x1bd
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	f8a7 31a4 	strh.w	r3, [r7, #420]	@ 0x1a4
            }
            if (num_values_x == 14) {
 8000a90:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	@ 0x1c6
 8000a94:	2b0e      	cmp	r3, #14
 8000a96:	d104      	bne.n	8000aa2 <channel_value+0x1aa>
            	channel_6_hex[1] = value;
 8000a98:	f897 31bd 	ldrb.w	r3, [r7, #445]	@ 0x1bd
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	f8a7 31a6 	strh.w	r3, [r7, #422]	@ 0x1a6
            }
            if (num_values_x == 15) {
 8000aa2:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	@ 0x1c6
 8000aa6:	2b0f      	cmp	r3, #15
 8000aa8:	d104      	bne.n	8000ab4 <channel_value+0x1bc>
            	channel_7_hex[0] = value;
 8000aaa:	f897 31bd 	ldrb.w	r3, [r7, #445]	@ 0x1bd
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	f8a7 31a0 	strh.w	r3, [r7, #416]	@ 0x1a0
            }
            if (num_values_x == 16) {
 8000ab4:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	@ 0x1c6
 8000ab8:	2b10      	cmp	r3, #16
 8000aba:	d104      	bne.n	8000ac6 <channel_value+0x1ce>
            	channel_7_hex[1] = value;
 8000abc:	f897 31bd 	ldrb.w	r3, [r7, #445]	@ 0x1bd
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	f8a7 31a2 	strh.w	r3, [r7, #418]	@ 0x1a2
            }
            if (num_values_x == 17) {
 8000ac6:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	@ 0x1c6
 8000aca:	2b11      	cmp	r3, #17
 8000acc:	d104      	bne.n	8000ad8 <channel_value+0x1e0>
            	channel_8_hex[0] = value;
 8000ace:	f897 31bd 	ldrb.w	r3, [r7, #445]	@ 0x1bd
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
            }
            if (num_values_x == 18) {
 8000ad8:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	@ 0x1c6
 8000adc:	2b12      	cmp	r3, #18
 8000ade:	d104      	bne.n	8000aea <channel_value+0x1f2>
            	channel_8_hex[1] = value;
 8000ae0:	f897 31bd 	ldrb.w	r3, [r7, #445]	@ 0x1bd
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	f8a7 319e 	strh.w	r3, [r7, #414]	@ 0x19e
            }
            if (num_values_x == 19) {
 8000aea:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	@ 0x1c6
 8000aee:	2b13      	cmp	r3, #19
 8000af0:	d104      	bne.n	8000afc <channel_value+0x204>
            	channel_9_hex[0] = value;
 8000af2:	f897 31bd 	ldrb.w	r3, [r7, #445]	@ 0x1bd
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	f8a7 3198 	strh.w	r3, [r7, #408]	@ 0x198
            }
            if (num_values_x == 20) {
 8000afc:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	@ 0x1c6
 8000b00:	2b14      	cmp	r3, #20
 8000b02:	d104      	bne.n	8000b0e <channel_value+0x216>
            	channel_9_hex[1] = value;
 8000b04:	f897 31bd 	ldrb.w	r3, [r7, #445]	@ 0x1bd
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	f8a7 319a 	strh.w	r3, [r7, #410]	@ 0x19a
            }
            if (num_values_x == 21) {
 8000b0e:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	@ 0x1c6
 8000b12:	2b15      	cmp	r3, #21
 8000b14:	d104      	bne.n	8000b20 <channel_value+0x228>
            	channel_10_hex[0] = value;
 8000b16:	f897 31bd 	ldrb.w	r3, [r7, #445]	@ 0x1bd
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	f8a7 3194 	strh.w	r3, [r7, #404]	@ 0x194
            }
            if (num_values_x == 22) {
 8000b20:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	@ 0x1c6
 8000b24:	2b16      	cmp	r3, #22
 8000b26:	d104      	bne.n	8000b32 <channel_value+0x23a>
            	channel_10_hex[1] = value;
 8000b28:	f897 31bd 	ldrb.w	r3, [r7, #445]	@ 0x1bd
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	f8a7 3196 	strh.w	r3, [r7, #406]	@ 0x196
            }

            i += 3;
 8000b32:	f8b7 31c4 	ldrh.w	r3, [r7, #452]	@ 0x1c4
 8000b36:	3303      	adds	r3, #3
 8000b38:	f8a7 31c4 	strh.w	r3, [r7, #452]	@ 0x1c4

            if (num_values_x >= 25) {
 8000b3c:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	@ 0x1c6
 8000b40:	2b18      	cmp	r3, #24
 8000b42:	d813      	bhi.n	8000b6c <channel_value+0x274>
    for (uint16_t i = 0; i < temp_buffer_index - 3; i++) {
 8000b44:	f8b7 31c4 	ldrh.w	r3, [r7, #452]	@ 0x1c4
 8000b48:	3301      	adds	r3, #1
 8000b4a:	f8a7 31c4 	strh.w	r3, [r7, #452]	@ 0x1c4
 8000b4e:	f8b7 21c4 	ldrh.w	r2, [r7, #452]	@ 0x1c4
 8000b52:	4b05      	ldr	r3, [pc, #20]	@ (8000b68 <channel_value+0x270>)
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	3b03      	subs	r3, #3
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	f6ff aefb 	blt.w	8000954 <channel_value+0x5c>
 8000b5e:	e006      	b.n	8000b6e <channel_value+0x276>
 8000b60:	2000016c 	.word	0x2000016c
 8000b64:	08004654 	.word	0x08004654
 8000b68:	2000056c 	.word	0x2000056c
                break;
 8000b6c:	bf00      	nop
            }
        }
    }

    // Combine the two last values to get the expected result in little-endian format
    channel_1 = (channel_1_hex[1] << 8) | channel_1_hex[0];
 8000b6e:	f8b7 31ba 	ldrh.w	r3, [r7, #442]	@ 0x1ba
 8000b72:	021b      	lsls	r3, r3, #8
 8000b74:	b21a      	sxth	r2, r3
 8000b76:	f8b7 31b8 	ldrh.w	r3, [r7, #440]	@ 0x1b8
 8000b7a:	b21b      	sxth	r3, r3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b21b      	sxth	r3, r3
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	4bc1      	ldr	r3, [pc, #772]	@ (8000e88 <channel_value+0x590>)
 8000b84:	801a      	strh	r2, [r3, #0]
    channel_2 = (channel_2_hex[1] << 8) | channel_2_hex[0];
 8000b86:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	@ 0x1b6
 8000b8a:	021b      	lsls	r3, r3, #8
 8000b8c:	b21a      	sxth	r2, r3
 8000b8e:	f8b7 31b4 	ldrh.w	r3, [r7, #436]	@ 0x1b4
 8000b92:	b21b      	sxth	r3, r3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	b21b      	sxth	r3, r3
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	4bbc      	ldr	r3, [pc, #752]	@ (8000e8c <channel_value+0x594>)
 8000b9c:	801a      	strh	r2, [r3, #0]
    channel_3 = (channel_3_hex[1] << 8) | channel_3_hex[0];
 8000b9e:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	@ 0x1b2
 8000ba2:	021b      	lsls	r3, r3, #8
 8000ba4:	b21a      	sxth	r2, r3
 8000ba6:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	@ 0x1b0
 8000baa:	b21b      	sxth	r3, r3
 8000bac:	4313      	orrs	r3, r2
 8000bae:	b21b      	sxth	r3, r3
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	4bb7      	ldr	r3, [pc, #732]	@ (8000e90 <channel_value+0x598>)
 8000bb4:	801a      	strh	r2, [r3, #0]
    channel_4 = (channel_4_hex[1] << 8) | channel_4_hex[0];
 8000bb6:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	@ 0x1ae
 8000bba:	021b      	lsls	r3, r3, #8
 8000bbc:	b21a      	sxth	r2, r3
 8000bbe:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	@ 0x1ac
 8000bc2:	b21b      	sxth	r3, r3
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	b21b      	sxth	r3, r3
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	4bb2      	ldr	r3, [pc, #712]	@ (8000e94 <channel_value+0x59c>)
 8000bcc:	801a      	strh	r2, [r3, #0]
    channel_5 = (channel_5_hex[1] << 8) | channel_5_hex[0];
 8000bce:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	@ 0x1aa
 8000bd2:	021b      	lsls	r3, r3, #8
 8000bd4:	b21a      	sxth	r2, r3
 8000bd6:	f8b7 31a8 	ldrh.w	r3, [r7, #424]	@ 0x1a8
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	b21b      	sxth	r3, r3
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	4bad      	ldr	r3, [pc, #692]	@ (8000e98 <channel_value+0x5a0>)
 8000be4:	801a      	strh	r2, [r3, #0]
    channel_6 = (channel_6_hex[1] << 8) | channel_6_hex[0];
 8000be6:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	@ 0x1a6
 8000bea:	021b      	lsls	r3, r3, #8
 8000bec:	b21a      	sxth	r2, r3
 8000bee:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	@ 0x1a4
 8000bf2:	b21b      	sxth	r3, r3
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	b21b      	sxth	r3, r3
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	4ba8      	ldr	r3, [pc, #672]	@ (8000e9c <channel_value+0x5a4>)
 8000bfc:	801a      	strh	r2, [r3, #0]
    channel_7 = (channel_7_hex[1] << 8) | channel_7_hex[0];
 8000bfe:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	@ 0x1a2
 8000c02:	021b      	lsls	r3, r3, #8
 8000c04:	b21a      	sxth	r2, r3
 8000c06:	f8b7 31a0 	ldrh.w	r3, [r7, #416]	@ 0x1a0
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	b21b      	sxth	r3, r3
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	4ba3      	ldr	r3, [pc, #652]	@ (8000ea0 <channel_value+0x5a8>)
 8000c14:	801a      	strh	r2, [r3, #0]
    channel_8 = (channel_8_hex[1] << 8) | channel_8_hex[0];
 8000c16:	f8b7 319e 	ldrh.w	r3, [r7, #414]	@ 0x19e
 8000c1a:	021b      	lsls	r3, r3, #8
 8000c1c:	b21a      	sxth	r2, r3
 8000c1e:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8000c22:	b21b      	sxth	r3, r3
 8000c24:	4313      	orrs	r3, r2
 8000c26:	b21b      	sxth	r3, r3
 8000c28:	b29a      	uxth	r2, r3
 8000c2a:	4b9e      	ldr	r3, [pc, #632]	@ (8000ea4 <channel_value+0x5ac>)
 8000c2c:	801a      	strh	r2, [r3, #0]
    channel_9 = (channel_9_hex[1] << 8) | channel_9_hex[0];
 8000c2e:	f8b7 319a 	ldrh.w	r3, [r7, #410]	@ 0x19a
 8000c32:	021b      	lsls	r3, r3, #8
 8000c34:	b21a      	sxth	r2, r3
 8000c36:	f8b7 3198 	ldrh.w	r3, [r7, #408]	@ 0x198
 8000c3a:	b21b      	sxth	r3, r3
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	4b99      	ldr	r3, [pc, #612]	@ (8000ea8 <channel_value+0x5b0>)
 8000c44:	801a      	strh	r2, [r3, #0]
    channel_10 = (channel_10_hex[1] << 8) | channel_10_hex[0];
 8000c46:	f8b7 3196 	ldrh.w	r3, [r7, #406]	@ 0x196
 8000c4a:	021b      	lsls	r3, r3, #8
 8000c4c:	b21a      	sxth	r2, r3
 8000c4e:	f8b7 3194 	ldrh.w	r3, [r7, #404]	@ 0x194
 8000c52:	b21b      	sxth	r3, r3
 8000c54:	4313      	orrs	r3, r2
 8000c56:	b21b      	sxth	r3, r3
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	4b94      	ldr	r3, [pc, #592]	@ (8000eac <channel_value+0x5b4>)
 8000c5c:	801a      	strh	r2, [r3, #0]
    char result_str_7[40];
    char result_str_8[40];
    char result_str_9[40];
    char result_str_10[40];

    snprintf(result_str_1, sizeof(result_str_1), "Channel 1: %d", channel_1);
 8000c5e:	4b8a      	ldr	r3, [pc, #552]	@ (8000e88 <channel_value+0x590>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 8000c66:	4a92      	ldr	r2, [pc, #584]	@ (8000eb0 <channel_value+0x5b8>)
 8000c68:	2128      	movs	r1, #40	@ 0x28
 8000c6a:	f003 f89f 	bl	8003dac <sniprintf>
    snprintf(result_str_2, sizeof(result_str_2), "Channel 2: %d", channel_2);
 8000c6e:	4b87      	ldr	r3, [pc, #540]	@ (8000e8c <channel_value+0x594>)
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	f507 70a2 	add.w	r0, r7, #324	@ 0x144
 8000c76:	4a8f      	ldr	r2, [pc, #572]	@ (8000eb4 <channel_value+0x5bc>)
 8000c78:	2128      	movs	r1, #40	@ 0x28
 8000c7a:	f003 f897 	bl	8003dac <sniprintf>
    snprintf(result_str_3, sizeof(result_str_3), "Channel 3: %d", channel_3);
 8000c7e:	4b84      	ldr	r3, [pc, #528]	@ (8000e90 <channel_value+0x598>)
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 8000c86:	4a8c      	ldr	r2, [pc, #560]	@ (8000eb8 <channel_value+0x5c0>)
 8000c88:	2128      	movs	r1, #40	@ 0x28
 8000c8a:	f003 f88f 	bl	8003dac <sniprintf>
    snprintf(result_str_4, sizeof(result_str_4), "Channel 4: %d", channel_4);
 8000c8e:	4b81      	ldr	r3, [pc, #516]	@ (8000e94 <channel_value+0x59c>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 8000c96:	4a89      	ldr	r2, [pc, #548]	@ (8000ebc <channel_value+0x5c4>)
 8000c98:	2128      	movs	r1, #40	@ 0x28
 8000c9a:	f003 f887 	bl	8003dac <sniprintf>
    snprintf(result_str_5, sizeof(result_str_5), "Channel 5: %d", channel_5);
 8000c9e:	4b7e      	ldr	r3, [pc, #504]	@ (8000e98 <channel_value+0x5a0>)
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8000ca6:	4a86      	ldr	r2, [pc, #536]	@ (8000ec0 <channel_value+0x5c8>)
 8000ca8:	2128      	movs	r1, #40	@ 0x28
 8000caa:	f003 f87f 	bl	8003dac <sniprintf>
    snprintf(result_str_6, sizeof(result_str_6), "Channel 6: %d", channel_6);
 8000cae:	4b7b      	ldr	r3, [pc, #492]	@ (8000e9c <channel_value+0x5a4>)
 8000cb0:	881b      	ldrh	r3, [r3, #0]
 8000cb2:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 8000cb6:	4a83      	ldr	r2, [pc, #524]	@ (8000ec4 <channel_value+0x5cc>)
 8000cb8:	2128      	movs	r1, #40	@ 0x28
 8000cba:	f003 f877 	bl	8003dac <sniprintf>
    snprintf(result_str_7, sizeof(result_str_7), "Channel 7: %d", channel_7);
 8000cbe:	4b78      	ldr	r3, [pc, #480]	@ (8000ea0 <channel_value+0x5a8>)
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 8000cc6:	4a80      	ldr	r2, [pc, #512]	@ (8000ec8 <channel_value+0x5d0>)
 8000cc8:	2128      	movs	r1, #40	@ 0x28
 8000cca:	f003 f86f 	bl	8003dac <sniprintf>
    snprintf(result_str_8, sizeof(result_str_8), "Channel 8: %d", channel_8);
 8000cce:	4b75      	ldr	r3, [pc, #468]	@ (8000ea4 <channel_value+0x5ac>)
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8000cd6:	4a7d      	ldr	r2, [pc, #500]	@ (8000ecc <channel_value+0x5d4>)
 8000cd8:	2128      	movs	r1, #40	@ 0x28
 8000cda:	f003 f867 	bl	8003dac <sniprintf>
    snprintf(result_str_9, sizeof(result_str_9), "Channel 9: %d", channel_9);
 8000cde:	4b72      	ldr	r3, [pc, #456]	@ (8000ea8 <channel_value+0x5b0>)
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8000ce6:	4a7a      	ldr	r2, [pc, #488]	@ (8000ed0 <channel_value+0x5d8>)
 8000ce8:	2128      	movs	r1, #40	@ 0x28
 8000cea:	f003 f85f 	bl	8003dac <sniprintf>
    snprintf(result_str_10, sizeof(result_str_10), "Channel 10: %d", channel_10);
 8000cee:	4b6f      	ldr	r3, [pc, #444]	@ (8000eac <channel_value+0x5b4>)
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	1d38      	adds	r0, r7, #4
 8000cf4:	4a77      	ldr	r2, [pc, #476]	@ (8000ed4 <channel_value+0x5dc>)
 8000cf6:	2128      	movs	r1, #40	@ 0x28
 8000cf8:	f003 f858 	bl	8003dac <sniprintf>

    // Send the results via UART
    HAL_UART_Transmit(&huart2, (uint8_t*)result_str_1, strlen(result_str_1), HAL_MAX_DELAY);
 8000cfc:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fa85 	bl	8000210 <strlen>
 8000d06:	4603      	mov	r3, r0
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	4871      	ldr	r0, [pc, #452]	@ (8000ed8 <channel_value+0x5e0>)
 8000d14:	f002 f944 	bl	8002fa0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);  // Send newline
 8000d18:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	496f      	ldr	r1, [pc, #444]	@ (8000edc <channel_value+0x5e4>)
 8000d20:	486d      	ldr	r0, [pc, #436]	@ (8000ed8 <channel_value+0x5e0>)
 8000d22:	f002 f93d 	bl	8002fa0 <HAL_UART_Transmit>

    HAL_UART_Transmit(&huart2, (uint8_t*)result_str_2, strlen(result_str_2), HAL_MAX_DELAY);
 8000d26:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fa70 	bl	8000210 <strlen>
 8000d30:	4603      	mov	r3, r0
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	f507 71a2 	add.w	r1, r7, #324	@ 0x144
 8000d38:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3c:	4866      	ldr	r0, [pc, #408]	@ (8000ed8 <channel_value+0x5e0>)
 8000d3e:	f002 f92f 	bl	8002fa0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);  // Send newline
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
 8000d46:	2202      	movs	r2, #2
 8000d48:	4964      	ldr	r1, [pc, #400]	@ (8000edc <channel_value+0x5e4>)
 8000d4a:	4863      	ldr	r0, [pc, #396]	@ (8000ed8 <channel_value+0x5e0>)
 8000d4c:	f002 f928 	bl	8002fa0 <HAL_UART_Transmit>

    HAL_UART_Transmit(&huart2, (uint8_t*)result_str_3, strlen(result_str_3), HAL_MAX_DELAY);
 8000d50:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fa5b 	bl	8000210 <strlen>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	f507 718e 	add.w	r1, r7, #284	@ 0x11c
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	485c      	ldr	r0, [pc, #368]	@ (8000ed8 <channel_value+0x5e0>)
 8000d68:	f002 f91a 	bl	8002fa0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);  // Send newline
 8000d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d70:	2202      	movs	r2, #2
 8000d72:	495a      	ldr	r1, [pc, #360]	@ (8000edc <channel_value+0x5e4>)
 8000d74:	4858      	ldr	r0, [pc, #352]	@ (8000ed8 <channel_value+0x5e0>)
 8000d76:	f002 f913 	bl	8002fa0 <HAL_UART_Transmit>

    HAL_UART_Transmit(&huart2, (uint8_t*)result_str_4, strlen(result_str_4), HAL_MAX_DELAY);
 8000d7a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fa46 	bl	8000210 <strlen>
 8000d84:	4603      	mov	r3, r0
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	f107 01f4 	add.w	r1, r7, #244	@ 0xf4
 8000d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d90:	4851      	ldr	r0, [pc, #324]	@ (8000ed8 <channel_value+0x5e0>)
 8000d92:	f002 f905 	bl	8002fa0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);  // Send newline
 8000d96:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	494f      	ldr	r1, [pc, #316]	@ (8000edc <channel_value+0x5e4>)
 8000d9e:	484e      	ldr	r0, [pc, #312]	@ (8000ed8 <channel_value+0x5e0>)
 8000da0:	f002 f8fe 	bl	8002fa0 <HAL_UART_Transmit>

    HAL_UART_Transmit(&huart2, (uint8_t*)result_str_5, strlen(result_str_5), HAL_MAX_DELAY);
 8000da4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fa31 	bl	8000210 <strlen>
 8000dae:	4603      	mov	r3, r0
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dba:	4847      	ldr	r0, [pc, #284]	@ (8000ed8 <channel_value+0x5e0>)
 8000dbc:	f002 f8f0 	bl	8002fa0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);  // Send newline
 8000dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	4945      	ldr	r1, [pc, #276]	@ (8000edc <channel_value+0x5e4>)
 8000dc8:	4843      	ldr	r0, [pc, #268]	@ (8000ed8 <channel_value+0x5e0>)
 8000dca:	f002 f8e9 	bl	8002fa0 <HAL_UART_Transmit>

    HAL_UART_Transmit(&huart2, (uint8_t*)result_str_6, strlen(result_str_6), HAL_MAX_DELAY);
 8000dce:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fa1c 	bl	8000210 <strlen>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8000de0:	f04f 33ff 	mov.w	r3, #4294967295
 8000de4:	483c      	ldr	r0, [pc, #240]	@ (8000ed8 <channel_value+0x5e0>)
 8000de6:	f002 f8db 	bl	8002fa0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);  // Send newline
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	2202      	movs	r2, #2
 8000df0:	493a      	ldr	r1, [pc, #232]	@ (8000edc <channel_value+0x5e4>)
 8000df2:	4839      	ldr	r0, [pc, #228]	@ (8000ed8 <channel_value+0x5e0>)
 8000df4:	f002 f8d4 	bl	8002fa0 <HAL_UART_Transmit>

    HAL_UART_Transmit(&huart2, (uint8_t*)result_str_7, strlen(result_str_7), HAL_MAX_DELAY);
 8000df8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fa07 	bl	8000210 <strlen>
 8000e02:	4603      	mov	r3, r0
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0e:	4832      	ldr	r0, [pc, #200]	@ (8000ed8 <channel_value+0x5e0>)
 8000e10:	f002 f8c6 	bl	8002fa0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);  // Send newline
 8000e14:	f04f 33ff 	mov.w	r3, #4294967295
 8000e18:	2202      	movs	r2, #2
 8000e1a:	4930      	ldr	r1, [pc, #192]	@ (8000edc <channel_value+0x5e4>)
 8000e1c:	482e      	ldr	r0, [pc, #184]	@ (8000ed8 <channel_value+0x5e0>)
 8000e1e:	f002 f8bf 	bl	8002fa0 <HAL_UART_Transmit>

    HAL_UART_Transmit(&huart2, (uint8_t*)result_str_8, strlen(result_str_8), HAL_MAX_DELAY);
 8000e22:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff f9f2 	bl	8000210 <strlen>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8000e34:	f04f 33ff 	mov.w	r3, #4294967295
 8000e38:	4827      	ldr	r0, [pc, #156]	@ (8000ed8 <channel_value+0x5e0>)
 8000e3a:	f002 f8b1 	bl	8002fa0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);  // Send newline
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e42:	2202      	movs	r2, #2
 8000e44:	4925      	ldr	r1, [pc, #148]	@ (8000edc <channel_value+0x5e4>)
 8000e46:	4824      	ldr	r0, [pc, #144]	@ (8000ed8 <channel_value+0x5e0>)
 8000e48:	f002 f8aa 	bl	8002fa0 <HAL_UART_Transmit>

    HAL_UART_Transmit(&huart2, (uint8_t*)result_str_9, strlen(result_str_9), HAL_MAX_DELAY);
 8000e4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff f9dd 	bl	8000210 <strlen>
 8000e56:	4603      	mov	r3, r0
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e62:	481d      	ldr	r0, [pc, #116]	@ (8000ed8 <channel_value+0x5e0>)
 8000e64:	f002 f89c 	bl	8002fa0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);  // Send newline
 8000e68:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	491b      	ldr	r1, [pc, #108]	@ (8000edc <channel_value+0x5e4>)
 8000e70:	4819      	ldr	r0, [pc, #100]	@ (8000ed8 <channel_value+0x5e0>)
 8000e72:	f002 f895 	bl	8002fa0 <HAL_UART_Transmit>

    HAL_UART_Transmit(&huart2, (uint8_t*)result_str_10, strlen(result_str_10), HAL_MAX_DELAY);
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff f9c9 	bl	8000210 <strlen>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	1d39      	adds	r1, r7, #4
 8000e84:	e02c      	b.n	8000ee0 <channel_value+0x5e8>
 8000e86:	bf00      	nop
 8000e88:	2000056e 	.word	0x2000056e
 8000e8c:	20000570 	.word	0x20000570
 8000e90:	20000572 	.word	0x20000572
 8000e94:	20000574 	.word	0x20000574
 8000e98:	20000576 	.word	0x20000576
 8000e9c:	20000578 	.word	0x20000578
 8000ea0:	2000057a 	.word	0x2000057a
 8000ea4:	2000057c 	.word	0x2000057c
 8000ea8:	2000057e 	.word	0x2000057e
 8000eac:	20000580 	.word	0x20000580
 8000eb0:	08004658 	.word	0x08004658
 8000eb4:	08004668 	.word	0x08004668
 8000eb8:	08004678 	.word	0x08004678
 8000ebc:	08004688 	.word	0x08004688
 8000ec0:	08004698 	.word	0x08004698
 8000ec4:	080046a8 	.word	0x080046a8
 8000ec8:	080046b8 	.word	0x080046b8
 8000ecc:	080046c8 	.word	0x080046c8
 8000ed0:	080046d8 	.word	0x080046d8
 8000ed4:	080046e8 	.word	0x080046e8
 8000ed8:	200000c0 	.word	0x200000c0
 8000edc:	080046f8 	.word	0x080046f8
 8000ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee4:	4807      	ldr	r0, [pc, #28]	@ (8000f04 <channel_value+0x60c>)
 8000ee6:	f002 f85b 	bl	8002fa0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);  // Send newline
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
 8000eee:	2202      	movs	r2, #2
 8000ef0:	4905      	ldr	r1, [pc, #20]	@ (8000f08 <channel_value+0x610>)
 8000ef2:	4804      	ldr	r0, [pc, #16]	@ (8000f04 <channel_value+0x60c>)
 8000ef4:	f002 f854 	bl	8002fa0 <HAL_UART_Transmit>
}
 8000ef8:	bf00      	nop
 8000efa:	f507 77e4 	add.w	r7, r7, #456	@ 0x1c8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200000c0 	.word	0x200000c0
 8000f08:	080046f8 	.word	0x080046f8

08000f0c <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b094      	sub	sp, #80	@ 0x50
 8000f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	2234      	movs	r2, #52	@ 0x34
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f002 ff9a 	bl	8003e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f20:	f107 0308 	add.w	r3, r7, #8
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f30:	2300      	movs	r3, #0
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	4b2a      	ldr	r3, [pc, #168]	@ (8000fe0 <SystemClock_Config+0xd4>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f38:	4a29      	ldr	r2, [pc, #164]	@ (8000fe0 <SystemClock_Config+0xd4>)
 8000f3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f40:	4b27      	ldr	r3, [pc, #156]	@ (8000fe0 <SystemClock_Config+0xd4>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	4b24      	ldr	r3, [pc, #144]	@ (8000fe4 <SystemClock_Config+0xd8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f58:	4a22      	ldr	r2, [pc, #136]	@ (8000fe4 <SystemClock_Config+0xd8>)
 8000f5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	4b20      	ldr	r3, [pc, #128]	@ (8000fe4 <SystemClock_Config+0xd8>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f68:	603b      	str	r3, [r7, #0]
 8000f6a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f70:	2301      	movs	r3, #1
 8000f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f74:	2310      	movs	r3, #16
 8000f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f80:	2310      	movs	r3, #16
 8000f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f84:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f88:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f92:	2302      	movs	r3, #2
 8000f94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f001 fd12 	bl	80029c4 <HAL_RCC_OscConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000fa6:	f000 f975 	bl	8001294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000faa:	230f      	movs	r3, #15
 8000fac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fc0:	f107 0308 	add.w	r3, r7, #8
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f001 f9b2 	bl	8002330 <HAL_RCC_ClockConfig>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000fd2:	f000 f95f 	bl	8001294 <Error_Handler>
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	3750      	adds	r7, #80	@ 0x50
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40007000 	.word	0x40007000

08000fe8 <copy_buffer>:
    //HAL_UART_Transmit(&huart2, (uint8_t*)temp_buffer, temp_buffer_index, HAL_MAX_DELAY);

    // Do not clear temp_buffer here, so it can be reused later
}

void copy_buffer(uint8_t *buffer, uint16_t size) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
	char temp[5];  // Temporary buffer to format each byte
	    uint16_t start_index = 0;  // Index where the specific frame starts
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	82fb      	strh	r3, [r7, #22]

	    // Clear the temp_buffer before storing new data
	    memset(temp_buffer, 0, TEMP_BUFFER_SIZE);
 8000ff8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	482e      	ldr	r0, [pc, #184]	@ (80010b8 <copy_buffer+0xd0>)
 8001000:	f002 ff28 	bl	8003e54 <memset>
	    temp_buffer_index = 0;  // Reset the index to start fresh
 8001004:	4b2d      	ldr	r3, [pc, #180]	@ (80010bc <copy_buffer+0xd4>)
 8001006:	2200      	movs	r2, #0
 8001008:	801a      	strh	r2, [r3, #0]

	    // Loop through the buffer to find the specific frame, in this case from 0x20 (0x20 0x40 ... 0xF3)
	    for (uint16_t i = 0; i < size; i++) {
 800100a:	2300      	movs	r3, #0
 800100c:	82bb      	strh	r3, [r7, #20]
 800100e:	e011      	b.n	8001034 <copy_buffer+0x4c>
	        // Check if we are at the beginning of the specific frame we want to print
	        if (buffer[i] == 0x20 && i + TARGET_SIZE <= size) {  // Look for the start of the frame
 8001010:	8abb      	ldrh	r3, [r7, #20]
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b20      	cmp	r3, #32
 800101a:	d108      	bne.n	800102e <copy_buffer+0x46>
 800101c:	8abb      	ldrh	r3, [r7, #20]
 800101e:	f103 021f 	add.w	r2, r3, #31
 8001022:	887b      	ldrh	r3, [r7, #2]
 8001024:	429a      	cmp	r2, r3
 8001026:	da02      	bge.n	800102e <copy_buffer+0x46>
	            start_index = i;
 8001028:	8abb      	ldrh	r3, [r7, #20]
 800102a:	82fb      	strh	r3, [r7, #22]
	            break;
 800102c:	e006      	b.n	800103c <copy_buffer+0x54>
	    for (uint16_t i = 0; i < size; i++) {
 800102e:	8abb      	ldrh	r3, [r7, #20]
 8001030:	3301      	adds	r3, #1
 8001032:	82bb      	strh	r3, [r7, #20]
 8001034:	8aba      	ldrh	r2, [r7, #20]
 8001036:	887b      	ldrh	r3, [r7, #2]
 8001038:	429a      	cmp	r2, r3
 800103a:	d3e9      	bcc.n	8001010 <copy_buffer+0x28>
	        }
	    }

	    // Loop through the specific part of the buffer and format it
	    for (uint16_t i = start_index; i < start_index + TARGET_SIZE; i++) {
 800103c:	8afb      	ldrh	r3, [r7, #22]
 800103e:	827b      	strh	r3, [r7, #18]
 8001040:	e02e      	b.n	80010a0 <copy_buffer+0xb8>
	        sprintf(temp, "0x%02X", buffer[i]);
 8001042:	8a7b      	ldrh	r3, [r7, #18]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	4413      	add	r3, r2
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	f107 0308 	add.w	r3, r7, #8
 8001050:	491b      	ldr	r1, [pc, #108]	@ (80010c0 <copy_buffer+0xd8>)
 8001052:	4618      	mov	r0, r3
 8001054:	f002 fede 	bl	8003e14 <siprintf>

	        // Copy the formatted data (temp) into the global temp_buffer
	        uint16_t len = strlen(temp);
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff f8d7 	bl	8000210 <strlen>
 8001062:	4603      	mov	r3, r0
 8001064:	823b      	strh	r3, [r7, #16]
	        if (temp_buffer_index + len < TEMP_BUFFER_SIZE) {
 8001066:	4b15      	ldr	r3, [pc, #84]	@ (80010bc <copy_buffer+0xd4>)
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	8a3b      	ldrh	r3, [r7, #16]
 800106e:	4413      	add	r3, r2
 8001070:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001074:	da1b      	bge.n	80010ae <copy_buffer+0xc6>
	            memcpy(&temp_buffer[temp_buffer_index], temp, len);
 8001076:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <copy_buffer+0xd4>)
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <copy_buffer+0xd0>)
 800107e:	4413      	add	r3, r2
 8001080:	8a3a      	ldrh	r2, [r7, #16]
 8001082:	f107 0108 	add.w	r1, r7, #8
 8001086:	4618      	mov	r0, r3
 8001088:	f002 ff28 	bl	8003edc <memcpy>
	            temp_buffer_index += len;  // Update the index in the temp_buffer
 800108c:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <copy_buffer+0xd4>)
 800108e:	881a      	ldrh	r2, [r3, #0]
 8001090:	8a3b      	ldrh	r3, [r7, #16]
 8001092:	4413      	add	r3, r2
 8001094:	b29a      	uxth	r2, r3
 8001096:	4b09      	ldr	r3, [pc, #36]	@ (80010bc <copy_buffer+0xd4>)
 8001098:	801a      	strh	r2, [r3, #0]
	    for (uint16_t i = start_index; i < start_index + TARGET_SIZE; i++) {
 800109a:	8a7b      	ldrh	r3, [r7, #18]
 800109c:	3301      	adds	r3, #1
 800109e:	827b      	strh	r3, [r7, #18]
 80010a0:	8afb      	ldrh	r3, [r7, #22]
 80010a2:	f103 021f 	add.w	r2, r3, #31
 80010a6:	8a7b      	ldrh	r3, [r7, #18]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	daca      	bge.n	8001042 <copy_buffer+0x5a>
	            // Handle buffer overflow (optional, you may reset or stop appending)
	            break;
	        }
	    }

	}
 80010ac:	e000      	b.n	80010b0 <copy_buffer+0xc8>
	            break;
 80010ae:	bf00      	nop
	}
 80010b0:	bf00      	nop
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	2000016c 	.word	0x2000016c
 80010bc:	2000056c 	.word	0x2000056c
 80010c0:	08004704 	.word	0x08004704

080010c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
static void MX_USART1_UART_Init(void)
 80010ca:	f107 0310 	add.w	r3, r7, #16
 80010ce:	607b      	str	r3, [r7, #4]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010d0:	4b12      	ldr	r3, [pc, #72]	@ (800111c <MX_USART1_UART_Init+0x58>)
 80010d2:	4a13      	ldr	r2, [pc, #76]	@ (8001120 <MX_USART1_UART_Init+0x5c>)
 80010d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010d6:	4b11      	ldr	r3, [pc, #68]	@ (800111c <MX_USART1_UART_Init+0x58>)
 80010d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010de:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <MX_USART1_UART_Init+0x58>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010e4:	4b0d      	ldr	r3, [pc, #52]	@ (800111c <MX_USART1_UART_Init+0x58>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ea:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <MX_USART1_UART_Init+0x58>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010f0:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <MX_USART1_UART_Init+0x58>)
 80010f2:	220c      	movs	r2, #12
 80010f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f6:	4b09      	ldr	r3, [pc, #36]	@ (800111c <MX_USART1_UART_Init+0x58>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010fc:	4b07      	ldr	r3, [pc, #28]	@ (800111c <MX_USART1_UART_Init+0x58>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001102:	4806      	ldr	r0, [pc, #24]	@ (800111c <MX_USART1_UART_Init+0x58>)
 8001104:	f001 fefc 	bl	8002f00 <HAL_UART_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_USART1_UART_Init+0x4e>
  {
    Error_Handler();
 800110e:	f000 f8c1 	bl	8001294 <Error_Handler>
      }
  }

  /* USER CODE END USART1_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000078 	.word	0x20000078
 8001120:	40011000 	.word	0x40011000

08001124 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001128:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <MX_USART2_UART_Init+0x4c>)
 800112a:	4a12      	ldr	r2, [pc, #72]	@ (8001174 <MX_USART2_UART_Init+0x50>)
 800112c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800112e:	4b10      	ldr	r3, [pc, #64]	@ (8001170 <MX_USART2_UART_Init+0x4c>)
 8001130:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001134:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001136:	4b0e      	ldr	r3, [pc, #56]	@ (8001170 <MX_USART2_UART_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800113c:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <MX_USART2_UART_Init+0x4c>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001142:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <MX_USART2_UART_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001148:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <MX_USART2_UART_Init+0x4c>)
 800114a:	220c      	movs	r2, #12
 800114c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114e:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <MX_USART2_UART_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <MX_USART2_UART_Init+0x4c>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800115a:	4805      	ldr	r0, [pc, #20]	@ (8001170 <MX_USART2_UART_Init+0x4c>)
 800115c:	f001 fed0 	bl	8002f00 <HAL_UART_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001166:	f000 f895 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200000c0 	.word	0x200000c0
 8001174:	40004400 	.word	0x40004400

08001178 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <MX_DMA_Init+0x3c>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	4a0b      	ldr	r2, [pc, #44]	@ (80011b4 <MX_DMA_Init+0x3c>)
 8001188:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800118c:	6313      	str	r3, [r2, #48]	@ 0x30
 800118e:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <MX_DMA_Init+0x3c>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	203a      	movs	r0, #58	@ 0x3a
 80011a0:	f000 fb71 	bl	8001886 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80011a4:	203a      	movs	r0, #58	@ 0x3a
 80011a6:	f000 fb8a 	bl	80018be <HAL_NVIC_EnableIRQ>

}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800

080011b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	@ 0x28
 80011bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001288 <MX_GPIO_Init+0xd0>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a2c      	ldr	r2, [pc, #176]	@ (8001288 <MX_GPIO_Init+0xd0>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b2a      	ldr	r3, [pc, #168]	@ (8001288 <MX_GPIO_Init+0xd0>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b26      	ldr	r3, [pc, #152]	@ (8001288 <MX_GPIO_Init+0xd0>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a25      	ldr	r2, [pc, #148]	@ (8001288 <MX_GPIO_Init+0xd0>)
 80011f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b23      	ldr	r3, [pc, #140]	@ (8001288 <MX_GPIO_Init+0xd0>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	4b1f      	ldr	r3, [pc, #124]	@ (8001288 <MX_GPIO_Init+0xd0>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	4a1e      	ldr	r2, [pc, #120]	@ (8001288 <MX_GPIO_Init+0xd0>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6313      	str	r3, [r2, #48]	@ 0x30
 8001216:	4b1c      	ldr	r3, [pc, #112]	@ (8001288 <MX_GPIO_Init+0xd0>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b18      	ldr	r3, [pc, #96]	@ (8001288 <MX_GPIO_Init+0xd0>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	4a17      	ldr	r2, [pc, #92]	@ (8001288 <MX_GPIO_Init+0xd0>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	6313      	str	r3, [r2, #48]	@ 0x30
 8001232:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <MX_GPIO_Init+0xd0>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	2120      	movs	r1, #32
 8001242:	4812      	ldr	r0, [pc, #72]	@ (800128c <MX_GPIO_Init+0xd4>)
 8001244:	f001 f85a 	bl	80022fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001248:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800124c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800124e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4619      	mov	r1, r3
 800125e:	480c      	ldr	r0, [pc, #48]	@ (8001290 <MX_GPIO_Init+0xd8>)
 8001260:	f000 feb8 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001264:	2320      	movs	r3, #32
 8001266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001268:	2301      	movs	r3, #1
 800126a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	4619      	mov	r1, r3
 800127a:	4804      	ldr	r0, [pc, #16]	@ (800128c <MX_GPIO_Init+0xd4>)
 800127c:	f000 feaa 	bl	8001fd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001280:	bf00      	nop
 8001282:	3728      	adds	r7, #40	@ 0x28
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40023800 	.word	0x40023800
 800128c:	40020000 	.word	0x40020000
 8001290:	40020800 	.word	0x40020800

08001294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001298:	b672      	cpsid	i
}
 800129a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <Error_Handler+0x8>

080012a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	4b10      	ldr	r3, [pc, #64]	@ (80012ec <HAL_MspInit+0x4c>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ae:	4a0f      	ldr	r2, [pc, #60]	@ (80012ec <HAL_MspInit+0x4c>)
 80012b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012b6:	4b0d      	ldr	r3, [pc, #52]	@ (80012ec <HAL_MspInit+0x4c>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	603b      	str	r3, [r7, #0]
 80012c6:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <HAL_MspInit+0x4c>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ca:	4a08      	ldr	r2, [pc, #32]	@ (80012ec <HAL_MspInit+0x4c>)
 80012cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <HAL_MspInit+0x4c>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012de:	2007      	movs	r0, #7
 80012e0:	f000 fac6 	bl	8001870 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40023800 	.word	0x40023800

080012f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08c      	sub	sp, #48	@ 0x30
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a49      	ldr	r2, [pc, #292]	@ (8001434 <HAL_UART_MspInit+0x144>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d15b      	bne.n	80013ca <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	61bb      	str	r3, [r7, #24]
 8001316:	4b48      	ldr	r3, [pc, #288]	@ (8001438 <HAL_UART_MspInit+0x148>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131a:	4a47      	ldr	r2, [pc, #284]	@ (8001438 <HAL_UART_MspInit+0x148>)
 800131c:	f043 0310 	orr.w	r3, r3, #16
 8001320:	6453      	str	r3, [r2, #68]	@ 0x44
 8001322:	4b45      	ldr	r3, [pc, #276]	@ (8001438 <HAL_UART_MspInit+0x148>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001326:	f003 0310 	and.w	r3, r3, #16
 800132a:	61bb      	str	r3, [r7, #24]
 800132c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	4b41      	ldr	r3, [pc, #260]	@ (8001438 <HAL_UART_MspInit+0x148>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	4a40      	ldr	r2, [pc, #256]	@ (8001438 <HAL_UART_MspInit+0x148>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6313      	str	r3, [r2, #48]	@ 0x30
 800133e:	4b3e      	ldr	r3, [pc, #248]	@ (8001438 <HAL_UART_MspInit+0x148>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800134a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800134e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001358:	2303      	movs	r3, #3
 800135a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800135c:	2307      	movs	r3, #7
 800135e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	4619      	mov	r1, r3
 8001366:	4835      	ldr	r0, [pc, #212]	@ (800143c <HAL_UART_MspInit+0x14c>)
 8001368:	f000 fe34 	bl	8001fd4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800136c:	4b34      	ldr	r3, [pc, #208]	@ (8001440 <HAL_UART_MspInit+0x150>)
 800136e:	4a35      	ldr	r2, [pc, #212]	@ (8001444 <HAL_UART_MspInit+0x154>)
 8001370:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001372:	4b33      	ldr	r3, [pc, #204]	@ (8001440 <HAL_UART_MspInit+0x150>)
 8001374:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001378:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800137a:	4b31      	ldr	r3, [pc, #196]	@ (8001440 <HAL_UART_MspInit+0x150>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001380:	4b2f      	ldr	r3, [pc, #188]	@ (8001440 <HAL_UART_MspInit+0x150>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001386:	4b2e      	ldr	r3, [pc, #184]	@ (8001440 <HAL_UART_MspInit+0x150>)
 8001388:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800138c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800138e:	4b2c      	ldr	r3, [pc, #176]	@ (8001440 <HAL_UART_MspInit+0x150>)
 8001390:	2200      	movs	r2, #0
 8001392:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001394:	4b2a      	ldr	r3, [pc, #168]	@ (8001440 <HAL_UART_MspInit+0x150>)
 8001396:	2200      	movs	r2, #0
 8001398:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800139a:	4b29      	ldr	r3, [pc, #164]	@ (8001440 <HAL_UART_MspInit+0x150>)
 800139c:	2200      	movs	r2, #0
 800139e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013a0:	4b27      	ldr	r3, [pc, #156]	@ (8001440 <HAL_UART_MspInit+0x150>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013a6:	4b26      	ldr	r3, [pc, #152]	@ (8001440 <HAL_UART_MspInit+0x150>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80013ac:	4824      	ldr	r0, [pc, #144]	@ (8001440 <HAL_UART_MspInit+0x150>)
 80013ae:	f000 faa1 	bl	80018f4 <HAL_DMA_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80013b8:	f7ff ff6c 	bl	8001294 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a20      	ldr	r2, [pc, #128]	@ (8001440 <HAL_UART_MspInit+0x150>)
 80013c0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80013c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001440 <HAL_UART_MspInit+0x150>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013c8:	e030      	b.n	800142c <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001448 <HAL_UART_MspInit+0x158>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d12b      	bne.n	800142c <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013d4:	2300      	movs	r3, #0
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	4b17      	ldr	r3, [pc, #92]	@ (8001438 <HAL_UART_MspInit+0x148>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013dc:	4a16      	ldr	r2, [pc, #88]	@ (8001438 <HAL_UART_MspInit+0x148>)
 80013de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e4:	4b14      	ldr	r3, [pc, #80]	@ (8001438 <HAL_UART_MspInit+0x148>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <HAL_UART_MspInit+0x148>)
 80013f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f8:	4a0f      	ldr	r2, [pc, #60]	@ (8001438 <HAL_UART_MspInit+0x148>)
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001400:	4b0d      	ldr	r3, [pc, #52]	@ (8001438 <HAL_UART_MspInit+0x148>)
 8001402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800140c:	230c      	movs	r3, #12
 800140e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001418:	2303      	movs	r3, #3
 800141a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800141c:	2307      	movs	r3, #7
 800141e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 031c 	add.w	r3, r7, #28
 8001424:	4619      	mov	r1, r3
 8001426:	4805      	ldr	r0, [pc, #20]	@ (800143c <HAL_UART_MspInit+0x14c>)
 8001428:	f000 fdd4 	bl	8001fd4 <HAL_GPIO_Init>
}
 800142c:	bf00      	nop
 800142e:	3730      	adds	r7, #48	@ 0x30
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40011000 	.word	0x40011000
 8001438:	40023800 	.word	0x40023800
 800143c:	40020000 	.word	0x40020000
 8001440:	20000108 	.word	0x20000108
 8001444:	40026440 	.word	0x40026440
 8001448:	40004400 	.word	0x40004400

0800144c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <NMI_Handler+0x4>

08001454 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <HardFault_Handler+0x4>

0800145c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <MemManage_Handler+0x4>

08001464 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <BusFault_Handler+0x4>

0800146c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <UsageFault_Handler+0x4>

08001474 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a2:	f000 f8d1 	bl	8001648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80014b0:	4802      	ldr	r0, [pc, #8]	@ (80014bc <DMA2_Stream2_IRQHandler+0x10>)
 80014b2:	f000 fb25 	bl	8001b00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000108 	.word	0x20000108

080014c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c8:	4a14      	ldr	r2, [pc, #80]	@ (800151c <_sbrk+0x5c>)
 80014ca:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <_sbrk+0x60>)
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d4:	4b13      	ldr	r3, [pc, #76]	@ (8001524 <_sbrk+0x64>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d102      	bne.n	80014e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014dc:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <_sbrk+0x64>)
 80014de:	4a12      	ldr	r2, [pc, #72]	@ (8001528 <_sbrk+0x68>)
 80014e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014e2:	4b10      	ldr	r3, [pc, #64]	@ (8001524 <_sbrk+0x64>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d207      	bcs.n	8001500 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f0:	f002 fcc8 	bl	8003e84 <__errno>
 80014f4:	4603      	mov	r3, r0
 80014f6:	220c      	movs	r2, #12
 80014f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295
 80014fe:	e009      	b.n	8001514 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001500:	4b08      	ldr	r3, [pc, #32]	@ (8001524 <_sbrk+0x64>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001506:	4b07      	ldr	r3, [pc, #28]	@ (8001524 <_sbrk+0x64>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	4a05      	ldr	r2, [pc, #20]	@ (8001524 <_sbrk+0x64>)
 8001510:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001512:	68fb      	ldr	r3, [r7, #12]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20020000 	.word	0x20020000
 8001520:	00000400 	.word	0x00000400
 8001524:	20000584 	.word	0x20000584
 8001528:	200006d8 	.word	0x200006d8

0800152c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001530:	4b06      	ldr	r3, [pc, #24]	@ (800154c <SystemInit+0x20>)
 8001532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001536:	4a05      	ldr	r2, [pc, #20]	@ (800154c <SystemInit+0x20>)
 8001538:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800153c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001550:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001588 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001554:	f7ff ffea 	bl	800152c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001558:	480c      	ldr	r0, [pc, #48]	@ (800158c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800155a:	490d      	ldr	r1, [pc, #52]	@ (8001590 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800155c:	4a0d      	ldr	r2, [pc, #52]	@ (8001594 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001560:	e002      	b.n	8001568 <LoopCopyDataInit>

08001562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001566:	3304      	adds	r3, #4

08001568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800156c:	d3f9      	bcc.n	8001562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156e:	4a0a      	ldr	r2, [pc, #40]	@ (8001598 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001570:	4c0a      	ldr	r4, [pc, #40]	@ (800159c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001574:	e001      	b.n	800157a <LoopFillZerobss>

08001576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001578:	3204      	adds	r2, #4

0800157a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800157c:	d3fb      	bcc.n	8001576 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800157e:	f002 fc87 	bl	8003e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001582:	f7ff f883 	bl	800068c <main>
  bx  lr    
 8001586:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001588:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800158c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001590:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001594:	08004870 	.word	0x08004870
  ldr r2, =_sbss
 8001598:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800159c:	200006d4 	.word	0x200006d4

080015a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a0:	e7fe      	b.n	80015a0 <ADC_IRQHandler>
	...

080015a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015a8:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <HAL_Init+0x40>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0d      	ldr	r2, [pc, #52]	@ (80015e4 <HAL_Init+0x40>)
 80015ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015b4:	4b0b      	ldr	r3, [pc, #44]	@ (80015e4 <HAL_Init+0x40>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0a      	ldr	r2, [pc, #40]	@ (80015e4 <HAL_Init+0x40>)
 80015ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c0:	4b08      	ldr	r3, [pc, #32]	@ (80015e4 <HAL_Init+0x40>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a07      	ldr	r2, [pc, #28]	@ (80015e4 <HAL_Init+0x40>)
 80015c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015cc:	2003      	movs	r0, #3
 80015ce:	f000 f94f 	bl	8001870 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d2:	2000      	movs	r0, #0
 80015d4:	f000 f808 	bl	80015e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d8:	f7ff fe62 	bl	80012a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40023c00 	.word	0x40023c00

080015e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f0:	4b12      	ldr	r3, [pc, #72]	@ (800163c <HAL_InitTick+0x54>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b12      	ldr	r3, [pc, #72]	@ (8001640 <HAL_InitTick+0x58>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4619      	mov	r1, r3
 80015fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001602:	fbb2 f3f3 	udiv	r3, r2, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f967 	bl	80018da <HAL_SYSTICK_Config>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e00e      	b.n	8001634 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b0f      	cmp	r3, #15
 800161a:	d80a      	bhi.n	8001632 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800161c:	2200      	movs	r2, #0
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f000 f92f 	bl	8001886 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001628:	4a06      	ldr	r2, [pc, #24]	@ (8001644 <HAL_InitTick+0x5c>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	e000      	b.n	8001634 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000000 	.word	0x20000000
 8001640:	20000008 	.word	0x20000008
 8001644:	20000004 	.word	0x20000004

08001648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800164c:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <HAL_IncTick+0x20>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	4b06      	ldr	r3, [pc, #24]	@ (800166c <HAL_IncTick+0x24>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4413      	add	r3, r2
 8001658:	4a04      	ldr	r2, [pc, #16]	@ (800166c <HAL_IncTick+0x24>)
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20000008 	.word	0x20000008
 800166c:	20000588 	.word	0x20000588

08001670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return uwTick;
 8001674:	4b03      	ldr	r3, [pc, #12]	@ (8001684 <HAL_GetTick+0x14>)
 8001676:	681b      	ldr	r3, [r3, #0]
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	20000588 	.word	0x20000588

08001688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001690:	f7ff ffee 	bl	8001670 <HAL_GetTick>
 8001694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a0:	d005      	beq.n	80016ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016a2:	4b0a      	ldr	r3, [pc, #40]	@ (80016cc <HAL_Delay+0x44>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	461a      	mov	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4413      	add	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ae:	bf00      	nop
 80016b0:	f7ff ffde 	bl	8001670 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d8f7      	bhi.n	80016b0 <HAL_Delay+0x28>
  {
  }
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000008 	.word	0x20000008

080016d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016ec:	4013      	ands	r3, r2
 80016ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001702:	4a04      	ldr	r2, [pc, #16]	@ (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	60d3      	str	r3, [r2, #12]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800171c:	4b04      	ldr	r3, [pc, #16]	@ (8001730 <__NVIC_GetPriorityGrouping+0x18>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	0a1b      	lsrs	r3, r3, #8
 8001722:	f003 0307 	and.w	r3, r3, #7
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	2b00      	cmp	r3, #0
 8001744:	db0b      	blt.n	800175e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	f003 021f 	and.w	r2, r3, #31
 800174c:	4907      	ldr	r1, [pc, #28]	@ (800176c <__NVIC_EnableIRQ+0x38>)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	095b      	lsrs	r3, r3, #5
 8001754:	2001      	movs	r0, #1
 8001756:	fa00 f202 	lsl.w	r2, r0, r2
 800175a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000e100 	.word	0xe000e100

08001770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	6039      	str	r1, [r7, #0]
 800177a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	2b00      	cmp	r3, #0
 8001782:	db0a      	blt.n	800179a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	490c      	ldr	r1, [pc, #48]	@ (80017bc <__NVIC_SetPriority+0x4c>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	0112      	lsls	r2, r2, #4
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	440b      	add	r3, r1
 8001794:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001798:	e00a      	b.n	80017b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4908      	ldr	r1, [pc, #32]	@ (80017c0 <__NVIC_SetPriority+0x50>)
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	3b04      	subs	r3, #4
 80017a8:	0112      	lsls	r2, r2, #4
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	440b      	add	r3, r1
 80017ae:	761a      	strb	r2, [r3, #24]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000e100 	.word	0xe000e100
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	@ 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f1c3 0307 	rsb	r3, r3, #7
 80017de:	2b04      	cmp	r3, #4
 80017e0:	bf28      	it	cs
 80017e2:	2304      	movcs	r3, #4
 80017e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3304      	adds	r3, #4
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d902      	bls.n	80017f4 <NVIC_EncodePriority+0x30>
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3b03      	subs	r3, #3
 80017f2:	e000      	b.n	80017f6 <NVIC_EncodePriority+0x32>
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	f04f 32ff 	mov.w	r2, #4294967295
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43da      	mvns	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	401a      	ands	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800180c:	f04f 31ff 	mov.w	r1, #4294967295
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43d9      	mvns	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	4313      	orrs	r3, r2
         );
}
 800181e:	4618      	mov	r0, r3
 8001820:	3724      	adds	r7, #36	@ 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
	...

0800182c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3b01      	subs	r3, #1
 8001838:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800183c:	d301      	bcc.n	8001842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800183e:	2301      	movs	r3, #1
 8001840:	e00f      	b.n	8001862 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001842:	4a0a      	ldr	r2, [pc, #40]	@ (800186c <SysTick_Config+0x40>)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800184a:	210f      	movs	r1, #15
 800184c:	f04f 30ff 	mov.w	r0, #4294967295
 8001850:	f7ff ff8e 	bl	8001770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001854:	4b05      	ldr	r3, [pc, #20]	@ (800186c <SysTick_Config+0x40>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800185a:	4b04      	ldr	r3, [pc, #16]	@ (800186c <SysTick_Config+0x40>)
 800185c:	2207      	movs	r2, #7
 800185e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	e000e010 	.word	0xe000e010

08001870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff ff29 	bl	80016d0 <__NVIC_SetPriorityGrouping>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001886:	b580      	push	{r7, lr}
 8001888:	b086      	sub	sp, #24
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	607a      	str	r2, [r7, #4]
 8001892:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001898:	f7ff ff3e 	bl	8001718 <__NVIC_GetPriorityGrouping>
 800189c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	68b9      	ldr	r1, [r7, #8]
 80018a2:	6978      	ldr	r0, [r7, #20]
 80018a4:	f7ff ff8e 	bl	80017c4 <NVIC_EncodePriority>
 80018a8:	4602      	mov	r2, r0
 80018aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ae:	4611      	mov	r1, r2
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff5d 	bl	8001770 <__NVIC_SetPriority>
}
 80018b6:	bf00      	nop
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff31 	bl	8001734 <__NVIC_EnableIRQ>
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff ffa2 	bl	800182c <SysTick_Config>
 80018e8:	4603      	mov	r3, r0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001900:	f7ff feb6 	bl	8001670 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e099      	b.n	8001a44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2202      	movs	r2, #2
 8001914:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 0201 	bic.w	r2, r2, #1
 800192e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001930:	e00f      	b.n	8001952 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001932:	f7ff fe9d 	bl	8001670 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b05      	cmp	r3, #5
 800193e:	d908      	bls.n	8001952 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2220      	movs	r2, #32
 8001944:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2203      	movs	r2, #3
 800194a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e078      	b.n	8001a44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1e8      	bne.n	8001932 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	4b38      	ldr	r3, [pc, #224]	@ (8001a4c <HAL_DMA_Init+0x158>)
 800196c:	4013      	ands	r3, r2
 800196e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800197e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800198a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001996:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d107      	bne.n	80019bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b4:	4313      	orrs	r3, r2
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f023 0307 	bic.w	r3, r3, #7
 80019d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	4313      	orrs	r3, r2
 80019dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d117      	bne.n	8001a16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00e      	beq.n	8001a16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 fa6f 	bl	8001edc <DMA_CheckFifoParam>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d008      	beq.n	8001a16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2240      	movs	r2, #64	@ 0x40
 8001a08:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001a12:	2301      	movs	r3, #1
 8001a14:	e016      	b.n	8001a44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 fa26 	bl	8001e70 <DMA_CalcBaseAndBitshift>
 8001a24:	4603      	mov	r3, r0
 8001a26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a2c:	223f      	movs	r2, #63	@ 0x3f
 8001a2e:	409a      	lsls	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	f010803f 	.word	0xf010803f

08001a50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d101      	bne.n	8001a76 <HAL_DMA_Start_IT+0x26>
 8001a72:	2302      	movs	r3, #2
 8001a74:	e040      	b.n	8001af8 <HAL_DMA_Start_IT+0xa8>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d12f      	bne.n	8001aea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	68b9      	ldr	r1, [r7, #8]
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 f9b8 	bl	8001e14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aa8:	223f      	movs	r2, #63	@ 0x3f
 8001aaa:	409a      	lsls	r2, r3
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0216 	orr.w	r2, r2, #22
 8001abe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d007      	beq.n	8001ad8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 0208 	orr.w	r2, r2, #8
 8001ad6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 0201 	orr.w	r2, r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	e005      	b.n	8001af6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001af2:	2302      	movs	r3, #2
 8001af4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b0c:	4b8e      	ldr	r3, [pc, #568]	@ (8001d48 <HAL_DMA_IRQHandler+0x248>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a8e      	ldr	r2, [pc, #568]	@ (8001d4c <HAL_DMA_IRQHandler+0x24c>)
 8001b12:	fba2 2303 	umull	r2, r3, r2, r3
 8001b16:	0a9b      	lsrs	r3, r3, #10
 8001b18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2a:	2208      	movs	r2, #8
 8001b2c:	409a      	lsls	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d01a      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d013      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0204 	bic.w	r2, r2, #4
 8001b52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b58:	2208      	movs	r2, #8
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b64:	f043 0201 	orr.w	r2, r3, #1
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b70:	2201      	movs	r2, #1
 8001b72:	409a      	lsls	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4013      	ands	r3, r2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d012      	beq.n	8001ba2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00b      	beq.n	8001ba2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b8e:	2201      	movs	r2, #1
 8001b90:	409a      	lsls	r2, r3
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b9a:	f043 0202 	orr.w	r2, r3, #2
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba6:	2204      	movs	r2, #4
 8001ba8:	409a      	lsls	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4013      	ands	r3, r2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d012      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00b      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bc4:	2204      	movs	r2, #4
 8001bc6:	409a      	lsls	r2, r3
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bd0:	f043 0204 	orr.w	r2, r3, #4
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bdc:	2210      	movs	r2, #16
 8001bde:	409a      	lsls	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4013      	ands	r3, r2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d043      	beq.n	8001c70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d03c      	beq.n	8001c70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bfa:	2210      	movs	r2, #16
 8001bfc:	409a      	lsls	r2, r3
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d018      	beq.n	8001c42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d108      	bne.n	8001c30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d024      	beq.n	8001c70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	4798      	blx	r3
 8001c2e:	e01f      	b.n	8001c70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d01b      	beq.n	8001c70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	4798      	blx	r3
 8001c40:	e016      	b.n	8001c70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d107      	bne.n	8001c60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 0208 	bic.w	r2, r2, #8
 8001c5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c74:	2220      	movs	r2, #32
 8001c76:	409a      	lsls	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 808f 	beq.w	8001da0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0310 	and.w	r3, r3, #16
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 8087 	beq.w	8001da0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c96:	2220      	movs	r2, #32
 8001c98:	409a      	lsls	r2, r3
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b05      	cmp	r3, #5
 8001ca8:	d136      	bne.n	8001d18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 0216 	bic.w	r2, r2, #22
 8001cb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	695a      	ldr	r2, [r3, #20]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cc8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d103      	bne.n	8001cda <HAL_DMA_IRQHandler+0x1da>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d007      	beq.n	8001cea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0208 	bic.w	r2, r2, #8
 8001ce8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cee:	223f      	movs	r2, #63	@ 0x3f
 8001cf0:	409a      	lsls	r2, r3
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d07e      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	4798      	blx	r3
        }
        return;
 8001d16:	e079      	b.n	8001e0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d01d      	beq.n	8001d62 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10d      	bne.n	8001d50 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d031      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	4798      	blx	r3
 8001d44:	e02c      	b.n	8001da0 <HAL_DMA_IRQHandler+0x2a0>
 8001d46:	bf00      	nop
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d023      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	4798      	blx	r3
 8001d60:	e01e      	b.n	8001da0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10f      	bne.n	8001d90 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0210 	bic.w	r2, r2, #16
 8001d7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d032      	beq.n	8001e0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d022      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2205      	movs	r2, #5
 8001db8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0201 	bic.w	r2, r2, #1
 8001dca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d307      	bcc.n	8001de8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f2      	bne.n	8001dcc <HAL_DMA_IRQHandler+0x2cc>
 8001de6:	e000      	b.n	8001dea <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001de8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d005      	beq.n	8001e0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	4798      	blx	r3
 8001e0a:	e000      	b.n	8001e0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e0c:	bf00      	nop
    }
  }
}
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
 8001e20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001e30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b40      	cmp	r3, #64	@ 0x40
 8001e40:	d108      	bne.n	8001e54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e52:	e007      	b.n	8001e64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	60da      	str	r2, [r3, #12]
}
 8001e64:	bf00      	nop
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	3b10      	subs	r3, #16
 8001e80:	4a14      	ldr	r2, [pc, #80]	@ (8001ed4 <DMA_CalcBaseAndBitshift+0x64>)
 8001e82:	fba2 2303 	umull	r2, r3, r2, r3
 8001e86:	091b      	lsrs	r3, r3, #4
 8001e88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e8a:	4a13      	ldr	r2, [pc, #76]	@ (8001ed8 <DMA_CalcBaseAndBitshift+0x68>)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4413      	add	r3, r2
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	461a      	mov	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d909      	bls.n	8001eb2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ea6:	f023 0303 	bic.w	r3, r3, #3
 8001eaa:	1d1a      	adds	r2, r3, #4
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	659a      	str	r2, [r3, #88]	@ 0x58
 8001eb0:	e007      	b.n	8001ec2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001eba:	f023 0303 	bic.w	r3, r3, #3
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	aaaaaaab 	.word	0xaaaaaaab
 8001ed8:	08004724 	.word	0x08004724

08001edc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d11f      	bne.n	8001f36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d856      	bhi.n	8001faa <DMA_CheckFifoParam+0xce>
 8001efc:	a201      	add	r2, pc, #4	@ (adr r2, 8001f04 <DMA_CheckFifoParam+0x28>)
 8001efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f02:	bf00      	nop
 8001f04:	08001f15 	.word	0x08001f15
 8001f08:	08001f27 	.word	0x08001f27
 8001f0c:	08001f15 	.word	0x08001f15
 8001f10:	08001fab 	.word	0x08001fab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d046      	beq.n	8001fae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f24:	e043      	b.n	8001fae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f2a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f2e:	d140      	bne.n	8001fb2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f34:	e03d      	b.n	8001fb2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f3e:	d121      	bne.n	8001f84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	d837      	bhi.n	8001fb6 <DMA_CheckFifoParam+0xda>
 8001f46:	a201      	add	r2, pc, #4	@ (adr r2, 8001f4c <DMA_CheckFifoParam+0x70>)
 8001f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4c:	08001f5d 	.word	0x08001f5d
 8001f50:	08001f63 	.word	0x08001f63
 8001f54:	08001f5d 	.word	0x08001f5d
 8001f58:	08001f75 	.word	0x08001f75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f60:	e030      	b.n	8001fc4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d025      	beq.n	8001fba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f72:	e022      	b.n	8001fba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f78:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f7c:	d11f      	bne.n	8001fbe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f82:	e01c      	b.n	8001fbe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d903      	bls.n	8001f92 <DMA_CheckFifoParam+0xb6>
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d003      	beq.n	8001f98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f90:	e018      	b.n	8001fc4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	73fb      	strb	r3, [r7, #15]
      break;
 8001f96:	e015      	b.n	8001fc4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00e      	beq.n	8001fc2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8001fa8:	e00b      	b.n	8001fc2 <DMA_CheckFifoParam+0xe6>
      break;
 8001faa:	bf00      	nop
 8001fac:	e00a      	b.n	8001fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8001fae:	bf00      	nop
 8001fb0:	e008      	b.n	8001fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8001fb2:	bf00      	nop
 8001fb4:	e006      	b.n	8001fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8001fb6:	bf00      	nop
 8001fb8:	e004      	b.n	8001fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8001fba:	bf00      	nop
 8001fbc:	e002      	b.n	8001fc4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001fbe:	bf00      	nop
 8001fc0:	e000      	b.n	8001fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8001fc2:	bf00      	nop
    }
  } 
  
  return status; 
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop

08001fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b089      	sub	sp, #36	@ 0x24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	e165      	b.n	80022bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	429a      	cmp	r2, r3
 800200a:	f040 8154 	bne.w	80022b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	2b01      	cmp	r3, #1
 8002018:	d005      	beq.n	8002026 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002022:	2b02      	cmp	r3, #2
 8002024:	d130      	bne.n	8002088 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	2203      	movs	r2, #3
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800205c:	2201      	movs	r2, #1
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	091b      	lsrs	r3, r3, #4
 8002072:	f003 0201 	and.w	r2, r3, #1
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	2b03      	cmp	r3, #3
 8002092:	d017      	beq.n	80020c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	2203      	movs	r2, #3
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 0303 	and.w	r3, r3, #3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d123      	bne.n	8002118 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	08da      	lsrs	r2, r3, #3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3208      	adds	r2, #8
 80020d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	220f      	movs	r2, #15
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	08da      	lsrs	r2, r3, #3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3208      	adds	r2, #8
 8002112:	69b9      	ldr	r1, [r7, #24]
 8002114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	2203      	movs	r2, #3
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0203 	and.w	r2, r3, #3
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 80ae 	beq.w	80022b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	4b5d      	ldr	r3, [pc, #372]	@ (80022d4 <HAL_GPIO_Init+0x300>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002162:	4a5c      	ldr	r2, [pc, #368]	@ (80022d4 <HAL_GPIO_Init+0x300>)
 8002164:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002168:	6453      	str	r3, [r2, #68]	@ 0x44
 800216a:	4b5a      	ldr	r3, [pc, #360]	@ (80022d4 <HAL_GPIO_Init+0x300>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002176:	4a58      	ldr	r2, [pc, #352]	@ (80022d8 <HAL_GPIO_Init+0x304>)
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	089b      	lsrs	r3, r3, #2
 800217c:	3302      	adds	r3, #2
 800217e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	220f      	movs	r2, #15
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4f      	ldr	r2, [pc, #316]	@ (80022dc <HAL_GPIO_Init+0x308>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d025      	beq.n	80021ee <HAL_GPIO_Init+0x21a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a4e      	ldr	r2, [pc, #312]	@ (80022e0 <HAL_GPIO_Init+0x30c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d01f      	beq.n	80021ea <HAL_GPIO_Init+0x216>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a4d      	ldr	r2, [pc, #308]	@ (80022e4 <HAL_GPIO_Init+0x310>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d019      	beq.n	80021e6 <HAL_GPIO_Init+0x212>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a4c      	ldr	r2, [pc, #304]	@ (80022e8 <HAL_GPIO_Init+0x314>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d013      	beq.n	80021e2 <HAL_GPIO_Init+0x20e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a4b      	ldr	r2, [pc, #300]	@ (80022ec <HAL_GPIO_Init+0x318>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d00d      	beq.n	80021de <HAL_GPIO_Init+0x20a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a4a      	ldr	r2, [pc, #296]	@ (80022f0 <HAL_GPIO_Init+0x31c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d007      	beq.n	80021da <HAL_GPIO_Init+0x206>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a49      	ldr	r2, [pc, #292]	@ (80022f4 <HAL_GPIO_Init+0x320>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d101      	bne.n	80021d6 <HAL_GPIO_Init+0x202>
 80021d2:	2306      	movs	r3, #6
 80021d4:	e00c      	b.n	80021f0 <HAL_GPIO_Init+0x21c>
 80021d6:	2307      	movs	r3, #7
 80021d8:	e00a      	b.n	80021f0 <HAL_GPIO_Init+0x21c>
 80021da:	2305      	movs	r3, #5
 80021dc:	e008      	b.n	80021f0 <HAL_GPIO_Init+0x21c>
 80021de:	2304      	movs	r3, #4
 80021e0:	e006      	b.n	80021f0 <HAL_GPIO_Init+0x21c>
 80021e2:	2303      	movs	r3, #3
 80021e4:	e004      	b.n	80021f0 <HAL_GPIO_Init+0x21c>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e002      	b.n	80021f0 <HAL_GPIO_Init+0x21c>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <HAL_GPIO_Init+0x21c>
 80021ee:	2300      	movs	r3, #0
 80021f0:	69fa      	ldr	r2, [r7, #28]
 80021f2:	f002 0203 	and.w	r2, r2, #3
 80021f6:	0092      	lsls	r2, r2, #2
 80021f8:	4093      	lsls	r3, r2
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002200:	4935      	ldr	r1, [pc, #212]	@ (80022d8 <HAL_GPIO_Init+0x304>)
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	089b      	lsrs	r3, r3, #2
 8002206:	3302      	adds	r3, #2
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800220e:	4b3a      	ldr	r3, [pc, #232]	@ (80022f8 <HAL_GPIO_Init+0x324>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002232:	4a31      	ldr	r2, [pc, #196]	@ (80022f8 <HAL_GPIO_Init+0x324>)
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002238:	4b2f      	ldr	r3, [pc, #188]	@ (80022f8 <HAL_GPIO_Init+0x324>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800225c:	4a26      	ldr	r2, [pc, #152]	@ (80022f8 <HAL_GPIO_Init+0x324>)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002262:	4b25      	ldr	r3, [pc, #148]	@ (80022f8 <HAL_GPIO_Init+0x324>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002286:	4a1c      	ldr	r2, [pc, #112]	@ (80022f8 <HAL_GPIO_Init+0x324>)
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800228c:	4b1a      	ldr	r3, [pc, #104]	@ (80022f8 <HAL_GPIO_Init+0x324>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022b0:	4a11      	ldr	r2, [pc, #68]	@ (80022f8 <HAL_GPIO_Init+0x324>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3301      	adds	r3, #1
 80022ba:	61fb      	str	r3, [r7, #28]
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	2b0f      	cmp	r3, #15
 80022c0:	f67f ae96 	bls.w	8001ff0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022c4:	bf00      	nop
 80022c6:	bf00      	nop
 80022c8:	3724      	adds	r7, #36	@ 0x24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40013800 	.word	0x40013800
 80022dc:	40020000 	.word	0x40020000
 80022e0:	40020400 	.word	0x40020400
 80022e4:	40020800 	.word	0x40020800
 80022e8:	40020c00 	.word	0x40020c00
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40021400 	.word	0x40021400
 80022f4:	40021800 	.word	0x40021800
 80022f8:	40013c00 	.word	0x40013c00

080022fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	807b      	strh	r3, [r7, #2]
 8002308:	4613      	mov	r3, r2
 800230a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800230c:	787b      	ldrb	r3, [r7, #1]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002312:	887a      	ldrh	r2, [r7, #2]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002318:	e003      	b.n	8002322 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800231a:	887b      	ldrh	r3, [r7, #2]
 800231c:	041a      	lsls	r2, r3, #16
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	619a      	str	r2, [r3, #24]
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
	...

08002330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0cc      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002344:	4b68      	ldr	r3, [pc, #416]	@ (80024e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d90c      	bls.n	800236c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002352:	4b65      	ldr	r3, [pc, #404]	@ (80024e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800235a:	4b63      	ldr	r3, [pc, #396]	@ (80024e8 <HAL_RCC_ClockConfig+0x1b8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d001      	beq.n	800236c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0b8      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d020      	beq.n	80023ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002384:	4b59      	ldr	r3, [pc, #356]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	4a58      	ldr	r2, [pc, #352]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800238e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0308 	and.w	r3, r3, #8
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800239c:	4b53      	ldr	r3, [pc, #332]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4a52      	ldr	r2, [pc, #328]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80023a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a8:	4b50      	ldr	r3, [pc, #320]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	494d      	ldr	r1, [pc, #308]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d044      	beq.n	8002450 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d107      	bne.n	80023de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ce:	4b47      	ldr	r3, [pc, #284]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d119      	bne.n	800240e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e07f      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d003      	beq.n	80023ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ea:	2b03      	cmp	r3, #3
 80023ec:	d107      	bne.n	80023fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ee:	4b3f      	ldr	r3, [pc, #252]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d109      	bne.n	800240e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e06f      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fe:	4b3b      	ldr	r3, [pc, #236]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e067      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800240e:	4b37      	ldr	r3, [pc, #220]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f023 0203 	bic.w	r2, r3, #3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	4934      	ldr	r1, [pc, #208]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 800241c:	4313      	orrs	r3, r2
 800241e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002420:	f7ff f926 	bl	8001670 <HAL_GetTick>
 8002424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002426:	e00a      	b.n	800243e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002428:	f7ff f922 	bl	8001670 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e04f      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243e:	4b2b      	ldr	r3, [pc, #172]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 020c 	and.w	r2, r3, #12
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	429a      	cmp	r2, r3
 800244e:	d1eb      	bne.n	8002428 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002450:	4b25      	ldr	r3, [pc, #148]	@ (80024e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 030f 	and.w	r3, r3, #15
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d20c      	bcs.n	8002478 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245e:	4b22      	ldr	r3, [pc, #136]	@ (80024e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002466:	4b20      	ldr	r3, [pc, #128]	@ (80024e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d001      	beq.n	8002478 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e032      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002484:	4b19      	ldr	r3, [pc, #100]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	4916      	ldr	r1, [pc, #88]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	4313      	orrs	r3, r2
 8002494:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d009      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024a2:	4b12      	ldr	r3, [pc, #72]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	490e      	ldr	r1, [pc, #56]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024b6:	f000 f855 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 80024ba:	4602      	mov	r2, r0
 80024bc:	4b0b      	ldr	r3, [pc, #44]	@ (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	091b      	lsrs	r3, r3, #4
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	490a      	ldr	r1, [pc, #40]	@ (80024f0 <HAL_RCC_ClockConfig+0x1c0>)
 80024c8:	5ccb      	ldrb	r3, [r1, r3]
 80024ca:	fa22 f303 	lsr.w	r3, r2, r3
 80024ce:	4a09      	ldr	r2, [pc, #36]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80024d2:	4b09      	ldr	r3, [pc, #36]	@ (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff f886 	bl	80015e8 <HAL_InitTick>

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40023c00 	.word	0x40023c00
 80024ec:	40023800 	.word	0x40023800
 80024f0:	0800470c 	.word	0x0800470c
 80024f4:	20000000 	.word	0x20000000
 80024f8:	20000004 	.word	0x20000004

080024fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002500:	4b03      	ldr	r3, [pc, #12]	@ (8002510 <HAL_RCC_GetHCLKFreq+0x14>)
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000000 	.word	0x20000000

08002514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002518:	f7ff fff0 	bl	80024fc <HAL_RCC_GetHCLKFreq>
 800251c:	4602      	mov	r2, r0
 800251e:	4b05      	ldr	r3, [pc, #20]	@ (8002534 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	0a9b      	lsrs	r3, r3, #10
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	4903      	ldr	r1, [pc, #12]	@ (8002538 <HAL_RCC_GetPCLK1Freq+0x24>)
 800252a:	5ccb      	ldrb	r3, [r1, r3]
 800252c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002530:	4618      	mov	r0, r3
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40023800 	.word	0x40023800
 8002538:	0800471c 	.word	0x0800471c

0800253c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002540:	f7ff ffdc 	bl	80024fc <HAL_RCC_GetHCLKFreq>
 8002544:	4602      	mov	r2, r0
 8002546:	4b05      	ldr	r3, [pc, #20]	@ (800255c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	0b5b      	lsrs	r3, r3, #13
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	4903      	ldr	r1, [pc, #12]	@ (8002560 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002552:	5ccb      	ldrb	r3, [r1, r3]
 8002554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002558:	4618      	mov	r0, r3
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40023800 	.word	0x40023800
 8002560:	0800471c 	.word	0x0800471c

08002564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002568:	b0ae      	sub	sp, #184	@ 0xb8
 800256a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002572:	2300      	movs	r3, #0
 8002574:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800257e:	2300      	movs	r3, #0
 8002580:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800258a:	4bcb      	ldr	r3, [pc, #812]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x354>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b0c      	cmp	r3, #12
 8002594:	f200 8206 	bhi.w	80029a4 <HAL_RCC_GetSysClockFreq+0x440>
 8002598:	a201      	add	r2, pc, #4	@ (adr r2, 80025a0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800259a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259e:	bf00      	nop
 80025a0:	080025d5 	.word	0x080025d5
 80025a4:	080029a5 	.word	0x080029a5
 80025a8:	080029a5 	.word	0x080029a5
 80025ac:	080029a5 	.word	0x080029a5
 80025b0:	080025dd 	.word	0x080025dd
 80025b4:	080029a5 	.word	0x080029a5
 80025b8:	080029a5 	.word	0x080029a5
 80025bc:	080029a5 	.word	0x080029a5
 80025c0:	080025e5 	.word	0x080025e5
 80025c4:	080029a5 	.word	0x080029a5
 80025c8:	080029a5 	.word	0x080029a5
 80025cc:	080029a5 	.word	0x080029a5
 80025d0:	080027d5 	.word	0x080027d5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025d4:	4bb9      	ldr	r3, [pc, #740]	@ (80028bc <HAL_RCC_GetSysClockFreq+0x358>)
 80025d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80025da:	e1e7      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025dc:	4bb8      	ldr	r3, [pc, #736]	@ (80028c0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80025de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80025e2:	e1e3      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025e4:	4bb4      	ldr	r3, [pc, #720]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025f0:	4bb1      	ldr	r3, [pc, #708]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d071      	beq.n	80026e0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025fc:	4bae      	ldr	r3, [pc, #696]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	099b      	lsrs	r3, r3, #6
 8002602:	2200      	movs	r2, #0
 8002604:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002608:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800260c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002614:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002618:	2300      	movs	r3, #0
 800261a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800261e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002622:	4622      	mov	r2, r4
 8002624:	462b      	mov	r3, r5
 8002626:	f04f 0000 	mov.w	r0, #0
 800262a:	f04f 0100 	mov.w	r1, #0
 800262e:	0159      	lsls	r1, r3, #5
 8002630:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002634:	0150      	lsls	r0, r2, #5
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	4621      	mov	r1, r4
 800263c:	1a51      	subs	r1, r2, r1
 800263e:	6439      	str	r1, [r7, #64]	@ 0x40
 8002640:	4629      	mov	r1, r5
 8002642:	eb63 0301 	sbc.w	r3, r3, r1
 8002646:	647b      	str	r3, [r7, #68]	@ 0x44
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002654:	4649      	mov	r1, r9
 8002656:	018b      	lsls	r3, r1, #6
 8002658:	4641      	mov	r1, r8
 800265a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800265e:	4641      	mov	r1, r8
 8002660:	018a      	lsls	r2, r1, #6
 8002662:	4641      	mov	r1, r8
 8002664:	1a51      	subs	r1, r2, r1
 8002666:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002668:	4649      	mov	r1, r9
 800266a:	eb63 0301 	sbc.w	r3, r3, r1
 800266e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800267c:	4649      	mov	r1, r9
 800267e:	00cb      	lsls	r3, r1, #3
 8002680:	4641      	mov	r1, r8
 8002682:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002686:	4641      	mov	r1, r8
 8002688:	00ca      	lsls	r2, r1, #3
 800268a:	4610      	mov	r0, r2
 800268c:	4619      	mov	r1, r3
 800268e:	4603      	mov	r3, r0
 8002690:	4622      	mov	r2, r4
 8002692:	189b      	adds	r3, r3, r2
 8002694:	633b      	str	r3, [r7, #48]	@ 0x30
 8002696:	462b      	mov	r3, r5
 8002698:	460a      	mov	r2, r1
 800269a:	eb42 0303 	adc.w	r3, r2, r3
 800269e:	637b      	str	r3, [r7, #52]	@ 0x34
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80026ac:	4629      	mov	r1, r5
 80026ae:	024b      	lsls	r3, r1, #9
 80026b0:	4621      	mov	r1, r4
 80026b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026b6:	4621      	mov	r1, r4
 80026b8:	024a      	lsls	r2, r1, #9
 80026ba:	4610      	mov	r0, r2
 80026bc:	4619      	mov	r1, r3
 80026be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026c2:	2200      	movs	r2, #0
 80026c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80026c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80026cc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80026d0:	f7fd fdf6 	bl	80002c0 <__aeabi_uldivmod>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4613      	mov	r3, r2
 80026da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80026de:	e067      	b.n	80027b0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e0:	4b75      	ldr	r3, [pc, #468]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	099b      	lsrs	r3, r3, #6
 80026e6:	2200      	movs	r2, #0
 80026e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80026ec:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80026f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026fa:	2300      	movs	r3, #0
 80026fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80026fe:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002702:	4622      	mov	r2, r4
 8002704:	462b      	mov	r3, r5
 8002706:	f04f 0000 	mov.w	r0, #0
 800270a:	f04f 0100 	mov.w	r1, #0
 800270e:	0159      	lsls	r1, r3, #5
 8002710:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002714:	0150      	lsls	r0, r2, #5
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4621      	mov	r1, r4
 800271c:	1a51      	subs	r1, r2, r1
 800271e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002720:	4629      	mov	r1, r5
 8002722:	eb63 0301 	sbc.w	r3, r3, r1
 8002726:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002734:	4649      	mov	r1, r9
 8002736:	018b      	lsls	r3, r1, #6
 8002738:	4641      	mov	r1, r8
 800273a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800273e:	4641      	mov	r1, r8
 8002740:	018a      	lsls	r2, r1, #6
 8002742:	4641      	mov	r1, r8
 8002744:	ebb2 0a01 	subs.w	sl, r2, r1
 8002748:	4649      	mov	r1, r9
 800274a:	eb63 0b01 	sbc.w	fp, r3, r1
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800275a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800275e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002762:	4692      	mov	sl, r2
 8002764:	469b      	mov	fp, r3
 8002766:	4623      	mov	r3, r4
 8002768:	eb1a 0303 	adds.w	r3, sl, r3
 800276c:	623b      	str	r3, [r7, #32]
 800276e:	462b      	mov	r3, r5
 8002770:	eb4b 0303 	adc.w	r3, fp, r3
 8002774:	627b      	str	r3, [r7, #36]	@ 0x24
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002782:	4629      	mov	r1, r5
 8002784:	028b      	lsls	r3, r1, #10
 8002786:	4621      	mov	r1, r4
 8002788:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800278c:	4621      	mov	r1, r4
 800278e:	028a      	lsls	r2, r1, #10
 8002790:	4610      	mov	r0, r2
 8002792:	4619      	mov	r1, r3
 8002794:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002798:	2200      	movs	r2, #0
 800279a:	673b      	str	r3, [r7, #112]	@ 0x70
 800279c:	677a      	str	r2, [r7, #116]	@ 0x74
 800279e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80027a2:	f7fd fd8d 	bl	80002c0 <__aeabi_uldivmod>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4613      	mov	r3, r2
 80027ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80027b0:	4b41      	ldr	r3, [pc, #260]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	0c1b      	lsrs	r3, r3, #16
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	3301      	adds	r3, #1
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80027c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80027c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027d2:	e0eb      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027d4:	4b38      	ldr	r3, [pc, #224]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027e0:	4b35      	ldr	r3, [pc, #212]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d06b      	beq.n	80028c4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ec:	4b32      	ldr	r3, [pc, #200]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	099b      	lsrs	r3, r3, #6
 80027f2:	2200      	movs	r2, #0
 80027f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80027f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8002800:	2300      	movs	r3, #0
 8002802:	667b      	str	r3, [r7, #100]	@ 0x64
 8002804:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002808:	4622      	mov	r2, r4
 800280a:	462b      	mov	r3, r5
 800280c:	f04f 0000 	mov.w	r0, #0
 8002810:	f04f 0100 	mov.w	r1, #0
 8002814:	0159      	lsls	r1, r3, #5
 8002816:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800281a:	0150      	lsls	r0, r2, #5
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4621      	mov	r1, r4
 8002822:	1a51      	subs	r1, r2, r1
 8002824:	61b9      	str	r1, [r7, #24]
 8002826:	4629      	mov	r1, r5
 8002828:	eb63 0301 	sbc.w	r3, r3, r1
 800282c:	61fb      	str	r3, [r7, #28]
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	f04f 0300 	mov.w	r3, #0
 8002836:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800283a:	4659      	mov	r1, fp
 800283c:	018b      	lsls	r3, r1, #6
 800283e:	4651      	mov	r1, sl
 8002840:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002844:	4651      	mov	r1, sl
 8002846:	018a      	lsls	r2, r1, #6
 8002848:	4651      	mov	r1, sl
 800284a:	ebb2 0801 	subs.w	r8, r2, r1
 800284e:	4659      	mov	r1, fp
 8002850:	eb63 0901 	sbc.w	r9, r3, r1
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002860:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002864:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002868:	4690      	mov	r8, r2
 800286a:	4699      	mov	r9, r3
 800286c:	4623      	mov	r3, r4
 800286e:	eb18 0303 	adds.w	r3, r8, r3
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	462b      	mov	r3, r5
 8002876:	eb49 0303 	adc.w	r3, r9, r3
 800287a:	617b      	str	r3, [r7, #20]
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	f04f 0300 	mov.w	r3, #0
 8002884:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002888:	4629      	mov	r1, r5
 800288a:	024b      	lsls	r3, r1, #9
 800288c:	4621      	mov	r1, r4
 800288e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002892:	4621      	mov	r1, r4
 8002894:	024a      	lsls	r2, r1, #9
 8002896:	4610      	mov	r0, r2
 8002898:	4619      	mov	r1, r3
 800289a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800289e:	2200      	movs	r2, #0
 80028a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80028a2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80028a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80028a8:	f7fd fd0a 	bl	80002c0 <__aeabi_uldivmod>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4613      	mov	r3, r2
 80028b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80028b6:	e065      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0x420>
 80028b8:	40023800 	.word	0x40023800
 80028bc:	00f42400 	.word	0x00f42400
 80028c0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028c4:	4b3d      	ldr	r3, [pc, #244]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x458>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	099b      	lsrs	r3, r3, #6
 80028ca:	2200      	movs	r2, #0
 80028cc:	4618      	mov	r0, r3
 80028ce:	4611      	mov	r1, r2
 80028d0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80028d6:	2300      	movs	r3, #0
 80028d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80028da:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80028de:	4642      	mov	r2, r8
 80028e0:	464b      	mov	r3, r9
 80028e2:	f04f 0000 	mov.w	r0, #0
 80028e6:	f04f 0100 	mov.w	r1, #0
 80028ea:	0159      	lsls	r1, r3, #5
 80028ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028f0:	0150      	lsls	r0, r2, #5
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4641      	mov	r1, r8
 80028f8:	1a51      	subs	r1, r2, r1
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	4649      	mov	r1, r9
 80028fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	f04f 0200 	mov.w	r2, #0
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002910:	4659      	mov	r1, fp
 8002912:	018b      	lsls	r3, r1, #6
 8002914:	4651      	mov	r1, sl
 8002916:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800291a:	4651      	mov	r1, sl
 800291c:	018a      	lsls	r2, r1, #6
 800291e:	4651      	mov	r1, sl
 8002920:	1a54      	subs	r4, r2, r1
 8002922:	4659      	mov	r1, fp
 8002924:	eb63 0501 	sbc.w	r5, r3, r1
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	00eb      	lsls	r3, r5, #3
 8002932:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002936:	00e2      	lsls	r2, r4, #3
 8002938:	4614      	mov	r4, r2
 800293a:	461d      	mov	r5, r3
 800293c:	4643      	mov	r3, r8
 800293e:	18e3      	adds	r3, r4, r3
 8002940:	603b      	str	r3, [r7, #0]
 8002942:	464b      	mov	r3, r9
 8002944:	eb45 0303 	adc.w	r3, r5, r3
 8002948:	607b      	str	r3, [r7, #4]
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	f04f 0300 	mov.w	r3, #0
 8002952:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002956:	4629      	mov	r1, r5
 8002958:	028b      	lsls	r3, r1, #10
 800295a:	4621      	mov	r1, r4
 800295c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002960:	4621      	mov	r1, r4
 8002962:	028a      	lsls	r2, r1, #10
 8002964:	4610      	mov	r0, r2
 8002966:	4619      	mov	r1, r3
 8002968:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800296c:	2200      	movs	r2, #0
 800296e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002970:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002972:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002976:	f7fd fca3 	bl	80002c0 <__aeabi_uldivmod>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4613      	mov	r3, r2
 8002980:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002984:	4b0d      	ldr	r3, [pc, #52]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x458>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	0f1b      	lsrs	r3, r3, #28
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002992:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002996:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800299a:	fbb2 f3f3 	udiv	r3, r2, r3
 800299e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80029a2:	e003      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029a4:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80029a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80029aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	37b8      	adds	r7, #184	@ 0xb8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029ba:	bf00      	nop
 80029bc:	40023800 	.word	0x40023800
 80029c0:	00f42400 	.word	0x00f42400

080029c4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e28d      	b.n	8002ef2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 8083 	beq.w	8002aea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80029e4:	4b94      	ldr	r3, [pc, #592]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 030c 	and.w	r3, r3, #12
 80029ec:	2b04      	cmp	r3, #4
 80029ee:	d019      	beq.n	8002a24 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80029f0:	4b91      	ldr	r3, [pc, #580]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 030c 	and.w	r3, r3, #12
        || \
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d106      	bne.n	8002a0a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80029fc:	4b8e      	ldr	r3, [pc, #568]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a08:	d00c      	beq.n	8002a24 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a0a:	4b8b      	ldr	r3, [pc, #556]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a12:	2b0c      	cmp	r3, #12
 8002a14:	d112      	bne.n	8002a3c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a16:	4b88      	ldr	r3, [pc, #544]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a22:	d10b      	bne.n	8002a3c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a24:	4b84      	ldr	r3, [pc, #528]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d05b      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x124>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d157      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e25a      	b.n	8002ef2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a44:	d106      	bne.n	8002a54 <HAL_RCC_OscConfig+0x90>
 8002a46:	4b7c      	ldr	r3, [pc, #496]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a7b      	ldr	r2, [pc, #492]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	e01d      	b.n	8002a90 <HAL_RCC_OscConfig+0xcc>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a5c:	d10c      	bne.n	8002a78 <HAL_RCC_OscConfig+0xb4>
 8002a5e:	4b76      	ldr	r3, [pc, #472]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a75      	ldr	r2, [pc, #468]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002a64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	4b73      	ldr	r3, [pc, #460]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a72      	ldr	r2, [pc, #456]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002a70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	e00b      	b.n	8002a90 <HAL_RCC_OscConfig+0xcc>
 8002a78:	4b6f      	ldr	r3, [pc, #444]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a6e      	ldr	r2, [pc, #440]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002a7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	4b6c      	ldr	r3, [pc, #432]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a6b      	ldr	r2, [pc, #428]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002a8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d013      	beq.n	8002ac0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a98:	f7fe fdea 	bl	8001670 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa0:	f7fe fde6 	bl	8001670 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b64      	cmp	r3, #100	@ 0x64
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e21f      	b.n	8002ef2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab2:	4b61      	ldr	r3, [pc, #388]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCC_OscConfig+0xdc>
 8002abe:	e014      	b.n	8002aea <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7fe fdd6 	bl	8001670 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ac8:	f7fe fdd2 	bl	8001670 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b64      	cmp	r3, #100	@ 0x64
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e20b      	b.n	8002ef2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ada:	4b57      	ldr	r3, [pc, #348]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x104>
 8002ae6:	e000      	b.n	8002aea <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d06f      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002af6:	4b50      	ldr	r3, [pc, #320]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d017      	beq.n	8002b32 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b02:	4b4d      	ldr	r3, [pc, #308]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 030c 	and.w	r3, r3, #12
        || \
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d105      	bne.n	8002b1a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b0e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00b      	beq.n	8002b32 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b1a:	4b47      	ldr	r3, [pc, #284]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b22:	2b0c      	cmp	r3, #12
 8002b24:	d11c      	bne.n	8002b60 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b26:	4b44      	ldr	r3, [pc, #272]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d116      	bne.n	8002b60 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b32:	4b41      	ldr	r3, [pc, #260]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d005      	beq.n	8002b4a <HAL_RCC_OscConfig+0x186>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d001      	beq.n	8002b4a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e1d3      	b.n	8002ef2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4937      	ldr	r1, [pc, #220]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b5e:	e03a      	b.n	8002bd6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d020      	beq.n	8002baa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b68:	4b34      	ldr	r3, [pc, #208]	@ (8002c3c <HAL_RCC_OscConfig+0x278>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6e:	f7fe fd7f 	bl	8001670 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b76:	f7fe fd7b 	bl	8001670 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e1b4      	b.n	8002ef2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b88:	4b2b      	ldr	r3, [pc, #172]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b94:	4b28      	ldr	r3, [pc, #160]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4925      	ldr	r1, [pc, #148]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	600b      	str	r3, [r1, #0]
 8002ba8:	e015      	b.n	8002bd6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002baa:	4b24      	ldr	r3, [pc, #144]	@ (8002c3c <HAL_RCC_OscConfig+0x278>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb0:	f7fe fd5e 	bl	8001670 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb8:	f7fe fd5a 	bl	8001670 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e193      	b.n	8002ef2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bca:	4b1b      	ldr	r3, [pc, #108]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f0      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d036      	beq.n	8002c50 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d016      	beq.n	8002c18 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bea:	4b15      	ldr	r3, [pc, #84]	@ (8002c40 <HAL_RCC_OscConfig+0x27c>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf0:	f7fe fd3e 	bl	8001670 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bf8:	f7fe fd3a 	bl	8001670 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e173      	b.n	8002ef2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x234>
 8002c16:	e01b      	b.n	8002c50 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c18:	4b09      	ldr	r3, [pc, #36]	@ (8002c40 <HAL_RCC_OscConfig+0x27c>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1e:	f7fe fd27 	bl	8001670 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c24:	e00e      	b.n	8002c44 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c26:	f7fe fd23 	bl	8001670 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d907      	bls.n	8002c44 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e15c      	b.n	8002ef2 <HAL_RCC_OscConfig+0x52e>
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	42470000 	.word	0x42470000
 8002c40:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c44:	4b8a      	ldr	r3, [pc, #552]	@ (8002e70 <HAL_RCC_OscConfig+0x4ac>)
 8002c46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1ea      	bne.n	8002c26 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 8097 	beq.w	8002d8c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c62:	4b83      	ldr	r3, [pc, #524]	@ (8002e70 <HAL_RCC_OscConfig+0x4ac>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10f      	bne.n	8002c8e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	4b7f      	ldr	r3, [pc, #508]	@ (8002e70 <HAL_RCC_OscConfig+0x4ac>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c76:	4a7e      	ldr	r2, [pc, #504]	@ (8002e70 <HAL_RCC_OscConfig+0x4ac>)
 8002c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c7e:	4b7c      	ldr	r3, [pc, #496]	@ (8002e70 <HAL_RCC_OscConfig+0x4ac>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8e:	4b79      	ldr	r3, [pc, #484]	@ (8002e74 <HAL_RCC_OscConfig+0x4b0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d118      	bne.n	8002ccc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c9a:	4b76      	ldr	r3, [pc, #472]	@ (8002e74 <HAL_RCC_OscConfig+0x4b0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a75      	ldr	r2, [pc, #468]	@ (8002e74 <HAL_RCC_OscConfig+0x4b0>)
 8002ca0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca6:	f7fe fce3 	bl	8001670 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cae:	f7fe fcdf 	bl	8001670 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e118      	b.n	8002ef2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc0:	4b6c      	ldr	r3, [pc, #432]	@ (8002e74 <HAL_RCC_OscConfig+0x4b0>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d106      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x31e>
 8002cd4:	4b66      	ldr	r3, [pc, #408]	@ (8002e70 <HAL_RCC_OscConfig+0x4ac>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd8:	4a65      	ldr	r2, [pc, #404]	@ (8002e70 <HAL_RCC_OscConfig+0x4ac>)
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ce0:	e01c      	b.n	8002d1c <HAL_RCC_OscConfig+0x358>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b05      	cmp	r3, #5
 8002ce8:	d10c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x340>
 8002cea:	4b61      	ldr	r3, [pc, #388]	@ (8002e70 <HAL_RCC_OscConfig+0x4ac>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cee:	4a60      	ldr	r2, [pc, #384]	@ (8002e70 <HAL_RCC_OscConfig+0x4ac>)
 8002cf0:	f043 0304 	orr.w	r3, r3, #4
 8002cf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cf6:	4b5e      	ldr	r3, [pc, #376]	@ (8002e70 <HAL_RCC_OscConfig+0x4ac>)
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cfa:	4a5d      	ldr	r2, [pc, #372]	@ (8002e70 <HAL_RCC_OscConfig+0x4ac>)
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d02:	e00b      	b.n	8002d1c <HAL_RCC_OscConfig+0x358>
 8002d04:	4b5a      	ldr	r3, [pc, #360]	@ (8002e70 <HAL_RCC_OscConfig+0x4ac>)
 8002d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d08:	4a59      	ldr	r2, [pc, #356]	@ (8002e70 <HAL_RCC_OscConfig+0x4ac>)
 8002d0a:	f023 0301 	bic.w	r3, r3, #1
 8002d0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d10:	4b57      	ldr	r3, [pc, #348]	@ (8002e70 <HAL_RCC_OscConfig+0x4ac>)
 8002d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d14:	4a56      	ldr	r2, [pc, #344]	@ (8002e70 <HAL_RCC_OscConfig+0x4ac>)
 8002d16:	f023 0304 	bic.w	r3, r3, #4
 8002d1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d015      	beq.n	8002d50 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d24:	f7fe fca4 	bl	8001670 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2a:	e00a      	b.n	8002d42 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2c:	f7fe fca0 	bl	8001670 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e0d7      	b.n	8002ef2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d42:	4b4b      	ldr	r3, [pc, #300]	@ (8002e70 <HAL_RCC_OscConfig+0x4ac>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0ee      	beq.n	8002d2c <HAL_RCC_OscConfig+0x368>
 8002d4e:	e014      	b.n	8002d7a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d50:	f7fe fc8e 	bl	8001670 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d56:	e00a      	b.n	8002d6e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d58:	f7fe fc8a 	bl	8001670 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e0c1      	b.n	8002ef2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d6e:	4b40      	ldr	r3, [pc, #256]	@ (8002e70 <HAL_RCC_OscConfig+0x4ac>)
 8002d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1ee      	bne.n	8002d58 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d7a:	7dfb      	ldrb	r3, [r7, #23]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d105      	bne.n	8002d8c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d80:	4b3b      	ldr	r3, [pc, #236]	@ (8002e70 <HAL_RCC_OscConfig+0x4ac>)
 8002d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d84:	4a3a      	ldr	r2, [pc, #232]	@ (8002e70 <HAL_RCC_OscConfig+0x4ac>)
 8002d86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d8a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80ad 	beq.w	8002ef0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d96:	4b36      	ldr	r3, [pc, #216]	@ (8002e70 <HAL_RCC_OscConfig+0x4ac>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d060      	beq.n	8002e64 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d145      	bne.n	8002e36 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002daa:	4b33      	ldr	r3, [pc, #204]	@ (8002e78 <HAL_RCC_OscConfig+0x4b4>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db0:	f7fe fc5e 	bl	8001670 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db8:	f7fe fc5a 	bl	8001670 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e093      	b.n	8002ef2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dca:	4b29      	ldr	r3, [pc, #164]	@ (8002e70 <HAL_RCC_OscConfig+0x4ac>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69da      	ldr	r2, [r3, #28]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de4:	019b      	lsls	r3, r3, #6
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dec:	085b      	lsrs	r3, r3, #1
 8002dee:	3b01      	subs	r3, #1
 8002df0:	041b      	lsls	r3, r3, #16
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df8:	061b      	lsls	r3, r3, #24
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e00:	071b      	lsls	r3, r3, #28
 8002e02:	491b      	ldr	r1, [pc, #108]	@ (8002e70 <HAL_RCC_OscConfig+0x4ac>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e08:	4b1b      	ldr	r3, [pc, #108]	@ (8002e78 <HAL_RCC_OscConfig+0x4b4>)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0e:	f7fe fc2f 	bl	8001670 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e16:	f7fe fc2b 	bl	8001670 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e064      	b.n	8002ef2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e28:	4b11      	ldr	r3, [pc, #68]	@ (8002e70 <HAL_RCC_OscConfig+0x4ac>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0f0      	beq.n	8002e16 <HAL_RCC_OscConfig+0x452>
 8002e34:	e05c      	b.n	8002ef0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e36:	4b10      	ldr	r3, [pc, #64]	@ (8002e78 <HAL_RCC_OscConfig+0x4b4>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3c:	f7fe fc18 	bl	8001670 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e44:	f7fe fc14 	bl	8001670 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e04d      	b.n	8002ef2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e56:	4b06      	ldr	r3, [pc, #24]	@ (8002e70 <HAL_RCC_OscConfig+0x4ac>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0x480>
 8002e62:	e045      	b.n	8002ef0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d107      	bne.n	8002e7c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e040      	b.n	8002ef2 <HAL_RCC_OscConfig+0x52e>
 8002e70:	40023800 	.word	0x40023800
 8002e74:	40007000 	.word	0x40007000
 8002e78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8002efc <HAL_RCC_OscConfig+0x538>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d030      	beq.n	8002eec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d129      	bne.n	8002eec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d122      	bne.n	8002eec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002eac:	4013      	ands	r3, r2
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002eb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d119      	bne.n	8002eec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec2:	085b      	lsrs	r3, r3, #1
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d10f      	bne.n	8002eec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d107      	bne.n	8002eec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e000      	b.n	8002ef2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40023800 	.word	0x40023800

08002f00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e042      	b.n	8002f98 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fe f9e2 	bl	80012f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2224      	movs	r2, #36	@ 0x24
 8002f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 fb83 	bl	8003650 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08a      	sub	sp, #40	@ 0x28
 8002fa4:	af02      	add	r7, sp, #8
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	603b      	str	r3, [r7, #0]
 8002fac:	4613      	mov	r3, r2
 8002fae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b20      	cmp	r3, #32
 8002fbe:	d175      	bne.n	80030ac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <HAL_UART_Transmit+0x2c>
 8002fc6:	88fb      	ldrh	r3, [r7, #6]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e06e      	b.n	80030ae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2221      	movs	r2, #33	@ 0x21
 8002fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fde:	f7fe fb47 	bl	8001670 <HAL_GetTick>
 8002fe2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	88fa      	ldrh	r2, [r7, #6]
 8002fe8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	88fa      	ldrh	r2, [r7, #6]
 8002fee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ff8:	d108      	bne.n	800300c <HAL_UART_Transmit+0x6c>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d104      	bne.n	800300c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003002:	2300      	movs	r3, #0
 8003004:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	61bb      	str	r3, [r7, #24]
 800300a:	e003      	b.n	8003014 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003010:	2300      	movs	r3, #0
 8003012:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003014:	e02e      	b.n	8003074 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2200      	movs	r2, #0
 800301e:	2180      	movs	r1, #128	@ 0x80
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 f995 	bl	8003350 <UART_WaitOnFlagUntilTimeout>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2220      	movs	r2, #32
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e03a      	b.n	80030ae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10b      	bne.n	8003056 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800304c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	3302      	adds	r3, #2
 8003052:	61bb      	str	r3, [r7, #24]
 8003054:	e007      	b.n	8003066 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	781a      	ldrb	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	3301      	adds	r3, #1
 8003064:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800306a:	b29b      	uxth	r3, r3
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003078:	b29b      	uxth	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1cb      	bne.n	8003016 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2200      	movs	r2, #0
 8003086:	2140      	movs	r1, #64	@ 0x40
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 f961 	bl	8003350 <UART_WaitOnFlagUntilTimeout>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e006      	b.n	80030ae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2220      	movs	r2, #32
 80030a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	e000      	b.n	80030ae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80030ac:	2302      	movs	r3, #2
  }
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3720      	adds	r7, #32
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b084      	sub	sp, #16
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	4613      	mov	r3, r2
 80030c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	d112      	bne.n	80030f6 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <HAL_UART_Receive_DMA+0x26>
 80030d6:	88fb      	ldrh	r3, [r7, #6]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e00b      	b.n	80030f8 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80030e6:	88fb      	ldrh	r3, [r7, #6]
 80030e8:	461a      	mov	r2, r3
 80030ea:	68b9      	ldr	r1, [r7, #8]
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 f989 	bl	8003404 <UART_Start_Receive_DMA>
 80030f2:	4603      	mov	r3, r0
 80030f4:	e000      	b.n	80030f8 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80030f6:	2302      	movs	r3, #2
  }
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b09c      	sub	sp, #112	@ 0x70
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003160:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800316c:	2b00      	cmp	r3, #0
 800316e:	d172      	bne.n	8003256 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003170:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003172:	2200      	movs	r2, #0
 8003174:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003176:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	330c      	adds	r3, #12
 800317c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003180:	e853 3f00 	ldrex	r3, [r3]
 8003184:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003188:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800318c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800318e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	330c      	adds	r3, #12
 8003194:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003196:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003198:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800319c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800319e:	e841 2300 	strex	r3, r2, [r1]
 80031a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80031a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1e5      	bne.n	8003176 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	3314      	adds	r3, #20
 80031b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031b4:	e853 3f00 	ldrex	r3, [r3]
 80031b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80031ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031bc:	f023 0301 	bic.w	r3, r3, #1
 80031c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80031c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3314      	adds	r3, #20
 80031c8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80031ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80031cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031d2:	e841 2300 	strex	r3, r2, [r1]
 80031d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80031d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1e5      	bne.n	80031aa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	3314      	adds	r3, #20
 80031e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e8:	e853 3f00 	ldrex	r3, [r3]
 80031ec:	623b      	str	r3, [r7, #32]
   return(result);
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80031f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	3314      	adds	r3, #20
 80031fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80031fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8003200:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003202:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003204:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003206:	e841 2300 	strex	r3, r2, [r1]
 800320a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800320c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1e5      	bne.n	80031de <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003212:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003214:	2220      	movs	r2, #32
 8003216:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800321a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800321c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321e:	2b01      	cmp	r3, #1
 8003220:	d119      	bne.n	8003256 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003222:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	330c      	adds	r3, #12
 8003228:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	e853 3f00 	ldrex	r3, [r3]
 8003230:	60fb      	str	r3, [r7, #12]
   return(result);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f023 0310 	bic.w	r3, r3, #16
 8003238:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800323a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	330c      	adds	r3, #12
 8003240:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003242:	61fa      	str	r2, [r7, #28]
 8003244:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003246:	69b9      	ldr	r1, [r7, #24]
 8003248:	69fa      	ldr	r2, [r7, #28]
 800324a:	e841 2300 	strex	r3, r2, [r1]
 800324e:	617b      	str	r3, [r7, #20]
   return(result);
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1e5      	bne.n	8003222 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003256:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003258:	2200      	movs	r2, #0
 800325a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800325c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800325e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003260:	2b01      	cmp	r3, #1
 8003262:	d106      	bne.n	8003272 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003264:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003266:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003268:	4619      	mov	r1, r3
 800326a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800326c:	f7ff ff66 	bl	800313c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003270:	e002      	b.n	8003278 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003272:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003274:	f7ff ff44 	bl	8003100 <HAL_UART_RxCpltCallback>
}
 8003278:	bf00      	nop
 800327a:	3770      	adds	r7, #112	@ 0x70
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800328c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2201      	movs	r2, #1
 8003292:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003298:	2b01      	cmp	r3, #1
 800329a:	d108      	bne.n	80032ae <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80032a0:	085b      	lsrs	r3, r3, #1
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	4619      	mov	r1, r3
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f7ff ff48 	bl	800313c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80032ac:	e002      	b.n	80032b4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f7ff ff30 	bl	8003114 <HAL_UART_RxHalfCpltCallback>
}
 80032b4:	bf00      	nop
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032cc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032d8:	2b80      	cmp	r3, #128	@ 0x80
 80032da:	bf0c      	ite	eq
 80032dc:	2301      	moveq	r3, #1
 80032de:	2300      	movne	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b21      	cmp	r3, #33	@ 0x21
 80032ee:	d108      	bne.n	8003302 <UART_DMAError+0x46>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d005      	beq.n	8003302 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2200      	movs	r2, #0
 80032fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80032fc:	68b8      	ldr	r0, [r7, #8]
 80032fe:	f000 f91b 	bl	8003538 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800330c:	2b40      	cmp	r3, #64	@ 0x40
 800330e:	bf0c      	ite	eq
 8003310:	2301      	moveq	r3, #1
 8003312:	2300      	movne	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b22      	cmp	r3, #34	@ 0x22
 8003322:	d108      	bne.n	8003336 <UART_DMAError+0x7a>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d005      	beq.n	8003336 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	2200      	movs	r2, #0
 800332e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003330:	68b8      	ldr	r0, [r7, #8]
 8003332:	f000 f929 	bl	8003588 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333a:	f043 0210 	orr.w	r2, r3, #16
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003342:	68b8      	ldr	r0, [r7, #8]
 8003344:	f7ff fef0 	bl	8003128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003348:	bf00      	nop
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	4613      	mov	r3, r2
 800335e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003360:	e03b      	b.n	80033da <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003368:	d037      	beq.n	80033da <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800336a:	f7fe f981 	bl	8001670 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	6a3a      	ldr	r2, [r7, #32]
 8003376:	429a      	cmp	r2, r3
 8003378:	d302      	bcc.n	8003380 <UART_WaitOnFlagUntilTimeout+0x30>
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e03a      	b.n	80033fa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b00      	cmp	r3, #0
 8003390:	d023      	beq.n	80033da <UART_WaitOnFlagUntilTimeout+0x8a>
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2b80      	cmp	r3, #128	@ 0x80
 8003396:	d020      	beq.n	80033da <UART_WaitOnFlagUntilTimeout+0x8a>
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2b40      	cmp	r3, #64	@ 0x40
 800339c:	d01d      	beq.n	80033da <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d116      	bne.n	80033da <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	617b      	str	r3, [r7, #20]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f8e0 	bl	8003588 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2208      	movs	r2, #8
 80033cc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e00f      	b.n	80033fa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	4013      	ands	r3, r2
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	bf0c      	ite	eq
 80033ea:	2301      	moveq	r3, #1
 80033ec:	2300      	movne	r3, #0
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	461a      	mov	r2, r3
 80033f2:	79fb      	ldrb	r3, [r7, #7]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d0b4      	beq.n	8003362 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
	...

08003404 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b098      	sub	sp, #96	@ 0x60
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	4613      	mov	r3, r2
 8003410:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	88fa      	ldrh	r2, [r7, #6]
 800341c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2222      	movs	r2, #34	@ 0x22
 8003428:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003430:	4a3e      	ldr	r2, [pc, #248]	@ (800352c <UART_Start_Receive_DMA+0x128>)
 8003432:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003438:	4a3d      	ldr	r2, [pc, #244]	@ (8003530 <UART_Start_Receive_DMA+0x12c>)
 800343a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003440:	4a3c      	ldr	r2, [pc, #240]	@ (8003534 <UART_Start_Receive_DMA+0x130>)
 8003442:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003448:	2200      	movs	r2, #0
 800344a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800344c:	f107 0308 	add.w	r3, r7, #8
 8003450:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	3304      	adds	r3, #4
 800345c:	4619      	mov	r1, r3
 800345e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	88fb      	ldrh	r3, [r7, #6]
 8003464:	f7fe faf4 	bl	8001a50 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003468:	2300      	movs	r3, #0
 800346a:	613b      	str	r3, [r7, #16]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	613b      	str	r3, [r7, #16]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	613b      	str	r3, [r7, #16]
 800347c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d019      	beq.n	80034ba <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	330c      	adds	r3, #12
 800348c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003490:	e853 3f00 	ldrex	r3, [r3]
 8003494:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800349c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	330c      	adds	r3, #12
 80034a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034a6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80034a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034aa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80034ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80034ae:	e841 2300 	strex	r3, r2, [r1]
 80034b2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80034b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1e5      	bne.n	8003486 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	3314      	adds	r3, #20
 80034c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034c4:	e853 3f00 	ldrex	r3, [r3]
 80034c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034cc:	f043 0301 	orr.w	r3, r3, #1
 80034d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3314      	adds	r3, #20
 80034d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80034da:	63ba      	str	r2, [r7, #56]	@ 0x38
 80034dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034de:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80034e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80034e2:	e841 2300 	strex	r3, r2, [r1]
 80034e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1e5      	bne.n	80034ba <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	3314      	adds	r3, #20
 80034f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	e853 3f00 	ldrex	r3, [r3]
 80034fc:	617b      	str	r3, [r7, #20]
   return(result);
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003504:	653b      	str	r3, [r7, #80]	@ 0x50
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	3314      	adds	r3, #20
 800350c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800350e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003510:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003512:	6a39      	ldr	r1, [r7, #32]
 8003514:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003516:	e841 2300 	strex	r3, r2, [r1]
 800351a:	61fb      	str	r3, [r7, #28]
   return(result);
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1e5      	bne.n	80034ee <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3760      	adds	r7, #96	@ 0x60
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	08003155 	.word	0x08003155
 8003530:	08003281 	.word	0x08003281
 8003534:	080032bd 	.word	0x080032bd

08003538 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003538:	b480      	push	{r7}
 800353a:	b089      	sub	sp, #36	@ 0x24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	330c      	adds	r3, #12
 8003546:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	e853 3f00 	ldrex	r3, [r3]
 800354e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003556:	61fb      	str	r3, [r7, #28]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	330c      	adds	r3, #12
 800355e:	69fa      	ldr	r2, [r7, #28]
 8003560:	61ba      	str	r2, [r7, #24]
 8003562:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003564:	6979      	ldr	r1, [r7, #20]
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	e841 2300 	strex	r3, r2, [r1]
 800356c:	613b      	str	r3, [r7, #16]
   return(result);
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1e5      	bne.n	8003540 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800357c:	bf00      	nop
 800357e:	3724      	adds	r7, #36	@ 0x24
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003588:	b480      	push	{r7}
 800358a:	b095      	sub	sp, #84	@ 0x54
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	330c      	adds	r3, #12
 8003596:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800359a:	e853 3f00 	ldrex	r3, [r3]
 800359e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	330c      	adds	r3, #12
 80035ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80035b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035b8:	e841 2300 	strex	r3, r2, [r1]
 80035bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1e5      	bne.n	8003590 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3314      	adds	r3, #20
 80035ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	e853 3f00 	ldrex	r3, [r3]
 80035d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f023 0301 	bic.w	r3, r3, #1
 80035da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3314      	adds	r3, #20
 80035e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035ec:	e841 2300 	strex	r3, r2, [r1]
 80035f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1e5      	bne.n	80035c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d119      	bne.n	8003634 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	330c      	adds	r3, #12
 8003606:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	e853 3f00 	ldrex	r3, [r3]
 800360e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f023 0310 	bic.w	r3, r3, #16
 8003616:	647b      	str	r3, [r7, #68]	@ 0x44
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	330c      	adds	r3, #12
 800361e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003620:	61ba      	str	r2, [r7, #24]
 8003622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003624:	6979      	ldr	r1, [r7, #20]
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	e841 2300 	strex	r3, r2, [r1]
 800362c:	613b      	str	r3, [r7, #16]
   return(result);
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e5      	bne.n	8003600 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003642:	bf00      	nop
 8003644:	3754      	adds	r7, #84	@ 0x54
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
	...

08003650 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003654:	b0c0      	sub	sp, #256	@ 0x100
 8003656:	af00      	add	r7, sp, #0
 8003658:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800365c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800366c:	68d9      	ldr	r1, [r3, #12]
 800366e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	ea40 0301 	orr.w	r3, r0, r1
 8003678:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800367a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	431a      	orrs	r2, r3
 8003688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	431a      	orrs	r2, r3
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800369c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80036a8:	f021 010c 	bic.w	r1, r1, #12
 80036ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80036b6:	430b      	orrs	r3, r1
 80036b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80036c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ca:	6999      	ldr	r1, [r3, #24]
 80036cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	ea40 0301 	orr.w	r3, r0, r1
 80036d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	4b8f      	ldr	r3, [pc, #572]	@ (800391c <UART_SetConfig+0x2cc>)
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d005      	beq.n	80036f0 <UART_SetConfig+0xa0>
 80036e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	4b8d      	ldr	r3, [pc, #564]	@ (8003920 <UART_SetConfig+0x2d0>)
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d104      	bne.n	80036fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036f0:	f7fe ff24 	bl	800253c <HAL_RCC_GetPCLK2Freq>
 80036f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80036f8:	e003      	b.n	8003702 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036fa:	f7fe ff0b 	bl	8002514 <HAL_RCC_GetPCLK1Freq>
 80036fe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800370c:	f040 810c 	bne.w	8003928 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003714:	2200      	movs	r2, #0
 8003716:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800371a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800371e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003722:	4622      	mov	r2, r4
 8003724:	462b      	mov	r3, r5
 8003726:	1891      	adds	r1, r2, r2
 8003728:	65b9      	str	r1, [r7, #88]	@ 0x58
 800372a:	415b      	adcs	r3, r3
 800372c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800372e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003732:	4621      	mov	r1, r4
 8003734:	eb12 0801 	adds.w	r8, r2, r1
 8003738:	4629      	mov	r1, r5
 800373a:	eb43 0901 	adc.w	r9, r3, r1
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800374a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800374e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003752:	4690      	mov	r8, r2
 8003754:	4699      	mov	r9, r3
 8003756:	4623      	mov	r3, r4
 8003758:	eb18 0303 	adds.w	r3, r8, r3
 800375c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003760:	462b      	mov	r3, r5
 8003762:	eb49 0303 	adc.w	r3, r9, r3
 8003766:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800376a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003776:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800377a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800377e:	460b      	mov	r3, r1
 8003780:	18db      	adds	r3, r3, r3
 8003782:	653b      	str	r3, [r7, #80]	@ 0x50
 8003784:	4613      	mov	r3, r2
 8003786:	eb42 0303 	adc.w	r3, r2, r3
 800378a:	657b      	str	r3, [r7, #84]	@ 0x54
 800378c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003790:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003794:	f7fc fd94 	bl	80002c0 <__aeabi_uldivmod>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	4b61      	ldr	r3, [pc, #388]	@ (8003924 <UART_SetConfig+0x2d4>)
 800379e:	fba3 2302 	umull	r2, r3, r3, r2
 80037a2:	095b      	lsrs	r3, r3, #5
 80037a4:	011c      	lsls	r4, r3, #4
 80037a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037aa:	2200      	movs	r2, #0
 80037ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80037b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80037b8:	4642      	mov	r2, r8
 80037ba:	464b      	mov	r3, r9
 80037bc:	1891      	adds	r1, r2, r2
 80037be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80037c0:	415b      	adcs	r3, r3
 80037c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80037c8:	4641      	mov	r1, r8
 80037ca:	eb12 0a01 	adds.w	sl, r2, r1
 80037ce:	4649      	mov	r1, r9
 80037d0:	eb43 0b01 	adc.w	fp, r3, r1
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037e8:	4692      	mov	sl, r2
 80037ea:	469b      	mov	fp, r3
 80037ec:	4643      	mov	r3, r8
 80037ee:	eb1a 0303 	adds.w	r3, sl, r3
 80037f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037f6:	464b      	mov	r3, r9
 80037f8:	eb4b 0303 	adc.w	r3, fp, r3
 80037fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800380c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003810:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003814:	460b      	mov	r3, r1
 8003816:	18db      	adds	r3, r3, r3
 8003818:	643b      	str	r3, [r7, #64]	@ 0x40
 800381a:	4613      	mov	r3, r2
 800381c:	eb42 0303 	adc.w	r3, r2, r3
 8003820:	647b      	str	r3, [r7, #68]	@ 0x44
 8003822:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003826:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800382a:	f7fc fd49 	bl	80002c0 <__aeabi_uldivmod>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	4611      	mov	r1, r2
 8003834:	4b3b      	ldr	r3, [pc, #236]	@ (8003924 <UART_SetConfig+0x2d4>)
 8003836:	fba3 2301 	umull	r2, r3, r3, r1
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	2264      	movs	r2, #100	@ 0x64
 800383e:	fb02 f303 	mul.w	r3, r2, r3
 8003842:	1acb      	subs	r3, r1, r3
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800384a:	4b36      	ldr	r3, [pc, #216]	@ (8003924 <UART_SetConfig+0x2d4>)
 800384c:	fba3 2302 	umull	r2, r3, r3, r2
 8003850:	095b      	lsrs	r3, r3, #5
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003858:	441c      	add	r4, r3
 800385a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800385e:	2200      	movs	r2, #0
 8003860:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003864:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003868:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800386c:	4642      	mov	r2, r8
 800386e:	464b      	mov	r3, r9
 8003870:	1891      	adds	r1, r2, r2
 8003872:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003874:	415b      	adcs	r3, r3
 8003876:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003878:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800387c:	4641      	mov	r1, r8
 800387e:	1851      	adds	r1, r2, r1
 8003880:	6339      	str	r1, [r7, #48]	@ 0x30
 8003882:	4649      	mov	r1, r9
 8003884:	414b      	adcs	r3, r1
 8003886:	637b      	str	r3, [r7, #52]	@ 0x34
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	f04f 0300 	mov.w	r3, #0
 8003890:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003894:	4659      	mov	r1, fp
 8003896:	00cb      	lsls	r3, r1, #3
 8003898:	4651      	mov	r1, sl
 800389a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800389e:	4651      	mov	r1, sl
 80038a0:	00ca      	lsls	r2, r1, #3
 80038a2:	4610      	mov	r0, r2
 80038a4:	4619      	mov	r1, r3
 80038a6:	4603      	mov	r3, r0
 80038a8:	4642      	mov	r2, r8
 80038aa:	189b      	adds	r3, r3, r2
 80038ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80038b0:	464b      	mov	r3, r9
 80038b2:	460a      	mov	r2, r1
 80038b4:	eb42 0303 	adc.w	r3, r2, r3
 80038b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80038c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80038cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80038d0:	460b      	mov	r3, r1
 80038d2:	18db      	adds	r3, r3, r3
 80038d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038d6:	4613      	mov	r3, r2
 80038d8:	eb42 0303 	adc.w	r3, r2, r3
 80038dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80038e6:	f7fc fceb 	bl	80002c0 <__aeabi_uldivmod>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003924 <UART_SetConfig+0x2d4>)
 80038f0:	fba3 1302 	umull	r1, r3, r3, r2
 80038f4:	095b      	lsrs	r3, r3, #5
 80038f6:	2164      	movs	r1, #100	@ 0x64
 80038f8:	fb01 f303 	mul.w	r3, r1, r3
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	3332      	adds	r3, #50	@ 0x32
 8003902:	4a08      	ldr	r2, [pc, #32]	@ (8003924 <UART_SetConfig+0x2d4>)
 8003904:	fba2 2303 	umull	r2, r3, r2, r3
 8003908:	095b      	lsrs	r3, r3, #5
 800390a:	f003 0207 	and.w	r2, r3, #7
 800390e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4422      	add	r2, r4
 8003916:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003918:	e106      	b.n	8003b28 <UART_SetConfig+0x4d8>
 800391a:	bf00      	nop
 800391c:	40011000 	.word	0x40011000
 8003920:	40011400 	.word	0x40011400
 8003924:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800392c:	2200      	movs	r2, #0
 800392e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003932:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003936:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800393a:	4642      	mov	r2, r8
 800393c:	464b      	mov	r3, r9
 800393e:	1891      	adds	r1, r2, r2
 8003940:	6239      	str	r1, [r7, #32]
 8003942:	415b      	adcs	r3, r3
 8003944:	627b      	str	r3, [r7, #36]	@ 0x24
 8003946:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800394a:	4641      	mov	r1, r8
 800394c:	1854      	adds	r4, r2, r1
 800394e:	4649      	mov	r1, r9
 8003950:	eb43 0501 	adc.w	r5, r3, r1
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	00eb      	lsls	r3, r5, #3
 800395e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003962:	00e2      	lsls	r2, r4, #3
 8003964:	4614      	mov	r4, r2
 8003966:	461d      	mov	r5, r3
 8003968:	4643      	mov	r3, r8
 800396a:	18e3      	adds	r3, r4, r3
 800396c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003970:	464b      	mov	r3, r9
 8003972:	eb45 0303 	adc.w	r3, r5, r3
 8003976:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800397a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003986:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003996:	4629      	mov	r1, r5
 8003998:	008b      	lsls	r3, r1, #2
 800399a:	4621      	mov	r1, r4
 800399c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039a0:	4621      	mov	r1, r4
 80039a2:	008a      	lsls	r2, r1, #2
 80039a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80039a8:	f7fc fc8a 	bl	80002c0 <__aeabi_uldivmod>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4b60      	ldr	r3, [pc, #384]	@ (8003b34 <UART_SetConfig+0x4e4>)
 80039b2:	fba3 2302 	umull	r2, r3, r3, r2
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	011c      	lsls	r4, r3, #4
 80039ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039be:	2200      	movs	r2, #0
 80039c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80039c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80039c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80039cc:	4642      	mov	r2, r8
 80039ce:	464b      	mov	r3, r9
 80039d0:	1891      	adds	r1, r2, r2
 80039d2:	61b9      	str	r1, [r7, #24]
 80039d4:	415b      	adcs	r3, r3
 80039d6:	61fb      	str	r3, [r7, #28]
 80039d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039dc:	4641      	mov	r1, r8
 80039de:	1851      	adds	r1, r2, r1
 80039e0:	6139      	str	r1, [r7, #16]
 80039e2:	4649      	mov	r1, r9
 80039e4:	414b      	adcs	r3, r1
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039f4:	4659      	mov	r1, fp
 80039f6:	00cb      	lsls	r3, r1, #3
 80039f8:	4651      	mov	r1, sl
 80039fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039fe:	4651      	mov	r1, sl
 8003a00:	00ca      	lsls	r2, r1, #3
 8003a02:	4610      	mov	r0, r2
 8003a04:	4619      	mov	r1, r3
 8003a06:	4603      	mov	r3, r0
 8003a08:	4642      	mov	r2, r8
 8003a0a:	189b      	adds	r3, r3, r2
 8003a0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a10:	464b      	mov	r3, r9
 8003a12:	460a      	mov	r2, r1
 8003a14:	eb42 0303 	adc.w	r3, r2, r3
 8003a18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a26:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	f04f 0300 	mov.w	r3, #0
 8003a30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003a34:	4649      	mov	r1, r9
 8003a36:	008b      	lsls	r3, r1, #2
 8003a38:	4641      	mov	r1, r8
 8003a3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a3e:	4641      	mov	r1, r8
 8003a40:	008a      	lsls	r2, r1, #2
 8003a42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003a46:	f7fc fc3b 	bl	80002c0 <__aeabi_uldivmod>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4611      	mov	r1, r2
 8003a50:	4b38      	ldr	r3, [pc, #224]	@ (8003b34 <UART_SetConfig+0x4e4>)
 8003a52:	fba3 2301 	umull	r2, r3, r3, r1
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	2264      	movs	r2, #100	@ 0x64
 8003a5a:	fb02 f303 	mul.w	r3, r2, r3
 8003a5e:	1acb      	subs	r3, r1, r3
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	3332      	adds	r3, #50	@ 0x32
 8003a64:	4a33      	ldr	r2, [pc, #204]	@ (8003b34 <UART_SetConfig+0x4e4>)
 8003a66:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a70:	441c      	add	r4, r3
 8003a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a76:	2200      	movs	r2, #0
 8003a78:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a7a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a7c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003a80:	4642      	mov	r2, r8
 8003a82:	464b      	mov	r3, r9
 8003a84:	1891      	adds	r1, r2, r2
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	415b      	adcs	r3, r3
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a90:	4641      	mov	r1, r8
 8003a92:	1851      	adds	r1, r2, r1
 8003a94:	6039      	str	r1, [r7, #0]
 8003a96:	4649      	mov	r1, r9
 8003a98:	414b      	adcs	r3, r1
 8003a9a:	607b      	str	r3, [r7, #4]
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003aa8:	4659      	mov	r1, fp
 8003aaa:	00cb      	lsls	r3, r1, #3
 8003aac:	4651      	mov	r1, sl
 8003aae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ab2:	4651      	mov	r1, sl
 8003ab4:	00ca      	lsls	r2, r1, #3
 8003ab6:	4610      	mov	r0, r2
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4603      	mov	r3, r0
 8003abc:	4642      	mov	r2, r8
 8003abe:	189b      	adds	r3, r3, r2
 8003ac0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ac2:	464b      	mov	r3, r9
 8003ac4:	460a      	mov	r2, r1
 8003ac6:	eb42 0303 	adc.w	r3, r2, r3
 8003aca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ad6:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003ae4:	4649      	mov	r1, r9
 8003ae6:	008b      	lsls	r3, r1, #2
 8003ae8:	4641      	mov	r1, r8
 8003aea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aee:	4641      	mov	r1, r8
 8003af0:	008a      	lsls	r2, r1, #2
 8003af2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003af6:	f7fc fbe3 	bl	80002c0 <__aeabi_uldivmod>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	4b0d      	ldr	r3, [pc, #52]	@ (8003b34 <UART_SetConfig+0x4e4>)
 8003b00:	fba3 1302 	umull	r1, r3, r3, r2
 8003b04:	095b      	lsrs	r3, r3, #5
 8003b06:	2164      	movs	r1, #100	@ 0x64
 8003b08:	fb01 f303 	mul.w	r3, r1, r3
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	3332      	adds	r3, #50	@ 0x32
 8003b12:	4a08      	ldr	r2, [pc, #32]	@ (8003b34 <UART_SetConfig+0x4e4>)
 8003b14:	fba2 2303 	umull	r2, r3, r2, r3
 8003b18:	095b      	lsrs	r3, r3, #5
 8003b1a:	f003 020f 	and.w	r2, r3, #15
 8003b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4422      	add	r2, r4
 8003b26:	609a      	str	r2, [r3, #8]
}
 8003b28:	bf00      	nop
 8003b2a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b34:	51eb851f 	.word	0x51eb851f

08003b38 <malloc>:
 8003b38:	4b02      	ldr	r3, [pc, #8]	@ (8003b44 <malloc+0xc>)
 8003b3a:	4601      	mov	r1, r0
 8003b3c:	6818      	ldr	r0, [r3, #0]
 8003b3e:	f000 b825 	b.w	8003b8c <_malloc_r>
 8003b42:	bf00      	nop
 8003b44:	2000000c 	.word	0x2000000c

08003b48 <sbrk_aligned>:
 8003b48:	b570      	push	{r4, r5, r6, lr}
 8003b4a:	4e0f      	ldr	r6, [pc, #60]	@ (8003b88 <sbrk_aligned+0x40>)
 8003b4c:	460c      	mov	r4, r1
 8003b4e:	6831      	ldr	r1, [r6, #0]
 8003b50:	4605      	mov	r5, r0
 8003b52:	b911      	cbnz	r1, 8003b5a <sbrk_aligned+0x12>
 8003b54:	f000 f986 	bl	8003e64 <_sbrk_r>
 8003b58:	6030      	str	r0, [r6, #0]
 8003b5a:	4621      	mov	r1, r4
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	f000 f981 	bl	8003e64 <_sbrk_r>
 8003b62:	1c43      	adds	r3, r0, #1
 8003b64:	d103      	bne.n	8003b6e <sbrk_aligned+0x26>
 8003b66:	f04f 34ff 	mov.w	r4, #4294967295
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	bd70      	pop	{r4, r5, r6, pc}
 8003b6e:	1cc4      	adds	r4, r0, #3
 8003b70:	f024 0403 	bic.w	r4, r4, #3
 8003b74:	42a0      	cmp	r0, r4
 8003b76:	d0f8      	beq.n	8003b6a <sbrk_aligned+0x22>
 8003b78:	1a21      	subs	r1, r4, r0
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	f000 f972 	bl	8003e64 <_sbrk_r>
 8003b80:	3001      	adds	r0, #1
 8003b82:	d1f2      	bne.n	8003b6a <sbrk_aligned+0x22>
 8003b84:	e7ef      	b.n	8003b66 <sbrk_aligned+0x1e>
 8003b86:	bf00      	nop
 8003b88:	2000058c 	.word	0x2000058c

08003b8c <_malloc_r>:
 8003b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b90:	1ccd      	adds	r5, r1, #3
 8003b92:	f025 0503 	bic.w	r5, r5, #3
 8003b96:	3508      	adds	r5, #8
 8003b98:	2d0c      	cmp	r5, #12
 8003b9a:	bf38      	it	cc
 8003b9c:	250c      	movcc	r5, #12
 8003b9e:	2d00      	cmp	r5, #0
 8003ba0:	4606      	mov	r6, r0
 8003ba2:	db01      	blt.n	8003ba8 <_malloc_r+0x1c>
 8003ba4:	42a9      	cmp	r1, r5
 8003ba6:	d904      	bls.n	8003bb2 <_malloc_r+0x26>
 8003ba8:	230c      	movs	r3, #12
 8003baa:	6033      	str	r3, [r6, #0]
 8003bac:	2000      	movs	r0, #0
 8003bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c88 <_malloc_r+0xfc>
 8003bb6:	f000 f869 	bl	8003c8c <__malloc_lock>
 8003bba:	f8d8 3000 	ldr.w	r3, [r8]
 8003bbe:	461c      	mov	r4, r3
 8003bc0:	bb44      	cbnz	r4, 8003c14 <_malloc_r+0x88>
 8003bc2:	4629      	mov	r1, r5
 8003bc4:	4630      	mov	r0, r6
 8003bc6:	f7ff ffbf 	bl	8003b48 <sbrk_aligned>
 8003bca:	1c43      	adds	r3, r0, #1
 8003bcc:	4604      	mov	r4, r0
 8003bce:	d158      	bne.n	8003c82 <_malloc_r+0xf6>
 8003bd0:	f8d8 4000 	ldr.w	r4, [r8]
 8003bd4:	4627      	mov	r7, r4
 8003bd6:	2f00      	cmp	r7, #0
 8003bd8:	d143      	bne.n	8003c62 <_malloc_r+0xd6>
 8003bda:	2c00      	cmp	r4, #0
 8003bdc:	d04b      	beq.n	8003c76 <_malloc_r+0xea>
 8003bde:	6823      	ldr	r3, [r4, #0]
 8003be0:	4639      	mov	r1, r7
 8003be2:	4630      	mov	r0, r6
 8003be4:	eb04 0903 	add.w	r9, r4, r3
 8003be8:	f000 f93c 	bl	8003e64 <_sbrk_r>
 8003bec:	4581      	cmp	r9, r0
 8003bee:	d142      	bne.n	8003c76 <_malloc_r+0xea>
 8003bf0:	6821      	ldr	r1, [r4, #0]
 8003bf2:	1a6d      	subs	r5, r5, r1
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	4630      	mov	r0, r6
 8003bf8:	f7ff ffa6 	bl	8003b48 <sbrk_aligned>
 8003bfc:	3001      	adds	r0, #1
 8003bfe:	d03a      	beq.n	8003c76 <_malloc_r+0xea>
 8003c00:	6823      	ldr	r3, [r4, #0]
 8003c02:	442b      	add	r3, r5
 8003c04:	6023      	str	r3, [r4, #0]
 8003c06:	f8d8 3000 	ldr.w	r3, [r8]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	bb62      	cbnz	r2, 8003c68 <_malloc_r+0xdc>
 8003c0e:	f8c8 7000 	str.w	r7, [r8]
 8003c12:	e00f      	b.n	8003c34 <_malloc_r+0xa8>
 8003c14:	6822      	ldr	r2, [r4, #0]
 8003c16:	1b52      	subs	r2, r2, r5
 8003c18:	d420      	bmi.n	8003c5c <_malloc_r+0xd0>
 8003c1a:	2a0b      	cmp	r2, #11
 8003c1c:	d917      	bls.n	8003c4e <_malloc_r+0xc2>
 8003c1e:	1961      	adds	r1, r4, r5
 8003c20:	42a3      	cmp	r3, r4
 8003c22:	6025      	str	r5, [r4, #0]
 8003c24:	bf18      	it	ne
 8003c26:	6059      	strne	r1, [r3, #4]
 8003c28:	6863      	ldr	r3, [r4, #4]
 8003c2a:	bf08      	it	eq
 8003c2c:	f8c8 1000 	streq.w	r1, [r8]
 8003c30:	5162      	str	r2, [r4, r5]
 8003c32:	604b      	str	r3, [r1, #4]
 8003c34:	4630      	mov	r0, r6
 8003c36:	f000 f82f 	bl	8003c98 <__malloc_unlock>
 8003c3a:	f104 000b 	add.w	r0, r4, #11
 8003c3e:	1d23      	adds	r3, r4, #4
 8003c40:	f020 0007 	bic.w	r0, r0, #7
 8003c44:	1ac2      	subs	r2, r0, r3
 8003c46:	bf1c      	itt	ne
 8003c48:	1a1b      	subne	r3, r3, r0
 8003c4a:	50a3      	strne	r3, [r4, r2]
 8003c4c:	e7af      	b.n	8003bae <_malloc_r+0x22>
 8003c4e:	6862      	ldr	r2, [r4, #4]
 8003c50:	42a3      	cmp	r3, r4
 8003c52:	bf0c      	ite	eq
 8003c54:	f8c8 2000 	streq.w	r2, [r8]
 8003c58:	605a      	strne	r2, [r3, #4]
 8003c5a:	e7eb      	b.n	8003c34 <_malloc_r+0xa8>
 8003c5c:	4623      	mov	r3, r4
 8003c5e:	6864      	ldr	r4, [r4, #4]
 8003c60:	e7ae      	b.n	8003bc0 <_malloc_r+0x34>
 8003c62:	463c      	mov	r4, r7
 8003c64:	687f      	ldr	r7, [r7, #4]
 8003c66:	e7b6      	b.n	8003bd6 <_malloc_r+0x4a>
 8003c68:	461a      	mov	r2, r3
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	42a3      	cmp	r3, r4
 8003c6e:	d1fb      	bne.n	8003c68 <_malloc_r+0xdc>
 8003c70:	2300      	movs	r3, #0
 8003c72:	6053      	str	r3, [r2, #4]
 8003c74:	e7de      	b.n	8003c34 <_malloc_r+0xa8>
 8003c76:	230c      	movs	r3, #12
 8003c78:	6033      	str	r3, [r6, #0]
 8003c7a:	4630      	mov	r0, r6
 8003c7c:	f000 f80c 	bl	8003c98 <__malloc_unlock>
 8003c80:	e794      	b.n	8003bac <_malloc_r+0x20>
 8003c82:	6005      	str	r5, [r0, #0]
 8003c84:	e7d6      	b.n	8003c34 <_malloc_r+0xa8>
 8003c86:	bf00      	nop
 8003c88:	20000590 	.word	0x20000590

08003c8c <__malloc_lock>:
 8003c8c:	4801      	ldr	r0, [pc, #4]	@ (8003c94 <__malloc_lock+0x8>)
 8003c8e:	f000 b923 	b.w	8003ed8 <__retarget_lock_acquire_recursive>
 8003c92:	bf00      	nop
 8003c94:	200006d0 	.word	0x200006d0

08003c98 <__malloc_unlock>:
 8003c98:	4801      	ldr	r0, [pc, #4]	@ (8003ca0 <__malloc_unlock+0x8>)
 8003c9a:	f000 b91e 	b.w	8003eda <__retarget_lock_release_recursive>
 8003c9e:	bf00      	nop
 8003ca0:	200006d0 	.word	0x200006d0

08003ca4 <_strtol_l.constprop.0>:
 8003ca4:	2b24      	cmp	r3, #36	@ 0x24
 8003ca6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003caa:	4686      	mov	lr, r0
 8003cac:	4690      	mov	r8, r2
 8003cae:	d801      	bhi.n	8003cb4 <_strtol_l.constprop.0+0x10>
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d106      	bne.n	8003cc2 <_strtol_l.constprop.0+0x1e>
 8003cb4:	f000 f8e6 	bl	8003e84 <__errno>
 8003cb8:	2316      	movs	r3, #22
 8003cba:	6003      	str	r3, [r0, #0]
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cc2:	4834      	ldr	r0, [pc, #208]	@ (8003d94 <_strtol_l.constprop.0+0xf0>)
 8003cc4:	460d      	mov	r5, r1
 8003cc6:	462a      	mov	r2, r5
 8003cc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ccc:	5d06      	ldrb	r6, [r0, r4]
 8003cce:	f016 0608 	ands.w	r6, r6, #8
 8003cd2:	d1f8      	bne.n	8003cc6 <_strtol_l.constprop.0+0x22>
 8003cd4:	2c2d      	cmp	r4, #45	@ 0x2d
 8003cd6:	d12d      	bne.n	8003d34 <_strtol_l.constprop.0+0x90>
 8003cd8:	782c      	ldrb	r4, [r5, #0]
 8003cda:	2601      	movs	r6, #1
 8003cdc:	1c95      	adds	r5, r2, #2
 8003cde:	f033 0210 	bics.w	r2, r3, #16
 8003ce2:	d109      	bne.n	8003cf8 <_strtol_l.constprop.0+0x54>
 8003ce4:	2c30      	cmp	r4, #48	@ 0x30
 8003ce6:	d12a      	bne.n	8003d3e <_strtol_l.constprop.0+0x9a>
 8003ce8:	782a      	ldrb	r2, [r5, #0]
 8003cea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003cee:	2a58      	cmp	r2, #88	@ 0x58
 8003cf0:	d125      	bne.n	8003d3e <_strtol_l.constprop.0+0x9a>
 8003cf2:	786c      	ldrb	r4, [r5, #1]
 8003cf4:	2310      	movs	r3, #16
 8003cf6:	3502      	adds	r5, #2
 8003cf8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003cfc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003d00:	2200      	movs	r2, #0
 8003d02:	fbbc f9f3 	udiv	r9, ip, r3
 8003d06:	4610      	mov	r0, r2
 8003d08:	fb03 ca19 	mls	sl, r3, r9, ip
 8003d0c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003d10:	2f09      	cmp	r7, #9
 8003d12:	d81b      	bhi.n	8003d4c <_strtol_l.constprop.0+0xa8>
 8003d14:	463c      	mov	r4, r7
 8003d16:	42a3      	cmp	r3, r4
 8003d18:	dd27      	ble.n	8003d6a <_strtol_l.constprop.0+0xc6>
 8003d1a:	1c57      	adds	r7, r2, #1
 8003d1c:	d007      	beq.n	8003d2e <_strtol_l.constprop.0+0x8a>
 8003d1e:	4581      	cmp	r9, r0
 8003d20:	d320      	bcc.n	8003d64 <_strtol_l.constprop.0+0xc0>
 8003d22:	d101      	bne.n	8003d28 <_strtol_l.constprop.0+0x84>
 8003d24:	45a2      	cmp	sl, r4
 8003d26:	db1d      	blt.n	8003d64 <_strtol_l.constprop.0+0xc0>
 8003d28:	fb00 4003 	mla	r0, r0, r3, r4
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003d32:	e7eb      	b.n	8003d0c <_strtol_l.constprop.0+0x68>
 8003d34:	2c2b      	cmp	r4, #43	@ 0x2b
 8003d36:	bf04      	itt	eq
 8003d38:	782c      	ldrbeq	r4, [r5, #0]
 8003d3a:	1c95      	addeq	r5, r2, #2
 8003d3c:	e7cf      	b.n	8003cde <_strtol_l.constprop.0+0x3a>
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1da      	bne.n	8003cf8 <_strtol_l.constprop.0+0x54>
 8003d42:	2c30      	cmp	r4, #48	@ 0x30
 8003d44:	bf0c      	ite	eq
 8003d46:	2308      	moveq	r3, #8
 8003d48:	230a      	movne	r3, #10
 8003d4a:	e7d5      	b.n	8003cf8 <_strtol_l.constprop.0+0x54>
 8003d4c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003d50:	2f19      	cmp	r7, #25
 8003d52:	d801      	bhi.n	8003d58 <_strtol_l.constprop.0+0xb4>
 8003d54:	3c37      	subs	r4, #55	@ 0x37
 8003d56:	e7de      	b.n	8003d16 <_strtol_l.constprop.0+0x72>
 8003d58:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003d5c:	2f19      	cmp	r7, #25
 8003d5e:	d804      	bhi.n	8003d6a <_strtol_l.constprop.0+0xc6>
 8003d60:	3c57      	subs	r4, #87	@ 0x57
 8003d62:	e7d8      	b.n	8003d16 <_strtol_l.constprop.0+0x72>
 8003d64:	f04f 32ff 	mov.w	r2, #4294967295
 8003d68:	e7e1      	b.n	8003d2e <_strtol_l.constprop.0+0x8a>
 8003d6a:	1c53      	adds	r3, r2, #1
 8003d6c:	d108      	bne.n	8003d80 <_strtol_l.constprop.0+0xdc>
 8003d6e:	2322      	movs	r3, #34	@ 0x22
 8003d70:	f8ce 3000 	str.w	r3, [lr]
 8003d74:	4660      	mov	r0, ip
 8003d76:	f1b8 0f00 	cmp.w	r8, #0
 8003d7a:	d0a0      	beq.n	8003cbe <_strtol_l.constprop.0+0x1a>
 8003d7c:	1e69      	subs	r1, r5, #1
 8003d7e:	e006      	b.n	8003d8e <_strtol_l.constprop.0+0xea>
 8003d80:	b106      	cbz	r6, 8003d84 <_strtol_l.constprop.0+0xe0>
 8003d82:	4240      	negs	r0, r0
 8003d84:	f1b8 0f00 	cmp.w	r8, #0
 8003d88:	d099      	beq.n	8003cbe <_strtol_l.constprop.0+0x1a>
 8003d8a:	2a00      	cmp	r2, #0
 8003d8c:	d1f6      	bne.n	8003d7c <_strtol_l.constprop.0+0xd8>
 8003d8e:	f8c8 1000 	str.w	r1, [r8]
 8003d92:	e794      	b.n	8003cbe <_strtol_l.constprop.0+0x1a>
 8003d94:	0800472d 	.word	0x0800472d

08003d98 <strtol>:
 8003d98:	4613      	mov	r3, r2
 8003d9a:	460a      	mov	r2, r1
 8003d9c:	4601      	mov	r1, r0
 8003d9e:	4802      	ldr	r0, [pc, #8]	@ (8003da8 <strtol+0x10>)
 8003da0:	6800      	ldr	r0, [r0, #0]
 8003da2:	f7ff bf7f 	b.w	8003ca4 <_strtol_l.constprop.0>
 8003da6:	bf00      	nop
 8003da8:	2000000c 	.word	0x2000000c

08003dac <sniprintf>:
 8003dac:	b40c      	push	{r2, r3}
 8003dae:	b530      	push	{r4, r5, lr}
 8003db0:	4b17      	ldr	r3, [pc, #92]	@ (8003e10 <sniprintf+0x64>)
 8003db2:	1e0c      	subs	r4, r1, #0
 8003db4:	681d      	ldr	r5, [r3, #0]
 8003db6:	b09d      	sub	sp, #116	@ 0x74
 8003db8:	da08      	bge.n	8003dcc <sniprintf+0x20>
 8003dba:	238b      	movs	r3, #139	@ 0x8b
 8003dbc:	602b      	str	r3, [r5, #0]
 8003dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc2:	b01d      	add	sp, #116	@ 0x74
 8003dc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003dc8:	b002      	add	sp, #8
 8003dca:	4770      	bx	lr
 8003dcc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003dd0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003dd4:	bf14      	ite	ne
 8003dd6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003dda:	4623      	moveq	r3, r4
 8003ddc:	9304      	str	r3, [sp, #16]
 8003dde:	9307      	str	r3, [sp, #28]
 8003de0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003de4:	9002      	str	r0, [sp, #8]
 8003de6:	9006      	str	r0, [sp, #24]
 8003de8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003dec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003dee:	ab21      	add	r3, sp, #132	@ 0x84
 8003df0:	a902      	add	r1, sp, #8
 8003df2:	4628      	mov	r0, r5
 8003df4:	9301      	str	r3, [sp, #4]
 8003df6:	f000 f925 	bl	8004044 <_svfiprintf_r>
 8003dfa:	1c43      	adds	r3, r0, #1
 8003dfc:	bfbc      	itt	lt
 8003dfe:	238b      	movlt	r3, #139	@ 0x8b
 8003e00:	602b      	strlt	r3, [r5, #0]
 8003e02:	2c00      	cmp	r4, #0
 8003e04:	d0dd      	beq.n	8003dc2 <sniprintf+0x16>
 8003e06:	9b02      	ldr	r3, [sp, #8]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	701a      	strb	r2, [r3, #0]
 8003e0c:	e7d9      	b.n	8003dc2 <sniprintf+0x16>
 8003e0e:	bf00      	nop
 8003e10:	2000000c 	.word	0x2000000c

08003e14 <siprintf>:
 8003e14:	b40e      	push	{r1, r2, r3}
 8003e16:	b500      	push	{lr}
 8003e18:	b09c      	sub	sp, #112	@ 0x70
 8003e1a:	ab1d      	add	r3, sp, #116	@ 0x74
 8003e1c:	9002      	str	r0, [sp, #8]
 8003e1e:	9006      	str	r0, [sp, #24]
 8003e20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003e24:	4809      	ldr	r0, [pc, #36]	@ (8003e4c <siprintf+0x38>)
 8003e26:	9107      	str	r1, [sp, #28]
 8003e28:	9104      	str	r1, [sp, #16]
 8003e2a:	4909      	ldr	r1, [pc, #36]	@ (8003e50 <siprintf+0x3c>)
 8003e2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e30:	9105      	str	r1, [sp, #20]
 8003e32:	6800      	ldr	r0, [r0, #0]
 8003e34:	9301      	str	r3, [sp, #4]
 8003e36:	a902      	add	r1, sp, #8
 8003e38:	f000 f904 	bl	8004044 <_svfiprintf_r>
 8003e3c:	9b02      	ldr	r3, [sp, #8]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	701a      	strb	r2, [r3, #0]
 8003e42:	b01c      	add	sp, #112	@ 0x70
 8003e44:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e48:	b003      	add	sp, #12
 8003e4a:	4770      	bx	lr
 8003e4c:	2000000c 	.word	0x2000000c
 8003e50:	ffff0208 	.word	0xffff0208

08003e54 <memset>:
 8003e54:	4402      	add	r2, r0
 8003e56:	4603      	mov	r3, r0
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d100      	bne.n	8003e5e <memset+0xa>
 8003e5c:	4770      	bx	lr
 8003e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e62:	e7f9      	b.n	8003e58 <memset+0x4>

08003e64 <_sbrk_r>:
 8003e64:	b538      	push	{r3, r4, r5, lr}
 8003e66:	4d06      	ldr	r5, [pc, #24]	@ (8003e80 <_sbrk_r+0x1c>)
 8003e68:	2300      	movs	r3, #0
 8003e6a:	4604      	mov	r4, r0
 8003e6c:	4608      	mov	r0, r1
 8003e6e:	602b      	str	r3, [r5, #0]
 8003e70:	f7fd fb26 	bl	80014c0 <_sbrk>
 8003e74:	1c43      	adds	r3, r0, #1
 8003e76:	d102      	bne.n	8003e7e <_sbrk_r+0x1a>
 8003e78:	682b      	ldr	r3, [r5, #0]
 8003e7a:	b103      	cbz	r3, 8003e7e <_sbrk_r+0x1a>
 8003e7c:	6023      	str	r3, [r4, #0]
 8003e7e:	bd38      	pop	{r3, r4, r5, pc}
 8003e80:	200006cc 	.word	0x200006cc

08003e84 <__errno>:
 8003e84:	4b01      	ldr	r3, [pc, #4]	@ (8003e8c <__errno+0x8>)
 8003e86:	6818      	ldr	r0, [r3, #0]
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	2000000c 	.word	0x2000000c

08003e90 <__libc_init_array>:
 8003e90:	b570      	push	{r4, r5, r6, lr}
 8003e92:	4d0d      	ldr	r5, [pc, #52]	@ (8003ec8 <__libc_init_array+0x38>)
 8003e94:	4c0d      	ldr	r4, [pc, #52]	@ (8003ecc <__libc_init_array+0x3c>)
 8003e96:	1b64      	subs	r4, r4, r5
 8003e98:	10a4      	asrs	r4, r4, #2
 8003e9a:	2600      	movs	r6, #0
 8003e9c:	42a6      	cmp	r6, r4
 8003e9e:	d109      	bne.n	8003eb4 <__libc_init_array+0x24>
 8003ea0:	4d0b      	ldr	r5, [pc, #44]	@ (8003ed0 <__libc_init_array+0x40>)
 8003ea2:	4c0c      	ldr	r4, [pc, #48]	@ (8003ed4 <__libc_init_array+0x44>)
 8003ea4:	f000 fba8 	bl	80045f8 <_init>
 8003ea8:	1b64      	subs	r4, r4, r5
 8003eaa:	10a4      	asrs	r4, r4, #2
 8003eac:	2600      	movs	r6, #0
 8003eae:	42a6      	cmp	r6, r4
 8003eb0:	d105      	bne.n	8003ebe <__libc_init_array+0x2e>
 8003eb2:	bd70      	pop	{r4, r5, r6, pc}
 8003eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eb8:	4798      	blx	r3
 8003eba:	3601      	adds	r6, #1
 8003ebc:	e7ee      	b.n	8003e9c <__libc_init_array+0xc>
 8003ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec2:	4798      	blx	r3
 8003ec4:	3601      	adds	r6, #1
 8003ec6:	e7f2      	b.n	8003eae <__libc_init_array+0x1e>
 8003ec8:	08004868 	.word	0x08004868
 8003ecc:	08004868 	.word	0x08004868
 8003ed0:	08004868 	.word	0x08004868
 8003ed4:	0800486c 	.word	0x0800486c

08003ed8 <__retarget_lock_acquire_recursive>:
 8003ed8:	4770      	bx	lr

08003eda <__retarget_lock_release_recursive>:
 8003eda:	4770      	bx	lr

08003edc <memcpy>:
 8003edc:	440a      	add	r2, r1
 8003ede:	4291      	cmp	r1, r2
 8003ee0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ee4:	d100      	bne.n	8003ee8 <memcpy+0xc>
 8003ee6:	4770      	bx	lr
 8003ee8:	b510      	push	{r4, lr}
 8003eea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003eee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ef2:	4291      	cmp	r1, r2
 8003ef4:	d1f9      	bne.n	8003eea <memcpy+0xe>
 8003ef6:	bd10      	pop	{r4, pc}

08003ef8 <_free_r>:
 8003ef8:	b538      	push	{r3, r4, r5, lr}
 8003efa:	4605      	mov	r5, r0
 8003efc:	2900      	cmp	r1, #0
 8003efe:	d041      	beq.n	8003f84 <_free_r+0x8c>
 8003f00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f04:	1f0c      	subs	r4, r1, #4
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	bfb8      	it	lt
 8003f0a:	18e4      	addlt	r4, r4, r3
 8003f0c:	f7ff febe 	bl	8003c8c <__malloc_lock>
 8003f10:	4a1d      	ldr	r2, [pc, #116]	@ (8003f88 <_free_r+0x90>)
 8003f12:	6813      	ldr	r3, [r2, #0]
 8003f14:	b933      	cbnz	r3, 8003f24 <_free_r+0x2c>
 8003f16:	6063      	str	r3, [r4, #4]
 8003f18:	6014      	str	r4, [r2, #0]
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f20:	f7ff beba 	b.w	8003c98 <__malloc_unlock>
 8003f24:	42a3      	cmp	r3, r4
 8003f26:	d908      	bls.n	8003f3a <_free_r+0x42>
 8003f28:	6820      	ldr	r0, [r4, #0]
 8003f2a:	1821      	adds	r1, r4, r0
 8003f2c:	428b      	cmp	r3, r1
 8003f2e:	bf01      	itttt	eq
 8003f30:	6819      	ldreq	r1, [r3, #0]
 8003f32:	685b      	ldreq	r3, [r3, #4]
 8003f34:	1809      	addeq	r1, r1, r0
 8003f36:	6021      	streq	r1, [r4, #0]
 8003f38:	e7ed      	b.n	8003f16 <_free_r+0x1e>
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	b10b      	cbz	r3, 8003f44 <_free_r+0x4c>
 8003f40:	42a3      	cmp	r3, r4
 8003f42:	d9fa      	bls.n	8003f3a <_free_r+0x42>
 8003f44:	6811      	ldr	r1, [r2, #0]
 8003f46:	1850      	adds	r0, r2, r1
 8003f48:	42a0      	cmp	r0, r4
 8003f4a:	d10b      	bne.n	8003f64 <_free_r+0x6c>
 8003f4c:	6820      	ldr	r0, [r4, #0]
 8003f4e:	4401      	add	r1, r0
 8003f50:	1850      	adds	r0, r2, r1
 8003f52:	4283      	cmp	r3, r0
 8003f54:	6011      	str	r1, [r2, #0]
 8003f56:	d1e0      	bne.n	8003f1a <_free_r+0x22>
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	6053      	str	r3, [r2, #4]
 8003f5e:	4408      	add	r0, r1
 8003f60:	6010      	str	r0, [r2, #0]
 8003f62:	e7da      	b.n	8003f1a <_free_r+0x22>
 8003f64:	d902      	bls.n	8003f6c <_free_r+0x74>
 8003f66:	230c      	movs	r3, #12
 8003f68:	602b      	str	r3, [r5, #0]
 8003f6a:	e7d6      	b.n	8003f1a <_free_r+0x22>
 8003f6c:	6820      	ldr	r0, [r4, #0]
 8003f6e:	1821      	adds	r1, r4, r0
 8003f70:	428b      	cmp	r3, r1
 8003f72:	bf04      	itt	eq
 8003f74:	6819      	ldreq	r1, [r3, #0]
 8003f76:	685b      	ldreq	r3, [r3, #4]
 8003f78:	6063      	str	r3, [r4, #4]
 8003f7a:	bf04      	itt	eq
 8003f7c:	1809      	addeq	r1, r1, r0
 8003f7e:	6021      	streq	r1, [r4, #0]
 8003f80:	6054      	str	r4, [r2, #4]
 8003f82:	e7ca      	b.n	8003f1a <_free_r+0x22>
 8003f84:	bd38      	pop	{r3, r4, r5, pc}
 8003f86:	bf00      	nop
 8003f88:	20000590 	.word	0x20000590

08003f8c <__ssputs_r>:
 8003f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f90:	688e      	ldr	r6, [r1, #8]
 8003f92:	461f      	mov	r7, r3
 8003f94:	42be      	cmp	r6, r7
 8003f96:	680b      	ldr	r3, [r1, #0]
 8003f98:	4682      	mov	sl, r0
 8003f9a:	460c      	mov	r4, r1
 8003f9c:	4690      	mov	r8, r2
 8003f9e:	d82d      	bhi.n	8003ffc <__ssputs_r+0x70>
 8003fa0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003fa4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003fa8:	d026      	beq.n	8003ff8 <__ssputs_r+0x6c>
 8003faa:	6965      	ldr	r5, [r4, #20]
 8003fac:	6909      	ldr	r1, [r1, #16]
 8003fae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fb2:	eba3 0901 	sub.w	r9, r3, r1
 8003fb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003fba:	1c7b      	adds	r3, r7, #1
 8003fbc:	444b      	add	r3, r9
 8003fbe:	106d      	asrs	r5, r5, #1
 8003fc0:	429d      	cmp	r5, r3
 8003fc2:	bf38      	it	cc
 8003fc4:	461d      	movcc	r5, r3
 8003fc6:	0553      	lsls	r3, r2, #21
 8003fc8:	d527      	bpl.n	800401a <__ssputs_r+0x8e>
 8003fca:	4629      	mov	r1, r5
 8003fcc:	f7ff fdde 	bl	8003b8c <_malloc_r>
 8003fd0:	4606      	mov	r6, r0
 8003fd2:	b360      	cbz	r0, 800402e <__ssputs_r+0xa2>
 8003fd4:	6921      	ldr	r1, [r4, #16]
 8003fd6:	464a      	mov	r2, r9
 8003fd8:	f7ff ff80 	bl	8003edc <memcpy>
 8003fdc:	89a3      	ldrh	r3, [r4, #12]
 8003fde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003fe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fe6:	81a3      	strh	r3, [r4, #12]
 8003fe8:	6126      	str	r6, [r4, #16]
 8003fea:	6165      	str	r5, [r4, #20]
 8003fec:	444e      	add	r6, r9
 8003fee:	eba5 0509 	sub.w	r5, r5, r9
 8003ff2:	6026      	str	r6, [r4, #0]
 8003ff4:	60a5      	str	r5, [r4, #8]
 8003ff6:	463e      	mov	r6, r7
 8003ff8:	42be      	cmp	r6, r7
 8003ffa:	d900      	bls.n	8003ffe <__ssputs_r+0x72>
 8003ffc:	463e      	mov	r6, r7
 8003ffe:	6820      	ldr	r0, [r4, #0]
 8004000:	4632      	mov	r2, r6
 8004002:	4641      	mov	r1, r8
 8004004:	f000 faa8 	bl	8004558 <memmove>
 8004008:	68a3      	ldr	r3, [r4, #8]
 800400a:	1b9b      	subs	r3, r3, r6
 800400c:	60a3      	str	r3, [r4, #8]
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	4433      	add	r3, r6
 8004012:	6023      	str	r3, [r4, #0]
 8004014:	2000      	movs	r0, #0
 8004016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800401a:	462a      	mov	r2, r5
 800401c:	f000 fab6 	bl	800458c <_realloc_r>
 8004020:	4606      	mov	r6, r0
 8004022:	2800      	cmp	r0, #0
 8004024:	d1e0      	bne.n	8003fe8 <__ssputs_r+0x5c>
 8004026:	6921      	ldr	r1, [r4, #16]
 8004028:	4650      	mov	r0, sl
 800402a:	f7ff ff65 	bl	8003ef8 <_free_r>
 800402e:	230c      	movs	r3, #12
 8004030:	f8ca 3000 	str.w	r3, [sl]
 8004034:	89a3      	ldrh	r3, [r4, #12]
 8004036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800403a:	81a3      	strh	r3, [r4, #12]
 800403c:	f04f 30ff 	mov.w	r0, #4294967295
 8004040:	e7e9      	b.n	8004016 <__ssputs_r+0x8a>
	...

08004044 <_svfiprintf_r>:
 8004044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004048:	4698      	mov	r8, r3
 800404a:	898b      	ldrh	r3, [r1, #12]
 800404c:	061b      	lsls	r3, r3, #24
 800404e:	b09d      	sub	sp, #116	@ 0x74
 8004050:	4607      	mov	r7, r0
 8004052:	460d      	mov	r5, r1
 8004054:	4614      	mov	r4, r2
 8004056:	d510      	bpl.n	800407a <_svfiprintf_r+0x36>
 8004058:	690b      	ldr	r3, [r1, #16]
 800405a:	b973      	cbnz	r3, 800407a <_svfiprintf_r+0x36>
 800405c:	2140      	movs	r1, #64	@ 0x40
 800405e:	f7ff fd95 	bl	8003b8c <_malloc_r>
 8004062:	6028      	str	r0, [r5, #0]
 8004064:	6128      	str	r0, [r5, #16]
 8004066:	b930      	cbnz	r0, 8004076 <_svfiprintf_r+0x32>
 8004068:	230c      	movs	r3, #12
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	f04f 30ff 	mov.w	r0, #4294967295
 8004070:	b01d      	add	sp, #116	@ 0x74
 8004072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004076:	2340      	movs	r3, #64	@ 0x40
 8004078:	616b      	str	r3, [r5, #20]
 800407a:	2300      	movs	r3, #0
 800407c:	9309      	str	r3, [sp, #36]	@ 0x24
 800407e:	2320      	movs	r3, #32
 8004080:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004084:	f8cd 800c 	str.w	r8, [sp, #12]
 8004088:	2330      	movs	r3, #48	@ 0x30
 800408a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004228 <_svfiprintf_r+0x1e4>
 800408e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004092:	f04f 0901 	mov.w	r9, #1
 8004096:	4623      	mov	r3, r4
 8004098:	469a      	mov	sl, r3
 800409a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800409e:	b10a      	cbz	r2, 80040a4 <_svfiprintf_r+0x60>
 80040a0:	2a25      	cmp	r2, #37	@ 0x25
 80040a2:	d1f9      	bne.n	8004098 <_svfiprintf_r+0x54>
 80040a4:	ebba 0b04 	subs.w	fp, sl, r4
 80040a8:	d00b      	beq.n	80040c2 <_svfiprintf_r+0x7e>
 80040aa:	465b      	mov	r3, fp
 80040ac:	4622      	mov	r2, r4
 80040ae:	4629      	mov	r1, r5
 80040b0:	4638      	mov	r0, r7
 80040b2:	f7ff ff6b 	bl	8003f8c <__ssputs_r>
 80040b6:	3001      	adds	r0, #1
 80040b8:	f000 80a7 	beq.w	800420a <_svfiprintf_r+0x1c6>
 80040bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80040be:	445a      	add	r2, fp
 80040c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80040c2:	f89a 3000 	ldrb.w	r3, [sl]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 809f 	beq.w	800420a <_svfiprintf_r+0x1c6>
 80040cc:	2300      	movs	r3, #0
 80040ce:	f04f 32ff 	mov.w	r2, #4294967295
 80040d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040d6:	f10a 0a01 	add.w	sl, sl, #1
 80040da:	9304      	str	r3, [sp, #16]
 80040dc:	9307      	str	r3, [sp, #28]
 80040de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80040e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80040e4:	4654      	mov	r4, sl
 80040e6:	2205      	movs	r2, #5
 80040e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040ec:	484e      	ldr	r0, [pc, #312]	@ (8004228 <_svfiprintf_r+0x1e4>)
 80040ee:	f7fc f897 	bl	8000220 <memchr>
 80040f2:	9a04      	ldr	r2, [sp, #16]
 80040f4:	b9d8      	cbnz	r0, 800412e <_svfiprintf_r+0xea>
 80040f6:	06d0      	lsls	r0, r2, #27
 80040f8:	bf44      	itt	mi
 80040fa:	2320      	movmi	r3, #32
 80040fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004100:	0711      	lsls	r1, r2, #28
 8004102:	bf44      	itt	mi
 8004104:	232b      	movmi	r3, #43	@ 0x2b
 8004106:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800410a:	f89a 3000 	ldrb.w	r3, [sl]
 800410e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004110:	d015      	beq.n	800413e <_svfiprintf_r+0xfa>
 8004112:	9a07      	ldr	r2, [sp, #28]
 8004114:	4654      	mov	r4, sl
 8004116:	2000      	movs	r0, #0
 8004118:	f04f 0c0a 	mov.w	ip, #10
 800411c:	4621      	mov	r1, r4
 800411e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004122:	3b30      	subs	r3, #48	@ 0x30
 8004124:	2b09      	cmp	r3, #9
 8004126:	d94b      	bls.n	80041c0 <_svfiprintf_r+0x17c>
 8004128:	b1b0      	cbz	r0, 8004158 <_svfiprintf_r+0x114>
 800412a:	9207      	str	r2, [sp, #28]
 800412c:	e014      	b.n	8004158 <_svfiprintf_r+0x114>
 800412e:	eba0 0308 	sub.w	r3, r0, r8
 8004132:	fa09 f303 	lsl.w	r3, r9, r3
 8004136:	4313      	orrs	r3, r2
 8004138:	9304      	str	r3, [sp, #16]
 800413a:	46a2      	mov	sl, r4
 800413c:	e7d2      	b.n	80040e4 <_svfiprintf_r+0xa0>
 800413e:	9b03      	ldr	r3, [sp, #12]
 8004140:	1d19      	adds	r1, r3, #4
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	9103      	str	r1, [sp, #12]
 8004146:	2b00      	cmp	r3, #0
 8004148:	bfbb      	ittet	lt
 800414a:	425b      	neglt	r3, r3
 800414c:	f042 0202 	orrlt.w	r2, r2, #2
 8004150:	9307      	strge	r3, [sp, #28]
 8004152:	9307      	strlt	r3, [sp, #28]
 8004154:	bfb8      	it	lt
 8004156:	9204      	strlt	r2, [sp, #16]
 8004158:	7823      	ldrb	r3, [r4, #0]
 800415a:	2b2e      	cmp	r3, #46	@ 0x2e
 800415c:	d10a      	bne.n	8004174 <_svfiprintf_r+0x130>
 800415e:	7863      	ldrb	r3, [r4, #1]
 8004160:	2b2a      	cmp	r3, #42	@ 0x2a
 8004162:	d132      	bne.n	80041ca <_svfiprintf_r+0x186>
 8004164:	9b03      	ldr	r3, [sp, #12]
 8004166:	1d1a      	adds	r2, r3, #4
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	9203      	str	r2, [sp, #12]
 800416c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004170:	3402      	adds	r4, #2
 8004172:	9305      	str	r3, [sp, #20]
 8004174:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004238 <_svfiprintf_r+0x1f4>
 8004178:	7821      	ldrb	r1, [r4, #0]
 800417a:	2203      	movs	r2, #3
 800417c:	4650      	mov	r0, sl
 800417e:	f7fc f84f 	bl	8000220 <memchr>
 8004182:	b138      	cbz	r0, 8004194 <_svfiprintf_r+0x150>
 8004184:	9b04      	ldr	r3, [sp, #16]
 8004186:	eba0 000a 	sub.w	r0, r0, sl
 800418a:	2240      	movs	r2, #64	@ 0x40
 800418c:	4082      	lsls	r2, r0
 800418e:	4313      	orrs	r3, r2
 8004190:	3401      	adds	r4, #1
 8004192:	9304      	str	r3, [sp, #16]
 8004194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004198:	4824      	ldr	r0, [pc, #144]	@ (800422c <_svfiprintf_r+0x1e8>)
 800419a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800419e:	2206      	movs	r2, #6
 80041a0:	f7fc f83e 	bl	8000220 <memchr>
 80041a4:	2800      	cmp	r0, #0
 80041a6:	d036      	beq.n	8004216 <_svfiprintf_r+0x1d2>
 80041a8:	4b21      	ldr	r3, [pc, #132]	@ (8004230 <_svfiprintf_r+0x1ec>)
 80041aa:	bb1b      	cbnz	r3, 80041f4 <_svfiprintf_r+0x1b0>
 80041ac:	9b03      	ldr	r3, [sp, #12]
 80041ae:	3307      	adds	r3, #7
 80041b0:	f023 0307 	bic.w	r3, r3, #7
 80041b4:	3308      	adds	r3, #8
 80041b6:	9303      	str	r3, [sp, #12]
 80041b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041ba:	4433      	add	r3, r6
 80041bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80041be:	e76a      	b.n	8004096 <_svfiprintf_r+0x52>
 80041c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80041c4:	460c      	mov	r4, r1
 80041c6:	2001      	movs	r0, #1
 80041c8:	e7a8      	b.n	800411c <_svfiprintf_r+0xd8>
 80041ca:	2300      	movs	r3, #0
 80041cc:	3401      	adds	r4, #1
 80041ce:	9305      	str	r3, [sp, #20]
 80041d0:	4619      	mov	r1, r3
 80041d2:	f04f 0c0a 	mov.w	ip, #10
 80041d6:	4620      	mov	r0, r4
 80041d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041dc:	3a30      	subs	r2, #48	@ 0x30
 80041de:	2a09      	cmp	r2, #9
 80041e0:	d903      	bls.n	80041ea <_svfiprintf_r+0x1a6>
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0c6      	beq.n	8004174 <_svfiprintf_r+0x130>
 80041e6:	9105      	str	r1, [sp, #20]
 80041e8:	e7c4      	b.n	8004174 <_svfiprintf_r+0x130>
 80041ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80041ee:	4604      	mov	r4, r0
 80041f0:	2301      	movs	r3, #1
 80041f2:	e7f0      	b.n	80041d6 <_svfiprintf_r+0x192>
 80041f4:	ab03      	add	r3, sp, #12
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	462a      	mov	r2, r5
 80041fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004234 <_svfiprintf_r+0x1f0>)
 80041fc:	a904      	add	r1, sp, #16
 80041fe:	4638      	mov	r0, r7
 8004200:	f3af 8000 	nop.w
 8004204:	1c42      	adds	r2, r0, #1
 8004206:	4606      	mov	r6, r0
 8004208:	d1d6      	bne.n	80041b8 <_svfiprintf_r+0x174>
 800420a:	89ab      	ldrh	r3, [r5, #12]
 800420c:	065b      	lsls	r3, r3, #25
 800420e:	f53f af2d 	bmi.w	800406c <_svfiprintf_r+0x28>
 8004212:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004214:	e72c      	b.n	8004070 <_svfiprintf_r+0x2c>
 8004216:	ab03      	add	r3, sp, #12
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	462a      	mov	r2, r5
 800421c:	4b05      	ldr	r3, [pc, #20]	@ (8004234 <_svfiprintf_r+0x1f0>)
 800421e:	a904      	add	r1, sp, #16
 8004220:	4638      	mov	r0, r7
 8004222:	f000 f879 	bl	8004318 <_printf_i>
 8004226:	e7ed      	b.n	8004204 <_svfiprintf_r+0x1c0>
 8004228:	0800482d 	.word	0x0800482d
 800422c:	08004837 	.word	0x08004837
 8004230:	00000000 	.word	0x00000000
 8004234:	08003f8d 	.word	0x08003f8d
 8004238:	08004833 	.word	0x08004833

0800423c <_printf_common>:
 800423c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004240:	4616      	mov	r6, r2
 8004242:	4698      	mov	r8, r3
 8004244:	688a      	ldr	r2, [r1, #8]
 8004246:	690b      	ldr	r3, [r1, #16]
 8004248:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800424c:	4293      	cmp	r3, r2
 800424e:	bfb8      	it	lt
 8004250:	4613      	movlt	r3, r2
 8004252:	6033      	str	r3, [r6, #0]
 8004254:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004258:	4607      	mov	r7, r0
 800425a:	460c      	mov	r4, r1
 800425c:	b10a      	cbz	r2, 8004262 <_printf_common+0x26>
 800425e:	3301      	adds	r3, #1
 8004260:	6033      	str	r3, [r6, #0]
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	0699      	lsls	r1, r3, #26
 8004266:	bf42      	ittt	mi
 8004268:	6833      	ldrmi	r3, [r6, #0]
 800426a:	3302      	addmi	r3, #2
 800426c:	6033      	strmi	r3, [r6, #0]
 800426e:	6825      	ldr	r5, [r4, #0]
 8004270:	f015 0506 	ands.w	r5, r5, #6
 8004274:	d106      	bne.n	8004284 <_printf_common+0x48>
 8004276:	f104 0a19 	add.w	sl, r4, #25
 800427a:	68e3      	ldr	r3, [r4, #12]
 800427c:	6832      	ldr	r2, [r6, #0]
 800427e:	1a9b      	subs	r3, r3, r2
 8004280:	42ab      	cmp	r3, r5
 8004282:	dc26      	bgt.n	80042d2 <_printf_common+0x96>
 8004284:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004288:	6822      	ldr	r2, [r4, #0]
 800428a:	3b00      	subs	r3, #0
 800428c:	bf18      	it	ne
 800428e:	2301      	movne	r3, #1
 8004290:	0692      	lsls	r2, r2, #26
 8004292:	d42b      	bmi.n	80042ec <_printf_common+0xb0>
 8004294:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004298:	4641      	mov	r1, r8
 800429a:	4638      	mov	r0, r7
 800429c:	47c8      	blx	r9
 800429e:	3001      	adds	r0, #1
 80042a0:	d01e      	beq.n	80042e0 <_printf_common+0xa4>
 80042a2:	6823      	ldr	r3, [r4, #0]
 80042a4:	6922      	ldr	r2, [r4, #16]
 80042a6:	f003 0306 	and.w	r3, r3, #6
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	bf02      	ittt	eq
 80042ae:	68e5      	ldreq	r5, [r4, #12]
 80042b0:	6833      	ldreq	r3, [r6, #0]
 80042b2:	1aed      	subeq	r5, r5, r3
 80042b4:	68a3      	ldr	r3, [r4, #8]
 80042b6:	bf0c      	ite	eq
 80042b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042bc:	2500      	movne	r5, #0
 80042be:	4293      	cmp	r3, r2
 80042c0:	bfc4      	itt	gt
 80042c2:	1a9b      	subgt	r3, r3, r2
 80042c4:	18ed      	addgt	r5, r5, r3
 80042c6:	2600      	movs	r6, #0
 80042c8:	341a      	adds	r4, #26
 80042ca:	42b5      	cmp	r5, r6
 80042cc:	d11a      	bne.n	8004304 <_printf_common+0xc8>
 80042ce:	2000      	movs	r0, #0
 80042d0:	e008      	b.n	80042e4 <_printf_common+0xa8>
 80042d2:	2301      	movs	r3, #1
 80042d4:	4652      	mov	r2, sl
 80042d6:	4641      	mov	r1, r8
 80042d8:	4638      	mov	r0, r7
 80042da:	47c8      	blx	r9
 80042dc:	3001      	adds	r0, #1
 80042de:	d103      	bne.n	80042e8 <_printf_common+0xac>
 80042e0:	f04f 30ff 	mov.w	r0, #4294967295
 80042e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042e8:	3501      	adds	r5, #1
 80042ea:	e7c6      	b.n	800427a <_printf_common+0x3e>
 80042ec:	18e1      	adds	r1, r4, r3
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	2030      	movs	r0, #48	@ 0x30
 80042f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042f6:	4422      	add	r2, r4
 80042f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004300:	3302      	adds	r3, #2
 8004302:	e7c7      	b.n	8004294 <_printf_common+0x58>
 8004304:	2301      	movs	r3, #1
 8004306:	4622      	mov	r2, r4
 8004308:	4641      	mov	r1, r8
 800430a:	4638      	mov	r0, r7
 800430c:	47c8      	blx	r9
 800430e:	3001      	adds	r0, #1
 8004310:	d0e6      	beq.n	80042e0 <_printf_common+0xa4>
 8004312:	3601      	adds	r6, #1
 8004314:	e7d9      	b.n	80042ca <_printf_common+0x8e>
	...

08004318 <_printf_i>:
 8004318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800431c:	7e0f      	ldrb	r7, [r1, #24]
 800431e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004320:	2f78      	cmp	r7, #120	@ 0x78
 8004322:	4691      	mov	r9, r2
 8004324:	4680      	mov	r8, r0
 8004326:	460c      	mov	r4, r1
 8004328:	469a      	mov	sl, r3
 800432a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800432e:	d807      	bhi.n	8004340 <_printf_i+0x28>
 8004330:	2f62      	cmp	r7, #98	@ 0x62
 8004332:	d80a      	bhi.n	800434a <_printf_i+0x32>
 8004334:	2f00      	cmp	r7, #0
 8004336:	f000 80d2 	beq.w	80044de <_printf_i+0x1c6>
 800433a:	2f58      	cmp	r7, #88	@ 0x58
 800433c:	f000 80b9 	beq.w	80044b2 <_printf_i+0x19a>
 8004340:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004344:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004348:	e03a      	b.n	80043c0 <_printf_i+0xa8>
 800434a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800434e:	2b15      	cmp	r3, #21
 8004350:	d8f6      	bhi.n	8004340 <_printf_i+0x28>
 8004352:	a101      	add	r1, pc, #4	@ (adr r1, 8004358 <_printf_i+0x40>)
 8004354:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004358:	080043b1 	.word	0x080043b1
 800435c:	080043c5 	.word	0x080043c5
 8004360:	08004341 	.word	0x08004341
 8004364:	08004341 	.word	0x08004341
 8004368:	08004341 	.word	0x08004341
 800436c:	08004341 	.word	0x08004341
 8004370:	080043c5 	.word	0x080043c5
 8004374:	08004341 	.word	0x08004341
 8004378:	08004341 	.word	0x08004341
 800437c:	08004341 	.word	0x08004341
 8004380:	08004341 	.word	0x08004341
 8004384:	080044c5 	.word	0x080044c5
 8004388:	080043ef 	.word	0x080043ef
 800438c:	0800447f 	.word	0x0800447f
 8004390:	08004341 	.word	0x08004341
 8004394:	08004341 	.word	0x08004341
 8004398:	080044e7 	.word	0x080044e7
 800439c:	08004341 	.word	0x08004341
 80043a0:	080043ef 	.word	0x080043ef
 80043a4:	08004341 	.word	0x08004341
 80043a8:	08004341 	.word	0x08004341
 80043ac:	08004487 	.word	0x08004487
 80043b0:	6833      	ldr	r3, [r6, #0]
 80043b2:	1d1a      	adds	r2, r3, #4
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6032      	str	r2, [r6, #0]
 80043b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80043c0:	2301      	movs	r3, #1
 80043c2:	e09d      	b.n	8004500 <_printf_i+0x1e8>
 80043c4:	6833      	ldr	r3, [r6, #0]
 80043c6:	6820      	ldr	r0, [r4, #0]
 80043c8:	1d19      	adds	r1, r3, #4
 80043ca:	6031      	str	r1, [r6, #0]
 80043cc:	0606      	lsls	r6, r0, #24
 80043ce:	d501      	bpl.n	80043d4 <_printf_i+0xbc>
 80043d0:	681d      	ldr	r5, [r3, #0]
 80043d2:	e003      	b.n	80043dc <_printf_i+0xc4>
 80043d4:	0645      	lsls	r5, r0, #25
 80043d6:	d5fb      	bpl.n	80043d0 <_printf_i+0xb8>
 80043d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80043dc:	2d00      	cmp	r5, #0
 80043de:	da03      	bge.n	80043e8 <_printf_i+0xd0>
 80043e0:	232d      	movs	r3, #45	@ 0x2d
 80043e2:	426d      	negs	r5, r5
 80043e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043e8:	4859      	ldr	r0, [pc, #356]	@ (8004550 <_printf_i+0x238>)
 80043ea:	230a      	movs	r3, #10
 80043ec:	e011      	b.n	8004412 <_printf_i+0xfa>
 80043ee:	6821      	ldr	r1, [r4, #0]
 80043f0:	6833      	ldr	r3, [r6, #0]
 80043f2:	0608      	lsls	r0, r1, #24
 80043f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80043f8:	d402      	bmi.n	8004400 <_printf_i+0xe8>
 80043fa:	0649      	lsls	r1, r1, #25
 80043fc:	bf48      	it	mi
 80043fe:	b2ad      	uxthmi	r5, r5
 8004400:	2f6f      	cmp	r7, #111	@ 0x6f
 8004402:	4853      	ldr	r0, [pc, #332]	@ (8004550 <_printf_i+0x238>)
 8004404:	6033      	str	r3, [r6, #0]
 8004406:	bf14      	ite	ne
 8004408:	230a      	movne	r3, #10
 800440a:	2308      	moveq	r3, #8
 800440c:	2100      	movs	r1, #0
 800440e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004412:	6866      	ldr	r6, [r4, #4]
 8004414:	60a6      	str	r6, [r4, #8]
 8004416:	2e00      	cmp	r6, #0
 8004418:	bfa2      	ittt	ge
 800441a:	6821      	ldrge	r1, [r4, #0]
 800441c:	f021 0104 	bicge.w	r1, r1, #4
 8004420:	6021      	strge	r1, [r4, #0]
 8004422:	b90d      	cbnz	r5, 8004428 <_printf_i+0x110>
 8004424:	2e00      	cmp	r6, #0
 8004426:	d04b      	beq.n	80044c0 <_printf_i+0x1a8>
 8004428:	4616      	mov	r6, r2
 800442a:	fbb5 f1f3 	udiv	r1, r5, r3
 800442e:	fb03 5711 	mls	r7, r3, r1, r5
 8004432:	5dc7      	ldrb	r7, [r0, r7]
 8004434:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004438:	462f      	mov	r7, r5
 800443a:	42bb      	cmp	r3, r7
 800443c:	460d      	mov	r5, r1
 800443e:	d9f4      	bls.n	800442a <_printf_i+0x112>
 8004440:	2b08      	cmp	r3, #8
 8004442:	d10b      	bne.n	800445c <_printf_i+0x144>
 8004444:	6823      	ldr	r3, [r4, #0]
 8004446:	07df      	lsls	r7, r3, #31
 8004448:	d508      	bpl.n	800445c <_printf_i+0x144>
 800444a:	6923      	ldr	r3, [r4, #16]
 800444c:	6861      	ldr	r1, [r4, #4]
 800444e:	4299      	cmp	r1, r3
 8004450:	bfde      	ittt	le
 8004452:	2330      	movle	r3, #48	@ 0x30
 8004454:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004458:	f106 36ff 	addle.w	r6, r6, #4294967295
 800445c:	1b92      	subs	r2, r2, r6
 800445e:	6122      	str	r2, [r4, #16]
 8004460:	f8cd a000 	str.w	sl, [sp]
 8004464:	464b      	mov	r3, r9
 8004466:	aa03      	add	r2, sp, #12
 8004468:	4621      	mov	r1, r4
 800446a:	4640      	mov	r0, r8
 800446c:	f7ff fee6 	bl	800423c <_printf_common>
 8004470:	3001      	adds	r0, #1
 8004472:	d14a      	bne.n	800450a <_printf_i+0x1f2>
 8004474:	f04f 30ff 	mov.w	r0, #4294967295
 8004478:	b004      	add	sp, #16
 800447a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800447e:	6823      	ldr	r3, [r4, #0]
 8004480:	f043 0320 	orr.w	r3, r3, #32
 8004484:	6023      	str	r3, [r4, #0]
 8004486:	4833      	ldr	r0, [pc, #204]	@ (8004554 <_printf_i+0x23c>)
 8004488:	2778      	movs	r7, #120	@ 0x78
 800448a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800448e:	6823      	ldr	r3, [r4, #0]
 8004490:	6831      	ldr	r1, [r6, #0]
 8004492:	061f      	lsls	r7, r3, #24
 8004494:	f851 5b04 	ldr.w	r5, [r1], #4
 8004498:	d402      	bmi.n	80044a0 <_printf_i+0x188>
 800449a:	065f      	lsls	r7, r3, #25
 800449c:	bf48      	it	mi
 800449e:	b2ad      	uxthmi	r5, r5
 80044a0:	6031      	str	r1, [r6, #0]
 80044a2:	07d9      	lsls	r1, r3, #31
 80044a4:	bf44      	itt	mi
 80044a6:	f043 0320 	orrmi.w	r3, r3, #32
 80044aa:	6023      	strmi	r3, [r4, #0]
 80044ac:	b11d      	cbz	r5, 80044b6 <_printf_i+0x19e>
 80044ae:	2310      	movs	r3, #16
 80044b0:	e7ac      	b.n	800440c <_printf_i+0xf4>
 80044b2:	4827      	ldr	r0, [pc, #156]	@ (8004550 <_printf_i+0x238>)
 80044b4:	e7e9      	b.n	800448a <_printf_i+0x172>
 80044b6:	6823      	ldr	r3, [r4, #0]
 80044b8:	f023 0320 	bic.w	r3, r3, #32
 80044bc:	6023      	str	r3, [r4, #0]
 80044be:	e7f6      	b.n	80044ae <_printf_i+0x196>
 80044c0:	4616      	mov	r6, r2
 80044c2:	e7bd      	b.n	8004440 <_printf_i+0x128>
 80044c4:	6833      	ldr	r3, [r6, #0]
 80044c6:	6825      	ldr	r5, [r4, #0]
 80044c8:	6961      	ldr	r1, [r4, #20]
 80044ca:	1d18      	adds	r0, r3, #4
 80044cc:	6030      	str	r0, [r6, #0]
 80044ce:	062e      	lsls	r6, r5, #24
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	d501      	bpl.n	80044d8 <_printf_i+0x1c0>
 80044d4:	6019      	str	r1, [r3, #0]
 80044d6:	e002      	b.n	80044de <_printf_i+0x1c6>
 80044d8:	0668      	lsls	r0, r5, #25
 80044da:	d5fb      	bpl.n	80044d4 <_printf_i+0x1bc>
 80044dc:	8019      	strh	r1, [r3, #0]
 80044de:	2300      	movs	r3, #0
 80044e0:	6123      	str	r3, [r4, #16]
 80044e2:	4616      	mov	r6, r2
 80044e4:	e7bc      	b.n	8004460 <_printf_i+0x148>
 80044e6:	6833      	ldr	r3, [r6, #0]
 80044e8:	1d1a      	adds	r2, r3, #4
 80044ea:	6032      	str	r2, [r6, #0]
 80044ec:	681e      	ldr	r6, [r3, #0]
 80044ee:	6862      	ldr	r2, [r4, #4]
 80044f0:	2100      	movs	r1, #0
 80044f2:	4630      	mov	r0, r6
 80044f4:	f7fb fe94 	bl	8000220 <memchr>
 80044f8:	b108      	cbz	r0, 80044fe <_printf_i+0x1e6>
 80044fa:	1b80      	subs	r0, r0, r6
 80044fc:	6060      	str	r0, [r4, #4]
 80044fe:	6863      	ldr	r3, [r4, #4]
 8004500:	6123      	str	r3, [r4, #16]
 8004502:	2300      	movs	r3, #0
 8004504:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004508:	e7aa      	b.n	8004460 <_printf_i+0x148>
 800450a:	6923      	ldr	r3, [r4, #16]
 800450c:	4632      	mov	r2, r6
 800450e:	4649      	mov	r1, r9
 8004510:	4640      	mov	r0, r8
 8004512:	47d0      	blx	sl
 8004514:	3001      	adds	r0, #1
 8004516:	d0ad      	beq.n	8004474 <_printf_i+0x15c>
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	079b      	lsls	r3, r3, #30
 800451c:	d413      	bmi.n	8004546 <_printf_i+0x22e>
 800451e:	68e0      	ldr	r0, [r4, #12]
 8004520:	9b03      	ldr	r3, [sp, #12]
 8004522:	4298      	cmp	r0, r3
 8004524:	bfb8      	it	lt
 8004526:	4618      	movlt	r0, r3
 8004528:	e7a6      	b.n	8004478 <_printf_i+0x160>
 800452a:	2301      	movs	r3, #1
 800452c:	4632      	mov	r2, r6
 800452e:	4649      	mov	r1, r9
 8004530:	4640      	mov	r0, r8
 8004532:	47d0      	blx	sl
 8004534:	3001      	adds	r0, #1
 8004536:	d09d      	beq.n	8004474 <_printf_i+0x15c>
 8004538:	3501      	adds	r5, #1
 800453a:	68e3      	ldr	r3, [r4, #12]
 800453c:	9903      	ldr	r1, [sp, #12]
 800453e:	1a5b      	subs	r3, r3, r1
 8004540:	42ab      	cmp	r3, r5
 8004542:	dcf2      	bgt.n	800452a <_printf_i+0x212>
 8004544:	e7eb      	b.n	800451e <_printf_i+0x206>
 8004546:	2500      	movs	r5, #0
 8004548:	f104 0619 	add.w	r6, r4, #25
 800454c:	e7f5      	b.n	800453a <_printf_i+0x222>
 800454e:	bf00      	nop
 8004550:	0800483e 	.word	0x0800483e
 8004554:	0800484f 	.word	0x0800484f

08004558 <memmove>:
 8004558:	4288      	cmp	r0, r1
 800455a:	b510      	push	{r4, lr}
 800455c:	eb01 0402 	add.w	r4, r1, r2
 8004560:	d902      	bls.n	8004568 <memmove+0x10>
 8004562:	4284      	cmp	r4, r0
 8004564:	4623      	mov	r3, r4
 8004566:	d807      	bhi.n	8004578 <memmove+0x20>
 8004568:	1e43      	subs	r3, r0, #1
 800456a:	42a1      	cmp	r1, r4
 800456c:	d008      	beq.n	8004580 <memmove+0x28>
 800456e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004572:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004576:	e7f8      	b.n	800456a <memmove+0x12>
 8004578:	4402      	add	r2, r0
 800457a:	4601      	mov	r1, r0
 800457c:	428a      	cmp	r2, r1
 800457e:	d100      	bne.n	8004582 <memmove+0x2a>
 8004580:	bd10      	pop	{r4, pc}
 8004582:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004586:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800458a:	e7f7      	b.n	800457c <memmove+0x24>

0800458c <_realloc_r>:
 800458c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004590:	4680      	mov	r8, r0
 8004592:	4615      	mov	r5, r2
 8004594:	460c      	mov	r4, r1
 8004596:	b921      	cbnz	r1, 80045a2 <_realloc_r+0x16>
 8004598:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800459c:	4611      	mov	r1, r2
 800459e:	f7ff baf5 	b.w	8003b8c <_malloc_r>
 80045a2:	b92a      	cbnz	r2, 80045b0 <_realloc_r+0x24>
 80045a4:	f7ff fca8 	bl	8003ef8 <_free_r>
 80045a8:	2400      	movs	r4, #0
 80045aa:	4620      	mov	r0, r4
 80045ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045b0:	f000 f81a 	bl	80045e8 <_malloc_usable_size_r>
 80045b4:	4285      	cmp	r5, r0
 80045b6:	4606      	mov	r6, r0
 80045b8:	d802      	bhi.n	80045c0 <_realloc_r+0x34>
 80045ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80045be:	d8f4      	bhi.n	80045aa <_realloc_r+0x1e>
 80045c0:	4629      	mov	r1, r5
 80045c2:	4640      	mov	r0, r8
 80045c4:	f7ff fae2 	bl	8003b8c <_malloc_r>
 80045c8:	4607      	mov	r7, r0
 80045ca:	2800      	cmp	r0, #0
 80045cc:	d0ec      	beq.n	80045a8 <_realloc_r+0x1c>
 80045ce:	42b5      	cmp	r5, r6
 80045d0:	462a      	mov	r2, r5
 80045d2:	4621      	mov	r1, r4
 80045d4:	bf28      	it	cs
 80045d6:	4632      	movcs	r2, r6
 80045d8:	f7ff fc80 	bl	8003edc <memcpy>
 80045dc:	4621      	mov	r1, r4
 80045de:	4640      	mov	r0, r8
 80045e0:	f7ff fc8a 	bl	8003ef8 <_free_r>
 80045e4:	463c      	mov	r4, r7
 80045e6:	e7e0      	b.n	80045aa <_realloc_r+0x1e>

080045e8 <_malloc_usable_size_r>:
 80045e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045ec:	1f18      	subs	r0, r3, #4
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	bfbc      	itt	lt
 80045f2:	580b      	ldrlt	r3, [r1, r0]
 80045f4:	18c0      	addlt	r0, r0, r3
 80045f6:	4770      	bx	lr

080045f8 <_init>:
 80045f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fa:	bf00      	nop
 80045fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045fe:	bc08      	pop	{r3}
 8004600:	469e      	mov	lr, r3
 8004602:	4770      	bx	lr

08004604 <_fini>:
 8004604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004606:	bf00      	nop
 8004608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460a:	bc08      	pop	{r3}
 800460c:	469e      	mov	lr, r3
 800460e:	4770      	bx	lr
