
stm_gps_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003124  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080032fc  080032fc  000042fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800333c  0800333c  00005010  2**0
                  CONTENTS
  4 .ARM          00000008  0800333c  0800333c  0000433c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003344  08003344  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003344  08003344  00004344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003348  08003348  00004348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800334c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c8  20000010  0800335c  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  0800335c  000055d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe72  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002344  00000000  00000000  00014eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  000171f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ba  00000000  00000000  00017ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c217  00000000  00000000  0001885a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eeb4  00000000  00000000  00034a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bbba4  00000000  00000000  00043925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ff4c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003404  00000000  00000000  000ff50c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00102910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080032e4 	.word	0x080032e4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	080032e4 	.word	0x080032e4

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fbe4 	bl	8000cd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f80f 	bl	8000532 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f936 	bl	8000784 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000518:	f000 f856 	bl	80005c8 <MX_FDCAN1_Init>
  MX_USART1_UART_Init();
 800051c:	f000 f89a 	bl	8000654 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000520:	f000 f8e4 	bl	80006ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Ringbuf_init();
 8000524:	f000 face 	bl	8000ac4 <Ringbuf_init>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000528:	2000      	movs	r0, #0
 800052a:	f000 fb9f 	bl	8000c6c <BSP_LED_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052e:	bf00      	nop
 8000530:	e7fd      	b.n	800052e <main+0x26>

08000532 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000532:	b580      	push	{r7, lr}
 8000534:	b094      	sub	sp, #80	@ 0x50
 8000536:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000538:	f107 0318 	add.w	r3, r7, #24
 800053c:	2238      	movs	r2, #56	@ 0x38
 800053e:	2100      	movs	r1, #0
 8000540:	4618      	mov	r0, r3
 8000542:	f002 fea3 	bl	800328c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000554:	2000      	movs	r0, #0
 8000556:	f001 f889 	bl	800166c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055a:	2302      	movs	r3, #2
 800055c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000562:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000564:	2340      	movs	r3, #64	@ 0x40
 8000566:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000568:	2302      	movs	r3, #2
 800056a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056c:	2302      	movs	r3, #2
 800056e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000570:	2304      	movs	r3, #4
 8000572:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000574:	2355      	movs	r3, #85	@ 0x55
 8000576:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000578:	2302      	movs	r3, #2
 800057a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800057c:	2302      	movs	r3, #2
 800057e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000584:	f107 0318 	add.w	r3, r7, #24
 8000588:	4618      	mov	r0, r3
 800058a:	f001 f923 	bl	80017d4 <HAL_RCC_OscConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000594:	f000 f91a 	bl	80007cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000598:	230f      	movs	r3, #15
 800059a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059c:	2303      	movs	r3, #3
 800059e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2104      	movs	r1, #4
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 fc21 	bl	8001df8 <HAL_RCC_ClockConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005bc:	f000 f906 	bl	80007cc <Error_Handler>
  }
}
 80005c0:	bf00      	nop
 80005c2:	3750      	adds	r7, #80	@ 0x50
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80005cc:	4b1f      	ldr	r3, [pc, #124]	@ (800064c <MX_FDCAN1_Init+0x84>)
 80005ce:	4a20      	ldr	r2, [pc, #128]	@ (8000650 <MX_FDCAN1_Init+0x88>)
 80005d0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80005d2:	4b1e      	ldr	r3, [pc, #120]	@ (800064c <MX_FDCAN1_Init+0x84>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80005d8:	4b1c      	ldr	r3, [pc, #112]	@ (800064c <MX_FDCAN1_Init+0x84>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80005de:	4b1b      	ldr	r3, [pc, #108]	@ (800064c <MX_FDCAN1_Init+0x84>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80005e4:	4b19      	ldr	r3, [pc, #100]	@ (800064c <MX_FDCAN1_Init+0x84>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80005ea:	4b18      	ldr	r3, [pc, #96]	@ (800064c <MX_FDCAN1_Init+0x84>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80005f0:	4b16      	ldr	r3, [pc, #88]	@ (800064c <MX_FDCAN1_Init+0x84>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80005f6:	4b15      	ldr	r3, [pc, #84]	@ (800064c <MX_FDCAN1_Init+0x84>)
 80005f8:	2210      	movs	r2, #16
 80005fa:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80005fc:	4b13      	ldr	r3, [pc, #76]	@ (800064c <MX_FDCAN1_Init+0x84>)
 80005fe:	2201      	movs	r2, #1
 8000600:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 8000602:	4b12      	ldr	r3, [pc, #72]	@ (800064c <MX_FDCAN1_Init+0x84>)
 8000604:	2201      	movs	r2, #1
 8000606:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 8000608:	4b10      	ldr	r3, [pc, #64]	@ (800064c <MX_FDCAN1_Init+0x84>)
 800060a:	2201      	movs	r2, #1
 800060c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800060e:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <MX_FDCAN1_Init+0x84>)
 8000610:	2201      	movs	r2, #1
 8000612:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000614:	4b0d      	ldr	r3, [pc, #52]	@ (800064c <MX_FDCAN1_Init+0x84>)
 8000616:	2201      	movs	r2, #1
 8000618:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800061a:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <MX_FDCAN1_Init+0x84>)
 800061c:	2201      	movs	r2, #1
 800061e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000620:	4b0a      	ldr	r3, [pc, #40]	@ (800064c <MX_FDCAN1_Init+0x84>)
 8000622:	2201      	movs	r2, #1
 8000624:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000626:	4b09      	ldr	r3, [pc, #36]	@ (800064c <MX_FDCAN1_Init+0x84>)
 8000628:	2200      	movs	r2, #0
 800062a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800062c:	4b07      	ldr	r3, [pc, #28]	@ (800064c <MX_FDCAN1_Init+0x84>)
 800062e:	2200      	movs	r2, #0
 8000630:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000632:	4b06      	ldr	r3, [pc, #24]	@ (800064c <MX_FDCAN1_Init+0x84>)
 8000634:	2200      	movs	r2, #0
 8000636:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000638:	4804      	ldr	r0, [pc, #16]	@ (800064c <MX_FDCAN1_Init+0x84>)
 800063a:	f000 fccd 	bl	8000fd8 <HAL_FDCAN_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000644:	f000 f8c2 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000002c 	.word	0x2000002c
 8000650:	40006400 	.word	0x40006400

08000654 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000658:	4b22      	ldr	r3, [pc, #136]	@ (80006e4 <MX_USART1_UART_Init+0x90>)
 800065a:	4a23      	ldr	r2, [pc, #140]	@ (80006e8 <MX_USART1_UART_Init+0x94>)
 800065c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800065e:	4b21      	ldr	r3, [pc, #132]	@ (80006e4 <MX_USART1_UART_Init+0x90>)
 8000660:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000664:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000666:	4b1f      	ldr	r3, [pc, #124]	@ (80006e4 <MX_USART1_UART_Init+0x90>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800066c:	4b1d      	ldr	r3, [pc, #116]	@ (80006e4 <MX_USART1_UART_Init+0x90>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000672:	4b1c      	ldr	r3, [pc, #112]	@ (80006e4 <MX_USART1_UART_Init+0x90>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000678:	4b1a      	ldr	r3, [pc, #104]	@ (80006e4 <MX_USART1_UART_Init+0x90>)
 800067a:	220c      	movs	r2, #12
 800067c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067e:	4b19      	ldr	r3, [pc, #100]	@ (80006e4 <MX_USART1_UART_Init+0x90>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000684:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <MX_USART1_UART_Init+0x90>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800068a:	4b16      	ldr	r3, [pc, #88]	@ (80006e4 <MX_USART1_UART_Init+0x90>)
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000690:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <MX_USART1_UART_Init+0x90>)
 8000692:	2200      	movs	r2, #0
 8000694:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000696:	4b13      	ldr	r3, [pc, #76]	@ (80006e4 <MX_USART1_UART_Init+0x90>)
 8000698:	2200      	movs	r2, #0
 800069a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800069c:	4811      	ldr	r0, [pc, #68]	@ (80006e4 <MX_USART1_UART_Init+0x90>)
 800069e:	f001 ffb7 	bl	8002610 <HAL_UART_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80006a8:	f000 f890 	bl	80007cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006ac:	2100      	movs	r1, #0
 80006ae:	480d      	ldr	r0, [pc, #52]	@ (80006e4 <MX_USART1_UART_Init+0x90>)
 80006b0:	f002 fd22 	bl	80030f8 <HAL_UARTEx_SetTxFifoThreshold>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006ba:	f000 f887 	bl	80007cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006be:	2100      	movs	r1, #0
 80006c0:	4808      	ldr	r0, [pc, #32]	@ (80006e4 <MX_USART1_UART_Init+0x90>)
 80006c2:	f002 fd57 	bl	8003174 <HAL_UARTEx_SetRxFifoThreshold>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006cc:	f000 f87e 	bl	80007cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80006d0:	4804      	ldr	r0, [pc, #16]	@ (80006e4 <MX_USART1_UART_Init+0x90>)
 80006d2:	f002 fcd8 	bl	8003086 <HAL_UARTEx_DisableFifoMode>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80006dc:	f000 f876 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000090 	.word	0x20000090
 80006e8:	40013800 	.word	0x40013800

080006ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f0:	4b22      	ldr	r3, [pc, #136]	@ (800077c <MX_USART2_UART_Init+0x90>)
 80006f2:	4a23      	ldr	r2, [pc, #140]	@ (8000780 <MX_USART2_UART_Init+0x94>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006f6:	4b21      	ldr	r3, [pc, #132]	@ (800077c <MX_USART2_UART_Init+0x90>)
 80006f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <MX_USART2_UART_Init+0x90>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b1d      	ldr	r3, [pc, #116]	@ (800077c <MX_USART2_UART_Init+0x90>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070a:	4b1c      	ldr	r3, [pc, #112]	@ (800077c <MX_USART2_UART_Init+0x90>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b1a      	ldr	r3, [pc, #104]	@ (800077c <MX_USART2_UART_Init+0x90>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b19      	ldr	r3, [pc, #100]	@ (800077c <MX_USART2_UART_Init+0x90>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b17      	ldr	r3, [pc, #92]	@ (800077c <MX_USART2_UART_Init+0x90>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000722:	4b16      	ldr	r3, [pc, #88]	@ (800077c <MX_USART2_UART_Init+0x90>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000728:	4b14      	ldr	r3, [pc, #80]	@ (800077c <MX_USART2_UART_Init+0x90>)
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800072e:	4b13      	ldr	r3, [pc, #76]	@ (800077c <MX_USART2_UART_Init+0x90>)
 8000730:	2200      	movs	r2, #0
 8000732:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000734:	4811      	ldr	r0, [pc, #68]	@ (800077c <MX_USART2_UART_Init+0x90>)
 8000736:	f001 ff6b 	bl	8002610 <HAL_UART_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000740:	f000 f844 	bl	80007cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000744:	2100      	movs	r1, #0
 8000746:	480d      	ldr	r0, [pc, #52]	@ (800077c <MX_USART2_UART_Init+0x90>)
 8000748:	f002 fcd6 	bl	80030f8 <HAL_UARTEx_SetTxFifoThreshold>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000752:	f000 f83b 	bl	80007cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000756:	2100      	movs	r1, #0
 8000758:	4808      	ldr	r0, [pc, #32]	@ (800077c <MX_USART2_UART_Init+0x90>)
 800075a:	f002 fd0b 	bl	8003174 <HAL_UARTEx_SetRxFifoThreshold>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000764:	f000 f832 	bl	80007cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	@ (800077c <MX_USART2_UART_Init+0x90>)
 800076a:	f002 fc8c 	bl	8003086 <HAL_UARTEx_DisableFifoMode>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000774:	f000 f82a 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000124 	.word	0x20000124
 8000780:	40004400 	.word	0x40004400

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <MX_GPIO_Init+0x44>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078e:	4a0e      	ldr	r2, [pc, #56]	@ (80007c8 <MX_GPIO_Init+0x44>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000796:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <MX_GPIO_Init+0x44>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <MX_GPIO_Init+0x44>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a6:	4a08      	ldr	r2, [pc, #32]	@ (80007c8 <MX_GPIO_Init+0x44>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ae:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <MX_GPIO_Init+0x44>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40021000 	.word	0x40021000

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <Error_Handler+0x8>

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <HAL_MspInit+0x44>)
 80007e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007e2:	4a0e      	ldr	r2, [pc, #56]	@ (800081c <HAL_MspInit+0x44>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80007ea:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <HAL_MspInit+0x44>)
 80007ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	4b09      	ldr	r3, [pc, #36]	@ (800081c <HAL_MspInit+0x44>)
 80007f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007fa:	4a08      	ldr	r2, [pc, #32]	@ (800081c <HAL_MspInit+0x44>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000800:	6593      	str	r3, [r2, #88]	@ 0x58
 8000802:	4b06      	ldr	r3, [pc, #24]	@ (800081c <HAL_MspInit+0x44>)
 8000804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800080e:	f000 ffd1 	bl	80017b4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40021000 	.word	0x40021000

08000820 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b09a      	sub	sp, #104	@ 0x68
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000838:	f107 0310 	add.w	r3, r7, #16
 800083c:	2244      	movs	r2, #68	@ 0x44
 800083e:	2100      	movs	r1, #0
 8000840:	4618      	mov	r0, r3
 8000842:	f002 fd23 	bl	800328c <memset>
  if(hfdcan->Instance==FDCAN1)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a20      	ldr	r2, [pc, #128]	@ (80008cc <HAL_FDCAN_MspInit+0xac>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d139      	bne.n	80008c4 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000850:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000854:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000856:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800085a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	4618      	mov	r0, r3
 8000862:	f001 fce5 	bl	8002230 <HAL_RCCEx_PeriphCLKConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800086c:	f7ff ffae 	bl	80007cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000870:	4b17      	ldr	r3, [pc, #92]	@ (80008d0 <HAL_FDCAN_MspInit+0xb0>)
 8000872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000874:	4a16      	ldr	r2, [pc, #88]	@ (80008d0 <HAL_FDCAN_MspInit+0xb0>)
 8000876:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800087a:	6593      	str	r3, [r2, #88]	@ 0x58
 800087c:	4b14      	ldr	r3, [pc, #80]	@ (80008d0 <HAL_FDCAN_MspInit+0xb0>)
 800087e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b11      	ldr	r3, [pc, #68]	@ (80008d0 <HAL_FDCAN_MspInit+0xb0>)
 800088a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088c:	4a10      	ldr	r2, [pc, #64]	@ (80008d0 <HAL_FDCAN_MspInit+0xb0>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000894:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <HAL_FDCAN_MspInit+0xb0>)
 8000896:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008a0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80008a4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80008b2:	2309      	movs	r3, #9
 80008b4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80008ba:	4619      	mov	r1, r3
 80008bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c0:	f000 fd3a 	bl	8001338 <HAL_GPIO_Init>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80008c4:	bf00      	nop
 80008c6:	3768      	adds	r7, #104	@ 0x68
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40006400 	.word	0x40006400
 80008d0:	40021000 	.word	0x40021000

080008d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b09c      	sub	sp, #112	@ 0x70
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008ec:	f107 0318 	add.w	r3, r7, #24
 80008f0:	2244      	movs	r2, #68	@ 0x44
 80008f2:	2100      	movs	r1, #0
 80008f4:	4618      	mov	r0, r3
 80008f6:	f002 fcc9 	bl	800328c <memset>
  if(huart->Instance==USART1)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a42      	ldr	r2, [pc, #264]	@ (8000a08 <HAL_UART_MspInit+0x134>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d140      	bne.n	8000986 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000904:	2301      	movs	r3, #1
 8000906:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800090c:	f107 0318 	add.w	r3, r7, #24
 8000910:	4618      	mov	r0, r3
 8000912:	f001 fc8d 	bl	8002230 <HAL_RCCEx_PeriphCLKConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800091c:	f7ff ff56 	bl	80007cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000920:	4b3a      	ldr	r3, [pc, #232]	@ (8000a0c <HAL_UART_MspInit+0x138>)
 8000922:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000924:	4a39      	ldr	r2, [pc, #228]	@ (8000a0c <HAL_UART_MspInit+0x138>)
 8000926:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800092a:	6613      	str	r3, [r2, #96]	@ 0x60
 800092c:	4b37      	ldr	r3, [pc, #220]	@ (8000a0c <HAL_UART_MspInit+0x138>)
 800092e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000930:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000938:	4b34      	ldr	r3, [pc, #208]	@ (8000a0c <HAL_UART_MspInit+0x138>)
 800093a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093c:	4a33      	ldr	r2, [pc, #204]	@ (8000a0c <HAL_UART_MspInit+0x138>)
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000944:	4b31      	ldr	r3, [pc, #196]	@ (8000a0c <HAL_UART_MspInit+0x138>)
 8000946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000950:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000954:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000962:	2307      	movs	r3, #7
 8000964:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800096a:	4619      	mov	r1, r3
 800096c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000970:	f000 fce2 	bl	8001338 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	2025      	movs	r0, #37	@ 0x25
 800097a:	f000 faf8 	bl	8000f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800097e:	2025      	movs	r0, #37	@ 0x25
 8000980:	f000 fb0f 	bl	8000fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000984:	e03b      	b.n	80009fe <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART2)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a21      	ldr	r2, [pc, #132]	@ (8000a10 <HAL_UART_MspInit+0x13c>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d136      	bne.n	80009fe <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000990:	2302      	movs	r3, #2
 8000992:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000998:	f107 0318 	add.w	r3, r7, #24
 800099c:	4618      	mov	r0, r3
 800099e:	f001 fc47 	bl	8002230 <HAL_RCCEx_PeriphCLKConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80009a8:	f7ff ff10 	bl	80007cc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ac:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <HAL_UART_MspInit+0x138>)
 80009ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009b0:	4a16      	ldr	r2, [pc, #88]	@ (8000a0c <HAL_UART_MspInit+0x138>)
 80009b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80009b8:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <HAL_UART_MspInit+0x138>)
 80009ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c4:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <HAL_UART_MspInit+0x138>)
 80009c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c8:	4a10      	ldr	r2, [pc, #64]	@ (8000a0c <HAL_UART_MspInit+0x138>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <HAL_UART_MspInit+0x138>)
 80009d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80009dc:	230c      	movs	r3, #12
 80009de:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ec:	2307      	movs	r3, #7
 80009ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80009f4:	4619      	mov	r1, r3
 80009f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009fa:	f000 fc9d 	bl	8001338 <HAL_GPIO_Init>
}
 80009fe:	bf00      	nop
 8000a00:	3770      	adds	r7, #112	@ 0x70
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40013800 	.word	0x40013800
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40004400 	.word	0x40004400

08000a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <NMI_Handler+0x4>

08000a1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <HardFault_Handler+0x4>

08000a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <MemManage_Handler+0x4>

08000a2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <BusFault_Handler+0x4>

08000a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <UsageFault_Handler+0x4>

08000a3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
	...

08000a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(timeout >0) timeout--;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <SysTick_Handler+0x20>)
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d005      	beq.n	8000a80 <SysTick_Handler+0x18>
 8000a74:	4b04      	ldr	r3, [pc, #16]	@ (8000a88 <SysTick_Handler+0x20>)
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	4b02      	ldr	r3, [pc, #8]	@ (8000a88 <SysTick_Handler+0x20>)
 8000a7e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a80:	f000 f97c 	bl	8000d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	200001b8 	.word	0x200001b8

08000a8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8000a90:	4802      	ldr	r0, [pc, #8]	@ (8000a9c <USART1_IRQHandler+0x10>)
 8000a92:	f000 f863 	bl	8000b5c <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000090 	.word	0x20000090

08000aa0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000aa4:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <SystemInit+0x20>)
 8000aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aaa:	4a05      	ldr	r2, [pc, #20]	@ (8000ac0 <SystemInit+0x20>)
 8000aac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ab0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8000ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b00 <Ringbuf_init+0x3c>)
 8000aca:	4a0e      	ldr	r2, [pc, #56]	@ (8000b04 <Ringbuf_init+0x40>)
 8000acc:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	@ (8000b08 <Ringbuf_init+0x44>)
 8000ad0:	4a0e      	ldr	r2, [pc, #56]	@ (8000b0c <Ringbuf_init+0x48>)
 8000ad2:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b10 <Ringbuf_init+0x4c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	689a      	ldr	r2, [r3, #8]
 8000ada:	4b0d      	ldr	r3, [pc, #52]	@ (8000b10 <Ringbuf_init+0x4c>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f042 0201 	orr.w	r2, r2, #1
 8000ae2:	609a      	str	r2, [r3, #8]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b10 <Ringbuf_init+0x4c>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	4b09      	ldr	r3, [pc, #36]	@ (8000b10 <Ringbuf_init+0x4c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f042 0220 	orr.w	r2, r2, #32
 8000af2:	601a      	str	r2, [r3, #0]
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	200005cc 	.word	0x200005cc
 8000b04:	200001bc 	.word	0x200001bc
 8000b08:	200005d0 	.word	0x200005d0
 8000b0c:	200003c4 	.word	0x200003c4
 8000b10:	20000090 	.word	0x20000090

08000b14 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000b26:	3301      	adds	r3, #1
 8000b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b2c:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d009      	beq.n	8000b4e <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000b40:	683a      	ldr	r2, [r7, #0]
 8000b42:	79f9      	ldrb	r1, [r7, #7]
 8000b44:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  }
}
 8000b4e:	bf00      	nop
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
	...

08000b5c <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	69db      	ldr	r3, [r3, #28]
 8000b6a:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	f003 0320 	and.w	r3, r3, #32
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d013      	beq.n	8000ba6 <Uart_isr+0x4a>
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	f003 0320 	and.w	r3, r3, #32
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d00e      	beq.n	8000ba6 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->ISR;                       /* Read status register */
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	69db      	ldr	r3, [r3, #28]
        unsigned char c = huart->Instance->RDR;     /* Read data register */
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b94:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8000b96:	4b1e      	ldr	r3, [pc, #120]	@ (8000c10 <Uart_isr+0xb4>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ffb8 	bl	8000b14 <store_char>
        return;
 8000ba4:	e031      	b.n	8000c0a <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d02c      	beq.n	8000c0a <Uart_isr+0xae>
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d027      	beq.n	8000c0a <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8000bba:	4b16      	ldr	r3, [pc, #88]	@ (8000c14 <Uart_isr+0xb8>)
 8000bbc:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000bc0:	4b14      	ldr	r3, [pc, #80]	@ (8000c14 <Uart_isr+0xb8>)
 8000bc2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d108      	bne.n	8000bdc <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000bd8:	601a      	str	r2, [r3, #0]

    	      huart->Instance->ISR;
    	      huart->Instance->RDR = c;

    	    }
    	return;
 8000bda:	e015      	b.n	8000c08 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8000bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c14 <Uart_isr+0xb8>)
 8000bde:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000be2:	4a0c      	ldr	r2, [pc, #48]	@ (8000c14 <Uart_isr+0xb8>)
 8000be4:	5cd3      	ldrb	r3, [r2, r3]
 8000be6:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8000be8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <Uart_isr+0xb8>)
 8000bea:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000bee:	3301      	adds	r3, #1
 8000bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000bf4:	4a07      	ldr	r2, [pc, #28]	@ (8000c14 <Uart_isr+0xb8>)
 8000bf6:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    	      huart->Instance->ISR;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	69db      	ldr	r3, [r3, #28]
    	      huart->Instance->RDR = c;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	7bba      	ldrb	r2, [r7, #14]
 8000c06:	625a      	str	r2, [r3, #36]	@ 0x24
    	return;
 8000c08:	bf00      	nop
    }
}
 8000c0a:	3718      	adds	r7, #24
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200005cc 	.word	0x200005cc
 8000c14:	200003c4 	.word	0x200003c4

08000c18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c18:	480d      	ldr	r0, [pc, #52]	@ (8000c50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c1a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c1c:	f7ff ff40 	bl	8000aa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c20:	480c      	ldr	r0, [pc, #48]	@ (8000c54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c22:	490d      	ldr	r1, [pc, #52]	@ (8000c58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c24:	4a0d      	ldr	r2, [pc, #52]	@ (8000c5c <LoopForever+0xe>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0a      	ldr	r2, [pc, #40]	@ (8000c60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c38:	4c0a      	ldr	r4, [pc, #40]	@ (8000c64 <LoopForever+0x16>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000c46:	f002 fb29 	bl	800329c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c4a:	f7ff fc5d 	bl	8000508 <main>

08000c4e <LoopForever>:

LoopForever:
    b LoopForever
 8000c4e:	e7fe      	b.n	8000c4e <LoopForever>
  ldr   r0, =_estack
 8000c50:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c5c:	0800334c 	.word	0x0800334c
  ldr r2, =_sbss
 8000c60:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c64:	200005d8 	.word	0x200005d8

08000c68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC1_2_IRQHandler>
	...

08000c6c <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8000c76:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <BSP_LED_Init+0x64>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7a:	4a15      	ldr	r2, [pc, #84]	@ (8000cd0 <BSP_LED_Init+0x64>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c82:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <BSP_LED_Init+0x64>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8000c8e:	2320      	movs	r3, #32
 8000c90:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	4a0c      	ldr	r2, [pc, #48]	@ (8000cd4 <BSP_LED_Init+0x68>)
 8000ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca6:	f107 020c 	add.w	r2, r7, #12
 8000caa:	4611      	mov	r1, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 fb43 	bl	8001338 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	4a07      	ldr	r2, [pc, #28]	@ (8000cd4 <BSP_LED_Init+0x68>)
 8000cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cba:	2120      	movs	r1, #32
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 fcbc 	bl	800163c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3720      	adds	r7, #32
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	20000004 	.word	0x20000004

08000cd8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce2:	2003      	movs	r0, #3
 8000ce4:	f000 f938 	bl	8000f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f000 f80d 	bl	8000d08 <HAL_InitTick>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d002      	beq.n	8000cfa <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	71fb      	strb	r3, [r7, #7]
 8000cf8:	e001      	b.n	8000cfe <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cfa:	f7ff fd6d 	bl	80007d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cfe:	79fb      	ldrb	r3, [r7, #7]

}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d10:	2300      	movs	r3, #0
 8000d12:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d14:	4b16      	ldr	r3, [pc, #88]	@ (8000d70 <HAL_InitTick+0x68>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d022      	beq.n	8000d62 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d1c:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <HAL_InitTick+0x6c>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b13      	ldr	r3, [pc, #76]	@ (8000d70 <HAL_InitTick+0x68>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000d28:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 f944 	bl	8000fbe <HAL_SYSTICK_Config>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d10f      	bne.n	8000d5c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b0f      	cmp	r3, #15
 8000d40:	d809      	bhi.n	8000d56 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d42:	2200      	movs	r2, #0
 8000d44:	6879      	ldr	r1, [r7, #4]
 8000d46:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4a:	f000 f910 	bl	8000f6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d78 <HAL_InitTick+0x70>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6013      	str	r3, [r2, #0]
 8000d54:	e007      	b.n	8000d66 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	73fb      	strb	r3, [r7, #15]
 8000d5a:	e004      	b.n	8000d66 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	73fb      	strb	r3, [r7, #15]
 8000d60:	e001      	b.n	8000d66 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	2000000c 	.word	0x2000000c
 8000d74:	20000000 	.word	0x20000000
 8000d78:	20000008 	.word	0x20000008

08000d7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d80:	4b05      	ldr	r3, [pc, #20]	@ (8000d98 <HAL_IncTick+0x1c>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <HAL_IncTick+0x20>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4413      	add	r3, r2
 8000d8a:	4a03      	ldr	r2, [pc, #12]	@ (8000d98 <HAL_IncTick+0x1c>)
 8000d8c:	6013      	str	r3, [r2, #0]
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	200005d4 	.word	0x200005d4
 8000d9c:	2000000c 	.word	0x2000000c

08000da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b03      	ldr	r3, [pc, #12]	@ (8000db4 <HAL_GetTick+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	200005d4 	.word	0x200005d4

08000db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dea:	4a04      	ldr	r2, [pc, #16]	@ (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e04:	4b04      	ldr	r3, [pc, #16]	@ (8000e18 <__NVIC_GetPriorityGrouping+0x18>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	f003 0307 	and.w	r3, r3, #7
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	db0b      	blt.n	8000e46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	f003 021f 	and.w	r2, r3, #31
 8000e34:	4907      	ldr	r1, [pc, #28]	@ (8000e54 <__NVIC_EnableIRQ+0x38>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	095b      	lsrs	r3, r3, #5
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000e100 	.word	0xe000e100

08000e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	6039      	str	r1, [r7, #0]
 8000e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	db0a      	blt.n	8000e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	490c      	ldr	r1, [pc, #48]	@ (8000ea4 <__NVIC_SetPriority+0x4c>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	0112      	lsls	r2, r2, #4
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e80:	e00a      	b.n	8000e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4908      	ldr	r1, [pc, #32]	@ (8000ea8 <__NVIC_SetPriority+0x50>)
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	f003 030f 	and.w	r3, r3, #15
 8000e8e:	3b04      	subs	r3, #4
 8000e90:	0112      	lsls	r2, r2, #4
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	440b      	add	r3, r1
 8000e96:	761a      	strb	r2, [r3, #24]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000e100 	.word	0xe000e100
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	@ 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f1c3 0307 	rsb	r3, r3, #7
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	bf28      	it	cs
 8000eca:	2304      	movcs	r3, #4
 8000ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	2b06      	cmp	r3, #6
 8000ed4:	d902      	bls.n	8000edc <NVIC_EncodePriority+0x30>
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3b03      	subs	r3, #3
 8000eda:	e000      	b.n	8000ede <NVIC_EncodePriority+0x32>
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43da      	mvns	r2, r3
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	401a      	ands	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	fa01 f303 	lsl.w	r3, r1, r3
 8000efe:	43d9      	mvns	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	4313      	orrs	r3, r2
         );
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3724      	adds	r7, #36	@ 0x24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
	...

08000f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f24:	d301      	bcc.n	8000f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00f      	b.n	8000f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f54 <SysTick_Config+0x40>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f32:	210f      	movs	r1, #15
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f7ff ff8e 	bl	8000e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f3c:	4b05      	ldr	r3, [pc, #20]	@ (8000f54 <SysTick_Config+0x40>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f42:	4b04      	ldr	r3, [pc, #16]	@ (8000f54 <SysTick_Config+0x40>)
 8000f44:	2207      	movs	r2, #7
 8000f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	e000e010 	.word	0xe000e010

08000f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ff29 	bl	8000db8 <__NVIC_SetPriorityGrouping>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b086      	sub	sp, #24
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	4603      	mov	r3, r0
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
 8000f7a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f7c:	f7ff ff40 	bl	8000e00 <__NVIC_GetPriorityGrouping>
 8000f80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	68b9      	ldr	r1, [r7, #8]
 8000f86:	6978      	ldr	r0, [r7, #20]
 8000f88:	f7ff ff90 	bl	8000eac <NVIC_EncodePriority>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f92:	4611      	mov	r1, r2
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff5f 	bl	8000e58 <__NVIC_SetPriority>
}
 8000f9a:	bf00      	nop
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	4603      	mov	r3, r0
 8000faa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff33 	bl	8000e1c <__NVIC_EnableIRQ>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff ffa4 	bl	8000f14 <SysTick_Config>
 8000fcc:	4603      	mov	r3, r0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e147      	b.n	800127a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d106      	bne.n	8001004 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff fc0e 	bl	8000820 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	699a      	ldr	r2, [r3, #24]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 0210 	bic.w	r2, r2, #16
 8001012:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001014:	f7ff fec4 	bl	8000da0 <HAL_GetTick>
 8001018:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800101a:	e012      	b.n	8001042 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800101c:	f7ff fec0 	bl	8000da0 <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b0a      	cmp	r3, #10
 8001028:	d90b      	bls.n	8001042 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800102e:	f043 0201 	orr.w	r2, r3, #1
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2203      	movs	r2, #3
 800103a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e11b      	b.n	800127a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f003 0308 	and.w	r3, r3, #8
 800104c:	2b08      	cmp	r3, #8
 800104e:	d0e5      	beq.n	800101c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	699a      	ldr	r2, [r3, #24]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f042 0201 	orr.w	r2, r2, #1
 800105e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001060:	f7ff fe9e 	bl	8000da0 <HAL_GetTick>
 8001064:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001066:	e012      	b.n	800108e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001068:	f7ff fe9a 	bl	8000da0 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b0a      	cmp	r3, #10
 8001074:	d90b      	bls.n	800108e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800107a:	f043 0201 	orr.w	r2, r3, #1
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2203      	movs	r2, #3
 8001086:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e0f5      	b.n	800127a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0e5      	beq.n	8001068 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	699a      	ldr	r2, [r3, #24]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f042 0202 	orr.w	r2, r2, #2
 80010aa:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a74      	ldr	r2, [pc, #464]	@ (8001284 <HAL_FDCAN_Init+0x2ac>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d103      	bne.n	80010be <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80010b6:	4a74      	ldr	r2, [pc, #464]	@ (8001288 <HAL_FDCAN_Init+0x2b0>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	7c1b      	ldrb	r3, [r3, #16]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d108      	bne.n	80010d8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	699a      	ldr	r2, [r3, #24]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80010d4:	619a      	str	r2, [r3, #24]
 80010d6:	e007      	b.n	80010e8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	699a      	ldr	r2, [r3, #24]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80010e6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7c5b      	ldrb	r3, [r3, #17]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d108      	bne.n	8001102 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	699a      	ldr	r2, [r3, #24]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80010fe:	619a      	str	r2, [r3, #24]
 8001100:	e007      	b.n	8001112 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	699a      	ldr	r2, [r3, #24]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001110:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	7c9b      	ldrb	r3, [r3, #18]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d108      	bne.n	800112c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	699a      	ldr	r2, [r3, #24]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001128:	619a      	str	r2, [r3, #24]
 800112a:	e007      	b.n	800113c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	699a      	ldr	r2, [r3, #24]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800113a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	430a      	orrs	r2, r1
 8001150:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	699a      	ldr	r2, [r3, #24]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001160:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	691a      	ldr	r2, [r3, #16]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 0210 	bic.w	r2, r2, #16
 8001170:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d108      	bne.n	800118c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	699a      	ldr	r2, [r3, #24]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f042 0204 	orr.w	r2, r2, #4
 8001188:	619a      	str	r2, [r3, #24]
 800118a:	e02c      	b.n	80011e6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d028      	beq.n	80011e6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	2b02      	cmp	r3, #2
 800119a:	d01c      	beq.n	80011d6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	699a      	ldr	r2, [r3, #24]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80011aa:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	691a      	ldr	r2, [r3, #16]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f042 0210 	orr.w	r2, r2, #16
 80011ba:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	d110      	bne.n	80011e6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	699a      	ldr	r2, [r3, #24]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f042 0220 	orr.w	r2, r2, #32
 80011d2:	619a      	str	r2, [r3, #24]
 80011d4:	e007      	b.n	80011e6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	699a      	ldr	r2, [r3, #24]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f042 0220 	orr.w	r2, r2, #32
 80011e4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80011f6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80011fe:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	3b01      	subs	r3, #1
 8001208:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800120e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001210:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800121a:	d115      	bne.n	8001248 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001220:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001226:	3b01      	subs	r3, #1
 8001228:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800122a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001230:	3b01      	subs	r3, #1
 8001232:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001234:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800123c:	3b01      	subs	r3, #1
 800123e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001244:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001246:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	430a      	orrs	r2, r1
 800125a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 f814 	bl	800128c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40006400 	.word	0x40006400
 8001288:	40006500 	.word	0x40006500

0800128c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001294:	4b27      	ldr	r3, [pc, #156]	@ (8001334 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001296:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012a6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012ae:	041a      	lsls	r2, r3, #16
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	430a      	orrs	r2, r1
 80012b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012cc:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012d4:	061a      	lsls	r2, r3, #24
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	430a      	orrs	r2, r1
 80012dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	e005      	b.n	800131a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3304      	adds	r3, #4
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	429a      	cmp	r2, r3
 8001324:	d3f3      	bcc.n	800130e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001326:	bf00      	nop
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	4000a400 	.word	0x4000a400

08001338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001338:	b480      	push	{r7}
 800133a:	b087      	sub	sp, #28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001346:	e15a      	b.n	80015fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	2101      	movs	r1, #1
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	fa01 f303 	lsl.w	r3, r1, r3
 8001354:	4013      	ands	r3, r2
 8001356:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 814c 	beq.w	80015f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	2b01      	cmp	r3, #1
 800136a:	d005      	beq.n	8001378 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001374:	2b02      	cmp	r3, #2
 8001376:	d130      	bne.n	80013da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	2203      	movs	r2, #3
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	68da      	ldr	r2, [r3, #12]
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ae:	2201      	movs	r2, #1
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	4013      	ands	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	091b      	lsrs	r3, r3, #4
 80013c4:	f003 0201 	and.w	r2, r3, #1
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	2b03      	cmp	r3, #3
 80013e4:	d017      	beq.n	8001416 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	2203      	movs	r2, #3
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4313      	orrs	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 0303 	and.w	r3, r3, #3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d123      	bne.n	800146a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	08da      	lsrs	r2, r3, #3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3208      	adds	r2, #8
 800142a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800142e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	220f      	movs	r2, #15
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	691a      	ldr	r2, [r3, #16]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	08da      	lsrs	r2, r3, #3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3208      	adds	r2, #8
 8001464:	6939      	ldr	r1, [r7, #16]
 8001466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	2203      	movs	r2, #3
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 0203 	and.w	r2, r3, #3
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f000 80a6 	beq.w	80015f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ac:	4b5b      	ldr	r3, [pc, #364]	@ (800161c <HAL_GPIO_Init+0x2e4>)
 80014ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014b0:	4a5a      	ldr	r2, [pc, #360]	@ (800161c <HAL_GPIO_Init+0x2e4>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80014b8:	4b58      	ldr	r3, [pc, #352]	@ (800161c <HAL_GPIO_Init+0x2e4>)
 80014ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014c4:	4a56      	ldr	r2, [pc, #344]	@ (8001620 <HAL_GPIO_Init+0x2e8>)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	089b      	lsrs	r3, r3, #2
 80014ca:	3302      	adds	r3, #2
 80014cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	220f      	movs	r2, #15
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014ee:	d01f      	beq.n	8001530 <HAL_GPIO_Init+0x1f8>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a4c      	ldr	r2, [pc, #304]	@ (8001624 <HAL_GPIO_Init+0x2ec>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d019      	beq.n	800152c <HAL_GPIO_Init+0x1f4>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a4b      	ldr	r2, [pc, #300]	@ (8001628 <HAL_GPIO_Init+0x2f0>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d013      	beq.n	8001528 <HAL_GPIO_Init+0x1f0>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a4a      	ldr	r2, [pc, #296]	@ (800162c <HAL_GPIO_Init+0x2f4>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d00d      	beq.n	8001524 <HAL_GPIO_Init+0x1ec>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a49      	ldr	r2, [pc, #292]	@ (8001630 <HAL_GPIO_Init+0x2f8>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d007      	beq.n	8001520 <HAL_GPIO_Init+0x1e8>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a48      	ldr	r2, [pc, #288]	@ (8001634 <HAL_GPIO_Init+0x2fc>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d101      	bne.n	800151c <HAL_GPIO_Init+0x1e4>
 8001518:	2305      	movs	r3, #5
 800151a:	e00a      	b.n	8001532 <HAL_GPIO_Init+0x1fa>
 800151c:	2306      	movs	r3, #6
 800151e:	e008      	b.n	8001532 <HAL_GPIO_Init+0x1fa>
 8001520:	2304      	movs	r3, #4
 8001522:	e006      	b.n	8001532 <HAL_GPIO_Init+0x1fa>
 8001524:	2303      	movs	r3, #3
 8001526:	e004      	b.n	8001532 <HAL_GPIO_Init+0x1fa>
 8001528:	2302      	movs	r3, #2
 800152a:	e002      	b.n	8001532 <HAL_GPIO_Init+0x1fa>
 800152c:	2301      	movs	r3, #1
 800152e:	e000      	b.n	8001532 <HAL_GPIO_Init+0x1fa>
 8001530:	2300      	movs	r3, #0
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	f002 0203 	and.w	r2, r2, #3
 8001538:	0092      	lsls	r2, r2, #2
 800153a:	4093      	lsls	r3, r2
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001542:	4937      	ldr	r1, [pc, #220]	@ (8001620 <HAL_GPIO_Init+0x2e8>)
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	089b      	lsrs	r3, r3, #2
 8001548:	3302      	adds	r3, #2
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001550:	4b39      	ldr	r3, [pc, #228]	@ (8001638 <HAL_GPIO_Init+0x300>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	43db      	mvns	r3, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4013      	ands	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001574:	4a30      	ldr	r2, [pc, #192]	@ (8001638 <HAL_GPIO_Init+0x300>)
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800157a:	4b2f      	ldr	r3, [pc, #188]	@ (8001638 <HAL_GPIO_Init+0x300>)
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	43db      	mvns	r3, r3
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4013      	ands	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4313      	orrs	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800159e:	4a26      	ldr	r2, [pc, #152]	@ (8001638 <HAL_GPIO_Init+0x300>)
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80015a4:	4b24      	ldr	r3, [pc, #144]	@ (8001638 <HAL_GPIO_Init+0x300>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4013      	ands	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001638 <HAL_GPIO_Init+0x300>)
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001638 <HAL_GPIO_Init+0x300>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	43db      	mvns	r3, r3
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	4013      	ands	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015f2:	4a11      	ldr	r2, [pc, #68]	@ (8001638 <HAL_GPIO_Init+0x300>)
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	3301      	adds	r3, #1
 80015fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	fa22 f303 	lsr.w	r3, r2, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	f47f ae9d 	bne.w	8001348 <HAL_GPIO_Init+0x10>
  }
}
 800160e:	bf00      	nop
 8001610:	bf00      	nop
 8001612:	371c      	adds	r7, #28
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	40021000 	.word	0x40021000
 8001620:	40010000 	.word	0x40010000
 8001624:	48000400 	.word	0x48000400
 8001628:	48000800 	.word	0x48000800
 800162c:	48000c00 	.word	0x48000c00
 8001630:	48001000 	.word	0x48001000
 8001634:	48001400 	.word	0x48001400
 8001638:	40010400 	.word	0x40010400

0800163c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	807b      	strh	r3, [r7, #2]
 8001648:	4613      	mov	r3, r2
 800164a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800164c:	787b      	ldrb	r3, [r7, #1]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001652:	887a      	ldrh	r2, [r7, #2]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001658:	e002      	b.n	8001660 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800165a:	887a      	ldrh	r2, [r7, #2]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d141      	bne.n	80016fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800167a:	4b4b      	ldr	r3, [pc, #300]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001686:	d131      	bne.n	80016ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001688:	4b47      	ldr	r3, [pc, #284]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800168a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800168e:	4a46      	ldr	r2, [pc, #280]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001690:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001694:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001698:	4b43      	ldr	r3, [pc, #268]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016a0:	4a41      	ldr	r2, [pc, #260]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016a8:	4b40      	ldr	r3, [pc, #256]	@ (80017ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2232      	movs	r2, #50	@ 0x32
 80016ae:	fb02 f303 	mul.w	r3, r2, r3
 80016b2:	4a3f      	ldr	r2, [pc, #252]	@ (80017b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016b4:	fba2 2303 	umull	r2, r3, r2, r3
 80016b8:	0c9b      	lsrs	r3, r3, #18
 80016ba:	3301      	adds	r3, #1
 80016bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016be:	e002      	b.n	80016c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016c6:	4b38      	ldr	r3, [pc, #224]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016d2:	d102      	bne.n	80016da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f2      	bne.n	80016c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016da:	4b33      	ldr	r3, [pc, #204]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016e6:	d158      	bne.n	800179a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e057      	b.n	800179c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016ec:	4b2e      	ldr	r3, [pc, #184]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016f2:	4a2d      	ldr	r2, [pc, #180]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80016fc:	e04d      	b.n	800179a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001704:	d141      	bne.n	800178a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001706:	4b28      	ldr	r3, [pc, #160]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800170e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001712:	d131      	bne.n	8001778 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001714:	4b24      	ldr	r3, [pc, #144]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800171a:	4a23      	ldr	r2, [pc, #140]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800171c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001720:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001724:	4b20      	ldr	r3, [pc, #128]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800172c:	4a1e      	ldr	r2, [pc, #120]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800172e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001732:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001734:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2232      	movs	r2, #50	@ 0x32
 800173a:	fb02 f303 	mul.w	r3, r2, r3
 800173e:	4a1c      	ldr	r2, [pc, #112]	@ (80017b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001740:	fba2 2303 	umull	r2, r3, r2, r3
 8001744:	0c9b      	lsrs	r3, r3, #18
 8001746:	3301      	adds	r3, #1
 8001748:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800174a:	e002      	b.n	8001752 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	3b01      	subs	r3, #1
 8001750:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001752:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800175a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800175e:	d102      	bne.n	8001766 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f2      	bne.n	800174c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001766:	4b10      	ldr	r3, [pc, #64]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800176e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001772:	d112      	bne.n	800179a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e011      	b.n	800179c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001778:	4b0b      	ldr	r3, [pc, #44]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800177a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800177e:	4a0a      	ldr	r2, [pc, #40]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001784:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001788:	e007      	b.n	800179a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800178a:	4b07      	ldr	r3, [pc, #28]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001792:	4a05      	ldr	r2, [pc, #20]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001794:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001798:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	40007000 	.word	0x40007000
 80017ac:	20000000 	.word	0x20000000
 80017b0:	431bde83 	.word	0x431bde83

080017b4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80017b8:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	4a04      	ldr	r2, [pc, #16]	@ (80017d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80017be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017c2:	6093      	str	r3, [r2, #8]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40007000 	.word	0x40007000

080017d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b088      	sub	sp, #32
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e2fe      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d075      	beq.n	80018de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017f2:	4b97      	ldr	r3, [pc, #604]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 030c 	and.w	r3, r3, #12
 80017fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017fc:	4b94      	ldr	r3, [pc, #592]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	2b0c      	cmp	r3, #12
 800180a:	d102      	bne.n	8001812 <HAL_RCC_OscConfig+0x3e>
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	2b03      	cmp	r3, #3
 8001810:	d002      	beq.n	8001818 <HAL_RCC_OscConfig+0x44>
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	2b08      	cmp	r3, #8
 8001816:	d10b      	bne.n	8001830 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001818:	4b8d      	ldr	r3, [pc, #564]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d05b      	beq.n	80018dc <HAL_RCC_OscConfig+0x108>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d157      	bne.n	80018dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e2d9      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001838:	d106      	bne.n	8001848 <HAL_RCC_OscConfig+0x74>
 800183a:	4b85      	ldr	r3, [pc, #532]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a84      	ldr	r2, [pc, #528]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 8001840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	e01d      	b.n	8001884 <HAL_RCC_OscConfig+0xb0>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001850:	d10c      	bne.n	800186c <HAL_RCC_OscConfig+0x98>
 8001852:	4b7f      	ldr	r3, [pc, #508]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a7e      	ldr	r2, [pc, #504]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 8001858:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	4b7c      	ldr	r3, [pc, #496]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a7b      	ldr	r2, [pc, #492]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 8001864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	e00b      	b.n	8001884 <HAL_RCC_OscConfig+0xb0>
 800186c:	4b78      	ldr	r3, [pc, #480]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a77      	ldr	r2, [pc, #476]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 8001872:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	4b75      	ldr	r3, [pc, #468]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a74      	ldr	r2, [pc, #464]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 800187e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d013      	beq.n	80018b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff fa88 	bl	8000da0 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001894:	f7ff fa84 	bl	8000da0 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b64      	cmp	r3, #100	@ 0x64
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e29e      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018a6:	4b6a      	ldr	r3, [pc, #424]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0f0      	beq.n	8001894 <HAL_RCC_OscConfig+0xc0>
 80018b2:	e014      	b.n	80018de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7ff fa74 	bl	8000da0 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018bc:	f7ff fa70 	bl	8000da0 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b64      	cmp	r3, #100	@ 0x64
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e28a      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ce:	4b60      	ldr	r3, [pc, #384]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0xe8>
 80018da:	e000      	b.n	80018de <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d075      	beq.n	80019d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ea:	4b59      	ldr	r3, [pc, #356]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018f4:	4b56      	ldr	r3, [pc, #344]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	2b0c      	cmp	r3, #12
 8001902:	d102      	bne.n	800190a <HAL_RCC_OscConfig+0x136>
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	2b02      	cmp	r3, #2
 8001908:	d002      	beq.n	8001910 <HAL_RCC_OscConfig+0x13c>
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	2b04      	cmp	r3, #4
 800190e:	d11f      	bne.n	8001950 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001910:	4b4f      	ldr	r3, [pc, #316]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001918:	2b00      	cmp	r3, #0
 800191a:	d005      	beq.n	8001928 <HAL_RCC_OscConfig+0x154>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e25d      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001928:	4b49      	ldr	r3, [pc, #292]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	061b      	lsls	r3, r3, #24
 8001936:	4946      	ldr	r1, [pc, #280]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 8001938:	4313      	orrs	r3, r2
 800193a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800193c:	4b45      	ldr	r3, [pc, #276]	@ (8001a54 <HAL_RCC_OscConfig+0x280>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff f9e1 	bl	8000d08 <HAL_InitTick>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d043      	beq.n	80019d4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e249      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d023      	beq.n	80019a0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001958:	4b3d      	ldr	r3, [pc, #244]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a3c      	ldr	r2, [pc, #240]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 800195e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001964:	f7ff fa1c 	bl	8000da0 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800196c:	f7ff fa18 	bl	8000da0 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e232      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800197e:	4b34      	ldr	r3, [pc, #208]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198a:	4b31      	ldr	r3, [pc, #196]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	061b      	lsls	r3, r3, #24
 8001998:	492d      	ldr	r1, [pc, #180]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 800199a:	4313      	orrs	r3, r2
 800199c:	604b      	str	r3, [r1, #4]
 800199e:	e01a      	b.n	80019d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a2a      	ldr	r2, [pc, #168]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 80019a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ac:	f7ff f9f8 	bl	8000da0 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b4:	f7ff f9f4 	bl	8000da0 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e20e      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019c6:	4b22      	ldr	r3, [pc, #136]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x1e0>
 80019d2:	e000      	b.n	80019d6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d041      	beq.n	8001a66 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d01c      	beq.n	8001a24 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ea:	4b19      	ldr	r3, [pc, #100]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 80019ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019f0:	4a17      	ldr	r2, [pc, #92]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fa:	f7ff f9d1 	bl	8000da0 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a02:	f7ff f9cd 	bl	8000da0 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e1e7      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a14:	4b0e      	ldr	r3, [pc, #56]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 8001a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0ef      	beq.n	8001a02 <HAL_RCC_OscConfig+0x22e>
 8001a22:	e020      	b.n	8001a66 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a24:	4b0a      	ldr	r3, [pc, #40]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 8001a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a2a:	4a09      	ldr	r2, [pc, #36]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 8001a2c:	f023 0301 	bic.w	r3, r3, #1
 8001a30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a34:	f7ff f9b4 	bl	8000da0 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a3a:	e00d      	b.n	8001a58 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a3c:	f7ff f9b0 	bl	8000da0 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d906      	bls.n	8001a58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e1ca      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
 8001a4e:	bf00      	nop
 8001a50:	40021000 	.word	0x40021000
 8001a54:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a58:	4b8c      	ldr	r3, [pc, #560]	@ (8001c8c <HAL_RCC_OscConfig+0x4b8>)
 8001a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1ea      	bne.n	8001a3c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 80a6 	beq.w	8001bc0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a74:	2300      	movs	r3, #0
 8001a76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a78:	4b84      	ldr	r3, [pc, #528]	@ (8001c8c <HAL_RCC_OscConfig+0x4b8>)
 8001a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_OscConfig+0x2b4>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <HAL_RCC_OscConfig+0x2b6>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00d      	beq.n	8001aaa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a8e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c8c <HAL_RCC_OscConfig+0x4b8>)
 8001a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a92:	4a7e      	ldr	r2, [pc, #504]	@ (8001c8c <HAL_RCC_OscConfig+0x4b8>)
 8001a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a98:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a9a:	4b7c      	ldr	r3, [pc, #496]	@ (8001c8c <HAL_RCC_OscConfig+0x4b8>)
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aaa:	4b79      	ldr	r3, [pc, #484]	@ (8001c90 <HAL_RCC_OscConfig+0x4bc>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d118      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ab6:	4b76      	ldr	r3, [pc, #472]	@ (8001c90 <HAL_RCC_OscConfig+0x4bc>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a75      	ldr	r2, [pc, #468]	@ (8001c90 <HAL_RCC_OscConfig+0x4bc>)
 8001abc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac2:	f7ff f96d 	bl	8000da0 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aca:	f7ff f969 	bl	8000da0 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e183      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001adc:	4b6c      	ldr	r3, [pc, #432]	@ (8001c90 <HAL_RCC_OscConfig+0x4bc>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d108      	bne.n	8001b02 <HAL_RCC_OscConfig+0x32e>
 8001af0:	4b66      	ldr	r3, [pc, #408]	@ (8001c8c <HAL_RCC_OscConfig+0x4b8>)
 8001af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001af6:	4a65      	ldr	r2, [pc, #404]	@ (8001c8c <HAL_RCC_OscConfig+0x4b8>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b00:	e024      	b.n	8001b4c <HAL_RCC_OscConfig+0x378>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	2b05      	cmp	r3, #5
 8001b08:	d110      	bne.n	8001b2c <HAL_RCC_OscConfig+0x358>
 8001b0a:	4b60      	ldr	r3, [pc, #384]	@ (8001c8c <HAL_RCC_OscConfig+0x4b8>)
 8001b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b10:	4a5e      	ldr	r2, [pc, #376]	@ (8001c8c <HAL_RCC_OscConfig+0x4b8>)
 8001b12:	f043 0304 	orr.w	r3, r3, #4
 8001b16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b1a:	4b5c      	ldr	r3, [pc, #368]	@ (8001c8c <HAL_RCC_OscConfig+0x4b8>)
 8001b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b20:	4a5a      	ldr	r2, [pc, #360]	@ (8001c8c <HAL_RCC_OscConfig+0x4b8>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b2a:	e00f      	b.n	8001b4c <HAL_RCC_OscConfig+0x378>
 8001b2c:	4b57      	ldr	r3, [pc, #348]	@ (8001c8c <HAL_RCC_OscConfig+0x4b8>)
 8001b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b32:	4a56      	ldr	r2, [pc, #344]	@ (8001c8c <HAL_RCC_OscConfig+0x4b8>)
 8001b34:	f023 0301 	bic.w	r3, r3, #1
 8001b38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b3c:	4b53      	ldr	r3, [pc, #332]	@ (8001c8c <HAL_RCC_OscConfig+0x4b8>)
 8001b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b42:	4a52      	ldr	r2, [pc, #328]	@ (8001c8c <HAL_RCC_OscConfig+0x4b8>)
 8001b44:	f023 0304 	bic.w	r3, r3, #4
 8001b48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d016      	beq.n	8001b82 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b54:	f7ff f924 	bl	8000da0 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b5a:	e00a      	b.n	8001b72 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b5c:	f7ff f920 	bl	8000da0 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e138      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b72:	4b46      	ldr	r3, [pc, #280]	@ (8001c8c <HAL_RCC_OscConfig+0x4b8>)
 8001b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0ed      	beq.n	8001b5c <HAL_RCC_OscConfig+0x388>
 8001b80:	e015      	b.n	8001bae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b82:	f7ff f90d 	bl	8000da0 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b88:	e00a      	b.n	8001ba0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b8a:	f7ff f909 	bl	8000da0 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e121      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ba0:	4b3a      	ldr	r3, [pc, #232]	@ (8001c8c <HAL_RCC_OscConfig+0x4b8>)
 8001ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1ed      	bne.n	8001b8a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bae:	7ffb      	ldrb	r3, [r7, #31]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d105      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bb4:	4b35      	ldr	r3, [pc, #212]	@ (8001c8c <HAL_RCC_OscConfig+0x4b8>)
 8001bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb8:	4a34      	ldr	r2, [pc, #208]	@ (8001c8c <HAL_RCC_OscConfig+0x4b8>)
 8001bba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bbe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0320 	and.w	r3, r3, #32
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d03c      	beq.n	8001c46 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d01c      	beq.n	8001c0e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8001c8c <HAL_RCC_OscConfig+0x4b8>)
 8001bd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bda:	4a2c      	ldr	r2, [pc, #176]	@ (8001c8c <HAL_RCC_OscConfig+0x4b8>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be4:	f7ff f8dc 	bl	8000da0 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bec:	f7ff f8d8 	bl	8000da0 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e0f2      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bfe:	4b23      	ldr	r3, [pc, #140]	@ (8001c8c <HAL_RCC_OscConfig+0x4b8>)
 8001c00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0ef      	beq.n	8001bec <HAL_RCC_OscConfig+0x418>
 8001c0c:	e01b      	b.n	8001c46 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001c8c <HAL_RCC_OscConfig+0x4b8>)
 8001c10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c14:	4a1d      	ldr	r2, [pc, #116]	@ (8001c8c <HAL_RCC_OscConfig+0x4b8>)
 8001c16:	f023 0301 	bic.w	r3, r3, #1
 8001c1a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1e:	f7ff f8bf 	bl	8000da0 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c26:	f7ff f8bb 	bl	8000da0 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e0d5      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c38:	4b14      	ldr	r3, [pc, #80]	@ (8001c8c <HAL_RCC_OscConfig+0x4b8>)
 8001c3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1ef      	bne.n	8001c26 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 80c9 	beq.w	8001de2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c50:	4b0e      	ldr	r3, [pc, #56]	@ (8001c8c <HAL_RCC_OscConfig+0x4b8>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 030c 	and.w	r3, r3, #12
 8001c58:	2b0c      	cmp	r3, #12
 8001c5a:	f000 8083 	beq.w	8001d64 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d15e      	bne.n	8001d24 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c66:	4b09      	ldr	r3, [pc, #36]	@ (8001c8c <HAL_RCC_OscConfig+0x4b8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a08      	ldr	r2, [pc, #32]	@ (8001c8c <HAL_RCC_OscConfig+0x4b8>)
 8001c6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c72:	f7ff f895 	bl	8000da0 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c78:	e00c      	b.n	8001c94 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7a:	f7ff f891 	bl	8000da0 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d905      	bls.n	8001c94 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e0ab      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c94:	4b55      	ldr	r3, [pc, #340]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1ec      	bne.n	8001c7a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca0:	4b52      	ldr	r3, [pc, #328]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	4b52      	ldr	r3, [pc, #328]	@ (8001df0 <HAL_RCC_OscConfig+0x61c>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6a11      	ldr	r1, [r2, #32]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001cb0:	3a01      	subs	r2, #1
 8001cb2:	0112      	lsls	r2, r2, #4
 8001cb4:	4311      	orrs	r1, r2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001cba:	0212      	lsls	r2, r2, #8
 8001cbc:	4311      	orrs	r1, r2
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001cc2:	0852      	lsrs	r2, r2, #1
 8001cc4:	3a01      	subs	r2, #1
 8001cc6:	0552      	lsls	r2, r2, #21
 8001cc8:	4311      	orrs	r1, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001cce:	0852      	lsrs	r2, r2, #1
 8001cd0:	3a01      	subs	r2, #1
 8001cd2:	0652      	lsls	r2, r2, #25
 8001cd4:	4311      	orrs	r1, r2
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001cda:	06d2      	lsls	r2, r2, #27
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	4943      	ldr	r1, [pc, #268]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce4:	4b41      	ldr	r3, [pc, #260]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a40      	ldr	r2, [pc, #256]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001cea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cf0:	4b3e      	ldr	r3, [pc, #248]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	4a3d      	ldr	r2, [pc, #244]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001cf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cfa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfc:	f7ff f850 	bl	8000da0 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d04:	f7ff f84c 	bl	8000da0 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e066      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d16:	4b35      	ldr	r3, [pc, #212]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0x530>
 8001d22:	e05e      	b.n	8001de2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d24:	4b31      	ldr	r3, [pc, #196]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a30      	ldr	r2, [pc, #192]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001d2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d30:	f7ff f836 	bl	8000da0 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d38:	f7ff f832 	bl	8000da0 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e04c      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d4a:	4b28      	ldr	r3, [pc, #160]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001d56:	4b25      	ldr	r3, [pc, #148]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	4924      	ldr	r1, [pc, #144]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001d5c:	4b25      	ldr	r3, [pc, #148]	@ (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001d5e:	4013      	ands	r3, r2
 8001d60:	60cb      	str	r3, [r1, #12]
 8001d62:	e03e      	b.n	8001de2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d101      	bne.n	8001d70 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e039      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001d70:	4b1e      	ldr	r3, [pc, #120]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f003 0203 	and.w	r2, r3, #3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d12c      	bne.n	8001dde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d123      	bne.n	8001dde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d11b      	bne.n	8001dde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d113      	bne.n	8001dde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc0:	085b      	lsrs	r3, r3, #1
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d109      	bne.n	8001dde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dd4:	085b      	lsrs	r3, r3, #1
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d001      	beq.n	8001de2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3720      	adds	r7, #32
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40021000 	.word	0x40021000
 8001df0:	019f800c 	.word	0x019f800c
 8001df4:	feeefffc 	.word	0xfeeefffc

08001df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e11e      	b.n	800204e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e10:	4b91      	ldr	r3, [pc, #580]	@ (8002058 <HAL_RCC_ClockConfig+0x260>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 030f 	and.w	r3, r3, #15
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d910      	bls.n	8001e40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1e:	4b8e      	ldr	r3, [pc, #568]	@ (8002058 <HAL_RCC_ClockConfig+0x260>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f023 020f 	bic.w	r2, r3, #15
 8001e26:	498c      	ldr	r1, [pc, #560]	@ (8002058 <HAL_RCC_ClockConfig+0x260>)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2e:	4b8a      	ldr	r3, [pc, #552]	@ (8002058 <HAL_RCC_ClockConfig+0x260>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d001      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e106      	b.n	800204e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d073      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b03      	cmp	r3, #3
 8001e52:	d129      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e54:	4b81      	ldr	r3, [pc, #516]	@ (800205c <HAL_RCC_ClockConfig+0x264>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e0f4      	b.n	800204e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001e64:	f000 f99e 	bl	80021a4 <RCC_GetSysClockFreqFromPLLSource>
 8001e68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4a7c      	ldr	r2, [pc, #496]	@ (8002060 <HAL_RCC_ClockConfig+0x268>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d93f      	bls.n	8001ef2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e72:	4b7a      	ldr	r3, [pc, #488]	@ (800205c <HAL_RCC_ClockConfig+0x264>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d009      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d033      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d12f      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e92:	4b72      	ldr	r3, [pc, #456]	@ (800205c <HAL_RCC_ClockConfig+0x264>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e9a:	4a70      	ldr	r2, [pc, #448]	@ (800205c <HAL_RCC_ClockConfig+0x264>)
 8001e9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ea0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ea2:	2380      	movs	r3, #128	@ 0x80
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	e024      	b.n	8001ef2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d107      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eb0:	4b6a      	ldr	r3, [pc, #424]	@ (800205c <HAL_RCC_ClockConfig+0x264>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d109      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0c6      	b.n	800204e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ec0:	4b66      	ldr	r3, [pc, #408]	@ (800205c <HAL_RCC_ClockConfig+0x264>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0be      	b.n	800204e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ed0:	f000 f8ce 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 8001ed4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4a61      	ldr	r2, [pc, #388]	@ (8002060 <HAL_RCC_ClockConfig+0x268>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d909      	bls.n	8001ef2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ede:	4b5f      	ldr	r3, [pc, #380]	@ (800205c <HAL_RCC_ClockConfig+0x264>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ee6:	4a5d      	ldr	r2, [pc, #372]	@ (800205c <HAL_RCC_ClockConfig+0x264>)
 8001ee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001eec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001eee:	2380      	movs	r3, #128	@ 0x80
 8001ef0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ef2:	4b5a      	ldr	r3, [pc, #360]	@ (800205c <HAL_RCC_ClockConfig+0x264>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f023 0203 	bic.w	r2, r3, #3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	4957      	ldr	r1, [pc, #348]	@ (800205c <HAL_RCC_ClockConfig+0x264>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f04:	f7fe ff4c 	bl	8000da0 <HAL_GetTick>
 8001f08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0a:	e00a      	b.n	8001f22 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f0c:	f7fe ff48 	bl	8000da0 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e095      	b.n	800204e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f22:	4b4e      	ldr	r3, [pc, #312]	@ (800205c <HAL_RCC_ClockConfig+0x264>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 020c 	and.w	r2, r3, #12
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d1eb      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d023      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f4c:	4b43      	ldr	r3, [pc, #268]	@ (800205c <HAL_RCC_ClockConfig+0x264>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	4a42      	ldr	r2, [pc, #264]	@ (800205c <HAL_RCC_ClockConfig+0x264>)
 8001f52:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001f56:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d007      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001f64:	4b3d      	ldr	r3, [pc, #244]	@ (800205c <HAL_RCC_ClockConfig+0x264>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001f6c:	4a3b      	ldr	r2, [pc, #236]	@ (800205c <HAL_RCC_ClockConfig+0x264>)
 8001f6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001f72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f74:	4b39      	ldr	r3, [pc, #228]	@ (800205c <HAL_RCC_ClockConfig+0x264>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	4936      	ldr	r1, [pc, #216]	@ (800205c <HAL_RCC_ClockConfig+0x264>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	608b      	str	r3, [r1, #8]
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	2b80      	cmp	r3, #128	@ 0x80
 8001f8c:	d105      	bne.n	8001f9a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001f8e:	4b33      	ldr	r3, [pc, #204]	@ (800205c <HAL_RCC_ClockConfig+0x264>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	4a32      	ldr	r2, [pc, #200]	@ (800205c <HAL_RCC_ClockConfig+0x264>)
 8001f94:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f98:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f9a:	4b2f      	ldr	r3, [pc, #188]	@ (8002058 <HAL_RCC_ClockConfig+0x260>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d21d      	bcs.n	8001fe4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa8:	4b2b      	ldr	r3, [pc, #172]	@ (8002058 <HAL_RCC_ClockConfig+0x260>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f023 020f 	bic.w	r2, r3, #15
 8001fb0:	4929      	ldr	r1, [pc, #164]	@ (8002058 <HAL_RCC_ClockConfig+0x260>)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fb8:	f7fe fef2 	bl	8000da0 <HAL_GetTick>
 8001fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fbe:	e00a      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc0:	f7fe feee 	bl	8000da0 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e03b      	b.n	800204e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd6:	4b20      	ldr	r3, [pc, #128]	@ (8002058 <HAL_RCC_ClockConfig+0x260>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d1ed      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d008      	beq.n	8002002 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800205c <HAL_RCC_ClockConfig+0x264>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	4917      	ldr	r1, [pc, #92]	@ (800205c <HAL_RCC_ClockConfig+0x264>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d009      	beq.n	8002022 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800200e:	4b13      	ldr	r3, [pc, #76]	@ (800205c <HAL_RCC_ClockConfig+0x264>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	490f      	ldr	r1, [pc, #60]	@ (800205c <HAL_RCC_ClockConfig+0x264>)
 800201e:	4313      	orrs	r3, r2
 8002020:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002022:	f000 f825 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 8002026:	4602      	mov	r2, r0
 8002028:	4b0c      	ldr	r3, [pc, #48]	@ (800205c <HAL_RCC_ClockConfig+0x264>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	490c      	ldr	r1, [pc, #48]	@ (8002064 <HAL_RCC_ClockConfig+0x26c>)
 8002034:	5ccb      	ldrb	r3, [r1, r3]
 8002036:	f003 031f 	and.w	r3, r3, #31
 800203a:	fa22 f303 	lsr.w	r3, r2, r3
 800203e:	4a0a      	ldr	r2, [pc, #40]	@ (8002068 <HAL_RCC_ClockConfig+0x270>)
 8002040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002042:	4b0a      	ldr	r3, [pc, #40]	@ (800206c <HAL_RCC_ClockConfig+0x274>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fe5e 	bl	8000d08 <HAL_InitTick>
 800204c:	4603      	mov	r3, r0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40022000 	.word	0x40022000
 800205c:	40021000 	.word	0x40021000
 8002060:	04c4b400 	.word	0x04c4b400
 8002064:	080032fc 	.word	0x080032fc
 8002068:	20000000 	.word	0x20000000
 800206c:	20000008 	.word	0x20000008

08002070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002070:	b480      	push	{r7}
 8002072:	b087      	sub	sp, #28
 8002074:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002076:	4b2c      	ldr	r3, [pc, #176]	@ (8002128 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b04      	cmp	r3, #4
 8002080:	d102      	bne.n	8002088 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002082:	4b2a      	ldr	r3, [pc, #168]	@ (800212c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	e047      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002088:	4b27      	ldr	r3, [pc, #156]	@ (8002128 <HAL_RCC_GetSysClockFreq+0xb8>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 030c 	and.w	r3, r3, #12
 8002090:	2b08      	cmp	r3, #8
 8002092:	d102      	bne.n	800209a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002094:	4b26      	ldr	r3, [pc, #152]	@ (8002130 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	e03e      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800209a:	4b23      	ldr	r3, [pc, #140]	@ (8002128 <HAL_RCC_GetSysClockFreq+0xb8>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 030c 	and.w	r3, r3, #12
 80020a2:	2b0c      	cmp	r3, #12
 80020a4:	d136      	bne.n	8002114 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020a6:	4b20      	ldr	r3, [pc, #128]	@ (8002128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	3301      	adds	r3, #1
 80020bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d10c      	bne.n	80020de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020c4:	4a1a      	ldr	r2, [pc, #104]	@ (8002130 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020cc:	4a16      	ldr	r2, [pc, #88]	@ (8002128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ce:	68d2      	ldr	r2, [r2, #12]
 80020d0:	0a12      	lsrs	r2, r2, #8
 80020d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80020d6:	fb02 f303 	mul.w	r3, r2, r3
 80020da:	617b      	str	r3, [r7, #20]
      break;
 80020dc:	e00c      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020de:	4a13      	ldr	r2, [pc, #76]	@ (800212c <HAL_RCC_GetSysClockFreq+0xbc>)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e6:	4a10      	ldr	r2, [pc, #64]	@ (8002128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020e8:	68d2      	ldr	r2, [r2, #12]
 80020ea:	0a12      	lsrs	r2, r2, #8
 80020ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80020f0:	fb02 f303 	mul.w	r3, r2, r3
 80020f4:	617b      	str	r3, [r7, #20]
      break;
 80020f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	0e5b      	lsrs	r3, r3, #25
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	3301      	adds	r3, #1
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	e001      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002118:	693b      	ldr	r3, [r7, #16]
}
 800211a:	4618      	mov	r0, r3
 800211c:	371c      	adds	r7, #28
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000
 800212c:	00f42400 	.word	0x00f42400
 8002130:	007a1200 	.word	0x007a1200

08002134 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002138:	4b03      	ldr	r3, [pc, #12]	@ (8002148 <HAL_RCC_GetHCLKFreq+0x14>)
 800213a:	681b      	ldr	r3, [r3, #0]
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	20000000 	.word	0x20000000

0800214c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002150:	f7ff fff0 	bl	8002134 <HAL_RCC_GetHCLKFreq>
 8002154:	4602      	mov	r2, r0
 8002156:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	0a1b      	lsrs	r3, r3, #8
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	4904      	ldr	r1, [pc, #16]	@ (8002174 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002162:	5ccb      	ldrb	r3, [r1, r3]
 8002164:	f003 031f 	and.w	r3, r3, #31
 8002168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800216c:	4618      	mov	r0, r3
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40021000 	.word	0x40021000
 8002174:	0800330c 	.word	0x0800330c

08002178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800217c:	f7ff ffda 	bl	8002134 <HAL_RCC_GetHCLKFreq>
 8002180:	4602      	mov	r2, r0
 8002182:	4b06      	ldr	r3, [pc, #24]	@ (800219c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	0adb      	lsrs	r3, r3, #11
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	4904      	ldr	r1, [pc, #16]	@ (80021a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800218e:	5ccb      	ldrb	r3, [r1, r3]
 8002190:	f003 031f 	and.w	r3, r3, #31
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002198:	4618      	mov	r0, r3
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40021000 	.word	0x40021000
 80021a0:	0800330c 	.word	0x0800330c

080021a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b087      	sub	sp, #28
 80021a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002224 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002224 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	091b      	lsrs	r3, r3, #4
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	3301      	adds	r3, #1
 80021c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	d10c      	bne.n	80021e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021c8:	4a17      	ldr	r2, [pc, #92]	@ (8002228 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d0:	4a14      	ldr	r2, [pc, #80]	@ (8002224 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021d2:	68d2      	ldr	r2, [r2, #12]
 80021d4:	0a12      	lsrs	r2, r2, #8
 80021d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80021da:	fb02 f303 	mul.w	r3, r2, r3
 80021de:	617b      	str	r3, [r7, #20]
    break;
 80021e0:	e00c      	b.n	80021fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021e2:	4a12      	ldr	r2, [pc, #72]	@ (800222c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ea:	4a0e      	ldr	r2, [pc, #56]	@ (8002224 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021ec:	68d2      	ldr	r2, [r2, #12]
 80021ee:	0a12      	lsrs	r2, r2, #8
 80021f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80021f4:	fb02 f303 	mul.w	r3, r2, r3
 80021f8:	617b      	str	r3, [r7, #20]
    break;
 80021fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021fc:	4b09      	ldr	r3, [pc, #36]	@ (8002224 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	0e5b      	lsrs	r3, r3, #25
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	3301      	adds	r3, #1
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	fbb2 f3f3 	udiv	r3, r2, r3
 8002214:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002216:	687b      	ldr	r3, [r7, #4]
}
 8002218:	4618      	mov	r0, r3
 800221a:	371c      	adds	r7, #28
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	40021000 	.word	0x40021000
 8002228:	007a1200 	.word	0x007a1200
 800222c:	00f42400 	.word	0x00f42400

08002230 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002238:	2300      	movs	r3, #0
 800223a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800223c:	2300      	movs	r3, #0
 800223e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 8098 	beq.w	800237e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800224e:	2300      	movs	r3, #0
 8002250:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002252:	4b43      	ldr	r3, [pc, #268]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10d      	bne.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800225e:	4b40      	ldr	r3, [pc, #256]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002262:	4a3f      	ldr	r2, [pc, #252]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002264:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002268:	6593      	str	r3, [r2, #88]	@ 0x58
 800226a:	4b3d      	ldr	r3, [pc, #244]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800226c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002272:	60bb      	str	r3, [r7, #8]
 8002274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002276:	2301      	movs	r3, #1
 8002278:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800227a:	4b3a      	ldr	r3, [pc, #232]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a39      	ldr	r2, [pc, #228]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002284:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002286:	f7fe fd8b 	bl	8000da0 <HAL_GetTick>
 800228a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800228c:	e009      	b.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228e:	f7fe fd87 	bl	8000da0 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d902      	bls.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	74fb      	strb	r3, [r7, #19]
        break;
 80022a0:	e005      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022a2:	4b30      	ldr	r3, [pc, #192]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0ef      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80022ae:	7cfb      	ldrb	r3, [r7, #19]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d159      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022be:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d01e      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d019      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022d0:	4b23      	ldr	r3, [pc, #140]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022dc:	4b20      	ldr	r3, [pc, #128]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022f2:	4a1b      	ldr	r2, [pc, #108]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022fc:	4a18      	ldr	r2, [pc, #96]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	d016      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230e:	f7fe fd47 	bl	8000da0 <HAL_GetTick>
 8002312:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002314:	e00b      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002316:	f7fe fd43 	bl	8000da0 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002324:	4293      	cmp	r3, r2
 8002326:	d902      	bls.n	800232e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	74fb      	strb	r3, [r7, #19]
            break;
 800232c:	e006      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800232e:	4b0c      	ldr	r3, [pc, #48]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0ec      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800233c:	7cfb      	ldrb	r3, [r7, #19]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10b      	bne.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002342:	4b07      	ldr	r3, [pc, #28]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002348:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002350:	4903      	ldr	r1, [pc, #12]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002358:	e008      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800235a:	7cfb      	ldrb	r3, [r7, #19]
 800235c:	74bb      	strb	r3, [r7, #18]
 800235e:	e005      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002360:	40021000 	.word	0x40021000
 8002364:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002368:	7cfb      	ldrb	r3, [r7, #19]
 800236a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800236c:	7c7b      	ldrb	r3, [r7, #17]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d105      	bne.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002372:	4ba6      	ldr	r3, [pc, #664]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002376:	4aa5      	ldr	r2, [pc, #660]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002378:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800237c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800238a:	4ba0      	ldr	r3, [pc, #640]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800238c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002390:	f023 0203 	bic.w	r2, r3, #3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	499c      	ldr	r1, [pc, #624]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00a      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023ac:	4b97      	ldr	r3, [pc, #604]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023b2:	f023 020c 	bic.w	r2, r3, #12
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	4994      	ldr	r1, [pc, #592]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00a      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023ce:	4b8f      	ldr	r3, [pc, #572]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	498b      	ldr	r1, [pc, #556]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00a      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023f0:	4b86      	ldr	r3, [pc, #536]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	4983      	ldr	r1, [pc, #524]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0320 	and.w	r3, r3, #32
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002412:	4b7e      	ldr	r3, [pc, #504]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002418:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	497a      	ldr	r1, [pc, #488]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002434:	4b75      	ldr	r3, [pc, #468]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800243a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	4972      	ldr	r1, [pc, #456]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00a      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002456:	4b6d      	ldr	r3, [pc, #436]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800245c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	4969      	ldr	r1, [pc, #420]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002466:	4313      	orrs	r3, r2
 8002468:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00a      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002478:	4b64      	ldr	r3, [pc, #400]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800247e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	4961      	ldr	r1, [pc, #388]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00a      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800249a:	4b5c      	ldr	r3, [pc, #368]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800249c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a8:	4958      	ldr	r1, [pc, #352]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d015      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024bc:	4b53      	ldr	r3, [pc, #332]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ca:	4950      	ldr	r1, [pc, #320]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80024da:	d105      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024dc:	4b4b      	ldr	r3, [pc, #300]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	4a4a      	ldr	r2, [pc, #296]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024e6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d015      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024f4:	4b45      	ldr	r3, [pc, #276]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002502:	4942      	ldr	r1, [pc, #264]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002512:	d105      	bne.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002514:	4b3d      	ldr	r3, [pc, #244]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	4a3c      	ldr	r2, [pc, #240]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800251a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800251e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d015      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800252c:	4b37      	ldr	r3, [pc, #220]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800252e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002532:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253a:	4934      	ldr	r1, [pc, #208]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002546:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800254a:	d105      	bne.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800254c:	4b2f      	ldr	r3, [pc, #188]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4a2e      	ldr	r2, [pc, #184]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002552:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002556:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d015      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002564:	4b29      	ldr	r3, [pc, #164]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800256a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002572:	4926      	ldr	r1, [pc, #152]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002574:	4313      	orrs	r3, r2
 8002576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800257e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002582:	d105      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002584:	4b21      	ldr	r3, [pc, #132]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	4a20      	ldr	r2, [pc, #128]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800258a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800258e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d015      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800259c:	4b1b      	ldr	r3, [pc, #108]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800259e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025aa:	4918      	ldr	r1, [pc, #96]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025ba:	d105      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025bc:	4b13      	ldr	r3, [pc, #76]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	4a12      	ldr	r2, [pc, #72]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025c6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d015      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80025d4:	4b0d      	ldr	r3, [pc, #52]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025da:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025e2:	490a      	ldr	r1, [pc, #40]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025f2:	d105      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80025f4:	4b05      	ldr	r3, [pc, #20]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4a04      	ldr	r2, [pc, #16]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002600:	7cbb      	ldrb	r3, [r7, #18]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000

08002610 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e042      	b.n	80026a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002628:	2b00      	cmp	r3, #0
 800262a:	d106      	bne.n	800263a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7fe f94d 	bl	80008d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2224      	movs	r2, #36	@ 0x24
 800263e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 0201 	bic.w	r2, r2, #1
 8002650:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 faf4 	bl	8002c48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f825 	bl	80026b0 <UART_SetConfig>
 8002666:	4603      	mov	r3, r0
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e01b      	b.n	80026a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800267e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800268e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0201 	orr.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 fb73 	bl	8002d8c <UART_CheckIdleState>
 80026a6:	4603      	mov	r3, r0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026b4:	b08c      	sub	sp, #48	@ 0x30
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	431a      	orrs	r2, r3
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	4bab      	ldr	r3, [pc, #684]	@ (800298c <UART_SetConfig+0x2dc>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	6812      	ldr	r2, [r2, #0]
 80026e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80026e8:	430b      	orrs	r3, r1
 80026ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4aa0      	ldr	r2, [pc, #640]	@ (8002990 <UART_SetConfig+0x2e0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d004      	beq.n	800271c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002718:	4313      	orrs	r3, r2
 800271a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002726:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002730:	430b      	orrs	r3, r1
 8002732:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800273a:	f023 010f 	bic.w	r1, r3, #15
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a91      	ldr	r2, [pc, #580]	@ (8002994 <UART_SetConfig+0x2e4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d125      	bne.n	80027a0 <UART_SetConfig+0xf0>
 8002754:	4b90      	ldr	r3, [pc, #576]	@ (8002998 <UART_SetConfig+0x2e8>)
 8002756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	2b03      	cmp	r3, #3
 8002760:	d81a      	bhi.n	8002798 <UART_SetConfig+0xe8>
 8002762:	a201      	add	r2, pc, #4	@ (adr r2, 8002768 <UART_SetConfig+0xb8>)
 8002764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002768:	08002779 	.word	0x08002779
 800276c:	08002789 	.word	0x08002789
 8002770:	08002781 	.word	0x08002781
 8002774:	08002791 	.word	0x08002791
 8002778:	2301      	movs	r3, #1
 800277a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800277e:	e0d6      	b.n	800292e <UART_SetConfig+0x27e>
 8002780:	2302      	movs	r3, #2
 8002782:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002786:	e0d2      	b.n	800292e <UART_SetConfig+0x27e>
 8002788:	2304      	movs	r3, #4
 800278a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800278e:	e0ce      	b.n	800292e <UART_SetConfig+0x27e>
 8002790:	2308      	movs	r3, #8
 8002792:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002796:	e0ca      	b.n	800292e <UART_SetConfig+0x27e>
 8002798:	2310      	movs	r3, #16
 800279a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800279e:	e0c6      	b.n	800292e <UART_SetConfig+0x27e>
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a7d      	ldr	r2, [pc, #500]	@ (800299c <UART_SetConfig+0x2ec>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d138      	bne.n	800281c <UART_SetConfig+0x16c>
 80027aa:	4b7b      	ldr	r3, [pc, #492]	@ (8002998 <UART_SetConfig+0x2e8>)
 80027ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b0:	f003 030c 	and.w	r3, r3, #12
 80027b4:	2b0c      	cmp	r3, #12
 80027b6:	d82d      	bhi.n	8002814 <UART_SetConfig+0x164>
 80027b8:	a201      	add	r2, pc, #4	@ (adr r2, 80027c0 <UART_SetConfig+0x110>)
 80027ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027be:	bf00      	nop
 80027c0:	080027f5 	.word	0x080027f5
 80027c4:	08002815 	.word	0x08002815
 80027c8:	08002815 	.word	0x08002815
 80027cc:	08002815 	.word	0x08002815
 80027d0:	08002805 	.word	0x08002805
 80027d4:	08002815 	.word	0x08002815
 80027d8:	08002815 	.word	0x08002815
 80027dc:	08002815 	.word	0x08002815
 80027e0:	080027fd 	.word	0x080027fd
 80027e4:	08002815 	.word	0x08002815
 80027e8:	08002815 	.word	0x08002815
 80027ec:	08002815 	.word	0x08002815
 80027f0:	0800280d 	.word	0x0800280d
 80027f4:	2300      	movs	r3, #0
 80027f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027fa:	e098      	b.n	800292e <UART_SetConfig+0x27e>
 80027fc:	2302      	movs	r3, #2
 80027fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002802:	e094      	b.n	800292e <UART_SetConfig+0x27e>
 8002804:	2304      	movs	r3, #4
 8002806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800280a:	e090      	b.n	800292e <UART_SetConfig+0x27e>
 800280c:	2308      	movs	r3, #8
 800280e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002812:	e08c      	b.n	800292e <UART_SetConfig+0x27e>
 8002814:	2310      	movs	r3, #16
 8002816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800281a:	e088      	b.n	800292e <UART_SetConfig+0x27e>
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a5f      	ldr	r2, [pc, #380]	@ (80029a0 <UART_SetConfig+0x2f0>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d125      	bne.n	8002872 <UART_SetConfig+0x1c2>
 8002826:	4b5c      	ldr	r3, [pc, #368]	@ (8002998 <UART_SetConfig+0x2e8>)
 8002828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800282c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002830:	2b30      	cmp	r3, #48	@ 0x30
 8002832:	d016      	beq.n	8002862 <UART_SetConfig+0x1b2>
 8002834:	2b30      	cmp	r3, #48	@ 0x30
 8002836:	d818      	bhi.n	800286a <UART_SetConfig+0x1ba>
 8002838:	2b20      	cmp	r3, #32
 800283a:	d00a      	beq.n	8002852 <UART_SetConfig+0x1a2>
 800283c:	2b20      	cmp	r3, #32
 800283e:	d814      	bhi.n	800286a <UART_SetConfig+0x1ba>
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <UART_SetConfig+0x19a>
 8002844:	2b10      	cmp	r3, #16
 8002846:	d008      	beq.n	800285a <UART_SetConfig+0x1aa>
 8002848:	e00f      	b.n	800286a <UART_SetConfig+0x1ba>
 800284a:	2300      	movs	r3, #0
 800284c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002850:	e06d      	b.n	800292e <UART_SetConfig+0x27e>
 8002852:	2302      	movs	r3, #2
 8002854:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002858:	e069      	b.n	800292e <UART_SetConfig+0x27e>
 800285a:	2304      	movs	r3, #4
 800285c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002860:	e065      	b.n	800292e <UART_SetConfig+0x27e>
 8002862:	2308      	movs	r3, #8
 8002864:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002868:	e061      	b.n	800292e <UART_SetConfig+0x27e>
 800286a:	2310      	movs	r3, #16
 800286c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002870:	e05d      	b.n	800292e <UART_SetConfig+0x27e>
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a4b      	ldr	r2, [pc, #300]	@ (80029a4 <UART_SetConfig+0x2f4>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d125      	bne.n	80028c8 <UART_SetConfig+0x218>
 800287c:	4b46      	ldr	r3, [pc, #280]	@ (8002998 <UART_SetConfig+0x2e8>)
 800287e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002882:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002886:	2bc0      	cmp	r3, #192	@ 0xc0
 8002888:	d016      	beq.n	80028b8 <UART_SetConfig+0x208>
 800288a:	2bc0      	cmp	r3, #192	@ 0xc0
 800288c:	d818      	bhi.n	80028c0 <UART_SetConfig+0x210>
 800288e:	2b80      	cmp	r3, #128	@ 0x80
 8002890:	d00a      	beq.n	80028a8 <UART_SetConfig+0x1f8>
 8002892:	2b80      	cmp	r3, #128	@ 0x80
 8002894:	d814      	bhi.n	80028c0 <UART_SetConfig+0x210>
 8002896:	2b00      	cmp	r3, #0
 8002898:	d002      	beq.n	80028a0 <UART_SetConfig+0x1f0>
 800289a:	2b40      	cmp	r3, #64	@ 0x40
 800289c:	d008      	beq.n	80028b0 <UART_SetConfig+0x200>
 800289e:	e00f      	b.n	80028c0 <UART_SetConfig+0x210>
 80028a0:	2300      	movs	r3, #0
 80028a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028a6:	e042      	b.n	800292e <UART_SetConfig+0x27e>
 80028a8:	2302      	movs	r3, #2
 80028aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028ae:	e03e      	b.n	800292e <UART_SetConfig+0x27e>
 80028b0:	2304      	movs	r3, #4
 80028b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028b6:	e03a      	b.n	800292e <UART_SetConfig+0x27e>
 80028b8:	2308      	movs	r3, #8
 80028ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028be:	e036      	b.n	800292e <UART_SetConfig+0x27e>
 80028c0:	2310      	movs	r3, #16
 80028c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028c6:	e032      	b.n	800292e <UART_SetConfig+0x27e>
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a30      	ldr	r2, [pc, #192]	@ (8002990 <UART_SetConfig+0x2e0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d12a      	bne.n	8002928 <UART_SetConfig+0x278>
 80028d2:	4b31      	ldr	r3, [pc, #196]	@ (8002998 <UART_SetConfig+0x2e8>)
 80028d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80028dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80028e0:	d01a      	beq.n	8002918 <UART_SetConfig+0x268>
 80028e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80028e6:	d81b      	bhi.n	8002920 <UART_SetConfig+0x270>
 80028e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028ec:	d00c      	beq.n	8002908 <UART_SetConfig+0x258>
 80028ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028f2:	d815      	bhi.n	8002920 <UART_SetConfig+0x270>
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <UART_SetConfig+0x250>
 80028f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028fc:	d008      	beq.n	8002910 <UART_SetConfig+0x260>
 80028fe:	e00f      	b.n	8002920 <UART_SetConfig+0x270>
 8002900:	2300      	movs	r3, #0
 8002902:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002906:	e012      	b.n	800292e <UART_SetConfig+0x27e>
 8002908:	2302      	movs	r3, #2
 800290a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800290e:	e00e      	b.n	800292e <UART_SetConfig+0x27e>
 8002910:	2304      	movs	r3, #4
 8002912:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002916:	e00a      	b.n	800292e <UART_SetConfig+0x27e>
 8002918:	2308      	movs	r3, #8
 800291a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800291e:	e006      	b.n	800292e <UART_SetConfig+0x27e>
 8002920:	2310      	movs	r3, #16
 8002922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002926:	e002      	b.n	800292e <UART_SetConfig+0x27e>
 8002928:	2310      	movs	r3, #16
 800292a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a17      	ldr	r2, [pc, #92]	@ (8002990 <UART_SetConfig+0x2e0>)
 8002934:	4293      	cmp	r3, r2
 8002936:	f040 80a8 	bne.w	8002a8a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800293a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800293e:	2b08      	cmp	r3, #8
 8002940:	d834      	bhi.n	80029ac <UART_SetConfig+0x2fc>
 8002942:	a201      	add	r2, pc, #4	@ (adr r2, 8002948 <UART_SetConfig+0x298>)
 8002944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002948:	0800296d 	.word	0x0800296d
 800294c:	080029ad 	.word	0x080029ad
 8002950:	08002975 	.word	0x08002975
 8002954:	080029ad 	.word	0x080029ad
 8002958:	0800297b 	.word	0x0800297b
 800295c:	080029ad 	.word	0x080029ad
 8002960:	080029ad 	.word	0x080029ad
 8002964:	080029ad 	.word	0x080029ad
 8002968:	08002983 	.word	0x08002983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800296c:	f7ff fbee 	bl	800214c <HAL_RCC_GetPCLK1Freq>
 8002970:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002972:	e021      	b.n	80029b8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002974:	4b0c      	ldr	r3, [pc, #48]	@ (80029a8 <UART_SetConfig+0x2f8>)
 8002976:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002978:	e01e      	b.n	80029b8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800297a:	f7ff fb79 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 800297e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002980:	e01a      	b.n	80029b8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002982:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002986:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002988:	e016      	b.n	80029b8 <UART_SetConfig+0x308>
 800298a:	bf00      	nop
 800298c:	cfff69f3 	.word	0xcfff69f3
 8002990:	40008000 	.word	0x40008000
 8002994:	40013800 	.word	0x40013800
 8002998:	40021000 	.word	0x40021000
 800299c:	40004400 	.word	0x40004400
 80029a0:	40004800 	.word	0x40004800
 80029a4:	40004c00 	.word	0x40004c00
 80029a8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80029b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80029b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 812a 	beq.w	8002c14 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c4:	4a9e      	ldr	r2, [pc, #632]	@ (8002c40 <UART_SetConfig+0x590>)
 80029c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029ca:	461a      	mov	r2, r3
 80029cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	4413      	add	r3, r2
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d305      	bcc.n	80029f0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d903      	bls.n	80029f8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80029f6:	e10d      	b.n	8002c14 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80029f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fa:	2200      	movs	r2, #0
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	60fa      	str	r2, [r7, #12]
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a04:	4a8e      	ldr	r2, [pc, #568]	@ (8002c40 <UART_SetConfig+0x590>)
 8002a06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	607a      	str	r2, [r7, #4]
 8002a12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a1a:	f7fd fbfd 	bl	8000218 <__aeabi_uldivmod>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4610      	mov	r0, r2
 8002a24:	4619      	mov	r1, r3
 8002a26:	f04f 0200 	mov.w	r2, #0
 8002a2a:	f04f 0300 	mov.w	r3, #0
 8002a2e:	020b      	lsls	r3, r1, #8
 8002a30:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002a34:	0202      	lsls	r2, r0, #8
 8002a36:	6979      	ldr	r1, [r7, #20]
 8002a38:	6849      	ldr	r1, [r1, #4]
 8002a3a:	0849      	lsrs	r1, r1, #1
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	460c      	mov	r4, r1
 8002a40:	4605      	mov	r5, r0
 8002a42:	eb12 0804 	adds.w	r8, r2, r4
 8002a46:	eb43 0905 	adc.w	r9, r3, r5
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	469a      	mov	sl, r3
 8002a52:	4693      	mov	fp, r2
 8002a54:	4652      	mov	r2, sl
 8002a56:	465b      	mov	r3, fp
 8002a58:	4640      	mov	r0, r8
 8002a5a:	4649      	mov	r1, r9
 8002a5c:	f7fd fbdc 	bl	8000218 <__aeabi_uldivmod>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4613      	mov	r3, r2
 8002a66:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a6e:	d308      	bcc.n	8002a82 <UART_SetConfig+0x3d2>
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a76:	d204      	bcs.n	8002a82 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6a3a      	ldr	r2, [r7, #32]
 8002a7e:	60da      	str	r2, [r3, #12]
 8002a80:	e0c8      	b.n	8002c14 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002a88:	e0c4      	b.n	8002c14 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a92:	d167      	bne.n	8002b64 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002a94:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d828      	bhi.n	8002aee <UART_SetConfig+0x43e>
 8002a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8002aa4 <UART_SetConfig+0x3f4>)
 8002a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa2:	bf00      	nop
 8002aa4:	08002ac9 	.word	0x08002ac9
 8002aa8:	08002ad1 	.word	0x08002ad1
 8002aac:	08002ad9 	.word	0x08002ad9
 8002ab0:	08002aef 	.word	0x08002aef
 8002ab4:	08002adf 	.word	0x08002adf
 8002ab8:	08002aef 	.word	0x08002aef
 8002abc:	08002aef 	.word	0x08002aef
 8002ac0:	08002aef 	.word	0x08002aef
 8002ac4:	08002ae7 	.word	0x08002ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ac8:	f7ff fb40 	bl	800214c <HAL_RCC_GetPCLK1Freq>
 8002acc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ace:	e014      	b.n	8002afa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ad0:	f7ff fb52 	bl	8002178 <HAL_RCC_GetPCLK2Freq>
 8002ad4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ad6:	e010      	b.n	8002afa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ad8:	4b5a      	ldr	r3, [pc, #360]	@ (8002c44 <UART_SetConfig+0x594>)
 8002ada:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002adc:	e00d      	b.n	8002afa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ade:	f7ff fac7 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 8002ae2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ae4:	e009      	b.n	8002afa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ae6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002aea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002aec:	e005      	b.n	8002afa <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002af8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 8089 	beq.w	8002c14 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b06:	4a4e      	ldr	r2, [pc, #312]	@ (8002c40 <UART_SetConfig+0x590>)
 8002b08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b10:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b14:	005a      	lsls	r2, r3, #1
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	085b      	lsrs	r3, r3, #1
 8002b1c:	441a      	add	r2, r3
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	2b0f      	cmp	r3, #15
 8002b2c:	d916      	bls.n	8002b5c <UART_SetConfig+0x4ac>
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b34:	d212      	bcs.n	8002b5c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	f023 030f 	bic.w	r3, r3, #15
 8002b3e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	085b      	lsrs	r3, r3, #1
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	8bfb      	ldrh	r3, [r7, #30]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	8bfa      	ldrh	r2, [r7, #30]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	e05b      	b.n	8002c14 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002b62:	e057      	b.n	8002c14 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d828      	bhi.n	8002bbe <UART_SetConfig+0x50e>
 8002b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8002b74 <UART_SetConfig+0x4c4>)
 8002b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b72:	bf00      	nop
 8002b74:	08002b99 	.word	0x08002b99
 8002b78:	08002ba1 	.word	0x08002ba1
 8002b7c:	08002ba9 	.word	0x08002ba9
 8002b80:	08002bbf 	.word	0x08002bbf
 8002b84:	08002baf 	.word	0x08002baf
 8002b88:	08002bbf 	.word	0x08002bbf
 8002b8c:	08002bbf 	.word	0x08002bbf
 8002b90:	08002bbf 	.word	0x08002bbf
 8002b94:	08002bb7 	.word	0x08002bb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b98:	f7ff fad8 	bl	800214c <HAL_RCC_GetPCLK1Freq>
 8002b9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002b9e:	e014      	b.n	8002bca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ba0:	f7ff faea 	bl	8002178 <HAL_RCC_GetPCLK2Freq>
 8002ba4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ba6:	e010      	b.n	8002bca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ba8:	4b26      	ldr	r3, [pc, #152]	@ (8002c44 <UART_SetConfig+0x594>)
 8002baa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002bac:	e00d      	b.n	8002bca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bae:	f7ff fa5f 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 8002bb2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002bb4:	e009      	b.n	8002bca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002bbc:	e005      	b.n	8002bca <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002bc8:	bf00      	nop
    }

    if (pclk != 0U)
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d021      	beq.n	8002c14 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd4:	4a1a      	ldr	r2, [pc, #104]	@ (8002c40 <UART_SetConfig+0x590>)
 8002bd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bde:	fbb3 f2f2 	udiv	r2, r3, r2
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	085b      	lsrs	r3, r3, #1
 8002be8:	441a      	add	r2, r3
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	2b0f      	cmp	r3, #15
 8002bf8:	d909      	bls.n	8002c0e <UART_SetConfig+0x55e>
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c00:	d205      	bcs.n	8002c0e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	60da      	str	r2, [r3, #12]
 8002c0c:	e002      	b.n	8002c14 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	2200      	movs	r2, #0
 8002c28:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002c30:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3730      	adds	r7, #48	@ 0x30
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c3e:	bf00      	nop
 8002c40:	08003314 	.word	0x08003314
 8002c44:	00f42400 	.word	0x00f42400

08002c48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00a      	beq.n	8002c72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00a      	beq.n	8002c94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00a      	beq.n	8002cb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00a      	beq.n	8002cd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cdc:	f003 0310 	and.w	r3, r3, #16
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00a      	beq.n	8002cfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfe:	f003 0320 	and.w	r3, r3, #32
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d01a      	beq.n	8002d5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d46:	d10a      	bne.n	8002d5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00a      	beq.n	8002d80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	605a      	str	r2, [r3, #4]
  }
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b098      	sub	sp, #96	@ 0x60
 8002d90:	af02      	add	r7, sp, #8
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d9c:	f7fe f800 	bl	8000da0 <HAL_GetTick>
 8002da0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0308 	and.w	r3, r3, #8
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d12f      	bne.n	8002e10 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002db0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002db8:	2200      	movs	r2, #0
 8002dba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f88e 	bl	8002ee0 <UART_WaitOnFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d022      	beq.n	8002e10 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd2:	e853 3f00 	ldrex	r3, [r3]
 8002dd6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002dde:	653b      	str	r3, [r7, #80]	@ 0x50
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	461a      	mov	r2, r3
 8002de6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002de8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002dee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002df0:	e841 2300 	strex	r3, r2, [r1]
 8002df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1e6      	bne.n	8002dca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e063      	b.n	8002ed8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d149      	bne.n	8002eb2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e1e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e26:	2200      	movs	r2, #0
 8002e28:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 f857 	bl	8002ee0 <UART_WaitOnFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d03c      	beq.n	8002eb2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e40:	e853 3f00 	ldrex	r3, [r3]
 8002e44:	623b      	str	r3, [r7, #32]
   return(result);
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e56:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e58:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e5e:	e841 2300 	strex	r3, r2, [r1]
 8002e62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1e6      	bne.n	8002e38 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	3308      	adds	r3, #8
 8002e70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	e853 3f00 	ldrex	r3, [r3]
 8002e78:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f023 0301 	bic.w	r3, r3, #1
 8002e80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	3308      	adds	r3, #8
 8002e88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e8a:	61fa      	str	r2, [r7, #28]
 8002e8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8e:	69b9      	ldr	r1, [r7, #24]
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	e841 2300 	strex	r3, r2, [r1]
 8002e96:	617b      	str	r3, [r7, #20]
   return(result);
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1e5      	bne.n	8002e6a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e012      	b.n	8002ed8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3758      	adds	r7, #88	@ 0x58
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	603b      	str	r3, [r7, #0]
 8002eec:	4613      	mov	r3, r2
 8002eee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ef0:	e04f      	b.n	8002f92 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef8:	d04b      	beq.n	8002f92 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002efa:	f7fd ff51 	bl	8000da0 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d302      	bcc.n	8002f10 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e04e      	b.n	8002fb2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d037      	beq.n	8002f92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2b80      	cmp	r3, #128	@ 0x80
 8002f26:	d034      	beq.n	8002f92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b40      	cmp	r3, #64	@ 0x40
 8002f2c:	d031      	beq.n	8002f92 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d110      	bne.n	8002f5e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2208      	movs	r2, #8
 8002f42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 f838 	bl	8002fba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2208      	movs	r2, #8
 8002f4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e029      	b.n	8002fb2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f6c:	d111      	bne.n	8002f92 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 f81e 	bl	8002fba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e00f      	b.n	8002fb2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	69da      	ldr	r2, [r3, #28]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	bf0c      	ite	eq
 8002fa2:	2301      	moveq	r3, #1
 8002fa4:	2300      	movne	r3, #0
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	461a      	mov	r2, r3
 8002faa:	79fb      	ldrb	r3, [r7, #7]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d0a0      	beq.n	8002ef2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b095      	sub	sp, #84	@ 0x54
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fca:	e853 3f00 	ldrex	r3, [r3]
 8002fce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fe0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fe2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002fe6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002fe8:	e841 2300 	strex	r3, r2, [r1]
 8002fec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1e6      	bne.n	8002fc2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	3308      	adds	r3, #8
 8002ffa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	e853 3f00 	ldrex	r3, [r3]
 8003002:	61fb      	str	r3, [r7, #28]
   return(result);
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800300a:	f023 0301 	bic.w	r3, r3, #1
 800300e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	3308      	adds	r3, #8
 8003016:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003018:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800301a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800301e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003020:	e841 2300 	strex	r3, r2, [r1]
 8003024:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1e3      	bne.n	8002ff4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003030:	2b01      	cmp	r3, #1
 8003032:	d118      	bne.n	8003066 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	e853 3f00 	ldrex	r3, [r3]
 8003040:	60bb      	str	r3, [r7, #8]
   return(result);
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f023 0310 	bic.w	r3, r3, #16
 8003048:	647b      	str	r3, [r7, #68]	@ 0x44
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	461a      	mov	r2, r3
 8003050:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003052:	61bb      	str	r3, [r7, #24]
 8003054:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003056:	6979      	ldr	r1, [r7, #20]
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	e841 2300 	strex	r3, r2, [r1]
 800305e:	613b      	str	r3, [r7, #16]
   return(result);
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1e6      	bne.n	8003034 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2220      	movs	r2, #32
 800306a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800307a:	bf00      	nop
 800307c:	3754      	adds	r7, #84	@ 0x54
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003086:	b480      	push	{r7}
 8003088:	b085      	sub	sp, #20
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_UARTEx_DisableFifoMode+0x16>
 8003098:	2302      	movs	r3, #2
 800309a:	e027      	b.n	80030ec <HAL_UARTEx_DisableFifoMode+0x66>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2224      	movs	r2, #36	@ 0x24
 80030a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0201 	bic.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80030ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2220      	movs	r2, #32
 80030de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800310c:	2302      	movs	r3, #2
 800310e:	e02d      	b.n	800316c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2224      	movs	r2, #36	@ 0x24
 800311c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0201 	bic.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f84f 	bl	80031f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2220      	movs	r2, #32
 800315e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003188:	2302      	movs	r3, #2
 800318a:	e02d      	b.n	80031e8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2224      	movs	r2, #36	@ 0x24
 8003198:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0201 	bic.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f811 	bl	80031f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2220      	movs	r2, #32
 80031da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d108      	bne.n	8003212 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003210:	e031      	b.n	8003276 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003212:	2308      	movs	r3, #8
 8003214:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003216:	2308      	movs	r3, #8
 8003218:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	0e5b      	lsrs	r3, r3, #25
 8003222:	b2db      	uxtb	r3, r3
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	0f5b      	lsrs	r3, r3, #29
 8003232:	b2db      	uxtb	r3, r3
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800323a:	7bbb      	ldrb	r3, [r7, #14]
 800323c:	7b3a      	ldrb	r2, [r7, #12]
 800323e:	4911      	ldr	r1, [pc, #68]	@ (8003284 <UARTEx_SetNbDataToProcess+0x94>)
 8003240:	5c8a      	ldrb	r2, [r1, r2]
 8003242:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003246:	7b3a      	ldrb	r2, [r7, #12]
 8003248:	490f      	ldr	r1, [pc, #60]	@ (8003288 <UARTEx_SetNbDataToProcess+0x98>)
 800324a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800324c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003250:	b29a      	uxth	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	7b7a      	ldrb	r2, [r7, #13]
 800325c:	4909      	ldr	r1, [pc, #36]	@ (8003284 <UARTEx_SetNbDataToProcess+0x94>)
 800325e:	5c8a      	ldrb	r2, [r1, r2]
 8003260:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003264:	7b7a      	ldrb	r2, [r7, #13]
 8003266:	4908      	ldr	r1, [pc, #32]	@ (8003288 <UARTEx_SetNbDataToProcess+0x98>)
 8003268:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800326a:	fb93 f3f2 	sdiv	r3, r3, r2
 800326e:	b29a      	uxth	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003276:	bf00      	nop
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	0800332c 	.word	0x0800332c
 8003288:	08003334 	.word	0x08003334

0800328c <memset>:
 800328c:	4402      	add	r2, r0
 800328e:	4603      	mov	r3, r0
 8003290:	4293      	cmp	r3, r2
 8003292:	d100      	bne.n	8003296 <memset+0xa>
 8003294:	4770      	bx	lr
 8003296:	f803 1b01 	strb.w	r1, [r3], #1
 800329a:	e7f9      	b.n	8003290 <memset+0x4>

0800329c <__libc_init_array>:
 800329c:	b570      	push	{r4, r5, r6, lr}
 800329e:	4d0d      	ldr	r5, [pc, #52]	@ (80032d4 <__libc_init_array+0x38>)
 80032a0:	4c0d      	ldr	r4, [pc, #52]	@ (80032d8 <__libc_init_array+0x3c>)
 80032a2:	1b64      	subs	r4, r4, r5
 80032a4:	10a4      	asrs	r4, r4, #2
 80032a6:	2600      	movs	r6, #0
 80032a8:	42a6      	cmp	r6, r4
 80032aa:	d109      	bne.n	80032c0 <__libc_init_array+0x24>
 80032ac:	4d0b      	ldr	r5, [pc, #44]	@ (80032dc <__libc_init_array+0x40>)
 80032ae:	4c0c      	ldr	r4, [pc, #48]	@ (80032e0 <__libc_init_array+0x44>)
 80032b0:	f000 f818 	bl	80032e4 <_init>
 80032b4:	1b64      	subs	r4, r4, r5
 80032b6:	10a4      	asrs	r4, r4, #2
 80032b8:	2600      	movs	r6, #0
 80032ba:	42a6      	cmp	r6, r4
 80032bc:	d105      	bne.n	80032ca <__libc_init_array+0x2e>
 80032be:	bd70      	pop	{r4, r5, r6, pc}
 80032c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c4:	4798      	blx	r3
 80032c6:	3601      	adds	r6, #1
 80032c8:	e7ee      	b.n	80032a8 <__libc_init_array+0xc>
 80032ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ce:	4798      	blx	r3
 80032d0:	3601      	adds	r6, #1
 80032d2:	e7f2      	b.n	80032ba <__libc_init_array+0x1e>
 80032d4:	08003344 	.word	0x08003344
 80032d8:	08003344 	.word	0x08003344
 80032dc:	08003344 	.word	0x08003344
 80032e0:	08003348 	.word	0x08003348

080032e4 <_init>:
 80032e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032e6:	bf00      	nop
 80032e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ea:	bc08      	pop	{r3}
 80032ec:	469e      	mov	lr, r3
 80032ee:	4770      	bx	lr

080032f0 <_fini>:
 80032f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f2:	bf00      	nop
 80032f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032f6:	bc08      	pop	{r3}
 80032f8:	469e      	mov	lr, r3
 80032fa:	4770      	bx	lr
