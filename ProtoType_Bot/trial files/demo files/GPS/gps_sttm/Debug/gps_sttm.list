
gps_sttm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048cc  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004aa4  08004aa4  00005aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ae4  08004ae4  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  08004ae4  08004ae4  00005ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004aec  08004aec  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004aec  08004aec  00005aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004af0  08004af0  00005af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004af4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  20000010  08004b04  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  08004b04  000063d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fab9  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021b6  00000000  00000000  00015af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00017cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b9  00000000  00000000  00018960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cffe  00000000  00000000  00019319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eef2  00000000  00000000  00036317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8ad8  00000000  00000000  00045209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fdce1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003450  00000000  00000000  000fdd24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00101174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004a8c 	.word	0x08004a8c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08004a8c 	.word	0x08004a8c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fb4a 	bl	8000ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f82a 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f952 	bl	80007bc <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000518:	f000 f872 	bl	8000600 <MX_FDCAN1_Init>
  MX_USART2_UART_Init();
 800051c:	f000 f902 	bl	8000724 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000520:	f000 f8b4 	bl	800068c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000524:	2000      	movs	r0, #0
 8000526:	f000 fb07 	bl	8000b38 <BSP_LED_Init>
  HAL_UART_Receive_IT(&huart1, _rx_buffer, RX_BUFFER_SIZE);
 800052a:	f240 2212 	movw	r2, #530	@ 0x212
 800052e:	490b      	ldr	r1, [pc, #44]	@ (800055c <main+0x54>)
 8000530:	480b      	ldr	r0, [pc, #44]	@ (8000560 <main+0x58>)
 8000532:	f002 fa39 	bl	80029a8 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	  HAL_UART_Receive(&huart1, _rx_buffer, RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000536:	f04f 33ff 	mov.w	r3, #4294967295
 800053a:	f240 2212 	movw	r2, #530	@ 0x212
 800053e:	4907      	ldr	r1, [pc, #28]	@ (800055c <main+0x54>)
 8000540:	4807      	ldr	r0, [pc, #28]	@ (8000560 <main+0x58>)
 8000542:	f002 f969 	bl	8002818 <HAL_UART_Receive>

	     // Transmit the received data over huart2
	     HAL_UART_Transmit(&huart2, _rx_buffer, RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000546:	f04f 33ff 	mov.w	r3, #4294967295
 800054a:	f240 2212 	movw	r2, #530	@ 0x212
 800054e:	4903      	ldr	r1, [pc, #12]	@ (800055c <main+0x54>)
 8000550:	4804      	ldr	r0, [pc, #16]	@ (8000564 <main+0x5c>)
 8000552:	f002 f8d3 	bl	80026fc <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart1, _rx_buffer, RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000556:	bf00      	nop
 8000558:	e7ed      	b.n	8000536 <main+0x2e>
 800055a:	bf00      	nop
 800055c:	2000002c 	.word	0x2000002c
 8000560:	200002a4 	.word	0x200002a4
 8000564:	20000338 	.word	0x20000338

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	@ 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0318 	add.w	r3, r7, #24
 8000572:	2238      	movs	r2, #56	@ 0x38
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f004 fa5c 	bl	8004a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800058a:	2000      	movs	r0, #0
 800058c:	f001 f894 	bl	80016b8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000590:	2302      	movs	r3, #2
 8000592:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000594:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000598:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059a:	2340      	movs	r3, #64	@ 0x40
 800059c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005a6:	2304      	movs	r3, #4
 80005a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005aa:	2355      	movs	r3, #85	@ 0x55
 80005ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ba:	f107 0318 	add.w	r3, r7, #24
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 f92e 	bl	8001820 <HAL_RCC_OscConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005ca:	f000 f91b 	bl	8000804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ce:	230f      	movs	r3, #15
 80005d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d2:	2303      	movs	r3, #3
 80005d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2104      	movs	r1, #4
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 fc2c 	bl	8001e44 <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005f2:	f000 f907 	bl	8000804 <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3750      	adds	r7, #80	@ 0x50
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000604:	4b1f      	ldr	r3, [pc, #124]	@ (8000684 <MX_FDCAN1_Init+0x84>)
 8000606:	4a20      	ldr	r2, [pc, #128]	@ (8000688 <MX_FDCAN1_Init+0x88>)
 8000608:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800060a:	4b1e      	ldr	r3, [pc, #120]	@ (8000684 <MX_FDCAN1_Init+0x84>)
 800060c:	2200      	movs	r2, #0
 800060e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000610:	4b1c      	ldr	r3, [pc, #112]	@ (8000684 <MX_FDCAN1_Init+0x84>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000616:	4b1b      	ldr	r3, [pc, #108]	@ (8000684 <MX_FDCAN1_Init+0x84>)
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800061c:	4b19      	ldr	r3, [pc, #100]	@ (8000684 <MX_FDCAN1_Init+0x84>)
 800061e:	2200      	movs	r2, #0
 8000620:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000622:	4b18      	ldr	r3, [pc, #96]	@ (8000684 <MX_FDCAN1_Init+0x84>)
 8000624:	2200      	movs	r2, #0
 8000626:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000628:	4b16      	ldr	r3, [pc, #88]	@ (8000684 <MX_FDCAN1_Init+0x84>)
 800062a:	2200      	movs	r2, #0
 800062c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800062e:	4b15      	ldr	r3, [pc, #84]	@ (8000684 <MX_FDCAN1_Init+0x84>)
 8000630:	2210      	movs	r2, #16
 8000632:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000634:	4b13      	ldr	r3, [pc, #76]	@ (8000684 <MX_FDCAN1_Init+0x84>)
 8000636:	2201      	movs	r2, #1
 8000638:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 800063a:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <MX_FDCAN1_Init+0x84>)
 800063c:	2201      	movs	r2, #1
 800063e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 8000640:	4b10      	ldr	r3, [pc, #64]	@ (8000684 <MX_FDCAN1_Init+0x84>)
 8000642:	2201      	movs	r2, #1
 8000644:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000646:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <MX_FDCAN1_Init+0x84>)
 8000648:	2201      	movs	r2, #1
 800064a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800064c:	4b0d      	ldr	r3, [pc, #52]	@ (8000684 <MX_FDCAN1_Init+0x84>)
 800064e:	2201      	movs	r2, #1
 8000650:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000652:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <MX_FDCAN1_Init+0x84>)
 8000654:	2201      	movs	r2, #1
 8000656:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000658:	4b0a      	ldr	r3, [pc, #40]	@ (8000684 <MX_FDCAN1_Init+0x84>)
 800065a:	2201      	movs	r2, #1
 800065c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800065e:	4b09      	ldr	r3, [pc, #36]	@ (8000684 <MX_FDCAN1_Init+0x84>)
 8000660:	2200      	movs	r2, #0
 8000662:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000664:	4b07      	ldr	r3, [pc, #28]	@ (8000684 <MX_FDCAN1_Init+0x84>)
 8000666:	2200      	movs	r2, #0
 8000668:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800066a:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <MX_FDCAN1_Init+0x84>)
 800066c:	2200      	movs	r2, #0
 800066e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000670:	4804      	ldr	r0, [pc, #16]	@ (8000684 <MX_FDCAN1_Init+0x84>)
 8000672:	f000 fcd7 	bl	8001024 <HAL_FDCAN_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800067c:	f000 f8c2 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000240 	.word	0x20000240
 8000688:	40006400 	.word	0x40006400

0800068c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000690:	4b22      	ldr	r3, [pc, #136]	@ (800071c <MX_USART1_UART_Init+0x90>)
 8000692:	4a23      	ldr	r2, [pc, #140]	@ (8000720 <MX_USART1_UART_Init+0x94>)
 8000694:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000696:	4b21      	ldr	r3, [pc, #132]	@ (800071c <MX_USART1_UART_Init+0x90>)
 8000698:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800069c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800069e:	4b1f      	ldr	r3, [pc, #124]	@ (800071c <MX_USART1_UART_Init+0x90>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006a4:	4b1d      	ldr	r3, [pc, #116]	@ (800071c <MX_USART1_UART_Init+0x90>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006aa:	4b1c      	ldr	r3, [pc, #112]	@ (800071c <MX_USART1_UART_Init+0x90>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006b0:	4b1a      	ldr	r3, [pc, #104]	@ (800071c <MX_USART1_UART_Init+0x90>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	4b19      	ldr	r3, [pc, #100]	@ (800071c <MX_USART1_UART_Init+0x90>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006bc:	4b17      	ldr	r3, [pc, #92]	@ (800071c <MX_USART1_UART_Init+0x90>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c2:	4b16      	ldr	r3, [pc, #88]	@ (800071c <MX_USART1_UART_Init+0x90>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006c8:	4b14      	ldr	r3, [pc, #80]	@ (800071c <MX_USART1_UART_Init+0x90>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ce:	4b13      	ldr	r3, [pc, #76]	@ (800071c <MX_USART1_UART_Init+0x90>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006d4:	4811      	ldr	r0, [pc, #68]	@ (800071c <MX_USART1_UART_Init+0x90>)
 80006d6:	f001 ffc1 	bl	800265c <HAL_UART_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80006e0:	f000 f890 	bl	8000804 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006e4:	2100      	movs	r1, #0
 80006e6:	480d      	ldr	r0, [pc, #52]	@ (800071c <MX_USART1_UART_Init+0x90>)
 80006e8:	f004 f8d9 	bl	800489e <HAL_UARTEx_SetTxFifoThreshold>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006f2:	f000 f887 	bl	8000804 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006f6:	2100      	movs	r1, #0
 80006f8:	4808      	ldr	r0, [pc, #32]	@ (800071c <MX_USART1_UART_Init+0x90>)
 80006fa:	f004 f90e 	bl	800491a <HAL_UARTEx_SetRxFifoThreshold>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000704:	f000 f87e 	bl	8000804 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	@ (800071c <MX_USART1_UART_Init+0x90>)
 800070a:	f004 f88f 	bl	800482c <HAL_UARTEx_DisableFifoMode>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000714:	f000 f876 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200002a4 	.word	0x200002a4
 8000720:	40013800 	.word	0x40013800

08000724 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000728:	4b22      	ldr	r3, [pc, #136]	@ (80007b4 <MX_USART2_UART_Init+0x90>)
 800072a:	4a23      	ldr	r2, [pc, #140]	@ (80007b8 <MX_USART2_UART_Init+0x94>)
 800072c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800072e:	4b21      	ldr	r3, [pc, #132]	@ (80007b4 <MX_USART2_UART_Init+0x90>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b1f      	ldr	r3, [pc, #124]	@ (80007b4 <MX_USART2_UART_Init+0x90>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b1d      	ldr	r3, [pc, #116]	@ (80007b4 <MX_USART2_UART_Init+0x90>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000742:	4b1c      	ldr	r3, [pc, #112]	@ (80007b4 <MX_USART2_UART_Init+0x90>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b1a      	ldr	r3, [pc, #104]	@ (80007b4 <MX_USART2_UART_Init+0x90>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <MX_USART2_UART_Init+0x90>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b17      	ldr	r3, [pc, #92]	@ (80007b4 <MX_USART2_UART_Init+0x90>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075a:	4b16      	ldr	r3, [pc, #88]	@ (80007b4 <MX_USART2_UART_Init+0x90>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000760:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <MX_USART2_UART_Init+0x90>)
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000766:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <MX_USART2_UART_Init+0x90>)
 8000768:	2200      	movs	r2, #0
 800076a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800076c:	4811      	ldr	r0, [pc, #68]	@ (80007b4 <MX_USART2_UART_Init+0x90>)
 800076e:	f001 ff75 	bl	800265c <HAL_UART_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000778:	f000 f844 	bl	8000804 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800077c:	2100      	movs	r1, #0
 800077e:	480d      	ldr	r0, [pc, #52]	@ (80007b4 <MX_USART2_UART_Init+0x90>)
 8000780:	f004 f88d 	bl	800489e <HAL_UARTEx_SetTxFifoThreshold>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800078a:	f000 f83b 	bl	8000804 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800078e:	2100      	movs	r1, #0
 8000790:	4808      	ldr	r0, [pc, #32]	@ (80007b4 <MX_USART2_UART_Init+0x90>)
 8000792:	f004 f8c2 	bl	800491a <HAL_UARTEx_SetRxFifoThreshold>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800079c:	f000 f832 	bl	8000804 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	@ (80007b4 <MX_USART2_UART_Init+0x90>)
 80007a2:	f004 f843 	bl	800482c <HAL_UARTEx_DisableFifoMode>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007ac:	f000 f82a 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000338 	.word	0x20000338
 80007b8:	40004400 	.word	0x40004400

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <MX_GPIO_Init+0x44>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000800 <MX_GPIO_Init+0x44>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <MX_GPIO_Init+0x44>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <MX_GPIO_Init+0x44>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	4a08      	ldr	r2, [pc, #32]	@ (8000800 <MX_GPIO_Init+0x44>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e6:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <MX_GPIO_Init+0x44>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
}
 800080a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <Error_Handler+0x8>

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <HAL_MspInit+0x44>)
 8000818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800081a:	4a0e      	ldr	r2, [pc, #56]	@ (8000854 <HAL_MspInit+0x44>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6613      	str	r3, [r2, #96]	@ 0x60
 8000822:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <HAL_MspInit+0x44>)
 8000824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <HAL_MspInit+0x44>)
 8000830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000832:	4a08      	ldr	r2, [pc, #32]	@ (8000854 <HAL_MspInit+0x44>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000838:	6593      	str	r3, [r2, #88]	@ 0x58
 800083a:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <HAL_MspInit+0x44>)
 800083c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800083e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000846:	f000 ffdb 	bl	8001800 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000

08000858 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b09a      	sub	sp, #104	@ 0x68
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000870:	f107 0310 	add.w	r3, r7, #16
 8000874:	2244      	movs	r2, #68	@ 0x44
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f004 f8db 	bl	8004a34 <memset>
  if(hfdcan->Instance==FDCAN1)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a20      	ldr	r2, [pc, #128]	@ (8000904 <HAL_FDCAN_MspInit+0xac>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d139      	bne.n	80008fc <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000888:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800088c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800088e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000892:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000894:	f107 0310 	add.w	r3, r7, #16
 8000898:	4618      	mov	r0, r3
 800089a:	f001 fcef 	bl	800227c <HAL_RCCEx_PeriphCLKConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80008a4:	f7ff ffae 	bl	8000804 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80008a8:	4b17      	ldr	r3, [pc, #92]	@ (8000908 <HAL_FDCAN_MspInit+0xb0>)
 80008aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ac:	4a16      	ldr	r2, [pc, #88]	@ (8000908 <HAL_FDCAN_MspInit+0xb0>)
 80008ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80008b4:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <HAL_FDCAN_MspInit+0xb0>)
 80008b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c0:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <HAL_FDCAN_MspInit+0xb0>)
 80008c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c4:	4a10      	ldr	r2, [pc, #64]	@ (8000908 <HAL_FDCAN_MspInit+0xb0>)
 80008c6:	f043 0301 	orr.w	r3, r3, #1
 80008ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <HAL_FDCAN_MspInit+0xb0>)
 80008ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008d8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80008dc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80008ea:	2309      	movs	r3, #9
 80008ec:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80008f2:	4619      	mov	r1, r3
 80008f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008f8:	f000 fd44 	bl	8001384 <HAL_GPIO_Init>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80008fc:	bf00      	nop
 80008fe:	3768      	adds	r7, #104	@ 0x68
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40006400 	.word	0x40006400
 8000908:	40021000 	.word	0x40021000

0800090c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b09c      	sub	sp, #112	@ 0x70
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000924:	f107 0318 	add.w	r3, r7, #24
 8000928:	2244      	movs	r2, #68	@ 0x44
 800092a:	2100      	movs	r1, #0
 800092c:	4618      	mov	r0, r3
 800092e:	f004 f881 	bl	8004a34 <memset>
  if(huart->Instance==USART1)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a42      	ldr	r2, [pc, #264]	@ (8000a40 <HAL_UART_MspInit+0x134>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d140      	bne.n	80009be <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800093c:	2301      	movs	r3, #1
 800093e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000944:	f107 0318 	add.w	r3, r7, #24
 8000948:	4618      	mov	r0, r3
 800094a:	f001 fc97 	bl	800227c <HAL_RCCEx_PeriphCLKConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000954:	f7ff ff56 	bl	8000804 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000958:	4b3a      	ldr	r3, [pc, #232]	@ (8000a44 <HAL_UART_MspInit+0x138>)
 800095a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800095c:	4a39      	ldr	r2, [pc, #228]	@ (8000a44 <HAL_UART_MspInit+0x138>)
 800095e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000962:	6613      	str	r3, [r2, #96]	@ 0x60
 8000964:	4b37      	ldr	r3, [pc, #220]	@ (8000a44 <HAL_UART_MspInit+0x138>)
 8000966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000968:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000970:	4b34      	ldr	r3, [pc, #208]	@ (8000a44 <HAL_UART_MspInit+0x138>)
 8000972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000974:	4a33      	ldr	r2, [pc, #204]	@ (8000a44 <HAL_UART_MspInit+0x138>)
 8000976:	f043 0301 	orr.w	r3, r3, #1
 800097a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800097c:	4b31      	ldr	r3, [pc, #196]	@ (8000a44 <HAL_UART_MspInit+0x138>)
 800097e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000988:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800098c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800099a:	2307      	movs	r3, #7
 800099c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80009a2:	4619      	mov	r1, r3
 80009a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a8:	f000 fcec 	bl	8001384 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2100      	movs	r1, #0
 80009b0:	2025      	movs	r0, #37	@ 0x25
 80009b2:	f000 fa42 	bl	8000e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009b6:	2025      	movs	r0, #37	@ 0x25
 80009b8:	f000 fa59 	bl	8000e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009bc:	e03b      	b.n	8000a36 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART2)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a21      	ldr	r2, [pc, #132]	@ (8000a48 <HAL_UART_MspInit+0x13c>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d136      	bne.n	8000a36 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009d0:	f107 0318 	add.w	r3, r7, #24
 80009d4:	4618      	mov	r0, r3
 80009d6:	f001 fc51 	bl	800227c <HAL_RCCEx_PeriphCLKConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80009e0:	f7ff ff10 	bl	8000804 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009e4:	4b17      	ldr	r3, [pc, #92]	@ (8000a44 <HAL_UART_MspInit+0x138>)
 80009e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009e8:	4a16      	ldr	r2, [pc, #88]	@ (8000a44 <HAL_UART_MspInit+0x138>)
 80009ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80009f0:	4b14      	ldr	r3, [pc, #80]	@ (8000a44 <HAL_UART_MspInit+0x138>)
 80009f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fc:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <HAL_UART_MspInit+0x138>)
 80009fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a00:	4a10      	ldr	r2, [pc, #64]	@ (8000a44 <HAL_UART_MspInit+0x138>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a08:	4b0e      	ldr	r3, [pc, #56]	@ (8000a44 <HAL_UART_MspInit+0x138>)
 8000a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000a14:	230c      	movs	r3, #12
 8000a16:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a24:	2307      	movs	r3, #7
 8000a26:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a28:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a32:	f000 fca7 	bl	8001384 <HAL_GPIO_Init>
}
 8000a36:	bf00      	nop
 8000a38:	3770      	adds	r7, #112	@ 0x70
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40013800 	.word	0x40013800
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40004400 	.word	0x40004400

08000a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <NMI_Handler+0x4>

08000a54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <HardFault_Handler+0x4>

08000a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <MemManage_Handler+0x4>

08000a64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa2:	f000 f8d1 	bl	8000c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ab0:	4802      	ldr	r0, [pc, #8]	@ (8000abc <USART1_IRQHandler+0x10>)
 8000ab2:	f001 ffc5 	bl	8002a40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200002a4 	.word	0x200002a4

08000ac0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <SystemInit+0x20>)
 8000ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aca:	4a05      	ldr	r2, [pc, #20]	@ (8000ae0 <SystemInit+0x20>)
 8000acc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ad0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ae4:	480d      	ldr	r0, [pc, #52]	@ (8000b1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ae6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ae8:	f7ff ffea 	bl	8000ac0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aec:	480c      	ldr	r0, [pc, #48]	@ (8000b20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aee:	490d      	ldr	r1, [pc, #52]	@ (8000b24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000af0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b28 <LoopForever+0xe>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b04:	4c0a      	ldr	r4, [pc, #40]	@ (8000b30 <LoopForever+0x16>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000b12:	f003 ff97 	bl	8004a44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b16:	f7ff fcf7 	bl	8000508 <main>

08000b1a <LoopForever>:

LoopForever:
    b LoopForever
 8000b1a:	e7fe      	b.n	8000b1a <LoopForever>
  ldr   r0, =_estack
 8000b1c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b24:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b28:	08004af4 	.word	0x08004af4
  ldr r2, =_sbss
 8000b2c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b30:	200003d0 	.word	0x200003d0

08000b34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC1_2_IRQHandler>
	...

08000b38 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b088      	sub	sp, #32
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8000b42:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <BSP_LED_Init+0x64>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b46:	4a15      	ldr	r2, [pc, #84]	@ (8000b9c <BSP_LED_Init+0x64>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4e:	4b13      	ldr	r3, [pc, #76]	@ (8000b9c <BSP_LED_Init+0x64>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8000b5a:	2320      	movs	r3, #32
 8000b5c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ba0 <BSP_LED_Init+0x68>)
 8000b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b72:	f107 020c 	add.w	r2, r7, #12
 8000b76:	4611      	mov	r1, r2
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 fc03 	bl	8001384 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	4a07      	ldr	r2, [pc, #28]	@ (8000ba0 <BSP_LED_Init+0x68>)
 8000b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b86:	2120      	movs	r1, #32
 8000b88:	2200      	movs	r2, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 fd7c 	bl	8001688 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3720      	adds	r7, #32
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	20000004 	.word	0x20000004

08000ba4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000baa:	2300      	movs	r3, #0
 8000bac:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bae:	2003      	movs	r0, #3
 8000bb0:	f000 f938 	bl	8000e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f000 f80d 	bl	8000bd4 <HAL_InitTick>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d002      	beq.n	8000bc6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	71fb      	strb	r3, [r7, #7]
 8000bc4:	e001      	b.n	8000bca <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bc6:	f7ff fe23 	bl	8000810 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bca:	79fb      	ldrb	r3, [r7, #7]

}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000be0:	4b16      	ldr	r3, [pc, #88]	@ (8000c3c <HAL_InitTick+0x68>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d022      	beq.n	8000c2e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000be8:	4b15      	ldr	r3, [pc, #84]	@ (8000c40 <HAL_InitTick+0x6c>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b13      	ldr	r3, [pc, #76]	@ (8000c3c <HAL_InitTick+0x68>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000bf4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 f944 	bl	8000e8a <HAL_SYSTICK_Config>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d10f      	bne.n	8000c28 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b0f      	cmp	r3, #15
 8000c0c:	d809      	bhi.n	8000c22 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	6879      	ldr	r1, [r7, #4]
 8000c12:	f04f 30ff 	mov.w	r0, #4294967295
 8000c16:	f000 f910 	bl	8000e3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c44 <HAL_InitTick+0x70>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6013      	str	r3, [r2, #0]
 8000c20:	e007      	b.n	8000c32 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	73fb      	strb	r3, [r7, #15]
 8000c26:	e004      	b.n	8000c32 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	73fb      	strb	r3, [r7, #15]
 8000c2c:	e001      	b.n	8000c32 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	2000000c 	.word	0x2000000c
 8000c40:	20000000 	.word	0x20000000
 8000c44:	20000008 	.word	0x20000008

08000c48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c4c:	4b05      	ldr	r3, [pc, #20]	@ (8000c64 <HAL_IncTick+0x1c>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b05      	ldr	r3, [pc, #20]	@ (8000c68 <HAL_IncTick+0x20>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4413      	add	r3, r2
 8000c56:	4a03      	ldr	r2, [pc, #12]	@ (8000c64 <HAL_IncTick+0x1c>)
 8000c58:	6013      	str	r3, [r2, #0]
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	200003cc 	.word	0x200003cc
 8000c68:	2000000c 	.word	0x2000000c

08000c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b03      	ldr	r3, [pc, #12]	@ (8000c80 <HAL_GetTick+0x14>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	200003cc 	.word	0x200003cc

08000c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c94:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb6:	4a04      	ldr	r2, [pc, #16]	@ (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	60d3      	str	r3, [r2, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd0:	4b04      	ldr	r3, [pc, #16]	@ (8000ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	f003 0307 	and.w	r3, r3, #7
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db0b      	blt.n	8000d12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 021f 	and.w	r2, r3, #31
 8000d00:	4907      	ldr	r1, [pc, #28]	@ (8000d20 <__NVIC_EnableIRQ+0x38>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	095b      	lsrs	r3, r3, #5
 8000d08:	2001      	movs	r0, #1
 8000d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000e100 	.word	0xe000e100

08000d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	db0a      	blt.n	8000d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	490c      	ldr	r1, [pc, #48]	@ (8000d70 <__NVIC_SetPriority+0x4c>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	0112      	lsls	r2, r2, #4
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	440b      	add	r3, r1
 8000d48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d4c:	e00a      	b.n	8000d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4908      	ldr	r1, [pc, #32]	@ (8000d74 <__NVIC_SetPriority+0x50>)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	3b04      	subs	r3, #4
 8000d5c:	0112      	lsls	r2, r2, #4
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	440b      	add	r3, r1
 8000d62:	761a      	strb	r2, [r3, #24]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	@ 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f1c3 0307 	rsb	r3, r3, #7
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	bf28      	it	cs
 8000d96:	2304      	movcs	r3, #4
 8000d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d902      	bls.n	8000da8 <NVIC_EncodePriority+0x30>
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3b03      	subs	r3, #3
 8000da6:	e000      	b.n	8000daa <NVIC_EncodePriority+0x32>
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	f04f 32ff 	mov.w	r2, #4294967295
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	43d9      	mvns	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	4313      	orrs	r3, r2
         );
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3724      	adds	r7, #36	@ 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000df0:	d301      	bcc.n	8000df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00f      	b.n	8000e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <SysTick_Config+0x40>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfe:	210f      	movs	r1, #15
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f7ff ff8e 	bl	8000d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e08:	4b05      	ldr	r3, [pc, #20]	@ (8000e20 <SysTick_Config+0x40>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0e:	4b04      	ldr	r3, [pc, #16]	@ (8000e20 <SysTick_Config+0x40>)
 8000e10:	2207      	movs	r2, #7
 8000e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	e000e010 	.word	0xe000e010

08000e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff29 	bl	8000c84 <__NVIC_SetPriorityGrouping>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b086      	sub	sp, #24
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	4603      	mov	r3, r0
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e48:	f7ff ff40 	bl	8000ccc <__NVIC_GetPriorityGrouping>
 8000e4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	68b9      	ldr	r1, [r7, #8]
 8000e52:	6978      	ldr	r0, [r7, #20]
 8000e54:	f7ff ff90 	bl	8000d78 <NVIC_EncodePriority>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff5f 	bl	8000d24 <__NVIC_SetPriority>
}
 8000e66:	bf00      	nop
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	4603      	mov	r3, r0
 8000e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff33 	bl	8000ce8 <__NVIC_EnableIRQ>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff ffa4 	bl	8000de0 <SysTick_Config>
 8000e98:	4603      	mov	r3, r0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b085      	sub	sp, #20
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d005      	beq.n	8000ec6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2204      	movs	r2, #4
 8000ebe:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	73fb      	strb	r3, [r7, #15]
 8000ec4:	e037      	b.n	8000f36 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f022 020e 	bic.w	r2, r2, #14
 8000ed4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ee0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000ee4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f022 0201 	bic.w	r2, r2, #1
 8000ef4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efa:	f003 021f 	and.w	r2, r3, #31
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f02:	2101      	movs	r1, #1
 8000f04:	fa01 f202 	lsl.w	r2, r1, r2
 8000f08:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000f12:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d00c      	beq.n	8000f36 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f2a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000f34:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d00d      	beq.n	8000f88 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2204      	movs	r2, #4
 8000f70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2201      	movs	r2, #1
 8000f76:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	73fb      	strb	r3, [r7, #15]
 8000f86:	e047      	b.n	8001018 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f022 020e 	bic.w	r2, r2, #14
 8000f96:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f022 0201 	bic.w	r2, r2, #1
 8000fa6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fb2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fbc:	f003 021f 	and.w	r2, r3, #31
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000fd4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00c      	beq.n	8000ff8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fe8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000ff6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	4798      	blx	r3
    }
  }
  return status;
 8001018:	7bfb      	ldrb	r3, [r7, #15]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e147      	b.n	80012c6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d106      	bne.n	8001050 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff fc04 	bl	8000858 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	699a      	ldr	r2, [r3, #24]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 0210 	bic.w	r2, r2, #16
 800105e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001060:	f7ff fe04 	bl	8000c6c <HAL_GetTick>
 8001064:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001066:	e012      	b.n	800108e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001068:	f7ff fe00 	bl	8000c6c <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b0a      	cmp	r3, #10
 8001074:	d90b      	bls.n	800108e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800107a:	f043 0201 	orr.w	r2, r3, #1
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2203      	movs	r2, #3
 8001086:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e11b      	b.n	80012c6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f003 0308 	and.w	r3, r3, #8
 8001098:	2b08      	cmp	r3, #8
 800109a:	d0e5      	beq.n	8001068 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	699a      	ldr	r2, [r3, #24]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f042 0201 	orr.w	r2, r2, #1
 80010aa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010ac:	f7ff fdde 	bl	8000c6c <HAL_GetTick>
 80010b0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80010b2:	e012      	b.n	80010da <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80010b4:	f7ff fdda 	bl	8000c6c <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b0a      	cmp	r3, #10
 80010c0:	d90b      	bls.n	80010da <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010c6:	f043 0201 	orr.w	r2, r3, #1
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2203      	movs	r2, #3
 80010d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e0f5      	b.n	80012c6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0e5      	beq.n	80010b4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	699a      	ldr	r2, [r3, #24]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f042 0202 	orr.w	r2, r2, #2
 80010f6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a74      	ldr	r2, [pc, #464]	@ (80012d0 <HAL_FDCAN_Init+0x2ac>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d103      	bne.n	800110a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001102:	4a74      	ldr	r2, [pc, #464]	@ (80012d4 <HAL_FDCAN_Init+0x2b0>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	7c1b      	ldrb	r3, [r3, #16]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d108      	bne.n	8001124 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	699a      	ldr	r2, [r3, #24]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001120:	619a      	str	r2, [r3, #24]
 8001122:	e007      	b.n	8001134 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	699a      	ldr	r2, [r3, #24]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001132:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7c5b      	ldrb	r3, [r3, #17]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d108      	bne.n	800114e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	699a      	ldr	r2, [r3, #24]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800114a:	619a      	str	r2, [r3, #24]
 800114c:	e007      	b.n	800115e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	699a      	ldr	r2, [r3, #24]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800115c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	7c9b      	ldrb	r3, [r3, #18]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d108      	bne.n	8001178 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	699a      	ldr	r2, [r3, #24]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001174:	619a      	str	r2, [r3, #24]
 8001176:	e007      	b.n	8001188 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	699a      	ldr	r2, [r3, #24]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001186:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689a      	ldr	r2, [r3, #8]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	430a      	orrs	r2, r1
 800119c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	699a      	ldr	r2, [r3, #24]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80011ac:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 0210 	bic.w	r2, r2, #16
 80011bc:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d108      	bne.n	80011d8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	699a      	ldr	r2, [r3, #24]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f042 0204 	orr.w	r2, r2, #4
 80011d4:	619a      	str	r2, [r3, #24]
 80011d6:	e02c      	b.n	8001232 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d028      	beq.n	8001232 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d01c      	beq.n	8001222 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	699a      	ldr	r2, [r3, #24]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80011f6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	691a      	ldr	r2, [r3, #16]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f042 0210 	orr.w	r2, r2, #16
 8001206:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	2b03      	cmp	r3, #3
 800120e:	d110      	bne.n	8001232 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	699a      	ldr	r2, [r3, #24]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 0220 	orr.w	r2, r2, #32
 800121e:	619a      	str	r2, [r3, #24]
 8001220:	e007      	b.n	8001232 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	699a      	ldr	r2, [r3, #24]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f042 0220 	orr.w	r2, r2, #32
 8001230:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	3b01      	subs	r3, #1
 8001238:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	3b01      	subs	r3, #1
 8001240:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001242:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800124a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	3b01      	subs	r3, #1
 8001254:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800125a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800125c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001266:	d115      	bne.n	8001294 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800126c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001272:	3b01      	subs	r3, #1
 8001274:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001276:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127c:	3b01      	subs	r3, #1
 800127e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001280:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001288:	3b01      	subs	r3, #1
 800128a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001290:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001292:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	430a      	orrs	r2, r1
 80012a6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 f814 	bl	80012d8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2201      	movs	r2, #1
 80012c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40006400 	.word	0x40006400
 80012d4:	40006500 	.word	0x40006500

080012d8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80012e0:	4b27      	ldr	r3, [pc, #156]	@ (8001380 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80012e2:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012f2:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012fa:	041a      	lsls	r2, r3, #16
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	430a      	orrs	r2, r1
 8001302:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001318:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001320:	061a      	lsls	r2, r3, #24
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	430a      	orrs	r2, r1
 8001328:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	e005      	b.n	8001366 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	3304      	adds	r3, #4
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	429a      	cmp	r2, r3
 8001370:	d3f3      	bcc.n	800135a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001372:	bf00      	nop
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	4000a400 	.word	0x4000a400

08001384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001384:	b480      	push	{r7}
 8001386:	b087      	sub	sp, #28
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001392:	e15a      	b.n	800164a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	2101      	movs	r1, #1
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	fa01 f303 	lsl.w	r3, r1, r3
 80013a0:	4013      	ands	r3, r2
 80013a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 814c 	beq.w	8001644 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d005      	beq.n	80013c4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d130      	bne.n	8001426 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2203      	movs	r2, #3
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	68da      	ldr	r2, [r3, #12]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013fa:	2201      	movs	r2, #1
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	091b      	lsrs	r3, r3, #4
 8001410:	f003 0201 	and.w	r2, r3, #1
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 0303 	and.w	r3, r3, #3
 800142e:	2b03      	cmp	r3, #3
 8001430:	d017      	beq.n	8001462 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	2203      	movs	r2, #3
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 0303 	and.w	r3, r3, #3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d123      	bne.n	80014b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	08da      	lsrs	r2, r3, #3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3208      	adds	r2, #8
 8001476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800147a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	220f      	movs	r2, #15
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4013      	ands	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	691a      	ldr	r2, [r3, #16]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	08da      	lsrs	r2, r3, #3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3208      	adds	r2, #8
 80014b0:	6939      	ldr	r1, [r7, #16]
 80014b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	2203      	movs	r2, #3
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 0203 	and.w	r2, r3, #3
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 80a6 	beq.w	8001644 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f8:	4b5b      	ldr	r3, [pc, #364]	@ (8001668 <HAL_GPIO_Init+0x2e4>)
 80014fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014fc:	4a5a      	ldr	r2, [pc, #360]	@ (8001668 <HAL_GPIO_Init+0x2e4>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	6613      	str	r3, [r2, #96]	@ 0x60
 8001504:	4b58      	ldr	r3, [pc, #352]	@ (8001668 <HAL_GPIO_Init+0x2e4>)
 8001506:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001510:	4a56      	ldr	r2, [pc, #344]	@ (800166c <HAL_GPIO_Init+0x2e8>)
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	089b      	lsrs	r3, r3, #2
 8001516:	3302      	adds	r3, #2
 8001518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f003 0303 	and.w	r3, r3, #3
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	220f      	movs	r2, #15
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800153a:	d01f      	beq.n	800157c <HAL_GPIO_Init+0x1f8>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a4c      	ldr	r2, [pc, #304]	@ (8001670 <HAL_GPIO_Init+0x2ec>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d019      	beq.n	8001578 <HAL_GPIO_Init+0x1f4>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a4b      	ldr	r2, [pc, #300]	@ (8001674 <HAL_GPIO_Init+0x2f0>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d013      	beq.n	8001574 <HAL_GPIO_Init+0x1f0>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a4a      	ldr	r2, [pc, #296]	@ (8001678 <HAL_GPIO_Init+0x2f4>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d00d      	beq.n	8001570 <HAL_GPIO_Init+0x1ec>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a49      	ldr	r2, [pc, #292]	@ (800167c <HAL_GPIO_Init+0x2f8>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d007      	beq.n	800156c <HAL_GPIO_Init+0x1e8>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a48      	ldr	r2, [pc, #288]	@ (8001680 <HAL_GPIO_Init+0x2fc>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d101      	bne.n	8001568 <HAL_GPIO_Init+0x1e4>
 8001564:	2305      	movs	r3, #5
 8001566:	e00a      	b.n	800157e <HAL_GPIO_Init+0x1fa>
 8001568:	2306      	movs	r3, #6
 800156a:	e008      	b.n	800157e <HAL_GPIO_Init+0x1fa>
 800156c:	2304      	movs	r3, #4
 800156e:	e006      	b.n	800157e <HAL_GPIO_Init+0x1fa>
 8001570:	2303      	movs	r3, #3
 8001572:	e004      	b.n	800157e <HAL_GPIO_Init+0x1fa>
 8001574:	2302      	movs	r3, #2
 8001576:	e002      	b.n	800157e <HAL_GPIO_Init+0x1fa>
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <HAL_GPIO_Init+0x1fa>
 800157c:	2300      	movs	r3, #0
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	f002 0203 	and.w	r2, r2, #3
 8001584:	0092      	lsls	r2, r2, #2
 8001586:	4093      	lsls	r3, r2
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800158e:	4937      	ldr	r1, [pc, #220]	@ (800166c <HAL_GPIO_Init+0x2e8>)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	089b      	lsrs	r3, r3, #2
 8001594:	3302      	adds	r3, #2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800159c:	4b39      	ldr	r3, [pc, #228]	@ (8001684 <HAL_GPIO_Init+0x300>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015c0:	4a30      	ldr	r2, [pc, #192]	@ (8001684 <HAL_GPIO_Init+0x300>)
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001684 <HAL_GPIO_Init+0x300>)
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015ea:	4a26      	ldr	r2, [pc, #152]	@ (8001684 <HAL_GPIO_Init+0x300>)
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80015f0:	4b24      	ldr	r3, [pc, #144]	@ (8001684 <HAL_GPIO_Init+0x300>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001614:	4a1b      	ldr	r2, [pc, #108]	@ (8001684 <HAL_GPIO_Init+0x300>)
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800161a:	4b1a      	ldr	r3, [pc, #104]	@ (8001684 <HAL_GPIO_Init+0x300>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	43db      	mvns	r3, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800163e:	4a11      	ldr	r2, [pc, #68]	@ (8001684 <HAL_GPIO_Init+0x300>)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	3301      	adds	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	fa22 f303 	lsr.w	r3, r2, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	f47f ae9d 	bne.w	8001394 <HAL_GPIO_Init+0x10>
  }
}
 800165a:	bf00      	nop
 800165c:	bf00      	nop
 800165e:	371c      	adds	r7, #28
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	40021000 	.word	0x40021000
 800166c:	40010000 	.word	0x40010000
 8001670:	48000400 	.word	0x48000400
 8001674:	48000800 	.word	0x48000800
 8001678:	48000c00 	.word	0x48000c00
 800167c:	48001000 	.word	0x48001000
 8001680:	48001400 	.word	0x48001400
 8001684:	40010400 	.word	0x40010400

08001688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]
 8001694:	4613      	mov	r3, r2
 8001696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001698:	787b      	ldrb	r3, [r7, #1]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800169e:	887a      	ldrh	r2, [r7, #2]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016a4:	e002      	b.n	80016ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016a6:	887a      	ldrh	r2, [r7, #2]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d141      	bne.n	800174a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016c6:	4b4b      	ldr	r3, [pc, #300]	@ (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016d2:	d131      	bne.n	8001738 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016d4:	4b47      	ldr	r3, [pc, #284]	@ (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016da:	4a46      	ldr	r2, [pc, #280]	@ (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016e4:	4b43      	ldr	r3, [pc, #268]	@ (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016ec:	4a41      	ldr	r2, [pc, #260]	@ (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016f4:	4b40      	ldr	r3, [pc, #256]	@ (80017f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2232      	movs	r2, #50	@ 0x32
 80016fa:	fb02 f303 	mul.w	r3, r2, r3
 80016fe:	4a3f      	ldr	r2, [pc, #252]	@ (80017fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001700:	fba2 2303 	umull	r2, r3, r2, r3
 8001704:	0c9b      	lsrs	r3, r3, #18
 8001706:	3301      	adds	r3, #1
 8001708:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800170a:	e002      	b.n	8001712 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	3b01      	subs	r3, #1
 8001710:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001712:	4b38      	ldr	r3, [pc, #224]	@ (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800171a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800171e:	d102      	bne.n	8001726 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f2      	bne.n	800170c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001726:	4b33      	ldr	r3, [pc, #204]	@ (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800172e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001732:	d158      	bne.n	80017e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e057      	b.n	80017e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001738:	4b2e      	ldr	r3, [pc, #184]	@ (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800173a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800173e:	4a2d      	ldr	r2, [pc, #180]	@ (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001740:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001744:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001748:	e04d      	b.n	80017e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001750:	d141      	bne.n	80017d6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001752:	4b28      	ldr	r3, [pc, #160]	@ (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800175a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800175e:	d131      	bne.n	80017c4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001760:	4b24      	ldr	r3, [pc, #144]	@ (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001762:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001766:	4a23      	ldr	r2, [pc, #140]	@ (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800176c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001770:	4b20      	ldr	r3, [pc, #128]	@ (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001778:	4a1e      	ldr	r2, [pc, #120]	@ (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800177a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800177e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001780:	4b1d      	ldr	r3, [pc, #116]	@ (80017f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2232      	movs	r2, #50	@ 0x32
 8001786:	fb02 f303 	mul.w	r3, r2, r3
 800178a:	4a1c      	ldr	r2, [pc, #112]	@ (80017fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800178c:	fba2 2303 	umull	r2, r3, r2, r3
 8001790:	0c9b      	lsrs	r3, r3, #18
 8001792:	3301      	adds	r3, #1
 8001794:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001796:	e002      	b.n	800179e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3b01      	subs	r3, #1
 800179c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800179e:	4b15      	ldr	r3, [pc, #84]	@ (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017aa:	d102      	bne.n	80017b2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f2      	bne.n	8001798 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017b2:	4b10      	ldr	r3, [pc, #64]	@ (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017be:	d112      	bne.n	80017e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e011      	b.n	80017e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017c4:	4b0b      	ldr	r3, [pc, #44]	@ (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017ca:	4a0a      	ldr	r2, [pc, #40]	@ (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80017d4:	e007      	b.n	80017e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017d6:	4b07      	ldr	r3, [pc, #28]	@ (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017de:	4a05      	ldr	r2, [pc, #20]	@ (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017e4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	40007000 	.word	0x40007000
 80017f8:	20000000 	.word	0x20000000
 80017fc:	431bde83 	.word	0x431bde83

08001800 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001804:	4b05      	ldr	r3, [pc, #20]	@ (800181c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	4a04      	ldr	r2, [pc, #16]	@ (800181c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800180a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800180e:	6093      	str	r3, [r2, #8]
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40007000 	.word	0x40007000

08001820 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e2fe      	b.n	8001e30 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d075      	beq.n	800192a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800183e:	4b97      	ldr	r3, [pc, #604]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 030c 	and.w	r3, r3, #12
 8001846:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001848:	4b94      	ldr	r3, [pc, #592]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	2b0c      	cmp	r3, #12
 8001856:	d102      	bne.n	800185e <HAL_RCC_OscConfig+0x3e>
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	2b03      	cmp	r3, #3
 800185c:	d002      	beq.n	8001864 <HAL_RCC_OscConfig+0x44>
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	2b08      	cmp	r3, #8
 8001862:	d10b      	bne.n	800187c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001864:	4b8d      	ldr	r3, [pc, #564]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d05b      	beq.n	8001928 <HAL_RCC_OscConfig+0x108>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d157      	bne.n	8001928 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e2d9      	b.n	8001e30 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001884:	d106      	bne.n	8001894 <HAL_RCC_OscConfig+0x74>
 8001886:	4b85      	ldr	r3, [pc, #532]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a84      	ldr	r2, [pc, #528]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 800188c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	e01d      	b.n	80018d0 <HAL_RCC_OscConfig+0xb0>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800189c:	d10c      	bne.n	80018b8 <HAL_RCC_OscConfig+0x98>
 800189e:	4b7f      	ldr	r3, [pc, #508]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a7e      	ldr	r2, [pc, #504]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 80018a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	4b7c      	ldr	r3, [pc, #496]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a7b      	ldr	r2, [pc, #492]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 80018b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e00b      	b.n	80018d0 <HAL_RCC_OscConfig+0xb0>
 80018b8:	4b78      	ldr	r3, [pc, #480]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a77      	ldr	r2, [pc, #476]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 80018be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	4b75      	ldr	r3, [pc, #468]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a74      	ldr	r2, [pc, #464]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 80018ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d013      	beq.n	8001900 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff f9c8 	bl	8000c6c <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e0:	f7ff f9c4 	bl	8000c6c <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b64      	cmp	r3, #100	@ 0x64
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e29e      	b.n	8001e30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018f2:	4b6a      	ldr	r3, [pc, #424]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0xc0>
 80018fe:	e014      	b.n	800192a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7ff f9b4 	bl	8000c6c <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001908:	f7ff f9b0 	bl	8000c6c <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	@ 0x64
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e28a      	b.n	8001e30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800191a:	4b60      	ldr	r3, [pc, #384]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0xe8>
 8001926:	e000      	b.n	800192a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d075      	beq.n	8001a22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001936:	4b59      	ldr	r3, [pc, #356]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001940:	4b56      	ldr	r3, [pc, #344]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	2b0c      	cmp	r3, #12
 800194e:	d102      	bne.n	8001956 <HAL_RCC_OscConfig+0x136>
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d002      	beq.n	800195c <HAL_RCC_OscConfig+0x13c>
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	2b04      	cmp	r3, #4
 800195a:	d11f      	bne.n	800199c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800195c:	4b4f      	ldr	r3, [pc, #316]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <HAL_RCC_OscConfig+0x154>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e25d      	b.n	8001e30 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001974:	4b49      	ldr	r3, [pc, #292]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	061b      	lsls	r3, r3, #24
 8001982:	4946      	ldr	r1, [pc, #280]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 8001984:	4313      	orrs	r3, r2
 8001986:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001988:	4b45      	ldr	r3, [pc, #276]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff f921 	bl	8000bd4 <HAL_InitTick>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d043      	beq.n	8001a20 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e249      	b.n	8001e30 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d023      	beq.n	80019ec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a4:	4b3d      	ldr	r3, [pc, #244]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a3c      	ldr	r2, [pc, #240]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 80019aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b0:	f7ff f95c 	bl	8000c6c <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b8:	f7ff f958 	bl	8000c6c <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e232      	b.n	8001e30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ca:	4b34      	ldr	r3, [pc, #208]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f0      	beq.n	80019b8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d6:	4b31      	ldr	r3, [pc, #196]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	061b      	lsls	r3, r3, #24
 80019e4:	492d      	ldr	r1, [pc, #180]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	604b      	str	r3, [r1, #4]
 80019ea:	e01a      	b.n	8001a22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ec:	4b2b      	ldr	r3, [pc, #172]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a2a      	ldr	r2, [pc, #168]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 80019f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f8:	f7ff f938 	bl	8000c6c <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a00:	f7ff f934 	bl	8000c6c <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e20e      	b.n	8001e30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a12:	4b22      	ldr	r3, [pc, #136]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x1e0>
 8001a1e:	e000      	b.n	8001a22 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d041      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d01c      	beq.n	8001a70 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a36:	4b19      	ldr	r3, [pc, #100]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 8001a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a3c:	4a17      	ldr	r2, [pc, #92]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a46:	f7ff f911 	bl	8000c6c <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a4e:	f7ff f90d 	bl	8000c6c <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e1e7      	b.n	8001e30 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a60:	4b0e      	ldr	r3, [pc, #56]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 8001a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0ef      	beq.n	8001a4e <HAL_RCC_OscConfig+0x22e>
 8001a6e:	e020      	b.n	8001ab2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a70:	4b0a      	ldr	r3, [pc, #40]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 8001a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a76:	4a09      	ldr	r2, [pc, #36]	@ (8001a9c <HAL_RCC_OscConfig+0x27c>)
 8001a78:	f023 0301 	bic.w	r3, r3, #1
 8001a7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a80:	f7ff f8f4 	bl	8000c6c <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a86:	e00d      	b.n	8001aa4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a88:	f7ff f8f0 	bl	8000c6c <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d906      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e1ca      	b.n	8001e30 <HAL_RCC_OscConfig+0x610>
 8001a9a:	bf00      	nop
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aa4:	4b8c      	ldr	r3, [pc, #560]	@ (8001cd8 <HAL_RCC_OscConfig+0x4b8>)
 8001aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1ea      	bne.n	8001a88 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 80a6 	beq.w	8001c0c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ac4:	4b84      	ldr	r3, [pc, #528]	@ (8001cd8 <HAL_RCC_OscConfig+0x4b8>)
 8001ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x2b4>
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <HAL_RCC_OscConfig+0x2b6>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00d      	beq.n	8001af6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ada:	4b7f      	ldr	r3, [pc, #508]	@ (8001cd8 <HAL_RCC_OscConfig+0x4b8>)
 8001adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ade:	4a7e      	ldr	r2, [pc, #504]	@ (8001cd8 <HAL_RCC_OscConfig+0x4b8>)
 8001ae0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ae4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ae6:	4b7c      	ldr	r3, [pc, #496]	@ (8001cd8 <HAL_RCC_OscConfig+0x4b8>)
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001af2:	2301      	movs	r3, #1
 8001af4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af6:	4b79      	ldr	r3, [pc, #484]	@ (8001cdc <HAL_RCC_OscConfig+0x4bc>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d118      	bne.n	8001b34 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b02:	4b76      	ldr	r3, [pc, #472]	@ (8001cdc <HAL_RCC_OscConfig+0x4bc>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a75      	ldr	r2, [pc, #468]	@ (8001cdc <HAL_RCC_OscConfig+0x4bc>)
 8001b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b0e:	f7ff f8ad 	bl	8000c6c <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b16:	f7ff f8a9 	bl	8000c6c <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e183      	b.n	8001e30 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b28:	4b6c      	ldr	r3, [pc, #432]	@ (8001cdc <HAL_RCC_OscConfig+0x4bc>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0f0      	beq.n	8001b16 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d108      	bne.n	8001b4e <HAL_RCC_OscConfig+0x32e>
 8001b3c:	4b66      	ldr	r3, [pc, #408]	@ (8001cd8 <HAL_RCC_OscConfig+0x4b8>)
 8001b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b42:	4a65      	ldr	r2, [pc, #404]	@ (8001cd8 <HAL_RCC_OscConfig+0x4b8>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b4c:	e024      	b.n	8001b98 <HAL_RCC_OscConfig+0x378>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2b05      	cmp	r3, #5
 8001b54:	d110      	bne.n	8001b78 <HAL_RCC_OscConfig+0x358>
 8001b56:	4b60      	ldr	r3, [pc, #384]	@ (8001cd8 <HAL_RCC_OscConfig+0x4b8>)
 8001b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b5c:	4a5e      	ldr	r2, [pc, #376]	@ (8001cd8 <HAL_RCC_OscConfig+0x4b8>)
 8001b5e:	f043 0304 	orr.w	r3, r3, #4
 8001b62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b66:	4b5c      	ldr	r3, [pc, #368]	@ (8001cd8 <HAL_RCC_OscConfig+0x4b8>)
 8001b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b6c:	4a5a      	ldr	r2, [pc, #360]	@ (8001cd8 <HAL_RCC_OscConfig+0x4b8>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b76:	e00f      	b.n	8001b98 <HAL_RCC_OscConfig+0x378>
 8001b78:	4b57      	ldr	r3, [pc, #348]	@ (8001cd8 <HAL_RCC_OscConfig+0x4b8>)
 8001b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b7e:	4a56      	ldr	r2, [pc, #344]	@ (8001cd8 <HAL_RCC_OscConfig+0x4b8>)
 8001b80:	f023 0301 	bic.w	r3, r3, #1
 8001b84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b88:	4b53      	ldr	r3, [pc, #332]	@ (8001cd8 <HAL_RCC_OscConfig+0x4b8>)
 8001b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b8e:	4a52      	ldr	r2, [pc, #328]	@ (8001cd8 <HAL_RCC_OscConfig+0x4b8>)
 8001b90:	f023 0304 	bic.w	r3, r3, #4
 8001b94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d016      	beq.n	8001bce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba0:	f7ff f864 	bl	8000c6c <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ba6:	e00a      	b.n	8001bbe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba8:	f7ff f860 	bl	8000c6c <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e138      	b.n	8001e30 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bbe:	4b46      	ldr	r3, [pc, #280]	@ (8001cd8 <HAL_RCC_OscConfig+0x4b8>)
 8001bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0ed      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x388>
 8001bcc:	e015      	b.n	8001bfa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bce:	f7ff f84d 	bl	8000c6c <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bd4:	e00a      	b.n	8001bec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd6:	f7ff f849 	bl	8000c6c <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e121      	b.n	8001e30 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bec:	4b3a      	ldr	r3, [pc, #232]	@ (8001cd8 <HAL_RCC_OscConfig+0x4b8>)
 8001bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1ed      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bfa:	7ffb      	ldrb	r3, [r7, #31]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d105      	bne.n	8001c0c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c00:	4b35      	ldr	r3, [pc, #212]	@ (8001cd8 <HAL_RCC_OscConfig+0x4b8>)
 8001c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c04:	4a34      	ldr	r2, [pc, #208]	@ (8001cd8 <HAL_RCC_OscConfig+0x4b8>)
 8001c06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c0a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0320 	and.w	r3, r3, #32
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d03c      	beq.n	8001c92 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d01c      	beq.n	8001c5a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c20:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd8 <HAL_RCC_OscConfig+0x4b8>)
 8001c22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c26:	4a2c      	ldr	r2, [pc, #176]	@ (8001cd8 <HAL_RCC_OscConfig+0x4b8>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c30:	f7ff f81c 	bl	8000c6c <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c38:	f7ff f818 	bl	8000c6c <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e0f2      	b.n	8001e30 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c4a:	4b23      	ldr	r3, [pc, #140]	@ (8001cd8 <HAL_RCC_OscConfig+0x4b8>)
 8001c4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0ef      	beq.n	8001c38 <HAL_RCC_OscConfig+0x418>
 8001c58:	e01b      	b.n	8001c92 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd8 <HAL_RCC_OscConfig+0x4b8>)
 8001c5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c60:	4a1d      	ldr	r2, [pc, #116]	@ (8001cd8 <HAL_RCC_OscConfig+0x4b8>)
 8001c62:	f023 0301 	bic.w	r3, r3, #1
 8001c66:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c6a:	f7fe ffff 	bl	8000c6c <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c72:	f7fe fffb 	bl	8000c6c <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e0d5      	b.n	8001e30 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c84:	4b14      	ldr	r3, [pc, #80]	@ (8001cd8 <HAL_RCC_OscConfig+0x4b8>)
 8001c86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1ef      	bne.n	8001c72 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 80c9 	beq.w	8001e2e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd8 <HAL_RCC_OscConfig+0x4b8>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 030c 	and.w	r3, r3, #12
 8001ca4:	2b0c      	cmp	r3, #12
 8001ca6:	f000 8083 	beq.w	8001db0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d15e      	bne.n	8001d70 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb2:	4b09      	ldr	r3, [pc, #36]	@ (8001cd8 <HAL_RCC_OscConfig+0x4b8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a08      	ldr	r2, [pc, #32]	@ (8001cd8 <HAL_RCC_OscConfig+0x4b8>)
 8001cb8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbe:	f7fe ffd5 	bl	8000c6c <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cc4:	e00c      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc6:	f7fe ffd1 	bl	8000c6c <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d905      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e0ab      	b.n	8001e30 <HAL_RCC_OscConfig+0x610>
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce0:	4b55      	ldr	r3, [pc, #340]	@ (8001e38 <HAL_RCC_OscConfig+0x618>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1ec      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cec:	4b52      	ldr	r3, [pc, #328]	@ (8001e38 <HAL_RCC_OscConfig+0x618>)
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	4b52      	ldr	r3, [pc, #328]	@ (8001e3c <HAL_RCC_OscConfig+0x61c>)
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6a11      	ldr	r1, [r2, #32]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001cfc:	3a01      	subs	r2, #1
 8001cfe:	0112      	lsls	r2, r2, #4
 8001d00:	4311      	orrs	r1, r2
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001d06:	0212      	lsls	r2, r2, #8
 8001d08:	4311      	orrs	r1, r2
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d0e:	0852      	lsrs	r2, r2, #1
 8001d10:	3a01      	subs	r2, #1
 8001d12:	0552      	lsls	r2, r2, #21
 8001d14:	4311      	orrs	r1, r2
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d1a:	0852      	lsrs	r2, r2, #1
 8001d1c:	3a01      	subs	r2, #1
 8001d1e:	0652      	lsls	r2, r2, #25
 8001d20:	4311      	orrs	r1, r2
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001d26:	06d2      	lsls	r2, r2, #27
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	4943      	ldr	r1, [pc, #268]	@ (8001e38 <HAL_RCC_OscConfig+0x618>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d30:	4b41      	ldr	r3, [pc, #260]	@ (8001e38 <HAL_RCC_OscConfig+0x618>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a40      	ldr	r2, [pc, #256]	@ (8001e38 <HAL_RCC_OscConfig+0x618>)
 8001d36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d3a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d3c:	4b3e      	ldr	r3, [pc, #248]	@ (8001e38 <HAL_RCC_OscConfig+0x618>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	4a3d      	ldr	r2, [pc, #244]	@ (8001e38 <HAL_RCC_OscConfig+0x618>)
 8001d42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d46:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d48:	f7fe ff90 	bl	8000c6c <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d50:	f7fe ff8c 	bl	8000c6c <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e066      	b.n	8001e30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d62:	4b35      	ldr	r3, [pc, #212]	@ (8001e38 <HAL_RCC_OscConfig+0x618>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0x530>
 8001d6e:	e05e      	b.n	8001e2e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d70:	4b31      	ldr	r3, [pc, #196]	@ (8001e38 <HAL_RCC_OscConfig+0x618>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a30      	ldr	r2, [pc, #192]	@ (8001e38 <HAL_RCC_OscConfig+0x618>)
 8001d76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7fe ff76 	bl	8000c6c <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d84:	f7fe ff72 	bl	8000c6c <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e04c      	b.n	8001e30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d96:	4b28      	ldr	r3, [pc, #160]	@ (8001e38 <HAL_RCC_OscConfig+0x618>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001da2:	4b25      	ldr	r3, [pc, #148]	@ (8001e38 <HAL_RCC_OscConfig+0x618>)
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	4924      	ldr	r1, [pc, #144]	@ (8001e38 <HAL_RCC_OscConfig+0x618>)
 8001da8:	4b25      	ldr	r3, [pc, #148]	@ (8001e40 <HAL_RCC_OscConfig+0x620>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	60cb      	str	r3, [r1, #12]
 8001dae:	e03e      	b.n	8001e2e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e039      	b.n	8001e30 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8001e38 <HAL_RCC_OscConfig+0x618>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f003 0203 	and.w	r2, r3, #3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d12c      	bne.n	8001e2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d123      	bne.n	8001e2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d11b      	bne.n	8001e2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dfc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d113      	bne.n	8001e2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0c:	085b      	lsrs	r3, r3, #1
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d109      	bne.n	8001e2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e20:	085b      	lsrs	r3, r3, #1
 8001e22:	3b01      	subs	r3, #1
 8001e24:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d001      	beq.n	8001e2e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3720      	adds	r7, #32
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	019f800c 	.word	0x019f800c
 8001e40:	feeefffc 	.word	0xfeeefffc

08001e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e11e      	b.n	800209a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e5c:	4b91      	ldr	r3, [pc, #580]	@ (80020a4 <HAL_RCC_ClockConfig+0x260>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d910      	bls.n	8001e8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6a:	4b8e      	ldr	r3, [pc, #568]	@ (80020a4 <HAL_RCC_ClockConfig+0x260>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 020f 	bic.w	r2, r3, #15
 8001e72:	498c      	ldr	r1, [pc, #560]	@ (80020a4 <HAL_RCC_ClockConfig+0x260>)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7a:	4b8a      	ldr	r3, [pc, #552]	@ (80020a4 <HAL_RCC_ClockConfig+0x260>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d001      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e106      	b.n	800209a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d073      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d129      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea0:	4b81      	ldr	r3, [pc, #516]	@ (80020a8 <HAL_RCC_ClockConfig+0x264>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0f4      	b.n	800209a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001eb0:	f000 f99e 	bl	80021f0 <RCC_GetSysClockFreqFromPLLSource>
 8001eb4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4a7c      	ldr	r2, [pc, #496]	@ (80020ac <HAL_RCC_ClockConfig+0x268>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d93f      	bls.n	8001f3e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ebe:	4b7a      	ldr	r3, [pc, #488]	@ (80020a8 <HAL_RCC_ClockConfig+0x264>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d009      	beq.n	8001ede <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d033      	beq.n	8001f3e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d12f      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ede:	4b72      	ldr	r3, [pc, #456]	@ (80020a8 <HAL_RCC_ClockConfig+0x264>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ee6:	4a70      	ldr	r2, [pc, #448]	@ (80020a8 <HAL_RCC_ClockConfig+0x264>)
 8001ee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001eec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001eee:	2380      	movs	r3, #128	@ 0x80
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	e024      	b.n	8001f3e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d107      	bne.n	8001f0c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001efc:	4b6a      	ldr	r3, [pc, #424]	@ (80020a8 <HAL_RCC_ClockConfig+0x264>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d109      	bne.n	8001f1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0c6      	b.n	800209a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f0c:	4b66      	ldr	r3, [pc, #408]	@ (80020a8 <HAL_RCC_ClockConfig+0x264>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0be      	b.n	800209a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001f1c:	f000 f8ce 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 8001f20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4a61      	ldr	r2, [pc, #388]	@ (80020ac <HAL_RCC_ClockConfig+0x268>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d909      	bls.n	8001f3e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f2a:	4b5f      	ldr	r3, [pc, #380]	@ (80020a8 <HAL_RCC_ClockConfig+0x264>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f32:	4a5d      	ldr	r2, [pc, #372]	@ (80020a8 <HAL_RCC_ClockConfig+0x264>)
 8001f34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f38:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001f3a:	2380      	movs	r3, #128	@ 0x80
 8001f3c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f3e:	4b5a      	ldr	r3, [pc, #360]	@ (80020a8 <HAL_RCC_ClockConfig+0x264>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f023 0203 	bic.w	r2, r3, #3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	4957      	ldr	r1, [pc, #348]	@ (80020a8 <HAL_RCC_ClockConfig+0x264>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f50:	f7fe fe8c 	bl	8000c6c <HAL_GetTick>
 8001f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f56:	e00a      	b.n	8001f6e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f58:	f7fe fe88 	bl	8000c6c <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e095      	b.n	800209a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6e:	4b4e      	ldr	r3, [pc, #312]	@ (80020a8 <HAL_RCC_ClockConfig+0x264>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 020c 	and.w	r2, r3, #12
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d1eb      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d023      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f98:	4b43      	ldr	r3, [pc, #268]	@ (80020a8 <HAL_RCC_ClockConfig+0x264>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	4a42      	ldr	r2, [pc, #264]	@ (80020a8 <HAL_RCC_ClockConfig+0x264>)
 8001f9e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001fa2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d007      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001fb0:	4b3d      	ldr	r3, [pc, #244]	@ (80020a8 <HAL_RCC_ClockConfig+0x264>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001fb8:	4a3b      	ldr	r2, [pc, #236]	@ (80020a8 <HAL_RCC_ClockConfig+0x264>)
 8001fba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001fbe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc0:	4b39      	ldr	r3, [pc, #228]	@ (80020a8 <HAL_RCC_ClockConfig+0x264>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	4936      	ldr	r1, [pc, #216]	@ (80020a8 <HAL_RCC_ClockConfig+0x264>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	608b      	str	r3, [r1, #8]
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2b80      	cmp	r3, #128	@ 0x80
 8001fd8:	d105      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001fda:	4b33      	ldr	r3, [pc, #204]	@ (80020a8 <HAL_RCC_ClockConfig+0x264>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	4a32      	ldr	r2, [pc, #200]	@ (80020a8 <HAL_RCC_ClockConfig+0x264>)
 8001fe0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001fe4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe6:	4b2f      	ldr	r3, [pc, #188]	@ (80020a4 <HAL_RCC_ClockConfig+0x260>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d21d      	bcs.n	8002030 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80020a4 <HAL_RCC_ClockConfig+0x260>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f023 020f 	bic.w	r2, r3, #15
 8001ffc:	4929      	ldr	r1, [pc, #164]	@ (80020a4 <HAL_RCC_ClockConfig+0x260>)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	4313      	orrs	r3, r2
 8002002:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002004:	f7fe fe32 	bl	8000c6c <HAL_GetTick>
 8002008:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	e00a      	b.n	8002022 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800200c:	f7fe fe2e 	bl	8000c6c <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800201a:	4293      	cmp	r3, r2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e03b      	b.n	800209a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002022:	4b20      	ldr	r3, [pc, #128]	@ (80020a4 <HAL_RCC_ClockConfig+0x260>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d1ed      	bne.n	800200c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b00      	cmp	r3, #0
 800203a:	d008      	beq.n	800204e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800203c:	4b1a      	ldr	r3, [pc, #104]	@ (80020a8 <HAL_RCC_ClockConfig+0x264>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	4917      	ldr	r1, [pc, #92]	@ (80020a8 <HAL_RCC_ClockConfig+0x264>)
 800204a:	4313      	orrs	r3, r2
 800204c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d009      	beq.n	800206e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800205a:	4b13      	ldr	r3, [pc, #76]	@ (80020a8 <HAL_RCC_ClockConfig+0x264>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	490f      	ldr	r1, [pc, #60]	@ (80020a8 <HAL_RCC_ClockConfig+0x264>)
 800206a:	4313      	orrs	r3, r2
 800206c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800206e:	f000 f825 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 8002072:	4602      	mov	r2, r0
 8002074:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <HAL_RCC_ClockConfig+0x264>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	490c      	ldr	r1, [pc, #48]	@ (80020b0 <HAL_RCC_ClockConfig+0x26c>)
 8002080:	5ccb      	ldrb	r3, [r1, r3]
 8002082:	f003 031f 	and.w	r3, r3, #31
 8002086:	fa22 f303 	lsr.w	r3, r2, r3
 800208a:	4a0a      	ldr	r2, [pc, #40]	@ (80020b4 <HAL_RCC_ClockConfig+0x270>)
 800208c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800208e:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <HAL_RCC_ClockConfig+0x274>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fd9e 	bl	8000bd4 <HAL_InitTick>
 8002098:	4603      	mov	r3, r0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40022000 	.word	0x40022000
 80020a8:	40021000 	.word	0x40021000
 80020ac:	04c4b400 	.word	0x04c4b400
 80020b0:	08004aa4 	.word	0x08004aa4
 80020b4:	20000000 	.word	0x20000000
 80020b8:	20000008 	.word	0x20000008

080020bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	b087      	sub	sp, #28
 80020c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80020c2:	4b2c      	ldr	r3, [pc, #176]	@ (8002174 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 030c 	and.w	r3, r3, #12
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d102      	bne.n	80020d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002178 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	e047      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80020d4:	4b27      	ldr	r3, [pc, #156]	@ (8002174 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 030c 	and.w	r3, r3, #12
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d102      	bne.n	80020e6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020e0:	4b26      	ldr	r3, [pc, #152]	@ (800217c <HAL_RCC_GetSysClockFreq+0xc0>)
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	e03e      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80020e6:	4b23      	ldr	r3, [pc, #140]	@ (8002174 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 030c 	and.w	r3, r3, #12
 80020ee:	2b0c      	cmp	r3, #12
 80020f0:	d136      	bne.n	8002160 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020f2:	4b20      	ldr	r3, [pc, #128]	@ (8002174 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002174 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	3301      	adds	r3, #1
 8002108:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2b03      	cmp	r3, #3
 800210e:	d10c      	bne.n	800212a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002110:	4a1a      	ldr	r2, [pc, #104]	@ (800217c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	fbb2 f3f3 	udiv	r3, r2, r3
 8002118:	4a16      	ldr	r2, [pc, #88]	@ (8002174 <HAL_RCC_GetSysClockFreq+0xb8>)
 800211a:	68d2      	ldr	r2, [r2, #12]
 800211c:	0a12      	lsrs	r2, r2, #8
 800211e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	617b      	str	r3, [r7, #20]
      break;
 8002128:	e00c      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800212a:	4a13      	ldr	r2, [pc, #76]	@ (8002178 <HAL_RCC_GetSysClockFreq+0xbc>)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002132:	4a10      	ldr	r2, [pc, #64]	@ (8002174 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002134:	68d2      	ldr	r2, [r2, #12]
 8002136:	0a12      	lsrs	r2, r2, #8
 8002138:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800213c:	fb02 f303 	mul.w	r3, r2, r3
 8002140:	617b      	str	r3, [r7, #20]
      break;
 8002142:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002144:	4b0b      	ldr	r3, [pc, #44]	@ (8002174 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	0e5b      	lsrs	r3, r3, #25
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	3301      	adds	r3, #1
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	fbb2 f3f3 	udiv	r3, r2, r3
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	e001      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002164:	693b      	ldr	r3, [r7, #16]
}
 8002166:	4618      	mov	r0, r3
 8002168:	371c      	adds	r7, #28
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40021000 	.word	0x40021000
 8002178:	00f42400 	.word	0x00f42400
 800217c:	007a1200 	.word	0x007a1200

08002180 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002184:	4b03      	ldr	r3, [pc, #12]	@ (8002194 <HAL_RCC_GetHCLKFreq+0x14>)
 8002186:	681b      	ldr	r3, [r3, #0]
}
 8002188:	4618      	mov	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000000 	.word	0x20000000

08002198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800219c:	f7ff fff0 	bl	8002180 <HAL_RCC_GetHCLKFreq>
 80021a0:	4602      	mov	r2, r0
 80021a2:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	0a1b      	lsrs	r3, r3, #8
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	4904      	ldr	r1, [pc, #16]	@ (80021c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021ae:	5ccb      	ldrb	r3, [r1, r3]
 80021b0:	f003 031f 	and.w	r3, r3, #31
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40021000 	.word	0x40021000
 80021c0:	08004ab4 	.word	0x08004ab4

080021c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021c8:	f7ff ffda 	bl	8002180 <HAL_RCC_GetHCLKFreq>
 80021cc:	4602      	mov	r2, r0
 80021ce:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	0adb      	lsrs	r3, r3, #11
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	4904      	ldr	r1, [pc, #16]	@ (80021ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80021da:	5ccb      	ldrb	r3, [r1, r3]
 80021dc:	f003 031f 	and.w	r3, r3, #31
 80021e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40021000 	.word	0x40021000
 80021ec:	08004ab4 	.word	0x08004ab4

080021f0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002270 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002200:	4b1b      	ldr	r3, [pc, #108]	@ (8002270 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	3301      	adds	r3, #1
 800220c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	2b03      	cmp	r3, #3
 8002212:	d10c      	bne.n	800222e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002214:	4a17      	ldr	r2, [pc, #92]	@ (8002274 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	fbb2 f3f3 	udiv	r3, r2, r3
 800221c:	4a14      	ldr	r2, [pc, #80]	@ (8002270 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800221e:	68d2      	ldr	r2, [r2, #12]
 8002220:	0a12      	lsrs	r2, r2, #8
 8002222:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002226:	fb02 f303 	mul.w	r3, r2, r3
 800222a:	617b      	str	r3, [r7, #20]
    break;
 800222c:	e00c      	b.n	8002248 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800222e:	4a12      	ldr	r2, [pc, #72]	@ (8002278 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	fbb2 f3f3 	udiv	r3, r2, r3
 8002236:	4a0e      	ldr	r2, [pc, #56]	@ (8002270 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002238:	68d2      	ldr	r2, [r2, #12]
 800223a:	0a12      	lsrs	r2, r2, #8
 800223c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002240:	fb02 f303 	mul.w	r3, r2, r3
 8002244:	617b      	str	r3, [r7, #20]
    break;
 8002246:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002248:	4b09      	ldr	r3, [pc, #36]	@ (8002270 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	0e5b      	lsrs	r3, r3, #25
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	3301      	adds	r3, #1
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002260:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002262:	687b      	ldr	r3, [r7, #4]
}
 8002264:	4618      	mov	r0, r3
 8002266:	371c      	adds	r7, #28
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	40021000 	.word	0x40021000
 8002274:	007a1200 	.word	0x007a1200
 8002278:	00f42400 	.word	0x00f42400

0800227c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002284:	2300      	movs	r3, #0
 8002286:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002288:	2300      	movs	r3, #0
 800228a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 8098 	beq.w	80023ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800229a:	2300      	movs	r3, #0
 800229c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800229e:	4b43      	ldr	r3, [pc, #268]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10d      	bne.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022aa:	4b40      	ldr	r3, [pc, #256]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ae:	4a3f      	ldr	r2, [pc, #252]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80022b6:	4b3d      	ldr	r3, [pc, #244]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022c2:	2301      	movs	r3, #1
 80022c4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022c6:	4b3a      	ldr	r3, [pc, #232]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a39      	ldr	r2, [pc, #228]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022d2:	f7fe fccb 	bl	8000c6c <HAL_GetTick>
 80022d6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022d8:	e009      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022da:	f7fe fcc7 	bl	8000c6c <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d902      	bls.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	74fb      	strb	r3, [r7, #19]
        break;
 80022ec:	e005      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022ee:	4b30      	ldr	r3, [pc, #192]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0ef      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80022fa:	7cfb      	ldrb	r3, [r7, #19]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d159      	bne.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002300:	4b2a      	ldr	r3, [pc, #168]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002306:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800230a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d01e      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	429a      	cmp	r2, r3
 800231a:	d019      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800231c:	4b23      	ldr	r3, [pc, #140]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800231e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002322:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002326:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002328:	4b20      	ldr	r3, [pc, #128]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800232a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800232e:	4a1f      	ldr	r2, [pc, #124]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002334:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002338:	4b1c      	ldr	r3, [pc, #112]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800233a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800233e:	4a1b      	ldr	r2, [pc, #108]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002340:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002344:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002348:	4a18      	ldr	r2, [pc, #96]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d016      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235a:	f7fe fc87 	bl	8000c6c <HAL_GetTick>
 800235e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002360:	e00b      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002362:	f7fe fc83 	bl	8000c6c <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002370:	4293      	cmp	r3, r2
 8002372:	d902      	bls.n	800237a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	74fb      	strb	r3, [r7, #19]
            break;
 8002378:	e006      	b.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800237a:	4b0c      	ldr	r3, [pc, #48]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800237c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0ec      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002388:	7cfb      	ldrb	r3, [r7, #19]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10b      	bne.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800238e:	4b07      	ldr	r3, [pc, #28]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002394:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239c:	4903      	ldr	r1, [pc, #12]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80023a4:	e008      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023a6:	7cfb      	ldrb	r3, [r7, #19]
 80023a8:	74bb      	strb	r3, [r7, #18]
 80023aa:	e005      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023b4:	7cfb      	ldrb	r3, [r7, #19]
 80023b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023b8:	7c7b      	ldrb	r3, [r7, #17]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d105      	bne.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023be:	4ba6      	ldr	r3, [pc, #664]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c2:	4aa5      	ldr	r2, [pc, #660]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00a      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023d6:	4ba0      	ldr	r3, [pc, #640]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023dc:	f023 0203 	bic.w	r2, r3, #3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	499c      	ldr	r1, [pc, #624]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00a      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023f8:	4b97      	ldr	r3, [pc, #604]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023fe:	f023 020c 	bic.w	r2, r3, #12
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	4994      	ldr	r1, [pc, #592]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002408:	4313      	orrs	r3, r2
 800240a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00a      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800241a:	4b8f      	ldr	r3, [pc, #572]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800241c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002420:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	498b      	ldr	r1, [pc, #556]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800242a:	4313      	orrs	r3, r2
 800242c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00a      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800243c:	4b86      	ldr	r3, [pc, #536]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800243e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002442:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	4983      	ldr	r1, [pc, #524]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800244c:	4313      	orrs	r3, r2
 800244e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0320 	and.w	r3, r3, #32
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00a      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800245e:	4b7e      	ldr	r3, [pc, #504]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002464:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	497a      	ldr	r1, [pc, #488]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800246e:	4313      	orrs	r3, r2
 8002470:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00a      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002480:	4b75      	ldr	r3, [pc, #468]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002486:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	4972      	ldr	r1, [pc, #456]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002490:	4313      	orrs	r3, r2
 8002492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00a      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	4969      	ldr	r1, [pc, #420]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00a      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024c4:	4b64      	ldr	r3, [pc, #400]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	4961      	ldr	r1, [pc, #388]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00a      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024e6:	4b5c      	ldr	r3, [pc, #368]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f4:	4958      	ldr	r1, [pc, #352]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002504:	2b00      	cmp	r3, #0
 8002506:	d015      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002508:	4b53      	ldr	r3, [pc, #332]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800250e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002516:	4950      	ldr	r1, [pc, #320]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002518:	4313      	orrs	r3, r2
 800251a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002522:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002526:	d105      	bne.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002528:	4b4b      	ldr	r3, [pc, #300]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	4a4a      	ldr	r2, [pc, #296]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800252e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002532:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800253c:	2b00      	cmp	r3, #0
 800253e:	d015      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002540:	4b45      	ldr	r3, [pc, #276]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002546:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254e:	4942      	ldr	r1, [pc, #264]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800255e:	d105      	bne.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002560:	4b3d      	ldr	r3, [pc, #244]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	4a3c      	ldr	r2, [pc, #240]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002566:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800256a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d015      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002578:	4b37      	ldr	r3, [pc, #220]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	4934      	ldr	r1, [pc, #208]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002596:	d105      	bne.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002598:	4b2f      	ldr	r3, [pc, #188]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4a2e      	ldr	r2, [pc, #184]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800259e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025a2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d015      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025b0:	4b29      	ldr	r3, [pc, #164]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025be:	4926      	ldr	r1, [pc, #152]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025ce:	d105      	bne.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025d0:	4b21      	ldr	r3, [pc, #132]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	4a20      	ldr	r2, [pc, #128]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025da:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d015      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f6:	4918      	ldr	r1, [pc, #96]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002602:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002606:	d105      	bne.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002608:	4b13      	ldr	r3, [pc, #76]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	4a12      	ldr	r2, [pc, #72]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800260e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002612:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d015      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002620:	4b0d      	ldr	r3, [pc, #52]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002626:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800262e:	490a      	ldr	r1, [pc, #40]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002630:	4313      	orrs	r3, r2
 8002632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800263a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800263e:	d105      	bne.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002640:	4b05      	ldr	r3, [pc, #20]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4a04      	ldr	r2, [pc, #16]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002646:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800264a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800264c:	7cbb      	ldrb	r3, [r7, #18]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40021000 	.word	0x40021000

0800265c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e042      	b.n	80026f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002674:	2b00      	cmp	r3, #0
 8002676:	d106      	bne.n	8002686 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7fe f943 	bl	800090c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2224      	movs	r2, #36	@ 0x24
 800268a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 0201 	bic.w	r2, r2, #1
 800269c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f001 f802 	bl	80036b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 fd33 	bl	8003118 <UART_SetConfig>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e01b      	b.n	80026f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f001 f881 	bl	80037f4 <UART_CheckIdleState>
 80026f2:	4603      	mov	r3, r0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08a      	sub	sp, #40	@ 0x28
 8002700:	af02      	add	r7, sp, #8
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	4613      	mov	r3, r2
 800270a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002712:	2b20      	cmp	r3, #32
 8002714:	d17b      	bne.n	800280e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <HAL_UART_Transmit+0x26>
 800271c:	88fb      	ldrh	r3, [r7, #6]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e074      	b.n	8002810 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2221      	movs	r2, #33	@ 0x21
 8002732:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002736:	f7fe fa99 	bl	8000c6c <HAL_GetTick>
 800273a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	88fa      	ldrh	r2, [r7, #6]
 8002740:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	88fa      	ldrh	r2, [r7, #6]
 8002748:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002754:	d108      	bne.n	8002768 <HAL_UART_Transmit+0x6c>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d104      	bne.n	8002768 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	61bb      	str	r3, [r7, #24]
 8002766:	e003      	b.n	8002770 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800276c:	2300      	movs	r3, #0
 800276e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002770:	e030      	b.n	80027d4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2200      	movs	r2, #0
 800277a:	2180      	movs	r1, #128	@ 0x80
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f001 f8e3 	bl	8003948 <UART_WaitOnFlagUntilTimeout>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2220      	movs	r2, #32
 800278c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e03d      	b.n	8002810 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10b      	bne.n	80027b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	3302      	adds	r3, #2
 80027ae:	61bb      	str	r3, [r7, #24]
 80027b0:	e007      	b.n	80027c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	781a      	ldrb	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	3301      	adds	r3, #1
 80027c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	3b01      	subs	r3, #1
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80027da:	b29b      	uxth	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1c8      	bne.n	8002772 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	2200      	movs	r2, #0
 80027e8:	2140      	movs	r1, #64	@ 0x40
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f001 f8ac 	bl	8003948 <UART_WaitOnFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d005      	beq.n	8002802 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2220      	movs	r2, #32
 80027fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e006      	b.n	8002810 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2220      	movs	r2, #32
 8002806:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	e000      	b.n	8002810 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800280e:	2302      	movs	r3, #2
  }
}
 8002810:	4618      	mov	r0, r3
 8002812:	3720      	adds	r7, #32
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08a      	sub	sp, #40	@ 0x28
 800281c:	af02      	add	r7, sp, #8
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	603b      	str	r3, [r7, #0]
 8002824:	4613      	mov	r3, r2
 8002826:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800282e:	2b20      	cmp	r3, #32
 8002830:	f040 80b5 	bne.w	800299e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <HAL_UART_Receive+0x28>
 800283a:	88fb      	ldrh	r3, [r7, #6]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e0ad      	b.n	80029a0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2222      	movs	r2, #34	@ 0x22
 8002850:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800285a:	f7fe fa07 	bl	8000c6c <HAL_GetTick>
 800285e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	88fa      	ldrh	r2, [r7, #6]
 8002864:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	88fa      	ldrh	r2, [r7, #6]
 800286c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002878:	d10e      	bne.n	8002898 <HAL_UART_Receive+0x80>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d105      	bne.n	800288e <HAL_UART_Receive+0x76>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002888:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800288c:	e02d      	b.n	80028ea <HAL_UART_Receive+0xd2>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	22ff      	movs	r2, #255	@ 0xff
 8002892:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002896:	e028      	b.n	80028ea <HAL_UART_Receive+0xd2>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10d      	bne.n	80028bc <HAL_UART_Receive+0xa4>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d104      	bne.n	80028b2 <HAL_UART_Receive+0x9a>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	22ff      	movs	r2, #255	@ 0xff
 80028ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80028b0:	e01b      	b.n	80028ea <HAL_UART_Receive+0xd2>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	227f      	movs	r2, #127	@ 0x7f
 80028b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80028ba:	e016      	b.n	80028ea <HAL_UART_Receive+0xd2>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028c4:	d10d      	bne.n	80028e2 <HAL_UART_Receive+0xca>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d104      	bne.n	80028d8 <HAL_UART_Receive+0xc0>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	227f      	movs	r2, #127	@ 0x7f
 80028d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80028d6:	e008      	b.n	80028ea <HAL_UART_Receive+0xd2>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	223f      	movs	r2, #63	@ 0x3f
 80028dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80028e0:	e003      	b.n	80028ea <HAL_UART_Receive+0xd2>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80028f0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028fa:	d108      	bne.n	800290e <HAL_UART_Receive+0xf6>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d104      	bne.n	800290e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002904:	2300      	movs	r3, #0
 8002906:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	61bb      	str	r3, [r7, #24]
 800290c:	e003      	b.n	8002916 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002916:	e036      	b.n	8002986 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2200      	movs	r2, #0
 8002920:	2120      	movs	r1, #32
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f001 f810 	bl	8003948 <UART_WaitOnFlagUntilTimeout>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d005      	beq.n	800293a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2220      	movs	r2, #32
 8002932:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e032      	b.n	80029a0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10c      	bne.n	800295a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002946:	b29a      	uxth	r2, r3
 8002948:	8a7b      	ldrh	r3, [r7, #18]
 800294a:	4013      	ands	r3, r2
 800294c:	b29a      	uxth	r2, r3
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	3302      	adds	r3, #2
 8002956:	61bb      	str	r3, [r7, #24]
 8002958:	e00c      	b.n	8002974 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002960:	b2da      	uxtb	r2, r3
 8002962:	8a7b      	ldrh	r3, [r7, #18]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	4013      	ands	r3, r2
 8002968:	b2da      	uxtb	r2, r3
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	3301      	adds	r3, #1
 8002972:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800297a:	b29b      	uxth	r3, r3
 800297c:	3b01      	subs	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800298c:	b29b      	uxth	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1c2      	bne.n	8002918 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2220      	movs	r2, #32
 8002996:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	e000      	b.n	80029a0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800299e:	2302      	movs	r3, #2
  }
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3720      	adds	r7, #32
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	@ 0x28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	4613      	mov	r3, r2
 80029b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029bc:	2b20      	cmp	r3, #32
 80029be:	d137      	bne.n	8002a30 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <HAL_UART_Receive_IT+0x24>
 80029c6:	88fb      	ldrh	r3, [r7, #6]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e030      	b.n	8002a32 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a18      	ldr	r2, [pc, #96]	@ (8002a3c <HAL_UART_Receive_IT+0x94>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d01f      	beq.n	8002a20 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d018      	beq.n	8002a20 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	e853 3f00 	ldrex	r3, [r3]
 80029fa:	613b      	str	r3, [r7, #16]
   return(result);
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0c:	623b      	str	r3, [r7, #32]
 8002a0e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a10:	69f9      	ldr	r1, [r7, #28]
 8002a12:	6a3a      	ldr	r2, [r7, #32]
 8002a14:	e841 2300 	strex	r3, r2, [r1]
 8002a18:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1e6      	bne.n	80029ee <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a20:	88fb      	ldrh	r3, [r7, #6]
 8002a22:	461a      	mov	r2, r3
 8002a24:	68b9      	ldr	r1, [r7, #8]
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 fffc 	bl	8003a24 <UART_Start_Receive_IT>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	e000      	b.n	8002a32 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a30:	2302      	movs	r3, #2
  }
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3728      	adds	r7, #40	@ 0x28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40008000 	.word	0x40008000

08002a40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b0ba      	sub	sp, #232	@ 0xe8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002a6a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002a6e:	4013      	ands	r3, r2
 8002a70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002a74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d11b      	bne.n	8002ab4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a80:	f003 0320 	and.w	r3, r3, #32
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d015      	beq.n	8002ab4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a8c:	f003 0320 	and.w	r3, r3, #32
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d105      	bne.n	8002aa0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d009      	beq.n	8002ab4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8300 	beq.w	80030aa <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	4798      	blx	r3
      }
      return;
 8002ab2:	e2fa      	b.n	80030aa <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002ab4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 8123 	beq.w	8002d04 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002abe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002ac2:	4b8d      	ldr	r3, [pc, #564]	@ (8002cf8 <HAL_UART_IRQHandler+0x2b8>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d106      	bne.n	8002ad8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002aca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002ace:	4b8b      	ldr	r3, [pc, #556]	@ (8002cfc <HAL_UART_IRQHandler+0x2bc>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 8116 	beq.w	8002d04 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d011      	beq.n	8002b08 <HAL_UART_IRQHandler+0xc8>
 8002ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00b      	beq.n	8002b08 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2201      	movs	r2, #1
 8002af6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002afe:	f043 0201 	orr.w	r2, r3, #1
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d011      	beq.n	8002b38 <HAL_UART_IRQHandler+0xf8>
 8002b14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00b      	beq.n	8002b38 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2202      	movs	r2, #2
 8002b26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b2e:	f043 0204 	orr.w	r2, r3, #4
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d011      	beq.n	8002b68 <HAL_UART_IRQHandler+0x128>
 8002b44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00b      	beq.n	8002b68 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2204      	movs	r2, #4
 8002b56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b5e:	f043 0202 	orr.w	r2, r3, #2
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d017      	beq.n	8002ba4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b78:	f003 0320 	and.w	r3, r3, #32
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d105      	bne.n	8002b8c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002b80:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002b84:	4b5c      	ldr	r3, [pc, #368]	@ (8002cf8 <HAL_UART_IRQHandler+0x2b8>)
 8002b86:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00b      	beq.n	8002ba4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2208      	movs	r2, #8
 8002b92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b9a:	f043 0208 	orr.w	r2, r3, #8
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ba8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d012      	beq.n	8002bd6 <HAL_UART_IRQHandler+0x196>
 8002bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00c      	beq.n	8002bd6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002bc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bcc:	f043 0220 	orr.w	r2, r3, #32
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 8266 	beq.w	80030ae <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002be6:	f003 0320 	and.w	r3, r3, #32
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d013      	beq.n	8002c16 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d105      	bne.n	8002c06 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d007      	beq.n	8002c16 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c1c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c2a:	2b40      	cmp	r3, #64	@ 0x40
 8002c2c:	d005      	beq.n	8002c3a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c32:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d054      	beq.n	8002ce4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f001 f814 	bl	8003c68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c4a:	2b40      	cmp	r3, #64	@ 0x40
 8002c4c:	d146      	bne.n	8002cdc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	3308      	adds	r3, #8
 8002c54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c5c:	e853 3f00 	ldrex	r3, [r3]
 8002c60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002c64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	3308      	adds	r3, #8
 8002c76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002c7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002c7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002c86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002c8a:	e841 2300 	strex	r3, r2, [r1]
 8002c8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002c92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1d9      	bne.n	8002c4e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d017      	beq.n	8002cd4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002caa:	4a15      	ldr	r2, [pc, #84]	@ (8002d00 <HAL_UART_IRQHandler+0x2c0>)
 8002cac:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fe f94d 	bl	8000f54 <HAL_DMA_Abort_IT>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d019      	beq.n	8002cf4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8002cce:	4610      	mov	r0, r2
 8002cd0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd2:	e00f      	b.n	8002cf4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 fa09 	bl	80030ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cda:	e00b      	b.n	8002cf4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 fa05 	bl	80030ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce2:	e007      	b.n	8002cf4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 fa01 	bl	80030ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8002cf2:	e1dc      	b.n	80030ae <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf4:	bf00      	nop
    return;
 8002cf6:	e1da      	b.n	80030ae <HAL_UART_IRQHandler+0x66e>
 8002cf8:	10000001 	.word	0x10000001
 8002cfc:	04000120 	.word	0x04000120
 8002d00:	08003d35 	.word	0x08003d35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	f040 8170 	bne.w	8002fee <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 8169 	beq.w	8002fee <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d20:	f003 0310 	and.w	r3, r3, #16
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 8162 	beq.w	8002fee <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2210      	movs	r2, #16
 8002d30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d3c:	2b40      	cmp	r3, #64	@ 0x40
 8002d3e:	f040 80d8 	bne.w	8002ef2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 80af 	beq.w	8002eb8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002d60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d64:	429a      	cmp	r2, r3
 8002d66:	f080 80a7 	bcs.w	8002eb8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f040 8087 	bne.w	8002e96 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d94:	e853 3f00 	ldrex	r3, [r3]
 8002d98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002d9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002da0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002da4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002db2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002db6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002dbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002dc2:	e841 2300 	strex	r3, r2, [r1]
 8002dc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002dca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1da      	bne.n	8002d88 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	3308      	adds	r3, #8
 8002dd8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ddc:	e853 3f00 	ldrex	r3, [r3]
 8002de0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002de2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002de4:	f023 0301 	bic.w	r3, r3, #1
 8002de8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	3308      	adds	r3, #8
 8002df2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002df6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002dfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002dfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002e02:	e841 2300 	strex	r3, r2, [r1]
 8002e06:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002e08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1e1      	bne.n	8002dd2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3308      	adds	r3, #8
 8002e14:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e18:	e853 3f00 	ldrex	r3, [r3]
 8002e1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002e1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	3308      	adds	r3, #8
 8002e2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002e32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002e34:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e36:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002e38:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e3a:	e841 2300 	strex	r3, r2, [r1]
 8002e3e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002e40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1e3      	bne.n	8002e0e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e5c:	e853 3f00 	ldrex	r3, [r3]
 8002e60:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002e62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e64:	f023 0310 	bic.w	r3, r3, #16
 8002e68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	461a      	mov	r2, r3
 8002e72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e76:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002e78:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e7e:	e841 2300 	strex	r3, r2, [r1]
 8002e82:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002e84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1e4      	bne.n	8002e54 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7fe f806 	bl	8000ea2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2202      	movs	r2, #2
 8002e9a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	4619      	mov	r1, r3
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f925 	bl	8003100 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002eb6:	e0fc      	b.n	80030b2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002ebe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	f040 80f5 	bne.w	80030b2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	2b20      	cmp	r3, #32
 8002ed8:	f040 80eb 	bne.w	80030b2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002ee8:	4619      	mov	r1, r3
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f908 	bl	8003100 <HAL_UARTEx_RxEventCallback>
      return;
 8002ef0:	e0df      	b.n	80030b2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 80d1 	beq.w	80030b6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8002f14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 80cc 	beq.w	80030b6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f26:	e853 3f00 	ldrex	r3, [r3]
 8002f2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f40:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f42:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f48:	e841 2300 	strex	r3, r2, [r1]
 8002f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1e4      	bne.n	8002f1e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	3308      	adds	r3, #8
 8002f5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5e:	e853 3f00 	ldrex	r3, [r3]
 8002f62:	623b      	str	r3, [r7, #32]
   return(result);
 8002f64:	6a3b      	ldr	r3, [r7, #32]
 8002f66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f6a:	f023 0301 	bic.w	r3, r3, #1
 8002f6e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	3308      	adds	r3, #8
 8002f78:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002f7c:	633a      	str	r2, [r7, #48]	@ 0x30
 8002f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f84:	e841 2300 	strex	r3, r2, [r1]
 8002f88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1e1      	bne.n	8002f54 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	e853 3f00 	ldrex	r3, [r3]
 8002fb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f023 0310 	bic.w	r3, r3, #16
 8002fb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fc6:	61fb      	str	r3, [r7, #28]
 8002fc8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fca:	69b9      	ldr	r1, [r7, #24]
 8002fcc:	69fa      	ldr	r2, [r7, #28]
 8002fce:	e841 2300 	strex	r3, r2, [r1]
 8002fd2:	617b      	str	r3, [r7, #20]
   return(result);
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1e4      	bne.n	8002fa4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fe0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f88a 	bl	8003100 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fec:	e063      	b.n	80030b6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ff2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00e      	beq.n	8003018 <HAL_UART_IRQHandler+0x5d8>
 8002ffa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ffe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d008      	beq.n	8003018 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800300e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f001 fbed 	bl	80047f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003016:	e051      	b.n	80030bc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800301c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003020:	2b00      	cmp	r3, #0
 8003022:	d014      	beq.n	800304e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800302c:	2b00      	cmp	r3, #0
 800302e:	d105      	bne.n	800303c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003034:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d008      	beq.n	800304e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003040:	2b00      	cmp	r3, #0
 8003042:	d03a      	beq.n	80030ba <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	4798      	blx	r3
    }
    return;
 800304c:	e035      	b.n	80030ba <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800304e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003056:	2b00      	cmp	r3, #0
 8003058:	d009      	beq.n	800306e <HAL_UART_IRQHandler+0x62e>
 800305a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800305e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 fe76 	bl	8003d58 <UART_EndTransmit_IT>
    return;
 800306c:	e026      	b.n	80030bc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800306e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003072:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d009      	beq.n	800308e <HAL_UART_IRQHandler+0x64e>
 800307a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800307e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f001 fbc6 	bl	8004818 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800308c:	e016      	b.n	80030bc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800308e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003092:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d010      	beq.n	80030bc <HAL_UART_IRQHandler+0x67c>
 800309a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	da0c      	bge.n	80030bc <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f001 fbae 	bl	8004804 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030a8:	e008      	b.n	80030bc <HAL_UART_IRQHandler+0x67c>
      return;
 80030aa:	bf00      	nop
 80030ac:	e006      	b.n	80030bc <HAL_UART_IRQHandler+0x67c>
    return;
 80030ae:	bf00      	nop
 80030b0:	e004      	b.n	80030bc <HAL_UART_IRQHandler+0x67c>
      return;
 80030b2:	bf00      	nop
 80030b4:	e002      	b.n	80030bc <HAL_UART_IRQHandler+0x67c>
      return;
 80030b6:	bf00      	nop
 80030b8:	e000      	b.n	80030bc <HAL_UART_IRQHandler+0x67c>
    return;
 80030ba:	bf00      	nop
  }
}
 80030bc:	37e8      	adds	r7, #232	@ 0xe8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop

080030c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800311c:	b08c      	sub	sp, #48	@ 0x30
 800311e:	af00      	add	r7, sp, #0
 8003120:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	431a      	orrs	r2, r3
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	431a      	orrs	r2, r3
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	4313      	orrs	r3, r2
 800313e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	4bab      	ldr	r3, [pc, #684]	@ (80033f4 <UART_SetConfig+0x2dc>)
 8003148:	4013      	ands	r3, r2
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	6812      	ldr	r2, [r2, #0]
 800314e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003150:	430b      	orrs	r3, r1
 8003152:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4aa0      	ldr	r2, [pc, #640]	@ (80033f8 <UART_SetConfig+0x2e0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d004      	beq.n	8003184 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003180:	4313      	orrs	r3, r2
 8003182:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800318e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	6812      	ldr	r2, [r2, #0]
 8003196:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003198:	430b      	orrs	r3, r1
 800319a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a2:	f023 010f 	bic.w	r1, r3, #15
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a91      	ldr	r2, [pc, #580]	@ (80033fc <UART_SetConfig+0x2e4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d125      	bne.n	8003208 <UART_SetConfig+0xf0>
 80031bc:	4b90      	ldr	r3, [pc, #576]	@ (8003400 <UART_SetConfig+0x2e8>)
 80031be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	d81a      	bhi.n	8003200 <UART_SetConfig+0xe8>
 80031ca:	a201      	add	r2, pc, #4	@ (adr r2, 80031d0 <UART_SetConfig+0xb8>)
 80031cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d0:	080031e1 	.word	0x080031e1
 80031d4:	080031f1 	.word	0x080031f1
 80031d8:	080031e9 	.word	0x080031e9
 80031dc:	080031f9 	.word	0x080031f9
 80031e0:	2301      	movs	r3, #1
 80031e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031e6:	e0d6      	b.n	8003396 <UART_SetConfig+0x27e>
 80031e8:	2302      	movs	r3, #2
 80031ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ee:	e0d2      	b.n	8003396 <UART_SetConfig+0x27e>
 80031f0:	2304      	movs	r3, #4
 80031f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031f6:	e0ce      	b.n	8003396 <UART_SetConfig+0x27e>
 80031f8:	2308      	movs	r3, #8
 80031fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031fe:	e0ca      	b.n	8003396 <UART_SetConfig+0x27e>
 8003200:	2310      	movs	r3, #16
 8003202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003206:	e0c6      	b.n	8003396 <UART_SetConfig+0x27e>
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a7d      	ldr	r2, [pc, #500]	@ (8003404 <UART_SetConfig+0x2ec>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d138      	bne.n	8003284 <UART_SetConfig+0x16c>
 8003212:	4b7b      	ldr	r3, [pc, #492]	@ (8003400 <UART_SetConfig+0x2e8>)
 8003214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003218:	f003 030c 	and.w	r3, r3, #12
 800321c:	2b0c      	cmp	r3, #12
 800321e:	d82d      	bhi.n	800327c <UART_SetConfig+0x164>
 8003220:	a201      	add	r2, pc, #4	@ (adr r2, 8003228 <UART_SetConfig+0x110>)
 8003222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003226:	bf00      	nop
 8003228:	0800325d 	.word	0x0800325d
 800322c:	0800327d 	.word	0x0800327d
 8003230:	0800327d 	.word	0x0800327d
 8003234:	0800327d 	.word	0x0800327d
 8003238:	0800326d 	.word	0x0800326d
 800323c:	0800327d 	.word	0x0800327d
 8003240:	0800327d 	.word	0x0800327d
 8003244:	0800327d 	.word	0x0800327d
 8003248:	08003265 	.word	0x08003265
 800324c:	0800327d 	.word	0x0800327d
 8003250:	0800327d 	.word	0x0800327d
 8003254:	0800327d 	.word	0x0800327d
 8003258:	08003275 	.word	0x08003275
 800325c:	2300      	movs	r3, #0
 800325e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003262:	e098      	b.n	8003396 <UART_SetConfig+0x27e>
 8003264:	2302      	movs	r3, #2
 8003266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800326a:	e094      	b.n	8003396 <UART_SetConfig+0x27e>
 800326c:	2304      	movs	r3, #4
 800326e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003272:	e090      	b.n	8003396 <UART_SetConfig+0x27e>
 8003274:	2308      	movs	r3, #8
 8003276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800327a:	e08c      	b.n	8003396 <UART_SetConfig+0x27e>
 800327c:	2310      	movs	r3, #16
 800327e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003282:	e088      	b.n	8003396 <UART_SetConfig+0x27e>
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a5f      	ldr	r2, [pc, #380]	@ (8003408 <UART_SetConfig+0x2f0>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d125      	bne.n	80032da <UART_SetConfig+0x1c2>
 800328e:	4b5c      	ldr	r3, [pc, #368]	@ (8003400 <UART_SetConfig+0x2e8>)
 8003290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003294:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003298:	2b30      	cmp	r3, #48	@ 0x30
 800329a:	d016      	beq.n	80032ca <UART_SetConfig+0x1b2>
 800329c:	2b30      	cmp	r3, #48	@ 0x30
 800329e:	d818      	bhi.n	80032d2 <UART_SetConfig+0x1ba>
 80032a0:	2b20      	cmp	r3, #32
 80032a2:	d00a      	beq.n	80032ba <UART_SetConfig+0x1a2>
 80032a4:	2b20      	cmp	r3, #32
 80032a6:	d814      	bhi.n	80032d2 <UART_SetConfig+0x1ba>
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d002      	beq.n	80032b2 <UART_SetConfig+0x19a>
 80032ac:	2b10      	cmp	r3, #16
 80032ae:	d008      	beq.n	80032c2 <UART_SetConfig+0x1aa>
 80032b0:	e00f      	b.n	80032d2 <UART_SetConfig+0x1ba>
 80032b2:	2300      	movs	r3, #0
 80032b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032b8:	e06d      	b.n	8003396 <UART_SetConfig+0x27e>
 80032ba:	2302      	movs	r3, #2
 80032bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032c0:	e069      	b.n	8003396 <UART_SetConfig+0x27e>
 80032c2:	2304      	movs	r3, #4
 80032c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032c8:	e065      	b.n	8003396 <UART_SetConfig+0x27e>
 80032ca:	2308      	movs	r3, #8
 80032cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032d0:	e061      	b.n	8003396 <UART_SetConfig+0x27e>
 80032d2:	2310      	movs	r3, #16
 80032d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032d8:	e05d      	b.n	8003396 <UART_SetConfig+0x27e>
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a4b      	ldr	r2, [pc, #300]	@ (800340c <UART_SetConfig+0x2f4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d125      	bne.n	8003330 <UART_SetConfig+0x218>
 80032e4:	4b46      	ldr	r3, [pc, #280]	@ (8003400 <UART_SetConfig+0x2e8>)
 80032e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80032ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80032f0:	d016      	beq.n	8003320 <UART_SetConfig+0x208>
 80032f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80032f4:	d818      	bhi.n	8003328 <UART_SetConfig+0x210>
 80032f6:	2b80      	cmp	r3, #128	@ 0x80
 80032f8:	d00a      	beq.n	8003310 <UART_SetConfig+0x1f8>
 80032fa:	2b80      	cmp	r3, #128	@ 0x80
 80032fc:	d814      	bhi.n	8003328 <UART_SetConfig+0x210>
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <UART_SetConfig+0x1f0>
 8003302:	2b40      	cmp	r3, #64	@ 0x40
 8003304:	d008      	beq.n	8003318 <UART_SetConfig+0x200>
 8003306:	e00f      	b.n	8003328 <UART_SetConfig+0x210>
 8003308:	2300      	movs	r3, #0
 800330a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800330e:	e042      	b.n	8003396 <UART_SetConfig+0x27e>
 8003310:	2302      	movs	r3, #2
 8003312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003316:	e03e      	b.n	8003396 <UART_SetConfig+0x27e>
 8003318:	2304      	movs	r3, #4
 800331a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800331e:	e03a      	b.n	8003396 <UART_SetConfig+0x27e>
 8003320:	2308      	movs	r3, #8
 8003322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003326:	e036      	b.n	8003396 <UART_SetConfig+0x27e>
 8003328:	2310      	movs	r3, #16
 800332a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800332e:	e032      	b.n	8003396 <UART_SetConfig+0x27e>
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a30      	ldr	r2, [pc, #192]	@ (80033f8 <UART_SetConfig+0x2e0>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d12a      	bne.n	8003390 <UART_SetConfig+0x278>
 800333a:	4b31      	ldr	r3, [pc, #196]	@ (8003400 <UART_SetConfig+0x2e8>)
 800333c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003340:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003344:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003348:	d01a      	beq.n	8003380 <UART_SetConfig+0x268>
 800334a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800334e:	d81b      	bhi.n	8003388 <UART_SetConfig+0x270>
 8003350:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003354:	d00c      	beq.n	8003370 <UART_SetConfig+0x258>
 8003356:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800335a:	d815      	bhi.n	8003388 <UART_SetConfig+0x270>
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <UART_SetConfig+0x250>
 8003360:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003364:	d008      	beq.n	8003378 <UART_SetConfig+0x260>
 8003366:	e00f      	b.n	8003388 <UART_SetConfig+0x270>
 8003368:	2300      	movs	r3, #0
 800336a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800336e:	e012      	b.n	8003396 <UART_SetConfig+0x27e>
 8003370:	2302      	movs	r3, #2
 8003372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003376:	e00e      	b.n	8003396 <UART_SetConfig+0x27e>
 8003378:	2304      	movs	r3, #4
 800337a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800337e:	e00a      	b.n	8003396 <UART_SetConfig+0x27e>
 8003380:	2308      	movs	r3, #8
 8003382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003386:	e006      	b.n	8003396 <UART_SetConfig+0x27e>
 8003388:	2310      	movs	r3, #16
 800338a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800338e:	e002      	b.n	8003396 <UART_SetConfig+0x27e>
 8003390:	2310      	movs	r3, #16
 8003392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a17      	ldr	r2, [pc, #92]	@ (80033f8 <UART_SetConfig+0x2e0>)
 800339c:	4293      	cmp	r3, r2
 800339e:	f040 80a8 	bne.w	80034f2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80033a6:	2b08      	cmp	r3, #8
 80033a8:	d834      	bhi.n	8003414 <UART_SetConfig+0x2fc>
 80033aa:	a201      	add	r2, pc, #4	@ (adr r2, 80033b0 <UART_SetConfig+0x298>)
 80033ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b0:	080033d5 	.word	0x080033d5
 80033b4:	08003415 	.word	0x08003415
 80033b8:	080033dd 	.word	0x080033dd
 80033bc:	08003415 	.word	0x08003415
 80033c0:	080033e3 	.word	0x080033e3
 80033c4:	08003415 	.word	0x08003415
 80033c8:	08003415 	.word	0x08003415
 80033cc:	08003415 	.word	0x08003415
 80033d0:	080033eb 	.word	0x080033eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033d4:	f7fe fee0 	bl	8002198 <HAL_RCC_GetPCLK1Freq>
 80033d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033da:	e021      	b.n	8003420 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003410 <UART_SetConfig+0x2f8>)
 80033de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033e0:	e01e      	b.n	8003420 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033e2:	f7fe fe6b 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 80033e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033e8:	e01a      	b.n	8003420 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033f0:	e016      	b.n	8003420 <UART_SetConfig+0x308>
 80033f2:	bf00      	nop
 80033f4:	cfff69f3 	.word	0xcfff69f3
 80033f8:	40008000 	.word	0x40008000
 80033fc:	40013800 	.word	0x40013800
 8003400:	40021000 	.word	0x40021000
 8003404:	40004400 	.word	0x40004400
 8003408:	40004800 	.word	0x40004800
 800340c:	40004c00 	.word	0x40004c00
 8003410:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800341e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 812a 	beq.w	800367c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342c:	4a9e      	ldr	r2, [pc, #632]	@ (80036a8 <UART_SetConfig+0x590>)
 800342e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003432:	461a      	mov	r2, r3
 8003434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003436:	fbb3 f3f2 	udiv	r3, r3, r2
 800343a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	4413      	add	r3, r2
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	429a      	cmp	r2, r3
 800344a:	d305      	bcc.n	8003458 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	429a      	cmp	r2, r3
 8003456:	d903      	bls.n	8003460 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800345e:	e10d      	b.n	800367c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003462:	2200      	movs	r2, #0
 8003464:	60bb      	str	r3, [r7, #8]
 8003466:	60fa      	str	r2, [r7, #12]
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346c:	4a8e      	ldr	r2, [pc, #568]	@ (80036a8 <UART_SetConfig+0x590>)
 800346e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003472:	b29b      	uxth	r3, r3
 8003474:	2200      	movs	r2, #0
 8003476:	603b      	str	r3, [r7, #0]
 8003478:	607a      	str	r2, [r7, #4]
 800347a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800347e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003482:	f7fc fec9 	bl	8000218 <__aeabi_uldivmod>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4610      	mov	r0, r2
 800348c:	4619      	mov	r1, r3
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	f04f 0300 	mov.w	r3, #0
 8003496:	020b      	lsls	r3, r1, #8
 8003498:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800349c:	0202      	lsls	r2, r0, #8
 800349e:	6979      	ldr	r1, [r7, #20]
 80034a0:	6849      	ldr	r1, [r1, #4]
 80034a2:	0849      	lsrs	r1, r1, #1
 80034a4:	2000      	movs	r0, #0
 80034a6:	460c      	mov	r4, r1
 80034a8:	4605      	mov	r5, r0
 80034aa:	eb12 0804 	adds.w	r8, r2, r4
 80034ae:	eb43 0905 	adc.w	r9, r3, r5
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	469a      	mov	sl, r3
 80034ba:	4693      	mov	fp, r2
 80034bc:	4652      	mov	r2, sl
 80034be:	465b      	mov	r3, fp
 80034c0:	4640      	mov	r0, r8
 80034c2:	4649      	mov	r1, r9
 80034c4:	f7fc fea8 	bl	8000218 <__aeabi_uldivmod>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4613      	mov	r3, r2
 80034ce:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034d6:	d308      	bcc.n	80034ea <UART_SetConfig+0x3d2>
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034de:	d204      	bcs.n	80034ea <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6a3a      	ldr	r2, [r7, #32]
 80034e6:	60da      	str	r2, [r3, #12]
 80034e8:	e0c8      	b.n	800367c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80034f0:	e0c4      	b.n	800367c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034fa:	d167      	bne.n	80035cc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80034fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003500:	2b08      	cmp	r3, #8
 8003502:	d828      	bhi.n	8003556 <UART_SetConfig+0x43e>
 8003504:	a201      	add	r2, pc, #4	@ (adr r2, 800350c <UART_SetConfig+0x3f4>)
 8003506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350a:	bf00      	nop
 800350c:	08003531 	.word	0x08003531
 8003510:	08003539 	.word	0x08003539
 8003514:	08003541 	.word	0x08003541
 8003518:	08003557 	.word	0x08003557
 800351c:	08003547 	.word	0x08003547
 8003520:	08003557 	.word	0x08003557
 8003524:	08003557 	.word	0x08003557
 8003528:	08003557 	.word	0x08003557
 800352c:	0800354f 	.word	0x0800354f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003530:	f7fe fe32 	bl	8002198 <HAL_RCC_GetPCLK1Freq>
 8003534:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003536:	e014      	b.n	8003562 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003538:	f7fe fe44 	bl	80021c4 <HAL_RCC_GetPCLK2Freq>
 800353c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800353e:	e010      	b.n	8003562 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003540:	4b5a      	ldr	r3, [pc, #360]	@ (80036ac <UART_SetConfig+0x594>)
 8003542:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003544:	e00d      	b.n	8003562 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003546:	f7fe fdb9 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 800354a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800354c:	e009      	b.n	8003562 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800354e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003552:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003554:	e005      	b.n	8003562 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003556:	2300      	movs	r3, #0
 8003558:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003560:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 8089 	beq.w	800367c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356e:	4a4e      	ldr	r2, [pc, #312]	@ (80036a8 <UART_SetConfig+0x590>)
 8003570:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003574:	461a      	mov	r2, r3
 8003576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003578:	fbb3 f3f2 	udiv	r3, r3, r2
 800357c:	005a      	lsls	r2, r3, #1
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	085b      	lsrs	r3, r3, #1
 8003584:	441a      	add	r2, r3
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	fbb2 f3f3 	udiv	r3, r2, r3
 800358e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	2b0f      	cmp	r3, #15
 8003594:	d916      	bls.n	80035c4 <UART_SetConfig+0x4ac>
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800359c:	d212      	bcs.n	80035c4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	f023 030f 	bic.w	r3, r3, #15
 80035a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	085b      	lsrs	r3, r3, #1
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	8bfb      	ldrh	r3, [r7, #30]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	8bfa      	ldrh	r2, [r7, #30]
 80035c0:	60da      	str	r2, [r3, #12]
 80035c2:	e05b      	b.n	800367c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80035ca:	e057      	b.n	800367c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d828      	bhi.n	8003626 <UART_SetConfig+0x50e>
 80035d4:	a201      	add	r2, pc, #4	@ (adr r2, 80035dc <UART_SetConfig+0x4c4>)
 80035d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035da:	bf00      	nop
 80035dc:	08003601 	.word	0x08003601
 80035e0:	08003609 	.word	0x08003609
 80035e4:	08003611 	.word	0x08003611
 80035e8:	08003627 	.word	0x08003627
 80035ec:	08003617 	.word	0x08003617
 80035f0:	08003627 	.word	0x08003627
 80035f4:	08003627 	.word	0x08003627
 80035f8:	08003627 	.word	0x08003627
 80035fc:	0800361f 	.word	0x0800361f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003600:	f7fe fdca 	bl	8002198 <HAL_RCC_GetPCLK1Freq>
 8003604:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003606:	e014      	b.n	8003632 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003608:	f7fe fddc 	bl	80021c4 <HAL_RCC_GetPCLK2Freq>
 800360c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800360e:	e010      	b.n	8003632 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003610:	4b26      	ldr	r3, [pc, #152]	@ (80036ac <UART_SetConfig+0x594>)
 8003612:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003614:	e00d      	b.n	8003632 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003616:	f7fe fd51 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 800361a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800361c:	e009      	b.n	8003632 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800361e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003622:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003624:	e005      	b.n	8003632 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003626:	2300      	movs	r3, #0
 8003628:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003630:	bf00      	nop
    }

    if (pclk != 0U)
 8003632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003634:	2b00      	cmp	r3, #0
 8003636:	d021      	beq.n	800367c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363c:	4a1a      	ldr	r2, [pc, #104]	@ (80036a8 <UART_SetConfig+0x590>)
 800363e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003642:	461a      	mov	r2, r3
 8003644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003646:	fbb3 f2f2 	udiv	r2, r3, r2
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	085b      	lsrs	r3, r3, #1
 8003650:	441a      	add	r2, r3
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	fbb2 f3f3 	udiv	r3, r2, r3
 800365a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	2b0f      	cmp	r3, #15
 8003660:	d909      	bls.n	8003676 <UART_SetConfig+0x55e>
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003668:	d205      	bcs.n	8003676 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	b29a      	uxth	r2, r3
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	60da      	str	r2, [r3, #12]
 8003674:	e002      	b.n	800367c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	2201      	movs	r2, #1
 8003680:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2201      	movs	r2, #1
 8003688:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	2200      	movs	r2, #0
 8003690:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2200      	movs	r2, #0
 8003696:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003698:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800369c:	4618      	mov	r0, r3
 800369e:	3730      	adds	r7, #48	@ 0x30
 80036a0:	46bd      	mov	sp, r7
 80036a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036a6:	bf00      	nop
 80036a8:	08004abc 	.word	0x08004abc
 80036ac:	00f42400 	.word	0x00f42400

080036b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036bc:	f003 0308 	and.w	r3, r3, #8
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00a      	beq.n	80036da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003744:	f003 0310 	and.w	r3, r3, #16
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d01a      	beq.n	80037c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037ae:	d10a      	bne.n	80037c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00a      	beq.n	80037e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	605a      	str	r2, [r3, #4]
  }
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b098      	sub	sp, #96	@ 0x60
 80037f8:	af02      	add	r7, sp, #8
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003804:	f7fd fa32 	bl	8000c6c <HAL_GetTick>
 8003808:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b08      	cmp	r3, #8
 8003816:	d12f      	bne.n	8003878 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003818:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003820:	2200      	movs	r2, #0
 8003822:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f88e 	bl	8003948 <UART_WaitOnFlagUntilTimeout>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d022      	beq.n	8003878 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800383a:	e853 3f00 	ldrex	r3, [r3]
 800383e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003842:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003846:	653b      	str	r3, [r7, #80]	@ 0x50
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	461a      	mov	r2, r3
 800384e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003850:	647b      	str	r3, [r7, #68]	@ 0x44
 8003852:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003854:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003856:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003858:	e841 2300 	strex	r3, r2, [r1]
 800385c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800385e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1e6      	bne.n	8003832 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2220      	movs	r2, #32
 8003868:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e063      	b.n	8003940 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	2b04      	cmp	r3, #4
 8003884:	d149      	bne.n	800391a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003886:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800388e:	2200      	movs	r2, #0
 8003890:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f857 	bl	8003948 <UART_WaitOnFlagUntilTimeout>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d03c      	beq.n	800391a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a8:	e853 3f00 	ldrex	r3, [r3]
 80038ac:	623b      	str	r3, [r7, #32]
   return(result);
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038be:	633b      	str	r3, [r7, #48]	@ 0x30
 80038c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038c6:	e841 2300 	strex	r3, r2, [r1]
 80038ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1e6      	bne.n	80038a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3308      	adds	r3, #8
 80038d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	e853 3f00 	ldrex	r3, [r3]
 80038e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f023 0301 	bic.w	r3, r3, #1
 80038e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	3308      	adds	r3, #8
 80038f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038f2:	61fa      	str	r2, [r7, #28]
 80038f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f6:	69b9      	ldr	r1, [r7, #24]
 80038f8:	69fa      	ldr	r2, [r7, #28]
 80038fa:	e841 2300 	strex	r3, r2, [r1]
 80038fe:	617b      	str	r3, [r7, #20]
   return(result);
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e5      	bne.n	80038d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2220      	movs	r2, #32
 800390a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e012      	b.n	8003940 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2220      	movs	r2, #32
 8003926:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3758      	adds	r7, #88	@ 0x58
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	603b      	str	r3, [r7, #0]
 8003954:	4613      	mov	r3, r2
 8003956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003958:	e04f      	b.n	80039fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003960:	d04b      	beq.n	80039fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003962:	f7fd f983 	bl	8000c6c <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	429a      	cmp	r2, r3
 8003970:	d302      	bcc.n	8003978 <UART_WaitOnFlagUntilTimeout+0x30>
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e04e      	b.n	8003a1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	2b00      	cmp	r3, #0
 8003988:	d037      	beq.n	80039fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	2b80      	cmp	r3, #128	@ 0x80
 800398e:	d034      	beq.n	80039fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b40      	cmp	r3, #64	@ 0x40
 8003994:	d031      	beq.n	80039fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	f003 0308 	and.w	r3, r3, #8
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d110      	bne.n	80039c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2208      	movs	r2, #8
 80039aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 f95b 	bl	8003c68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2208      	movs	r2, #8
 80039b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e029      	b.n	8003a1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039d4:	d111      	bne.n	80039fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 f941 	bl	8003c68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e00f      	b.n	8003a1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69da      	ldr	r2, [r3, #28]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	4013      	ands	r3, r2
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	bf0c      	ite	eq
 8003a0a:	2301      	moveq	r3, #1
 8003a0c:	2300      	movne	r3, #0
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	461a      	mov	r2, r3
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d0a0      	beq.n	800395a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b0a3      	sub	sp, #140	@ 0x8c
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	88fa      	ldrh	r2, [r7, #6]
 8003a3c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	88fa      	ldrh	r2, [r7, #6]
 8003a44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a56:	d10e      	bne.n	8003a76 <UART_Start_Receive_IT+0x52>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d105      	bne.n	8003a6c <UART_Start_Receive_IT+0x48>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003a66:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003a6a:	e02d      	b.n	8003ac8 <UART_Start_Receive_IT+0xa4>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	22ff      	movs	r2, #255	@ 0xff
 8003a70:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003a74:	e028      	b.n	8003ac8 <UART_Start_Receive_IT+0xa4>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10d      	bne.n	8003a9a <UART_Start_Receive_IT+0x76>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d104      	bne.n	8003a90 <UART_Start_Receive_IT+0x6c>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	22ff      	movs	r2, #255	@ 0xff
 8003a8a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003a8e:	e01b      	b.n	8003ac8 <UART_Start_Receive_IT+0xa4>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	227f      	movs	r2, #127	@ 0x7f
 8003a94:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003a98:	e016      	b.n	8003ac8 <UART_Start_Receive_IT+0xa4>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003aa2:	d10d      	bne.n	8003ac0 <UART_Start_Receive_IT+0x9c>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d104      	bne.n	8003ab6 <UART_Start_Receive_IT+0x92>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	227f      	movs	r2, #127	@ 0x7f
 8003ab0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003ab4:	e008      	b.n	8003ac8 <UART_Start_Receive_IT+0xa4>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	223f      	movs	r2, #63	@ 0x3f
 8003aba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003abe:	e003      	b.n	8003ac8 <UART_Start_Receive_IT+0xa4>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2222      	movs	r2, #34	@ 0x22
 8003ad4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3308      	adds	r3, #8
 8003ade:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ae2:	e853 3f00 	ldrex	r3, [r3]
 8003ae6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8003ae8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3308      	adds	r3, #8
 8003af8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003afc:	673a      	str	r2, [r7, #112]	@ 0x70
 8003afe:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b00:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8003b02:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003b04:	e841 2300 	strex	r3, r2, [r1]
 8003b08:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8003b0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1e3      	bne.n	8003ad8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b18:	d14f      	bne.n	8003bba <UART_Start_Receive_IT+0x196>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8003b20:	88fa      	ldrh	r2, [r7, #6]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d349      	bcc.n	8003bba <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b2e:	d107      	bne.n	8003b40 <UART_Start_Receive_IT+0x11c>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d103      	bne.n	8003b40 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4a47      	ldr	r2, [pc, #284]	@ (8003c58 <UART_Start_Receive_IT+0x234>)
 8003b3c:	675a      	str	r2, [r3, #116]	@ 0x74
 8003b3e:	e002      	b.n	8003b46 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4a46      	ldr	r2, [pc, #280]	@ (8003c5c <UART_Start_Receive_IT+0x238>)
 8003b44:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d01a      	beq.n	8003b84 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b56:	e853 3f00 	ldrex	r3, [r3]
 8003b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003b5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b62:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b72:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b74:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003b76:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003b78:	e841 2300 	strex	r3, r2, [r1]
 8003b7c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8003b7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1e4      	bne.n	8003b4e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3308      	adds	r3, #8
 8003b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b8e:	e853 3f00 	ldrex	r3, [r3]
 8003b92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3308      	adds	r3, #8
 8003ba2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003ba4:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003ba6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003baa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bac:	e841 2300 	strex	r3, r2, [r1]
 8003bb0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1e5      	bne.n	8003b84 <UART_Start_Receive_IT+0x160>
 8003bb8:	e046      	b.n	8003c48 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bc2:	d107      	bne.n	8003bd4 <UART_Start_Receive_IT+0x1b0>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d103      	bne.n	8003bd4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4a24      	ldr	r2, [pc, #144]	@ (8003c60 <UART_Start_Receive_IT+0x23c>)
 8003bd0:	675a      	str	r2, [r3, #116]	@ 0x74
 8003bd2:	e002      	b.n	8003bda <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4a23      	ldr	r2, [pc, #140]	@ (8003c64 <UART_Start_Receive_IT+0x240>)
 8003bd8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d019      	beq.n	8003c16 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bea:	e853 3f00 	ldrex	r3, [r3]
 8003bee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003bf6:	677b      	str	r3, [r7, #116]	@ 0x74
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c00:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c02:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c08:	e841 2300 	strex	r3, r2, [r1]
 8003c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1e6      	bne.n	8003be2 <UART_Start_Receive_IT+0x1be>
 8003c14:	e018      	b.n	8003c48 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	e853 3f00 	ldrex	r3, [r3]
 8003c22:	613b      	str	r3, [r7, #16]
   return(result);
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f043 0320 	orr.w	r3, r3, #32
 8003c2a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	461a      	mov	r2, r3
 8003c32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c34:	623b      	str	r3, [r7, #32]
 8003c36:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c38:	69f9      	ldr	r1, [r7, #28]
 8003c3a:	6a3a      	ldr	r2, [r7, #32]
 8003c3c:	e841 2300 	strex	r3, r2, [r1]
 8003c40:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1e6      	bne.n	8003c16 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	378c      	adds	r7, #140	@ 0x8c
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	08004485 	.word	0x08004485
 8003c5c:	08004121 	.word	0x08004121
 8003c60:	08003f69 	.word	0x08003f69
 8003c64:	08003db1 	.word	0x08003db1

08003c68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b095      	sub	sp, #84	@ 0x54
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c78:	e853 3f00 	ldrex	r3, [r3]
 8003c7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c90:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c96:	e841 2300 	strex	r3, r2, [r1]
 8003c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1e6      	bne.n	8003c70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	3308      	adds	r3, #8
 8003ca8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	e853 3f00 	ldrex	r3, [r3]
 8003cb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cb8:	f023 0301 	bic.w	r3, r3, #1
 8003cbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	3308      	adds	r3, #8
 8003cc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ccc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cce:	e841 2300 	strex	r3, r2, [r1]
 8003cd2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1e3      	bne.n	8003ca2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d118      	bne.n	8003d14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	e853 3f00 	ldrex	r3, [r3]
 8003cee:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f023 0310 	bic.w	r3, r3, #16
 8003cf6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d00:	61bb      	str	r3, [r7, #24]
 8003d02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d04:	6979      	ldr	r1, [r7, #20]
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	e841 2300 	strex	r3, r2, [r1]
 8003d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1e6      	bne.n	8003ce2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003d28:	bf00      	nop
 8003d2a:	3754      	adds	r7, #84	@ 0x54
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f7ff f9ce 	bl	80030ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d50:	bf00      	nop
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	e853 3f00 	ldrex	r3, [r3]
 8003d6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d74:	61fb      	str	r3, [r7, #28]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	61bb      	str	r3, [r7, #24]
 8003d80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d82:	6979      	ldr	r1, [r7, #20]
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	e841 2300 	strex	r3, r2, [r1]
 8003d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1e6      	bne.n	8003d60 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2220      	movs	r2, #32
 8003d96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff f98f 	bl	80030c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003da6:	bf00      	nop
 8003da8:	3720      	adds	r7, #32
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b09c      	sub	sp, #112	@ 0x70
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003dbe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dc8:	2b22      	cmp	r3, #34	@ 0x22
 8003dca:	f040 80be 	bne.w	8003f4a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003dd8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003ddc:	b2d9      	uxtb	r1, r3
 8003dde:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de8:	400a      	ands	r2, r1
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f040 80a1 	bne.w	8003f5a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e20:	e853 3f00 	ldrex	r3, [r3]
 8003e24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e36:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e38:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e3e:	e841 2300 	strex	r3, r2, [r1]
 8003e42:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1e6      	bne.n	8003e18 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3308      	adds	r3, #8
 8003e50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e54:	e853 3f00 	ldrex	r3, [r3]
 8003e58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e5c:	f023 0301 	bic.w	r3, r3, #1
 8003e60:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3308      	adds	r3, #8
 8003e68:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003e6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e72:	e841 2300 	strex	r3, r2, [r1]
 8003e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1e5      	bne.n	8003e4a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2220      	movs	r2, #32
 8003e82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a33      	ldr	r2, [pc, #204]	@ (8003f64 <UART_RxISR_8BIT+0x1b4>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d01f      	beq.n	8003edc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d018      	beq.n	8003edc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb2:	e853 3f00 	ldrex	r3, [r3]
 8003eb6:	623b      	str	r3, [r7, #32]
   return(result);
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003ebe:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ec8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003eca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ecc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ece:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ed0:	e841 2300 	strex	r3, r2, [r1]
 8003ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1e6      	bne.n	8003eaa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d12e      	bne.n	8003f42 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	e853 3f00 	ldrex	r3, [r3]
 8003ef6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0310 	bic.w	r3, r3, #16
 8003efe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	461a      	mov	r2, r3
 8003f06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f08:	61fb      	str	r3, [r7, #28]
 8003f0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0c:	69b9      	ldr	r1, [r7, #24]
 8003f0e:	69fa      	ldr	r2, [r7, #28]
 8003f10:	e841 2300 	strex	r3, r2, [r1]
 8003f14:	617b      	str	r3, [r7, #20]
   return(result);
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1e6      	bne.n	8003eea <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f003 0310 	and.w	r3, r3, #16
 8003f26:	2b10      	cmp	r3, #16
 8003f28:	d103      	bne.n	8003f32 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2210      	movs	r2, #16
 8003f30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003f38:	4619      	mov	r1, r3
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7ff f8e0 	bl	8003100 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f40:	e00b      	b.n	8003f5a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7ff f8c8 	bl	80030d8 <HAL_UART_RxCpltCallback>
}
 8003f48:	e007      	b.n	8003f5a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	699a      	ldr	r2, [r3, #24]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f042 0208 	orr.w	r2, r2, #8
 8003f58:	619a      	str	r2, [r3, #24]
}
 8003f5a:	bf00      	nop
 8003f5c:	3770      	adds	r7, #112	@ 0x70
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	40008000 	.word	0x40008000

08003f68 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b09c      	sub	sp, #112	@ 0x70
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003f76:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f80:	2b22      	cmp	r3, #34	@ 0x22
 8003f82:	f040 80be 	bne.w	8004102 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f94:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003f96:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003f9a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003fa4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003faa:	1c9a      	adds	r2, r3, #2
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f040 80a1 	bne.w	8004112 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fd8:	e853 3f00 	ldrex	r3, [r3]
 8003fdc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003fde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fe0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fe4:	667b      	str	r3, [r7, #100]	@ 0x64
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fee:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ff0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003ff4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003ff6:	e841 2300 	strex	r3, r2, [r1]
 8003ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003ffc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1e6      	bne.n	8003fd0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3308      	adds	r3, #8
 8004008:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800400c:	e853 3f00 	ldrex	r3, [r3]
 8004010:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004014:	f023 0301 	bic.w	r3, r3, #1
 8004018:	663b      	str	r3, [r7, #96]	@ 0x60
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	3308      	adds	r3, #8
 8004020:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004022:	643a      	str	r2, [r7, #64]	@ 0x40
 8004024:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004026:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004028:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800402a:	e841 2300 	strex	r3, r2, [r1]
 800402e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1e5      	bne.n	8004002 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2220      	movs	r2, #32
 800403a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a33      	ldr	r2, [pc, #204]	@ (800411c <UART_RxISR_16BIT+0x1b4>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d01f      	beq.n	8004094 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d018      	beq.n	8004094 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	e853 3f00 	ldrex	r3, [r3]
 800406e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004076:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	461a      	mov	r2, r3
 800407e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004080:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004082:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004084:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004086:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004088:	e841 2300 	strex	r3, r2, [r1]
 800408c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800408e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1e6      	bne.n	8004062 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004098:	2b01      	cmp	r3, #1
 800409a:	d12e      	bne.n	80040fa <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	e853 3f00 	ldrex	r3, [r3]
 80040ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f023 0310 	bic.w	r3, r3, #16
 80040b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	461a      	mov	r2, r3
 80040be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040c0:	61bb      	str	r3, [r7, #24]
 80040c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	6979      	ldr	r1, [r7, #20]
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	e841 2300 	strex	r3, r2, [r1]
 80040cc:	613b      	str	r3, [r7, #16]
   return(result);
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e6      	bne.n	80040a2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	f003 0310 	and.w	r3, r3, #16
 80040de:	2b10      	cmp	r3, #16
 80040e0:	d103      	bne.n	80040ea <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2210      	movs	r2, #16
 80040e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80040f0:	4619      	mov	r1, r3
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7ff f804 	bl	8003100 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040f8:	e00b      	b.n	8004112 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7fe ffec 	bl	80030d8 <HAL_UART_RxCpltCallback>
}
 8004100:	e007      	b.n	8004112 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	699a      	ldr	r2, [r3, #24]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f042 0208 	orr.w	r2, r2, #8
 8004110:	619a      	str	r2, [r3, #24]
}
 8004112:	bf00      	nop
 8004114:	3770      	adds	r7, #112	@ 0x70
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40008000 	.word	0x40008000

08004120 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b0ac      	sub	sp, #176	@ 0xb0
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800412e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004156:	2b22      	cmp	r3, #34	@ 0x22
 8004158:	f040 8183 	bne.w	8004462 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004162:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004166:	e126      	b.n	80043b6 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004172:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8004176:	b2d9      	uxtb	r1, r3
 8004178:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800417c:	b2da      	uxtb	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004182:	400a      	ands	r2, r1
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004198:	b29b      	uxth	r3, r3
 800419a:	3b01      	subs	r3, #1
 800419c:	b29a      	uxth	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80041ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d053      	beq.n	8004262 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d011      	beq.n	80041ea <UART_RxISR_8BIT_FIFOEN+0xca>
 80041c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80041ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00b      	beq.n	80041ea <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2201      	movs	r2, #1
 80041d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e0:	f043 0201 	orr.w	r2, r3, #1
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d011      	beq.n	800421a <UART_RxISR_8BIT_FIFOEN+0xfa>
 80041f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00b      	beq.n	800421a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2202      	movs	r2, #2
 8004208:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004210:	f043 0204 	orr.w	r2, r3, #4
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800421a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800421e:	f003 0304 	and.w	r3, r3, #4
 8004222:	2b00      	cmp	r3, #0
 8004224:	d011      	beq.n	800424a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004226:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00b      	beq.n	800424a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2204      	movs	r2, #4
 8004238:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004240:	f043 0202 	orr.w	r2, r3, #2
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004250:	2b00      	cmp	r3, #0
 8004252:	d006      	beq.n	8004262 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7fe ff49 	bl	80030ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	f040 80a3 	bne.w	80043b6 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004276:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004278:	e853 3f00 	ldrex	r3, [r3]
 800427c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800427e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004284:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	461a      	mov	r2, r3
 800428e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004292:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004294:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004296:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8004298:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800429a:	e841 2300 	strex	r3, r2, [r1]
 800429e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80042a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1e4      	bne.n	8004270 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3308      	adds	r3, #8
 80042ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042b0:	e853 3f00 	ldrex	r3, [r3]
 80042b4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80042b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042bc:	f023 0301 	bic.w	r3, r3, #1
 80042c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3308      	adds	r3, #8
 80042ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80042ce:	66ba      	str	r2, [r7, #104]	@ 0x68
 80042d0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80042d4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80042d6:	e841 2300 	strex	r3, r2, [r1]
 80042da:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80042dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1e1      	bne.n	80042a6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a60      	ldr	r2, [pc, #384]	@ (800447c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d021      	beq.n	8004344 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d01a      	beq.n	8004344 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004314:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004316:	e853 3f00 	ldrex	r3, [r3]
 800431a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800431c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800431e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004322:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004330:	657b      	str	r3, [r7, #84]	@ 0x54
 8004332:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004336:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800433e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e4      	bne.n	800430e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004348:	2b01      	cmp	r3, #1
 800434a:	d130      	bne.n	80043ae <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800435a:	e853 3f00 	ldrex	r3, [r3]
 800435e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004362:	f023 0310 	bic.w	r3, r3, #16
 8004366:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	461a      	mov	r2, r3
 8004370:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004374:	643b      	str	r3, [r7, #64]	@ 0x40
 8004376:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004378:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800437a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800437c:	e841 2300 	strex	r3, r2, [r1]
 8004380:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e4      	bne.n	8004352 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	f003 0310 	and.w	r3, r3, #16
 8004392:	2b10      	cmp	r3, #16
 8004394:	d103      	bne.n	800439e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2210      	movs	r2, #16
 800439c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80043a4:	4619      	mov	r1, r3
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7fe feaa 	bl	8003100 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80043ac:	e00e      	b.n	80043cc <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fe fe92 	bl	80030d8 <HAL_UART_RxCpltCallback>
        break;
 80043b4:	e00a      	b.n	80043cc <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80043b6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d006      	beq.n	80043cc <UART_RxISR_8BIT_FIFOEN+0x2ac>
 80043be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f47f aece 	bne.w	8004168 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80043d2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80043d6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d049      	beq.n	8004472 <UART_RxISR_8BIT_FIFOEN+0x352>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80043e4:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d242      	bcs.n	8004472 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3308      	adds	r3, #8
 80043f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	e853 3f00 	ldrex	r3, [r3]
 80043fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004402:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	3308      	adds	r3, #8
 800440c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004410:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004412:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004414:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004416:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004418:	e841 2300 	strex	r3, r2, [r1]
 800441c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800441e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1e3      	bne.n	80043ec <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a16      	ldr	r2, [pc, #88]	@ (8004480 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8004428:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	e853 3f00 	ldrex	r3, [r3]
 8004436:	60bb      	str	r3, [r7, #8]
   return(result);
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f043 0320 	orr.w	r3, r3, #32
 800443e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	461a      	mov	r2, r3
 8004448:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800444c:	61bb      	str	r3, [r7, #24]
 800444e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004450:	6979      	ldr	r1, [r7, #20]
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	e841 2300 	strex	r3, r2, [r1]
 8004458:	613b      	str	r3, [r7, #16]
   return(result);
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1e4      	bne.n	800442a <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004460:	e007      	b.n	8004472 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	699a      	ldr	r2, [r3, #24]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0208 	orr.w	r2, r2, #8
 8004470:	619a      	str	r2, [r3, #24]
}
 8004472:	bf00      	nop
 8004474:	37b0      	adds	r7, #176	@ 0xb0
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40008000 	.word	0x40008000
 8004480:	08003db1 	.word	0x08003db1

08004484 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b0ae      	sub	sp, #184	@ 0xb8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004492:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044ba:	2b22      	cmp	r3, #34	@ 0x22
 80044bc:	f040 8187 	bne.w	80047ce <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80044c6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80044ca:	e12a      	b.n	8004722 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80044de:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80044e2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80044e6:	4013      	ands	r3, r2
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80044ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f4:	1c9a      	adds	r2, r3, #2
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004500:	b29b      	uxth	r3, r3
 8004502:	3b01      	subs	r3, #1
 8004504:	b29a      	uxth	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004516:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	2b00      	cmp	r3, #0
 8004520:	d053      	beq.n	80045ca <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004522:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d011      	beq.n	8004552 <UART_RxISR_16BIT_FIFOEN+0xce>
 800452e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00b      	beq.n	8004552 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2201      	movs	r2, #1
 8004540:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004548:	f043 0201 	orr.w	r2, r3, #1
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004552:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d011      	beq.n	8004582 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800455e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00b      	beq.n	8004582 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2202      	movs	r2, #2
 8004570:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004578:	f043 0204 	orr.w	r2, r3, #4
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004582:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	2b00      	cmp	r3, #0
 800458c:	d011      	beq.n	80045b2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800458e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00b      	beq.n	80045b2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2204      	movs	r2, #4
 80045a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a8:	f043 0202 	orr.w	r2, r3, #2
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d006      	beq.n	80045ca <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7fe fd95 	bl	80030ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f040 80a5 	bne.w	8004722 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045e0:	e853 3f00 	ldrex	r3, [r3]
 80045e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80045e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80045fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004600:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004602:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004606:	e841 2300 	strex	r3, r2, [r1]
 800460a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800460c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1e2      	bne.n	80045d8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3308      	adds	r3, #8
 8004618:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800461c:	e853 3f00 	ldrex	r3, [r3]
 8004620:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004622:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004624:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004628:	f023 0301 	bic.w	r3, r3, #1
 800462c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	3308      	adds	r3, #8
 8004636:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800463a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800463c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004640:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004642:	e841 2300 	strex	r3, r2, [r1]
 8004646:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004648:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1e1      	bne.n	8004612 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2220      	movs	r2, #32
 8004652:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a60      	ldr	r2, [pc, #384]	@ (80047e8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d021      	beq.n	80046b0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d01a      	beq.n	80046b0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004680:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004682:	e853 3f00 	ldrex	r3, [r3]
 8004686:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004688:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800468a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800468e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	461a      	mov	r2, r3
 8004698:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800469c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800469e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80046a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80046a4:	e841 2300 	strex	r3, r2, [r1]
 80046a8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80046aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1e4      	bne.n	800467a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d130      	bne.n	800471a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c6:	e853 3f00 	ldrex	r3, [r3]
 80046ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ce:	f023 0310 	bic.w	r3, r3, #16
 80046d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80046e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80046e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046e8:	e841 2300 	strex	r3, r2, [r1]
 80046ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1e4      	bne.n	80046be <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	f003 0310 	and.w	r3, r3, #16
 80046fe:	2b10      	cmp	r3, #16
 8004700:	d103      	bne.n	800470a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2210      	movs	r2, #16
 8004708:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004710:	4619      	mov	r1, r3
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fe fcf4 	bl	8003100 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8004718:	e00e      	b.n	8004738 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7fe fcdc 	bl	80030d8 <HAL_UART_RxCpltCallback>
        break;
 8004720:	e00a      	b.n	8004738 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004722:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8004726:	2b00      	cmp	r3, #0
 8004728:	d006      	beq.n	8004738 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800472a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800472e:	f003 0320 	and.w	r3, r3, #32
 8004732:	2b00      	cmp	r3, #0
 8004734:	f47f aeca 	bne.w	80044cc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800473e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004742:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8004746:	2b00      	cmp	r3, #0
 8004748:	d049      	beq.n	80047de <UART_RxISR_16BIT_FIFOEN+0x35a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004750:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8004754:	429a      	cmp	r2, r3
 8004756:	d242      	bcs.n	80047de <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3308      	adds	r3, #8
 800475e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004762:	e853 3f00 	ldrex	r3, [r3]
 8004766:	623b      	str	r3, [r7, #32]
   return(result);
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800476e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	3308      	adds	r3, #8
 8004778:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800477c:	633a      	str	r2, [r7, #48]	@ 0x30
 800477e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004780:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004782:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004784:	e841 2300 	strex	r3, r2, [r1]
 8004788:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800478a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1e3      	bne.n	8004758 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a16      	ldr	r2, [pc, #88]	@ (80047ec <UART_RxISR_16BIT_FIFOEN+0x368>)
 8004794:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	e853 3f00 	ldrex	r3, [r3]
 80047a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f043 0320 	orr.w	r3, r3, #32
 80047aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	461a      	mov	r2, r3
 80047b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047b8:	61fb      	str	r3, [r7, #28]
 80047ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047bc:	69b9      	ldr	r1, [r7, #24]
 80047be:	69fa      	ldr	r2, [r7, #28]
 80047c0:	e841 2300 	strex	r3, r2, [r1]
 80047c4:	617b      	str	r3, [r7, #20]
   return(result);
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1e4      	bne.n	8004796 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047cc:	e007      	b.n	80047de <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	699a      	ldr	r2, [r3, #24]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f042 0208 	orr.w	r2, r2, #8
 80047dc:	619a      	str	r2, [r3, #24]
}
 80047de:	bf00      	nop
 80047e0:	37b8      	adds	r7, #184	@ 0xb8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	40008000 	.word	0x40008000
 80047ec:	08003f69 	.word	0x08003f69

080047f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800483a:	2b01      	cmp	r3, #1
 800483c:	d101      	bne.n	8004842 <HAL_UARTEx_DisableFifoMode+0x16>
 800483e:	2302      	movs	r3, #2
 8004840:	e027      	b.n	8004892 <HAL_UARTEx_DisableFifoMode+0x66>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2224      	movs	r2, #36	@ 0x24
 800484e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 0201 	bic.w	r2, r2, #1
 8004868:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004870:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2220      	movs	r2, #32
 8004884:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b084      	sub	sp, #16
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
 80048a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d101      	bne.n	80048b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80048b2:	2302      	movs	r3, #2
 80048b4:	e02d      	b.n	8004912 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2224      	movs	r2, #36	@ 0x24
 80048c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0201 	bic.w	r2, r2, #1
 80048dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f850 	bl	8004998 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2220      	movs	r2, #32
 8004904:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b084      	sub	sp, #16
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800492a:	2b01      	cmp	r3, #1
 800492c:	d101      	bne.n	8004932 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800492e:	2302      	movs	r3, #2
 8004930:	e02d      	b.n	800498e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2224      	movs	r2, #36	@ 0x24
 800493e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 0201 	bic.w	r2, r2, #1
 8004958:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f812 	bl	8004998 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2220      	movs	r2, #32
 8004980:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d108      	bne.n	80049ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80049b8:	e031      	b.n	8004a1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80049ba:	2308      	movs	r3, #8
 80049bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80049be:	2308      	movs	r3, #8
 80049c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	0e5b      	lsrs	r3, r3, #25
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	0f5b      	lsrs	r3, r3, #29
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80049e2:	7bbb      	ldrb	r3, [r7, #14]
 80049e4:	7b3a      	ldrb	r2, [r7, #12]
 80049e6:	4911      	ldr	r1, [pc, #68]	@ (8004a2c <UARTEx_SetNbDataToProcess+0x94>)
 80049e8:	5c8a      	ldrb	r2, [r1, r2]
 80049ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80049ee:	7b3a      	ldrb	r2, [r7, #12]
 80049f0:	490f      	ldr	r1, [pc, #60]	@ (8004a30 <UARTEx_SetNbDataToProcess+0x98>)
 80049f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80049f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
 8004a02:	7b7a      	ldrb	r2, [r7, #13]
 8004a04:	4909      	ldr	r1, [pc, #36]	@ (8004a2c <UARTEx_SetNbDataToProcess+0x94>)
 8004a06:	5c8a      	ldrb	r2, [r1, r2]
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004a0c:	7b7a      	ldrb	r2, [r7, #13]
 8004a0e:	4908      	ldr	r1, [pc, #32]	@ (8004a30 <UARTEx_SetNbDataToProcess+0x98>)
 8004a10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a12:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004a1e:	bf00      	nop
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	08004ad4 	.word	0x08004ad4
 8004a30:	08004adc 	.word	0x08004adc

08004a34 <memset>:
 8004a34:	4402      	add	r2, r0
 8004a36:	4603      	mov	r3, r0
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d100      	bne.n	8004a3e <memset+0xa>
 8004a3c:	4770      	bx	lr
 8004a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a42:	e7f9      	b.n	8004a38 <memset+0x4>

08004a44 <__libc_init_array>:
 8004a44:	b570      	push	{r4, r5, r6, lr}
 8004a46:	4d0d      	ldr	r5, [pc, #52]	@ (8004a7c <__libc_init_array+0x38>)
 8004a48:	4c0d      	ldr	r4, [pc, #52]	@ (8004a80 <__libc_init_array+0x3c>)
 8004a4a:	1b64      	subs	r4, r4, r5
 8004a4c:	10a4      	asrs	r4, r4, #2
 8004a4e:	2600      	movs	r6, #0
 8004a50:	42a6      	cmp	r6, r4
 8004a52:	d109      	bne.n	8004a68 <__libc_init_array+0x24>
 8004a54:	4d0b      	ldr	r5, [pc, #44]	@ (8004a84 <__libc_init_array+0x40>)
 8004a56:	4c0c      	ldr	r4, [pc, #48]	@ (8004a88 <__libc_init_array+0x44>)
 8004a58:	f000 f818 	bl	8004a8c <_init>
 8004a5c:	1b64      	subs	r4, r4, r5
 8004a5e:	10a4      	asrs	r4, r4, #2
 8004a60:	2600      	movs	r6, #0
 8004a62:	42a6      	cmp	r6, r4
 8004a64:	d105      	bne.n	8004a72 <__libc_init_array+0x2e>
 8004a66:	bd70      	pop	{r4, r5, r6, pc}
 8004a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a6c:	4798      	blx	r3
 8004a6e:	3601      	adds	r6, #1
 8004a70:	e7ee      	b.n	8004a50 <__libc_init_array+0xc>
 8004a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a76:	4798      	blx	r3
 8004a78:	3601      	adds	r6, #1
 8004a7a:	e7f2      	b.n	8004a62 <__libc_init_array+0x1e>
 8004a7c:	08004aec 	.word	0x08004aec
 8004a80:	08004aec 	.word	0x08004aec
 8004a84:	08004aec 	.word	0x08004aec
 8004a88:	08004af0 	.word	0x08004af0

08004a8c <_init>:
 8004a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8e:	bf00      	nop
 8004a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a92:	bc08      	pop	{r3}
 8004a94:	469e      	mov	lr, r3
 8004a96:	4770      	bx	lr

08004a98 <_fini>:
 8004a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9a:	bf00      	nop
 8004a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a9e:	bc08      	pop	{r3}
 8004aa0:	469e      	mov	lr, r3
 8004aa2:	4770      	bx	lr
