/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "J3_IBUS_FLYSKY.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart1_rx;



/* USER CODE BEGIN PV */
TRxIBus *RxIBus;

#define TEMP_BUFFER_SIZE 1024  // Maximum size for temp_buffer
#define TARGET_SIZE 32
char temp_buffer[TEMP_BUFFER_SIZE];  // Global buffer to store the formatted output
uint16_t temp_buffer_index = 0;  // Index to track where we are in the temp_buffer
#define FRAME_SIZE 32
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, (uint8_t*)"Ready to receive!\n", 18, HAL_MAX_DELAY);
  RxIBus = J3_IBUS_new(&huart1, 14);
  HAL_UART_Receive_DMA(&huart1, RxIBus->buffer, 64);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      /*HAL_Delay(100);  // Prevent watchdog reset
      // Debug: print the received buffer (raw data)
      //HAL_UART_Transmit(&huart2, "Buffer received: ", 17, HAL_MAX_DELAY);
      copy_buffer(RxIBus->buffer,64);
     // print_buffer(RxIBus->buffer, 64);  // Print raw buffer
      HAL_UART_Transmit(&huart2, (uint8_t*)temp_buffer, temp_buffer_index, HAL_MAX_DELAY);
      HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);
      verify_checksum(temp_buffer);
      J3_IBUS_RequestNewData(RxIBus);*/

      HAL_Delay(100);  // Prevent watchdog reset

      // Call the checksum verification function to verify temp_buffer
      verify_temp_buffer();

      // Other processing code (e.g., copying buffer, transmitting data, etc.)
      HAL_UART_Transmit(&huart2, "Buffer received: ", 17, HAL_MAX_DELAY);
      copy_buffer(RxIBus->buffer, 64);
      HAL_UART_Transmit(&huart2, (uint8_t*)temp_buffer, temp_buffer_index, HAL_MAX_DELAY);
      HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);

      J3_IBUS_RequestNewData(RxIBus);

  }
}


void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

void print_buffer(uint8_t *buffer, uint16_t size) {
    char temp[5];

    // Loop through each byte in the buffer and format it
    for (uint16_t i = 0; i < size; i++) {
        // Format each byte as "0xXX" and store it in temp
        sprintf(temp, "0x%02X ", buffer[i]);

        // Copy the formatted data (temp) into the global temp_buffer
        uint16_t len = strlen(temp);
        if (temp_buffer_index + len < TEMP_BUFFER_SIZE) {
            memcpy(&temp_buffer[temp_buffer_index], temp, len);
            temp_buffer_index += len;  // Update the index in the temp_buffer
        } else {
            // Handle the case if temp_buffer overflows (optional, e.g., reset or stop appending)
            break;
        }
    }

    // Now transmit the entire temp_buffer via UART
    HAL_UART_Transmit(&huart2, (uint8_t*)temp_buffer, temp_buffer_index, HAL_MAX_DELAY);

    // Do not clear temp_buffer here, so it can be reused later
}

void copy_buffer(uint8_t *buffer, uint16_t size) {
	char temp[5];  // Temporary buffer to format each byte
	    uint16_t start_index = 0;  // Index where the specific frame starts

	    // Clear the temp_buffer before storing new data
	    memset(temp_buffer, 0, TEMP_BUFFER_SIZE);
	    temp_buffer_index = 0;  // Reset the index to start fresh

	    // Loop through the buffer to find the specific frame, in this case from 0x20 (0x20 0x40 ... 0xF3)
	    for (uint16_t i = 0; i < size; i++) {
	        // Check if we are at the beginning of the specific frame we want to print
	        if (buffer[i] == 0x20 && i + TARGET_SIZE <= size) {  // Look for the start of the frame
	            start_index = i;
	            break;
	        }
	    }

	    // Loop through the specific part of the buffer and format it
	    for (uint16_t i = start_index; i < start_index + TARGET_SIZE; i++) {
	        sprintf(temp, "0x%02X ", buffer[i]);

	        // Copy the formatted data (temp) into the global temp_buffer
	        uint16_t len = strlen(temp);
	        if (temp_buffer_index + len < TEMP_BUFFER_SIZE) {
	            memcpy(&temp_buffer[temp_buffer_index], temp, len);
	            temp_buffer_index += len;  // Update the index in the temp_buffer
	        } else {
	            // Handle buffer overflow (optional, you may reset or stop appending)
	            break;
	        }
	    }

	}

uint16_t calculate_checksum(uint8_t *data_frame) {
    uint32_t sum = 0;

    // Sum the first 30 bytes of the data frame
    for (int i = 0; i < 30; i++) {
        sum += data_frame[i];
    }

    // Compute checksum as 0xFFFF - the sum of the first 30 bytes
    uint16_t checksum = 0xFFFF - (sum & 0xFFFF);  // Ensure to only keep the lower 16 bits
    return checksum;
}

void verify_temp_buffer(void) {
    // Make sure temp_buffer is filled with at least 32 bytes of data
    if (temp_buffer_index >= TARGET_SIZE) {
        // Compute the checksum for the first 30 bytes in temp_buffer
        uint16_t calculated_checksum = calculate_checksum(temp_buffer);

        // Get the received checksum from the last two bytes of the frame (bytes 30 and 31)
        uint16_t received_checksum = (temp_buffer[30] << 8) | temp_buffer[31];  // Combining bytes in little-endian format

        // Check if the checksum matches
        if (calculated_checksum == received_checksum) {
            HAL_UART_Transmit(&huart2, (uint8_t*)"Checksum valid!\n", 17, HAL_MAX_DELAY);
        } else {
            HAL_UART_Transmit(&huart2, (uint8_t*)"Checksum invalid!\n", 19, HAL_MAX_DELAY);
        }
    } else {
        // If the buffer doesn't contain enough data (less than 32 bytes)
        HAL_UART_Transmit(&huart2, (uint8_t*)"Insufficient data in temp_buffer.\n", 34, HAL_MAX_DELAY);
    }
}


/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */
  void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
      if (huart->Instance == USART1) {
          J3_IBUS_ProcessBuffer(RxIBus); // Process data after it is received
      }
  }

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
