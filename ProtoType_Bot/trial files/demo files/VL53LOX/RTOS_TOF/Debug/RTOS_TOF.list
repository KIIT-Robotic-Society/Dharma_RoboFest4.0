
RTOS_TOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e08  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08007fd8  08007fd8  00008fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800818c  0800818c  0000a064  2**0
                  CONTENTS
  4 .ARM          00000008  0800818c  0800818c  0000918c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008194  08008194  0000a064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008194  08008194  00009194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008198  08008198  00009198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800819c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004370  20000064  08008200  0000a064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200043d4  08008200  0000a3d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a99  00000000  00000000  0000a094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003541  00000000  00000000  00022b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001660  00000000  00000000  00026070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000118d  00000000  00000000  000276d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002453b  00000000  00000000  0002885d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a718  00000000  00000000  0004cd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd065  00000000  00000000  000674b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00144515  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064cc  00000000  00000000  00144558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0014aa24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007fc0 	.word	0x08007fc0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08007fc0 	.word	0x08007fc0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__gedf2>:
 8000628:	f04f 3cff 	mov.w	ip, #4294967295
 800062c:	e006      	b.n	800063c <__cmpdf2+0x4>
 800062e:	bf00      	nop

08000630 <__ledf2>:
 8000630:	f04f 0c01 	mov.w	ip, #1
 8000634:	e002      	b.n	800063c <__cmpdf2+0x4>
 8000636:	bf00      	nop

08000638 <__cmpdf2>:
 8000638:	f04f 0c01 	mov.w	ip, #1
 800063c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000640:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000644:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000648:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800064c:	bf18      	it	ne
 800064e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000652:	d01b      	beq.n	800068c <__cmpdf2+0x54>
 8000654:	b001      	add	sp, #4
 8000656:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800065a:	bf0c      	ite	eq
 800065c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000660:	ea91 0f03 	teqne	r1, r3
 8000664:	bf02      	ittt	eq
 8000666:	ea90 0f02 	teqeq	r0, r2
 800066a:	2000      	moveq	r0, #0
 800066c:	4770      	bxeq	lr
 800066e:	f110 0f00 	cmn.w	r0, #0
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf58      	it	pl
 8000678:	4299      	cmppl	r1, r3
 800067a:	bf08      	it	eq
 800067c:	4290      	cmpeq	r0, r2
 800067e:	bf2c      	ite	cs
 8000680:	17d8      	asrcs	r0, r3, #31
 8000682:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000686:	f040 0001 	orr.w	r0, r0, #1
 800068a:	4770      	bx	lr
 800068c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000694:	d102      	bne.n	800069c <__cmpdf2+0x64>
 8000696:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800069a:	d107      	bne.n	80006ac <__cmpdf2+0x74>
 800069c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006a4:	d1d6      	bne.n	8000654 <__cmpdf2+0x1c>
 80006a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006aa:	d0d3      	beq.n	8000654 <__cmpdf2+0x1c>
 80006ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <__aeabi_cdrcmple>:
 80006b4:	4684      	mov	ip, r0
 80006b6:	4610      	mov	r0, r2
 80006b8:	4662      	mov	r2, ip
 80006ba:	468c      	mov	ip, r1
 80006bc:	4619      	mov	r1, r3
 80006be:	4663      	mov	r3, ip
 80006c0:	e000      	b.n	80006c4 <__aeabi_cdcmpeq>
 80006c2:	bf00      	nop

080006c4 <__aeabi_cdcmpeq>:
 80006c4:	b501      	push	{r0, lr}
 80006c6:	f7ff ffb7 	bl	8000638 <__cmpdf2>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	bf48      	it	mi
 80006ce:	f110 0f00 	cmnmi.w	r0, #0
 80006d2:	bd01      	pop	{r0, pc}

080006d4 <__aeabi_dcmpeq>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff fff4 	bl	80006c4 <__aeabi_cdcmpeq>
 80006dc:	bf0c      	ite	eq
 80006de:	2001      	moveq	r0, #1
 80006e0:	2000      	movne	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_dcmplt>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffea 	bl	80006c4 <__aeabi_cdcmpeq>
 80006f0:	bf34      	ite	cc
 80006f2:	2001      	movcc	r0, #1
 80006f4:	2000      	movcs	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_dcmple>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffe0 	bl	80006c4 <__aeabi_cdcmpeq>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_dcmpge>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffce 	bl	80006b4 <__aeabi_cdrcmple>
 8000718:	bf94      	ite	ls
 800071a:	2001      	movls	r0, #1
 800071c:	2000      	movhi	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_dcmpgt>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff ffc4 	bl	80006b4 <__aeabi_cdrcmple>
 800072c:	bf34      	ite	cc
 800072e:	2001      	movcc	r0, #1
 8000730:	2000      	movcs	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b96a 	b.w	8000a24 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f806 	bl	8000768 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__udivmoddi4>:
 8000768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800076c:	9d08      	ldr	r5, [sp, #32]
 800076e:	460c      	mov	r4, r1
 8000770:	2b00      	cmp	r3, #0
 8000772:	d14e      	bne.n	8000812 <__udivmoddi4+0xaa>
 8000774:	4694      	mov	ip, r2
 8000776:	458c      	cmp	ip, r1
 8000778:	4686      	mov	lr, r0
 800077a:	fab2 f282 	clz	r2, r2
 800077e:	d962      	bls.n	8000846 <__udivmoddi4+0xde>
 8000780:	b14a      	cbz	r2, 8000796 <__udivmoddi4+0x2e>
 8000782:	f1c2 0320 	rsb	r3, r2, #32
 8000786:	4091      	lsls	r1, r2
 8000788:	fa20 f303 	lsr.w	r3, r0, r3
 800078c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000790:	4319      	orrs	r1, r3
 8000792:	fa00 fe02 	lsl.w	lr, r0, r2
 8000796:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800079a:	fa1f f68c 	uxth.w	r6, ip
 800079e:	fbb1 f4f7 	udiv	r4, r1, r7
 80007a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007a6:	fb07 1114 	mls	r1, r7, r4, r1
 80007aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ae:	fb04 f106 	mul.w	r1, r4, r6
 80007b2:	4299      	cmp	r1, r3
 80007b4:	d90a      	bls.n	80007cc <__udivmoddi4+0x64>
 80007b6:	eb1c 0303 	adds.w	r3, ip, r3
 80007ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80007be:	f080 8112 	bcs.w	80009e6 <__udivmoddi4+0x27e>
 80007c2:	4299      	cmp	r1, r3
 80007c4:	f240 810f 	bls.w	80009e6 <__udivmoddi4+0x27e>
 80007c8:	3c02      	subs	r4, #2
 80007ca:	4463      	add	r3, ip
 80007cc:	1a59      	subs	r1, r3, r1
 80007ce:	fa1f f38e 	uxth.w	r3, lr
 80007d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80007d6:	fb07 1110 	mls	r1, r7, r0, r1
 80007da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007de:	fb00 f606 	mul.w	r6, r0, r6
 80007e2:	429e      	cmp	r6, r3
 80007e4:	d90a      	bls.n	80007fc <__udivmoddi4+0x94>
 80007e6:	eb1c 0303 	adds.w	r3, ip, r3
 80007ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80007ee:	f080 80fc 	bcs.w	80009ea <__udivmoddi4+0x282>
 80007f2:	429e      	cmp	r6, r3
 80007f4:	f240 80f9 	bls.w	80009ea <__udivmoddi4+0x282>
 80007f8:	4463      	add	r3, ip
 80007fa:	3802      	subs	r0, #2
 80007fc:	1b9b      	subs	r3, r3, r6
 80007fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000802:	2100      	movs	r1, #0
 8000804:	b11d      	cbz	r5, 800080e <__udivmoddi4+0xa6>
 8000806:	40d3      	lsrs	r3, r2
 8000808:	2200      	movs	r2, #0
 800080a:	e9c5 3200 	strd	r3, r2, [r5]
 800080e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000812:	428b      	cmp	r3, r1
 8000814:	d905      	bls.n	8000822 <__udivmoddi4+0xba>
 8000816:	b10d      	cbz	r5, 800081c <__udivmoddi4+0xb4>
 8000818:	e9c5 0100 	strd	r0, r1, [r5]
 800081c:	2100      	movs	r1, #0
 800081e:	4608      	mov	r0, r1
 8000820:	e7f5      	b.n	800080e <__udivmoddi4+0xa6>
 8000822:	fab3 f183 	clz	r1, r3
 8000826:	2900      	cmp	r1, #0
 8000828:	d146      	bne.n	80008b8 <__udivmoddi4+0x150>
 800082a:	42a3      	cmp	r3, r4
 800082c:	d302      	bcc.n	8000834 <__udivmoddi4+0xcc>
 800082e:	4290      	cmp	r0, r2
 8000830:	f0c0 80f0 	bcc.w	8000a14 <__udivmoddi4+0x2ac>
 8000834:	1a86      	subs	r6, r0, r2
 8000836:	eb64 0303 	sbc.w	r3, r4, r3
 800083a:	2001      	movs	r0, #1
 800083c:	2d00      	cmp	r5, #0
 800083e:	d0e6      	beq.n	800080e <__udivmoddi4+0xa6>
 8000840:	e9c5 6300 	strd	r6, r3, [r5]
 8000844:	e7e3      	b.n	800080e <__udivmoddi4+0xa6>
 8000846:	2a00      	cmp	r2, #0
 8000848:	f040 8090 	bne.w	800096c <__udivmoddi4+0x204>
 800084c:	eba1 040c 	sub.w	r4, r1, ip
 8000850:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000854:	fa1f f78c 	uxth.w	r7, ip
 8000858:	2101      	movs	r1, #1
 800085a:	fbb4 f6f8 	udiv	r6, r4, r8
 800085e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000862:	fb08 4416 	mls	r4, r8, r6, r4
 8000866:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800086a:	fb07 f006 	mul.w	r0, r7, r6
 800086e:	4298      	cmp	r0, r3
 8000870:	d908      	bls.n	8000884 <__udivmoddi4+0x11c>
 8000872:	eb1c 0303 	adds.w	r3, ip, r3
 8000876:	f106 34ff 	add.w	r4, r6, #4294967295
 800087a:	d202      	bcs.n	8000882 <__udivmoddi4+0x11a>
 800087c:	4298      	cmp	r0, r3
 800087e:	f200 80cd 	bhi.w	8000a1c <__udivmoddi4+0x2b4>
 8000882:	4626      	mov	r6, r4
 8000884:	1a1c      	subs	r4, r3, r0
 8000886:	fa1f f38e 	uxth.w	r3, lr
 800088a:	fbb4 f0f8 	udiv	r0, r4, r8
 800088e:	fb08 4410 	mls	r4, r8, r0, r4
 8000892:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000896:	fb00 f707 	mul.w	r7, r0, r7
 800089a:	429f      	cmp	r7, r3
 800089c:	d908      	bls.n	80008b0 <__udivmoddi4+0x148>
 800089e:	eb1c 0303 	adds.w	r3, ip, r3
 80008a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008a6:	d202      	bcs.n	80008ae <__udivmoddi4+0x146>
 80008a8:	429f      	cmp	r7, r3
 80008aa:	f200 80b0 	bhi.w	8000a0e <__udivmoddi4+0x2a6>
 80008ae:	4620      	mov	r0, r4
 80008b0:	1bdb      	subs	r3, r3, r7
 80008b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008b6:	e7a5      	b.n	8000804 <__udivmoddi4+0x9c>
 80008b8:	f1c1 0620 	rsb	r6, r1, #32
 80008bc:	408b      	lsls	r3, r1
 80008be:	fa22 f706 	lsr.w	r7, r2, r6
 80008c2:	431f      	orrs	r7, r3
 80008c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80008c8:	fa04 f301 	lsl.w	r3, r4, r1
 80008cc:	ea43 030c 	orr.w	r3, r3, ip
 80008d0:	40f4      	lsrs	r4, r6
 80008d2:	fa00 f801 	lsl.w	r8, r0, r1
 80008d6:	0c38      	lsrs	r0, r7, #16
 80008d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80008dc:	fbb4 fef0 	udiv	lr, r4, r0
 80008e0:	fa1f fc87 	uxth.w	ip, r7
 80008e4:	fb00 441e 	mls	r4, r0, lr, r4
 80008e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008ec:	fb0e f90c 	mul.w	r9, lr, ip
 80008f0:	45a1      	cmp	r9, r4
 80008f2:	fa02 f201 	lsl.w	r2, r2, r1
 80008f6:	d90a      	bls.n	800090e <__udivmoddi4+0x1a6>
 80008f8:	193c      	adds	r4, r7, r4
 80008fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80008fe:	f080 8084 	bcs.w	8000a0a <__udivmoddi4+0x2a2>
 8000902:	45a1      	cmp	r9, r4
 8000904:	f240 8081 	bls.w	8000a0a <__udivmoddi4+0x2a2>
 8000908:	f1ae 0e02 	sub.w	lr, lr, #2
 800090c:	443c      	add	r4, r7
 800090e:	eba4 0409 	sub.w	r4, r4, r9
 8000912:	fa1f f983 	uxth.w	r9, r3
 8000916:	fbb4 f3f0 	udiv	r3, r4, r0
 800091a:	fb00 4413 	mls	r4, r0, r3, r4
 800091e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000922:	fb03 fc0c 	mul.w	ip, r3, ip
 8000926:	45a4      	cmp	ip, r4
 8000928:	d907      	bls.n	800093a <__udivmoddi4+0x1d2>
 800092a:	193c      	adds	r4, r7, r4
 800092c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000930:	d267      	bcs.n	8000a02 <__udivmoddi4+0x29a>
 8000932:	45a4      	cmp	ip, r4
 8000934:	d965      	bls.n	8000a02 <__udivmoddi4+0x29a>
 8000936:	3b02      	subs	r3, #2
 8000938:	443c      	add	r4, r7
 800093a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800093e:	fba0 9302 	umull	r9, r3, r0, r2
 8000942:	eba4 040c 	sub.w	r4, r4, ip
 8000946:	429c      	cmp	r4, r3
 8000948:	46ce      	mov	lr, r9
 800094a:	469c      	mov	ip, r3
 800094c:	d351      	bcc.n	80009f2 <__udivmoddi4+0x28a>
 800094e:	d04e      	beq.n	80009ee <__udivmoddi4+0x286>
 8000950:	b155      	cbz	r5, 8000968 <__udivmoddi4+0x200>
 8000952:	ebb8 030e 	subs.w	r3, r8, lr
 8000956:	eb64 040c 	sbc.w	r4, r4, ip
 800095a:	fa04 f606 	lsl.w	r6, r4, r6
 800095e:	40cb      	lsrs	r3, r1
 8000960:	431e      	orrs	r6, r3
 8000962:	40cc      	lsrs	r4, r1
 8000964:	e9c5 6400 	strd	r6, r4, [r5]
 8000968:	2100      	movs	r1, #0
 800096a:	e750      	b.n	800080e <__udivmoddi4+0xa6>
 800096c:	f1c2 0320 	rsb	r3, r2, #32
 8000970:	fa20 f103 	lsr.w	r1, r0, r3
 8000974:	fa0c fc02 	lsl.w	ip, ip, r2
 8000978:	fa24 f303 	lsr.w	r3, r4, r3
 800097c:	4094      	lsls	r4, r2
 800097e:	430c      	orrs	r4, r1
 8000980:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000984:	fa00 fe02 	lsl.w	lr, r0, r2
 8000988:	fa1f f78c 	uxth.w	r7, ip
 800098c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000990:	fb08 3110 	mls	r1, r8, r0, r3
 8000994:	0c23      	lsrs	r3, r4, #16
 8000996:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800099a:	fb00 f107 	mul.w	r1, r0, r7
 800099e:	4299      	cmp	r1, r3
 80009a0:	d908      	bls.n	80009b4 <__udivmoddi4+0x24c>
 80009a2:	eb1c 0303 	adds.w	r3, ip, r3
 80009a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009aa:	d22c      	bcs.n	8000a06 <__udivmoddi4+0x29e>
 80009ac:	4299      	cmp	r1, r3
 80009ae:	d92a      	bls.n	8000a06 <__udivmoddi4+0x29e>
 80009b0:	3802      	subs	r0, #2
 80009b2:	4463      	add	r3, ip
 80009b4:	1a5b      	subs	r3, r3, r1
 80009b6:	b2a4      	uxth	r4, r4
 80009b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009bc:	fb08 3311 	mls	r3, r8, r1, r3
 80009c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009c4:	fb01 f307 	mul.w	r3, r1, r7
 80009c8:	42a3      	cmp	r3, r4
 80009ca:	d908      	bls.n	80009de <__udivmoddi4+0x276>
 80009cc:	eb1c 0404 	adds.w	r4, ip, r4
 80009d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80009d4:	d213      	bcs.n	80009fe <__udivmoddi4+0x296>
 80009d6:	42a3      	cmp	r3, r4
 80009d8:	d911      	bls.n	80009fe <__udivmoddi4+0x296>
 80009da:	3902      	subs	r1, #2
 80009dc:	4464      	add	r4, ip
 80009de:	1ae4      	subs	r4, r4, r3
 80009e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009e4:	e739      	b.n	800085a <__udivmoddi4+0xf2>
 80009e6:	4604      	mov	r4, r0
 80009e8:	e6f0      	b.n	80007cc <__udivmoddi4+0x64>
 80009ea:	4608      	mov	r0, r1
 80009ec:	e706      	b.n	80007fc <__udivmoddi4+0x94>
 80009ee:	45c8      	cmp	r8, r9
 80009f0:	d2ae      	bcs.n	8000950 <__udivmoddi4+0x1e8>
 80009f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80009f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80009fa:	3801      	subs	r0, #1
 80009fc:	e7a8      	b.n	8000950 <__udivmoddi4+0x1e8>
 80009fe:	4631      	mov	r1, r6
 8000a00:	e7ed      	b.n	80009de <__udivmoddi4+0x276>
 8000a02:	4603      	mov	r3, r0
 8000a04:	e799      	b.n	800093a <__udivmoddi4+0x1d2>
 8000a06:	4630      	mov	r0, r6
 8000a08:	e7d4      	b.n	80009b4 <__udivmoddi4+0x24c>
 8000a0a:	46d6      	mov	lr, sl
 8000a0c:	e77f      	b.n	800090e <__udivmoddi4+0x1a6>
 8000a0e:	4463      	add	r3, ip
 8000a10:	3802      	subs	r0, #2
 8000a12:	e74d      	b.n	80008b0 <__udivmoddi4+0x148>
 8000a14:	4606      	mov	r6, r0
 8000a16:	4623      	mov	r3, r4
 8000a18:	4608      	mov	r0, r1
 8000a1a:	e70f      	b.n	800083c <__udivmoddi4+0xd4>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	4463      	add	r3, ip
 8000a20:	e730      	b.n	8000884 <__udivmoddi4+0x11c>
 8000a22:	bf00      	nop

08000a24 <__aeabi_idiv0>:
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <writeReg>:

//---------------------------------------------------------
// I2C communication Functions
//---------------------------------------------------------
// Write an 8-bit register
void writeReg(uint8_t reg, uint8_t value) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af04      	add	r7, sp, #16
 8000a2e:	4603      	mov	r3, r0
 8000a30:	460a      	mov	r2, r1
 8000a32:	71fb      	strb	r3, [r7, #7]
 8000a34:	4613      	mov	r3, r2
 8000a36:	71bb      	strb	r3, [r7, #6]

  msgBuffer[0] = value; // Assign the value to the buffer.
 8000a38:	4a0c      	ldr	r2, [pc, #48]	@ (8000a6c <writeReg+0x44>)
 8000a3a:	79bb      	ldrb	r3, [r7, #6]
 8000a3c:	7013      	strb	r3, [r2, #0]
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 1, I2C_TIMEOUT);
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a70 <writeReg+0x48>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	4619      	mov	r1, r3
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	2364      	movs	r3, #100	@ 0x64
 8000a4a:	9302      	str	r3, [sp, #8]
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	9301      	str	r3, [sp, #4]
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <writeReg+0x44>)
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	2301      	movs	r3, #1
 8000a56:	4807      	ldr	r0, [pc, #28]	@ (8000a74 <writeReg+0x4c>)
 8000a58:	f002 ff30 	bl	80038bc <HAL_I2C_Mem_Write>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4b05      	ldr	r3, [pc, #20]	@ (8000a78 <writeReg+0x50>)
 8000a62:	701a      	strb	r2, [r3, #0]
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200000e0 	.word	0x200000e0
 8000a70:	20000000 	.word	0x20000000
 8000a74:	2000008c 	.word	0x2000008c
 8000a78:	200000e4 	.word	0x200000e4

08000a7c <writeReg16Bit>:

// Write a 16-bit register
void writeReg16Bit(uint8_t reg, uint16_t value){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af04      	add	r7, sp, #16
 8000a82:	4603      	mov	r3, r0
 8000a84:	460a      	mov	r2, r1
 8000a86:	71fb      	strb	r3, [r7, #7]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	80bb      	strh	r3, [r7, #4]

  memcpy(msgBuffer, &value, 2); // Assign the value to the buffer.
 8000a8c:	88ba      	ldrh	r2, [r7, #4]
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <writeReg16Bit+0x44>)
 8000a90:	801a      	strh	r2, [r3, #0]
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 2, I2C_TIMEOUT);
 8000a92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <writeReg16Bit+0x48>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	4619      	mov	r1, r3
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	2364      	movs	r3, #100	@ 0x64
 8000a9e:	9302      	str	r3, [sp, #8]
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	9301      	str	r3, [sp, #4]
 8000aa4:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <writeReg16Bit+0x44>)
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	4807      	ldr	r0, [pc, #28]	@ (8000ac8 <writeReg16Bit+0x4c>)
 8000aac:	f002 ff06 	bl	80038bc <HAL_I2C_Mem_Write>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4b05      	ldr	r3, [pc, #20]	@ (8000acc <writeReg16Bit+0x50>)
 8000ab6:	701a      	strb	r2, [r3, #0]
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200000e0 	.word	0x200000e0
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	2000008c 	.word	0x2000008c
 8000acc:	200000e4 	.word	0x200000e4

08000ad0 <readReg>:
  memcpy(msgBuffer, &value, 4); // Assign the value to the buffer.
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 4, I2C_TIMEOUT);
}

// Read an 8-bit register
uint8_t readReg(uint8_t reg) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af04      	add	r7, sp, #16
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
  uint8_t value;

  i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, msgBuffer, 1, I2C_TIMEOUT);
 8000ada:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <readReg+0x48>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	2364      	movs	r3, #100	@ 0x64
 8000aec:	9302      	str	r3, [sp, #8]
 8000aee:	2301      	movs	r3, #1
 8000af0:	9301      	str	r3, [sp, #4]
 8000af2:	4b0a      	ldr	r3, [pc, #40]	@ (8000b1c <readReg+0x4c>)
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	2301      	movs	r3, #1
 8000af8:	4809      	ldr	r0, [pc, #36]	@ (8000b20 <readReg+0x50>)
 8000afa:	f002 ffd9 	bl	8003ab0 <HAL_I2C_Mem_Read>
 8000afe:	4603      	mov	r3, r0
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b08      	ldr	r3, [pc, #32]	@ (8000b24 <readReg+0x54>)
 8000b04:	701a      	strb	r2, [r3, #0]
  value = msgBuffer[0];
 8000b06:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <readReg+0x4c>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	73fb      	strb	r3, [r7, #15]

  return value;
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	200000e0 	.word	0x200000e0
 8000b20:	2000008c 	.word	0x2000008c
 8000b24:	200000e4 	.word	0x200000e4

08000b28 <readReg16Bit>:

// Read a 16-bit register
uint16_t readReg16Bit(uint8_t reg) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af04      	add	r7, sp, #16
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
  uint16_t value;

  i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, msgBuffer, 2, I2C_TIMEOUT);
 8000b32:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <readReg16Bit+0x48>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	2364      	movs	r3, #100	@ 0x64
 8000b44:	9302      	str	r3, [sp, #8]
 8000b46:	2302      	movs	r3, #2
 8000b48:	9301      	str	r3, [sp, #4]
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <readReg16Bit+0x4c>)
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	2301      	movs	r3, #1
 8000b50:	4809      	ldr	r0, [pc, #36]	@ (8000b78 <readReg16Bit+0x50>)
 8000b52:	f002 ffad 	bl	8003ab0 <HAL_I2C_Mem_Read>
 8000b56:	4603      	mov	r3, r0
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <readReg16Bit+0x54>)
 8000b5c:	701a      	strb	r2, [r3, #0]
  memcpy(&value, msgBuffer, 2);
 8000b5e:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <readReg16Bit+0x4c>)
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	81fb      	strh	r3, [r7, #14]

  return value;
 8000b64:	89fb      	ldrh	r3, [r7, #14]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000000 	.word	0x20000000
 8000b74:	200000e0 	.word	0x200000e0
 8000b78:	2000008c 	.word	0x2000008c
 8000b7c:	200000e4 	.word	0x200000e4

08000b80 <writeMulti>:
  return value;
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void writeMulti(uint8_t reg, uint8_t const *src, uint8_t count){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af04      	add	r7, sp, #16
 8000b86:	4603      	mov	r3, r0
 8000b88:	6039      	str	r1, [r7, #0]
 8000b8a:	71fb      	strb	r3, [r7, #7]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	71bb      	strb	r3, [r7, #6]

  memcpy(msgBuffer, src, 4);
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b0d      	ldr	r3, [pc, #52]	@ (8000bcc <writeMulti+0x4c>)
 8000b98:	601a      	str	r2, [r3, #0]
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, count, I2C_TIMEOUT);
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd0 <writeMulti+0x50>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	79bb      	ldrb	r3, [r7, #6]
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	2164      	movs	r1, #100	@ 0x64
 8000baa:	9102      	str	r1, [sp, #8]
 8000bac:	9301      	str	r3, [sp, #4]
 8000bae:	4b07      	ldr	r3, [pc, #28]	@ (8000bcc <writeMulti+0x4c>)
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	4601      	mov	r1, r0
 8000bb6:	4807      	ldr	r0, [pc, #28]	@ (8000bd4 <writeMulti+0x54>)
 8000bb8:	f002 fe80 	bl	80038bc <HAL_I2C_Mem_Write>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	4b05      	ldr	r3, [pc, #20]	@ (8000bd8 <writeMulti+0x58>)
 8000bc2:	701a      	strb	r2, [r3, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	200000e0 	.word	0x200000e0
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	2000008c 	.word	0x2000008c
 8000bd8:	200000e4 	.word	0x200000e4

08000bdc <readMulti>:

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void readMulti(uint8_t reg, uint8_t * dst, uint8_t count) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af04      	add	r7, sp, #16
 8000be2:	4603      	mov	r3, r0
 8000be4:	6039      	str	r1, [r7, #0]
 8000be6:	71fb      	strb	r3, [r7, #7]
 8000be8:	4613      	mov	r3, r2
 8000bea:	71bb      	strb	r3, [r7, #6]

	i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, dst, count, I2C_TIMEOUT);
 8000bec:	4b0d      	ldr	r3, [pc, #52]	@ (8000c24 <readMulti+0x48>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	79bb      	ldrb	r3, [r7, #6]
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	2164      	movs	r1, #100	@ 0x64
 8000c02:	9102      	str	r1, [sp, #8]
 8000c04:	9301      	str	r3, [sp, #4]
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	4601      	mov	r1, r0
 8000c0e:	4806      	ldr	r0, [pc, #24]	@ (8000c28 <readMulti+0x4c>)
 8000c10:	f002 ff4e 	bl	8003ab0 <HAL_I2C_Mem_Read>
 8000c14:	4603      	mov	r3, r0
 8000c16:	461a      	mov	r2, r3
 8000c18:	4b04      	ldr	r3, [pc, #16]	@ (8000c2c <readMulti+0x50>)
 8000c1a:	701a      	strb	r2, [r3, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000000 	.word	0x20000000
 8000c28:	2000008c 	.word	0x2000008c
 8000c2c:	200000e4 	.word	0x200000e4

08000c30 <writeReg_x>:

void writeReg_x(uint8_t reg, uint8_t value, statInfo_t_VL53L0X *sensorInfo) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af04      	add	r7, sp, #16
 8000c36:	4603      	mov	r3, r0
 8000c38:	603a      	str	r2, [r7, #0]
 8000c3a:	71fb      	strb	r3, [r7, #7]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	71bb      	strb	r3, [r7, #6]

  msgBuffer[0] = value; // Assign the value to the buffer.
 8000c40:	4a0c      	ldr	r2, [pc, #48]	@ (8000c74 <writeReg_x+0x44>)
 8000c42:	79bb      	ldrb	r3, [r7, #6]
 8000c44:	7013      	strb	r3, [r2, #0]
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, sensorInfo->address | I2C_WRITE, reg, 1, msgBuffer, 1, I2C_TIMEOUT);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	7a5b      	ldrb	r3, [r3, #9]
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	2364      	movs	r3, #100	@ 0x64
 8000c52:	9302      	str	r3, [sp, #8]
 8000c54:	2301      	movs	r3, #1
 8000c56:	9301      	str	r3, [sp, #4]
 8000c58:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <writeReg_x+0x44>)
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	4806      	ldr	r0, [pc, #24]	@ (8000c78 <writeReg_x+0x48>)
 8000c60:	f002 fe2c 	bl	80038bc <HAL_I2C_Mem_Write>
 8000c64:	4603      	mov	r3, r0
 8000c66:	461a      	mov	r2, r3
 8000c68:	4b04      	ldr	r3, [pc, #16]	@ (8000c7c <writeReg_x+0x4c>)
 8000c6a:	701a      	strb	r2, [r3, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	200000e0 	.word	0x200000e0
 8000c78:	2000008c 	.word	0x2000008c
 8000c7c:	200000e4 	.word	0x200000e4

08000c80 <writeReg16Bit_x>:



void writeReg16Bit_x(uint8_t reg, uint16_t value, statInfo_t_VL53L0X *sensorInfo) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af04      	add	r7, sp, #16
 8000c86:	4603      	mov	r3, r0
 8000c88:	603a      	str	r2, [r7, #0]
 8000c8a:	71fb      	strb	r3, [r7, #7]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	80bb      	strh	r3, [r7, #4]
    memcpy(msgBuffer, &value, 2);  // Copy the 16-bit value to the buffer
 8000c90:	88ba      	ldrh	r2, [r7, #4]
 8000c92:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <writeReg16Bit_x+0x44>)
 8000c94:	801a      	strh	r2, [r3, #0]
    i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, sensorInfo->address | I2C_WRITE, reg, 1, msgBuffer, 2, I2C_TIMEOUT);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	7a5b      	ldrb	r3, [r3, #9]
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	2364      	movs	r3, #100	@ 0x64
 8000ca2:	9302      	str	r3, [sp, #8]
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	9301      	str	r3, [sp, #4]
 8000ca8:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <writeReg16Bit_x+0x44>)
 8000caa:	9300      	str	r3, [sp, #0]
 8000cac:	2301      	movs	r3, #1
 8000cae:	4806      	ldr	r0, [pc, #24]	@ (8000cc8 <writeReg16Bit_x+0x48>)
 8000cb0:	f002 fe04 	bl	80038bc <HAL_I2C_Mem_Write>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <writeReg16Bit_x+0x4c>)
 8000cba:	701a      	strb	r2, [r3, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200000e0 	.word	0x200000e0
 8000cc8:	2000008c 	.word	0x2000008c
 8000ccc:	200000e4 	.word	0x200000e4

08000cd0 <readReg_x>:




// Read an 8-bit register
uint8_t readReg_x(uint8_t reg, statInfo_t_VL53L0X *sensorInfo) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af04      	add	r7, sp, #16
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  uint8_t value;

  i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, sensorInfo->address | I2C_READ, reg, 1, msgBuffer, 1, I2C_TIMEOUT);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	7a5b      	ldrb	r3, [r3, #9]
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	2364      	movs	r3, #100	@ 0x64
 8000cee:	9302      	str	r3, [sp, #8]
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	9301      	str	r3, [sp, #4]
 8000cf4:	4b08      	ldr	r3, [pc, #32]	@ (8000d18 <readReg_x+0x48>)
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	4808      	ldr	r0, [pc, #32]	@ (8000d1c <readReg_x+0x4c>)
 8000cfc:	f002 fed8 	bl	8003ab0 <HAL_I2C_Mem_Read>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <readReg_x+0x50>)
 8000d06:	701a      	strb	r2, [r3, #0]
  value = msgBuffer[0];
 8000d08:	4b03      	ldr	r3, [pc, #12]	@ (8000d18 <readReg_x+0x48>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	73fb      	strb	r3, [r7, #15]

  return value;
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	200000e0 	.word	0x200000e0
 8000d1c:	2000008c 	.word	0x2000008c
 8000d20:	200000e4 	.word	0x200000e4

08000d24 <readReg16Bit_x>:



uint16_t readReg16Bit_x(uint8_t reg, statInfo_t_VL53L0X *sensorInfo) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af04      	add	r7, sp, #16
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
  uint16_t value;

  i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, sensorInfo->address | I2C_READ, reg, 1, msgBuffer, 2, I2C_TIMEOUT);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	7a5b      	ldrb	r3, [r3, #9]
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	2364      	movs	r3, #100	@ 0x64
 8000d42:	9302      	str	r3, [sp, #8]
 8000d44:	2302      	movs	r3, #2
 8000d46:	9301      	str	r3, [sp, #4]
 8000d48:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <readReg16Bit_x+0x48>)
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	4808      	ldr	r0, [pc, #32]	@ (8000d70 <readReg16Bit_x+0x4c>)
 8000d50:	f002 feae 	bl	8003ab0 <HAL_I2C_Mem_Read>
 8000d54:	4603      	mov	r3, r0
 8000d56:	461a      	mov	r2, r3
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <readReg16Bit_x+0x50>)
 8000d5a:	701a      	strb	r2, [r3, #0]
  memcpy(&value, msgBuffer, 2);
 8000d5c:	4b03      	ldr	r3, [pc, #12]	@ (8000d6c <readReg16Bit_x+0x48>)
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	81fb      	strh	r3, [r7, #14]

  return value;
 8000d62:	89fb      	ldrh	r3, [r7, #14]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	200000e0 	.word	0x200000e0
 8000d70:	2000008c 	.word	0x2000008c
 8000d74:	200000e4 	.word	0x200000e4

08000d78 <readMulti_x>:
  memcpy(msgBuffer, src, 4);
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, sensorInfo->address| I2C_WRITE, reg, 1, msgBuffer, count, I2C_TIMEOUT);
}


void readMulti_x(uint8_t reg, uint8_t * dst, uint8_t count, statInfo_t_VL53L0X *sensorInfo) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af04      	add	r7, sp, #16
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	4603      	mov	r3, r0
 8000d84:	73fb      	strb	r3, [r7, #15]
 8000d86:	4613      	mov	r3, r2
 8000d88:	73bb      	strb	r3, [r7, #14]

	i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, sensorInfo->address | I2C_READ, reg, 1, dst, count, I2C_TIMEOUT);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	7a5b      	ldrb	r3, [r3, #9]
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	4618      	mov	r0, r3
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	7bbb      	ldrb	r3, [r7, #14]
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	2164      	movs	r1, #100	@ 0x64
 8000da0:	9102      	str	r1, [sp, #8]
 8000da2:	9301      	str	r3, [sp, #4]
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	2301      	movs	r3, #1
 8000daa:	4601      	mov	r1, r0
 8000dac:	4805      	ldr	r0, [pc, #20]	@ (8000dc4 <readMulti_x+0x4c>)
 8000dae:	f002 fe7f 	bl	8003ab0 <HAL_I2C_Mem_Read>
 8000db2:	4603      	mov	r3, r0
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b04      	ldr	r3, [pc, #16]	@ (8000dc8 <readMulti_x+0x50>)
 8000db8:	701a      	strb	r2, [r3, #0]
}
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	2000008c 	.word	0x2000008c
 8000dc8:	200000e4 	.word	0x200000e4

08000dcc <setAddress_VL53L0X>:


// Public Methods //////////////////////////////////////////////////////////////

void setAddress_VL53L0X(uint8_t new_addr) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  writeReg( I2C_SLAVE_DEVICE_ADDRESS, (new_addr>>1) & 0x7F );
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	085b      	lsrs	r3, r3, #1
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	4619      	mov	r1, r3
 8000dde:	208a      	movs	r0, #138	@ 0x8a
 8000de0:	f7ff fe22 	bl	8000a28 <writeReg>
  //g_i2cAddr = new_addr;
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <initVL53L0X>:
// (VL53L0X_PerformRefSpadManagement()), since the API user manual says that it
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool initVL53L0X(bool io_2v8, I2C_HandleTypeDef *handler){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
  // VL53L0X_DataInit() begin

  // Handler
  memcpy(&VL53L0X_I2C_Handler, handler, sizeof(*handler));
 8000df8:	2254      	movs	r2, #84	@ 0x54
 8000dfa:	6839      	ldr	r1, [r7, #0]
 8000dfc:	4854      	ldr	r0, [pc, #336]	@ (8000f50 <initVL53L0X+0x164>)
 8000dfe:	f006 fc93 	bl	8007728 <memcpy>

  // Reset the message buffer.
  msgBuffer[0] = 0;
 8000e02:	4b54      	ldr	r3, [pc, #336]	@ (8000f54 <initVL53L0X+0x168>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]
  msgBuffer[1] = 0;
 8000e08:	4b52      	ldr	r3, [pc, #328]	@ (8000f54 <initVL53L0X+0x168>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	705a      	strb	r2, [r3, #1]
  msgBuffer[2] = 0;
 8000e0e:	4b51      	ldr	r3, [pc, #324]	@ (8000f54 <initVL53L0X+0x168>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	709a      	strb	r2, [r3, #2]
  msgBuffer[3] = 0;
 8000e14:	4b4f      	ldr	r3, [pc, #316]	@ (8000f54 <initVL53L0X+0x168>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	70da      	strb	r2, [r3, #3]

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d00a      	beq.n	8000e36 <initVL53L0X+0x4a>
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
      readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 8000e20:	2089      	movs	r0, #137	@ 0x89
 8000e22:	f7ff fe55 	bl	8000ad0 <readReg>
 8000e26:	4603      	mov	r3, r0
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	4619      	mov	r1, r3
 8000e30:	2089      	movs	r0, #137	@ 0x89
 8000e32:	f7ff fdf9 	bl	8000a28 <writeReg>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 8000e36:	2100      	movs	r1, #0
 8000e38:	2088      	movs	r0, #136	@ 0x88
 8000e3a:	f7ff fdf5 	bl	8000a28 <writeReg>

  writeReg(0x80, 0x01);
 8000e3e:	2101      	movs	r1, #1
 8000e40:	2080      	movs	r0, #128	@ 0x80
 8000e42:	f7ff fdf1 	bl	8000a28 <writeReg>
  writeReg(0xFF, 0x01);
 8000e46:	2101      	movs	r1, #1
 8000e48:	20ff      	movs	r0, #255	@ 0xff
 8000e4a:	f7ff fded 	bl	8000a28 <writeReg>
  writeReg(0x00, 0x00);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2000      	movs	r0, #0
 8000e52:	f7ff fde9 	bl	8000a28 <writeReg>
  g_stopVariable = readReg(0x91);
 8000e56:	2091      	movs	r0, #145	@ 0x91
 8000e58:	f7ff fe3a 	bl	8000ad0 <readReg>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b3d      	ldr	r3, [pc, #244]	@ (8000f58 <initVL53L0X+0x16c>)
 8000e62:	701a      	strb	r2, [r3, #0]
  writeReg(0x00, 0x01);
 8000e64:	2101      	movs	r1, #1
 8000e66:	2000      	movs	r0, #0
 8000e68:	f7ff fdde 	bl	8000a28 <writeReg>
  writeReg(0xFF, 0x00);
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	20ff      	movs	r0, #255	@ 0xff
 8000e70:	f7ff fdda 	bl	8000a28 <writeReg>
  writeReg(0x80, 0x00);
 8000e74:	2100      	movs	r1, #0
 8000e76:	2080      	movs	r0, #128	@ 0x80
 8000e78:	f7ff fdd6 	bl	8000a28 <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 8000e7c:	2060      	movs	r0, #96	@ 0x60
 8000e7e:	f7ff fe27 	bl	8000ad0 <readReg>
 8000e82:	4603      	mov	r3, r0
 8000e84:	f043 0312 	orr.w	r3, r3, #18
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	2060      	movs	r0, #96	@ 0x60
 8000e8e:	f7ff fdcb 	bl	8000a28 <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 8000e92:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 8000e96:	f000 fa07 	bl	80012a8 <setSignalRateLimit>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8000e9a:	21ff      	movs	r1, #255	@ 0xff
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	f7ff fdc3 	bl	8000a28 <writeReg>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 8000ea2:	f107 0213 	add.w	r2, r7, #19
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4611      	mov	r1, r2
 8000eac:	4618      	mov	r0, r3
 8000eae:	f000 ffbf 	bl	8001e30 <getSpadInfo>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d101      	bne.n	8000ebc <initVL53L0X+0xd0>
 8000eb8:	2300      	movs	r3, #0
 8000eba:	e1ee      	b.n	800129a <initVL53L0X+0x4ae>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	2206      	movs	r2, #6
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	20b0      	movs	r0, #176	@ 0xb0
 8000ec6:	f7ff fe89 	bl	8000bdc <readMulti>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 8000eca:	2101      	movs	r1, #1
 8000ecc:	20ff      	movs	r0, #255	@ 0xff
 8000ece:	f7ff fdab 	bl	8000a28 <writeReg>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	204f      	movs	r0, #79	@ 0x4f
 8000ed6:	f7ff fda7 	bl	8000a28 <writeReg>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8000eda:	212c      	movs	r1, #44	@ 0x2c
 8000edc:	204e      	movs	r0, #78	@ 0x4e
 8000ede:	f7ff fda3 	bl	8000a28 <writeReg>
  writeReg(0xFF, 0x00);
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	20ff      	movs	r0, #255	@ 0xff
 8000ee6:	f7ff fd9f 	bl	8000a28 <writeReg>
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8000eea:	21b4      	movs	r1, #180	@ 0xb4
 8000eec:	20b6      	movs	r0, #182	@ 0xb6
 8000eee:	f7ff fd9b 	bl	8000a28 <writeReg>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 8000ef2:	7cfb      	ldrb	r3, [r7, #19]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <initVL53L0X+0x110>
 8000ef8:	230c      	movs	r3, #12
 8000efa:	e000      	b.n	8000efe <initVL53L0X+0x112>
 8000efc:	2300      	movs	r3, #0
 8000efe:	757b      	strb	r3, [r7, #21]
  uint8_t spads_enabled = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < 48; i++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	75bb      	strb	r3, [r7, #22]
 8000f08:	e03f      	b.n	8000f8a <initVL53L0X+0x19e>
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 8000f0a:	7dba      	ldrb	r2, [r7, #22]
 8000f0c:	7d7b      	ldrb	r3, [r7, #21]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d303      	bcc.n	8000f1a <initVL53L0X+0x12e>
 8000f12:	7d3b      	ldrb	r3, [r7, #20]
 8000f14:	7dfa      	ldrb	r2, [r7, #23]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d120      	bne.n	8000f5c <initVL53L0X+0x170>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 8000f1a:	7dbb      	ldrb	r3, [r7, #22]
 8000f1c:	08db      	lsrs	r3, r3, #3
 8000f1e:	b2d8      	uxtb	r0, r3
 8000f20:	4603      	mov	r3, r0
 8000f22:	3318      	adds	r3, #24
 8000f24:	443b      	add	r3, r7
 8000f26:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000f2a:	b25a      	sxtb	r2, r3
 8000f2c:	7dbb      	ldrb	r3, [r7, #22]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	2101      	movs	r1, #1
 8000f34:	fa01 f303 	lsl.w	r3, r1, r3
 8000f38:	b25b      	sxtb	r3, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	4013      	ands	r3, r2
 8000f40:	b25a      	sxtb	r2, r3
 8000f42:	4603      	mov	r3, r0
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	3318      	adds	r3, #24
 8000f48:	443b      	add	r3, r7
 8000f4a:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8000f4e:	e019      	b.n	8000f84 <initVL53L0X+0x198>
 8000f50:	2000008c 	.word	0x2000008c
 8000f54:	200000e0 	.word	0x200000e0
 8000f58:	20000086 	.word	0x20000086
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 8000f5c:	7dbb      	ldrb	r3, [r7, #22]
 8000f5e:	08db      	lsrs	r3, r3, #3
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	3318      	adds	r3, #24
 8000f64:	443b      	add	r3, r7
 8000f66:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	7dbb      	ldrb	r3, [r7, #22]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	fa42 f303 	asr.w	r3, r2, r3
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d002      	beq.n	8000f84 <initVL53L0X+0x198>
    {
      spads_enabled++;
 8000f7e:	7dfb      	ldrb	r3, [r7, #23]
 8000f80:	3301      	adds	r3, #1
 8000f82:	75fb      	strb	r3, [r7, #23]
  for (uint8_t i = 0; i < 48; i++)
 8000f84:	7dbb      	ldrb	r3, [r7, #22]
 8000f86:	3301      	adds	r3, #1
 8000f88:	75bb      	strb	r3, [r7, #22]
 8000f8a:	7dbb      	ldrb	r3, [r7, #22]
 8000f8c:	2b2f      	cmp	r3, #47	@ 0x2f
 8000f8e:	d9bc      	bls.n	8000f0a <initVL53L0X+0x11e>
    }
  }

  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	2206      	movs	r2, #6
 8000f96:	4619      	mov	r1, r3
 8000f98:	20b0      	movs	r0, #176	@ 0xb0
 8000f9a:	f7ff fdf1 	bl	8000b80 <writeMulti>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	20ff      	movs	r0, #255	@ 0xff
 8000fa2:	f7ff fd41 	bl	8000a28 <writeReg>
  writeReg(0x00, 0x00);
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f7ff fd3d 	bl	8000a28 <writeReg>

  writeReg(0xFF, 0x00);
 8000fae:	2100      	movs	r1, #0
 8000fb0:	20ff      	movs	r0, #255	@ 0xff
 8000fb2:	f7ff fd39 	bl	8000a28 <writeReg>
  writeReg(0x09, 0x00);
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2009      	movs	r0, #9
 8000fba:	f7ff fd35 	bl	8000a28 <writeReg>
  writeReg(0x10, 0x00);
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2010      	movs	r0, #16
 8000fc2:	f7ff fd31 	bl	8000a28 <writeReg>
  writeReg(0x11, 0x00);
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	2011      	movs	r0, #17
 8000fca:	f7ff fd2d 	bl	8000a28 <writeReg>

  writeReg(0x24, 0x01);
 8000fce:	2101      	movs	r1, #1
 8000fd0:	2024      	movs	r0, #36	@ 0x24
 8000fd2:	f7ff fd29 	bl	8000a28 <writeReg>
  writeReg(0x25, 0xFF);
 8000fd6:	21ff      	movs	r1, #255	@ 0xff
 8000fd8:	2025      	movs	r0, #37	@ 0x25
 8000fda:	f7ff fd25 	bl	8000a28 <writeReg>
  writeReg(0x75, 0x00);
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2075      	movs	r0, #117	@ 0x75
 8000fe2:	f7ff fd21 	bl	8000a28 <writeReg>

  writeReg(0xFF, 0x01);
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	20ff      	movs	r0, #255	@ 0xff
 8000fea:	f7ff fd1d 	bl	8000a28 <writeReg>
  writeReg(0x4E, 0x2C);
 8000fee:	212c      	movs	r1, #44	@ 0x2c
 8000ff0:	204e      	movs	r0, #78	@ 0x4e
 8000ff2:	f7ff fd19 	bl	8000a28 <writeReg>
  writeReg(0x48, 0x00);
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2048      	movs	r0, #72	@ 0x48
 8000ffa:	f7ff fd15 	bl	8000a28 <writeReg>
  writeReg(0x30, 0x20);
 8000ffe:	2120      	movs	r1, #32
 8001000:	2030      	movs	r0, #48	@ 0x30
 8001002:	f7ff fd11 	bl	8000a28 <writeReg>

  writeReg(0xFF, 0x00);
 8001006:	2100      	movs	r1, #0
 8001008:	20ff      	movs	r0, #255	@ 0xff
 800100a:	f7ff fd0d 	bl	8000a28 <writeReg>
  writeReg(0x30, 0x09);
 800100e:	2109      	movs	r1, #9
 8001010:	2030      	movs	r0, #48	@ 0x30
 8001012:	f7ff fd09 	bl	8000a28 <writeReg>
  writeReg(0x54, 0x00);
 8001016:	2100      	movs	r1, #0
 8001018:	2054      	movs	r0, #84	@ 0x54
 800101a:	f7ff fd05 	bl	8000a28 <writeReg>
  writeReg(0x31, 0x04);
 800101e:	2104      	movs	r1, #4
 8001020:	2031      	movs	r0, #49	@ 0x31
 8001022:	f7ff fd01 	bl	8000a28 <writeReg>
  writeReg(0x32, 0x03);
 8001026:	2103      	movs	r1, #3
 8001028:	2032      	movs	r0, #50	@ 0x32
 800102a:	f7ff fcfd 	bl	8000a28 <writeReg>
  writeReg(0x40, 0x83);
 800102e:	2183      	movs	r1, #131	@ 0x83
 8001030:	2040      	movs	r0, #64	@ 0x40
 8001032:	f7ff fcf9 	bl	8000a28 <writeReg>
  writeReg(0x46, 0x25);
 8001036:	2125      	movs	r1, #37	@ 0x25
 8001038:	2046      	movs	r0, #70	@ 0x46
 800103a:	f7ff fcf5 	bl	8000a28 <writeReg>
  writeReg(0x60, 0x00);
 800103e:	2100      	movs	r1, #0
 8001040:	2060      	movs	r0, #96	@ 0x60
 8001042:	f7ff fcf1 	bl	8000a28 <writeReg>
  writeReg(0x27, 0x00);
 8001046:	2100      	movs	r1, #0
 8001048:	2027      	movs	r0, #39	@ 0x27
 800104a:	f7ff fced 	bl	8000a28 <writeReg>
  writeReg(0x50, 0x06);
 800104e:	2106      	movs	r1, #6
 8001050:	2050      	movs	r0, #80	@ 0x50
 8001052:	f7ff fce9 	bl	8000a28 <writeReg>
  writeReg(0x51, 0x00);
 8001056:	2100      	movs	r1, #0
 8001058:	2051      	movs	r0, #81	@ 0x51
 800105a:	f7ff fce5 	bl	8000a28 <writeReg>
  writeReg(0x52, 0x96);
 800105e:	2196      	movs	r1, #150	@ 0x96
 8001060:	2052      	movs	r0, #82	@ 0x52
 8001062:	f7ff fce1 	bl	8000a28 <writeReg>
  writeReg(0x56, 0x08);
 8001066:	2108      	movs	r1, #8
 8001068:	2056      	movs	r0, #86	@ 0x56
 800106a:	f7ff fcdd 	bl	8000a28 <writeReg>
  writeReg(0x57, 0x30);
 800106e:	2130      	movs	r1, #48	@ 0x30
 8001070:	2057      	movs	r0, #87	@ 0x57
 8001072:	f7ff fcd9 	bl	8000a28 <writeReg>
  writeReg(0x61, 0x00);
 8001076:	2100      	movs	r1, #0
 8001078:	2061      	movs	r0, #97	@ 0x61
 800107a:	f7ff fcd5 	bl	8000a28 <writeReg>
  writeReg(0x62, 0x00);
 800107e:	2100      	movs	r1, #0
 8001080:	2062      	movs	r0, #98	@ 0x62
 8001082:	f7ff fcd1 	bl	8000a28 <writeReg>
  writeReg(0x64, 0x00);
 8001086:	2100      	movs	r1, #0
 8001088:	2064      	movs	r0, #100	@ 0x64
 800108a:	f7ff fccd 	bl	8000a28 <writeReg>
  writeReg(0x65, 0x00);
 800108e:	2100      	movs	r1, #0
 8001090:	2065      	movs	r0, #101	@ 0x65
 8001092:	f7ff fcc9 	bl	8000a28 <writeReg>
  writeReg(0x66, 0xA0);
 8001096:	21a0      	movs	r1, #160	@ 0xa0
 8001098:	2066      	movs	r0, #102	@ 0x66
 800109a:	f7ff fcc5 	bl	8000a28 <writeReg>

  writeReg(0xFF, 0x01);
 800109e:	2101      	movs	r1, #1
 80010a0:	20ff      	movs	r0, #255	@ 0xff
 80010a2:	f7ff fcc1 	bl	8000a28 <writeReg>
  writeReg(0x22, 0x32);
 80010a6:	2132      	movs	r1, #50	@ 0x32
 80010a8:	2022      	movs	r0, #34	@ 0x22
 80010aa:	f7ff fcbd 	bl	8000a28 <writeReg>
  writeReg(0x47, 0x14);
 80010ae:	2114      	movs	r1, #20
 80010b0:	2047      	movs	r0, #71	@ 0x47
 80010b2:	f7ff fcb9 	bl	8000a28 <writeReg>
  writeReg(0x49, 0xFF);
 80010b6:	21ff      	movs	r1, #255	@ 0xff
 80010b8:	2049      	movs	r0, #73	@ 0x49
 80010ba:	f7ff fcb5 	bl	8000a28 <writeReg>
  writeReg(0x4A, 0x00);
 80010be:	2100      	movs	r1, #0
 80010c0:	204a      	movs	r0, #74	@ 0x4a
 80010c2:	f7ff fcb1 	bl	8000a28 <writeReg>

  writeReg(0xFF, 0x00);
 80010c6:	2100      	movs	r1, #0
 80010c8:	20ff      	movs	r0, #255	@ 0xff
 80010ca:	f7ff fcad 	bl	8000a28 <writeReg>
  writeReg(0x7A, 0x0A);
 80010ce:	210a      	movs	r1, #10
 80010d0:	207a      	movs	r0, #122	@ 0x7a
 80010d2:	f7ff fca9 	bl	8000a28 <writeReg>
  writeReg(0x7B, 0x00);
 80010d6:	2100      	movs	r1, #0
 80010d8:	207b      	movs	r0, #123	@ 0x7b
 80010da:	f7ff fca5 	bl	8000a28 <writeReg>
  writeReg(0x78, 0x21);
 80010de:	2121      	movs	r1, #33	@ 0x21
 80010e0:	2078      	movs	r0, #120	@ 0x78
 80010e2:	f7ff fca1 	bl	8000a28 <writeReg>

  writeReg(0xFF, 0x01);
 80010e6:	2101      	movs	r1, #1
 80010e8:	20ff      	movs	r0, #255	@ 0xff
 80010ea:	f7ff fc9d 	bl	8000a28 <writeReg>
  writeReg(0x23, 0x34);
 80010ee:	2134      	movs	r1, #52	@ 0x34
 80010f0:	2023      	movs	r0, #35	@ 0x23
 80010f2:	f7ff fc99 	bl	8000a28 <writeReg>
  writeReg(0x42, 0x00);
 80010f6:	2100      	movs	r1, #0
 80010f8:	2042      	movs	r0, #66	@ 0x42
 80010fa:	f7ff fc95 	bl	8000a28 <writeReg>
  writeReg(0x44, 0xFF);
 80010fe:	21ff      	movs	r1, #255	@ 0xff
 8001100:	2044      	movs	r0, #68	@ 0x44
 8001102:	f7ff fc91 	bl	8000a28 <writeReg>
  writeReg(0x45, 0x26);
 8001106:	2126      	movs	r1, #38	@ 0x26
 8001108:	2045      	movs	r0, #69	@ 0x45
 800110a:	f7ff fc8d 	bl	8000a28 <writeReg>
  writeReg(0x46, 0x05);
 800110e:	2105      	movs	r1, #5
 8001110:	2046      	movs	r0, #70	@ 0x46
 8001112:	f7ff fc89 	bl	8000a28 <writeReg>
  writeReg(0x40, 0x40);
 8001116:	2140      	movs	r1, #64	@ 0x40
 8001118:	2040      	movs	r0, #64	@ 0x40
 800111a:	f7ff fc85 	bl	8000a28 <writeReg>
  writeReg(0x0E, 0x06);
 800111e:	2106      	movs	r1, #6
 8001120:	200e      	movs	r0, #14
 8001122:	f7ff fc81 	bl	8000a28 <writeReg>
  writeReg(0x20, 0x1A);
 8001126:	211a      	movs	r1, #26
 8001128:	2020      	movs	r0, #32
 800112a:	f7ff fc7d 	bl	8000a28 <writeReg>
  writeReg(0x43, 0x40);
 800112e:	2140      	movs	r1, #64	@ 0x40
 8001130:	2043      	movs	r0, #67	@ 0x43
 8001132:	f7ff fc79 	bl	8000a28 <writeReg>

  writeReg(0xFF, 0x00);
 8001136:	2100      	movs	r1, #0
 8001138:	20ff      	movs	r0, #255	@ 0xff
 800113a:	f7ff fc75 	bl	8000a28 <writeReg>
  writeReg(0x34, 0x03);
 800113e:	2103      	movs	r1, #3
 8001140:	2034      	movs	r0, #52	@ 0x34
 8001142:	f7ff fc71 	bl	8000a28 <writeReg>
  writeReg(0x35, 0x44);
 8001146:	2144      	movs	r1, #68	@ 0x44
 8001148:	2035      	movs	r0, #53	@ 0x35
 800114a:	f7ff fc6d 	bl	8000a28 <writeReg>

  writeReg(0xFF, 0x01);
 800114e:	2101      	movs	r1, #1
 8001150:	20ff      	movs	r0, #255	@ 0xff
 8001152:	f7ff fc69 	bl	8000a28 <writeReg>
  writeReg(0x31, 0x04);
 8001156:	2104      	movs	r1, #4
 8001158:	2031      	movs	r0, #49	@ 0x31
 800115a:	f7ff fc65 	bl	8000a28 <writeReg>
  writeReg(0x4B, 0x09);
 800115e:	2109      	movs	r1, #9
 8001160:	204b      	movs	r0, #75	@ 0x4b
 8001162:	f7ff fc61 	bl	8000a28 <writeReg>
  writeReg(0x4C, 0x05);
 8001166:	2105      	movs	r1, #5
 8001168:	204c      	movs	r0, #76	@ 0x4c
 800116a:	f7ff fc5d 	bl	8000a28 <writeReg>
  writeReg(0x4D, 0x04);
 800116e:	2104      	movs	r1, #4
 8001170:	204d      	movs	r0, #77	@ 0x4d
 8001172:	f7ff fc59 	bl	8000a28 <writeReg>

  writeReg(0xFF, 0x00);
 8001176:	2100      	movs	r1, #0
 8001178:	20ff      	movs	r0, #255	@ 0xff
 800117a:	f7ff fc55 	bl	8000a28 <writeReg>
  writeReg(0x44, 0x00);
 800117e:	2100      	movs	r1, #0
 8001180:	2044      	movs	r0, #68	@ 0x44
 8001182:	f7ff fc51 	bl	8000a28 <writeReg>
  writeReg(0x45, 0x20);
 8001186:	2120      	movs	r1, #32
 8001188:	2045      	movs	r0, #69	@ 0x45
 800118a:	f7ff fc4d 	bl	8000a28 <writeReg>
  writeReg(0x47, 0x08);
 800118e:	2108      	movs	r1, #8
 8001190:	2047      	movs	r0, #71	@ 0x47
 8001192:	f7ff fc49 	bl	8000a28 <writeReg>
  writeReg(0x48, 0x28);
 8001196:	2128      	movs	r1, #40	@ 0x28
 8001198:	2048      	movs	r0, #72	@ 0x48
 800119a:	f7ff fc45 	bl	8000a28 <writeReg>
  writeReg(0x67, 0x00);
 800119e:	2100      	movs	r1, #0
 80011a0:	2067      	movs	r0, #103	@ 0x67
 80011a2:	f7ff fc41 	bl	8000a28 <writeReg>
  writeReg(0x70, 0x04);
 80011a6:	2104      	movs	r1, #4
 80011a8:	2070      	movs	r0, #112	@ 0x70
 80011aa:	f7ff fc3d 	bl	8000a28 <writeReg>
  writeReg(0x71, 0x01);
 80011ae:	2101      	movs	r1, #1
 80011b0:	2071      	movs	r0, #113	@ 0x71
 80011b2:	f7ff fc39 	bl	8000a28 <writeReg>
  writeReg(0x72, 0xFE);
 80011b6:	21fe      	movs	r1, #254	@ 0xfe
 80011b8:	2072      	movs	r0, #114	@ 0x72
 80011ba:	f7ff fc35 	bl	8000a28 <writeReg>
  writeReg(0x76, 0x00);
 80011be:	2100      	movs	r1, #0
 80011c0:	2076      	movs	r0, #118	@ 0x76
 80011c2:	f7ff fc31 	bl	8000a28 <writeReg>
  writeReg(0x77, 0x00);
 80011c6:	2100      	movs	r1, #0
 80011c8:	2077      	movs	r0, #119	@ 0x77
 80011ca:	f7ff fc2d 	bl	8000a28 <writeReg>

  writeReg(0xFF, 0x01);
 80011ce:	2101      	movs	r1, #1
 80011d0:	20ff      	movs	r0, #255	@ 0xff
 80011d2:	f7ff fc29 	bl	8000a28 <writeReg>
  writeReg(0x0D, 0x01);
 80011d6:	2101      	movs	r1, #1
 80011d8:	200d      	movs	r0, #13
 80011da:	f7ff fc25 	bl	8000a28 <writeReg>

  writeReg(0xFF, 0x00);
 80011de:	2100      	movs	r1, #0
 80011e0:	20ff      	movs	r0, #255	@ 0xff
 80011e2:	f7ff fc21 	bl	8000a28 <writeReg>
  writeReg(0x80, 0x01);
 80011e6:	2101      	movs	r1, #1
 80011e8:	2080      	movs	r0, #128	@ 0x80
 80011ea:	f7ff fc1d 	bl	8000a28 <writeReg>
  writeReg(0x01, 0xF8);
 80011ee:	21f8      	movs	r1, #248	@ 0xf8
 80011f0:	2001      	movs	r0, #1
 80011f2:	f7ff fc19 	bl	8000a28 <writeReg>

  writeReg(0xFF, 0x01);
 80011f6:	2101      	movs	r1, #1
 80011f8:	20ff      	movs	r0, #255	@ 0xff
 80011fa:	f7ff fc15 	bl	8000a28 <writeReg>
  writeReg(0x8E, 0x01);
 80011fe:	2101      	movs	r1, #1
 8001200:	208e      	movs	r0, #142	@ 0x8e
 8001202:	f7ff fc11 	bl	8000a28 <writeReg>
  writeReg(0x00, 0x01);
 8001206:	2101      	movs	r1, #1
 8001208:	2000      	movs	r0, #0
 800120a:	f7ff fc0d 	bl	8000a28 <writeReg>
  writeReg(0xFF, 0x00);
 800120e:	2100      	movs	r1, #0
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	f7ff fc09 	bl	8000a28 <writeReg>
  writeReg(0x80, 0x00);
 8001216:	2100      	movs	r1, #0
 8001218:	2080      	movs	r0, #128	@ 0x80
 800121a:	f7ff fc05 	bl	8000a28 <writeReg>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 800121e:	2104      	movs	r1, #4
 8001220:	200a      	movs	r0, #10
 8001222:	f7ff fc01 	bl	8000a28 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 8001226:	2084      	movs	r0, #132	@ 0x84
 8001228:	f7ff fc52 	bl	8000ad0 <readReg>
 800122c:	4603      	mov	r3, r0
 800122e:	f023 0310 	bic.w	r3, r3, #16
 8001232:	b2db      	uxtb	r3, r3
 8001234:	4619      	mov	r1, r3
 8001236:	2084      	movs	r0, #132	@ 0x84
 8001238:	f7ff fbf6 	bl	8000a28 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 800123c:	2101      	movs	r1, #1
 800123e:	200b      	movs	r0, #11
 8001240:	f7ff fbf2 	bl	8000a28 <writeReg>

  // -- VL53L0X_SetGpioConfig() end

  g_measTimBudUs = getMeasurementTimingBudget();
 8001244:	f000 f936 	bl	80014b4 <getMeasurementTimingBudget>
 8001248:	4603      	mov	r3, r0
 800124a:	4a16      	ldr	r2, [pc, #88]	@ (80012a4 <initVL53L0X+0x4b8>)
 800124c:	6013      	str	r3, [r2, #0]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 800124e:	21e8      	movs	r1, #232	@ 0xe8
 8001250:	2001      	movs	r0, #1
 8001252:	f7ff fbe9 	bl	8000a28 <writeReg>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(g_measTimBudUs);
 8001256:	4b13      	ldr	r3, [pc, #76]	@ (80012a4 <initVL53L0X+0x4b8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f892 	bl	8001384 <setMeasurementTimingBudget>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 8001260:	2101      	movs	r1, #1
 8001262:	2001      	movs	r0, #1
 8001264:	f7ff fbe0 	bl	8000a28 <writeReg>
  if (!performSingleRefCalibration(0x40)) { return false; }
 8001268:	2040      	movs	r0, #64	@ 0x40
 800126a:	f000 ff99 	bl	80021a0 <performSingleRefCalibration>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d101      	bne.n	8001278 <initVL53L0X+0x48c>
 8001274:	2300      	movs	r3, #0
 8001276:	e010      	b.n	800129a <initVL53L0X+0x4ae>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8001278:	2102      	movs	r1, #2
 800127a:	2001      	movs	r0, #1
 800127c:	f7ff fbd4 	bl	8000a28 <writeReg>
  if (!performSingleRefCalibration(0x00)) { return false; }
 8001280:	2000      	movs	r0, #0
 8001282:	f000 ff8d 	bl	80021a0 <performSingleRefCalibration>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d101      	bne.n	8001290 <initVL53L0X+0x4a4>
 800128c:	2300      	movs	r3, #0
 800128e:	e004      	b.n	800129a <initVL53L0X+0x4ae>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8001290:	21e8      	movs	r1, #232	@ 0xe8
 8001292:	2001      	movs	r0, #1
 8001294:	f7ff fbc8 	bl	8000a28 <writeReg>

  // VL53L0X_PerformRefCalibration() end

  return true;
 8001298:	2301      	movs	r3, #1
}
 800129a:	4618      	mov	r0, r3
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000088 	.word	0x20000088

080012a8 <setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool setSignalRateLimit(float limit_Mcps)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	ed87 0a01 	vstr	s0, [r7, #4]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80012b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012be:	d40a      	bmi.n	80012d6 <setSignalRateLimit+0x2e>
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff f959 	bl	8000578 <__aeabi_f2d>
 80012c6:	a311      	add	r3, pc, #68	@ (adr r3, 800130c <setSignalRateLimit+0x64>)
 80012c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012cc:	f7ff fa2a 	bl	8000724 <__aeabi_dcmpgt>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <setSignalRateLimit+0x32>
 80012d6:	2300      	movs	r3, #0
 80012d8:	e00f      	b.n	80012fa <setSignalRateLimit+0x52>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 80012da:	edd7 7a01 	vldr	s15, [r7, #4]
 80012de:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001308 <setSignalRateLimit+0x60>
 80012e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012ea:	ee17 3a90 	vmov	r3, s15
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	4619      	mov	r1, r3
 80012f2:	2044      	movs	r0, #68	@ 0x44
 80012f4:	f7ff fbc2 	bl	8000a7c <writeReg16Bit>
  return true;
 80012f8:	2301      	movs	r3, #1
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	f3af 8000 	nop.w
 8001308:	43000000 	.word	0x43000000
 800130c:	0a3d70a4 	.word	0x0a3d70a4
 8001310:	407fffd7 	.word	0x407fffd7
 8001314:	00000000 	.word	0x00000000

08001318 <setSignalRateLimit_x>:

bool setSignalRateLimit_x(float limit_Mcps, statInfo_t_VL53L0X *sensorInfo)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001322:	6038      	str	r0, [r7, #0]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 8001324:	edd7 7a01 	vldr	s15, [r7, #4]
 8001328:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800132c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001330:	d40a      	bmi.n	8001348 <setSignalRateLimit_x+0x30>
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff f920 	bl	8000578 <__aeabi_f2d>
 8001338:	a310      	add	r3, pc, #64	@ (adr r3, 800137c <setSignalRateLimit_x+0x64>)
 800133a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133e:	f7ff f9f1 	bl	8000724 <__aeabi_dcmpgt>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <setSignalRateLimit_x+0x34>
 8001348:	2300      	movs	r3, #0
 800134a:	e011      	b.n	8001370 <setSignalRateLimit_x+0x58>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit_x(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7), sensorInfo->address);
 800134c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001350:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001378 <setSignalRateLimit_x+0x60>
 8001354:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800135c:	ee17 3a90 	vmov	r3, s15
 8001360:	b299      	uxth	r1, r3
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	7a5b      	ldrb	r3, [r3, #9]
 8001366:	461a      	mov	r2, r3
 8001368:	2044      	movs	r0, #68	@ 0x44
 800136a:	f7ff fc89 	bl	8000c80 <writeReg16Bit_x>
  return true;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	43000000 	.word	0x43000000
 800137c:	0a3d70a4 	.word	0x0a3d70a4
 8001380:	407fffd7 	.word	0x407fffd7

08001384 <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool setMeasurementTimingBudget(uint32_t budget_us)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b092      	sub	sp, #72	@ 0x48
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 800138c:	f44f 63a5 	mov.w	r3, #1320	@ 0x528
 8001390:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  uint16_t const EndOverhead        = 960;
 8001394:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001398:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t const MsrcOverhead       = 660;
 800139a:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800139e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  uint16_t const TccOverhead        = 590;
 80013a0:	f240 234e 	movw	r3, #590	@ 0x24e
 80013a4:	877b      	strh	r3, [r7, #58]	@ 0x3a
  uint16_t const DssOverhead        = 690;
 80013a6:	f240 23b2 	movw	r3, #690	@ 0x2b2
 80013aa:	873b      	strh	r3, [r7, #56]	@ 0x38
  uint16_t const PreRangeOverhead   = 660;
 80013ac:	f44f 7325 	mov.w	r3, #660	@ 0x294
 80013b0:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint16_t const FinalRangeOverhead = 550;
 80013b2:	f240 2326 	movw	r3, #550	@ 0x226
 80013b6:	86bb      	strh	r3, [r7, #52]	@ 0x34

  uint32_t const MinTimingBudget = 20000;
 80013b8:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80013bc:	633b      	str	r3, [r7, #48]	@ 0x30

  if (budget_us < MinTimingBudget) { return false; }
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d201      	bcs.n	80013ca <setMeasurementTimingBudget+0x46>
 80013c6:	2300      	movs	r3, #0
 80013c8:	e06e      	b.n	80014a8 <setMeasurementTimingBudget+0x124>

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 80013ca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80013ce:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80013d0:	4413      	add	r3, r2
 80013d2:	647b      	str	r3, [r7, #68]	@ 0x44

  getSequenceStepEnables(&enables);
 80013d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 fdbd 	bl	8001f58 <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 80013de:	f107 020c 	add.w	r2, r7, #12
 80013e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e6:	4611      	mov	r1, r2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fde7 	bl	8001fbc <getSequenceStepTimeouts>

  if (enables.tcc)
 80013ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d005      	beq.n	8001402 <setMeasurementTimingBudget+0x7e>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80013fa:	4413      	add	r3, r2
 80013fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80013fe:	4413      	add	r3, r2
 8001400:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.dss)
 8001402:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001406:	2b00      	cmp	r3, #0
 8001408:	d007      	beq.n	800141a <setMeasurementTimingBudget+0x96>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800140e:	4413      	add	r3, r2
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001414:	4413      	add	r3, r2
 8001416:	647b      	str	r3, [r7, #68]	@ 0x44
 8001418:	e009      	b.n	800142e <setMeasurementTimingBudget+0xaa>
  }
  else if (enables.msrc)
 800141a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800141e:	2b00      	cmp	r3, #0
 8001420:	d005      	beq.n	800142e <setMeasurementTimingBudget+0xaa>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001426:	4413      	add	r3, r2
 8001428:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800142a:	4413      	add	r3, r2
 800142c:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.pre_range)
 800142e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001432:	2b00      	cmp	r3, #0
 8001434:	d005      	beq.n	8001442 <setMeasurementTimingBudget+0xbe>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8001436:	69fa      	ldr	r2, [r7, #28]
 8001438:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800143a:	4413      	add	r3, r2
 800143c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800143e:	4413      	add	r3, r2
 8001440:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.final_range)
 8001442:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001446:	2b00      	cmp	r3, #0
 8001448:	d02d      	beq.n	80014a6 <setMeasurementTimingBudget+0x122>
  {
    used_budget_us += FinalRangeOverhead;
 800144a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800144c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800144e:	4413      	add	r3, r2
 8001450:	647b      	str	r3, [r7, #68]	@ 0x44
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 8001452:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	429a      	cmp	r2, r3
 8001458:	d901      	bls.n	800145e <setMeasurementTimingBudget+0xda>
    {
      // "Requested timeout too big."
      return false;
 800145a:	2300      	movs	r3, #0
 800145c:	e024      	b.n	80014a8 <setMeasurementTimingBudget+0x124>
    }

    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	62fb      	str	r3, [r7, #44]	@ 0x2c
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 8001466:	89fb      	ldrh	r3, [r7, #14]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 8001468:	b2db      	uxtb	r3, r3
 800146a:	4619      	mov	r1, r3
 800146c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800146e:	f000 fe71 	bl	8002154 <timeoutMicrosecondsToMclks>
 8001472:	4603      	mov	r3, r0
    uint16_t final_range_timeout_mclks =
 8001474:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

    if (enables.pre_range)
 8001478:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800147c:	2b00      	cmp	r3, #0
 800147e:	d005      	beq.n	800148c <setMeasurementTimingBudget+0x108>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 8001480:	8a7a      	ldrh	r2, [r7, #18]
 8001482:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001486:	4413      	add	r3, r2
 8001488:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 800148c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001490:	4618      	mov	r0, r3
 8001492:	f000 fe0c 	bl	80020ae <encodeTimeout>
 8001496:	4603      	mov	r3, r0
 8001498:	4619      	mov	r1, r3
 800149a:	2071      	movs	r0, #113	@ 0x71
 800149c:	f7ff faee 	bl	8000a7c <writeReg16Bit>
      encodeTimeout(final_range_timeout_mclks));

    // set_sequence_step_timeout() end

    g_measTimBudUs = budget_us; // store for internal reuse
 80014a0:	4a03      	ldr	r2, [pc, #12]	@ (80014b0 <setMeasurementTimingBudget+0x12c>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6013      	str	r3, [r2, #0]
  }
  return true;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3748      	adds	r7, #72	@ 0x48
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000088 	.word	0x20000088

080014b4 <getMeasurementTimingBudget>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t getMeasurementTimingBudget(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08c      	sub	sp, #48	@ 0x30
 80014b8:	af00      	add	r7, sp, #0
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 80014ba:	f240 7376 	movw	r3, #1910	@ 0x776
 80014be:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t const EndOverhead        = 960;
 80014c0:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80014c4:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint16_t const MsrcOverhead       = 660;
 80014c6:	f44f 7325 	mov.w	r3, #660	@ 0x294
 80014ca:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const TccOverhead        = 590;
 80014cc:	f240 234e 	movw	r3, #590	@ 0x24e
 80014d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  uint16_t const DssOverhead        = 690;
 80014d2:	f240 23b2 	movw	r3, #690	@ 0x2b2
 80014d6:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t const PreRangeOverhead   = 660;
 80014d8:	f44f 7325 	mov.w	r3, #660	@ 0x294
 80014dc:	843b      	strh	r3, [r7, #32]
  uint16_t const FinalRangeOverhead = 550;
 80014de:	f240 2326 	movw	r3, #550	@ 0x226
 80014e2:	83fb      	strh	r3, [r7, #30]

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 80014e4:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80014e6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80014e8:	4413      	add	r3, r2
 80014ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  getSequenceStepEnables(&enables);
 80014ec:	f107 0318 	add.w	r3, r7, #24
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 fd31 	bl	8001f58 <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 80014f6:	463a      	mov	r2, r7
 80014f8:	f107 0318 	add.w	r3, r7, #24
 80014fc:	4611      	mov	r1, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 fd5c 	bl	8001fbc <getSequenceStepTimeouts>

  if (enables.tcc)
 8001504:	7e3b      	ldrb	r3, [r7, #24]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d005      	beq.n	8001516 <getMeasurementTimingBudget+0x62>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800150e:	4413      	add	r3, r2
 8001510:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001512:	4413      	add	r3, r2
 8001514:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  if (enables.dss)
 8001516:	7ebb      	ldrb	r3, [r7, #26]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d007      	beq.n	800152c <getMeasurementTimingBudget+0x78>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001520:	4413      	add	r3, r2
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001526:	4413      	add	r3, r2
 8001528:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800152a:	e008      	b.n	800153e <getMeasurementTimingBudget+0x8a>
  }
  else if (enables.msrc)
 800152c:	7e7b      	ldrb	r3, [r7, #25]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d005      	beq.n	800153e <getMeasurementTimingBudget+0x8a>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001536:	4413      	add	r3, r2
 8001538:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800153a:	4413      	add	r3, r2
 800153c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  if (enables.pre_range)
 800153e:	7efb      	ldrb	r3, [r7, #27]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d005      	beq.n	8001550 <getMeasurementTimingBudget+0x9c>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	8c3b      	ldrh	r3, [r7, #32]
 8001548:	4413      	add	r3, r2
 800154a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800154c:	4413      	add	r3, r2
 800154e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  if (enables.final_range)
 8001550:	7f3b      	ldrb	r3, [r7, #28]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d005      	beq.n	8001562 <getMeasurementTimingBudget+0xae>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	8bfb      	ldrh	r3, [r7, #30]
 800155a:	4413      	add	r3, r2
 800155c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800155e:	4413      	add	r3, r2
 8001560:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  g_measTimBudUs = budget_us; // store for internal reuse
 8001562:	4a04      	ldr	r2, [pc, #16]	@ (8001574 <getMeasurementTimingBudget+0xc0>)
 8001564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001566:	6013      	str	r3, [r2, #0]
  return budget_us;
 8001568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800156a:	4618      	mov	r0, r3
 800156c:	3730      	adds	r7, #48	@ 0x30
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000088 	.word	0x20000088

08001578 <getVcselPulsePeriod>:
}

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t getVcselPulsePeriod(vcselPeriodType type)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
  if (type == VcselPeriodPreRange)
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d108      	bne.n	800159a <getVcselPulsePeriod+0x22>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 8001588:	2050      	movs	r0, #80	@ 0x50
 800158a:	f7ff faa1 	bl	8000ad0 <readReg>
 800158e:	4603      	mov	r3, r0
 8001590:	3301      	adds	r3, #1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	b2db      	uxtb	r3, r3
 8001598:	e00c      	b.n	80015b4 <getVcselPulsePeriod+0x3c>
  }
  else if (type == VcselPeriodFinalRange)
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d108      	bne.n	80015b2 <getVcselPulsePeriod+0x3a>
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80015a0:	2070      	movs	r0, #112	@ 0x70
 80015a2:	f7ff fa95 	bl	8000ad0 <readReg>
 80015a6:	4603      	mov	r3, r0
 80015a8:	3301      	adds	r3, #1
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	e000      	b.n	80015b4 <getVcselPulsePeriod+0x3c>
  }
  else { return 255; }
 80015b2:	23ff      	movs	r3, #255	@ 0xff
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <setMeasurementTimingBudget_x>:

bool setMeasurementTimingBudget_x(uint32_t budget_us, statInfo_t_VL53L0X *sensorInfo)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b092      	sub	sp, #72	@ 0x48
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 80015c6:	f44f 63a5 	mov.w	r3, #1320	@ 0x528
 80015ca:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  uint16_t const EndOverhead        = 960;
 80015ce:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80015d2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t const MsrcOverhead       = 660;
 80015d4:	f44f 7325 	mov.w	r3, #660	@ 0x294
 80015d8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  uint16_t const TccOverhead        = 590;
 80015da:	f240 234e 	movw	r3, #590	@ 0x24e
 80015de:	877b      	strh	r3, [r7, #58]	@ 0x3a
  uint16_t const DssOverhead        = 690;
 80015e0:	f240 23b2 	movw	r3, #690	@ 0x2b2
 80015e4:	873b      	strh	r3, [r7, #56]	@ 0x38
  uint16_t const PreRangeOverhead   = 660;
 80015e6:	f44f 7325 	mov.w	r3, #660	@ 0x294
 80015ea:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint16_t const FinalRangeOverhead = 550;
 80015ec:	f240 2326 	movw	r3, #550	@ 0x226
 80015f0:	86bb      	strh	r3, [r7, #52]	@ 0x34

  uint32_t const MinTimingBudget = 20000;
 80015f2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80015f6:	633b      	str	r3, [r7, #48]	@ 0x30

  if (budget_us < MinTimingBudget) { return false; }
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d201      	bcs.n	8001604 <setMeasurementTimingBudget_x+0x48>
 8001600:	2300      	movs	r3, #0
 8001602:	e077      	b.n	80016f4 <setMeasurementTimingBudget_x+0x138>

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 8001604:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8001608:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800160a:	4413      	add	r3, r2
 800160c:	647b      	str	r3, [r7, #68]	@ 0x44

  getSequenceStepEnables_x(&enables,  sensorInfo->address);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	7a5b      	ldrb	r3, [r3, #9]
 8001612:	461a      	mov	r2, r3
 8001614:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001618:	4611      	mov	r1, r2
 800161a:	4618      	mov	r0, r3
 800161c:	f000 f870 	bl	8001700 <getSequenceStepEnables_x>
  getSequenceStepTimeouts_x(&enables, &timeouts,  sensorInfo->address);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	7a5b      	ldrb	r3, [r3, #9]
 8001624:	461a      	mov	r2, r3
 8001626:	f107 010c 	add.w	r1, r7, #12
 800162a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800162e:	4618      	mov	r0, r3
 8001630:	f000 f89c 	bl	800176c <getSequenceStepTimeouts_x>

  if (enables.tcc)
 8001634:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001638:	2b00      	cmp	r3, #0
 800163a:	d005      	beq.n	8001648 <setMeasurementTimingBudget_x+0x8c>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001640:	4413      	add	r3, r2
 8001642:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001644:	4413      	add	r3, r2
 8001646:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.dss)
 8001648:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800164c:	2b00      	cmp	r3, #0
 800164e:	d007      	beq.n	8001660 <setMeasurementTimingBudget_x+0xa4>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001654:	4413      	add	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800165a:	4413      	add	r3, r2
 800165c:	647b      	str	r3, [r7, #68]	@ 0x44
 800165e:	e009      	b.n	8001674 <setMeasurementTimingBudget_x+0xb8>
  }
  else if (enables.msrc)
 8001660:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <setMeasurementTimingBudget_x+0xb8>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800166c:	4413      	add	r3, r2
 800166e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001670:	4413      	add	r3, r2
 8001672:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.pre_range)
 8001674:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <setMeasurementTimingBudget_x+0xcc>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 800167c:	69fa      	ldr	r2, [r7, #28]
 800167e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001680:	4413      	add	r3, r2
 8001682:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001684:	4413      	add	r3, r2
 8001686:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.final_range)
 8001688:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800168c:	2b00      	cmp	r3, #0
 800168e:	d030      	beq.n	80016f2 <setMeasurementTimingBudget_x+0x136>
  {
    used_budget_us += FinalRangeOverhead;
 8001690:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001692:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001694:	4413      	add	r3, r2
 8001696:	647b      	str	r3, [r7, #68]	@ 0x44
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 8001698:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	429a      	cmp	r2, r3
 800169e:	d901      	bls.n	80016a4 <setMeasurementTimingBudget_x+0xe8>
    {
      // "Requested timeout too big."
      return false;
 80016a0:	2300      	movs	r3, #0
 80016a2:	e027      	b.n	80016f4 <setMeasurementTimingBudget_x+0x138>
    }

    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 80016ac:	89fb      	ldrh	r3, [r7, #14]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	4619      	mov	r1, r3
 80016b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80016b4:	f000 fd4e 	bl	8002154 <timeoutMicrosecondsToMclks>
 80016b8:	4603      	mov	r3, r0
    uint16_t final_range_timeout_mclks =
 80016ba:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

    if (enables.pre_range)
 80016be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d005      	beq.n	80016d2 <setMeasurementTimingBudget_x+0x116>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 80016c6:	8a7a      	ldrh	r2, [r7, #18]
 80016c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80016cc:	4413      	add	r3, r2
 80016ce:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    }

    writeReg16Bit_x(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80016d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 fce9 	bl	80020ae <encodeTimeout>
 80016dc:	4603      	mov	r3, r0
 80016de:	4619      	mov	r1, r3
      encodeTimeout(final_range_timeout_mclks), sensorInfo->address);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	7a5b      	ldrb	r3, [r3, #9]
    writeReg16Bit_x(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80016e4:	461a      	mov	r2, r3
 80016e6:	2071      	movs	r0, #113	@ 0x71
 80016e8:	f7ff faca 	bl	8000c80 <writeReg16Bit_x>

    // set_sequence_step_timeout() end

    g_measTimBudUs = budget_us; // store for internal reuse
 80016ec:	4a03      	ldr	r2, [pc, #12]	@ (80016fc <setMeasurementTimingBudget_x+0x140>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6013      	str	r3, [r2, #0]
  }
  return true;
 80016f2:	2301      	movs	r3, #1
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3748      	adds	r7, #72	@ 0x48
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000088 	.word	0x20000088

08001700 <getSequenceStepEnables_x>:
void getSequenceStepEnables_x(SequenceStepEnables * enables, statInfo_t_VL53L0X *sensorInfo)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint8_t sequence_config = readReg_x(SYSTEM_SEQUENCE_CONFIG, sensorInfo->address);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	7a5b      	ldrb	r3, [r3, #9]
 800170e:	4619      	mov	r1, r3
 8001710:	2001      	movs	r0, #1
 8001712:	f7ff fadd 	bl	8000cd0 <readReg_x>
 8001716:	4603      	mov	r3, r0
 8001718:	73fb      	strb	r3, [r7, #15]

  enables->tcc          = (sequence_config >> 4) & 0x1;
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	091b      	lsrs	r3, r3, #4
 800171e:	b2db      	uxtb	r3, r3
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	b2da      	uxtb	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	701a      	strb	r2, [r3, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	08db      	lsrs	r3, r3, #3
 800172e:	b2db      	uxtb	r3, r3
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	b2da      	uxtb	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	709a      	strb	r2, [r3, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	089b      	lsrs	r3, r3, #2
 800173e:	b2db      	uxtb	r3, r3
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	b2da      	uxtb	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	705a      	strb	r2, [r3, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	099b      	lsrs	r3, r3, #6
 800174e:	b2db      	uxtb	r3, r3
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	b2da      	uxtb	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	70da      	strb	r2, [r3, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	09db      	lsrs	r3, r3, #7
 800175e:	b2da      	uxtb	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	711a      	strb	r2, [r3, #4]
}
 8001764:	bf00      	nop
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <getSequenceStepTimeouts_x>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void getSequenceStepTimeouts_x(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts, statInfo_t_VL53L0X *sensorInfo)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod_x(VcselPeriodPreRange, sensorInfo->address);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	7a5b      	ldrb	r3, [r3, #9]
 800177c:	4619      	mov	r1, r3
 800177e:	2000      	movs	r0, #0
 8001780:	f000 fa6e 	bl	8001c60 <getVcselPulsePeriod_x>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg_x(MSRC_CONFIG_TIMEOUT_MACROP, sensorInfo->address) + 1;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	7a5b      	ldrb	r3, [r3, #9]
 8001790:	4619      	mov	r1, r3
 8001792:	2046      	movs	r0, #70	@ 0x46
 8001794:	f7ff fa9c 	bl	8000cd0 <readReg_x>
 8001798:	4603      	mov	r3, r0
 800179a:	3301      	adds	r3, #1
 800179c:	b29a      	uxth	r2, r3
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	4619      	mov	r1, r3
 80017ae:	4610      	mov	r0, r2
 80017b0:	f000 fca8 	bl	8002104 <timeoutMclksToMicroseconds>
 80017b4:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit_x(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI, sensorInfo->address));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7a5b      	ldrb	r3, [r3, #9]
 80017be:	4619      	mov	r1, r3
 80017c0:	2051      	movs	r0, #81	@ 0x51
 80017c2:	f7ff faaf 	bl	8000d24 <readReg16Bit_x>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fc5c 	bl	8002086 <decodeTimeout>
 80017ce:	4603      	mov	r3, r0
 80017d0:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	4619      	mov	r1, r3
 80017e2:	4610      	mov	r0, r2
 80017e4:	f000 fc8e 	bl	8002104 <timeoutMclksToMicroseconds>
 80017e8:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod_x(VcselPeriodFinalRange, sensorInfo->address);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	7a5b      	ldrb	r3, [r3, #9]
 80017f2:	4619      	mov	r1, r3
 80017f4:	2001      	movs	r0, #1
 80017f6:	f000 fa33 	bl	8001c60 <getVcselPulsePeriod_x>
 80017fa:	4603      	mov	r3, r0
 80017fc:	461a      	mov	r2, r3
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit_x(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, sensorInfo->address));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	7a5b      	ldrb	r3, [r3, #9]
 8001806:	4619      	mov	r1, r3
 8001808:	2071      	movs	r0, #113	@ 0x71
 800180a:	f7ff fa8b 	bl	8000d24 <readReg16Bit_x>
 800180e:	4603      	mov	r3, r0
 8001810:	4618      	mov	r0, r3
 8001812:	f000 fc38 	bl	8002086 <decodeTimeout>
 8001816:	4603      	mov	r3, r0
 8001818:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	811a      	strh	r2, [r3, #8]

  if (enables->pre_range)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	78db      	ldrb	r3, [r3, #3]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d007      	beq.n	8001836 <getSequenceStepTimeouts_x+0xca>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	891a      	ldrh	r2, [r3, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	88db      	ldrh	r3, [r3, #6]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	b29a      	uxth	r2, r3
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 800183e:	b2db      	uxtb	r3, r3
 8001840:	4619      	mov	r1, r3
 8001842:	4610      	mov	r0, r2
 8001844:	f000 fc5e 	bl	8002104 <timeoutMclksToMicroseconds>
 8001848:	4602      	mov	r2, r0
  timeouts->final_range_us =
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	615a      	str	r2, [r3, #20]
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <setVcselPulsePeriod_x>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
bool setVcselPulsePeriod_x(vcselPeriodType type, uint8_t period_pclks, statInfo_t_VL53L0X *sensorInfo)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08c      	sub	sp, #48	@ 0x30
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	603a      	str	r2, [r7, #0]
 8001862:	71fb      	strb	r3, [r7, #7]
 8001864:	460b      	mov	r3, r1
 8001866:	71bb      	strb	r3, [r7, #6]
  uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 8001868:	79bb      	ldrb	r3, [r7, #6]
 800186a:	085b      	lsrs	r3, r3, #1
 800186c:	b2db      	uxtb	r3, r3
 800186e:	3b01      	subs	r3, #1
 8001870:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  getSequenceStepEnables_x(&enables, sensorInfo->address);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	7a5b      	ldrb	r3, [r3, #9]
 8001878:	461a      	mov	r2, r3
 800187a:	f107 0320 	add.w	r3, r7, #32
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff3d 	bl	8001700 <getSequenceStepEnables_x>
  getSequenceStepTimeouts_x(&enables, &timeouts, sensorInfo->address);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	7a5b      	ldrb	r3, [r3, #9]
 800188a:	461a      	mov	r2, r3
 800188c:	f107 0108 	add.w	r1, r7, #8
 8001890:	f107 0320 	add.w	r3, r7, #32
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff69 	bl	800176c <getSequenceStepTimeouts_x>
  //
  // For the MSRC timeout, the same applies - this timeout being
  // dependant on the pre-range vcsel period."


  if (type == VcselPeriodPreRange)
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d17b      	bne.n	8001998 <setVcselPulsePeriod_x+0x140>
  {
    // "Set phase check limits"
    switch (period_pclks)
 80018a0:	79bb      	ldrb	r3, [r7, #6]
 80018a2:	3b0c      	subs	r3, #12
 80018a4:	2b06      	cmp	r3, #6
 80018a6:	d831      	bhi.n	800190c <setVcselPulsePeriod_x+0xb4>
 80018a8:	a201      	add	r2, pc, #4	@ (adr r2, 80018b0 <setVcselPulsePeriod_x+0x58>)
 80018aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ae:	bf00      	nop
 80018b0:	080018cd 	.word	0x080018cd
 80018b4:	0800190d 	.word	0x0800190d
 80018b8:	080018dd 	.word	0x080018dd
 80018bc:	0800190d 	.word	0x0800190d
 80018c0:	080018ed 	.word	0x080018ed
 80018c4:	0800190d 	.word	0x0800190d
 80018c8:	080018fd 	.word	0x080018fd
    {
      case 12:
        writeReg_x(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18, sensorInfo->address);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	7a5b      	ldrb	r3, [r3, #9]
 80018d0:	461a      	mov	r2, r3
 80018d2:	2118      	movs	r1, #24
 80018d4:	2057      	movs	r0, #87	@ 0x57
 80018d6:	f7ff f9ab 	bl	8000c30 <writeReg_x>
        break;
 80018da:	e020      	b.n	800191e <setVcselPulsePeriod_x+0xc6>

      case 14:
        writeReg_x(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30, sensorInfo->address);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	7a5b      	ldrb	r3, [r3, #9]
 80018e0:	461a      	mov	r2, r3
 80018e2:	2130      	movs	r1, #48	@ 0x30
 80018e4:	2057      	movs	r0, #87	@ 0x57
 80018e6:	f7ff f9a3 	bl	8000c30 <writeReg_x>
        break;
 80018ea:	e018      	b.n	800191e <setVcselPulsePeriod_x+0xc6>

      case 16:
        writeReg_x(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40, sensorInfo->address);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	7a5b      	ldrb	r3, [r3, #9]
 80018f0:	461a      	mov	r2, r3
 80018f2:	2140      	movs	r1, #64	@ 0x40
 80018f4:	2057      	movs	r0, #87	@ 0x57
 80018f6:	f7ff f99b 	bl	8000c30 <writeReg_x>
        break;
 80018fa:	e010      	b.n	800191e <setVcselPulsePeriod_x+0xc6>

      case 18:
        writeReg_x(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50, sensorInfo->address);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	7a5b      	ldrb	r3, [r3, #9]
 8001900:	461a      	mov	r2, r3
 8001902:	2150      	movs	r1, #80	@ 0x50
 8001904:	2057      	movs	r0, #87	@ 0x57
 8001906:	f7ff f993 	bl	8000c30 <writeReg_x>
        break;
 800190a:	e008      	b.n	800191e <setVcselPulsePeriod_x+0xc6>

      default:
    	  writeReg_x(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30, sensorInfo->address);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	7a5b      	ldrb	r3, [r3, #9]
 8001910:	461a      	mov	r2, r3
 8001912:	2130      	movs	r1, #48	@ 0x30
 8001914:	2057      	movs	r0, #87	@ 0x57
 8001916:	f7ff f98b 	bl	8000c30 <writeReg_x>
        return false;
 800191a:	2300      	movs	r3, #0
 800191c:	e19a      	b.n	8001c54 <setVcselPulsePeriod_x+0x3fc>
    }
    writeReg_x(PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08, sensorInfo->address);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	7a5b      	ldrb	r3, [r3, #9]
 8001922:	461a      	mov	r2, r3
 8001924:	2108      	movs	r1, #8
 8001926:	2056      	movs	r0, #86	@ 0x56
 8001928:	f7ff f982 	bl	8000c30 <writeReg_x>

    // apply new VCSEL period
    writeReg_x(PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg, sensorInfo->address);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	7a5b      	ldrb	r3, [r3, #9]
 8001930:	461a      	mov	r2, r3
 8001932:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001936:	4619      	mov	r1, r3
 8001938:	2050      	movs	r0, #80	@ 0x50
 800193a:	f7ff f979 	bl	8000c30 <writeReg_x>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)

    uint16_t new_pre_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	79ba      	ldrb	r2, [r7, #6]
 8001942:	4611      	mov	r1, r2
 8001944:	4618      	mov	r0, r3
 8001946:	f000 fc05 	bl	8002154 <timeoutMicrosecondsToMclks>
 800194a:	4603      	mov	r3, r0
    uint16_t new_pre_range_timeout_mclks =
 800194c:	857b      	strh	r3, [r7, #42]	@ 0x2a

    writeReg16Bit_x(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 800194e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001950:	4618      	mov	r0, r3
 8001952:	f000 fbac 	bl	80020ae <encodeTimeout>
 8001956:	4603      	mov	r3, r0
 8001958:	4619      	mov	r1, r3
      encodeTimeout(new_pre_range_timeout_mclks), sensorInfo->address);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	7a5b      	ldrb	r3, [r3, #9]
    writeReg16Bit_x(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 800195e:	461a      	mov	r2, r3
 8001960:	2051      	movs	r0, #81	@ 0x51
 8001962:	f7ff f98d 	bl	8000c80 <writeReg16Bit_x>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)

    uint16_t new_msrc_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	79ba      	ldrb	r2, [r7, #6]
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f000 fbf1 	bl	8002154 <timeoutMicrosecondsToMclks>
 8001972:	4603      	mov	r3, r0
    uint16_t new_msrc_timeout_mclks =
 8001974:	853b      	strh	r3, [r7, #40]	@ 0x28

    writeReg_x(MSRC_CONFIG_TIMEOUT_MACROP,
 8001976:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001978:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800197c:	d804      	bhi.n	8001988 <setVcselPulsePeriod_x+0x130>
      (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1), sensorInfo->address);
 800197e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001980:	b2db      	uxtb	r3, r3
    writeReg_x(MSRC_CONFIG_TIMEOUT_MACROP,
 8001982:	3b01      	subs	r3, #1
 8001984:	b2db      	uxtb	r3, r3
 8001986:	e000      	b.n	800198a <setVcselPulsePeriod_x+0x132>
 8001988:	23ff      	movs	r3, #255	@ 0xff
      (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1), sensorInfo->address);
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	7a52      	ldrb	r2, [r2, #9]
    writeReg_x(MSRC_CONFIG_TIMEOUT_MACROP,
 800198e:	4619      	mov	r1, r3
 8001990:	2046      	movs	r0, #70	@ 0x46
 8001992:	f7ff f94d 	bl	8000c30 <writeReg_x>
 8001996:	e135      	b.n	8001c04 <setVcselPulsePeriod_x+0x3ac>

    // set_sequence_step_timeout() end
  }
  else if (type == VcselPeriodFinalRange)
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	2b01      	cmp	r3, #1
 800199c:	f040 8130 	bne.w	8001c00 <setVcselPulsePeriod_x+0x3a8>
  {
    switch (period_pclks)
 80019a0:	79bb      	ldrb	r3, [r7, #6]
 80019a2:	3b08      	subs	r3, #8
 80019a4:	2b06      	cmp	r3, #6
 80019a6:	f200 80d2 	bhi.w	8001b4e <setVcselPulsePeriod_x+0x2f6>
 80019aa:	a201      	add	r2, pc, #4	@ (adr r2, 80019b0 <setVcselPulsePeriod_x+0x158>)
 80019ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b0:	080019cd 	.word	0x080019cd
 80019b4:	08001b4f 	.word	0x08001b4f
 80019b8:	08001a23 	.word	0x08001a23
 80019bc:	08001b4f 	.word	0x08001b4f
 80019c0:	08001a87 	.word	0x08001a87
 80019c4:	08001b4f 	.word	0x08001b4f
 80019c8:	08001aeb 	.word	0x08001aeb
    {
      case 8:
        writeReg_x(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08, sensorInfo->address);
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	7a5b      	ldrb	r3, [r3, #9]
 80019d0:	461a      	mov	r2, r3
 80019d2:	2108      	movs	r1, #8
 80019d4:	2047      	movs	r0, #71	@ 0x47
 80019d6:	f7ff f92b 	bl	8000c30 <writeReg_x>
        writeReg_x(GLOBAL_CONFIG_VCSEL_WIDTH, 0x02, sensorInfo->address);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	7a5b      	ldrb	r3, [r3, #9]
 80019de:	461a      	mov	r2, r3
 80019e0:	2102      	movs	r1, #2
 80019e2:	2032      	movs	r0, #50	@ 0x32
 80019e4:	f7ff f924 	bl	8000c30 <writeReg_x>
        writeReg_x(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C, sensorInfo->address);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	7a5b      	ldrb	r3, [r3, #9]
 80019ec:	461a      	mov	r2, r3
 80019ee:	210c      	movs	r1, #12
 80019f0:	2030      	movs	r0, #48	@ 0x30
 80019f2:	f7ff f91d 	bl	8000c30 <writeReg_x>
        writeReg_x(0xFF, 0x01, sensorInfo->address);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	7a5b      	ldrb	r3, [r3, #9]
 80019fa:	461a      	mov	r2, r3
 80019fc:	2101      	movs	r1, #1
 80019fe:	20ff      	movs	r0, #255	@ 0xff
 8001a00:	f7ff f916 	bl	8000c30 <writeReg_x>
        writeReg_x(ALGO_PHASECAL_LIM, 0x30, sensorInfo->address);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	7a5b      	ldrb	r3, [r3, #9]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	2130      	movs	r1, #48	@ 0x30
 8001a0c:	2030      	movs	r0, #48	@ 0x30
 8001a0e:	f7ff f90f 	bl	8000c30 <writeReg_x>
        writeReg_x(0xFF, 0x00, sensorInfo->address);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	7a5b      	ldrb	r3, [r3, #9]
 8001a16:	461a      	mov	r2, r3
 8001a18:	2100      	movs	r1, #0
 8001a1a:	20ff      	movs	r0, #255	@ 0xff
 8001a1c:	f7ff f908 	bl	8000c30 <writeReg_x>
        break;
 8001a20:	e0c8      	b.n	8001bb4 <setVcselPulsePeriod_x+0x35c>

      case 10:
        writeReg_x(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28, sensorInfo->address);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	7a5b      	ldrb	r3, [r3, #9]
 8001a26:	461a      	mov	r2, r3
 8001a28:	2128      	movs	r1, #40	@ 0x28
 8001a2a:	2048      	movs	r0, #72	@ 0x48
 8001a2c:	f7ff f900 	bl	8000c30 <writeReg_x>
        writeReg_x(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08, sensorInfo->address);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	7a5b      	ldrb	r3, [r3, #9]
 8001a34:	461a      	mov	r2, r3
 8001a36:	2108      	movs	r1, #8
 8001a38:	2047      	movs	r0, #71	@ 0x47
 8001a3a:	f7ff f8f9 	bl	8000c30 <writeReg_x>
        writeReg_x(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03, sensorInfo->address);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	7a5b      	ldrb	r3, [r3, #9]
 8001a42:	461a      	mov	r2, r3
 8001a44:	2103      	movs	r1, #3
 8001a46:	2032      	movs	r0, #50	@ 0x32
 8001a48:	f7ff f8f2 	bl	8000c30 <writeReg_x>
        writeReg_x(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09, sensorInfo->address);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	7a5b      	ldrb	r3, [r3, #9]
 8001a50:	461a      	mov	r2, r3
 8001a52:	2109      	movs	r1, #9
 8001a54:	2030      	movs	r0, #48	@ 0x30
 8001a56:	f7ff f8eb 	bl	8000c30 <writeReg_x>
        writeReg_x(0xFF, 0x01, sensorInfo->address);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	7a5b      	ldrb	r3, [r3, #9]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	2101      	movs	r1, #1
 8001a62:	20ff      	movs	r0, #255	@ 0xff
 8001a64:	f7ff f8e4 	bl	8000c30 <writeReg_x>
        writeReg_x(ALGO_PHASECAL_LIM, 0x20, sensorInfo->address);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	7a5b      	ldrb	r3, [r3, #9]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	2120      	movs	r1, #32
 8001a70:	2030      	movs	r0, #48	@ 0x30
 8001a72:	f7ff f8dd 	bl	8000c30 <writeReg_x>
        writeReg_x(0xFF, 0x00, sensorInfo->address);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	7a5b      	ldrb	r3, [r3, #9]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	20ff      	movs	r0, #255	@ 0xff
 8001a80:	f7ff f8d6 	bl	8000c30 <writeReg_x>
        break;
 8001a84:	e096      	b.n	8001bb4 <setVcselPulsePeriod_x+0x35c>

      case 12:
        writeReg_x(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38 ,sensorInfo->address);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	7a5b      	ldrb	r3, [r3, #9]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	2138      	movs	r1, #56	@ 0x38
 8001a8e:	2048      	movs	r0, #72	@ 0x48
 8001a90:	f7ff f8ce 	bl	8000c30 <writeReg_x>
        writeReg_x(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08, sensorInfo->address);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	7a5b      	ldrb	r3, [r3, #9]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	2108      	movs	r1, #8
 8001a9c:	2047      	movs	r0, #71	@ 0x47
 8001a9e:	f7ff f8c7 	bl	8000c30 <writeReg_x>
        writeReg_x(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03, sensorInfo->address);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	7a5b      	ldrb	r3, [r3, #9]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	2103      	movs	r1, #3
 8001aaa:	2032      	movs	r0, #50	@ 0x32
 8001aac:	f7ff f8c0 	bl	8000c30 <writeReg_x>
        writeReg_x(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08, sensorInfo->address);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	7a5b      	ldrb	r3, [r3, #9]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	2108      	movs	r1, #8
 8001ab8:	2030      	movs	r0, #48	@ 0x30
 8001aba:	f7ff f8b9 	bl	8000c30 <writeReg_x>
        writeReg_x(0xFF, 0x01, sensorInfo->address);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	7a5b      	ldrb	r3, [r3, #9]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	20ff      	movs	r0, #255	@ 0xff
 8001ac8:	f7ff f8b2 	bl	8000c30 <writeReg_x>
        writeReg_x(ALGO_PHASECAL_LIM, 0x20, sensorInfo->address);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	7a5b      	ldrb	r3, [r3, #9]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	2120      	movs	r1, #32
 8001ad4:	2030      	movs	r0, #48	@ 0x30
 8001ad6:	f7ff f8ab 	bl	8000c30 <writeReg_x>
        writeReg_x(0xFF, 0x00, sensorInfo->address);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	7a5b      	ldrb	r3, [r3, #9]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	20ff      	movs	r0, #255	@ 0xff
 8001ae4:	f7ff f8a4 	bl	8000c30 <writeReg_x>
        break;
 8001ae8:	e064      	b.n	8001bb4 <setVcselPulsePeriod_x+0x35c>

      case 14:
        writeReg_x(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48, sensorInfo->address);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	7a5b      	ldrb	r3, [r3, #9]
 8001aee:	461a      	mov	r2, r3
 8001af0:	2148      	movs	r1, #72	@ 0x48
 8001af2:	2048      	movs	r0, #72	@ 0x48
 8001af4:	f7ff f89c 	bl	8000c30 <writeReg_x>
        writeReg_x(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08, sensorInfo->address);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	7a5b      	ldrb	r3, [r3, #9]
 8001afc:	461a      	mov	r2, r3
 8001afe:	2108      	movs	r1, #8
 8001b00:	2047      	movs	r0, #71	@ 0x47
 8001b02:	f7ff f895 	bl	8000c30 <writeReg_x>
        writeReg_x(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03, sensorInfo->address);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	7a5b      	ldrb	r3, [r3, #9]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	2103      	movs	r1, #3
 8001b0e:	2032      	movs	r0, #50	@ 0x32
 8001b10:	f7ff f88e 	bl	8000c30 <writeReg_x>
        writeReg_x(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07, sensorInfo->address);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	7a5b      	ldrb	r3, [r3, #9]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2107      	movs	r1, #7
 8001b1c:	2030      	movs	r0, #48	@ 0x30
 8001b1e:	f7ff f887 	bl	8000c30 <writeReg_x>
        writeReg_x(0xFF, 0x01, sensorInfo->address);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	7a5b      	ldrb	r3, [r3, #9]
 8001b26:	461a      	mov	r2, r3
 8001b28:	2101      	movs	r1, #1
 8001b2a:	20ff      	movs	r0, #255	@ 0xff
 8001b2c:	f7ff f880 	bl	8000c30 <writeReg_x>
        writeReg_x(ALGO_PHASECAL_LIM, 0x20 ,sensorInfo->address);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	7a5b      	ldrb	r3, [r3, #9]
 8001b34:	461a      	mov	r2, r3
 8001b36:	2120      	movs	r1, #32
 8001b38:	2030      	movs	r0, #48	@ 0x30
 8001b3a:	f7ff f879 	bl	8000c30 <writeReg_x>
        writeReg_x(0xFF, 0x00, sensorInfo->address);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	7a5b      	ldrb	r3, [r3, #9]
 8001b42:	461a      	mov	r2, r3
 8001b44:	2100      	movs	r1, #0
 8001b46:	20ff      	movs	r0, #255	@ 0xff
 8001b48:	f7ff f872 	bl	8000c30 <writeReg_x>

        break;
 8001b4c:	e032      	b.n	8001bb4 <setVcselPulsePeriod_x+0x35c>

      default:
          writeReg_x(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48, sensorInfo->address);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	7a5b      	ldrb	r3, [r3, #9]
 8001b52:	461a      	mov	r2, r3
 8001b54:	2148      	movs	r1, #72	@ 0x48
 8001b56:	2048      	movs	r0, #72	@ 0x48
 8001b58:	f7ff f86a 	bl	8000c30 <writeReg_x>
          writeReg_x(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08, sensorInfo->address);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	7a5b      	ldrb	r3, [r3, #9]
 8001b60:	461a      	mov	r2, r3
 8001b62:	2108      	movs	r1, #8
 8001b64:	2047      	movs	r0, #71	@ 0x47
 8001b66:	f7ff f863 	bl	8000c30 <writeReg_x>
          writeReg_x(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03, sensorInfo->address);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	7a5b      	ldrb	r3, [r3, #9]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	2103      	movs	r1, #3
 8001b72:	2032      	movs	r0, #50	@ 0x32
 8001b74:	f7ff f85c 	bl	8000c30 <writeReg_x>
          writeReg_x(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07, sensorInfo->address);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	7a5b      	ldrb	r3, [r3, #9]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	2107      	movs	r1, #7
 8001b80:	2030      	movs	r0, #48	@ 0x30
 8001b82:	f7ff f855 	bl	8000c30 <writeReg_x>
          writeReg_x(0xFF, 0x01, sensorInfo->address);
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	7a5b      	ldrb	r3, [r3, #9]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	20ff      	movs	r0, #255	@ 0xff
 8001b90:	f7ff f84e 	bl	8000c30 <writeReg_x>
          writeReg_x(ALGO_PHASECAL_LIM, 0x20 ,sensorInfo->address);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	7a5b      	ldrb	r3, [r3, #9]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	2120      	movs	r1, #32
 8001b9c:	2030      	movs	r0, #48	@ 0x30
 8001b9e:	f7ff f847 	bl	8000c30 <writeReg_x>
          writeReg_x(0xFF, 0x00, sensorInfo->address);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	7a5b      	ldrb	r3, [r3, #9]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	2100      	movs	r1, #0
 8001baa:	20ff      	movs	r0, #255	@ 0xff
 8001bac:	f7ff f840 	bl	8000c30 <writeReg_x>
        return false;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	e04f      	b.n	8001c54 <setVcselPulsePeriod_x+0x3fc>
    }

    // apply new VCSEL period
    writeReg_x(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg, sensorInfo->address);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	7a5b      	ldrb	r3, [r3, #9]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	2070      	movs	r0, #112	@ 0x70
 8001bc2:	f7ff f835 	bl	8000c30 <writeReg_x>
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t new_final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	79ba      	ldrb	r2, [r7, #6]
 8001bca:	4611      	mov	r1, r2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f000 fac1 	bl	8002154 <timeoutMicrosecondsToMclks>
 8001bd2:	4603      	mov	r3, r0
    uint16_t new_final_range_timeout_mclks =
 8001bd4:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    if (enables.pre_range)
 8001bd6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <setVcselPulsePeriod_x+0x38e>
    {
      new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 8001bde:	89fa      	ldrh	r2, [r7, #14]
 8001be0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001be2:	4413      	add	r3, r2
 8001be4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    }

    writeReg16Bit_x(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8001be6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001be8:	4618      	mov	r0, r3
 8001bea:	f000 fa60 	bl	80020ae <encodeTimeout>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4619      	mov	r1, r3
      encodeTimeout(new_final_range_timeout_mclks), sensorInfo->address);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	7a5b      	ldrb	r3, [r3, #9]
    writeReg16Bit_x(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	2071      	movs	r0, #113	@ 0x71
 8001bfa:	f7ff f841 	bl	8000c80 <writeReg16Bit_x>
 8001bfe:	e001      	b.n	8001c04 <setVcselPulsePeriod_x+0x3ac>
    // set_sequence_step_timeout end
  }
  else
  {
    // invalid type
    return false;
 8001c00:	2300      	movs	r3, #0
 8001c02:	e027      	b.n	8001c54 <setVcselPulsePeriod_x+0x3fc>
  }

  // "Finally, the timing budget must be re-applied"

  setMeasurementTimingBudget_x(g_measTimBudUs, sensorInfo->address);
 8001c04:	4b15      	ldr	r3, [pc, #84]	@ (8001c5c <setVcselPulsePeriod_x+0x404>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	7a5b      	ldrb	r3, [r3, #9]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4610      	mov	r0, r2
 8001c10:	f7ff fcd4 	bl	80015bc <setMeasurementTimingBudget_x>

  // "Perform the phase calibration. This is needed after changing on vcsel period."
  // VL53L0X_perform_phase_calibration() begin

  uint8_t sequence_config = readReg_x(SYSTEM_SEQUENCE_CONFIG,sensorInfo->address);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	7a5b      	ldrb	r3, [r3, #9]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	f7ff f858 	bl	8000cd0 <readReg_x>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  writeReg_x(SYSTEM_SEQUENCE_CONFIG, 0x02, sensorInfo->address);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	7a5b      	ldrb	r3, [r3, #9]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	2102      	movs	r1, #2
 8001c2e:	2001      	movs	r0, #1
 8001c30:	f7fe fffe 	bl	8000c30 <writeReg_x>
  performSingleRefCalibration_x(0x0, sensorInfo->address);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	7a5b      	ldrb	r3, [r3, #9]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f000 faf0 	bl	8002220 <performSingleRefCalibration_x>
  writeReg_x(SYSTEM_SEQUENCE_CONFIG, sequence_config, sensorInfo->address);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	7a5b      	ldrb	r3, [r3, #9]
 8001c44:	461a      	mov	r2, r3
 8001c46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f7fe ffef 	bl	8000c30 <writeReg_x>

  // VL53L0X_perform_phase_calibration() end

  return true;
 8001c52:	2301      	movs	r3, #1
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3730      	adds	r7, #48	@ 0x30
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000088 	.word	0x20000088

08001c60 <getVcselPulsePeriod_x>:

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t getVcselPulsePeriod_x(vcselPeriodType type, statInfo_t_VL53L0X *sensorInfo)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	6039      	str	r1, [r7, #0]
 8001c6a:	71fb      	strb	r3, [r7, #7]
  if (type == VcselPeriodPreRange)
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10b      	bne.n	8001c8a <getVcselPulsePeriod_x+0x2a>
  {
    return decodeVcselPeriod(readReg_x(PRE_RANGE_CONFIG_VCSEL_PERIOD, sensorInfo->address));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	7a5b      	ldrb	r3, [r3, #9]
 8001c76:	4619      	mov	r1, r3
 8001c78:	2050      	movs	r0, #80	@ 0x50
 8001c7a:	f7ff f829 	bl	8000cd0 <readReg_x>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	3301      	adds	r3, #1
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	e00f      	b.n	8001caa <getVcselPulsePeriod_x+0x4a>
  }
  else if (type == VcselPeriodFinalRange)
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d10b      	bne.n	8001ca8 <getVcselPulsePeriod_x+0x48>
  {
    return decodeVcselPeriod(readReg_x(FINAL_RANGE_CONFIG_VCSEL_PERIOD, sensorInfo->address));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	7a5b      	ldrb	r3, [r3, #9]
 8001c94:	4619      	mov	r1, r3
 8001c96:	2070      	movs	r0, #112	@ 0x70
 8001c98:	f7ff f81a 	bl	8000cd0 <readReg_x>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	e000      	b.n	8001caa <getVcselPulsePeriod_x+0x4a>
  }
  else { return 255; }
 8001ca8:	23ff      	movs	r3, #255	@ 0xff
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <readRangeContinuousMillimeters>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t readRangeContinuousMillimeters( statInfo_t_VL53L0X *extraStats ) {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint8_t tempBuffer[12];
  uint16_t temp;
  startTimeout();
 8001cbc:	f001 f9fa 	bl	80030b4 <HAL_GetTick>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	4b35      	ldr	r3, [pc, #212]	@ (8001d9c <readRangeContinuousMillimeters+0xe8>)
 8001cc6:	801a      	strh	r2, [r3, #0]
  while ((readReg_x(RESULT_INTERRUPT_STATUS, extraStats) & 0x07) == 0) {
 8001cc8:	e015      	b.n	8001cf6 <readRangeContinuousMillimeters+0x42>
    if (checkTimeoutExpired())
 8001cca:	4b35      	ldr	r3, [pc, #212]	@ (8001da0 <readRangeContinuousMillimeters+0xec>)
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d011      	beq.n	8001cf6 <readRangeContinuousMillimeters+0x42>
 8001cd2:	f001 f9ef 	bl	80030b4 <HAL_GetTick>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4b2f      	ldr	r3, [pc, #188]	@ (8001d9c <readRangeContinuousMillimeters+0xe8>)
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	4a2f      	ldr	r2, [pc, #188]	@ (8001da0 <readRangeContinuousMillimeters+0xec>)
 8001ce4:	8812      	ldrh	r2, [r2, #0]
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	dd05      	ble.n	8001cf6 <readRangeContinuousMillimeters+0x42>
    {
      g_isTimeout = true;
 8001cea:	4b2e      	ldr	r3, [pc, #184]	@ (8001da4 <readRangeContinuousMillimeters+0xf0>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	701a      	strb	r2, [r3, #0]
      return 65535;
 8001cf0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001cf4:	e04d      	b.n	8001d92 <readRangeContinuousMillimeters+0xde>
  while ((readReg_x(RESULT_INTERRUPT_STATUS, extraStats) & 0x07) == 0) {
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	2013      	movs	r0, #19
 8001cfa:	f7fe ffe9 	bl	8000cd0 <readReg_x>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0e0      	beq.n	8001cca <readRangeContinuousMillimeters+0x16>
    }
  }

  if( extraStats == 0 ){
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d106      	bne.n	8001d1c <readRangeContinuousMillimeters+0x68>
    // assumptions: Linearity Corrective Gain is 1000 (default);
    // fractional ranging is not enabled
    temp = readReg16Bit_x(RESULT_RANGE_STATUS + 10, extraStats);
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	201e      	movs	r0, #30
 8001d12:	f7ff f807 	bl	8000d24 <readReg16Bit_x>
 8001d16:	4603      	mov	r3, r0
 8001d18:	82fb      	strh	r3, [r7, #22]
 8001d1a:	e034      	b.n	8001d86 <readRangeContinuousMillimeters+0xd2>
    //   4: 0 ?
    //   5: ???
    // 6,7: signal count rate [mcps], uint16_t, fixpoint9.7
    // 9,8: AmbientRateRtnMegaCps  [mcps], uint16_t, fixpoimt9.7
    // A,B: uncorrected distance [mm], uint16_t
    readMulti_x(0x14, tempBuffer, 12, extraStats);
 8001d1c:	f107 0108 	add.w	r1, r7, #8
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	220c      	movs	r2, #12
 8001d24:	2014      	movs	r0, #20
 8001d26:	f7ff f827 	bl	8000d78 <readMulti_x>
    extraStats->rangeStatus =  tempBuffer[0x00]>>3;
 8001d2a:	7a3b      	ldrb	r3, [r7, #8]
 8001d2c:	08db      	lsrs	r3, r3, #3
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	721a      	strb	r2, [r3, #8]
    extraStats->spadCnt     = (tempBuffer[0x02]<<8) | tempBuffer[0x03];
 8001d34:	7abb      	ldrb	r3, [r7, #10]
 8001d36:	021b      	lsls	r3, r3, #8
 8001d38:	b21a      	sxth	r2, r3
 8001d3a:	7afb      	ldrb	r3, [r7, #11]
 8001d3c:	b21b      	sxth	r3, r3
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	80da      	strh	r2, [r3, #6]
    extraStats->signalCnt   = (tempBuffer[0x06]<<8) | tempBuffer[0x07];
 8001d48:	7bbb      	ldrb	r3, [r7, #14]
 8001d4a:	021b      	lsls	r3, r3, #8
 8001d4c:	b21a      	sxth	r2, r3
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	b21b      	sxth	r3, r3
 8001d52:	4313      	orrs	r3, r2
 8001d54:	b21b      	sxth	r3, r3
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	805a      	strh	r2, [r3, #2]
    extraStats->ambientCnt  = (tempBuffer[0x08]<<8) | tempBuffer[0x09];    
 8001d5c:	7c3b      	ldrb	r3, [r7, #16]
 8001d5e:	021b      	lsls	r3, r3, #8
 8001d60:	b21a      	sxth	r2, r3
 8001d62:	7c7b      	ldrb	r3, [r7, #17]
 8001d64:	b21b      	sxth	r3, r3
 8001d66:	4313      	orrs	r3, r2
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	809a      	strh	r2, [r3, #4]
    temp                    = (tempBuffer[0x0A]<<8) | tempBuffer[0x0B];
 8001d70:	7cbb      	ldrb	r3, [r7, #18]
 8001d72:	021b      	lsls	r3, r3, #8
 8001d74:	b21a      	sxth	r2, r3
 8001d76:	7cfb      	ldrb	r3, [r7, #19]
 8001d78:	b21b      	sxth	r3, r3
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	b21b      	sxth	r3, r3
 8001d7e:	82fb      	strh	r3, [r7, #22]
    extraStats->rawDistance = temp;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	8afa      	ldrh	r2, [r7, #22]
 8001d84:	801a      	strh	r2, [r3, #0]
  }
  writeReg_x(SYSTEM_INTERRUPT_CLEAR, 0x01, extraStats);
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	2101      	movs	r1, #1
 8001d8a:	200b      	movs	r0, #11
 8001d8c:	f7fe ff50 	bl	8000c30 <writeReg_x>
  return temp;
 8001d90:	8afb      	ldrh	r3, [r7, #22]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000084 	.word	0x20000084
 8001da0:	20000080 	.word	0x20000080
 8001da4:	20000082 	.word	0x20000082

08001da8 <readRangeSingleMillimeters>:

// Performs a single-shot range measurement and returns the reading in
// millimeters
// based on VL53L0X_PerformSingleRangingMeasurement()
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t readRangeSingleMillimeters( statInfo_t_VL53L0X *extraStats ) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  writeReg_x(0x80, 0x01, extraStats->address);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	7a5b      	ldrb	r3, [r3, #9]
 8001db4:	461a      	mov	r2, r3
 8001db6:	2101      	movs	r1, #1
 8001db8:	2080      	movs	r0, #128	@ 0x80
 8001dba:	f7fe ff39 	bl	8000c30 <writeReg_x>
  writeReg_x(0xFF, 0x01, extraStats->address);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	7a5b      	ldrb	r3, [r3, #9]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	20ff      	movs	r0, #255	@ 0xff
 8001dc8:	f7fe ff32 	bl	8000c30 <writeReg_x>
  writeReg_x(0x00, 0x00, extraStats->address);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	7a5b      	ldrb	r3, [r3, #9]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f7fe ff2b 	bl	8000c30 <writeReg_x>
  writeReg_x(0x91, g_stopVariable, extraStats->address);
 8001dda:	4b14      	ldr	r3, [pc, #80]	@ (8001e2c <readRangeSingleMillimeters+0x84>)
 8001ddc:	7819      	ldrb	r1, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	7a5b      	ldrb	r3, [r3, #9]
 8001de2:	461a      	mov	r2, r3
 8001de4:	2091      	movs	r0, #145	@ 0x91
 8001de6:	f7fe ff23 	bl	8000c30 <writeReg_x>
  writeReg_x(0x00, 0x01, extraStats);
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	2101      	movs	r1, #1
 8001dee:	2000      	movs	r0, #0
 8001df0:	f7fe ff1e 	bl	8000c30 <writeReg_x>
  writeReg_x(0xFF, 0x00,  extraStats->address);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	7a5b      	ldrb	r3, [r3, #9]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	20ff      	movs	r0, #255	@ 0xff
 8001dfe:	f7fe ff17 	bl	8000c30 <writeReg_x>
  writeReg_x(0x80, 0x00, extraStats->address);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	7a5b      	ldrb	r3, [r3, #9]
 8001e06:	461a      	mov	r2, r3
 8001e08:	2100      	movs	r1, #0
 8001e0a:	2080      	movs	r0, #128	@ 0x80
 8001e0c:	f7fe ff10 	bl	8000c30 <writeReg_x>
  writeReg_x(SYSRANGE_START, 0x01, extraStats);
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	2101      	movs	r1, #1
 8001e14:	2000      	movs	r0, #0
 8001e16:	f7fe ff0b 	bl	8000c30 <writeReg_x>
    }
  }*/



  return readRangeContinuousMillimeters( extraStats );
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff ff4a 	bl	8001cb4 <readRangeContinuousMillimeters>
 8001e20:	4603      	mov	r3, r0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000086 	.word	0x20000086

08001e30 <getSpadInfo>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint8_t tmp;

  writeReg(0x80, 0x01);
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	2080      	movs	r0, #128	@ 0x80
 8001e3e:	f7fe fdf3 	bl	8000a28 <writeReg>
  writeReg(0xFF, 0x01);
 8001e42:	2101      	movs	r1, #1
 8001e44:	20ff      	movs	r0, #255	@ 0xff
 8001e46:	f7fe fdef 	bl	8000a28 <writeReg>
  writeReg(0x00, 0x00);
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f7fe fdeb 	bl	8000a28 <writeReg>

  writeReg(0xFF, 0x06);
 8001e52:	2106      	movs	r1, #6
 8001e54:	20ff      	movs	r0, #255	@ 0xff
 8001e56:	f7fe fde7 	bl	8000a28 <writeReg>
  writeReg(0x83, readReg(0x83) | 0x04);
 8001e5a:	2083      	movs	r0, #131	@ 0x83
 8001e5c:	f7fe fe38 	bl	8000ad0 <readReg>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f043 0304 	orr.w	r3, r3, #4
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	4619      	mov	r1, r3
 8001e6a:	2083      	movs	r0, #131	@ 0x83
 8001e6c:	f7fe fddc 	bl	8000a28 <writeReg>
  writeReg(0xFF, 0x07);
 8001e70:	2107      	movs	r1, #7
 8001e72:	20ff      	movs	r0, #255	@ 0xff
 8001e74:	f7fe fdd8 	bl	8000a28 <writeReg>
  writeReg(0x81, 0x01);
 8001e78:	2101      	movs	r1, #1
 8001e7a:	2081      	movs	r0, #129	@ 0x81
 8001e7c:	f7fe fdd4 	bl	8000a28 <writeReg>

  writeReg(0x80, 0x01);
 8001e80:	2101      	movs	r1, #1
 8001e82:	2080      	movs	r0, #128	@ 0x80
 8001e84:	f7fe fdd0 	bl	8000a28 <writeReg>

  writeReg(0x94, 0x6b);
 8001e88:	216b      	movs	r1, #107	@ 0x6b
 8001e8a:	2094      	movs	r0, #148	@ 0x94
 8001e8c:	f7fe fdcc 	bl	8000a28 <writeReg>
  writeReg(0x83, 0x00);
 8001e90:	2100      	movs	r1, #0
 8001e92:	2083      	movs	r0, #131	@ 0x83
 8001e94:	f7fe fdc8 	bl	8000a28 <writeReg>
  startTimeout();
 8001e98:	f001 f90c 	bl	80030b4 <HAL_GetTick>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f50 <getSpadInfo+0x120>)
 8001ea2:	801a      	strh	r2, [r3, #0]
  while (readReg(0x83) == 0x00)
 8001ea4:	e011      	b.n	8001eca <getSpadInfo+0x9a>
  {
    if (checkTimeoutExpired()) { return false; }
 8001ea6:	4b2b      	ldr	r3, [pc, #172]	@ (8001f54 <getSpadInfo+0x124>)
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00d      	beq.n	8001eca <getSpadInfo+0x9a>
 8001eae:	f001 f901 	bl	80030b4 <HAL_GetTick>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4b25      	ldr	r3, [pc, #148]	@ (8001f50 <getSpadInfo+0x120>)
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	4a25      	ldr	r2, [pc, #148]	@ (8001f54 <getSpadInfo+0x124>)
 8001ec0:	8812      	ldrh	r2, [r2, #0]
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	dd01      	ble.n	8001eca <getSpadInfo+0x9a>
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e03d      	b.n	8001f46 <getSpadInfo+0x116>
  while (readReg(0x83) == 0x00)
 8001eca:	2083      	movs	r0, #131	@ 0x83
 8001ecc:	f7fe fe00 	bl	8000ad0 <readReg>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0e7      	beq.n	8001ea6 <getSpadInfo+0x76>
  }
  writeReg(0x83, 0x01);
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	2083      	movs	r0, #131	@ 0x83
 8001eda:	f7fe fda5 	bl	8000a28 <writeReg>
  tmp = readReg(0x92);
 8001ede:	2092      	movs	r0, #146	@ 0x92
 8001ee0:	f7fe fdf6 	bl	8000ad0 <readReg>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	73fb      	strb	r3, [r7, #15]

  *count = tmp & 0x7f;
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	701a      	strb	r2, [r3, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	09db      	lsrs	r3, r3, #7
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	701a      	strb	r2, [r3, #0]

  writeReg(0x81, 0x00);
 8001efe:	2100      	movs	r1, #0
 8001f00:	2081      	movs	r0, #129	@ 0x81
 8001f02:	f7fe fd91 	bl	8000a28 <writeReg>
  writeReg(0xFF, 0x06);
 8001f06:	2106      	movs	r1, #6
 8001f08:	20ff      	movs	r0, #255	@ 0xff
 8001f0a:	f7fe fd8d 	bl	8000a28 <writeReg>
  writeReg(0x83, readReg(0x83)  & ~0x04);
 8001f0e:	2083      	movs	r0, #131	@ 0x83
 8001f10:	f7fe fdde 	bl	8000ad0 <readReg>
 8001f14:	4603      	mov	r3, r0
 8001f16:	f023 0304 	bic.w	r3, r3, #4
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	2083      	movs	r0, #131	@ 0x83
 8001f20:	f7fe fd82 	bl	8000a28 <writeReg>
  writeReg(0xFF, 0x01);
 8001f24:	2101      	movs	r1, #1
 8001f26:	20ff      	movs	r0, #255	@ 0xff
 8001f28:	f7fe fd7e 	bl	8000a28 <writeReg>
  writeReg(0x00, 0x01);
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f7fe fd7a 	bl	8000a28 <writeReg>

  writeReg(0xFF, 0x00);
 8001f34:	2100      	movs	r1, #0
 8001f36:	20ff      	movs	r0, #255	@ 0xff
 8001f38:	f7fe fd76 	bl	8000a28 <writeReg>
  writeReg(0x80, 0x00);
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	2080      	movs	r0, #128	@ 0x80
 8001f40:	f7fe fd72 	bl	8000a28 <writeReg>

  return true;
 8001f44:	2301      	movs	r3, #1
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000084 	.word	0x20000084
 8001f54:	20000080 	.word	0x20000080

08001f58 <getSequenceStepEnables>:

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void getSequenceStepEnables(SequenceStepEnables * enables)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 8001f60:	2001      	movs	r0, #1
 8001f62:	f7fe fdb5 	bl	8000ad0 <readReg>
 8001f66:	4603      	mov	r3, r0
 8001f68:	73fb      	strb	r3, [r7, #15]

  enables->tcc          = (sequence_config >> 4) & 0x1;
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	091b      	lsrs	r3, r3, #4
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	701a      	strb	r2, [r3, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	08db      	lsrs	r3, r3, #3
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	709a      	strb	r2, [r3, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
 8001f8c:	089b      	lsrs	r3, r3, #2
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	705a      	strb	r2, [r3, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	099b      	lsrs	r3, r3, #6
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	70da      	strb	r2, [r3, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	09db      	lsrs	r3, r3, #7
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	711a      	strb	r2, [r3, #4]
}
 8001fb4:	bf00      	nop
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <getSequenceStepTimeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f7ff fad6 	bl	8001578 <getVcselPulsePeriod>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	461a      	mov	r2, r3
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8001fd4:	2046      	movs	r0, #70	@ 0x46
 8001fd6:	f7fe fd7b 	bl	8000ad0 <readReg>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	3301      	adds	r3, #1
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	f000 f887 	bl	8002104 <timeoutMclksToMicroseconds>
 8001ff6:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001ffc:	2051      	movs	r0, #81	@ 0x51
 8001ffe:	f7fe fd93 	bl	8000b28 <readReg16Bit>
 8002002:	4603      	mov	r3, r0
 8002004:	4618      	mov	r0, r3
 8002006:	f000 f83e 	bl	8002086 <decodeTimeout>
 800200a:	4603      	mov	r3, r0
 800200c:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 800201a:	b2db      	uxtb	r3, r3
 800201c:	4619      	mov	r1, r3
 800201e:	4610      	mov	r0, r2
 8002020:	f000 f870 	bl	8002104 <timeoutMclksToMicroseconds>
 8002024:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 800202a:	2001      	movs	r0, #1
 800202c:	f7ff faa4 	bl	8001578 <getVcselPulsePeriod>
 8002030:	4603      	mov	r3, r0
 8002032:	461a      	mov	r2, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8002038:	2071      	movs	r0, #113	@ 0x71
 800203a:	f7fe fd75 	bl	8000b28 <readReg16Bit>
 800203e:	4603      	mov	r3, r0
 8002040:	4618      	mov	r0, r3
 8002042:	f000 f820 	bl	8002086 <decodeTimeout>
 8002046:	4603      	mov	r3, r0
 8002048:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	811a      	strh	r2, [r3, #8]

  if (enables->pre_range)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	78db      	ldrb	r3, [r3, #3]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d007      	beq.n	8002066 <getSequenceStepTimeouts+0xaa>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	891a      	ldrh	r2, [r3, #8]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	88db      	ldrh	r3, [r3, #6]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	b29a      	uxth	r2, r3
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 800206e:	b2db      	uxtb	r3, r3
 8002070:	4619      	mov	r1, r3
 8002072:	4610      	mov	r0, r2
 8002074:	f000 f846 	bl	8002104 <timeoutMclksToMicroseconds>
 8002078:	4602      	mov	r2, r0
  timeouts->final_range_us =
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	615a      	str	r2, [r3, #20]
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t decodeTimeout(uint16_t reg_val)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	4603      	mov	r3, r0
 800208e:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8002090:	88fb      	ldrh	r3, [r7, #6]
 8002092:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8002094:	88fa      	ldrh	r2, [r7, #6]
 8002096:	0a12      	lsrs	r2, r2, #8
 8002098:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 800209a:	4093      	lsls	r3, r2
 800209c:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 800209e:	3301      	adds	r3, #1
 80020a0:	b29b      	uxth	r3, r3
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b085      	sub	sp, #20
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4603      	mov	r3, r0
 80020b6:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 80020c0:	88fb      	ldrh	r3, [r7, #6]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d016      	beq.n	80020f4 <encodeTimeout+0x46>
  {
    ls_byte = timeout_mclks - 1;
 80020c6:	88fb      	ldrh	r3, [r7, #6]
 80020c8:	3b01      	subs	r3, #1
 80020ca:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 80020cc:	e005      	b.n	80020da <encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	085b      	lsrs	r3, r3, #1
 80020d2:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 80020d4:	897b      	ldrh	r3, [r7, #10]
 80020d6:	3301      	adds	r3, #1
 80020d8:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2bff      	cmp	r3, #255	@ 0xff
 80020de:	d8f6      	bhi.n	80020ce <encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 80020e0:	897b      	ldrh	r3, [r7, #10]
 80020e2:	021b      	lsls	r3, r3, #8
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	4313      	orrs	r3, r2
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	e000      	b.n	80020f6 <encodeTimeout+0x48>
  }
  else { return 0; }
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	460a      	mov	r2, r1
 800210e:	80fb      	strh	r3, [r7, #6]
 8002110:	4613      	mov	r3, r2
 8002112:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8002114:	797b      	ldrb	r3, [r7, #5]
 8002116:	4a0d      	ldr	r2, [pc, #52]	@ (800214c <timeoutMclksToMicroseconds+0x48>)
 8002118:	fb02 f303 	mul.w	r3, r2, r3
 800211c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8002120:	4a0b      	ldr	r2, [pc, #44]	@ (8002150 <timeoutMclksToMicroseconds+0x4c>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	099b      	lsrs	r3, r3, #6
 8002128:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 800212a:	88fb      	ldrh	r3, [r7, #6]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	fb03 f202 	mul.w	r2, r3, r2
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	085b      	lsrs	r3, r3, #1
 8002136:	4413      	add	r3, r2
 8002138:	4a05      	ldr	r2, [pc, #20]	@ (8002150 <timeoutMclksToMicroseconds+0x4c>)
 800213a:	fba2 2303 	umull	r2, r3, r2, r3
 800213e:	099b      	lsrs	r3, r3, #6
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	003a2f00 	.word	0x003a2f00
 8002150:	10624dd3 	.word	0x10624dd3

08002154 <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	4a0d      	ldr	r2, [pc, #52]	@ (8002198 <timeoutMicrosecondsToMclks+0x44>)
 8002164:	fb02 f303 	mul.w	r3, r2, r3
 8002168:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800216c:	4a0b      	ldr	r2, [pc, #44]	@ (800219c <timeoutMicrosecondsToMclks+0x48>)
 800216e:	fba2 2303 	umull	r2, r3, r2, r3
 8002172:	099b      	lsrs	r3, r3, #6
 8002174:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800217c:	fb03 f202 	mul.w	r2, r3, r2
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	085b      	lsrs	r3, r3, #1
 8002184:	441a      	add	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800218c:	4618      	mov	r0, r3
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	003a2f00 	.word	0x003a2f00
 800219c:	10624dd3 	.word	0x10624dd3

080021a0 <performSingleRefCalibration>:


// based on VL53L0X_perform_single_ref_calibration()
bool performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	4619      	mov	r1, r3
 80021b4:	2000      	movs	r0, #0
 80021b6:	f7fe fc37 	bl	8000a28 <writeReg>

  startTimeout();
 80021ba:	f000 ff7b 	bl	80030b4 <HAL_GetTick>
 80021be:	4603      	mov	r3, r0
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	4b15      	ldr	r3, [pc, #84]	@ (8002218 <performSingleRefCalibration+0x78>)
 80021c4:	801a      	strh	r2, [r3, #0]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80021c6:	e011      	b.n	80021ec <performSingleRefCalibration+0x4c>
  {
    if (checkTimeoutExpired()) { return false; }
 80021c8:	4b14      	ldr	r3, [pc, #80]	@ (800221c <performSingleRefCalibration+0x7c>)
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00d      	beq.n	80021ec <performSingleRefCalibration+0x4c>
 80021d0:	f000 ff70 	bl	80030b4 <HAL_GetTick>
 80021d4:	4603      	mov	r3, r0
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	4b0f      	ldr	r3, [pc, #60]	@ (8002218 <performSingleRefCalibration+0x78>)
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	4a0e      	ldr	r2, [pc, #56]	@ (800221c <performSingleRefCalibration+0x7c>)
 80021e2:	8812      	ldrh	r2, [r2, #0]
 80021e4:	4293      	cmp	r3, r2
 80021e6:	dd01      	ble.n	80021ec <performSingleRefCalibration+0x4c>
 80021e8:	2300      	movs	r3, #0
 80021ea:	e010      	b.n	800220e <performSingleRefCalibration+0x6e>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80021ec:	2013      	movs	r0, #19
 80021ee:	f7fe fc6f 	bl	8000ad0 <readReg>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0e5      	beq.n	80021c8 <performSingleRefCalibration+0x28>
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80021fc:	2101      	movs	r1, #1
 80021fe:	200b      	movs	r0, #11
 8002200:	f7fe fc12 	bl	8000a28 <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 8002204:	2100      	movs	r1, #0
 8002206:	2000      	movs	r0, #0
 8002208:	f7fe fc0e 	bl	8000a28 <writeReg>

  return true;
 800220c:	2301      	movs	r3, #1
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000084 	.word	0x20000084
 800221c:	20000080 	.word	0x20000080

08002220 <performSingleRefCalibration_x>:

bool performSingleRefCalibration_x(uint8_t vhv_init_byte, statInfo_t_VL53L0X *sensorInfo)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	6039      	str	r1, [r7, #0]
 800222a:	71fb      	strb	r3, [r7, #7]
  writeReg_x(SYSRANGE_START, 0x01 | vhv_init_byte, sensorInfo->address); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	b2d9      	uxtb	r1, r3
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	7a5b      	ldrb	r3, [r3, #9]
 8002238:	461a      	mov	r2, r3
 800223a:	2000      	movs	r0, #0
 800223c:	f7fe fcf8 	bl	8000c30 <writeReg_x>

  startTimeout();
 8002240:	f000 ff38 	bl	80030b4 <HAL_GetTick>
 8002244:	4603      	mov	r3, r0
 8002246:	b29a      	uxth	r2, r3
 8002248:	4b19      	ldr	r3, [pc, #100]	@ (80022b0 <performSingleRefCalibration_x+0x90>)
 800224a:	801a      	strh	r2, [r3, #0]
  while ((readReg_x(RESULT_INTERRUPT_STATUS, sensorInfo->address) & 0x07) == 0)
 800224c:	e011      	b.n	8002272 <performSingleRefCalibration_x+0x52>
  {
    if (checkTimeoutExpired()) { return false; }
 800224e:	4b19      	ldr	r3, [pc, #100]	@ (80022b4 <performSingleRefCalibration_x+0x94>)
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00d      	beq.n	8002272 <performSingleRefCalibration_x+0x52>
 8002256:	f000 ff2d 	bl	80030b4 <HAL_GetTick>
 800225a:	4603      	mov	r3, r0
 800225c:	b29b      	uxth	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	4b13      	ldr	r3, [pc, #76]	@ (80022b0 <performSingleRefCalibration_x+0x90>)
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	4a13      	ldr	r2, [pc, #76]	@ (80022b4 <performSingleRefCalibration_x+0x94>)
 8002268:	8812      	ldrh	r2, [r2, #0]
 800226a:	4293      	cmp	r3, r2
 800226c:	dd01      	ble.n	8002272 <performSingleRefCalibration_x+0x52>
 800226e:	2300      	movs	r3, #0
 8002270:	e019      	b.n	80022a6 <performSingleRefCalibration_x+0x86>
  while ((readReg_x(RESULT_INTERRUPT_STATUS, sensorInfo->address) & 0x07) == 0)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	7a5b      	ldrb	r3, [r3, #9]
 8002276:	4619      	mov	r1, r3
 8002278:	2013      	movs	r0, #19
 800227a:	f7fe fd29 	bl	8000cd0 <readReg_x>
 800227e:	4603      	mov	r3, r0
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0e2      	beq.n	800224e <performSingleRefCalibration_x+0x2e>
  }

  writeReg_x(SYSTEM_INTERRUPT_CLEAR, 0x01, sensorInfo->address);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	7a5b      	ldrb	r3, [r3, #9]
 800228c:	461a      	mov	r2, r3
 800228e:	2101      	movs	r1, #1
 8002290:	200b      	movs	r0, #11
 8002292:	f7fe fccd 	bl	8000c30 <writeReg_x>

  writeReg_x(SYSRANGE_START, 0x00, sensorInfo->address);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	7a5b      	ldrb	r3, [r3, #9]
 800229a:	461a      	mov	r2, r3
 800229c:	2100      	movs	r1, #0
 800229e:	2000      	movs	r0, #0
 80022a0:	f7fe fcc6 	bl	8000c30 <writeReg_x>

  return true;
 80022a4:	2301      	movs	r3, #1
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000084 	.word	0x20000084
 80022b4:	20000080 	.word	0x20000080

080022b8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4a07      	ldr	r2, [pc, #28]	@ (80022e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80022c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	4a06      	ldr	r2, [pc, #24]	@ (80022e8 <vApplicationGetIdleTaskMemory+0x30>)
 80022ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2280      	movs	r2, #128	@ 0x80
 80022d4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80022d6:	bf00      	nop
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	200000e8 	.word	0x200000e8
 80022e8:	20000188 	.word	0x20000188

080022ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022ec:	b5b0      	push	{r4, r5, r7, lr}
 80022ee:	b096      	sub	sp, #88	@ 0x58
 80022f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022f2:	f000 fea9 	bl	8003048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022f6:	f000 fa7f 	bl	80027f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022fa:	f000 fb75 	bl	80029e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80022fe:	f000 faed 	bl	80028dc <MX_I2C1_Init>
  MX_I2C2_Init();
 8002302:	f000 fb19 	bl	8002938 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8002306:	f000 fb45 	bl	8002994 <MX_USART2_UART_Init>
  set_TOF6();
  set_TOF7();
  set_TOF8();
  setup_sensor();*/

  HAL_GPIO_WritePin(V1_GPIO_Port, V1_Pin, GPIO_PIN_RESET);
 800230a:	2200      	movs	r2, #0
 800230c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002310:	48a3      	ldr	r0, [pc, #652]	@ (80025a0 <main+0x2b4>)
 8002312:	f001 f975 	bl	8003600 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(V2_GPIO_Port, V2_Pin, GPIO_PIN_RESET);
 8002316:	2200      	movs	r2, #0
 8002318:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800231c:	48a1      	ldr	r0, [pc, #644]	@ (80025a4 <main+0x2b8>)
 800231e:	f001 f96f 	bl	8003600 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(V3_GPIO_Port, V3_Pin, GPIO_PIN_RESET);
 8002322:	2200      	movs	r2, #0
 8002324:	2110      	movs	r1, #16
 8002326:	48a0      	ldr	r0, [pc, #640]	@ (80025a8 <main+0x2bc>)
 8002328:	f001 f96a 	bl	8003600 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(V4_GPIO_Port, V4_Pin, GPIO_PIN_RESET);
 800232c:	2200      	movs	r2, #0
 800232e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002332:	489b      	ldr	r0, [pc, #620]	@ (80025a0 <main+0x2b4>)
 8002334:	f001 f964 	bl	8003600 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(V5_GPIO_Port, V5_Pin, GPIO_PIN_RESET);
 8002338:	2200      	movs	r2, #0
 800233a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800233e:	489a      	ldr	r0, [pc, #616]	@ (80025a8 <main+0x2bc>)
 8002340:	f001 f95e 	bl	8003600 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(V6_GPIO_Port, V6_Pin, GPIO_PIN_RESET);
 8002344:	2200      	movs	r2, #0
 8002346:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800234a:	4897      	ldr	r0, [pc, #604]	@ (80025a8 <main+0x2bc>)
 800234c:	f001 f958 	bl	8003600 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(V7_GPIO_Port, V7_Pin, GPIO_PIN_RESET);
 8002350:	2200      	movs	r2, #0
 8002352:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002356:	4894      	ldr	r0, [pc, #592]	@ (80025a8 <main+0x2bc>)
 8002358:	f001 f952 	bl	8003600 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(V8_GPIO_Port, V8_Pin, GPIO_PIN_RESET);
 800235c:	2200      	movs	r2, #0
 800235e:	2120      	movs	r1, #32
 8002360:	4890      	ldr	r0, [pc, #576]	@ (80025a4 <main+0x2b8>)
 8002362:	f001 f94d 	bl	8003600 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8002366:	200a      	movs	r0, #10
 8002368:	f000 feb0 	bl	80030cc <HAL_Delay>

  //sensor 1
   HAL_GPIO_WritePin(V1_GPIO_Port, V1_Pin, GPIO_PIN_SET);
 800236c:	2201      	movs	r2, #1
 800236e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002372:	488b      	ldr	r0, [pc, #556]	@ (80025a0 <main+0x2b4>)
 8002374:	f001 f944 	bl	8003600 <HAL_GPIO_WritePin>
   HAL_Delay(50);
 8002378:	2032      	movs	r0, #50	@ 0x32
 800237a:	f000 fea7 	bl	80030cc <HAL_Delay>
   if(initVL53L0X(1, &hi2c1)){
 800237e:	498b      	ldr	r1, [pc, #556]	@ (80025ac <main+0x2c0>)
 8002380:	2001      	movs	r0, #1
 8002382:	f7fe fd33 	bl	8000dec <initVL53L0X>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d007      	beq.n	800239c <main+0xb0>
 	  HAL_UART_Transmit(&huart2, "sensor 1 initialized/n", strlen("sensor 1 initialized"), HAL_MAX_DELAY);
 800238c:	f04f 33ff 	mov.w	r3, #4294967295
 8002390:	2214      	movs	r2, #20
 8002392:	4987      	ldr	r1, [pc, #540]	@ (80025b0 <main+0x2c4>)
 8002394:	4887      	ldr	r0, [pc, #540]	@ (80025b4 <main+0x2c8>)
 8002396:	f003 facd 	bl	8005934 <HAL_UART_Transmit>
 800239a:	e006      	b.n	80023aa <main+0xbe>
   }
   else{
	   HAL_UART_Transmit(&huart2, "error", strlen("error"), HAL_MAX_DELAY);
 800239c:	f04f 33ff 	mov.w	r3, #4294967295
 80023a0:	2205      	movs	r2, #5
 80023a2:	4985      	ldr	r1, [pc, #532]	@ (80025b8 <main+0x2cc>)
 80023a4:	4883      	ldr	r0, [pc, #524]	@ (80025b4 <main+0x2c8>)
 80023a6:	f003 fac5 	bl	8005934 <HAL_UART_Transmit>
   }

  setAddress_VL53L0X(0x30);
 80023aa:	2030      	movs	r0, #48	@ 0x30
 80023ac:	f7fe fd0e 	bl	8000dcc <setAddress_VL53L0X>
  extraStats1.address=0x30;
 80023b0:	4b82      	ldr	r3, [pc, #520]	@ (80025bc <main+0x2d0>)
 80023b2:	2230      	movs	r2, #48	@ 0x30
 80023b4:	725a      	strb	r2, [r3, #9]

  //sensor 2
   HAL_GPIO_WritePin(V2_GPIO_Port, V2_Pin, GPIO_PIN_SET);
 80023b6:	2201      	movs	r2, #1
 80023b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023bc:	4879      	ldr	r0, [pc, #484]	@ (80025a4 <main+0x2b8>)
 80023be:	f001 f91f 	bl	8003600 <HAL_GPIO_WritePin>
   HAL_Delay(50);
 80023c2:	2032      	movs	r0, #50	@ 0x32
 80023c4:	f000 fe82 	bl	80030cc <HAL_Delay>

  if(initVL53L0X(1, &hi2c1)){
 80023c8:	4978      	ldr	r1, [pc, #480]	@ (80025ac <main+0x2c0>)
 80023ca:	2001      	movs	r0, #1
 80023cc:	f7fe fd0e 	bl	8000dec <initVL53L0X>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d007      	beq.n	80023e6 <main+0xfa>
   HAL_UART_Transmit(&huart2, "sensor 2 initialized/n", strlen("sensor 2 initialized"), HAL_MAX_DELAY);
 80023d6:	f04f 33ff 	mov.w	r3, #4294967295
 80023da:	2214      	movs	r2, #20
 80023dc:	4978      	ldr	r1, [pc, #480]	@ (80025c0 <main+0x2d4>)
 80023de:	4875      	ldr	r0, [pc, #468]	@ (80025b4 <main+0x2c8>)
 80023e0:	f003 faa8 	bl	8005934 <HAL_UART_Transmit>
 80023e4:	e006      	b.n	80023f4 <main+0x108>
   }
  else{
 	   HAL_UART_Transmit(&huart2, "error", strlen("error"), HAL_MAX_DELAY);
 80023e6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ea:	2205      	movs	r2, #5
 80023ec:	4972      	ldr	r1, [pc, #456]	@ (80025b8 <main+0x2cc>)
 80023ee:	4871      	ldr	r0, [pc, #452]	@ (80025b4 <main+0x2c8>)
 80023f0:	f003 faa0 	bl	8005934 <HAL_UART_Transmit>
    }
//
  setAddress_VL53L0X(0x32);
 80023f4:	2032      	movs	r0, #50	@ 0x32
 80023f6:	f7fe fce9 	bl	8000dcc <setAddress_VL53L0X>
   extraStats2.address=0x32;
 80023fa:	4b72      	ldr	r3, [pc, #456]	@ (80025c4 <main+0x2d8>)
 80023fc:	2232      	movs	r2, #50	@ 0x32
 80023fe:	725a      	strb	r2, [r3, #9]

   //sensor 3
   HAL_GPIO_WritePin(V3_GPIO_Port, V3_Pin, GPIO_PIN_SET);
 8002400:	2201      	movs	r2, #1
 8002402:	2110      	movs	r1, #16
 8002404:	4868      	ldr	r0, [pc, #416]	@ (80025a8 <main+0x2bc>)
 8002406:	f001 f8fb 	bl	8003600 <HAL_GPIO_WritePin>
   HAL_Delay(50);
 800240a:	2032      	movs	r0, #50	@ 0x32
 800240c:	f000 fe5e 	bl	80030cc <HAL_Delay>

  if(initVL53L0X(1, &hi2c1)){
 8002410:	4966      	ldr	r1, [pc, #408]	@ (80025ac <main+0x2c0>)
 8002412:	2001      	movs	r0, #1
 8002414:	f7fe fcea 	bl	8000dec <initVL53L0X>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d007      	beq.n	800242e <main+0x142>
   HAL_UART_Transmit(&huart2, "sensor 3 initialized/n", strlen("sensor 3 initialized"), HAL_MAX_DELAY);
 800241e:	f04f 33ff 	mov.w	r3, #4294967295
 8002422:	2214      	movs	r2, #20
 8002424:	4968      	ldr	r1, [pc, #416]	@ (80025c8 <main+0x2dc>)
 8002426:	4863      	ldr	r0, [pc, #396]	@ (80025b4 <main+0x2c8>)
 8002428:	f003 fa84 	bl	8005934 <HAL_UART_Transmit>
 800242c:	e006      	b.n	800243c <main+0x150>
   }
  else{
 	   HAL_UART_Transmit(&huart2, "error", strlen("error"), HAL_MAX_DELAY);
 800242e:	f04f 33ff 	mov.w	r3, #4294967295
 8002432:	2205      	movs	r2, #5
 8002434:	4960      	ldr	r1, [pc, #384]	@ (80025b8 <main+0x2cc>)
 8002436:	485f      	ldr	r0, [pc, #380]	@ (80025b4 <main+0x2c8>)
 8002438:	f003 fa7c 	bl	8005934 <HAL_UART_Transmit>
    }
//
  setAddress_VL53L0X(0x34);
 800243c:	2034      	movs	r0, #52	@ 0x34
 800243e:	f7fe fcc5 	bl	8000dcc <setAddress_VL53L0X>
   extraStats3.address=0x34;
 8002442:	4b62      	ldr	r3, [pc, #392]	@ (80025cc <main+0x2e0>)
 8002444:	2234      	movs	r2, #52	@ 0x34
 8002446:	725a      	strb	r2, [r3, #9]

   //sensor 4
   HAL_GPIO_WritePin(V4_GPIO_Port, V4_Pin, GPIO_PIN_SET);
 8002448:	2201      	movs	r2, #1
 800244a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800244e:	4854      	ldr	r0, [pc, #336]	@ (80025a0 <main+0x2b4>)
 8002450:	f001 f8d6 	bl	8003600 <HAL_GPIO_WritePin>
   HAL_Delay(50);
 8002454:	2032      	movs	r0, #50	@ 0x32
 8002456:	f000 fe39 	bl	80030cc <HAL_Delay>

  if(initVL53L0X(1, &hi2c1)){
 800245a:	4954      	ldr	r1, [pc, #336]	@ (80025ac <main+0x2c0>)
 800245c:	2001      	movs	r0, #1
 800245e:	f7fe fcc5 	bl	8000dec <initVL53L0X>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d007      	beq.n	8002478 <main+0x18c>
   HAL_UART_Transmit(&huart2, "sensor 4 initialized/n", strlen("sensor 4 initialized"), HAL_MAX_DELAY);
 8002468:	f04f 33ff 	mov.w	r3, #4294967295
 800246c:	2214      	movs	r2, #20
 800246e:	4958      	ldr	r1, [pc, #352]	@ (80025d0 <main+0x2e4>)
 8002470:	4850      	ldr	r0, [pc, #320]	@ (80025b4 <main+0x2c8>)
 8002472:	f003 fa5f 	bl	8005934 <HAL_UART_Transmit>
 8002476:	e006      	b.n	8002486 <main+0x19a>
   }
  else{
 	   HAL_UART_Transmit(&huart2, "error", strlen("error"), HAL_MAX_DELAY);
 8002478:	f04f 33ff 	mov.w	r3, #4294967295
 800247c:	2205      	movs	r2, #5
 800247e:	494e      	ldr	r1, [pc, #312]	@ (80025b8 <main+0x2cc>)
 8002480:	484c      	ldr	r0, [pc, #304]	@ (80025b4 <main+0x2c8>)
 8002482:	f003 fa57 	bl	8005934 <HAL_UART_Transmit>
    }
//
  setAddress_VL53L0X(0x36);
 8002486:	2036      	movs	r0, #54	@ 0x36
 8002488:	f7fe fca0 	bl	8000dcc <setAddress_VL53L0X>
   extraStats4.address=0x36;
 800248c:	4b51      	ldr	r3, [pc, #324]	@ (80025d4 <main+0x2e8>)
 800248e:	2236      	movs	r2, #54	@ 0x36
 8002490:	725a      	strb	r2, [r3, #9]


   //sensor 5
   HAL_GPIO_WritePin(V5_GPIO_Port, V5_Pin, GPIO_PIN_SET);
 8002492:	2201      	movs	r2, #1
 8002494:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002498:	4843      	ldr	r0, [pc, #268]	@ (80025a8 <main+0x2bc>)
 800249a:	f001 f8b1 	bl	8003600 <HAL_GPIO_WritePin>
   HAL_Delay(50);
 800249e:	2032      	movs	r0, #50	@ 0x32
 80024a0:	f000 fe14 	bl	80030cc <HAL_Delay>
   if(initVL53L0X(1, &hi2c1)){
 80024a4:	4941      	ldr	r1, [pc, #260]	@ (80025ac <main+0x2c0>)
 80024a6:	2001      	movs	r0, #1
 80024a8:	f7fe fca0 	bl	8000dec <initVL53L0X>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d007      	beq.n	80024c2 <main+0x1d6>
 	  HAL_UART_Transmit(&huart2, "sensor 5 initialized/n", strlen("sensor 5 initialized"), HAL_MAX_DELAY);
 80024b2:	f04f 33ff 	mov.w	r3, #4294967295
 80024b6:	2214      	movs	r2, #20
 80024b8:	4947      	ldr	r1, [pc, #284]	@ (80025d8 <main+0x2ec>)
 80024ba:	483e      	ldr	r0, [pc, #248]	@ (80025b4 <main+0x2c8>)
 80024bc:	f003 fa3a 	bl	8005934 <HAL_UART_Transmit>
 80024c0:	e006      	b.n	80024d0 <main+0x1e4>
   }
   else{
	   HAL_UART_Transmit(&huart2, "error", strlen("error"), HAL_MAX_DELAY);
 80024c2:	f04f 33ff 	mov.w	r3, #4294967295
 80024c6:	2205      	movs	r2, #5
 80024c8:	493b      	ldr	r1, [pc, #236]	@ (80025b8 <main+0x2cc>)
 80024ca:	483a      	ldr	r0, [pc, #232]	@ (80025b4 <main+0x2c8>)
 80024cc:	f003 fa32 	bl	8005934 <HAL_UART_Transmit>
   }

  setAddress_VL53L0X(0x38);
 80024d0:	2038      	movs	r0, #56	@ 0x38
 80024d2:	f7fe fc7b 	bl	8000dcc <setAddress_VL53L0X>
  extraStats5.address=0x38;
 80024d6:	4b41      	ldr	r3, [pc, #260]	@ (80025dc <main+0x2f0>)
 80024d8:	2238      	movs	r2, #56	@ 0x38
 80024da:	725a      	strb	r2, [r3, #9]

  //sensor 6
   HAL_GPIO_WritePin(V6_GPIO_Port, V6_Pin, GPIO_PIN_SET);
 80024dc:	2201      	movs	r2, #1
 80024de:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80024e2:	4831      	ldr	r0, [pc, #196]	@ (80025a8 <main+0x2bc>)
 80024e4:	f001 f88c 	bl	8003600 <HAL_GPIO_WritePin>
   HAL_Delay(50);
 80024e8:	2032      	movs	r0, #50	@ 0x32
 80024ea:	f000 fdef 	bl	80030cc <HAL_Delay>

  if(initVL53L0X(1, &hi2c1)){
 80024ee:	492f      	ldr	r1, [pc, #188]	@ (80025ac <main+0x2c0>)
 80024f0:	2001      	movs	r0, #1
 80024f2:	f7fe fc7b 	bl	8000dec <initVL53L0X>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d007      	beq.n	800250c <main+0x220>
   HAL_UART_Transmit(&huart2, "sensor 6 initialized/n", strlen("sensor 6 initialized"), HAL_MAX_DELAY);
 80024fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002500:	2214      	movs	r2, #20
 8002502:	4937      	ldr	r1, [pc, #220]	@ (80025e0 <main+0x2f4>)
 8002504:	482b      	ldr	r0, [pc, #172]	@ (80025b4 <main+0x2c8>)
 8002506:	f003 fa15 	bl	8005934 <HAL_UART_Transmit>
 800250a:	e006      	b.n	800251a <main+0x22e>
   }
  else{
 	   HAL_UART_Transmit(&huart2, "error", strlen("error"), HAL_MAX_DELAY);
 800250c:	f04f 33ff 	mov.w	r3, #4294967295
 8002510:	2205      	movs	r2, #5
 8002512:	4929      	ldr	r1, [pc, #164]	@ (80025b8 <main+0x2cc>)
 8002514:	4827      	ldr	r0, [pc, #156]	@ (80025b4 <main+0x2c8>)
 8002516:	f003 fa0d 	bl	8005934 <HAL_UART_Transmit>
    }
//
  setAddress_VL53L0X(0x40);
 800251a:	2040      	movs	r0, #64	@ 0x40
 800251c:	f7fe fc56 	bl	8000dcc <setAddress_VL53L0X>
   extraStats6.address=0x40;
 8002520:	4b30      	ldr	r3, [pc, #192]	@ (80025e4 <main+0x2f8>)
 8002522:	2240      	movs	r2, #64	@ 0x40
 8002524:	725a      	strb	r2, [r3, #9]

   //sensor 7
   HAL_GPIO_WritePin(V7_GPIO_Port, V7_Pin, GPIO_PIN_SET);
 8002526:	2201      	movs	r2, #1
 8002528:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800252c:	481e      	ldr	r0, [pc, #120]	@ (80025a8 <main+0x2bc>)
 800252e:	f001 f867 	bl	8003600 <HAL_GPIO_WritePin>
   HAL_Delay(50);
 8002532:	2032      	movs	r0, #50	@ 0x32
 8002534:	f000 fdca 	bl	80030cc <HAL_Delay>

  if(initVL53L0X(1, &hi2c1)){
 8002538:	491c      	ldr	r1, [pc, #112]	@ (80025ac <main+0x2c0>)
 800253a:	2001      	movs	r0, #1
 800253c:	f7fe fc56 	bl	8000dec <initVL53L0X>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d007      	beq.n	8002556 <main+0x26a>
   HAL_UART_Transmit(&huart2, "sensor 7 initialized/n", strlen("sensor 7 initialized"), HAL_MAX_DELAY);
 8002546:	f04f 33ff 	mov.w	r3, #4294967295
 800254a:	2214      	movs	r2, #20
 800254c:	4926      	ldr	r1, [pc, #152]	@ (80025e8 <main+0x2fc>)
 800254e:	4819      	ldr	r0, [pc, #100]	@ (80025b4 <main+0x2c8>)
 8002550:	f003 f9f0 	bl	8005934 <HAL_UART_Transmit>
 8002554:	e006      	b.n	8002564 <main+0x278>
   }
  else{
 	   HAL_UART_Transmit(&huart2, "error", strlen("error"), HAL_MAX_DELAY);
 8002556:	f04f 33ff 	mov.w	r3, #4294967295
 800255a:	2205      	movs	r2, #5
 800255c:	4916      	ldr	r1, [pc, #88]	@ (80025b8 <main+0x2cc>)
 800255e:	4815      	ldr	r0, [pc, #84]	@ (80025b4 <main+0x2c8>)
 8002560:	f003 f9e8 	bl	8005934 <HAL_UART_Transmit>
    }
//
  setAddress_VL53L0X(0x42);
 8002564:	2042      	movs	r0, #66	@ 0x42
 8002566:	f7fe fc31 	bl	8000dcc <setAddress_VL53L0X>
   extraStats7.address=0x42;
 800256a:	4b20      	ldr	r3, [pc, #128]	@ (80025ec <main+0x300>)
 800256c:	2242      	movs	r2, #66	@ 0x42
 800256e:	725a      	strb	r2, [r3, #9]

   //sensor 8
   HAL_GPIO_WritePin(V8_GPIO_Port, V8_Pin, GPIO_PIN_SET);
 8002570:	2201      	movs	r2, #1
 8002572:	2120      	movs	r1, #32
 8002574:	480b      	ldr	r0, [pc, #44]	@ (80025a4 <main+0x2b8>)
 8002576:	f001 f843 	bl	8003600 <HAL_GPIO_WritePin>
   HAL_Delay(50);
 800257a:	2032      	movs	r0, #50	@ 0x32
 800257c:	f000 fda6 	bl	80030cc <HAL_Delay>

  if(initVL53L0X(1, &hi2c1)){
 8002580:	490a      	ldr	r1, [pc, #40]	@ (80025ac <main+0x2c0>)
 8002582:	2001      	movs	r0, #1
 8002584:	f7fe fc32 	bl	8000dec <initVL53L0X>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d032      	beq.n	80025f4 <main+0x308>
   HAL_UART_Transmit(&huart2, "sensor 8 initialized/n", strlen("sensor 8 initialized"), HAL_MAX_DELAY);
 800258e:	f04f 33ff 	mov.w	r3, #4294967295
 8002592:	2214      	movs	r2, #20
 8002594:	4916      	ldr	r1, [pc, #88]	@ (80025f0 <main+0x304>)
 8002596:	4807      	ldr	r0, [pc, #28]	@ (80025b4 <main+0x2c8>)
 8002598:	f003 f9cc 	bl	8005934 <HAL_UART_Transmit>
 800259c:	e031      	b.n	8002602 <main+0x316>
 800259e:	bf00      	nop
 80025a0:	40020000 	.word	0x40020000
 80025a4:	40020800 	.word	0x40020800
 80025a8:	40020400 	.word	0x40020400
 80025ac:	20000388 	.word	0x20000388
 80025b0:	08007fd8 	.word	0x08007fd8
 80025b4:	20000430 	.word	0x20000430
 80025b8:	08007ff0 	.word	0x08007ff0
 80025bc:	20000484 	.word	0x20000484
 80025c0:	08007ff8 	.word	0x08007ff8
 80025c4:	20000490 	.word	0x20000490
 80025c8:	08008010 	.word	0x08008010
 80025cc:	2000049c 	.word	0x2000049c
 80025d0:	08008028 	.word	0x08008028
 80025d4:	200004a8 	.word	0x200004a8
 80025d8:	08008040 	.word	0x08008040
 80025dc:	200004b4 	.word	0x200004b4
 80025e0:	08008058 	.word	0x08008058
 80025e4:	200004c0 	.word	0x200004c0
 80025e8:	08008070 	.word	0x08008070
 80025ec:	200004cc 	.word	0x200004cc
 80025f0:	08008088 	.word	0x08008088
   }
  else{
 	   HAL_UART_Transmit(&huart2, "error", strlen("error"), HAL_MAX_DELAY);
 80025f4:	f04f 33ff 	mov.w	r3, #4294967295
 80025f8:	2205      	movs	r2, #5
 80025fa:	496e      	ldr	r1, [pc, #440]	@ (80027b4 <main+0x4c8>)
 80025fc:	486e      	ldr	r0, [pc, #440]	@ (80027b8 <main+0x4cc>)
 80025fe:	f003 f999 	bl	8005934 <HAL_UART_Transmit>
    }
//
  setAddress_VL53L0X(0x44);
 8002602:	2044      	movs	r0, #68	@ 0x44
 8002604:	f7fe fbe2 	bl	8000dcc <setAddress_VL53L0X>
   extraStats8.address=0x44;
 8002608:	4b6c      	ldr	r3, [pc, #432]	@ (80027bc <main+0x4d0>)
 800260a:	2244      	movs	r2, #68	@ 0x44
 800260c:	725a      	strb	r2, [r3, #9]



   setSignalRateLimit_x(2000,&extraStats1);
 800260e:	496c      	ldr	r1, [pc, #432]	@ (80027c0 <main+0x4d4>)
 8002610:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002614:	f7fe fe80 	bl	8001318 <setSignalRateLimit_x>
   setSignalRateLimit_x(2000,&extraStats2);
 8002618:	496a      	ldr	r1, [pc, #424]	@ (80027c4 <main+0x4d8>)
 800261a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800261e:	f7fe fe7b 	bl	8001318 <setSignalRateLimit_x>
   setSignalRateLimit_x(2000,&extraStats3);
 8002622:	4969      	ldr	r1, [pc, #420]	@ (80027c8 <main+0x4dc>)
 8002624:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002628:	f7fe fe76 	bl	8001318 <setSignalRateLimit_x>
   setSignalRateLimit_x(2000,&extraStats4);
 800262c:	4967      	ldr	r1, [pc, #412]	@ (80027cc <main+0x4e0>)
 800262e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002632:	f7fe fe71 	bl	8001318 <setSignalRateLimit_x>
   setSignalRateLimit_x(2000,&extraStats5);
 8002636:	4966      	ldr	r1, [pc, #408]	@ (80027d0 <main+0x4e4>)
 8002638:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800263c:	f7fe fe6c 	bl	8001318 <setSignalRateLimit_x>
   setSignalRateLimit_x(2000,&extraStats6);
 8002640:	4964      	ldr	r1, [pc, #400]	@ (80027d4 <main+0x4e8>)
 8002642:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002646:	f7fe fe67 	bl	8001318 <setSignalRateLimit_x>
   setSignalRateLimit_x(2000,&extraStats7);
 800264a:	4963      	ldr	r1, [pc, #396]	@ (80027d8 <main+0x4ec>)
 800264c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002650:	f7fe fe62 	bl	8001318 <setSignalRateLimit_x>
   setSignalRateLimit_x(2000,&extraStats8);
 8002654:	4959      	ldr	r1, [pc, #356]	@ (80027bc <main+0x4d0>)
 8002656:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800265a:	f7fe fe5d 	bl	8001318 <setSignalRateLimit_x>

   setVcselPulsePeriod_x(VcselPeriodPreRange, 10, &extraStats1);
 800265e:	4a58      	ldr	r2, [pc, #352]	@ (80027c0 <main+0x4d4>)
 8002660:	210a      	movs	r1, #10
 8002662:	2000      	movs	r0, #0
 8002664:	f7ff f8f8 	bl	8001858 <setVcselPulsePeriod_x>
  setVcselPulsePeriod_x(VcselPeriodPreRange, 10, &extraStats2);
 8002668:	4a56      	ldr	r2, [pc, #344]	@ (80027c4 <main+0x4d8>)
 800266a:	210a      	movs	r1, #10
 800266c:	2000      	movs	r0, #0
 800266e:	f7ff f8f3 	bl	8001858 <setVcselPulsePeriod_x>
  setVcselPulsePeriod_x(VcselPeriodPreRange, 10, &extraStats3);
 8002672:	4a55      	ldr	r2, [pc, #340]	@ (80027c8 <main+0x4dc>)
 8002674:	210a      	movs	r1, #10
 8002676:	2000      	movs	r0, #0
 8002678:	f7ff f8ee 	bl	8001858 <setVcselPulsePeriod_x>
  setVcselPulsePeriod_x(VcselPeriodPreRange, 10, &extraStats4);
 800267c:	4a53      	ldr	r2, [pc, #332]	@ (80027cc <main+0x4e0>)
 800267e:	210a      	movs	r1, #10
 8002680:	2000      	movs	r0, #0
 8002682:	f7ff f8e9 	bl	8001858 <setVcselPulsePeriod_x>
  setVcselPulsePeriod_x(VcselPeriodPreRange, 10, &extraStats5);
 8002686:	4a52      	ldr	r2, [pc, #328]	@ (80027d0 <main+0x4e4>)
 8002688:	210a      	movs	r1, #10
 800268a:	2000      	movs	r0, #0
 800268c:	f7ff f8e4 	bl	8001858 <setVcselPulsePeriod_x>
    setVcselPulsePeriod_x(VcselPeriodPreRange, 10, &extraStats6);
 8002690:	4a50      	ldr	r2, [pc, #320]	@ (80027d4 <main+0x4e8>)
 8002692:	210a      	movs	r1, #10
 8002694:	2000      	movs	r0, #0
 8002696:	f7ff f8df 	bl	8001858 <setVcselPulsePeriod_x>
    setVcselPulsePeriod_x(VcselPeriodPreRange, 10, &extraStats7);
 800269a:	4a4f      	ldr	r2, [pc, #316]	@ (80027d8 <main+0x4ec>)
 800269c:	210a      	movs	r1, #10
 800269e:	2000      	movs	r0, #0
 80026a0:	f7ff f8da 	bl	8001858 <setVcselPulsePeriod_x>
    setVcselPulsePeriod_x(VcselPeriodPreRange, 10, &extraStats8);
 80026a4:	4a45      	ldr	r2, [pc, #276]	@ (80027bc <main+0x4d0>)
 80026a6:	210a      	movs	r1, #10
 80026a8:	2000      	movs	r0, #0
 80026aa:	f7ff f8d5 	bl	8001858 <setVcselPulsePeriod_x>

   setVcselPulsePeriod_x(VcselPeriodFinalRange, 14, &extraStats1);
 80026ae:	4a44      	ldr	r2, [pc, #272]	@ (80027c0 <main+0x4d4>)
 80026b0:	210e      	movs	r1, #14
 80026b2:	2001      	movs	r0, #1
 80026b4:	f7ff f8d0 	bl	8001858 <setVcselPulsePeriod_x>
   setVcselPulsePeriod_x(VcselPeriodFinalRange, 14, &extraStats2);
 80026b8:	4a42      	ldr	r2, [pc, #264]	@ (80027c4 <main+0x4d8>)
 80026ba:	210e      	movs	r1, #14
 80026bc:	2001      	movs	r0, #1
 80026be:	f7ff f8cb 	bl	8001858 <setVcselPulsePeriod_x>
   setVcselPulsePeriod_x(VcselPeriodFinalRange, 14, &extraStats3);
 80026c2:	4a41      	ldr	r2, [pc, #260]	@ (80027c8 <main+0x4dc>)
 80026c4:	210e      	movs	r1, #14
 80026c6:	2001      	movs	r0, #1
 80026c8:	f7ff f8c6 	bl	8001858 <setVcselPulsePeriod_x>
   setVcselPulsePeriod_x(VcselPeriodFinalRange, 14, &extraStats4);
 80026cc:	4a3f      	ldr	r2, [pc, #252]	@ (80027cc <main+0x4e0>)
 80026ce:	210e      	movs	r1, #14
 80026d0:	2001      	movs	r0, #1
 80026d2:	f7ff f8c1 	bl	8001858 <setVcselPulsePeriod_x>
   setVcselPulsePeriod_x(VcselPeriodFinalRange, 14, &extraStats5);
 80026d6:	4a3e      	ldr	r2, [pc, #248]	@ (80027d0 <main+0x4e4>)
 80026d8:	210e      	movs	r1, #14
 80026da:	2001      	movs	r0, #1
 80026dc:	f7ff f8bc 	bl	8001858 <setVcselPulsePeriod_x>
   setVcselPulsePeriod_x(VcselPeriodFinalRange, 14, &extraStats6);
 80026e0:	4a3c      	ldr	r2, [pc, #240]	@ (80027d4 <main+0x4e8>)
 80026e2:	210e      	movs	r1, #14
 80026e4:	2001      	movs	r0, #1
 80026e6:	f7ff f8b7 	bl	8001858 <setVcselPulsePeriod_x>
   setVcselPulsePeriod_x(VcselPeriodFinalRange, 14, &extraStats7);
 80026ea:	4a3b      	ldr	r2, [pc, #236]	@ (80027d8 <main+0x4ec>)
 80026ec:	210e      	movs	r1, #14
 80026ee:	2001      	movs	r0, #1
 80026f0:	f7ff f8b2 	bl	8001858 <setVcselPulsePeriod_x>
   setVcselPulsePeriod_x(VcselPeriodFinalRange, 14, &extraStats8);
 80026f4:	4a31      	ldr	r2, [pc, #196]	@ (80027bc <main+0x4d0>)
 80026f6:	210e      	movs	r1, #14
 80026f8:	2001      	movs	r0, #1
 80026fa:	f7ff f8ad 	bl	8001858 <setVcselPulsePeriod_x>

   setMeasurementTimingBudget_x(300 * 1000UL, &extraStats1);
 80026fe:	4930      	ldr	r1, [pc, #192]	@ (80027c0 <main+0x4d4>)
 8002700:	4836      	ldr	r0, [pc, #216]	@ (80027dc <main+0x4f0>)
 8002702:	f7fe ff5b 	bl	80015bc <setMeasurementTimingBudget_x>
   setMeasurementTimingBudget_x(300 * 1000UL, &extraStats2);
 8002706:	492f      	ldr	r1, [pc, #188]	@ (80027c4 <main+0x4d8>)
 8002708:	4834      	ldr	r0, [pc, #208]	@ (80027dc <main+0x4f0>)
 800270a:	f7fe ff57 	bl	80015bc <setMeasurementTimingBudget_x>
   setMeasurementTimingBudget_x(300 * 1000UL, &extraStats2);
 800270e:	492d      	ldr	r1, [pc, #180]	@ (80027c4 <main+0x4d8>)
 8002710:	4832      	ldr	r0, [pc, #200]	@ (80027dc <main+0x4f0>)
 8002712:	f7fe ff53 	bl	80015bc <setMeasurementTimingBudget_x>
   setMeasurementTimingBudget_x(300 * 1000UL, &extraStats2);
 8002716:	492b      	ldr	r1, [pc, #172]	@ (80027c4 <main+0x4d8>)
 8002718:	4830      	ldr	r0, [pc, #192]	@ (80027dc <main+0x4f0>)
 800271a:	f7fe ff4f 	bl	80015bc <setMeasurementTimingBudget_x>
   setMeasurementTimingBudget_x(300 * 1000UL, &extraStats5);
 800271e:	492c      	ldr	r1, [pc, #176]	@ (80027d0 <main+0x4e4>)
 8002720:	482e      	ldr	r0, [pc, #184]	@ (80027dc <main+0x4f0>)
 8002722:	f7fe ff4b 	bl	80015bc <setMeasurementTimingBudget_x>
   setMeasurementTimingBudget_x(300 * 1000UL, &extraStats6);
 8002726:	492b      	ldr	r1, [pc, #172]	@ (80027d4 <main+0x4e8>)
 8002728:	482c      	ldr	r0, [pc, #176]	@ (80027dc <main+0x4f0>)
 800272a:	f7fe ff47 	bl	80015bc <setMeasurementTimingBudget_x>
   setMeasurementTimingBudget_x(300 * 1000UL, &extraStats7);
 800272e:	492a      	ldr	r1, [pc, #168]	@ (80027d8 <main+0x4ec>)
 8002730:	482a      	ldr	r0, [pc, #168]	@ (80027dc <main+0x4f0>)
 8002732:	f7fe ff43 	bl	80015bc <setMeasurementTimingBudget_x>
   setMeasurementTimingBudget_x(300 * 1000UL, &extraStats8);
 8002736:	4921      	ldr	r1, [pc, #132]	@ (80027bc <main+0x4d0>)
 8002738:	4828      	ldr	r0, [pc, #160]	@ (80027dc <main+0x4f0>)
 800273a:	f7fe ff3f 	bl	80015bc <setMeasurementTimingBudget_x>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(myTask01, StartTask01, osPriorityAboveNormal, 0, 1024);
 800273e:	4b28      	ldr	r3, [pc, #160]	@ (80027e0 <main+0x4f4>)
 8002740:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8002744:	461d      	mov	r5, r3
 8002746:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002748:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800274a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800274e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 8002752:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002756:	2100      	movs	r1, #0
 8002758:	4618      	mov	r0, r3
 800275a:	f003 fcc6 	bl	80060ea <osThreadCreate>
 800275e:	4603      	mov	r3, r0
 8002760:	4a20      	ldr	r2, [pc, #128]	@ (80027e4 <main+0x4f8>)
 8002762:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityAboveNormal, 0, 1024);
 8002764:	4b20      	ldr	r3, [pc, #128]	@ (80027e8 <main+0x4fc>)
 8002766:	f107 0420 	add.w	r4, r7, #32
 800276a:	461d      	mov	r5, r3
 800276c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800276e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002770:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002774:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8002778:	f107 0320 	add.w	r3, r7, #32
 800277c:	2100      	movs	r1, #0
 800277e:	4618      	mov	r0, r3
 8002780:	f003 fcb3 	bl	80060ea <osThreadCreate>
 8002784:	4603      	mov	r3, r0
 8002786:	4a19      	ldr	r2, [pc, #100]	@ (80027ec <main+0x500>)
 8002788:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 1024);
 800278a:	4b19      	ldr	r3, [pc, #100]	@ (80027f0 <main+0x504>)
 800278c:	1d3c      	adds	r4, r7, #4
 800278e:	461d      	mov	r5, r3
 8002790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002794:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002798:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 800279c:	1d3b      	adds	r3, r7, #4
 800279e:	2100      	movs	r1, #0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f003 fca2 	bl	80060ea <osThreadCreate>
 80027a6:	4603      	mov	r3, r0
 80027a8:	4a12      	ldr	r2, [pc, #72]	@ (80027f4 <main+0x508>)
 80027aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80027ac:	f003 fc96 	bl	80060dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80027b0:	bf00      	nop
 80027b2:	e7fd      	b.n	80027b0 <main+0x4c4>
 80027b4:	08007ff0 	.word	0x08007ff0
 80027b8:	20000430 	.word	0x20000430
 80027bc:	200004d8 	.word	0x200004d8
 80027c0:	20000484 	.word	0x20000484
 80027c4:	20000490 	.word	0x20000490
 80027c8:	2000049c 	.word	0x2000049c
 80027cc:	200004a8 	.word	0x200004a8
 80027d0:	200004b4 	.word	0x200004b4
 80027d4:	200004c0 	.word	0x200004c0
 80027d8:	200004cc 	.word	0x200004cc
 80027dc:	000493e0 	.word	0x000493e0
 80027e0:	080080ac 	.word	0x080080ac
 80027e4:	20000478 	.word	0x20000478
 80027e8:	080080d4 	.word	0x080080d4
 80027ec:	2000047c 	.word	0x2000047c
 80027f0:	080080fc 	.word	0x080080fc
 80027f4:	20000480 	.word	0x20000480

080027f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b094      	sub	sp, #80	@ 0x50
 80027fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027fe:	f107 031c 	add.w	r3, r7, #28
 8002802:	2234      	movs	r2, #52	@ 0x34
 8002804:	2100      	movs	r1, #0
 8002806:	4618      	mov	r0, r3
 8002808:	f004 ff04 	bl	8007614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800280c:	f107 0308 	add.w	r3, r7, #8
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800281c:	2300      	movs	r3, #0
 800281e:	607b      	str	r3, [r7, #4]
 8002820:	4b2c      	ldr	r3, [pc, #176]	@ (80028d4 <SystemClock_Config+0xdc>)
 8002822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002824:	4a2b      	ldr	r2, [pc, #172]	@ (80028d4 <SystemClock_Config+0xdc>)
 8002826:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800282a:	6413      	str	r3, [r2, #64]	@ 0x40
 800282c:	4b29      	ldr	r3, [pc, #164]	@ (80028d4 <SystemClock_Config+0xdc>)
 800282e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002838:	2300      	movs	r3, #0
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	4b26      	ldr	r3, [pc, #152]	@ (80028d8 <SystemClock_Config+0xe0>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a25      	ldr	r2, [pc, #148]	@ (80028d8 <SystemClock_Config+0xe0>)
 8002842:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	4b23      	ldr	r3, [pc, #140]	@ (80028d8 <SystemClock_Config+0xe0>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002850:	603b      	str	r3, [r7, #0]
 8002852:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002854:	2302      	movs	r3, #2
 8002856:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002858:	2301      	movs	r3, #1
 800285a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800285c:	2310      	movs	r3, #16
 800285e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002860:	2302      	movs	r3, #2
 8002862:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002864:	2300      	movs	r3, #0
 8002866:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002868:	2308      	movs	r3, #8
 800286a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800286c:	23b4      	movs	r3, #180	@ 0xb4
 800286e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002870:	2302      	movs	r3, #2
 8002872:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002874:	2302      	movs	r3, #2
 8002876:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002878:	2302      	movs	r3, #2
 800287a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800287c:	f107 031c 	add.w	r3, r7, #28
 8002880:	4618      	mov	r0, r3
 8002882:	f002 fac7 	bl	8004e14 <HAL_RCC_OscConfig>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800288c:	f000 f9b8 	bl	8002c00 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002890:	f001 fef4 	bl	800467c <HAL_PWREx_EnableOverDrive>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800289a:	f000 f9b1 	bl	8002c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800289e:	230f      	movs	r3, #15
 80028a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028a2:	2302      	movs	r3, #2
 80028a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80028aa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80028ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80028b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028b4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80028b6:	f107 0308 	add.w	r3, r7, #8
 80028ba:	2105      	movs	r1, #5
 80028bc:	4618      	mov	r0, r3
 80028be:	f001 ff2d 	bl	800471c <HAL_RCC_ClockConfig>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80028c8:	f000 f99a 	bl	8002c00 <Error_Handler>
  }
}
 80028cc:	bf00      	nop
 80028ce:	3750      	adds	r7, #80	@ 0x50
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40007000 	.word	0x40007000

080028dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028e0:	4b12      	ldr	r3, [pc, #72]	@ (800292c <MX_I2C1_Init+0x50>)
 80028e2:	4a13      	ldr	r2, [pc, #76]	@ (8002930 <MX_I2C1_Init+0x54>)
 80028e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80028e6:	4b11      	ldr	r3, [pc, #68]	@ (800292c <MX_I2C1_Init+0x50>)
 80028e8:	4a12      	ldr	r2, [pc, #72]	@ (8002934 <MX_I2C1_Init+0x58>)
 80028ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028ec:	4b0f      	ldr	r3, [pc, #60]	@ (800292c <MX_I2C1_Init+0x50>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80028f2:	4b0e      	ldr	r3, [pc, #56]	@ (800292c <MX_I2C1_Init+0x50>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028f8:	4b0c      	ldr	r3, [pc, #48]	@ (800292c <MX_I2C1_Init+0x50>)
 80028fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80028fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002900:	4b0a      	ldr	r3, [pc, #40]	@ (800292c <MX_I2C1_Init+0x50>)
 8002902:	2200      	movs	r2, #0
 8002904:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002906:	4b09      	ldr	r3, [pc, #36]	@ (800292c <MX_I2C1_Init+0x50>)
 8002908:	2200      	movs	r2, #0
 800290a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800290c:	4b07      	ldr	r3, [pc, #28]	@ (800292c <MX_I2C1_Init+0x50>)
 800290e:	2200      	movs	r2, #0
 8002910:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002912:	4b06      	ldr	r3, [pc, #24]	@ (800292c <MX_I2C1_Init+0x50>)
 8002914:	2200      	movs	r2, #0
 8002916:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002918:	4804      	ldr	r0, [pc, #16]	@ (800292c <MX_I2C1_Init+0x50>)
 800291a:	f000 fe8b 	bl	8003634 <HAL_I2C_Init>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002924:	f000 f96c 	bl	8002c00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002928:	bf00      	nop
 800292a:	bd80      	pop	{r7, pc}
 800292c:	20000388 	.word	0x20000388
 8002930:	40005400 	.word	0x40005400
 8002934:	000186a0 	.word	0x000186a0

08002938 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800293c:	4b12      	ldr	r3, [pc, #72]	@ (8002988 <MX_I2C2_Init+0x50>)
 800293e:	4a13      	ldr	r2, [pc, #76]	@ (800298c <MX_I2C2_Init+0x54>)
 8002940:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002942:	4b11      	ldr	r3, [pc, #68]	@ (8002988 <MX_I2C2_Init+0x50>)
 8002944:	4a12      	ldr	r2, [pc, #72]	@ (8002990 <MX_I2C2_Init+0x58>)
 8002946:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002948:	4b0f      	ldr	r3, [pc, #60]	@ (8002988 <MX_I2C2_Init+0x50>)
 800294a:	2200      	movs	r2, #0
 800294c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800294e:	4b0e      	ldr	r3, [pc, #56]	@ (8002988 <MX_I2C2_Init+0x50>)
 8002950:	2200      	movs	r2, #0
 8002952:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002954:	4b0c      	ldr	r3, [pc, #48]	@ (8002988 <MX_I2C2_Init+0x50>)
 8002956:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800295a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800295c:	4b0a      	ldr	r3, [pc, #40]	@ (8002988 <MX_I2C2_Init+0x50>)
 800295e:	2200      	movs	r2, #0
 8002960:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002962:	4b09      	ldr	r3, [pc, #36]	@ (8002988 <MX_I2C2_Init+0x50>)
 8002964:	2200      	movs	r2, #0
 8002966:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002968:	4b07      	ldr	r3, [pc, #28]	@ (8002988 <MX_I2C2_Init+0x50>)
 800296a:	2200      	movs	r2, #0
 800296c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800296e:	4b06      	ldr	r3, [pc, #24]	@ (8002988 <MX_I2C2_Init+0x50>)
 8002970:	2200      	movs	r2, #0
 8002972:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002974:	4804      	ldr	r0, [pc, #16]	@ (8002988 <MX_I2C2_Init+0x50>)
 8002976:	f000 fe5d 	bl	8003634 <HAL_I2C_Init>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002980:	f000 f93e 	bl	8002c00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002984:	bf00      	nop
 8002986:	bd80      	pop	{r7, pc}
 8002988:	200003dc 	.word	0x200003dc
 800298c:	40005800 	.word	0x40005800
 8002990:	000186a0 	.word	0x000186a0

08002994 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002998:	4b11      	ldr	r3, [pc, #68]	@ (80029e0 <MX_USART2_UART_Init+0x4c>)
 800299a:	4a12      	ldr	r2, [pc, #72]	@ (80029e4 <MX_USART2_UART_Init+0x50>)
 800299c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800299e:	4b10      	ldr	r3, [pc, #64]	@ (80029e0 <MX_USART2_UART_Init+0x4c>)
 80029a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80029a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029a6:	4b0e      	ldr	r3, [pc, #56]	@ (80029e0 <MX_USART2_UART_Init+0x4c>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029ac:	4b0c      	ldr	r3, [pc, #48]	@ (80029e0 <MX_USART2_UART_Init+0x4c>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029b2:	4b0b      	ldr	r3, [pc, #44]	@ (80029e0 <MX_USART2_UART_Init+0x4c>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029b8:	4b09      	ldr	r3, [pc, #36]	@ (80029e0 <MX_USART2_UART_Init+0x4c>)
 80029ba:	220c      	movs	r2, #12
 80029bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029be:	4b08      	ldr	r3, [pc, #32]	@ (80029e0 <MX_USART2_UART_Init+0x4c>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029c4:	4b06      	ldr	r3, [pc, #24]	@ (80029e0 <MX_USART2_UART_Init+0x4c>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029ca:	4805      	ldr	r0, [pc, #20]	@ (80029e0 <MX_USART2_UART_Init+0x4c>)
 80029cc:	f002 ff62 	bl	8005894 <HAL_UART_Init>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80029d6:	f000 f913 	bl	8002c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000430 	.word	0x20000430
 80029e4:	40004400 	.word	0x40004400

080029e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08a      	sub	sp, #40	@ 0x28
 80029ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ee:	f107 0314 	add.w	r3, r7, #20
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	609a      	str	r2, [r3, #8]
 80029fa:	60da      	str	r2, [r3, #12]
 80029fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	4b43      	ldr	r3, [pc, #268]	@ (8002b10 <MX_GPIO_Init+0x128>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a06:	4a42      	ldr	r2, [pc, #264]	@ (8002b10 <MX_GPIO_Init+0x128>)
 8002a08:	f043 0304 	orr.w	r3, r3, #4
 8002a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a0e:	4b40      	ldr	r3, [pc, #256]	@ (8002b10 <MX_GPIO_Init+0x128>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	4b3c      	ldr	r3, [pc, #240]	@ (8002b10 <MX_GPIO_Init+0x128>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a22:	4a3b      	ldr	r2, [pc, #236]	@ (8002b10 <MX_GPIO_Init+0x128>)
 8002a24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a2a:	4b39      	ldr	r3, [pc, #228]	@ (8002b10 <MX_GPIO_Init+0x128>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	4b35      	ldr	r3, [pc, #212]	@ (8002b10 <MX_GPIO_Init+0x128>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3e:	4a34      	ldr	r2, [pc, #208]	@ (8002b10 <MX_GPIO_Init+0x128>)
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a46:	4b32      	ldr	r3, [pc, #200]	@ (8002b10 <MX_GPIO_Init+0x128>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	4b2e      	ldr	r3, [pc, #184]	@ (8002b10 <MX_GPIO_Init+0x128>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5a:	4a2d      	ldr	r2, [pc, #180]	@ (8002b10 <MX_GPIO_Init+0x128>)
 8002a5c:	f043 0302 	orr.w	r3, r3, #2
 8002a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a62:	4b2b      	ldr	r3, [pc, #172]	@ (8002b10 <MX_GPIO_Init+0x128>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	607b      	str	r3, [r7, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|V1_Pin|V4_Pin, GPIO_PIN_RESET);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f44f 61a4 	mov.w	r1, #1312	@ 0x520
 8002a74:	4827      	ldr	r0, [pc, #156]	@ (8002b14 <MX_GPIO_Init+0x12c>)
 8002a76:	f000 fdc3 	bl	8003600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, V8_Pin|V2_Pin, GPIO_PIN_RESET);
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8002a80:	4825      	ldr	r0, [pc, #148]	@ (8002b18 <MX_GPIO_Init+0x130>)
 8002a82:	f000 fdbd 	bl	8003600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, V5_Pin|V6_Pin|V7_Pin|V3_Pin, GPIO_PIN_RESET);
 8002a86:	2200      	movs	r2, #0
 8002a88:	f24e 0110 	movw	r1, #57360	@ 0xe010
 8002a8c:	4823      	ldr	r0, [pc, #140]	@ (8002b1c <MX_GPIO_Init+0x134>)
 8002a8e:	f000 fdb7 	bl	8003600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a98:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002a9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	481b      	ldr	r0, [pc, #108]	@ (8002b18 <MX_GPIO_Init+0x130>)
 8002aaa:	f000 fc15 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin V1_Pin V4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|V1_Pin|V4_Pin;
 8002aae:	f44f 63a4 	mov.w	r3, #1312	@ 0x520
 8002ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abc:	2300      	movs	r3, #0
 8002abe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac0:	f107 0314 	add.w	r3, r7, #20
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4813      	ldr	r0, [pc, #76]	@ (8002b14 <MX_GPIO_Init+0x12c>)
 8002ac8:	f000 fc06 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : V8_Pin V2_Pin */
  GPIO_InitStruct.Pin = V8_Pin|V2_Pin;
 8002acc:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8002ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ada:	2300      	movs	r3, #0
 8002adc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ade:	f107 0314 	add.w	r3, r7, #20
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	480c      	ldr	r0, [pc, #48]	@ (8002b18 <MX_GPIO_Init+0x130>)
 8002ae6:	f000 fbf7 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : V5_Pin V6_Pin V7_Pin V3_Pin */
  GPIO_InitStruct.Pin = V5_Pin|V6_Pin|V7_Pin|V3_Pin;
 8002aea:	f24e 0310 	movw	r3, #57360	@ 0xe010
 8002aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002af0:	2301      	movs	r3, #1
 8002af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af8:	2300      	movs	r3, #0
 8002afa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	4619      	mov	r1, r3
 8002b02:	4806      	ldr	r0, [pc, #24]	@ (8002b1c <MX_GPIO_Init+0x134>)
 8002b04:	f000 fbe8 	bl	80032d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b08:	bf00      	nop
 8002b0a:	3728      	adds	r7, #40	@ 0x28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40020000 	.word	0x40020000
 8002b18:	40020800 	.word	0x40020800
 8002b1c:	40020400 	.word	0x40020400

08002b20 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartTask01(void const * argument)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  distance1= readRangeSingleMillimeters(&extraStats1);
 8002b28:	480e      	ldr	r0, [pc, #56]	@ (8002b64 <StartTask01+0x44>)
 8002b2a:	f7ff f93d 	bl	8001da8 <readRangeSingleMillimeters>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	461a      	mov	r2, r3
 8002b32:	4b0d      	ldr	r3, [pc, #52]	@ (8002b68 <StartTask01+0x48>)
 8002b34:	801a      	strh	r2, [r3, #0]
	char msgBuffer_1[20];
	sprintf(msgBuffer_1, "Distance1: %d\r\n", distance1);
 8002b36:	4b0c      	ldr	r3, [pc, #48]	@ (8002b68 <StartTask01+0x48>)
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	f107 030c 	add.w	r3, r7, #12
 8002b40:	490a      	ldr	r1, [pc, #40]	@ (8002b6c <StartTask01+0x4c>)
 8002b42:	4618      	mov	r0, r3
 8002b44:	f004 fd46 	bl	80075d4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msgBuffer_1, sizeof(msgBuffer_1), HAL_MAX_DELAY);	//HAL_UART_Transmit(&huart2, "TASK 1\n", strlen("TASK 1\n"), HAL_MAX_DELAY);
 8002b48:	f107 010c 	add.w	r1, r7, #12
 8002b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b50:	2214      	movs	r2, #20
 8002b52:	4807      	ldr	r0, [pc, #28]	@ (8002b70 <StartTask01+0x50>)
 8002b54:	f002 feee 	bl	8005934 <HAL_UART_Transmit>
    osDelay(50);
 8002b58:	2032      	movs	r0, #50	@ 0x32
 8002b5a:	f003 fb12 	bl	8006182 <osDelay>
  {
 8002b5e:	bf00      	nop
 8002b60:	e7e2      	b.n	8002b28 <StartTask01+0x8>
 8002b62:	bf00      	nop
 8002b64:	20000484 	.word	0x20000484
 8002b68:	200004e2 	.word	0x200004e2
 8002b6c:	08008118 	.word	0x08008118
 8002b70:	20000430 	.word	0x20000430

08002b74 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  distance5= readRangeSingleMillimeters(&extraStats5);
 8002b7c:	480e      	ldr	r0, [pc, #56]	@ (8002bb8 <StartTask02+0x44>)
 8002b7e:	f7ff f913 	bl	8001da8 <readRangeSingleMillimeters>
 8002b82:	4603      	mov	r3, r0
 8002b84:	461a      	mov	r2, r3
 8002b86:	4b0d      	ldr	r3, [pc, #52]	@ (8002bbc <StartTask02+0x48>)
 8002b88:	801a      	strh	r2, [r3, #0]
	  char msgBuffer_2[20];
	  sprintf(msgBuffer_2, "Distance2: %d\r\n", distance5);
 8002b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8002bbc <StartTask02+0x48>)
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f107 030c 	add.w	r3, r7, #12
 8002b94:	490a      	ldr	r1, [pc, #40]	@ (8002bc0 <StartTask02+0x4c>)
 8002b96:	4618      	mov	r0, r3
 8002b98:	f004 fd1c 	bl	80075d4 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) msgBuffer_2, sizeof(msgBuffer_2), HAL_MAX_DELAY);
 8002b9c:	f107 010c 	add.w	r1, r7, #12
 8002ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba4:	2214      	movs	r2, #20
 8002ba6:	4807      	ldr	r0, [pc, #28]	@ (8002bc4 <StartTask02+0x50>)
 8002ba8:	f002 fec4 	bl	8005934 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart2, "TASK 2\n", strlen("TASK 2\n"), HAL_MAX_DELAY);
    osDelay(30);
 8002bac:	201e      	movs	r0, #30
 8002bae:	f003 fae8 	bl	8006182 <osDelay>
  {
 8002bb2:	bf00      	nop
 8002bb4:	e7e2      	b.n	8002b7c <StartTask02+0x8>
 8002bb6:	bf00      	nop
 8002bb8:	200004b4 	.word	0x200004b4
 8002bbc:	200004e4 	.word	0x200004e4
 8002bc0:	08008128 	.word	0x08008128
 8002bc4:	20000430 	.word	0x20000430

08002bc8 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
 8002bd0:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002bd4:	f003 fad5 	bl	8006182 <osDelay>
 8002bd8:	e7fa      	b.n	8002bd0 <StartTask03+0x8>
	...

08002bdc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a04      	ldr	r2, [pc, #16]	@ (8002bfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d101      	bne.n	8002bf2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002bee:	f000 fa4d 	bl	800308c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40010000 	.word	0x40010000

08002c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c04:	b672      	cpsid	i
}
 8002c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c08:	bf00      	nop
 8002c0a:	e7fd      	b.n	8002c08 <Error_Handler+0x8>

08002c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	607b      	str	r3, [r7, #4]
 8002c16:	4b12      	ldr	r3, [pc, #72]	@ (8002c60 <HAL_MspInit+0x54>)
 8002c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1a:	4a11      	ldr	r2, [pc, #68]	@ (8002c60 <HAL_MspInit+0x54>)
 8002c1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c20:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c22:	4b0f      	ldr	r3, [pc, #60]	@ (8002c60 <HAL_MspInit+0x54>)
 8002c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c2a:	607b      	str	r3, [r7, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	603b      	str	r3, [r7, #0]
 8002c32:	4b0b      	ldr	r3, [pc, #44]	@ (8002c60 <HAL_MspInit+0x54>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	4a0a      	ldr	r2, [pc, #40]	@ (8002c60 <HAL_MspInit+0x54>)
 8002c38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c3e:	4b08      	ldr	r3, [pc, #32]	@ (8002c60 <HAL_MspInit+0x54>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c46:	603b      	str	r3, [r7, #0]
 8002c48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	210f      	movs	r1, #15
 8002c4e:	f06f 0001 	mvn.w	r0, #1
 8002c52:	f000 fb17 	bl	8003284 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800

08002c64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08c      	sub	sp, #48	@ 0x30
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6c:	f107 031c 	add.w	r3, r7, #28
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a42      	ldr	r2, [pc, #264]	@ (8002d8c <HAL_I2C_MspInit+0x128>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d12c      	bne.n	8002ce0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	4b41      	ldr	r3, [pc, #260]	@ (8002d90 <HAL_I2C_MspInit+0x12c>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8e:	4a40      	ldr	r2, [pc, #256]	@ (8002d90 <HAL_I2C_MspInit+0x12c>)
 8002c90:	f043 0302 	orr.w	r3, r3, #2
 8002c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c96:	4b3e      	ldr	r3, [pc, #248]	@ (8002d90 <HAL_I2C_MspInit+0x12c>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	61bb      	str	r3, [r7, #24]
 8002ca0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ca2:	23c0      	movs	r3, #192	@ 0xc0
 8002ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ca6:	2312      	movs	r3, #18
 8002ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cb2:	2304      	movs	r3, #4
 8002cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb6:	f107 031c 	add.w	r3, r7, #28
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4835      	ldr	r0, [pc, #212]	@ (8002d94 <HAL_I2C_MspInit+0x130>)
 8002cbe:	f000 fb0b 	bl	80032d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]
 8002cc6:	4b32      	ldr	r3, [pc, #200]	@ (8002d90 <HAL_I2C_MspInit+0x12c>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cca:	4a31      	ldr	r2, [pc, #196]	@ (8002d90 <HAL_I2C_MspInit+0x12c>)
 8002ccc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cd2:	4b2f      	ldr	r3, [pc, #188]	@ (8002d90 <HAL_I2C_MspInit+0x12c>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002cde:	e050      	b.n	8002d82 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a2c      	ldr	r2, [pc, #176]	@ (8002d98 <HAL_I2C_MspInit+0x134>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d14b      	bne.n	8002d82 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	4b28      	ldr	r3, [pc, #160]	@ (8002d90 <HAL_I2C_MspInit+0x12c>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf2:	4a27      	ldr	r2, [pc, #156]	@ (8002d90 <HAL_I2C_MspInit+0x12c>)
 8002cf4:	f043 0302 	orr.w	r3, r3, #2
 8002cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cfa:	4b25      	ldr	r3, [pc, #148]	@ (8002d90 <HAL_I2C_MspInit+0x12c>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	613b      	str	r3, [r7, #16]
 8002d04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	4b21      	ldr	r3, [pc, #132]	@ (8002d90 <HAL_I2C_MspInit+0x12c>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0e:	4a20      	ldr	r2, [pc, #128]	@ (8002d90 <HAL_I2C_MspInit+0x12c>)
 8002d10:	f043 0304 	orr.w	r3, r3, #4
 8002d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d16:	4b1e      	ldr	r3, [pc, #120]	@ (8002d90 <HAL_I2C_MspInit+0x12c>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d28:	2312      	movs	r3, #18
 8002d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d30:	2303      	movs	r3, #3
 8002d32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002d34:	2304      	movs	r3, #4
 8002d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d38:	f107 031c 	add.w	r3, r7, #28
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4815      	ldr	r0, [pc, #84]	@ (8002d94 <HAL_I2C_MspInit+0x130>)
 8002d40:	f000 faca 	bl	80032d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002d44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d4a:	2312      	movs	r3, #18
 8002d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d52:	2303      	movs	r3, #3
 8002d54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002d56:	2304      	movs	r3, #4
 8002d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d5a:	f107 031c 	add.w	r3, r7, #28
 8002d5e:	4619      	mov	r1, r3
 8002d60:	480e      	ldr	r0, [pc, #56]	@ (8002d9c <HAL_I2C_MspInit+0x138>)
 8002d62:	f000 fab9 	bl	80032d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	60bb      	str	r3, [r7, #8]
 8002d6a:	4b09      	ldr	r3, [pc, #36]	@ (8002d90 <HAL_I2C_MspInit+0x12c>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6e:	4a08      	ldr	r2, [pc, #32]	@ (8002d90 <HAL_I2C_MspInit+0x12c>)
 8002d70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d74:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d76:	4b06      	ldr	r3, [pc, #24]	@ (8002d90 <HAL_I2C_MspInit+0x12c>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	68bb      	ldr	r3, [r7, #8]
}
 8002d82:	bf00      	nop
 8002d84:	3730      	adds	r7, #48	@ 0x30
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40005400 	.word	0x40005400
 8002d90:	40023800 	.word	0x40023800
 8002d94:	40020400 	.word	0x40020400
 8002d98:	40005800 	.word	0x40005800
 8002d9c:	40020800 	.word	0x40020800

08002da0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08a      	sub	sp, #40	@ 0x28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da8:	f107 0314 	add.w	r3, r7, #20
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	605a      	str	r2, [r3, #4]
 8002db2:	609a      	str	r2, [r3, #8]
 8002db4:	60da      	str	r2, [r3, #12]
 8002db6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a19      	ldr	r2, [pc, #100]	@ (8002e24 <HAL_UART_MspInit+0x84>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d12b      	bne.n	8002e1a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	613b      	str	r3, [r7, #16]
 8002dc6:	4b18      	ldr	r3, [pc, #96]	@ (8002e28 <HAL_UART_MspInit+0x88>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dca:	4a17      	ldr	r2, [pc, #92]	@ (8002e28 <HAL_UART_MspInit+0x88>)
 8002dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dd2:	4b15      	ldr	r3, [pc, #84]	@ (8002e28 <HAL_UART_MspInit+0x88>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dda:	613b      	str	r3, [r7, #16]
 8002ddc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	4b11      	ldr	r3, [pc, #68]	@ (8002e28 <HAL_UART_MspInit+0x88>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de6:	4a10      	ldr	r2, [pc, #64]	@ (8002e28 <HAL_UART_MspInit+0x88>)
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dee:	4b0e      	ldr	r3, [pc, #56]	@ (8002e28 <HAL_UART_MspInit+0x88>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002dfa:	230c      	movs	r3, #12
 8002dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfe:	2302      	movs	r3, #2
 8002e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e02:	2300      	movs	r3, #0
 8002e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e06:	2303      	movs	r3, #3
 8002e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e0a:	2307      	movs	r3, #7
 8002e0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e0e:	f107 0314 	add.w	r3, r7, #20
 8002e12:	4619      	mov	r1, r3
 8002e14:	4805      	ldr	r0, [pc, #20]	@ (8002e2c <HAL_UART_MspInit+0x8c>)
 8002e16:	f000 fa5f 	bl	80032d8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002e1a:	bf00      	nop
 8002e1c:	3728      	adds	r7, #40	@ 0x28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40004400 	.word	0x40004400
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40020000 	.word	0x40020000

08002e30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08c      	sub	sp, #48	@ 0x30
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002e40:	2300      	movs	r3, #0
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	4b2f      	ldr	r3, [pc, #188]	@ (8002f04 <HAL_InitTick+0xd4>)
 8002e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e48:	4a2e      	ldr	r2, [pc, #184]	@ (8002f04 <HAL_InitTick+0xd4>)
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e50:	4b2c      	ldr	r3, [pc, #176]	@ (8002f04 <HAL_InitTick+0xd4>)
 8002e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e5c:	f107 020c 	add.w	r2, r7, #12
 8002e60:	f107 0310 	add.w	r3, r7, #16
 8002e64:	4611      	mov	r1, r2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f001 fd72 	bl	8004950 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002e6c:	f001 fd5c 	bl	8004928 <HAL_RCC_GetPCLK2Freq>
 8002e70:	4603      	mov	r3, r0
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e78:	4a23      	ldr	r2, [pc, #140]	@ (8002f08 <HAL_InitTick+0xd8>)
 8002e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7e:	0c9b      	lsrs	r3, r3, #18
 8002e80:	3b01      	subs	r3, #1
 8002e82:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002e84:	4b21      	ldr	r3, [pc, #132]	@ (8002f0c <HAL_InitTick+0xdc>)
 8002e86:	4a22      	ldr	r2, [pc, #136]	@ (8002f10 <HAL_InitTick+0xe0>)
 8002e88:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002e8a:	4b20      	ldr	r3, [pc, #128]	@ (8002f0c <HAL_InitTick+0xdc>)
 8002e8c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002e90:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002e92:	4a1e      	ldr	r2, [pc, #120]	@ (8002f0c <HAL_InitTick+0xdc>)
 8002e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e96:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002e98:	4b1c      	ldr	r3, [pc, #112]	@ (8002f0c <HAL_InitTick+0xdc>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002f0c <HAL_InitTick+0xdc>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ea4:	4b19      	ldr	r3, [pc, #100]	@ (8002f0c <HAL_InitTick+0xdc>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002eaa:	4818      	ldr	r0, [pc, #96]	@ (8002f0c <HAL_InitTick+0xdc>)
 8002eac:	f002 fa50 	bl	8005350 <HAL_TIM_Base_Init>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002eb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d11b      	bne.n	8002ef6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002ebe:	4813      	ldr	r0, [pc, #76]	@ (8002f0c <HAL_InitTick+0xdc>)
 8002ec0:	f002 faa0 	bl	8005404 <HAL_TIM_Base_Start_IT>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002eca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d111      	bne.n	8002ef6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002ed2:	2019      	movs	r0, #25
 8002ed4:	f000 f9f2 	bl	80032bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b0f      	cmp	r3, #15
 8002edc:	d808      	bhi.n	8002ef0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002ede:	2200      	movs	r2, #0
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	2019      	movs	r0, #25
 8002ee4:	f000 f9ce 	bl	8003284 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8002f14 <HAL_InitTick+0xe4>)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	e002      	b.n	8002ef6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002ef6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3730      	adds	r7, #48	@ 0x30
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40023800 	.word	0x40023800
 8002f08:	431bde83 	.word	0x431bde83
 8002f0c:	200004e8 	.word	0x200004e8
 8002f10:	40010000 	.word	0x40010000
 8002f14:	20000008 	.word	0x20000008

08002f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f1c:	bf00      	nop
 8002f1e:	e7fd      	b.n	8002f1c <NMI_Handler+0x4>

08002f20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f24:	bf00      	nop
 8002f26:	e7fd      	b.n	8002f24 <HardFault_Handler+0x4>

08002f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f2c:	bf00      	nop
 8002f2e:	e7fd      	b.n	8002f2c <MemManage_Handler+0x4>

08002f30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f34:	bf00      	nop
 8002f36:	e7fd      	b.n	8002f34 <BusFault_Handler+0x4>

08002f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f3c:	bf00      	nop
 8002f3e:	e7fd      	b.n	8002f3c <UsageFault_Handler+0x4>

08002f40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f44:	bf00      	nop
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
	...

08002f50 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f54:	4802      	ldr	r0, [pc, #8]	@ (8002f60 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002f56:	f002 fac5 	bl	80054e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002f5a:	bf00      	nop
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	200004e8 	.word	0x200004e8

08002f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f6c:	4a14      	ldr	r2, [pc, #80]	@ (8002fc0 <_sbrk+0x5c>)
 8002f6e:	4b15      	ldr	r3, [pc, #84]	@ (8002fc4 <_sbrk+0x60>)
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f78:	4b13      	ldr	r3, [pc, #76]	@ (8002fc8 <_sbrk+0x64>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d102      	bne.n	8002f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f80:	4b11      	ldr	r3, [pc, #68]	@ (8002fc8 <_sbrk+0x64>)
 8002f82:	4a12      	ldr	r2, [pc, #72]	@ (8002fcc <_sbrk+0x68>)
 8002f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f86:	4b10      	ldr	r3, [pc, #64]	@ (8002fc8 <_sbrk+0x64>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d207      	bcs.n	8002fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f94:	f004 fb9c 	bl	80076d0 <__errno>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	220c      	movs	r2, #12
 8002f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa2:	e009      	b.n	8002fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fa4:	4b08      	ldr	r3, [pc, #32]	@ (8002fc8 <_sbrk+0x64>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002faa:	4b07      	ldr	r3, [pc, #28]	@ (8002fc8 <_sbrk+0x64>)
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	4a05      	ldr	r2, [pc, #20]	@ (8002fc8 <_sbrk+0x64>)
 8002fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	20020000 	.word	0x20020000
 8002fc4:	00000400 	.word	0x00000400
 8002fc8:	20000530 	.word	0x20000530
 8002fcc:	200043d8 	.word	0x200043d8

08002fd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fd4:	4b06      	ldr	r3, [pc, #24]	@ (8002ff0 <SystemInit+0x20>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fda:	4a05      	ldr	r2, [pc, #20]	@ (8002ff0 <SystemInit+0x20>)
 8002fdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002fe0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fe4:	bf00      	nop
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	e000ed00 	.word	0xe000ed00

08002ff4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ff4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800302c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002ff8:	f7ff ffea 	bl	8002fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ffc:	480c      	ldr	r0, [pc, #48]	@ (8003030 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ffe:	490d      	ldr	r1, [pc, #52]	@ (8003034 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003000:	4a0d      	ldr	r2, [pc, #52]	@ (8003038 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003004:	e002      	b.n	800300c <LoopCopyDataInit>

08003006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800300a:	3304      	adds	r3, #4

0800300c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800300c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800300e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003010:	d3f9      	bcc.n	8003006 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003012:	4a0a      	ldr	r2, [pc, #40]	@ (800303c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003014:	4c0a      	ldr	r4, [pc, #40]	@ (8003040 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003018:	e001      	b.n	800301e <LoopFillZerobss>

0800301a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800301a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800301c:	3204      	adds	r2, #4

0800301e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800301e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003020:	d3fb      	bcc.n	800301a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003022:	f004 fb5b 	bl	80076dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003026:	f7ff f961 	bl	80022ec <main>
  bx  lr    
 800302a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800302c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003034:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8003038:	0800819c 	.word	0x0800819c
  ldr r2, =_sbss
 800303c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8003040:	200043d4 	.word	0x200043d4

08003044 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003044:	e7fe      	b.n	8003044 <ADC_IRQHandler>
	...

08003048 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800304c:	4b0e      	ldr	r3, [pc, #56]	@ (8003088 <HAL_Init+0x40>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a0d      	ldr	r2, [pc, #52]	@ (8003088 <HAL_Init+0x40>)
 8003052:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003056:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003058:	4b0b      	ldr	r3, [pc, #44]	@ (8003088 <HAL_Init+0x40>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a0a      	ldr	r2, [pc, #40]	@ (8003088 <HAL_Init+0x40>)
 800305e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003062:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003064:	4b08      	ldr	r3, [pc, #32]	@ (8003088 <HAL_Init+0x40>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a07      	ldr	r2, [pc, #28]	@ (8003088 <HAL_Init+0x40>)
 800306a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800306e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003070:	2003      	movs	r0, #3
 8003072:	f000 f8fc 	bl	800326e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003076:	200f      	movs	r0, #15
 8003078:	f7ff feda 	bl	8002e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800307c:	f7ff fdc6 	bl	8002c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40023c00 	.word	0x40023c00

0800308c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003090:	4b06      	ldr	r3, [pc, #24]	@ (80030ac <HAL_IncTick+0x20>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	461a      	mov	r2, r3
 8003096:	4b06      	ldr	r3, [pc, #24]	@ (80030b0 <HAL_IncTick+0x24>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4413      	add	r3, r2
 800309c:	4a04      	ldr	r2, [pc, #16]	@ (80030b0 <HAL_IncTick+0x24>)
 800309e:	6013      	str	r3, [r2, #0]
}
 80030a0:	bf00      	nop
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	2000000c 	.word	0x2000000c
 80030b0:	20000534 	.word	0x20000534

080030b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  return uwTick;
 80030b8:	4b03      	ldr	r3, [pc, #12]	@ (80030c8 <HAL_GetTick+0x14>)
 80030ba:	681b      	ldr	r3, [r3, #0]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	20000534 	.word	0x20000534

080030cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030d4:	f7ff ffee 	bl	80030b4 <HAL_GetTick>
 80030d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e4:	d005      	beq.n	80030f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003110 <HAL_Delay+0x44>)
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	461a      	mov	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4413      	add	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030f2:	bf00      	nop
 80030f4:	f7ff ffde 	bl	80030b4 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	429a      	cmp	r2, r3
 8003102:	d8f7      	bhi.n	80030f4 <HAL_Delay+0x28>
  {
  }
}
 8003104:	bf00      	nop
 8003106:	bf00      	nop
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	2000000c 	.word	0x2000000c

08003114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003124:	4b0c      	ldr	r3, [pc, #48]	@ (8003158 <__NVIC_SetPriorityGrouping+0x44>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003130:	4013      	ands	r3, r2
 8003132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800313c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003140:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003146:	4a04      	ldr	r2, [pc, #16]	@ (8003158 <__NVIC_SetPriorityGrouping+0x44>)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	60d3      	str	r3, [r2, #12]
}
 800314c:	bf00      	nop
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	e000ed00 	.word	0xe000ed00

0800315c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003160:	4b04      	ldr	r3, [pc, #16]	@ (8003174 <__NVIC_GetPriorityGrouping+0x18>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	0a1b      	lsrs	r3, r3, #8
 8003166:	f003 0307 	and.w	r3, r3, #7
}
 800316a:	4618      	mov	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003186:	2b00      	cmp	r3, #0
 8003188:	db0b      	blt.n	80031a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800318a:	79fb      	ldrb	r3, [r7, #7]
 800318c:	f003 021f 	and.w	r2, r3, #31
 8003190:	4907      	ldr	r1, [pc, #28]	@ (80031b0 <__NVIC_EnableIRQ+0x38>)
 8003192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	2001      	movs	r0, #1
 800319a:	fa00 f202 	lsl.w	r2, r0, r2
 800319e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	e000e100 	.word	0xe000e100

080031b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	6039      	str	r1, [r7, #0]
 80031be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	db0a      	blt.n	80031de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	490c      	ldr	r1, [pc, #48]	@ (8003200 <__NVIC_SetPriority+0x4c>)
 80031ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d2:	0112      	lsls	r2, r2, #4
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	440b      	add	r3, r1
 80031d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031dc:	e00a      	b.n	80031f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	4908      	ldr	r1, [pc, #32]	@ (8003204 <__NVIC_SetPriority+0x50>)
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	3b04      	subs	r3, #4
 80031ec:	0112      	lsls	r2, r2, #4
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	440b      	add	r3, r1
 80031f2:	761a      	strb	r2, [r3, #24]
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	e000e100 	.word	0xe000e100
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003208:	b480      	push	{r7}
 800320a:	b089      	sub	sp, #36	@ 0x24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f1c3 0307 	rsb	r3, r3, #7
 8003222:	2b04      	cmp	r3, #4
 8003224:	bf28      	it	cs
 8003226:	2304      	movcs	r3, #4
 8003228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3304      	adds	r3, #4
 800322e:	2b06      	cmp	r3, #6
 8003230:	d902      	bls.n	8003238 <NVIC_EncodePriority+0x30>
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3b03      	subs	r3, #3
 8003236:	e000      	b.n	800323a <NVIC_EncodePriority+0x32>
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800323c:	f04f 32ff 	mov.w	r2, #4294967295
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43da      	mvns	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	401a      	ands	r2, r3
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003250:	f04f 31ff 	mov.w	r1, #4294967295
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	fa01 f303 	lsl.w	r3, r1, r3
 800325a:	43d9      	mvns	r1, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003260:	4313      	orrs	r3, r2
         );
}
 8003262:	4618      	mov	r0, r3
 8003264:	3724      	adds	r7, #36	@ 0x24
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b082      	sub	sp, #8
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7ff ff4c 	bl	8003114 <__NVIC_SetPriorityGrouping>
}
 800327c:	bf00      	nop
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
 8003290:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003296:	f7ff ff61 	bl	800315c <__NVIC_GetPriorityGrouping>
 800329a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	68b9      	ldr	r1, [r7, #8]
 80032a0:	6978      	ldr	r0, [r7, #20]
 80032a2:	f7ff ffb1 	bl	8003208 <NVIC_EncodePriority>
 80032a6:	4602      	mov	r2, r0
 80032a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ac:	4611      	mov	r1, r2
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff ff80 	bl	80031b4 <__NVIC_SetPriority>
}
 80032b4:	bf00      	nop
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff ff54 	bl	8003178 <__NVIC_EnableIRQ>
}
 80032d0:	bf00      	nop
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032d8:	b480      	push	{r7}
 80032da:	b089      	sub	sp, #36	@ 0x24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ee:	2300      	movs	r3, #0
 80032f0:	61fb      	str	r3, [r7, #28]
 80032f2:	e165      	b.n	80035c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032f4:	2201      	movs	r2, #1
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4013      	ands	r3, r2
 8003306:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	429a      	cmp	r2, r3
 800330e:	f040 8154 	bne.w	80035ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	2b01      	cmp	r3, #1
 800331c:	d005      	beq.n	800332a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003326:	2b02      	cmp	r3, #2
 8003328:	d130      	bne.n	800338c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	2203      	movs	r2, #3
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4013      	ands	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4313      	orrs	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003360:	2201      	movs	r2, #1
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	43db      	mvns	r3, r3
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	4013      	ands	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	091b      	lsrs	r3, r3, #4
 8003376:	f003 0201 	and.w	r2, r3, #1
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	4313      	orrs	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	2b03      	cmp	r3, #3
 8003396:	d017      	beq.n	80033c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	2203      	movs	r2, #3
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4013      	ands	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d123      	bne.n	800341c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	08da      	lsrs	r2, r3, #3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3208      	adds	r2, #8
 80033dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	220f      	movs	r2, #15
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	08da      	lsrs	r2, r3, #3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3208      	adds	r2, #8
 8003416:	69b9      	ldr	r1, [r7, #24]
 8003418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	2203      	movs	r2, #3
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 0203 	and.w	r2, r3, #3
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 80ae 	beq.w	80035ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	4b5d      	ldr	r3, [pc, #372]	@ (80035d8 <HAL_GPIO_Init+0x300>)
 8003464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003466:	4a5c      	ldr	r2, [pc, #368]	@ (80035d8 <HAL_GPIO_Init+0x300>)
 8003468:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800346c:	6453      	str	r3, [r2, #68]	@ 0x44
 800346e:	4b5a      	ldr	r3, [pc, #360]	@ (80035d8 <HAL_GPIO_Init+0x300>)
 8003470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003472:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800347a:	4a58      	ldr	r2, [pc, #352]	@ (80035dc <HAL_GPIO_Init+0x304>)
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	089b      	lsrs	r3, r3, #2
 8003480:	3302      	adds	r3, #2
 8003482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003486:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	220f      	movs	r2, #15
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43db      	mvns	r3, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4013      	ands	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a4f      	ldr	r2, [pc, #316]	@ (80035e0 <HAL_GPIO_Init+0x308>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d025      	beq.n	80034f2 <HAL_GPIO_Init+0x21a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a4e      	ldr	r2, [pc, #312]	@ (80035e4 <HAL_GPIO_Init+0x30c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d01f      	beq.n	80034ee <HAL_GPIO_Init+0x216>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a4d      	ldr	r2, [pc, #308]	@ (80035e8 <HAL_GPIO_Init+0x310>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d019      	beq.n	80034ea <HAL_GPIO_Init+0x212>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a4c      	ldr	r2, [pc, #304]	@ (80035ec <HAL_GPIO_Init+0x314>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d013      	beq.n	80034e6 <HAL_GPIO_Init+0x20e>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a4b      	ldr	r2, [pc, #300]	@ (80035f0 <HAL_GPIO_Init+0x318>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d00d      	beq.n	80034e2 <HAL_GPIO_Init+0x20a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a4a      	ldr	r2, [pc, #296]	@ (80035f4 <HAL_GPIO_Init+0x31c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d007      	beq.n	80034de <HAL_GPIO_Init+0x206>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a49      	ldr	r2, [pc, #292]	@ (80035f8 <HAL_GPIO_Init+0x320>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d101      	bne.n	80034da <HAL_GPIO_Init+0x202>
 80034d6:	2306      	movs	r3, #6
 80034d8:	e00c      	b.n	80034f4 <HAL_GPIO_Init+0x21c>
 80034da:	2307      	movs	r3, #7
 80034dc:	e00a      	b.n	80034f4 <HAL_GPIO_Init+0x21c>
 80034de:	2305      	movs	r3, #5
 80034e0:	e008      	b.n	80034f4 <HAL_GPIO_Init+0x21c>
 80034e2:	2304      	movs	r3, #4
 80034e4:	e006      	b.n	80034f4 <HAL_GPIO_Init+0x21c>
 80034e6:	2303      	movs	r3, #3
 80034e8:	e004      	b.n	80034f4 <HAL_GPIO_Init+0x21c>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e002      	b.n	80034f4 <HAL_GPIO_Init+0x21c>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <HAL_GPIO_Init+0x21c>
 80034f2:	2300      	movs	r3, #0
 80034f4:	69fa      	ldr	r2, [r7, #28]
 80034f6:	f002 0203 	and.w	r2, r2, #3
 80034fa:	0092      	lsls	r2, r2, #2
 80034fc:	4093      	lsls	r3, r2
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4313      	orrs	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003504:	4935      	ldr	r1, [pc, #212]	@ (80035dc <HAL_GPIO_Init+0x304>)
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	089b      	lsrs	r3, r3, #2
 800350a:	3302      	adds	r3, #2
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003512:	4b3a      	ldr	r3, [pc, #232]	@ (80035fc <HAL_GPIO_Init+0x324>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	43db      	mvns	r3, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4013      	ands	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	4313      	orrs	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003536:	4a31      	ldr	r2, [pc, #196]	@ (80035fc <HAL_GPIO_Init+0x324>)
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800353c:	4b2f      	ldr	r3, [pc, #188]	@ (80035fc <HAL_GPIO_Init+0x324>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	43db      	mvns	r3, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4013      	ands	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003560:	4a26      	ldr	r2, [pc, #152]	@ (80035fc <HAL_GPIO_Init+0x324>)
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003566:	4b25      	ldr	r3, [pc, #148]	@ (80035fc <HAL_GPIO_Init+0x324>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	43db      	mvns	r3, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4013      	ands	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800358a:	4a1c      	ldr	r2, [pc, #112]	@ (80035fc <HAL_GPIO_Init+0x324>)
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003590:	4b1a      	ldr	r3, [pc, #104]	@ (80035fc <HAL_GPIO_Init+0x324>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	43db      	mvns	r3, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4013      	ands	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035b4:	4a11      	ldr	r2, [pc, #68]	@ (80035fc <HAL_GPIO_Init+0x324>)
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	3301      	adds	r3, #1
 80035be:	61fb      	str	r3, [r7, #28]
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	2b0f      	cmp	r3, #15
 80035c4:	f67f ae96 	bls.w	80032f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035c8:	bf00      	nop
 80035ca:	bf00      	nop
 80035cc:	3724      	adds	r7, #36	@ 0x24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	40023800 	.word	0x40023800
 80035dc:	40013800 	.word	0x40013800
 80035e0:	40020000 	.word	0x40020000
 80035e4:	40020400 	.word	0x40020400
 80035e8:	40020800 	.word	0x40020800
 80035ec:	40020c00 	.word	0x40020c00
 80035f0:	40021000 	.word	0x40021000
 80035f4:	40021400 	.word	0x40021400
 80035f8:	40021800 	.word	0x40021800
 80035fc:	40013c00 	.word	0x40013c00

08003600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	460b      	mov	r3, r1
 800360a:	807b      	strh	r3, [r7, #2]
 800360c:	4613      	mov	r3, r2
 800360e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003610:	787b      	ldrb	r3, [r7, #1]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003616:	887a      	ldrh	r2, [r7, #2]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800361c:	e003      	b.n	8003626 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800361e:	887b      	ldrh	r3, [r7, #2]
 8003620:	041a      	lsls	r2, r3, #16
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	619a      	str	r2, [r3, #24]
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
	...

08003634 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e12b      	b.n	800389e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7ff fb02 	bl	8002c64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2224      	movs	r2, #36	@ 0x24
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0201 	bic.w	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003686:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003696:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003698:	f001 f932 	bl	8004900 <HAL_RCC_GetPCLK1Freq>
 800369c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	4a81      	ldr	r2, [pc, #516]	@ (80038a8 <HAL_I2C_Init+0x274>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d807      	bhi.n	80036b8 <HAL_I2C_Init+0x84>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4a80      	ldr	r2, [pc, #512]	@ (80038ac <HAL_I2C_Init+0x278>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	bf94      	ite	ls
 80036b0:	2301      	movls	r3, #1
 80036b2:	2300      	movhi	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	e006      	b.n	80036c6 <HAL_I2C_Init+0x92>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4a7d      	ldr	r2, [pc, #500]	@ (80038b0 <HAL_I2C_Init+0x27c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	bf94      	ite	ls
 80036c0:	2301      	movls	r3, #1
 80036c2:	2300      	movhi	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e0e7      	b.n	800389e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4a78      	ldr	r2, [pc, #480]	@ (80038b4 <HAL_I2C_Init+0x280>)
 80036d2:	fba2 2303 	umull	r2, r3, r2, r3
 80036d6:	0c9b      	lsrs	r3, r3, #18
 80036d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	4a6a      	ldr	r2, [pc, #424]	@ (80038a8 <HAL_I2C_Init+0x274>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d802      	bhi.n	8003708 <HAL_I2C_Init+0xd4>
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	3301      	adds	r3, #1
 8003706:	e009      	b.n	800371c <HAL_I2C_Init+0xe8>
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800370e:	fb02 f303 	mul.w	r3, r2, r3
 8003712:	4a69      	ldr	r2, [pc, #420]	@ (80038b8 <HAL_I2C_Init+0x284>)
 8003714:	fba2 2303 	umull	r2, r3, r2, r3
 8003718:	099b      	lsrs	r3, r3, #6
 800371a:	3301      	adds	r3, #1
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6812      	ldr	r2, [r2, #0]
 8003720:	430b      	orrs	r3, r1
 8003722:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800372e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	495c      	ldr	r1, [pc, #368]	@ (80038a8 <HAL_I2C_Init+0x274>)
 8003738:	428b      	cmp	r3, r1
 800373a:	d819      	bhi.n	8003770 <HAL_I2C_Init+0x13c>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	1e59      	subs	r1, r3, #1
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	fbb1 f3f3 	udiv	r3, r1, r3
 800374a:	1c59      	adds	r1, r3, #1
 800374c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003750:	400b      	ands	r3, r1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <HAL_I2C_Init+0x138>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	1e59      	subs	r1, r3, #1
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	fbb1 f3f3 	udiv	r3, r1, r3
 8003764:	3301      	adds	r3, #1
 8003766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800376a:	e051      	b.n	8003810 <HAL_I2C_Init+0x1dc>
 800376c:	2304      	movs	r3, #4
 800376e:	e04f      	b.n	8003810 <HAL_I2C_Init+0x1dc>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d111      	bne.n	800379c <HAL_I2C_Init+0x168>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	1e58      	subs	r0, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6859      	ldr	r1, [r3, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	440b      	add	r3, r1
 8003786:	fbb0 f3f3 	udiv	r3, r0, r3
 800378a:	3301      	adds	r3, #1
 800378c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003790:	2b00      	cmp	r3, #0
 8003792:	bf0c      	ite	eq
 8003794:	2301      	moveq	r3, #1
 8003796:	2300      	movne	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	e012      	b.n	80037c2 <HAL_I2C_Init+0x18e>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	1e58      	subs	r0, r3, #1
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6859      	ldr	r1, [r3, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	0099      	lsls	r1, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80037b2:	3301      	adds	r3, #1
 80037b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	bf0c      	ite	eq
 80037bc:	2301      	moveq	r3, #1
 80037be:	2300      	movne	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_I2C_Init+0x196>
 80037c6:	2301      	movs	r3, #1
 80037c8:	e022      	b.n	8003810 <HAL_I2C_Init+0x1dc>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10e      	bne.n	80037f0 <HAL_I2C_Init+0x1bc>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	1e58      	subs	r0, r3, #1
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6859      	ldr	r1, [r3, #4]
 80037da:	460b      	mov	r3, r1
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	440b      	add	r3, r1
 80037e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80037e4:	3301      	adds	r3, #1
 80037e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037ee:	e00f      	b.n	8003810 <HAL_I2C_Init+0x1dc>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	1e58      	subs	r0, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6859      	ldr	r1, [r3, #4]
 80037f8:	460b      	mov	r3, r1
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	0099      	lsls	r1, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	fbb0 f3f3 	udiv	r3, r0, r3
 8003806:	3301      	adds	r3, #1
 8003808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800380c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	6809      	ldr	r1, [r1, #0]
 8003814:	4313      	orrs	r3, r2
 8003816:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69da      	ldr	r2, [r3, #28]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800383e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6911      	ldr	r1, [r2, #16]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	68d2      	ldr	r2, [r2, #12]
 800384a:	4311      	orrs	r1, r2
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6812      	ldr	r2, [r2, #0]
 8003850:	430b      	orrs	r3, r1
 8003852:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695a      	ldr	r2, [r3, #20]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2220      	movs	r2, #32
 800388a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	000186a0 	.word	0x000186a0
 80038ac:	001e847f 	.word	0x001e847f
 80038b0:	003d08ff 	.word	0x003d08ff
 80038b4:	431bde83 	.word	0x431bde83
 80038b8:	10624dd3 	.word	0x10624dd3

080038bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af02      	add	r7, sp, #8
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	4608      	mov	r0, r1
 80038c6:	4611      	mov	r1, r2
 80038c8:	461a      	mov	r2, r3
 80038ca:	4603      	mov	r3, r0
 80038cc:	817b      	strh	r3, [r7, #10]
 80038ce:	460b      	mov	r3, r1
 80038d0:	813b      	strh	r3, [r7, #8]
 80038d2:	4613      	mov	r3, r2
 80038d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038d6:	f7ff fbed 	bl	80030b4 <HAL_GetTick>
 80038da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b20      	cmp	r3, #32
 80038e6:	f040 80d9 	bne.w	8003a9c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	2319      	movs	r3, #25
 80038f0:	2201      	movs	r2, #1
 80038f2:	496d      	ldr	r1, [pc, #436]	@ (8003aa8 <HAL_I2C_Mem_Write+0x1ec>)
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 fc8b 	bl	8004210 <I2C_WaitOnFlagUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003900:	2302      	movs	r3, #2
 8003902:	e0cc      	b.n	8003a9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800390a:	2b01      	cmp	r3, #1
 800390c:	d101      	bne.n	8003912 <HAL_I2C_Mem_Write+0x56>
 800390e:	2302      	movs	r3, #2
 8003910:	e0c5      	b.n	8003a9e <HAL_I2C_Mem_Write+0x1e2>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b01      	cmp	r3, #1
 8003926:	d007      	beq.n	8003938 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 0201 	orr.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003946:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2221      	movs	r2, #33	@ 0x21
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2240      	movs	r2, #64	@ 0x40
 8003954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a3a      	ldr	r2, [r7, #32]
 8003962:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003968:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4a4d      	ldr	r2, [pc, #308]	@ (8003aac <HAL_I2C_Mem_Write+0x1f0>)
 8003978:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800397a:	88f8      	ldrh	r0, [r7, #6]
 800397c:	893a      	ldrh	r2, [r7, #8]
 800397e:	8979      	ldrh	r1, [r7, #10]
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	9301      	str	r3, [sp, #4]
 8003984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	4603      	mov	r3, r0
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 fac2 	bl	8003f14 <I2C_RequestMemoryWrite>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d052      	beq.n	8003a3c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e081      	b.n	8003a9e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 fd50 	bl	8004444 <I2C_WaitOnTXEFlagUntilTimeout>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00d      	beq.n	80039c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d107      	bne.n	80039c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e06b      	b.n	8003a9e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ca:	781a      	ldrb	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d11b      	bne.n	8003a3c <HAL_I2C_Mem_Write+0x180>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d017      	beq.n	8003a3c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a10:	781a      	ldrb	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1aa      	bne.n	800399a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 fd43 	bl	80044d4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00d      	beq.n	8003a70 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d107      	bne.n	8003a6c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e016      	b.n	8003a9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	e000      	b.n	8003a9e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a9c:	2302      	movs	r3, #2
  }
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	00100002 	.word	0x00100002
 8003aac:	ffff0000 	.word	0xffff0000

08003ab0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08c      	sub	sp, #48	@ 0x30
 8003ab4:	af02      	add	r7, sp, #8
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	4608      	mov	r0, r1
 8003aba:	4611      	mov	r1, r2
 8003abc:	461a      	mov	r2, r3
 8003abe:	4603      	mov	r3, r0
 8003ac0:	817b      	strh	r3, [r7, #10]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	813b      	strh	r3, [r7, #8]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003aca:	f7ff faf3 	bl	80030b4 <HAL_GetTick>
 8003ace:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	f040 8214 	bne.w	8003f06 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	2319      	movs	r3, #25
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	497b      	ldr	r1, [pc, #492]	@ (8003cd4 <HAL_I2C_Mem_Read+0x224>)
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 fb91 	bl	8004210 <I2C_WaitOnFlagUntilTimeout>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003af4:	2302      	movs	r3, #2
 8003af6:	e207      	b.n	8003f08 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d101      	bne.n	8003b06 <HAL_I2C_Mem_Read+0x56>
 8003b02:	2302      	movs	r3, #2
 8003b04:	e200      	b.n	8003f08 <HAL_I2C_Mem_Read+0x458>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d007      	beq.n	8003b2c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2222      	movs	r2, #34	@ 0x22
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2240      	movs	r2, #64	@ 0x40
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003b5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4a5b      	ldr	r2, [pc, #364]	@ (8003cd8 <HAL_I2C_Mem_Read+0x228>)
 8003b6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b6e:	88f8      	ldrh	r0, [r7, #6]
 8003b70:	893a      	ldrh	r2, [r7, #8]
 8003b72:	8979      	ldrh	r1, [r7, #10]
 8003b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b76:	9301      	str	r3, [sp, #4]
 8003b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 fa5e 	bl	8004040 <I2C_RequestMemoryRead>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e1bc      	b.n	8003f08 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d113      	bne.n	8003bbe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b96:	2300      	movs	r3, #0
 8003b98:	623b      	str	r3, [r7, #32]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	623b      	str	r3, [r7, #32]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	623b      	str	r3, [r7, #32]
 8003baa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	e190      	b.n	8003ee0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d11b      	bne.n	8003bfe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61fb      	str	r3, [r7, #28]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	61fb      	str	r3, [r7, #28]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	61fb      	str	r3, [r7, #28]
 8003bea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	e170      	b.n	8003ee0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d11b      	bne.n	8003c3e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c26:	2300      	movs	r3, #0
 8003c28:	61bb      	str	r3, [r7, #24]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	61bb      	str	r3, [r7, #24]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	61bb      	str	r3, [r7, #24]
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	e150      	b.n	8003ee0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c3e:	2300      	movs	r3, #0
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	617b      	str	r3, [r7, #20]
 8003c52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c54:	e144      	b.n	8003ee0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	f200 80f1 	bhi.w	8003e42 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d123      	bne.n	8003cb0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c6a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 fc79 	bl	8004564 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e145      	b.n	8003f08 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	691a      	ldr	r2, [r3, #16]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003cae:	e117      	b.n	8003ee0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d14e      	bne.n	8003d56 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	4906      	ldr	r1, [pc, #24]	@ (8003cdc <HAL_I2C_Mem_Read+0x22c>)
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 faa4 	bl	8004210 <I2C_WaitOnFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d008      	beq.n	8003ce0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e11a      	b.n	8003f08 <HAL_I2C_Mem_Read+0x458>
 8003cd2:	bf00      	nop
 8003cd4:	00100002 	.word	0x00100002
 8003cd8:	ffff0000 	.word	0xffff0000
 8003cdc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691a      	ldr	r2, [r3, #16]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d54:	e0c4      	b.n	8003ee0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	496c      	ldr	r1, [pc, #432]	@ (8003f10 <HAL_I2C_Mem_Read+0x460>)
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 fa55 	bl	8004210 <I2C_WaitOnFlagUntilTimeout>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e0cb      	b.n	8003f08 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003db8:	2200      	movs	r2, #0
 8003dba:	4955      	ldr	r1, [pc, #340]	@ (8003f10 <HAL_I2C_Mem_Read+0x460>)
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 fa27 	bl	8004210 <I2C_WaitOnFlagUntilTimeout>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e09d      	b.n	8003f08 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691a      	ldr	r2, [r3, #16]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e18:	b2d2      	uxtb	r2, r2
 8003e1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e40:	e04e      	b.n	8003ee0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e44:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 fb8c 	bl	8004564 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e058      	b.n	8003f08 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	691a      	ldr	r2, [r3, #16]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d124      	bne.n	8003ee0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d107      	bne.n	8003eae <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eac:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb8:	b2d2      	uxtb	r2, r2
 8003eba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f47f aeb6 	bne.w	8003c56 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2220      	movs	r2, #32
 8003eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	e000      	b.n	8003f08 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003f06:	2302      	movs	r3, #2
  }
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3728      	adds	r7, #40	@ 0x28
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	00010004 	.word	0x00010004

08003f14 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af02      	add	r7, sp, #8
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	4608      	mov	r0, r1
 8003f1e:	4611      	mov	r1, r2
 8003f20:	461a      	mov	r2, r3
 8003f22:	4603      	mov	r3, r0
 8003f24:	817b      	strh	r3, [r7, #10]
 8003f26:	460b      	mov	r3, r1
 8003f28:	813b      	strh	r3, [r7, #8]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f960 	bl	8004210 <I2C_WaitOnFlagUntilTimeout>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00d      	beq.n	8003f72 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f64:	d103      	bne.n	8003f6e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f6c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e05f      	b.n	8004032 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f72:	897b      	ldrh	r3, [r7, #10]
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	461a      	mov	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f84:	6a3a      	ldr	r2, [r7, #32]
 8003f86:	492d      	ldr	r1, [pc, #180]	@ (800403c <I2C_RequestMemoryWrite+0x128>)
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 f9bb 	bl	8004304 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e04c      	b.n	8004032 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f98:	2300      	movs	r3, #0
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fb0:	6a39      	ldr	r1, [r7, #32]
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 fa46 	bl	8004444 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00d      	beq.n	8003fda <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d107      	bne.n	8003fd6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fd4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e02b      	b.n	8004032 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fda:	88fb      	ldrh	r3, [r7, #6]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d105      	bne.n	8003fec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fe0:	893b      	ldrh	r3, [r7, #8]
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	611a      	str	r2, [r3, #16]
 8003fea:	e021      	b.n	8004030 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fec:	893b      	ldrh	r3, [r7, #8]
 8003fee:	0a1b      	lsrs	r3, r3, #8
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ffc:	6a39      	ldr	r1, [r7, #32]
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 fa20 	bl	8004444 <I2C_WaitOnTXEFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00d      	beq.n	8004026 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400e:	2b04      	cmp	r3, #4
 8004010:	d107      	bne.n	8004022 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004020:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e005      	b.n	8004032 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004026:	893b      	ldrh	r3, [r7, #8]
 8004028:	b2da      	uxtb	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3718      	adds	r7, #24
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	00010002 	.word	0x00010002

08004040 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af02      	add	r7, sp, #8
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	4608      	mov	r0, r1
 800404a:	4611      	mov	r1, r2
 800404c:	461a      	mov	r2, r3
 800404e:	4603      	mov	r3, r0
 8004050:	817b      	strh	r3, [r7, #10]
 8004052:	460b      	mov	r3, r1
 8004054:	813b      	strh	r3, [r7, #8]
 8004056:	4613      	mov	r3, r2
 8004058:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004068:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004078:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800407a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	2200      	movs	r2, #0
 8004082:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 f8c2 	bl	8004210 <I2C_WaitOnFlagUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00d      	beq.n	80040ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800409c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040a0:	d103      	bne.n	80040aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e0aa      	b.n	8004204 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040ae:	897b      	ldrh	r3, [r7, #10]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	461a      	mov	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80040bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c0:	6a3a      	ldr	r2, [r7, #32]
 80040c2:	4952      	ldr	r1, [pc, #328]	@ (800420c <I2C_RequestMemoryRead+0x1cc>)
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 f91d 	bl	8004304 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e097      	b.n	8004204 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040d4:	2300      	movs	r3, #0
 80040d6:	617b      	str	r3, [r7, #20]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	617b      	str	r3, [r7, #20]
 80040e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ec:	6a39      	ldr	r1, [r7, #32]
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 f9a8 	bl	8004444 <I2C_WaitOnTXEFlagUntilTimeout>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00d      	beq.n	8004116 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d107      	bne.n	8004112 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004110:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e076      	b.n	8004204 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004116:	88fb      	ldrh	r3, [r7, #6]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d105      	bne.n	8004128 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800411c:	893b      	ldrh	r3, [r7, #8]
 800411e:	b2da      	uxtb	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	611a      	str	r2, [r3, #16]
 8004126:	e021      	b.n	800416c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004128:	893b      	ldrh	r3, [r7, #8]
 800412a:	0a1b      	lsrs	r3, r3, #8
 800412c:	b29b      	uxth	r3, r3
 800412e:	b2da      	uxtb	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004138:	6a39      	ldr	r1, [r7, #32]
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 f982 	bl	8004444 <I2C_WaitOnTXEFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00d      	beq.n	8004162 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414a:	2b04      	cmp	r3, #4
 800414c:	d107      	bne.n	800415e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800415c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e050      	b.n	8004204 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004162:	893b      	ldrh	r3, [r7, #8]
 8004164:	b2da      	uxtb	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800416c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800416e:	6a39      	ldr	r1, [r7, #32]
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 f967 	bl	8004444 <I2C_WaitOnTXEFlagUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00d      	beq.n	8004198 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004180:	2b04      	cmp	r3, #4
 8004182:	d107      	bne.n	8004194 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004192:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e035      	b.n	8004204 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 f82b 	bl	8004210 <I2C_WaitOnFlagUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00d      	beq.n	80041dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041ce:	d103      	bne.n	80041d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e013      	b.n	8004204 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041dc:	897b      	ldrh	r3, [r7, #10]
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	f043 0301 	orr.w	r3, r3, #1
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ee:	6a3a      	ldr	r2, [r7, #32]
 80041f0:	4906      	ldr	r1, [pc, #24]	@ (800420c <I2C_RequestMemoryRead+0x1cc>)
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 f886 	bl	8004304 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	00010002 	.word	0x00010002

08004210 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	4613      	mov	r3, r2
 800421e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004220:	e048      	b.n	80042b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004228:	d044      	beq.n	80042b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422a:	f7fe ff43 	bl	80030b4 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d302      	bcc.n	8004240 <I2C_WaitOnFlagUntilTimeout+0x30>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d139      	bne.n	80042b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	0c1b      	lsrs	r3, r3, #16
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b01      	cmp	r3, #1
 8004248:	d10d      	bne.n	8004266 <I2C_WaitOnFlagUntilTimeout+0x56>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	43da      	mvns	r2, r3
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	4013      	ands	r3, r2
 8004256:	b29b      	uxth	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	bf0c      	ite	eq
 800425c:	2301      	moveq	r3, #1
 800425e:	2300      	movne	r3, #0
 8004260:	b2db      	uxtb	r3, r3
 8004262:	461a      	mov	r2, r3
 8004264:	e00c      	b.n	8004280 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	43da      	mvns	r2, r3
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	4013      	ands	r3, r2
 8004272:	b29b      	uxth	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	bf0c      	ite	eq
 8004278:	2301      	moveq	r3, #1
 800427a:	2300      	movne	r3, #0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	461a      	mov	r2, r3
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	429a      	cmp	r2, r3
 8004284:	d116      	bne.n	80042b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2220      	movs	r2, #32
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a0:	f043 0220 	orr.w	r2, r3, #32
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e023      	b.n	80042fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	0c1b      	lsrs	r3, r3, #16
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d10d      	bne.n	80042da <I2C_WaitOnFlagUntilTimeout+0xca>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	43da      	mvns	r2, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	4013      	ands	r3, r2
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	bf0c      	ite	eq
 80042d0:	2301      	moveq	r3, #1
 80042d2:	2300      	movne	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	461a      	mov	r2, r3
 80042d8:	e00c      	b.n	80042f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	43da      	mvns	r2, r3
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	4013      	ands	r3, r2
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	bf0c      	ite	eq
 80042ec:	2301      	moveq	r3, #1
 80042ee:	2300      	movne	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	461a      	mov	r2, r3
 80042f4:	79fb      	ldrb	r3, [r7, #7]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d093      	beq.n	8004222 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
 8004310:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004312:	e071      	b.n	80043f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800431e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004322:	d123      	bne.n	800436c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004332:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800433c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004358:	f043 0204 	orr.w	r2, r3, #4
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e067      	b.n	800443c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004372:	d041      	beq.n	80043f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004374:	f7fe fe9e 	bl	80030b4 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	429a      	cmp	r2, r3
 8004382:	d302      	bcc.n	800438a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d136      	bne.n	80043f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	0c1b      	lsrs	r3, r3, #16
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b01      	cmp	r3, #1
 8004392:	d10c      	bne.n	80043ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	43da      	mvns	r2, r3
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	4013      	ands	r3, r2
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	bf14      	ite	ne
 80043a6:	2301      	movne	r3, #1
 80043a8:	2300      	moveq	r3, #0
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	e00b      	b.n	80043c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	43da      	mvns	r2, r3
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	4013      	ands	r3, r2
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	bf14      	ite	ne
 80043c0:	2301      	movne	r3, #1
 80043c2:	2300      	moveq	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d016      	beq.n	80043f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e4:	f043 0220 	orr.w	r2, r3, #32
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e021      	b.n	800443c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	0c1b      	lsrs	r3, r3, #16
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d10c      	bne.n	800441c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	43da      	mvns	r2, r3
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	4013      	ands	r3, r2
 800440e:	b29b      	uxth	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	bf14      	ite	ne
 8004414:	2301      	movne	r3, #1
 8004416:	2300      	moveq	r3, #0
 8004418:	b2db      	uxtb	r3, r3
 800441a:	e00b      	b.n	8004434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	43da      	mvns	r2, r3
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4013      	ands	r3, r2
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	bf14      	ite	ne
 800442e:	2301      	movne	r3, #1
 8004430:	2300      	moveq	r3, #0
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	f47f af6d 	bne.w	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004450:	e034      	b.n	80044bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 f8e3 	bl	800461e <I2C_IsAcknowledgeFailed>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e034      	b.n	80044cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004468:	d028      	beq.n	80044bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800446a:	f7fe fe23 	bl	80030b4 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	429a      	cmp	r2, r3
 8004478:	d302      	bcc.n	8004480 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d11d      	bne.n	80044bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800448a:	2b80      	cmp	r3, #128	@ 0x80
 800448c:	d016      	beq.n	80044bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a8:	f043 0220 	orr.w	r2, r3, #32
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e007      	b.n	80044cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044c6:	2b80      	cmp	r3, #128	@ 0x80
 80044c8:	d1c3      	bne.n	8004452 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044e0:	e034      	b.n	800454c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 f89b 	bl	800461e <I2C_IsAcknowledgeFailed>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e034      	b.n	800455c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f8:	d028      	beq.n	800454c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044fa:	f7fe fddb 	bl	80030b4 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	429a      	cmp	r2, r3
 8004508:	d302      	bcc.n	8004510 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d11d      	bne.n	800454c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	f003 0304 	and.w	r3, r3, #4
 800451a:	2b04      	cmp	r3, #4
 800451c:	d016      	beq.n	800454c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2220      	movs	r2, #32
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004538:	f043 0220 	orr.w	r2, r3, #32
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e007      	b.n	800455c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	f003 0304 	and.w	r3, r3, #4
 8004556:	2b04      	cmp	r3, #4
 8004558:	d1c3      	bne.n	80044e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004570:	e049      	b.n	8004606 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	f003 0310 	and.w	r3, r3, #16
 800457c:	2b10      	cmp	r3, #16
 800457e:	d119      	bne.n	80045b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f06f 0210 	mvn.w	r2, #16
 8004588:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e030      	b.n	8004616 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b4:	f7fe fd7e 	bl	80030b4 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d302      	bcc.n	80045ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d11d      	bne.n	8004606 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045d4:	2b40      	cmp	r3, #64	@ 0x40
 80045d6:	d016      	beq.n	8004606 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f2:	f043 0220 	orr.w	r2, r3, #32
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e007      	b.n	8004616 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004610:	2b40      	cmp	r3, #64	@ 0x40
 8004612:	d1ae      	bne.n	8004572 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004630:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004634:	d11b      	bne.n	800466e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800463e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2220      	movs	r2, #32
 800464a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465a:	f043 0204 	orr.w	r2, r3, #4
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004682:	2300      	movs	r3, #0
 8004684:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004686:	2300      	movs	r3, #0
 8004688:	603b      	str	r3, [r7, #0]
 800468a:	4b20      	ldr	r3, [pc, #128]	@ (800470c <HAL_PWREx_EnableOverDrive+0x90>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468e:	4a1f      	ldr	r2, [pc, #124]	@ (800470c <HAL_PWREx_EnableOverDrive+0x90>)
 8004690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004694:	6413      	str	r3, [r2, #64]	@ 0x40
 8004696:	4b1d      	ldr	r3, [pc, #116]	@ (800470c <HAL_PWREx_EnableOverDrive+0x90>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80046a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004710 <HAL_PWREx_EnableOverDrive+0x94>)
 80046a4:	2201      	movs	r2, #1
 80046a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046a8:	f7fe fd04 	bl	80030b4 <HAL_GetTick>
 80046ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80046ae:	e009      	b.n	80046c4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80046b0:	f7fe fd00 	bl	80030b4 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80046be:	d901      	bls.n	80046c4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e01f      	b.n	8004704 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80046c4:	4b13      	ldr	r3, [pc, #76]	@ (8004714 <HAL_PWREx_EnableOverDrive+0x98>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046d0:	d1ee      	bne.n	80046b0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80046d2:	4b11      	ldr	r3, [pc, #68]	@ (8004718 <HAL_PWREx_EnableOverDrive+0x9c>)
 80046d4:	2201      	movs	r2, #1
 80046d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046d8:	f7fe fcec 	bl	80030b4 <HAL_GetTick>
 80046dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80046de:	e009      	b.n	80046f4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80046e0:	f7fe fce8 	bl	80030b4 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80046ee:	d901      	bls.n	80046f4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e007      	b.n	8004704 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80046f4:	4b07      	ldr	r3, [pc, #28]	@ (8004714 <HAL_PWREx_EnableOverDrive+0x98>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004700:	d1ee      	bne.n	80046e0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40023800 	.word	0x40023800
 8004710:	420e0040 	.word	0x420e0040
 8004714:	40007000 	.word	0x40007000
 8004718:	420e0044 	.word	0x420e0044

0800471c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e0cc      	b.n	80048ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004730:	4b68      	ldr	r3, [pc, #416]	@ (80048d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 030f 	and.w	r3, r3, #15
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d90c      	bls.n	8004758 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473e:	4b65      	ldr	r3, [pc, #404]	@ (80048d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004746:	4b63      	ldr	r3, [pc, #396]	@ (80048d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 030f 	and.w	r3, r3, #15
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	429a      	cmp	r2, r3
 8004752:	d001      	beq.n	8004758 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e0b8      	b.n	80048ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d020      	beq.n	80047a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b00      	cmp	r3, #0
 800476e:	d005      	beq.n	800477c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004770:	4b59      	ldr	r3, [pc, #356]	@ (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	4a58      	ldr	r2, [pc, #352]	@ (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004776:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800477a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0308 	and.w	r3, r3, #8
 8004784:	2b00      	cmp	r3, #0
 8004786:	d005      	beq.n	8004794 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004788:	4b53      	ldr	r3, [pc, #332]	@ (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	4a52      	ldr	r2, [pc, #328]	@ (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 800478e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004792:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004794:	4b50      	ldr	r3, [pc, #320]	@ (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	494d      	ldr	r1, [pc, #308]	@ (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d044      	beq.n	800483c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d107      	bne.n	80047ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ba:	4b47      	ldr	r3, [pc, #284]	@ (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d119      	bne.n	80047fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e07f      	b.n	80048ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d003      	beq.n	80047da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047d6:	2b03      	cmp	r3, #3
 80047d8:	d107      	bne.n	80047ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047da:	4b3f      	ldr	r3, [pc, #252]	@ (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d109      	bne.n	80047fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e06f      	b.n	80048ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ea:	4b3b      	ldr	r3, [pc, #236]	@ (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e067      	b.n	80048ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047fa:	4b37      	ldr	r3, [pc, #220]	@ (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f023 0203 	bic.w	r2, r3, #3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	4934      	ldr	r1, [pc, #208]	@ (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004808:	4313      	orrs	r3, r2
 800480a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800480c:	f7fe fc52 	bl	80030b4 <HAL_GetTick>
 8004810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004812:	e00a      	b.n	800482a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004814:	f7fe fc4e 	bl	80030b4 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004822:	4293      	cmp	r3, r2
 8004824:	d901      	bls.n	800482a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e04f      	b.n	80048ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482a:	4b2b      	ldr	r3, [pc, #172]	@ (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 020c 	and.w	r2, r3, #12
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	429a      	cmp	r2, r3
 800483a:	d1eb      	bne.n	8004814 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800483c:	4b25      	ldr	r3, [pc, #148]	@ (80048d4 <HAL_RCC_ClockConfig+0x1b8>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 030f 	and.w	r3, r3, #15
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	429a      	cmp	r2, r3
 8004848:	d20c      	bcs.n	8004864 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484a:	4b22      	ldr	r3, [pc, #136]	@ (80048d4 <HAL_RCC_ClockConfig+0x1b8>)
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004852:	4b20      	ldr	r3, [pc, #128]	@ (80048d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	429a      	cmp	r2, r3
 800485e:	d001      	beq.n	8004864 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e032      	b.n	80048ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	d008      	beq.n	8004882 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004870:	4b19      	ldr	r3, [pc, #100]	@ (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	4916      	ldr	r1, [pc, #88]	@ (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	4313      	orrs	r3, r2
 8004880:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b00      	cmp	r3, #0
 800488c:	d009      	beq.n	80048a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800488e:	4b12      	ldr	r3, [pc, #72]	@ (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	490e      	ldr	r1, [pc, #56]	@ (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048a2:	f000 f887 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 80048a6:	4602      	mov	r2, r0
 80048a8:	4b0b      	ldr	r3, [pc, #44]	@ (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	091b      	lsrs	r3, r3, #4
 80048ae:	f003 030f 	and.w	r3, r3, #15
 80048b2:	490a      	ldr	r1, [pc, #40]	@ (80048dc <HAL_RCC_ClockConfig+0x1c0>)
 80048b4:	5ccb      	ldrb	r3, [r1, r3]
 80048b6:	fa22 f303 	lsr.w	r3, r2, r3
 80048ba:	4a09      	ldr	r2, [pc, #36]	@ (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 80048bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80048be:	4b09      	ldr	r3, [pc, #36]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fe fab4 	bl	8002e30 <HAL_InitTick>

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	40023c00 	.word	0x40023c00
 80048d8:	40023800 	.word	0x40023800
 80048dc:	08008140 	.word	0x08008140
 80048e0:	20000004 	.word	0x20000004
 80048e4:	20000008 	.word	0x20000008

080048e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048ec:	4b03      	ldr	r3, [pc, #12]	@ (80048fc <HAL_RCC_GetHCLKFreq+0x14>)
 80048ee:	681b      	ldr	r3, [r3, #0]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	20000004 	.word	0x20000004

08004900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004904:	f7ff fff0 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
 8004908:	4602      	mov	r2, r0
 800490a:	4b05      	ldr	r3, [pc, #20]	@ (8004920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	0a9b      	lsrs	r3, r3, #10
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	4903      	ldr	r1, [pc, #12]	@ (8004924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004916:	5ccb      	ldrb	r3, [r1, r3]
 8004918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800491c:	4618      	mov	r0, r3
 800491e:	bd80      	pop	{r7, pc}
 8004920:	40023800 	.word	0x40023800
 8004924:	08008150 	.word	0x08008150

08004928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800492c:	f7ff ffdc 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
 8004930:	4602      	mov	r2, r0
 8004932:	4b05      	ldr	r3, [pc, #20]	@ (8004948 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	0b5b      	lsrs	r3, r3, #13
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	4903      	ldr	r1, [pc, #12]	@ (800494c <HAL_RCC_GetPCLK2Freq+0x24>)
 800493e:	5ccb      	ldrb	r3, [r1, r3]
 8004940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004944:	4618      	mov	r0, r3
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40023800 	.word	0x40023800
 800494c:	08008150 	.word	0x08008150

08004950 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	220f      	movs	r2, #15
 800495e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004960:	4b12      	ldr	r3, [pc, #72]	@ (80049ac <HAL_RCC_GetClockConfig+0x5c>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f003 0203 	and.w	r2, r3, #3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800496c:	4b0f      	ldr	r3, [pc, #60]	@ (80049ac <HAL_RCC_GetClockConfig+0x5c>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004978:	4b0c      	ldr	r3, [pc, #48]	@ (80049ac <HAL_RCC_GetClockConfig+0x5c>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004984:	4b09      	ldr	r3, [pc, #36]	@ (80049ac <HAL_RCC_GetClockConfig+0x5c>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	08db      	lsrs	r3, r3, #3
 800498a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004992:	4b07      	ldr	r3, [pc, #28]	@ (80049b0 <HAL_RCC_GetClockConfig+0x60>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 020f 	and.w	r2, r3, #15
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	601a      	str	r2, [r3, #0]
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40023800 	.word	0x40023800
 80049b0:	40023c00 	.word	0x40023c00

080049b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049b8:	b0ae      	sub	sp, #184	@ 0xb8
 80049ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80049c8:	2300      	movs	r3, #0
 80049ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049da:	4bcb      	ldr	r3, [pc, #812]	@ (8004d08 <HAL_RCC_GetSysClockFreq+0x354>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f003 030c 	and.w	r3, r3, #12
 80049e2:	2b0c      	cmp	r3, #12
 80049e4:	f200 8206 	bhi.w	8004df4 <HAL_RCC_GetSysClockFreq+0x440>
 80049e8:	a201      	add	r2, pc, #4	@ (adr r2, 80049f0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80049ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ee:	bf00      	nop
 80049f0:	08004a25 	.word	0x08004a25
 80049f4:	08004df5 	.word	0x08004df5
 80049f8:	08004df5 	.word	0x08004df5
 80049fc:	08004df5 	.word	0x08004df5
 8004a00:	08004a2d 	.word	0x08004a2d
 8004a04:	08004df5 	.word	0x08004df5
 8004a08:	08004df5 	.word	0x08004df5
 8004a0c:	08004df5 	.word	0x08004df5
 8004a10:	08004a35 	.word	0x08004a35
 8004a14:	08004df5 	.word	0x08004df5
 8004a18:	08004df5 	.word	0x08004df5
 8004a1c:	08004df5 	.word	0x08004df5
 8004a20:	08004c25 	.word	0x08004c25
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a24:	4bb9      	ldr	r3, [pc, #740]	@ (8004d0c <HAL_RCC_GetSysClockFreq+0x358>)
 8004a26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a2a:	e1e7      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a2c:	4bb8      	ldr	r3, [pc, #736]	@ (8004d10 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004a2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a32:	e1e3      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a34:	4bb4      	ldr	r3, [pc, #720]	@ (8004d08 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a40:	4bb1      	ldr	r3, [pc, #708]	@ (8004d08 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d071      	beq.n	8004b30 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a4c:	4bae      	ldr	r3, [pc, #696]	@ (8004d08 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	099b      	lsrs	r3, r3, #6
 8004a52:	2200      	movs	r2, #0
 8004a54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a58:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004a5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a64:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004a6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004a72:	4622      	mov	r2, r4
 8004a74:	462b      	mov	r3, r5
 8004a76:	f04f 0000 	mov.w	r0, #0
 8004a7a:	f04f 0100 	mov.w	r1, #0
 8004a7e:	0159      	lsls	r1, r3, #5
 8004a80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a84:	0150      	lsls	r0, r2, #5
 8004a86:	4602      	mov	r2, r0
 8004a88:	460b      	mov	r3, r1
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	1a51      	subs	r1, r2, r1
 8004a8e:	6439      	str	r1, [r7, #64]	@ 0x40
 8004a90:	4629      	mov	r1, r5
 8004a92:	eb63 0301 	sbc.w	r3, r3, r1
 8004a96:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004aa4:	4649      	mov	r1, r9
 8004aa6:	018b      	lsls	r3, r1, #6
 8004aa8:	4641      	mov	r1, r8
 8004aaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004aae:	4641      	mov	r1, r8
 8004ab0:	018a      	lsls	r2, r1, #6
 8004ab2:	4641      	mov	r1, r8
 8004ab4:	1a51      	subs	r1, r2, r1
 8004ab6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ab8:	4649      	mov	r1, r9
 8004aba:	eb63 0301 	sbc.w	r3, r3, r1
 8004abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004acc:	4649      	mov	r1, r9
 8004ace:	00cb      	lsls	r3, r1, #3
 8004ad0:	4641      	mov	r1, r8
 8004ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ad6:	4641      	mov	r1, r8
 8004ad8:	00ca      	lsls	r2, r1, #3
 8004ada:	4610      	mov	r0, r2
 8004adc:	4619      	mov	r1, r3
 8004ade:	4603      	mov	r3, r0
 8004ae0:	4622      	mov	r2, r4
 8004ae2:	189b      	adds	r3, r3, r2
 8004ae4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ae6:	462b      	mov	r3, r5
 8004ae8:	460a      	mov	r2, r1
 8004aea:	eb42 0303 	adc.w	r3, r2, r3
 8004aee:	637b      	str	r3, [r7, #52]	@ 0x34
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004afc:	4629      	mov	r1, r5
 8004afe:	024b      	lsls	r3, r1, #9
 8004b00:	4621      	mov	r1, r4
 8004b02:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b06:	4621      	mov	r1, r4
 8004b08:	024a      	lsls	r2, r1, #9
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b12:	2200      	movs	r2, #0
 8004b14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b18:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b1c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004b20:	f7fb fe0a 	bl	8000738 <__aeabi_uldivmod>
 8004b24:	4602      	mov	r2, r0
 8004b26:	460b      	mov	r3, r1
 8004b28:	4613      	mov	r3, r2
 8004b2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b2e:	e067      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b30:	4b75      	ldr	r3, [pc, #468]	@ (8004d08 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	099b      	lsrs	r3, r3, #6
 8004b36:	2200      	movs	r2, #0
 8004b38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b3c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004b40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b4e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004b52:	4622      	mov	r2, r4
 8004b54:	462b      	mov	r3, r5
 8004b56:	f04f 0000 	mov.w	r0, #0
 8004b5a:	f04f 0100 	mov.w	r1, #0
 8004b5e:	0159      	lsls	r1, r3, #5
 8004b60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b64:	0150      	lsls	r0, r2, #5
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4621      	mov	r1, r4
 8004b6c:	1a51      	subs	r1, r2, r1
 8004b6e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004b70:	4629      	mov	r1, r5
 8004b72:	eb63 0301 	sbc.w	r3, r3, r1
 8004b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004b84:	4649      	mov	r1, r9
 8004b86:	018b      	lsls	r3, r1, #6
 8004b88:	4641      	mov	r1, r8
 8004b8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b8e:	4641      	mov	r1, r8
 8004b90:	018a      	lsls	r2, r1, #6
 8004b92:	4641      	mov	r1, r8
 8004b94:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b98:	4649      	mov	r1, r9
 8004b9a:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b9e:	f04f 0200 	mov.w	r2, #0
 8004ba2:	f04f 0300 	mov.w	r3, #0
 8004ba6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004baa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bb2:	4692      	mov	sl, r2
 8004bb4:	469b      	mov	fp, r3
 8004bb6:	4623      	mov	r3, r4
 8004bb8:	eb1a 0303 	adds.w	r3, sl, r3
 8004bbc:	623b      	str	r3, [r7, #32]
 8004bbe:	462b      	mov	r3, r5
 8004bc0:	eb4b 0303 	adc.w	r3, fp, r3
 8004bc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	f04f 0300 	mov.w	r3, #0
 8004bce:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004bd2:	4629      	mov	r1, r5
 8004bd4:	028b      	lsls	r3, r1, #10
 8004bd6:	4621      	mov	r1, r4
 8004bd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bdc:	4621      	mov	r1, r4
 8004bde:	028a      	lsls	r2, r1, #10
 8004be0:	4610      	mov	r0, r2
 8004be2:	4619      	mov	r1, r3
 8004be4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004be8:	2200      	movs	r2, #0
 8004bea:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bec:	677a      	str	r2, [r7, #116]	@ 0x74
 8004bee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004bf2:	f7fb fda1 	bl	8000738 <__aeabi_uldivmod>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004c00:	4b41      	ldr	r3, [pc, #260]	@ (8004d08 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	0c1b      	lsrs	r3, r3, #16
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004c12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c22:	e0eb      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c24:	4b38      	ldr	r3, [pc, #224]	@ (8004d08 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c30:	4b35      	ldr	r3, [pc, #212]	@ (8004d08 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d06b      	beq.n	8004d14 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c3c:	4b32      	ldr	r3, [pc, #200]	@ (8004d08 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	099b      	lsrs	r3, r3, #6
 8004c42:	2200      	movs	r2, #0
 8004c44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004c48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c50:	2300      	movs	r3, #0
 8004c52:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c54:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004c58:	4622      	mov	r2, r4
 8004c5a:	462b      	mov	r3, r5
 8004c5c:	f04f 0000 	mov.w	r0, #0
 8004c60:	f04f 0100 	mov.w	r1, #0
 8004c64:	0159      	lsls	r1, r3, #5
 8004c66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c6a:	0150      	lsls	r0, r2, #5
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4621      	mov	r1, r4
 8004c72:	1a51      	subs	r1, r2, r1
 8004c74:	61b9      	str	r1, [r7, #24]
 8004c76:	4629      	mov	r1, r5
 8004c78:	eb63 0301 	sbc.w	r3, r3, r1
 8004c7c:	61fb      	str	r3, [r7, #28]
 8004c7e:	f04f 0200 	mov.w	r2, #0
 8004c82:	f04f 0300 	mov.w	r3, #0
 8004c86:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004c8a:	4659      	mov	r1, fp
 8004c8c:	018b      	lsls	r3, r1, #6
 8004c8e:	4651      	mov	r1, sl
 8004c90:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c94:	4651      	mov	r1, sl
 8004c96:	018a      	lsls	r2, r1, #6
 8004c98:	4651      	mov	r1, sl
 8004c9a:	ebb2 0801 	subs.w	r8, r2, r1
 8004c9e:	4659      	mov	r1, fp
 8004ca0:	eb63 0901 	sbc.w	r9, r3, r1
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cb0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cb4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cb8:	4690      	mov	r8, r2
 8004cba:	4699      	mov	r9, r3
 8004cbc:	4623      	mov	r3, r4
 8004cbe:	eb18 0303 	adds.w	r3, r8, r3
 8004cc2:	613b      	str	r3, [r7, #16]
 8004cc4:	462b      	mov	r3, r5
 8004cc6:	eb49 0303 	adc.w	r3, r9, r3
 8004cca:	617b      	str	r3, [r7, #20]
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004cd8:	4629      	mov	r1, r5
 8004cda:	024b      	lsls	r3, r1, #9
 8004cdc:	4621      	mov	r1, r4
 8004cde:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	024a      	lsls	r2, r1, #9
 8004ce6:	4610      	mov	r0, r2
 8004ce8:	4619      	mov	r1, r3
 8004cea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004cee:	2200      	movs	r2, #0
 8004cf0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004cf2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004cf4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004cf8:	f7fb fd1e 	bl	8000738 <__aeabi_uldivmod>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4613      	mov	r3, r2
 8004d02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d06:	e065      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x420>
 8004d08:	40023800 	.word	0x40023800
 8004d0c:	00f42400 	.word	0x00f42400
 8004d10:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d14:	4b3d      	ldr	r3, [pc, #244]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x458>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	099b      	lsrs	r3, r3, #6
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	4611      	mov	r1, r2
 8004d20:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d24:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d26:	2300      	movs	r3, #0
 8004d28:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d2a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004d2e:	4642      	mov	r2, r8
 8004d30:	464b      	mov	r3, r9
 8004d32:	f04f 0000 	mov.w	r0, #0
 8004d36:	f04f 0100 	mov.w	r1, #0
 8004d3a:	0159      	lsls	r1, r3, #5
 8004d3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d40:	0150      	lsls	r0, r2, #5
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	4641      	mov	r1, r8
 8004d48:	1a51      	subs	r1, r2, r1
 8004d4a:	60b9      	str	r1, [r7, #8]
 8004d4c:	4649      	mov	r1, r9
 8004d4e:	eb63 0301 	sbc.w	r3, r3, r1
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004d60:	4659      	mov	r1, fp
 8004d62:	018b      	lsls	r3, r1, #6
 8004d64:	4651      	mov	r1, sl
 8004d66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d6a:	4651      	mov	r1, sl
 8004d6c:	018a      	lsls	r2, r1, #6
 8004d6e:	4651      	mov	r1, sl
 8004d70:	1a54      	subs	r4, r2, r1
 8004d72:	4659      	mov	r1, fp
 8004d74:	eb63 0501 	sbc.w	r5, r3, r1
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	00eb      	lsls	r3, r5, #3
 8004d82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d86:	00e2      	lsls	r2, r4, #3
 8004d88:	4614      	mov	r4, r2
 8004d8a:	461d      	mov	r5, r3
 8004d8c:	4643      	mov	r3, r8
 8004d8e:	18e3      	adds	r3, r4, r3
 8004d90:	603b      	str	r3, [r7, #0]
 8004d92:	464b      	mov	r3, r9
 8004d94:	eb45 0303 	adc.w	r3, r5, r3
 8004d98:	607b      	str	r3, [r7, #4]
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	f04f 0300 	mov.w	r3, #0
 8004da2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004da6:	4629      	mov	r1, r5
 8004da8:	028b      	lsls	r3, r1, #10
 8004daa:	4621      	mov	r1, r4
 8004dac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004db0:	4621      	mov	r1, r4
 8004db2:	028a      	lsls	r2, r1, #10
 8004db4:	4610      	mov	r0, r2
 8004db6:	4619      	mov	r1, r3
 8004db8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dc0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004dc2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004dc6:	f7fb fcb7 	bl	8000738 <__aeabi_uldivmod>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4613      	mov	r3, r2
 8004dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x458>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	0f1b      	lsrs	r3, r3, #28
 8004dda:	f003 0307 	and.w	r3, r3, #7
 8004dde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004de2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004de6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004df2:	e003      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004df4:	4b06      	ldr	r3, [pc, #24]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004df6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004dfa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dfc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	37b8      	adds	r7, #184	@ 0xb8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e0a:	bf00      	nop
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	00f42400 	.word	0x00f42400

08004e14 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e28d      	b.n	8005342 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 8083 	beq.w	8004f3a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004e34:	4b94      	ldr	r3, [pc, #592]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f003 030c 	and.w	r3, r3, #12
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d019      	beq.n	8004e74 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004e40:	4b91      	ldr	r3, [pc, #580]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f003 030c 	and.w	r3, r3, #12
        || \
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d106      	bne.n	8004e5a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004e4c:	4b8e      	ldr	r3, [pc, #568]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e58:	d00c      	beq.n	8004e74 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e5a:	4b8b      	ldr	r3, [pc, #556]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004e62:	2b0c      	cmp	r3, #12
 8004e64:	d112      	bne.n	8004e8c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e66:	4b88      	ldr	r3, [pc, #544]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e72:	d10b      	bne.n	8004e8c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e74:	4b84      	ldr	r3, [pc, #528]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d05b      	beq.n	8004f38 <HAL_RCC_OscConfig+0x124>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d157      	bne.n	8004f38 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e25a      	b.n	8005342 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e94:	d106      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x90>
 8004e96:	4b7c      	ldr	r3, [pc, #496]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a7b      	ldr	r2, [pc, #492]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 8004e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	e01d      	b.n	8004ee0 <HAL_RCC_OscConfig+0xcc>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004eac:	d10c      	bne.n	8004ec8 <HAL_RCC_OscConfig+0xb4>
 8004eae:	4b76      	ldr	r3, [pc, #472]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a75      	ldr	r2, [pc, #468]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 8004eb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	4b73      	ldr	r3, [pc, #460]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a72      	ldr	r2, [pc, #456]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 8004ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	e00b      	b.n	8004ee0 <HAL_RCC_OscConfig+0xcc>
 8004ec8:	4b6f      	ldr	r3, [pc, #444]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a6e      	ldr	r2, [pc, #440]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 8004ece:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	4b6c      	ldr	r3, [pc, #432]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a6b      	ldr	r2, [pc, #428]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 8004eda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d013      	beq.n	8004f10 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee8:	f7fe f8e4 	bl	80030b4 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ef0:	f7fe f8e0 	bl	80030b4 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b64      	cmp	r3, #100	@ 0x64
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e21f      	b.n	8005342 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f02:	4b61      	ldr	r3, [pc, #388]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0f0      	beq.n	8004ef0 <HAL_RCC_OscConfig+0xdc>
 8004f0e:	e014      	b.n	8004f3a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f10:	f7fe f8d0 	bl	80030b4 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f18:	f7fe f8cc 	bl	80030b4 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b64      	cmp	r3, #100	@ 0x64
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e20b      	b.n	8005342 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f2a:	4b57      	ldr	r3, [pc, #348]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1f0      	bne.n	8004f18 <HAL_RCC_OscConfig+0x104>
 8004f36:	e000      	b.n	8004f3a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d06f      	beq.n	8005026 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004f46:	4b50      	ldr	r3, [pc, #320]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 030c 	and.w	r3, r3, #12
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d017      	beq.n	8004f82 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004f52:	4b4d      	ldr	r3, [pc, #308]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 030c 	and.w	r3, r3, #12
        || \
 8004f5a:	2b08      	cmp	r3, #8
 8004f5c:	d105      	bne.n	8004f6a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004f5e:	4b4a      	ldr	r3, [pc, #296]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00b      	beq.n	8004f82 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f6a:	4b47      	ldr	r3, [pc, #284]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004f72:	2b0c      	cmp	r3, #12
 8004f74:	d11c      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f76:	4b44      	ldr	r3, [pc, #272]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d116      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f82:	4b41      	ldr	r3, [pc, #260]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d005      	beq.n	8004f9a <HAL_RCC_OscConfig+0x186>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d001      	beq.n	8004f9a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e1d3      	b.n	8005342 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f9a:	4b3b      	ldr	r3, [pc, #236]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	4937      	ldr	r1, [pc, #220]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fae:	e03a      	b.n	8005026 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d020      	beq.n	8004ffa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fb8:	4b34      	ldr	r3, [pc, #208]	@ (800508c <HAL_RCC_OscConfig+0x278>)
 8004fba:	2201      	movs	r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbe:	f7fe f879 	bl	80030b4 <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc4:	e008      	b.n	8004fd8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fc6:	f7fe f875 	bl	80030b4 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e1b4      	b.n	8005342 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd8:	4b2b      	ldr	r3, [pc, #172]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0f0      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fe4:	4b28      	ldr	r3, [pc, #160]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	4925      	ldr	r1, [pc, #148]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	600b      	str	r3, [r1, #0]
 8004ff8:	e015      	b.n	8005026 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ffa:	4b24      	ldr	r3, [pc, #144]	@ (800508c <HAL_RCC_OscConfig+0x278>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005000:	f7fe f858 	bl	80030b4 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005008:	f7fe f854 	bl	80030b4 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e193      	b.n	8005342 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800501a:	4b1b      	ldr	r3, [pc, #108]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1f0      	bne.n	8005008 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b00      	cmp	r3, #0
 8005030:	d036      	beq.n	80050a0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d016      	beq.n	8005068 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800503a:	4b15      	ldr	r3, [pc, #84]	@ (8005090 <HAL_RCC_OscConfig+0x27c>)
 800503c:	2201      	movs	r2, #1
 800503e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005040:	f7fe f838 	bl	80030b4 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005048:	f7fe f834 	bl	80030b4 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e173      	b.n	8005342 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800505a:	4b0b      	ldr	r3, [pc, #44]	@ (8005088 <HAL_RCC_OscConfig+0x274>)
 800505c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0f0      	beq.n	8005048 <HAL_RCC_OscConfig+0x234>
 8005066:	e01b      	b.n	80050a0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005068:	4b09      	ldr	r3, [pc, #36]	@ (8005090 <HAL_RCC_OscConfig+0x27c>)
 800506a:	2200      	movs	r2, #0
 800506c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800506e:	f7fe f821 	bl	80030b4 <HAL_GetTick>
 8005072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005074:	e00e      	b.n	8005094 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005076:	f7fe f81d 	bl	80030b4 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d907      	bls.n	8005094 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e15c      	b.n	8005342 <HAL_RCC_OscConfig+0x52e>
 8005088:	40023800 	.word	0x40023800
 800508c:	42470000 	.word	0x42470000
 8005090:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005094:	4b8a      	ldr	r3, [pc, #552]	@ (80052c0 <HAL_RCC_OscConfig+0x4ac>)
 8005096:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1ea      	bne.n	8005076 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0304 	and.w	r3, r3, #4
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 8097 	beq.w	80051dc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ae:	2300      	movs	r3, #0
 80050b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050b2:	4b83      	ldr	r3, [pc, #524]	@ (80052c0 <HAL_RCC_OscConfig+0x4ac>)
 80050b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10f      	bne.n	80050de <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050be:	2300      	movs	r3, #0
 80050c0:	60bb      	str	r3, [r7, #8]
 80050c2:	4b7f      	ldr	r3, [pc, #508]	@ (80052c0 <HAL_RCC_OscConfig+0x4ac>)
 80050c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c6:	4a7e      	ldr	r2, [pc, #504]	@ (80052c0 <HAL_RCC_OscConfig+0x4ac>)
 80050c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80050ce:	4b7c      	ldr	r3, [pc, #496]	@ (80052c0 <HAL_RCC_OscConfig+0x4ac>)
 80050d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050d6:	60bb      	str	r3, [r7, #8]
 80050d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050da:	2301      	movs	r3, #1
 80050dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050de:	4b79      	ldr	r3, [pc, #484]	@ (80052c4 <HAL_RCC_OscConfig+0x4b0>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d118      	bne.n	800511c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050ea:	4b76      	ldr	r3, [pc, #472]	@ (80052c4 <HAL_RCC_OscConfig+0x4b0>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a75      	ldr	r2, [pc, #468]	@ (80052c4 <HAL_RCC_OscConfig+0x4b0>)
 80050f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050f6:	f7fd ffdd 	bl	80030b4 <HAL_GetTick>
 80050fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050fc:	e008      	b.n	8005110 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050fe:	f7fd ffd9 	bl	80030b4 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d901      	bls.n	8005110 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e118      	b.n	8005342 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005110:	4b6c      	ldr	r3, [pc, #432]	@ (80052c4 <HAL_RCC_OscConfig+0x4b0>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0f0      	beq.n	80050fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d106      	bne.n	8005132 <HAL_RCC_OscConfig+0x31e>
 8005124:	4b66      	ldr	r3, [pc, #408]	@ (80052c0 <HAL_RCC_OscConfig+0x4ac>)
 8005126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005128:	4a65      	ldr	r2, [pc, #404]	@ (80052c0 <HAL_RCC_OscConfig+0x4ac>)
 800512a:	f043 0301 	orr.w	r3, r3, #1
 800512e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005130:	e01c      	b.n	800516c <HAL_RCC_OscConfig+0x358>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	2b05      	cmp	r3, #5
 8005138:	d10c      	bne.n	8005154 <HAL_RCC_OscConfig+0x340>
 800513a:	4b61      	ldr	r3, [pc, #388]	@ (80052c0 <HAL_RCC_OscConfig+0x4ac>)
 800513c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800513e:	4a60      	ldr	r2, [pc, #384]	@ (80052c0 <HAL_RCC_OscConfig+0x4ac>)
 8005140:	f043 0304 	orr.w	r3, r3, #4
 8005144:	6713      	str	r3, [r2, #112]	@ 0x70
 8005146:	4b5e      	ldr	r3, [pc, #376]	@ (80052c0 <HAL_RCC_OscConfig+0x4ac>)
 8005148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800514a:	4a5d      	ldr	r2, [pc, #372]	@ (80052c0 <HAL_RCC_OscConfig+0x4ac>)
 800514c:	f043 0301 	orr.w	r3, r3, #1
 8005150:	6713      	str	r3, [r2, #112]	@ 0x70
 8005152:	e00b      	b.n	800516c <HAL_RCC_OscConfig+0x358>
 8005154:	4b5a      	ldr	r3, [pc, #360]	@ (80052c0 <HAL_RCC_OscConfig+0x4ac>)
 8005156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005158:	4a59      	ldr	r2, [pc, #356]	@ (80052c0 <HAL_RCC_OscConfig+0x4ac>)
 800515a:	f023 0301 	bic.w	r3, r3, #1
 800515e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005160:	4b57      	ldr	r3, [pc, #348]	@ (80052c0 <HAL_RCC_OscConfig+0x4ac>)
 8005162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005164:	4a56      	ldr	r2, [pc, #344]	@ (80052c0 <HAL_RCC_OscConfig+0x4ac>)
 8005166:	f023 0304 	bic.w	r3, r3, #4
 800516a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d015      	beq.n	80051a0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005174:	f7fd ff9e 	bl	80030b4 <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800517a:	e00a      	b.n	8005192 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800517c:	f7fd ff9a 	bl	80030b4 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800518a:	4293      	cmp	r3, r2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e0d7      	b.n	8005342 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005192:	4b4b      	ldr	r3, [pc, #300]	@ (80052c0 <HAL_RCC_OscConfig+0x4ac>)
 8005194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0ee      	beq.n	800517c <HAL_RCC_OscConfig+0x368>
 800519e:	e014      	b.n	80051ca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a0:	f7fd ff88 	bl	80030b4 <HAL_GetTick>
 80051a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051a6:	e00a      	b.n	80051be <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051a8:	f7fd ff84 	bl	80030b4 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e0c1      	b.n	8005342 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051be:	4b40      	ldr	r3, [pc, #256]	@ (80052c0 <HAL_RCC_OscConfig+0x4ac>)
 80051c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1ee      	bne.n	80051a8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051ca:	7dfb      	ldrb	r3, [r7, #23]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d105      	bne.n	80051dc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051d0:	4b3b      	ldr	r3, [pc, #236]	@ (80052c0 <HAL_RCC_OscConfig+0x4ac>)
 80051d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d4:	4a3a      	ldr	r2, [pc, #232]	@ (80052c0 <HAL_RCC_OscConfig+0x4ac>)
 80051d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 80ad 	beq.w	8005340 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051e6:	4b36      	ldr	r3, [pc, #216]	@ (80052c0 <HAL_RCC_OscConfig+0x4ac>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 030c 	and.w	r3, r3, #12
 80051ee:	2b08      	cmp	r3, #8
 80051f0:	d060      	beq.n	80052b4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d145      	bne.n	8005286 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051fa:	4b33      	ldr	r3, [pc, #204]	@ (80052c8 <HAL_RCC_OscConfig+0x4b4>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005200:	f7fd ff58 	bl	80030b4 <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005206:	e008      	b.n	800521a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005208:	f7fd ff54 	bl	80030b4 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e093      	b.n	8005342 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800521a:	4b29      	ldr	r3, [pc, #164]	@ (80052c0 <HAL_RCC_OscConfig+0x4ac>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1f0      	bne.n	8005208 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	69da      	ldr	r2, [r3, #28]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	431a      	orrs	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005234:	019b      	lsls	r3, r3, #6
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800523c:	085b      	lsrs	r3, r3, #1
 800523e:	3b01      	subs	r3, #1
 8005240:	041b      	lsls	r3, r3, #16
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005248:	061b      	lsls	r3, r3, #24
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005250:	071b      	lsls	r3, r3, #28
 8005252:	491b      	ldr	r1, [pc, #108]	@ (80052c0 <HAL_RCC_OscConfig+0x4ac>)
 8005254:	4313      	orrs	r3, r2
 8005256:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005258:	4b1b      	ldr	r3, [pc, #108]	@ (80052c8 <HAL_RCC_OscConfig+0x4b4>)
 800525a:	2201      	movs	r2, #1
 800525c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800525e:	f7fd ff29 	bl	80030b4 <HAL_GetTick>
 8005262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005264:	e008      	b.n	8005278 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005266:	f7fd ff25 	bl	80030b4 <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d901      	bls.n	8005278 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e064      	b.n	8005342 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005278:	4b11      	ldr	r3, [pc, #68]	@ (80052c0 <HAL_RCC_OscConfig+0x4ac>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d0f0      	beq.n	8005266 <HAL_RCC_OscConfig+0x452>
 8005284:	e05c      	b.n	8005340 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005286:	4b10      	ldr	r3, [pc, #64]	@ (80052c8 <HAL_RCC_OscConfig+0x4b4>)
 8005288:	2200      	movs	r2, #0
 800528a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800528c:	f7fd ff12 	bl	80030b4 <HAL_GetTick>
 8005290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005292:	e008      	b.n	80052a6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005294:	f7fd ff0e 	bl	80030b4 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e04d      	b.n	8005342 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052a6:	4b06      	ldr	r3, [pc, #24]	@ (80052c0 <HAL_RCC_OscConfig+0x4ac>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1f0      	bne.n	8005294 <HAL_RCC_OscConfig+0x480>
 80052b2:	e045      	b.n	8005340 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d107      	bne.n	80052cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e040      	b.n	8005342 <HAL_RCC_OscConfig+0x52e>
 80052c0:	40023800 	.word	0x40023800
 80052c4:	40007000 	.word	0x40007000
 80052c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052cc:	4b1f      	ldr	r3, [pc, #124]	@ (800534c <HAL_RCC_OscConfig+0x538>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d030      	beq.n	800533c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d129      	bne.n	800533c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d122      	bne.n	800533c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80052fc:	4013      	ands	r3, r2
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005302:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005304:	4293      	cmp	r3, r2
 8005306:	d119      	bne.n	800533c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005312:	085b      	lsrs	r3, r3, #1
 8005314:	3b01      	subs	r3, #1
 8005316:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005318:	429a      	cmp	r2, r3
 800531a:	d10f      	bne.n	800533c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005326:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005328:	429a      	cmp	r2, r3
 800532a:	d107      	bne.n	800533c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005336:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005338:	429a      	cmp	r2, r3
 800533a:	d001      	beq.n	8005340 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e000      	b.n	8005342 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3718      	adds	r7, #24
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40023800 	.word	0x40023800

08005350 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e041      	b.n	80053e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d106      	bne.n	800537c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f839 	bl	80053ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3304      	adds	r3, #4
 800538c:	4619      	mov	r1, r3
 800538e:	4610      	mov	r0, r2
 8005390:	f000 f9c0 	bl	8005714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b083      	sub	sp, #12
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80053f6:	bf00      	nop
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
	...

08005404 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b01      	cmp	r3, #1
 8005416:	d001      	beq.n	800541c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e04e      	b.n	80054ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2202      	movs	r2, #2
 8005420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68da      	ldr	r2, [r3, #12]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f042 0201 	orr.w	r2, r2, #1
 8005432:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a23      	ldr	r2, [pc, #140]	@ (80054c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d022      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0x80>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005446:	d01d      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0x80>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a1f      	ldr	r2, [pc, #124]	@ (80054cc <HAL_TIM_Base_Start_IT+0xc8>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d018      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0x80>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a1e      	ldr	r2, [pc, #120]	@ (80054d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d013      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0x80>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a1c      	ldr	r2, [pc, #112]	@ (80054d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d00e      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0x80>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a1b      	ldr	r2, [pc, #108]	@ (80054d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d009      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0x80>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a19      	ldr	r2, [pc, #100]	@ (80054dc <HAL_TIM_Base_Start_IT+0xd8>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d004      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0x80>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a18      	ldr	r2, [pc, #96]	@ (80054e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d111      	bne.n	80054a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 0307 	and.w	r3, r3, #7
 800548e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2b06      	cmp	r3, #6
 8005494:	d010      	beq.n	80054b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f042 0201 	orr.w	r2, r2, #1
 80054a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a6:	e007      	b.n	80054b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0201 	orr.w	r2, r2, #1
 80054b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	40010000 	.word	0x40010000
 80054cc:	40000400 	.word	0x40000400
 80054d0:	40000800 	.word	0x40000800
 80054d4:	40000c00 	.word	0x40000c00
 80054d8:	40010400 	.word	0x40010400
 80054dc:	40014000 	.word	0x40014000
 80054e0:	40001800 	.word	0x40001800

080054e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d020      	beq.n	8005548 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d01b      	beq.n	8005548 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f06f 0202 	mvn.w	r2, #2
 8005518:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	f003 0303 	and.w	r3, r3, #3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f8d2 	bl	80056d8 <HAL_TIM_IC_CaptureCallback>
 8005534:	e005      	b.n	8005542 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f8c4 	bl	80056c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f8d5 	bl	80056ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f003 0304 	and.w	r3, r3, #4
 800554e:	2b00      	cmp	r3, #0
 8005550:	d020      	beq.n	8005594 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	2b00      	cmp	r3, #0
 800555a:	d01b      	beq.n	8005594 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f06f 0204 	mvn.w	r2, #4
 8005564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2202      	movs	r2, #2
 800556a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f8ac 	bl	80056d8 <HAL_TIM_IC_CaptureCallback>
 8005580:	e005      	b.n	800558e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f89e 	bl	80056c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f8af 	bl	80056ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f003 0308 	and.w	r3, r3, #8
 800559a:	2b00      	cmp	r3, #0
 800559c:	d020      	beq.n	80055e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f003 0308 	and.w	r3, r3, #8
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d01b      	beq.n	80055e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f06f 0208 	mvn.w	r2, #8
 80055b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2204      	movs	r2, #4
 80055b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	f003 0303 	and.w	r3, r3, #3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d003      	beq.n	80055ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f886 	bl	80056d8 <HAL_TIM_IC_CaptureCallback>
 80055cc:	e005      	b.n	80055da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f878 	bl	80056c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f889 	bl	80056ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f003 0310 	and.w	r3, r3, #16
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d020      	beq.n	800562c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f003 0310 	and.w	r3, r3, #16
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d01b      	beq.n	800562c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f06f 0210 	mvn.w	r2, #16
 80055fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2208      	movs	r2, #8
 8005602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f860 	bl	80056d8 <HAL_TIM_IC_CaptureCallback>
 8005618:	e005      	b.n	8005626 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f852 	bl	80056c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f863 	bl	80056ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00c      	beq.n	8005650 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	2b00      	cmp	r3, #0
 800563e:	d007      	beq.n	8005650 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f06f 0201 	mvn.w	r2, #1
 8005648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7fd fac6 	bl	8002bdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00c      	beq.n	8005674 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005660:	2b00      	cmp	r3, #0
 8005662:	d007      	beq.n	8005674 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800566c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f906 	bl	8005880 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00c      	beq.n	8005698 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005684:	2b00      	cmp	r3, #0
 8005686:	d007      	beq.n	8005698 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f834 	bl	8005700 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	f003 0320 	and.w	r3, r3, #32
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00c      	beq.n	80056bc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f003 0320 	and.w	r3, r3, #32
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d007      	beq.n	80056bc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f06f 0220 	mvn.w	r2, #32
 80056b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f8d8 	bl	800586c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056bc:	bf00      	nop
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a46      	ldr	r2, [pc, #280]	@ (8005840 <TIM_Base_SetConfig+0x12c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d013      	beq.n	8005754 <TIM_Base_SetConfig+0x40>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005732:	d00f      	beq.n	8005754 <TIM_Base_SetConfig+0x40>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a43      	ldr	r2, [pc, #268]	@ (8005844 <TIM_Base_SetConfig+0x130>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d00b      	beq.n	8005754 <TIM_Base_SetConfig+0x40>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a42      	ldr	r2, [pc, #264]	@ (8005848 <TIM_Base_SetConfig+0x134>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d007      	beq.n	8005754 <TIM_Base_SetConfig+0x40>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a41      	ldr	r2, [pc, #260]	@ (800584c <TIM_Base_SetConfig+0x138>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d003      	beq.n	8005754 <TIM_Base_SetConfig+0x40>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a40      	ldr	r2, [pc, #256]	@ (8005850 <TIM_Base_SetConfig+0x13c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d108      	bne.n	8005766 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800575a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a35      	ldr	r2, [pc, #212]	@ (8005840 <TIM_Base_SetConfig+0x12c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d02b      	beq.n	80057c6 <TIM_Base_SetConfig+0xb2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005774:	d027      	beq.n	80057c6 <TIM_Base_SetConfig+0xb2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a32      	ldr	r2, [pc, #200]	@ (8005844 <TIM_Base_SetConfig+0x130>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d023      	beq.n	80057c6 <TIM_Base_SetConfig+0xb2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a31      	ldr	r2, [pc, #196]	@ (8005848 <TIM_Base_SetConfig+0x134>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d01f      	beq.n	80057c6 <TIM_Base_SetConfig+0xb2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a30      	ldr	r2, [pc, #192]	@ (800584c <TIM_Base_SetConfig+0x138>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d01b      	beq.n	80057c6 <TIM_Base_SetConfig+0xb2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a2f      	ldr	r2, [pc, #188]	@ (8005850 <TIM_Base_SetConfig+0x13c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d017      	beq.n	80057c6 <TIM_Base_SetConfig+0xb2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a2e      	ldr	r2, [pc, #184]	@ (8005854 <TIM_Base_SetConfig+0x140>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d013      	beq.n	80057c6 <TIM_Base_SetConfig+0xb2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a2d      	ldr	r2, [pc, #180]	@ (8005858 <TIM_Base_SetConfig+0x144>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d00f      	beq.n	80057c6 <TIM_Base_SetConfig+0xb2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a2c      	ldr	r2, [pc, #176]	@ (800585c <TIM_Base_SetConfig+0x148>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d00b      	beq.n	80057c6 <TIM_Base_SetConfig+0xb2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a2b      	ldr	r2, [pc, #172]	@ (8005860 <TIM_Base_SetConfig+0x14c>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d007      	beq.n	80057c6 <TIM_Base_SetConfig+0xb2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a2a      	ldr	r2, [pc, #168]	@ (8005864 <TIM_Base_SetConfig+0x150>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d003      	beq.n	80057c6 <TIM_Base_SetConfig+0xb2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a29      	ldr	r2, [pc, #164]	@ (8005868 <TIM_Base_SetConfig+0x154>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d108      	bne.n	80057d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a10      	ldr	r2, [pc, #64]	@ (8005840 <TIM_Base_SetConfig+0x12c>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d003      	beq.n	800580c <TIM_Base_SetConfig+0xf8>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a12      	ldr	r2, [pc, #72]	@ (8005850 <TIM_Base_SetConfig+0x13c>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d103      	bne.n	8005814 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	691a      	ldr	r2, [r3, #16]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b01      	cmp	r3, #1
 8005824:	d105      	bne.n	8005832 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	f023 0201 	bic.w	r2, r3, #1
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	611a      	str	r2, [r3, #16]
  }
}
 8005832:	bf00      	nop
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	40010000 	.word	0x40010000
 8005844:	40000400 	.word	0x40000400
 8005848:	40000800 	.word	0x40000800
 800584c:	40000c00 	.word	0x40000c00
 8005850:	40010400 	.word	0x40010400
 8005854:	40014000 	.word	0x40014000
 8005858:	40014400 	.word	0x40014400
 800585c:	40014800 	.word	0x40014800
 8005860:	40001800 	.word	0x40001800
 8005864:	40001c00 	.word	0x40001c00
 8005868:	40002000 	.word	0x40002000

0800586c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e042      	b.n	800592c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d106      	bne.n	80058c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7fd fa70 	bl	8002da0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2224      	movs	r2, #36	@ 0x24
 80058c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f973 	bl	8005bc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	691a      	ldr	r2, [r3, #16]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	695a      	ldr	r2, [r3, #20]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68da      	ldr	r2, [r3, #12]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800590c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2220      	movs	r2, #32
 8005920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b08a      	sub	sp, #40	@ 0x28
 8005938:	af02      	add	r7, sp, #8
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	603b      	str	r3, [r7, #0]
 8005940:	4613      	mov	r3, r2
 8005942:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005944:	2300      	movs	r3, #0
 8005946:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b20      	cmp	r3, #32
 8005952:	d175      	bne.n	8005a40 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d002      	beq.n	8005960 <HAL_UART_Transmit+0x2c>
 800595a:	88fb      	ldrh	r3, [r7, #6]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e06e      	b.n	8005a42 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2221      	movs	r2, #33	@ 0x21
 800596e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005972:	f7fd fb9f 	bl	80030b4 <HAL_GetTick>
 8005976:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	88fa      	ldrh	r2, [r7, #6]
 800597c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	88fa      	ldrh	r2, [r7, #6]
 8005982:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800598c:	d108      	bne.n	80059a0 <HAL_UART_Transmit+0x6c>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d104      	bne.n	80059a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005996:	2300      	movs	r3, #0
 8005998:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	61bb      	str	r3, [r7, #24]
 800599e:	e003      	b.n	80059a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059a4:	2300      	movs	r3, #0
 80059a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80059a8:	e02e      	b.n	8005a08 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2200      	movs	r2, #0
 80059b2:	2180      	movs	r1, #128	@ 0x80
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 f848 	bl	8005a4a <UART_WaitOnFlagUntilTimeout>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d005      	beq.n	80059cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2220      	movs	r2, #32
 80059c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e03a      	b.n	8005a42 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10b      	bne.n	80059ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	461a      	mov	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	3302      	adds	r3, #2
 80059e6:	61bb      	str	r3, [r7, #24]
 80059e8:	e007      	b.n	80059fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	781a      	ldrb	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	3301      	adds	r3, #1
 80059f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	3b01      	subs	r3, #1
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1cb      	bne.n	80059aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	2140      	movs	r1, #64	@ 0x40
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 f814 	bl	8005a4a <UART_WaitOnFlagUntilTimeout>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d005      	beq.n	8005a34 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e006      	b.n	8005a42 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	e000      	b.n	8005a42 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005a40:	2302      	movs	r3, #2
  }
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3720      	adds	r7, #32
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b086      	sub	sp, #24
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	60f8      	str	r0, [r7, #12]
 8005a52:	60b9      	str	r1, [r7, #8]
 8005a54:	603b      	str	r3, [r7, #0]
 8005a56:	4613      	mov	r3, r2
 8005a58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a5a:	e03b      	b.n	8005ad4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a62:	d037      	beq.n	8005ad4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a64:	f7fd fb26 	bl	80030b4 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	6a3a      	ldr	r2, [r7, #32]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d302      	bcc.n	8005a7a <UART_WaitOnFlagUntilTimeout+0x30>
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e03a      	b.n	8005af4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f003 0304 	and.w	r3, r3, #4
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d023      	beq.n	8005ad4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	2b80      	cmp	r3, #128	@ 0x80
 8005a90:	d020      	beq.n	8005ad4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	2b40      	cmp	r3, #64	@ 0x40
 8005a96:	d01d      	beq.n	8005ad4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	2b08      	cmp	r3, #8
 8005aa4:	d116      	bne.n	8005ad4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	617b      	str	r3, [r7, #20]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	617b      	str	r3, [r7, #20]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	617b      	str	r3, [r7, #20]
 8005aba:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 f81d 	bl	8005afc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2208      	movs	r2, #8
 8005ac6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e00f      	b.n	8005af4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	4013      	ands	r3, r2
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	bf0c      	ite	eq
 8005ae4:	2301      	moveq	r3, #1
 8005ae6:	2300      	movne	r3, #0
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	461a      	mov	r2, r3
 8005aec:	79fb      	ldrb	r3, [r7, #7]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d0b4      	beq.n	8005a5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3718      	adds	r7, #24
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b095      	sub	sp, #84	@ 0x54
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	330c      	adds	r3, #12
 8005b0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b0e:	e853 3f00 	ldrex	r3, [r3]
 8005b12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	330c      	adds	r3, #12
 8005b22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b24:	643a      	str	r2, [r7, #64]	@ 0x40
 8005b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b2c:	e841 2300 	strex	r3, r2, [r1]
 8005b30:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1e5      	bne.n	8005b04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3314      	adds	r3, #20
 8005b3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	e853 3f00 	ldrex	r3, [r3]
 8005b46:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	f023 0301 	bic.w	r3, r3, #1
 8005b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3314      	adds	r3, #20
 8005b56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b60:	e841 2300 	strex	r3, r2, [r1]
 8005b64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1e5      	bne.n	8005b38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d119      	bne.n	8005ba8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	330c      	adds	r3, #12
 8005b7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	e853 3f00 	ldrex	r3, [r3]
 8005b82:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	f023 0310 	bic.w	r3, r3, #16
 8005b8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	330c      	adds	r3, #12
 8005b92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b94:	61ba      	str	r2, [r7, #24]
 8005b96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b98:	6979      	ldr	r1, [r7, #20]
 8005b9a:	69ba      	ldr	r2, [r7, #24]
 8005b9c:	e841 2300 	strex	r3, r2, [r1]
 8005ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1e5      	bne.n	8005b74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2220      	movs	r2, #32
 8005bac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005bb6:	bf00      	nop
 8005bb8:	3754      	adds	r7, #84	@ 0x54
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
	...

08005bc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bc8:	b0c0      	sub	sp, #256	@ 0x100
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be0:	68d9      	ldr	r1, [r3, #12]
 8005be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	ea40 0301 	orr.w	r3, r0, r1
 8005bec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	431a      	orrs	r2, r3
 8005c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005c1c:	f021 010c 	bic.w	r1, r1, #12
 8005c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005c2a:	430b      	orrs	r3, r1
 8005c2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c3e:	6999      	ldr	r1, [r3, #24]
 8005c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	ea40 0301 	orr.w	r3, r0, r1
 8005c4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	4b8f      	ldr	r3, [pc, #572]	@ (8005e90 <UART_SetConfig+0x2cc>)
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d005      	beq.n	8005c64 <UART_SetConfig+0xa0>
 8005c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	4b8d      	ldr	r3, [pc, #564]	@ (8005e94 <UART_SetConfig+0x2d0>)
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d104      	bne.n	8005c6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c64:	f7fe fe60 	bl	8004928 <HAL_RCC_GetPCLK2Freq>
 8005c68:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005c6c:	e003      	b.n	8005c76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c6e:	f7fe fe47 	bl	8004900 <HAL_RCC_GetPCLK1Freq>
 8005c72:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c80:	f040 810c 	bne.w	8005e9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c8e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005c92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005c96:	4622      	mov	r2, r4
 8005c98:	462b      	mov	r3, r5
 8005c9a:	1891      	adds	r1, r2, r2
 8005c9c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005c9e:	415b      	adcs	r3, r3
 8005ca0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ca2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005ca6:	4621      	mov	r1, r4
 8005ca8:	eb12 0801 	adds.w	r8, r2, r1
 8005cac:	4629      	mov	r1, r5
 8005cae:	eb43 0901 	adc.w	r9, r3, r1
 8005cb2:	f04f 0200 	mov.w	r2, #0
 8005cb6:	f04f 0300 	mov.w	r3, #0
 8005cba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cc6:	4690      	mov	r8, r2
 8005cc8:	4699      	mov	r9, r3
 8005cca:	4623      	mov	r3, r4
 8005ccc:	eb18 0303 	adds.w	r3, r8, r3
 8005cd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005cd4:	462b      	mov	r3, r5
 8005cd6:	eb49 0303 	adc.w	r3, r9, r3
 8005cda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005cea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005cee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	18db      	adds	r3, r3, r3
 8005cf6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	eb42 0303 	adc.w	r3, r2, r3
 8005cfe:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005d04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005d08:	f7fa fd16 	bl	8000738 <__aeabi_uldivmod>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	460b      	mov	r3, r1
 8005d10:	4b61      	ldr	r3, [pc, #388]	@ (8005e98 <UART_SetConfig+0x2d4>)
 8005d12:	fba3 2302 	umull	r2, r3, r3, r2
 8005d16:	095b      	lsrs	r3, r3, #5
 8005d18:	011c      	lsls	r4, r3, #4
 8005d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d24:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005d28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005d2c:	4642      	mov	r2, r8
 8005d2e:	464b      	mov	r3, r9
 8005d30:	1891      	adds	r1, r2, r2
 8005d32:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005d34:	415b      	adcs	r3, r3
 8005d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005d3c:	4641      	mov	r1, r8
 8005d3e:	eb12 0a01 	adds.w	sl, r2, r1
 8005d42:	4649      	mov	r1, r9
 8005d44:	eb43 0b01 	adc.w	fp, r3, r1
 8005d48:	f04f 0200 	mov.w	r2, #0
 8005d4c:	f04f 0300 	mov.w	r3, #0
 8005d50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d5c:	4692      	mov	sl, r2
 8005d5e:	469b      	mov	fp, r3
 8005d60:	4643      	mov	r3, r8
 8005d62:	eb1a 0303 	adds.w	r3, sl, r3
 8005d66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d6a:	464b      	mov	r3, r9
 8005d6c:	eb4b 0303 	adc.w	r3, fp, r3
 8005d70:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d80:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005d84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	18db      	adds	r3, r3, r3
 8005d8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d8e:	4613      	mov	r3, r2
 8005d90:	eb42 0303 	adc.w	r3, r2, r3
 8005d94:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005d9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005d9e:	f7fa fccb 	bl	8000738 <__aeabi_uldivmod>
 8005da2:	4602      	mov	r2, r0
 8005da4:	460b      	mov	r3, r1
 8005da6:	4611      	mov	r1, r2
 8005da8:	4b3b      	ldr	r3, [pc, #236]	@ (8005e98 <UART_SetConfig+0x2d4>)
 8005daa:	fba3 2301 	umull	r2, r3, r3, r1
 8005dae:	095b      	lsrs	r3, r3, #5
 8005db0:	2264      	movs	r2, #100	@ 0x64
 8005db2:	fb02 f303 	mul.w	r3, r2, r3
 8005db6:	1acb      	subs	r3, r1, r3
 8005db8:	00db      	lsls	r3, r3, #3
 8005dba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005dbe:	4b36      	ldr	r3, [pc, #216]	@ (8005e98 <UART_SetConfig+0x2d4>)
 8005dc0:	fba3 2302 	umull	r2, r3, r3, r2
 8005dc4:	095b      	lsrs	r3, r3, #5
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005dcc:	441c      	add	r4, r3
 8005dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005dd8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005ddc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005de0:	4642      	mov	r2, r8
 8005de2:	464b      	mov	r3, r9
 8005de4:	1891      	adds	r1, r2, r2
 8005de6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005de8:	415b      	adcs	r3, r3
 8005dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005df0:	4641      	mov	r1, r8
 8005df2:	1851      	adds	r1, r2, r1
 8005df4:	6339      	str	r1, [r7, #48]	@ 0x30
 8005df6:	4649      	mov	r1, r9
 8005df8:	414b      	adcs	r3, r1
 8005dfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dfc:	f04f 0200 	mov.w	r2, #0
 8005e00:	f04f 0300 	mov.w	r3, #0
 8005e04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005e08:	4659      	mov	r1, fp
 8005e0a:	00cb      	lsls	r3, r1, #3
 8005e0c:	4651      	mov	r1, sl
 8005e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e12:	4651      	mov	r1, sl
 8005e14:	00ca      	lsls	r2, r1, #3
 8005e16:	4610      	mov	r0, r2
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	4642      	mov	r2, r8
 8005e1e:	189b      	adds	r3, r3, r2
 8005e20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e24:	464b      	mov	r3, r9
 8005e26:	460a      	mov	r2, r1
 8005e28:	eb42 0303 	adc.w	r3, r2, r3
 8005e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005e40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e44:	460b      	mov	r3, r1
 8005e46:	18db      	adds	r3, r3, r3
 8005e48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	eb42 0303 	adc.w	r3, r2, r3
 8005e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005e5a:	f7fa fc6d 	bl	8000738 <__aeabi_uldivmod>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	460b      	mov	r3, r1
 8005e62:	4b0d      	ldr	r3, [pc, #52]	@ (8005e98 <UART_SetConfig+0x2d4>)
 8005e64:	fba3 1302 	umull	r1, r3, r3, r2
 8005e68:	095b      	lsrs	r3, r3, #5
 8005e6a:	2164      	movs	r1, #100	@ 0x64
 8005e6c:	fb01 f303 	mul.w	r3, r1, r3
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	3332      	adds	r3, #50	@ 0x32
 8005e76:	4a08      	ldr	r2, [pc, #32]	@ (8005e98 <UART_SetConfig+0x2d4>)
 8005e78:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7c:	095b      	lsrs	r3, r3, #5
 8005e7e:	f003 0207 	and.w	r2, r3, #7
 8005e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4422      	add	r2, r4
 8005e8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e8c:	e106      	b.n	800609c <UART_SetConfig+0x4d8>
 8005e8e:	bf00      	nop
 8005e90:	40011000 	.word	0x40011000
 8005e94:	40011400 	.word	0x40011400
 8005e98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005ea6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005eaa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005eae:	4642      	mov	r2, r8
 8005eb0:	464b      	mov	r3, r9
 8005eb2:	1891      	adds	r1, r2, r2
 8005eb4:	6239      	str	r1, [r7, #32]
 8005eb6:	415b      	adcs	r3, r3
 8005eb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ebe:	4641      	mov	r1, r8
 8005ec0:	1854      	adds	r4, r2, r1
 8005ec2:	4649      	mov	r1, r9
 8005ec4:	eb43 0501 	adc.w	r5, r3, r1
 8005ec8:	f04f 0200 	mov.w	r2, #0
 8005ecc:	f04f 0300 	mov.w	r3, #0
 8005ed0:	00eb      	lsls	r3, r5, #3
 8005ed2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ed6:	00e2      	lsls	r2, r4, #3
 8005ed8:	4614      	mov	r4, r2
 8005eda:	461d      	mov	r5, r3
 8005edc:	4643      	mov	r3, r8
 8005ede:	18e3      	adds	r3, r4, r3
 8005ee0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ee4:	464b      	mov	r3, r9
 8005ee6:	eb45 0303 	adc.w	r3, r5, r3
 8005eea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005efa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005efe:	f04f 0200 	mov.w	r2, #0
 8005f02:	f04f 0300 	mov.w	r3, #0
 8005f06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005f0a:	4629      	mov	r1, r5
 8005f0c:	008b      	lsls	r3, r1, #2
 8005f0e:	4621      	mov	r1, r4
 8005f10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f14:	4621      	mov	r1, r4
 8005f16:	008a      	lsls	r2, r1, #2
 8005f18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005f1c:	f7fa fc0c 	bl	8000738 <__aeabi_uldivmod>
 8005f20:	4602      	mov	r2, r0
 8005f22:	460b      	mov	r3, r1
 8005f24:	4b60      	ldr	r3, [pc, #384]	@ (80060a8 <UART_SetConfig+0x4e4>)
 8005f26:	fba3 2302 	umull	r2, r3, r3, r2
 8005f2a:	095b      	lsrs	r3, r3, #5
 8005f2c:	011c      	lsls	r4, r3, #4
 8005f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f32:	2200      	movs	r2, #0
 8005f34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005f3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005f40:	4642      	mov	r2, r8
 8005f42:	464b      	mov	r3, r9
 8005f44:	1891      	adds	r1, r2, r2
 8005f46:	61b9      	str	r1, [r7, #24]
 8005f48:	415b      	adcs	r3, r3
 8005f4a:	61fb      	str	r3, [r7, #28]
 8005f4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f50:	4641      	mov	r1, r8
 8005f52:	1851      	adds	r1, r2, r1
 8005f54:	6139      	str	r1, [r7, #16]
 8005f56:	4649      	mov	r1, r9
 8005f58:	414b      	adcs	r3, r1
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	f04f 0200 	mov.w	r2, #0
 8005f60:	f04f 0300 	mov.w	r3, #0
 8005f64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f68:	4659      	mov	r1, fp
 8005f6a:	00cb      	lsls	r3, r1, #3
 8005f6c:	4651      	mov	r1, sl
 8005f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f72:	4651      	mov	r1, sl
 8005f74:	00ca      	lsls	r2, r1, #3
 8005f76:	4610      	mov	r0, r2
 8005f78:	4619      	mov	r1, r3
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	4642      	mov	r2, r8
 8005f7e:	189b      	adds	r3, r3, r2
 8005f80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f84:	464b      	mov	r3, r9
 8005f86:	460a      	mov	r2, r1
 8005f88:	eb42 0303 	adc.w	r3, r2, r3
 8005f8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005f9c:	f04f 0200 	mov.w	r2, #0
 8005fa0:	f04f 0300 	mov.w	r3, #0
 8005fa4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005fa8:	4649      	mov	r1, r9
 8005faa:	008b      	lsls	r3, r1, #2
 8005fac:	4641      	mov	r1, r8
 8005fae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fb2:	4641      	mov	r1, r8
 8005fb4:	008a      	lsls	r2, r1, #2
 8005fb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005fba:	f7fa fbbd 	bl	8000738 <__aeabi_uldivmod>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4611      	mov	r1, r2
 8005fc4:	4b38      	ldr	r3, [pc, #224]	@ (80060a8 <UART_SetConfig+0x4e4>)
 8005fc6:	fba3 2301 	umull	r2, r3, r3, r1
 8005fca:	095b      	lsrs	r3, r3, #5
 8005fcc:	2264      	movs	r2, #100	@ 0x64
 8005fce:	fb02 f303 	mul.w	r3, r2, r3
 8005fd2:	1acb      	subs	r3, r1, r3
 8005fd4:	011b      	lsls	r3, r3, #4
 8005fd6:	3332      	adds	r3, #50	@ 0x32
 8005fd8:	4a33      	ldr	r2, [pc, #204]	@ (80060a8 <UART_SetConfig+0x4e4>)
 8005fda:	fba2 2303 	umull	r2, r3, r2, r3
 8005fde:	095b      	lsrs	r3, r3, #5
 8005fe0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005fe4:	441c      	add	r4, r3
 8005fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fea:	2200      	movs	r2, #0
 8005fec:	673b      	str	r3, [r7, #112]	@ 0x70
 8005fee:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ff0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005ff4:	4642      	mov	r2, r8
 8005ff6:	464b      	mov	r3, r9
 8005ff8:	1891      	adds	r1, r2, r2
 8005ffa:	60b9      	str	r1, [r7, #8]
 8005ffc:	415b      	adcs	r3, r3
 8005ffe:	60fb      	str	r3, [r7, #12]
 8006000:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006004:	4641      	mov	r1, r8
 8006006:	1851      	adds	r1, r2, r1
 8006008:	6039      	str	r1, [r7, #0]
 800600a:	4649      	mov	r1, r9
 800600c:	414b      	adcs	r3, r1
 800600e:	607b      	str	r3, [r7, #4]
 8006010:	f04f 0200 	mov.w	r2, #0
 8006014:	f04f 0300 	mov.w	r3, #0
 8006018:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800601c:	4659      	mov	r1, fp
 800601e:	00cb      	lsls	r3, r1, #3
 8006020:	4651      	mov	r1, sl
 8006022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006026:	4651      	mov	r1, sl
 8006028:	00ca      	lsls	r2, r1, #3
 800602a:	4610      	mov	r0, r2
 800602c:	4619      	mov	r1, r3
 800602e:	4603      	mov	r3, r0
 8006030:	4642      	mov	r2, r8
 8006032:	189b      	adds	r3, r3, r2
 8006034:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006036:	464b      	mov	r3, r9
 8006038:	460a      	mov	r2, r1
 800603a:	eb42 0303 	adc.w	r3, r2, r3
 800603e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	663b      	str	r3, [r7, #96]	@ 0x60
 800604a:	667a      	str	r2, [r7, #100]	@ 0x64
 800604c:	f04f 0200 	mov.w	r2, #0
 8006050:	f04f 0300 	mov.w	r3, #0
 8006054:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006058:	4649      	mov	r1, r9
 800605a:	008b      	lsls	r3, r1, #2
 800605c:	4641      	mov	r1, r8
 800605e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006062:	4641      	mov	r1, r8
 8006064:	008a      	lsls	r2, r1, #2
 8006066:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800606a:	f7fa fb65 	bl	8000738 <__aeabi_uldivmod>
 800606e:	4602      	mov	r2, r0
 8006070:	460b      	mov	r3, r1
 8006072:	4b0d      	ldr	r3, [pc, #52]	@ (80060a8 <UART_SetConfig+0x4e4>)
 8006074:	fba3 1302 	umull	r1, r3, r3, r2
 8006078:	095b      	lsrs	r3, r3, #5
 800607a:	2164      	movs	r1, #100	@ 0x64
 800607c:	fb01 f303 	mul.w	r3, r1, r3
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	011b      	lsls	r3, r3, #4
 8006084:	3332      	adds	r3, #50	@ 0x32
 8006086:	4a08      	ldr	r2, [pc, #32]	@ (80060a8 <UART_SetConfig+0x4e4>)
 8006088:	fba2 2303 	umull	r2, r3, r2, r3
 800608c:	095b      	lsrs	r3, r3, #5
 800608e:	f003 020f 	and.w	r2, r3, #15
 8006092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4422      	add	r2, r4
 800609a:	609a      	str	r2, [r3, #8]
}
 800609c:	bf00      	nop
 800609e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80060a2:	46bd      	mov	sp, r7
 80060a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060a8:	51eb851f 	.word	0x51eb851f

080060ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	4603      	mov	r3, r0
 80060b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80060b6:	2300      	movs	r3, #0
 80060b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80060ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80060be:	2b84      	cmp	r3, #132	@ 0x84
 80060c0:	d005      	beq.n	80060ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80060c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	4413      	add	r3, r2
 80060ca:	3303      	adds	r3, #3
 80060cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80060ce:	68fb      	ldr	r3, [r7, #12]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80060e0:	f000 fb00 	bl	80066e4 <vTaskStartScheduler>
  
  return osOK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	bd80      	pop	{r7, pc}

080060ea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80060ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ec:	b089      	sub	sp, #36	@ 0x24
 80060ee:	af04      	add	r7, sp, #16
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d020      	beq.n	800613e <osThreadCreate+0x54>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d01c      	beq.n	800613e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685c      	ldr	r4, [r3, #4]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	691e      	ldr	r6, [r3, #16]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006116:	4618      	mov	r0, r3
 8006118:	f7ff ffc8 	bl	80060ac <makeFreeRtosPriority>
 800611c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006126:	9202      	str	r2, [sp, #8]
 8006128:	9301      	str	r3, [sp, #4]
 800612a:	9100      	str	r1, [sp, #0]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	4632      	mov	r2, r6
 8006130:	4629      	mov	r1, r5
 8006132:	4620      	mov	r0, r4
 8006134:	f000 f8ed 	bl	8006312 <xTaskCreateStatic>
 8006138:	4603      	mov	r3, r0
 800613a:	60fb      	str	r3, [r7, #12]
 800613c:	e01c      	b.n	8006178 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685c      	ldr	r4, [r3, #4]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800614a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006152:	4618      	mov	r0, r3
 8006154:	f7ff ffaa 	bl	80060ac <makeFreeRtosPriority>
 8006158:	4602      	mov	r2, r0
 800615a:	f107 030c 	add.w	r3, r7, #12
 800615e:	9301      	str	r3, [sp, #4]
 8006160:	9200      	str	r2, [sp, #0]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	4632      	mov	r2, r6
 8006166:	4629      	mov	r1, r5
 8006168:	4620      	mov	r0, r4
 800616a:	f000 f932 	bl	80063d2 <xTaskCreate>
 800616e:	4603      	mov	r3, r0
 8006170:	2b01      	cmp	r3, #1
 8006172:	d001      	beq.n	8006178 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006174:	2300      	movs	r3, #0
 8006176:	e000      	b.n	800617a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006178:	68fb      	ldr	r3, [r7, #12]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3714      	adds	r7, #20
 800617e:	46bd      	mov	sp, r7
 8006180:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006182 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b084      	sub	sp, #16
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d001      	beq.n	8006198 <osDelay+0x16>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	e000      	b.n	800619a <osDelay+0x18>
 8006198:	2301      	movs	r3, #1
 800619a:	4618      	mov	r0, r3
 800619c:	f000 fa6c 	bl	8006678 <vTaskDelay>
  
  return osOK;
 80061a0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80061aa:	b480      	push	{r7}
 80061ac:	b083      	sub	sp, #12
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f103 0208 	add.w	r2, r3, #8
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f04f 32ff 	mov.w	r2, #4294967295
 80061c2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f103 0208 	add.w	r2, r3, #8
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f103 0208 	add.w	r2, r3, #8
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80061de:	bf00      	nop
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80061ea:	b480      	push	{r7}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	689a      	ldr	r2, [r3, #8]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	601a      	str	r2, [r3, #0]
}
 8006240:	bf00      	nop
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006262:	d103      	bne.n	800626c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	60fb      	str	r3, [r7, #12]
 800626a:	e00c      	b.n	8006286 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	3308      	adds	r3, #8
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	e002      	b.n	800627a <vListInsert+0x2e>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	60fb      	str	r3, [r7, #12]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	429a      	cmp	r2, r3
 8006284:	d2f6      	bcs.n	8006274 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	683a      	ldr	r2, [r7, #0]
 8006294:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	601a      	str	r2, [r3, #0]
}
 80062b2:	bf00      	nop
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80062be:	b480      	push	{r7}
 80062c0:	b085      	sub	sp, #20
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	6892      	ldr	r2, [r2, #8]
 80062d4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6852      	ldr	r2, [r2, #4]
 80062de:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d103      	bne.n	80062f2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	689a      	ldr	r2, [r3, #8]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	1e5a      	subs	r2, r3, #1
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006312:	b580      	push	{r7, lr}
 8006314:	b08e      	sub	sp, #56	@ 0x38
 8006316:	af04      	add	r7, sp, #16
 8006318:	60f8      	str	r0, [r7, #12]
 800631a:	60b9      	str	r1, [r7, #8]
 800631c:	607a      	str	r2, [r7, #4]
 800631e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10b      	bne.n	800633e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800632a:	f383 8811 	msr	BASEPRI, r3
 800632e:	f3bf 8f6f 	isb	sy
 8006332:	f3bf 8f4f 	dsb	sy
 8006336:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006338:	bf00      	nop
 800633a:	bf00      	nop
 800633c:	e7fd      	b.n	800633a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800633e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10b      	bne.n	800635c <xTaskCreateStatic+0x4a>
	__asm volatile
 8006344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	61fb      	str	r3, [r7, #28]
}
 8006356:	bf00      	nop
 8006358:	bf00      	nop
 800635a:	e7fd      	b.n	8006358 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800635c:	23a0      	movs	r3, #160	@ 0xa0
 800635e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	2ba0      	cmp	r3, #160	@ 0xa0
 8006364:	d00b      	beq.n	800637e <xTaskCreateStatic+0x6c>
	__asm volatile
 8006366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636a:	f383 8811 	msr	BASEPRI, r3
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	61bb      	str	r3, [r7, #24]
}
 8006378:	bf00      	nop
 800637a:	bf00      	nop
 800637c:	e7fd      	b.n	800637a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800637e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006382:	2b00      	cmp	r3, #0
 8006384:	d01e      	beq.n	80063c4 <xTaskCreateStatic+0xb2>
 8006386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006388:	2b00      	cmp	r3, #0
 800638a:	d01b      	beq.n	80063c4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800638c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800638e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006392:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006394:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006398:	2202      	movs	r2, #2
 800639a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800639e:	2300      	movs	r3, #0
 80063a0:	9303      	str	r3, [sp, #12]
 80063a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a4:	9302      	str	r3, [sp, #8]
 80063a6:	f107 0314 	add.w	r3, r7, #20
 80063aa:	9301      	str	r3, [sp, #4]
 80063ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	68b9      	ldr	r1, [r7, #8]
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f000 f850 	bl	800645c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80063be:	f000 f8f1 	bl	80065a4 <prvAddNewTaskToReadyList>
 80063c2:	e001      	b.n	80063c8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80063c4:	2300      	movs	r3, #0
 80063c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80063c8:	697b      	ldr	r3, [r7, #20]
	}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3728      	adds	r7, #40	@ 0x28
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b08c      	sub	sp, #48	@ 0x30
 80063d6:	af04      	add	r7, sp, #16
 80063d8:	60f8      	str	r0, [r7, #12]
 80063da:	60b9      	str	r1, [r7, #8]
 80063dc:	603b      	str	r3, [r7, #0]
 80063de:	4613      	mov	r3, r2
 80063e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80063e2:	88fb      	ldrh	r3, [r7, #6]
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 ff06 	bl	80071f8 <pvPortMalloc>
 80063ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00e      	beq.n	8006412 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80063f4:	20a0      	movs	r0, #160	@ 0xa0
 80063f6:	f000 feff 	bl	80071f8 <pvPortMalloc>
 80063fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	631a      	str	r2, [r3, #48]	@ 0x30
 8006408:	e005      	b.n	8006416 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800640a:	6978      	ldr	r0, [r7, #20]
 800640c:	f000 ffc2 	bl	8007394 <vPortFree>
 8006410:	e001      	b.n	8006416 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006412:	2300      	movs	r3, #0
 8006414:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d017      	beq.n	800644c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006424:	88fa      	ldrh	r2, [r7, #6]
 8006426:	2300      	movs	r3, #0
 8006428:	9303      	str	r3, [sp, #12]
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	9302      	str	r3, [sp, #8]
 800642e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006430:	9301      	str	r3, [sp, #4]
 8006432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	68b9      	ldr	r1, [r7, #8]
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f000 f80e 	bl	800645c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006440:	69f8      	ldr	r0, [r7, #28]
 8006442:	f000 f8af 	bl	80065a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006446:	2301      	movs	r3, #1
 8006448:	61bb      	str	r3, [r7, #24]
 800644a:	e002      	b.n	8006452 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800644c:	f04f 33ff 	mov.w	r3, #4294967295
 8006450:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006452:	69bb      	ldr	r3, [r7, #24]
	}
 8006454:	4618      	mov	r0, r3
 8006456:	3720      	adds	r7, #32
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
 8006468:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800646a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006474:	3b01      	subs	r3, #1
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4413      	add	r3, r2
 800647a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	f023 0307 	bic.w	r3, r3, #7
 8006482:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	f003 0307 	and.w	r3, r3, #7
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00b      	beq.n	80064a6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	617b      	str	r3, [r7, #20]
}
 80064a0:	bf00      	nop
 80064a2:	bf00      	nop
 80064a4:	e7fd      	b.n	80064a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d01f      	beq.n	80064ec <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064ac:	2300      	movs	r3, #0
 80064ae:	61fb      	str	r3, [r7, #28]
 80064b0:	e012      	b.n	80064d8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	4413      	add	r3, r2
 80064b8:	7819      	ldrb	r1, [r3, #0]
 80064ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	4413      	add	r3, r2
 80064c0:	3334      	adds	r3, #52	@ 0x34
 80064c2:	460a      	mov	r2, r1
 80064c4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	4413      	add	r3, r2
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d006      	beq.n	80064e0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	3301      	adds	r3, #1
 80064d6:	61fb      	str	r3, [r7, #28]
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	2b0f      	cmp	r3, #15
 80064dc:	d9e9      	bls.n	80064b2 <prvInitialiseNewTask+0x56>
 80064de:	e000      	b.n	80064e2 <prvInitialiseNewTask+0x86>
			{
				break;
 80064e0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80064e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80064ea:	e003      	b.n	80064f4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80064ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80064f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f6:	2b06      	cmp	r3, #6
 80064f8:	d901      	bls.n	80064fe <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80064fa:	2306      	movs	r3, #6
 80064fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80064fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006500:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006502:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006506:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006508:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800650a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650c:	2200      	movs	r2, #0
 800650e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006512:	3304      	adds	r3, #4
 8006514:	4618      	mov	r0, r3
 8006516:	f7ff fe68 	bl	80061ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800651a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651c:	3318      	adds	r3, #24
 800651e:	4618      	mov	r0, r3
 8006520:	f7ff fe63 	bl	80061ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006526:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006528:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800652a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800652c:	f1c3 0207 	rsb	r2, r3, #7
 8006530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006532:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006536:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006538:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800653a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653c:	2200      	movs	r2, #0
 800653e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006544:	2200      	movs	r2, #0
 8006546:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800654a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654c:	334c      	adds	r3, #76	@ 0x4c
 800654e:	224c      	movs	r2, #76	@ 0x4c
 8006550:	2100      	movs	r1, #0
 8006552:	4618      	mov	r0, r3
 8006554:	f001 f85e 	bl	8007614 <memset>
 8006558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655a:	4a0f      	ldr	r2, [pc, #60]	@ (8006598 <prvInitialiseNewTask+0x13c>)
 800655c:	651a      	str	r2, [r3, #80]	@ 0x50
 800655e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006560:	4a0e      	ldr	r2, [pc, #56]	@ (800659c <prvInitialiseNewTask+0x140>)
 8006562:	655a      	str	r2, [r3, #84]	@ 0x54
 8006564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006566:	4a0e      	ldr	r2, [pc, #56]	@ (80065a0 <prvInitialiseNewTask+0x144>)
 8006568:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800656a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656c:	2200      	movs	r2, #0
 800656e:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	68f9      	ldr	r1, [r7, #12]
 8006576:	69b8      	ldr	r0, [r7, #24]
 8006578:	f000 fc2e 	bl	8006dd8 <pxPortInitialiseStack>
 800657c:	4602      	mov	r2, r0
 800657e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006580:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006584:	2b00      	cmp	r3, #0
 8006586:	d002      	beq.n	800658e <prvInitialiseNewTask+0x132>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800658a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800658c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800658e:	bf00      	nop
 8006590:	3720      	adds	r7, #32
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	2000428c 	.word	0x2000428c
 800659c:	200042f4 	.word	0x200042f4
 80065a0:	2000435c 	.word	0x2000435c

080065a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065ac:	f000 fd44 	bl	8007038 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065b0:	4b2a      	ldr	r3, [pc, #168]	@ (800665c <prvAddNewTaskToReadyList+0xb8>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3301      	adds	r3, #1
 80065b6:	4a29      	ldr	r2, [pc, #164]	@ (800665c <prvAddNewTaskToReadyList+0xb8>)
 80065b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80065ba:	4b29      	ldr	r3, [pc, #164]	@ (8006660 <prvAddNewTaskToReadyList+0xbc>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d109      	bne.n	80065d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80065c2:	4a27      	ldr	r2, [pc, #156]	@ (8006660 <prvAddNewTaskToReadyList+0xbc>)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80065c8:	4b24      	ldr	r3, [pc, #144]	@ (800665c <prvAddNewTaskToReadyList+0xb8>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d110      	bne.n	80065f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80065d0:	f000 fad4 	bl	8006b7c <prvInitialiseTaskLists>
 80065d4:	e00d      	b.n	80065f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80065d6:	4b23      	ldr	r3, [pc, #140]	@ (8006664 <prvAddNewTaskToReadyList+0xc0>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d109      	bne.n	80065f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80065de:	4b20      	ldr	r3, [pc, #128]	@ (8006660 <prvAddNewTaskToReadyList+0xbc>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d802      	bhi.n	80065f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80065ec:	4a1c      	ldr	r2, [pc, #112]	@ (8006660 <prvAddNewTaskToReadyList+0xbc>)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80065f2:	4b1d      	ldr	r3, [pc, #116]	@ (8006668 <prvAddNewTaskToReadyList+0xc4>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	3301      	adds	r3, #1
 80065f8:	4a1b      	ldr	r2, [pc, #108]	@ (8006668 <prvAddNewTaskToReadyList+0xc4>)
 80065fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006600:	2201      	movs	r2, #1
 8006602:	409a      	lsls	r2, r3
 8006604:	4b19      	ldr	r3, [pc, #100]	@ (800666c <prvAddNewTaskToReadyList+0xc8>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4313      	orrs	r3, r2
 800660a:	4a18      	ldr	r2, [pc, #96]	@ (800666c <prvAddNewTaskToReadyList+0xc8>)
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006612:	4613      	mov	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4a15      	ldr	r2, [pc, #84]	@ (8006670 <prvAddNewTaskToReadyList+0xcc>)
 800661c:	441a      	add	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	3304      	adds	r3, #4
 8006622:	4619      	mov	r1, r3
 8006624:	4610      	mov	r0, r2
 8006626:	f7ff fded 	bl	8006204 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800662a:	f000 fd37 	bl	800709c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800662e:	4b0d      	ldr	r3, [pc, #52]	@ (8006664 <prvAddNewTaskToReadyList+0xc0>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00e      	beq.n	8006654 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006636:	4b0a      	ldr	r3, [pc, #40]	@ (8006660 <prvAddNewTaskToReadyList+0xbc>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006640:	429a      	cmp	r2, r3
 8006642:	d207      	bcs.n	8006654 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006644:	4b0b      	ldr	r3, [pc, #44]	@ (8006674 <prvAddNewTaskToReadyList+0xd0>)
 8006646:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006654:	bf00      	nop
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	20000638 	.word	0x20000638
 8006660:	20000538 	.word	0x20000538
 8006664:	20000644 	.word	0x20000644
 8006668:	20000654 	.word	0x20000654
 800666c:	20000640 	.word	0x20000640
 8006670:	2000053c 	.word	0x2000053c
 8006674:	e000ed04 	.word	0xe000ed04

08006678 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006680:	2300      	movs	r3, #0
 8006682:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d018      	beq.n	80066bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800668a:	4b14      	ldr	r3, [pc, #80]	@ (80066dc <vTaskDelay+0x64>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00b      	beq.n	80066aa <vTaskDelay+0x32>
	__asm volatile
 8006692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006696:	f383 8811 	msr	BASEPRI, r3
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	60bb      	str	r3, [r7, #8]
}
 80066a4:	bf00      	nop
 80066a6:	bf00      	nop
 80066a8:	e7fd      	b.n	80066a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80066aa:	f000 f885 	bl	80067b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80066ae:	2100      	movs	r1, #0
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 fb27 	bl	8006d04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80066b6:	f000 f88d 	bl	80067d4 <xTaskResumeAll>
 80066ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d107      	bne.n	80066d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80066c2:	4b07      	ldr	r3, [pc, #28]	@ (80066e0 <vTaskDelay+0x68>)
 80066c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80066d2:	bf00      	nop
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	20000660 	.word	0x20000660
 80066e0:	e000ed04 	.word	0xe000ed04

080066e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b08a      	sub	sp, #40	@ 0x28
 80066e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80066ea:	2300      	movs	r3, #0
 80066ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80066ee:	2300      	movs	r3, #0
 80066f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80066f2:	463a      	mov	r2, r7
 80066f4:	1d39      	adds	r1, r7, #4
 80066f6:	f107 0308 	add.w	r3, r7, #8
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7fb fddc 	bl	80022b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006700:	6839      	ldr	r1, [r7, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	9202      	str	r2, [sp, #8]
 8006708:	9301      	str	r3, [sp, #4]
 800670a:	2300      	movs	r3, #0
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	2300      	movs	r3, #0
 8006710:	460a      	mov	r2, r1
 8006712:	4921      	ldr	r1, [pc, #132]	@ (8006798 <vTaskStartScheduler+0xb4>)
 8006714:	4821      	ldr	r0, [pc, #132]	@ (800679c <vTaskStartScheduler+0xb8>)
 8006716:	f7ff fdfc 	bl	8006312 <xTaskCreateStatic>
 800671a:	4603      	mov	r3, r0
 800671c:	4a20      	ldr	r2, [pc, #128]	@ (80067a0 <vTaskStartScheduler+0xbc>)
 800671e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006720:	4b1f      	ldr	r3, [pc, #124]	@ (80067a0 <vTaskStartScheduler+0xbc>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006728:	2301      	movs	r3, #1
 800672a:	617b      	str	r3, [r7, #20]
 800672c:	e001      	b.n	8006732 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800672e:	2300      	movs	r3, #0
 8006730:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d11b      	bne.n	8006770 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800673c:	f383 8811 	msr	BASEPRI, r3
 8006740:	f3bf 8f6f 	isb	sy
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	613b      	str	r3, [r7, #16]
}
 800674a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800674c:	4b15      	ldr	r3, [pc, #84]	@ (80067a4 <vTaskStartScheduler+0xc0>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	334c      	adds	r3, #76	@ 0x4c
 8006752:	4a15      	ldr	r2, [pc, #84]	@ (80067a8 <vTaskStartScheduler+0xc4>)
 8006754:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006756:	4b15      	ldr	r3, [pc, #84]	@ (80067ac <vTaskStartScheduler+0xc8>)
 8006758:	f04f 32ff 	mov.w	r2, #4294967295
 800675c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800675e:	4b14      	ldr	r3, [pc, #80]	@ (80067b0 <vTaskStartScheduler+0xcc>)
 8006760:	2201      	movs	r2, #1
 8006762:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006764:	4b13      	ldr	r3, [pc, #76]	@ (80067b4 <vTaskStartScheduler+0xd0>)
 8006766:	2200      	movs	r2, #0
 8006768:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800676a:	f000 fbc1 	bl	8006ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800676e:	e00f      	b.n	8006790 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006776:	d10b      	bne.n	8006790 <vTaskStartScheduler+0xac>
	__asm volatile
 8006778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800677c:	f383 8811 	msr	BASEPRI, r3
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	60fb      	str	r3, [r7, #12]
}
 800678a:	bf00      	nop
 800678c:	bf00      	nop
 800678e:	e7fd      	b.n	800678c <vTaskStartScheduler+0xa8>
}
 8006790:	bf00      	nop
 8006792:	3718      	adds	r7, #24
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	08008138 	.word	0x08008138
 800679c:	08006b4d 	.word	0x08006b4d
 80067a0:	2000065c 	.word	0x2000065c
 80067a4:	20000538 	.word	0x20000538
 80067a8:	20000014 	.word	0x20000014
 80067ac:	20000658 	.word	0x20000658
 80067b0:	20000644 	.word	0x20000644
 80067b4:	2000063c 	.word	0x2000063c

080067b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80067b8:	b480      	push	{r7}
 80067ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80067bc:	4b04      	ldr	r3, [pc, #16]	@ (80067d0 <vTaskSuspendAll+0x18>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	3301      	adds	r3, #1
 80067c2:	4a03      	ldr	r2, [pc, #12]	@ (80067d0 <vTaskSuspendAll+0x18>)
 80067c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80067c6:	bf00      	nop
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr
 80067d0:	20000660 	.word	0x20000660

080067d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80067da:	2300      	movs	r3, #0
 80067dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80067de:	2300      	movs	r3, #0
 80067e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80067e2:	4b42      	ldr	r3, [pc, #264]	@ (80068ec <xTaskResumeAll+0x118>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10b      	bne.n	8006802 <xTaskResumeAll+0x2e>
	__asm volatile
 80067ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ee:	f383 8811 	msr	BASEPRI, r3
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	603b      	str	r3, [r7, #0]
}
 80067fc:	bf00      	nop
 80067fe:	bf00      	nop
 8006800:	e7fd      	b.n	80067fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006802:	f000 fc19 	bl	8007038 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006806:	4b39      	ldr	r3, [pc, #228]	@ (80068ec <xTaskResumeAll+0x118>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	3b01      	subs	r3, #1
 800680c:	4a37      	ldr	r2, [pc, #220]	@ (80068ec <xTaskResumeAll+0x118>)
 800680e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006810:	4b36      	ldr	r3, [pc, #216]	@ (80068ec <xTaskResumeAll+0x118>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d161      	bne.n	80068dc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006818:	4b35      	ldr	r3, [pc, #212]	@ (80068f0 <xTaskResumeAll+0x11c>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d05d      	beq.n	80068dc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006820:	e02e      	b.n	8006880 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006822:	4b34      	ldr	r3, [pc, #208]	@ (80068f4 <xTaskResumeAll+0x120>)
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	3318      	adds	r3, #24
 800682e:	4618      	mov	r0, r3
 8006830:	f7ff fd45 	bl	80062be <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3304      	adds	r3, #4
 8006838:	4618      	mov	r0, r3
 800683a:	f7ff fd40 	bl	80062be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006842:	2201      	movs	r2, #1
 8006844:	409a      	lsls	r2, r3
 8006846:	4b2c      	ldr	r3, [pc, #176]	@ (80068f8 <xTaskResumeAll+0x124>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4313      	orrs	r3, r2
 800684c:	4a2a      	ldr	r2, [pc, #168]	@ (80068f8 <xTaskResumeAll+0x124>)
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006854:	4613      	mov	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4a27      	ldr	r2, [pc, #156]	@ (80068fc <xTaskResumeAll+0x128>)
 800685e:	441a      	add	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	3304      	adds	r3, #4
 8006864:	4619      	mov	r1, r3
 8006866:	4610      	mov	r0, r2
 8006868:	f7ff fccc 	bl	8006204 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006870:	4b23      	ldr	r3, [pc, #140]	@ (8006900 <xTaskResumeAll+0x12c>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006876:	429a      	cmp	r2, r3
 8006878:	d302      	bcc.n	8006880 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800687a:	4b22      	ldr	r3, [pc, #136]	@ (8006904 <xTaskResumeAll+0x130>)
 800687c:	2201      	movs	r2, #1
 800687e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006880:	4b1c      	ldr	r3, [pc, #112]	@ (80068f4 <xTaskResumeAll+0x120>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1cc      	bne.n	8006822 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d001      	beq.n	8006892 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800688e:	f000 fa19 	bl	8006cc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006892:	4b1d      	ldr	r3, [pc, #116]	@ (8006908 <xTaskResumeAll+0x134>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d010      	beq.n	80068c0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800689e:	f000 f837 	bl	8006910 <xTaskIncrementTick>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d002      	beq.n	80068ae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80068a8:	4b16      	ldr	r3, [pc, #88]	@ (8006904 <xTaskResumeAll+0x130>)
 80068aa:	2201      	movs	r2, #1
 80068ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	3b01      	subs	r3, #1
 80068b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1f1      	bne.n	800689e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80068ba:	4b13      	ldr	r3, [pc, #76]	@ (8006908 <xTaskResumeAll+0x134>)
 80068bc:	2200      	movs	r2, #0
 80068be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80068c0:	4b10      	ldr	r3, [pc, #64]	@ (8006904 <xTaskResumeAll+0x130>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d009      	beq.n	80068dc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80068c8:	2301      	movs	r3, #1
 80068ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80068cc:	4b0f      	ldr	r3, [pc, #60]	@ (800690c <xTaskResumeAll+0x138>)
 80068ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068dc:	f000 fbde 	bl	800709c <vPortExitCritical>

	return xAlreadyYielded;
 80068e0:	68bb      	ldr	r3, [r7, #8]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	20000660 	.word	0x20000660
 80068f0:	20000638 	.word	0x20000638
 80068f4:	200005f8 	.word	0x200005f8
 80068f8:	20000640 	.word	0x20000640
 80068fc:	2000053c 	.word	0x2000053c
 8006900:	20000538 	.word	0x20000538
 8006904:	2000064c 	.word	0x2000064c
 8006908:	20000648 	.word	0x20000648
 800690c:	e000ed04 	.word	0xe000ed04

08006910 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006916:	2300      	movs	r3, #0
 8006918:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800691a:	4b4f      	ldr	r3, [pc, #316]	@ (8006a58 <xTaskIncrementTick+0x148>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	f040 808f 	bne.w	8006a42 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006924:	4b4d      	ldr	r3, [pc, #308]	@ (8006a5c <xTaskIncrementTick+0x14c>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	3301      	adds	r3, #1
 800692a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800692c:	4a4b      	ldr	r2, [pc, #300]	@ (8006a5c <xTaskIncrementTick+0x14c>)
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d121      	bne.n	800697c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006938:	4b49      	ldr	r3, [pc, #292]	@ (8006a60 <xTaskIncrementTick+0x150>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00b      	beq.n	800695a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	603b      	str	r3, [r7, #0]
}
 8006954:	bf00      	nop
 8006956:	bf00      	nop
 8006958:	e7fd      	b.n	8006956 <xTaskIncrementTick+0x46>
 800695a:	4b41      	ldr	r3, [pc, #260]	@ (8006a60 <xTaskIncrementTick+0x150>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	60fb      	str	r3, [r7, #12]
 8006960:	4b40      	ldr	r3, [pc, #256]	@ (8006a64 <xTaskIncrementTick+0x154>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a3e      	ldr	r2, [pc, #248]	@ (8006a60 <xTaskIncrementTick+0x150>)
 8006966:	6013      	str	r3, [r2, #0]
 8006968:	4a3e      	ldr	r2, [pc, #248]	@ (8006a64 <xTaskIncrementTick+0x154>)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6013      	str	r3, [r2, #0]
 800696e:	4b3e      	ldr	r3, [pc, #248]	@ (8006a68 <xTaskIncrementTick+0x158>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3301      	adds	r3, #1
 8006974:	4a3c      	ldr	r2, [pc, #240]	@ (8006a68 <xTaskIncrementTick+0x158>)
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	f000 f9a4 	bl	8006cc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800697c:	4b3b      	ldr	r3, [pc, #236]	@ (8006a6c <xTaskIncrementTick+0x15c>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	429a      	cmp	r2, r3
 8006984:	d348      	bcc.n	8006a18 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006986:	4b36      	ldr	r3, [pc, #216]	@ (8006a60 <xTaskIncrementTick+0x150>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d104      	bne.n	800699a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006990:	4b36      	ldr	r3, [pc, #216]	@ (8006a6c <xTaskIncrementTick+0x15c>)
 8006992:	f04f 32ff 	mov.w	r2, #4294967295
 8006996:	601a      	str	r2, [r3, #0]
					break;
 8006998:	e03e      	b.n	8006a18 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800699a:	4b31      	ldr	r3, [pc, #196]	@ (8006a60 <xTaskIncrementTick+0x150>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d203      	bcs.n	80069ba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80069b2:	4a2e      	ldr	r2, [pc, #184]	@ (8006a6c <xTaskIncrementTick+0x15c>)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80069b8:	e02e      	b.n	8006a18 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	3304      	adds	r3, #4
 80069be:	4618      	mov	r0, r3
 80069c0:	f7ff fc7d 	bl	80062be <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d004      	beq.n	80069d6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	3318      	adds	r3, #24
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7ff fc74 	bl	80062be <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069da:	2201      	movs	r2, #1
 80069dc:	409a      	lsls	r2, r3
 80069de:	4b24      	ldr	r3, [pc, #144]	@ (8006a70 <xTaskIncrementTick+0x160>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	4a22      	ldr	r2, [pc, #136]	@ (8006a70 <xTaskIncrementTick+0x160>)
 80069e6:	6013      	str	r3, [r2, #0]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069ec:	4613      	mov	r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4413      	add	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4a1f      	ldr	r2, [pc, #124]	@ (8006a74 <xTaskIncrementTick+0x164>)
 80069f6:	441a      	add	r2, r3
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	3304      	adds	r3, #4
 80069fc:	4619      	mov	r1, r3
 80069fe:	4610      	mov	r0, r2
 8006a00:	f7ff fc00 	bl	8006204 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a08:	4b1b      	ldr	r3, [pc, #108]	@ (8006a78 <xTaskIncrementTick+0x168>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d3b9      	bcc.n	8006986 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006a12:	2301      	movs	r3, #1
 8006a14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a16:	e7b6      	b.n	8006986 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a18:	4b17      	ldr	r3, [pc, #92]	@ (8006a78 <xTaskIncrementTick+0x168>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a1e:	4915      	ldr	r1, [pc, #84]	@ (8006a74 <xTaskIncrementTick+0x164>)
 8006a20:	4613      	mov	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4413      	add	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	440b      	add	r3, r1
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d901      	bls.n	8006a34 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006a30:	2301      	movs	r3, #1
 8006a32:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006a34:	4b11      	ldr	r3, [pc, #68]	@ (8006a7c <xTaskIncrementTick+0x16c>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d007      	beq.n	8006a4c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	617b      	str	r3, [r7, #20]
 8006a40:	e004      	b.n	8006a4c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006a42:	4b0f      	ldr	r3, [pc, #60]	@ (8006a80 <xTaskIncrementTick+0x170>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3301      	adds	r3, #1
 8006a48:	4a0d      	ldr	r2, [pc, #52]	@ (8006a80 <xTaskIncrementTick+0x170>)
 8006a4a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006a4c:	697b      	ldr	r3, [r7, #20]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3718      	adds	r7, #24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20000660 	.word	0x20000660
 8006a5c:	2000063c 	.word	0x2000063c
 8006a60:	200005f0 	.word	0x200005f0
 8006a64:	200005f4 	.word	0x200005f4
 8006a68:	20000650 	.word	0x20000650
 8006a6c:	20000658 	.word	0x20000658
 8006a70:	20000640 	.word	0x20000640
 8006a74:	2000053c 	.word	0x2000053c
 8006a78:	20000538 	.word	0x20000538
 8006a7c:	2000064c 	.word	0x2000064c
 8006a80:	20000648 	.word	0x20000648

08006a84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006a84:	b480      	push	{r7}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006a8a:	4b2a      	ldr	r3, [pc, #168]	@ (8006b34 <vTaskSwitchContext+0xb0>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d003      	beq.n	8006a9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006a92:	4b29      	ldr	r3, [pc, #164]	@ (8006b38 <vTaskSwitchContext+0xb4>)
 8006a94:	2201      	movs	r2, #1
 8006a96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006a98:	e045      	b.n	8006b26 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8006a9a:	4b27      	ldr	r3, [pc, #156]	@ (8006b38 <vTaskSwitchContext+0xb4>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aa0:	4b26      	ldr	r3, [pc, #152]	@ (8006b3c <vTaskSwitchContext+0xb8>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	fab3 f383 	clz	r3, r3
 8006aac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006aae:	7afb      	ldrb	r3, [r7, #11]
 8006ab0:	f1c3 031f 	rsb	r3, r3, #31
 8006ab4:	617b      	str	r3, [r7, #20]
 8006ab6:	4922      	ldr	r1, [pc, #136]	@ (8006b40 <vTaskSwitchContext+0xbc>)
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	4613      	mov	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4413      	add	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	440b      	add	r3, r1
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10b      	bne.n	8006ae2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8006aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ace:	f383 8811 	msr	BASEPRI, r3
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	f3bf 8f4f 	dsb	sy
 8006ada:	607b      	str	r3, [r7, #4]
}
 8006adc:	bf00      	nop
 8006ade:	bf00      	nop
 8006ae0:	e7fd      	b.n	8006ade <vTaskSwitchContext+0x5a>
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4a14      	ldr	r2, [pc, #80]	@ (8006b40 <vTaskSwitchContext+0xbc>)
 8006aee:	4413      	add	r3, r2
 8006af0:	613b      	str	r3, [r7, #16]
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	605a      	str	r2, [r3, #4]
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	3308      	adds	r3, #8
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d104      	bne.n	8006b12 <vTaskSwitchContext+0x8e>
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	685a      	ldr	r2, [r3, #4]
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	605a      	str	r2, [r3, #4]
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	4a0a      	ldr	r2, [pc, #40]	@ (8006b44 <vTaskSwitchContext+0xc0>)
 8006b1a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b1c:	4b09      	ldr	r3, [pc, #36]	@ (8006b44 <vTaskSwitchContext+0xc0>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	334c      	adds	r3, #76	@ 0x4c
 8006b22:	4a09      	ldr	r2, [pc, #36]	@ (8006b48 <vTaskSwitchContext+0xc4>)
 8006b24:	6013      	str	r3, [r2, #0]
}
 8006b26:	bf00      	nop
 8006b28:	371c      	adds	r7, #28
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	20000660 	.word	0x20000660
 8006b38:	2000064c 	.word	0x2000064c
 8006b3c:	20000640 	.word	0x20000640
 8006b40:	2000053c 	.word	0x2000053c
 8006b44:	20000538 	.word	0x20000538
 8006b48:	20000014 	.word	0x20000014

08006b4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b54:	f000 f852 	bl	8006bfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b58:	4b06      	ldr	r3, [pc, #24]	@ (8006b74 <prvIdleTask+0x28>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d9f9      	bls.n	8006b54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006b60:	4b05      	ldr	r3, [pc, #20]	@ (8006b78 <prvIdleTask+0x2c>)
 8006b62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b66:	601a      	str	r2, [r3, #0]
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006b70:	e7f0      	b.n	8006b54 <prvIdleTask+0x8>
 8006b72:	bf00      	nop
 8006b74:	2000053c 	.word	0x2000053c
 8006b78:	e000ed04 	.word	0xe000ed04

08006b7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b82:	2300      	movs	r3, #0
 8006b84:	607b      	str	r3, [r7, #4]
 8006b86:	e00c      	b.n	8006ba2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	4413      	add	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4a12      	ldr	r2, [pc, #72]	@ (8006bdc <prvInitialiseTaskLists+0x60>)
 8006b94:	4413      	add	r3, r2
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7ff fb07 	bl	80061aa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	607b      	str	r3, [r7, #4]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b06      	cmp	r3, #6
 8006ba6:	d9ef      	bls.n	8006b88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ba8:	480d      	ldr	r0, [pc, #52]	@ (8006be0 <prvInitialiseTaskLists+0x64>)
 8006baa:	f7ff fafe 	bl	80061aa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006bae:	480d      	ldr	r0, [pc, #52]	@ (8006be4 <prvInitialiseTaskLists+0x68>)
 8006bb0:	f7ff fafb 	bl	80061aa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006bb4:	480c      	ldr	r0, [pc, #48]	@ (8006be8 <prvInitialiseTaskLists+0x6c>)
 8006bb6:	f7ff faf8 	bl	80061aa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006bba:	480c      	ldr	r0, [pc, #48]	@ (8006bec <prvInitialiseTaskLists+0x70>)
 8006bbc:	f7ff faf5 	bl	80061aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006bc0:	480b      	ldr	r0, [pc, #44]	@ (8006bf0 <prvInitialiseTaskLists+0x74>)
 8006bc2:	f7ff faf2 	bl	80061aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8006bf4 <prvInitialiseTaskLists+0x78>)
 8006bc8:	4a05      	ldr	r2, [pc, #20]	@ (8006be0 <prvInitialiseTaskLists+0x64>)
 8006bca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8006bf8 <prvInitialiseTaskLists+0x7c>)
 8006bce:	4a05      	ldr	r2, [pc, #20]	@ (8006be4 <prvInitialiseTaskLists+0x68>)
 8006bd0:	601a      	str	r2, [r3, #0]
}
 8006bd2:	bf00      	nop
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	2000053c 	.word	0x2000053c
 8006be0:	200005c8 	.word	0x200005c8
 8006be4:	200005dc 	.word	0x200005dc
 8006be8:	200005f8 	.word	0x200005f8
 8006bec:	2000060c 	.word	0x2000060c
 8006bf0:	20000624 	.word	0x20000624
 8006bf4:	200005f0 	.word	0x200005f0
 8006bf8:	200005f4 	.word	0x200005f4

08006bfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c02:	e019      	b.n	8006c38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c04:	f000 fa18 	bl	8007038 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c08:	4b10      	ldr	r3, [pc, #64]	@ (8006c4c <prvCheckTasksWaitingTermination+0x50>)
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	3304      	adds	r3, #4
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7ff fb52 	bl	80062be <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006c50 <prvCheckTasksWaitingTermination+0x54>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	4a0b      	ldr	r2, [pc, #44]	@ (8006c50 <prvCheckTasksWaitingTermination+0x54>)
 8006c22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c24:	4b0b      	ldr	r3, [pc, #44]	@ (8006c54 <prvCheckTasksWaitingTermination+0x58>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8006c54 <prvCheckTasksWaitingTermination+0x58>)
 8006c2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c2e:	f000 fa35 	bl	800709c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f810 	bl	8006c58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c38:	4b06      	ldr	r3, [pc, #24]	@ (8006c54 <prvCheckTasksWaitingTermination+0x58>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1e1      	bne.n	8006c04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c40:	bf00      	nop
 8006c42:	bf00      	nop
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	2000060c 	.word	0x2000060c
 8006c50:	20000638 	.word	0x20000638
 8006c54:	20000620 	.word	0x20000620

08006c58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	334c      	adds	r3, #76	@ 0x4c
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 fcdd 	bl	8007624 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d108      	bne.n	8006c86 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 fb8b 	bl	8007394 <vPortFree>
				vPortFree( pxTCB );
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fb88 	bl	8007394 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c84:	e019      	b.n	8006cba <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d103      	bne.n	8006c98 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fb7f 	bl	8007394 <vPortFree>
	}
 8006c96:	e010      	b.n	8006cba <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d00b      	beq.n	8006cba <prvDeleteTCB+0x62>
	__asm volatile
 8006ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca6:	f383 8811 	msr	BASEPRI, r3
 8006caa:	f3bf 8f6f 	isb	sy
 8006cae:	f3bf 8f4f 	dsb	sy
 8006cb2:	60fb      	str	r3, [r7, #12]
}
 8006cb4:	bf00      	nop
 8006cb6:	bf00      	nop
 8006cb8:	e7fd      	b.n	8006cb6 <prvDeleteTCB+0x5e>
	}
 8006cba:	bf00      	nop
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
	...

08006cc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cca:	4b0c      	ldr	r3, [pc, #48]	@ (8006cfc <prvResetNextTaskUnblockTime+0x38>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d104      	bne.n	8006cde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8006d00 <prvResetNextTaskUnblockTime+0x3c>)
 8006cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006cdc:	e008      	b.n	8006cf0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cde:	4b07      	ldr	r3, [pc, #28]	@ (8006cfc <prvResetNextTaskUnblockTime+0x38>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	4a04      	ldr	r2, [pc, #16]	@ (8006d00 <prvResetNextTaskUnblockTime+0x3c>)
 8006cee:	6013      	str	r3, [r2, #0]
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	200005f0 	.word	0x200005f0
 8006d00:	20000658 	.word	0x20000658

08006d04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d0e:	4b2b      	ldr	r3, [pc, #172]	@ (8006dbc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8006d14:	4b2a      	ldr	r3, [pc, #168]	@ (8006dc0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d1e:	4b28      	ldr	r3, [pc, #160]	@ (8006dc0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3304      	adds	r3, #4
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7ff faca 	bl	80062be <uxListRemove>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10b      	bne.n	8006d48 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006d30:	4b23      	ldr	r3, [pc, #140]	@ (8006dc0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d36:	2201      	movs	r2, #1
 8006d38:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3c:	43da      	mvns	r2, r3
 8006d3e:	4b21      	ldr	r3, [pc, #132]	@ (8006dc4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4013      	ands	r3, r2
 8006d44:	4a1f      	ldr	r2, [pc, #124]	@ (8006dc4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006d46:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4e:	d10a      	bne.n	8006d66 <prvAddCurrentTaskToDelayedList+0x62>
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d007      	beq.n	8006d66 <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d56:	4b1a      	ldr	r3, [pc, #104]	@ (8006dc0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	481a      	ldr	r0, [pc, #104]	@ (8006dc8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006d60:	f7ff fa50 	bl	8006204 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d64:	e026      	b.n	8006db4 <prvAddCurrentTaskToDelayedList+0xb0>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d6e:	4b14      	ldr	r3, [pc, #80]	@ (8006dc0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d209      	bcs.n	8006d92 <prvAddCurrentTaskToDelayedList+0x8e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d7e:	4b13      	ldr	r3, [pc, #76]	@ (8006dcc <prvAddCurrentTaskToDelayedList+0xc8>)
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	4b0f      	ldr	r3, [pc, #60]	@ (8006dc0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	3304      	adds	r3, #4
 8006d88:	4619      	mov	r1, r3
 8006d8a:	4610      	mov	r0, r2
 8006d8c:	f7ff fa5e 	bl	800624c <vListInsert>
}
 8006d90:	e010      	b.n	8006db4 <prvAddCurrentTaskToDelayedList+0xb0>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d92:	4b0f      	ldr	r3, [pc, #60]	@ (8006dd0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	4b0a      	ldr	r3, [pc, #40]	@ (8006dc0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3304      	adds	r3, #4
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	4610      	mov	r0, r2
 8006da0:	f7ff fa54 	bl	800624c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006da4:	4b0b      	ldr	r3, [pc, #44]	@ (8006dd4 <prvAddCurrentTaskToDelayedList+0xd0>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d202      	bcs.n	8006db4 <prvAddCurrentTaskToDelayedList+0xb0>
					xNextTaskUnblockTime = xTimeToWake;
 8006dae:	4a09      	ldr	r2, [pc, #36]	@ (8006dd4 <prvAddCurrentTaskToDelayedList+0xd0>)
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	6013      	str	r3, [r2, #0]
}
 8006db4:	bf00      	nop
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	2000063c 	.word	0x2000063c
 8006dc0:	20000538 	.word	0x20000538
 8006dc4:	20000640 	.word	0x20000640
 8006dc8:	20000624 	.word	0x20000624
 8006dcc:	200005f4 	.word	0x200005f4
 8006dd0:	200005f0 	.word	0x200005f0
 8006dd4:	20000658 	.word	0x20000658

08006dd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	3b04      	subs	r3, #4
 8006de8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006df0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	3b04      	subs	r3, #4
 8006df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	f023 0201 	bic.w	r2, r3, #1
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	3b04      	subs	r3, #4
 8006e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006e08:	4a0c      	ldr	r2, [pc, #48]	@ (8006e3c <pxPortInitialiseStack+0x64>)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	3b14      	subs	r3, #20
 8006e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	3b04      	subs	r3, #4
 8006e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f06f 0202 	mvn.w	r2, #2
 8006e26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	3b20      	subs	r3, #32
 8006e2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr
 8006e3c:	08006e41 	.word	0x08006e41

08006e40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006e46:	2300      	movs	r3, #0
 8006e48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006e4a:	4b13      	ldr	r3, [pc, #76]	@ (8006e98 <prvTaskExitError+0x58>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e52:	d00b      	beq.n	8006e6c <prvTaskExitError+0x2c>
	__asm volatile
 8006e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e58:	f383 8811 	msr	BASEPRI, r3
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	f3bf 8f4f 	dsb	sy
 8006e64:	60fb      	str	r3, [r7, #12]
}
 8006e66:	bf00      	nop
 8006e68:	bf00      	nop
 8006e6a:	e7fd      	b.n	8006e68 <prvTaskExitError+0x28>
	__asm volatile
 8006e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e70:	f383 8811 	msr	BASEPRI, r3
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	60bb      	str	r3, [r7, #8]
}
 8006e7e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e80:	bf00      	nop
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d0fc      	beq.n	8006e82 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006e88:	bf00      	nop
 8006e8a:	bf00      	nop
 8006e8c:	3714      	adds	r7, #20
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	20000010 	.word	0x20000010
 8006e9c:	00000000 	.word	0x00000000

08006ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ea0:	4b07      	ldr	r3, [pc, #28]	@ (8006ec0 <pxCurrentTCBConst2>)
 8006ea2:	6819      	ldr	r1, [r3, #0]
 8006ea4:	6808      	ldr	r0, [r1, #0]
 8006ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eaa:	f380 8809 	msr	PSP, r0
 8006eae:	f3bf 8f6f 	isb	sy
 8006eb2:	f04f 0000 	mov.w	r0, #0
 8006eb6:	f380 8811 	msr	BASEPRI, r0
 8006eba:	4770      	bx	lr
 8006ebc:	f3af 8000 	nop.w

08006ec0 <pxCurrentTCBConst2>:
 8006ec0:	20000538 	.word	0x20000538
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ec4:	bf00      	nop
 8006ec6:	bf00      	nop

08006ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006ec8:	4808      	ldr	r0, [pc, #32]	@ (8006eec <prvPortStartFirstTask+0x24>)
 8006eca:	6800      	ldr	r0, [r0, #0]
 8006ecc:	6800      	ldr	r0, [r0, #0]
 8006ece:	f380 8808 	msr	MSP, r0
 8006ed2:	f04f 0000 	mov.w	r0, #0
 8006ed6:	f380 8814 	msr	CONTROL, r0
 8006eda:	b662      	cpsie	i
 8006edc:	b661      	cpsie	f
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	df00      	svc	0
 8006ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006eea:	bf00      	nop
 8006eec:	e000ed08 	.word	0xe000ed08

08006ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ef6:	4b47      	ldr	r3, [pc, #284]	@ (8007014 <xPortStartScheduler+0x124>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a47      	ldr	r2, [pc, #284]	@ (8007018 <xPortStartScheduler+0x128>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d10b      	bne.n	8006f18 <xPortStartScheduler+0x28>
	__asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	613b      	str	r3, [r7, #16]
}
 8006f12:	bf00      	nop
 8006f14:	bf00      	nop
 8006f16:	e7fd      	b.n	8006f14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006f18:	4b3e      	ldr	r3, [pc, #248]	@ (8007014 <xPortStartScheduler+0x124>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a3f      	ldr	r2, [pc, #252]	@ (800701c <xPortStartScheduler+0x12c>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d10b      	bne.n	8006f3a <xPortStartScheduler+0x4a>
	__asm volatile
 8006f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	60fb      	str	r3, [r7, #12]
}
 8006f34:	bf00      	nop
 8006f36:	bf00      	nop
 8006f38:	e7fd      	b.n	8006f36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f3a:	4b39      	ldr	r3, [pc, #228]	@ (8007020 <xPortStartScheduler+0x130>)
 8006f3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	22ff      	movs	r2, #255	@ 0xff
 8006f4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f54:	78fb      	ldrb	r3, [r7, #3]
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006f5c:	b2da      	uxtb	r2, r3
 8006f5e:	4b31      	ldr	r3, [pc, #196]	@ (8007024 <xPortStartScheduler+0x134>)
 8006f60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f62:	4b31      	ldr	r3, [pc, #196]	@ (8007028 <xPortStartScheduler+0x138>)
 8006f64:	2207      	movs	r2, #7
 8006f66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f68:	e009      	b.n	8006f7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006f6a:	4b2f      	ldr	r3, [pc, #188]	@ (8007028 <xPortStartScheduler+0x138>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	4a2d      	ldr	r2, [pc, #180]	@ (8007028 <xPortStartScheduler+0x138>)
 8006f72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f74:	78fb      	ldrb	r3, [r7, #3]
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	005b      	lsls	r3, r3, #1
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f7e:	78fb      	ldrb	r3, [r7, #3]
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f86:	2b80      	cmp	r3, #128	@ 0x80
 8006f88:	d0ef      	beq.n	8006f6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f8a:	4b27      	ldr	r3, [pc, #156]	@ (8007028 <xPortStartScheduler+0x138>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f1c3 0307 	rsb	r3, r3, #7
 8006f92:	2b04      	cmp	r3, #4
 8006f94:	d00b      	beq.n	8006fae <xPortStartScheduler+0xbe>
	__asm volatile
 8006f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f9a:	f383 8811 	msr	BASEPRI, r3
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	f3bf 8f4f 	dsb	sy
 8006fa6:	60bb      	str	r3, [r7, #8]
}
 8006fa8:	bf00      	nop
 8006faa:	bf00      	nop
 8006fac:	e7fd      	b.n	8006faa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006fae:	4b1e      	ldr	r3, [pc, #120]	@ (8007028 <xPortStartScheduler+0x138>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	021b      	lsls	r3, r3, #8
 8006fb4:	4a1c      	ldr	r2, [pc, #112]	@ (8007028 <xPortStartScheduler+0x138>)
 8006fb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8007028 <xPortStartScheduler+0x138>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006fc0:	4a19      	ldr	r2, [pc, #100]	@ (8007028 <xPortStartScheduler+0x138>)
 8006fc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006fcc:	4b17      	ldr	r3, [pc, #92]	@ (800702c <xPortStartScheduler+0x13c>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a16      	ldr	r2, [pc, #88]	@ (800702c <xPortStartScheduler+0x13c>)
 8006fd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006fd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006fd8:	4b14      	ldr	r3, [pc, #80]	@ (800702c <xPortStartScheduler+0x13c>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a13      	ldr	r2, [pc, #76]	@ (800702c <xPortStartScheduler+0x13c>)
 8006fde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006fe2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006fe4:	f000 f8da 	bl	800719c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006fe8:	4b11      	ldr	r3, [pc, #68]	@ (8007030 <xPortStartScheduler+0x140>)
 8006fea:	2200      	movs	r2, #0
 8006fec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006fee:	f000 f8f9 	bl	80071e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ff2:	4b10      	ldr	r3, [pc, #64]	@ (8007034 <xPortStartScheduler+0x144>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a0f      	ldr	r2, [pc, #60]	@ (8007034 <xPortStartScheduler+0x144>)
 8006ff8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006ffc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ffe:	f7ff ff63 	bl	8006ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007002:	f7ff fd3f 	bl	8006a84 <vTaskSwitchContext>
	prvTaskExitError();
 8007006:	f7ff ff1b 	bl	8006e40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3718      	adds	r7, #24
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	e000ed00 	.word	0xe000ed00
 8007018:	410fc271 	.word	0x410fc271
 800701c:	410fc270 	.word	0x410fc270
 8007020:	e000e400 	.word	0xe000e400
 8007024:	20000664 	.word	0x20000664
 8007028:	20000668 	.word	0x20000668
 800702c:	e000ed20 	.word	0xe000ed20
 8007030:	20000010 	.word	0x20000010
 8007034:	e000ef34 	.word	0xe000ef34

08007038 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
	__asm volatile
 800703e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	607b      	str	r3, [r7, #4]
}
 8007050:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007052:	4b10      	ldr	r3, [pc, #64]	@ (8007094 <vPortEnterCritical+0x5c>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	3301      	adds	r3, #1
 8007058:	4a0e      	ldr	r2, [pc, #56]	@ (8007094 <vPortEnterCritical+0x5c>)
 800705a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800705c:	4b0d      	ldr	r3, [pc, #52]	@ (8007094 <vPortEnterCritical+0x5c>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d110      	bne.n	8007086 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007064:	4b0c      	ldr	r3, [pc, #48]	@ (8007098 <vPortEnterCritical+0x60>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00b      	beq.n	8007086 <vPortEnterCritical+0x4e>
	__asm volatile
 800706e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	603b      	str	r3, [r7, #0]
}
 8007080:	bf00      	nop
 8007082:	bf00      	nop
 8007084:	e7fd      	b.n	8007082 <vPortEnterCritical+0x4a>
	}
}
 8007086:	bf00      	nop
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	20000010 	.word	0x20000010
 8007098:	e000ed04 	.word	0xe000ed04

0800709c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80070a2:	4b12      	ldr	r3, [pc, #72]	@ (80070ec <vPortExitCritical+0x50>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10b      	bne.n	80070c2 <vPortExitCritical+0x26>
	__asm volatile
 80070aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ae:	f383 8811 	msr	BASEPRI, r3
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	f3bf 8f4f 	dsb	sy
 80070ba:	607b      	str	r3, [r7, #4]
}
 80070bc:	bf00      	nop
 80070be:	bf00      	nop
 80070c0:	e7fd      	b.n	80070be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80070c2:	4b0a      	ldr	r3, [pc, #40]	@ (80070ec <vPortExitCritical+0x50>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3b01      	subs	r3, #1
 80070c8:	4a08      	ldr	r2, [pc, #32]	@ (80070ec <vPortExitCritical+0x50>)
 80070ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80070cc:	4b07      	ldr	r3, [pc, #28]	@ (80070ec <vPortExitCritical+0x50>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d105      	bne.n	80070e0 <vPortExitCritical+0x44>
 80070d4:	2300      	movs	r3, #0
 80070d6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80070de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	20000010 	.word	0x20000010

080070f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80070f0:	f3ef 8009 	mrs	r0, PSP
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	4b15      	ldr	r3, [pc, #84]	@ (8007150 <pxCurrentTCBConst>)
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	f01e 0f10 	tst.w	lr, #16
 8007100:	bf08      	it	eq
 8007102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800710a:	6010      	str	r0, [r2, #0]
 800710c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007110:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007114:	f380 8811 	msr	BASEPRI, r0
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f7ff fcb0 	bl	8006a84 <vTaskSwitchContext>
 8007124:	f04f 0000 	mov.w	r0, #0
 8007128:	f380 8811 	msr	BASEPRI, r0
 800712c:	bc09      	pop	{r0, r3}
 800712e:	6819      	ldr	r1, [r3, #0]
 8007130:	6808      	ldr	r0, [r1, #0]
 8007132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007136:	f01e 0f10 	tst.w	lr, #16
 800713a:	bf08      	it	eq
 800713c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007140:	f380 8809 	msr	PSP, r0
 8007144:	f3bf 8f6f 	isb	sy
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	f3af 8000 	nop.w

08007150 <pxCurrentTCBConst>:
 8007150:	20000538 	.word	0x20000538
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007154:	bf00      	nop
 8007156:	bf00      	nop

08007158 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
	__asm volatile
 800715e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007162:	f383 8811 	msr	BASEPRI, r3
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	607b      	str	r3, [r7, #4]
}
 8007170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007172:	f7ff fbcd 	bl	8006910 <xTaskIncrementTick>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d003      	beq.n	8007184 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800717c:	4b06      	ldr	r3, [pc, #24]	@ (8007198 <SysTick_Handler+0x40>)
 800717e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	2300      	movs	r3, #0
 8007186:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	f383 8811 	msr	BASEPRI, r3
}
 800718e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007190:	bf00      	nop
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	e000ed04 	.word	0xe000ed04

0800719c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800719c:	b480      	push	{r7}
 800719e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80071a0:	4b0b      	ldr	r3, [pc, #44]	@ (80071d0 <vPortSetupTimerInterrupt+0x34>)
 80071a2:	2200      	movs	r2, #0
 80071a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80071a6:	4b0b      	ldr	r3, [pc, #44]	@ (80071d4 <vPortSetupTimerInterrupt+0x38>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80071ac:	4b0a      	ldr	r3, [pc, #40]	@ (80071d8 <vPortSetupTimerInterrupt+0x3c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a0a      	ldr	r2, [pc, #40]	@ (80071dc <vPortSetupTimerInterrupt+0x40>)
 80071b2:	fba2 2303 	umull	r2, r3, r2, r3
 80071b6:	099b      	lsrs	r3, r3, #6
 80071b8:	4a09      	ldr	r2, [pc, #36]	@ (80071e0 <vPortSetupTimerInterrupt+0x44>)
 80071ba:	3b01      	subs	r3, #1
 80071bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80071be:	4b04      	ldr	r3, [pc, #16]	@ (80071d0 <vPortSetupTimerInterrupt+0x34>)
 80071c0:	2207      	movs	r2, #7
 80071c2:	601a      	str	r2, [r3, #0]
}
 80071c4:	bf00      	nop
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	e000e010 	.word	0xe000e010
 80071d4:	e000e018 	.word	0xe000e018
 80071d8:	20000004 	.word	0x20000004
 80071dc:	10624dd3 	.word	0x10624dd3
 80071e0:	e000e014 	.word	0xe000e014

080071e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80071e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80071f4 <vPortEnableVFP+0x10>
 80071e8:	6801      	ldr	r1, [r0, #0]
 80071ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80071ee:	6001      	str	r1, [r0, #0]
 80071f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80071f2:	bf00      	nop
 80071f4:	e000ed88 	.word	0xe000ed88

080071f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b08a      	sub	sp, #40	@ 0x28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007200:	2300      	movs	r3, #0
 8007202:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007204:	f7ff fad8 	bl	80067b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007208:	4b5c      	ldr	r3, [pc, #368]	@ (800737c <pvPortMalloc+0x184>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d101      	bne.n	8007214 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007210:	f000 f924 	bl	800745c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007214:	4b5a      	ldr	r3, [pc, #360]	@ (8007380 <pvPortMalloc+0x188>)
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4013      	ands	r3, r2
 800721c:	2b00      	cmp	r3, #0
 800721e:	f040 8095 	bne.w	800734c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d01e      	beq.n	8007266 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007228:	2208      	movs	r2, #8
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4413      	add	r3, r2
 800722e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f003 0307 	and.w	r3, r3, #7
 8007236:	2b00      	cmp	r3, #0
 8007238:	d015      	beq.n	8007266 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f023 0307 	bic.w	r3, r3, #7
 8007240:	3308      	adds	r3, #8
 8007242:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f003 0307 	and.w	r3, r3, #7
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00b      	beq.n	8007266 <pvPortMalloc+0x6e>
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	617b      	str	r3, [r7, #20]
}
 8007260:	bf00      	nop
 8007262:	bf00      	nop
 8007264:	e7fd      	b.n	8007262 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d06f      	beq.n	800734c <pvPortMalloc+0x154>
 800726c:	4b45      	ldr	r3, [pc, #276]	@ (8007384 <pvPortMalloc+0x18c>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	429a      	cmp	r2, r3
 8007274:	d86a      	bhi.n	800734c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007276:	4b44      	ldr	r3, [pc, #272]	@ (8007388 <pvPortMalloc+0x190>)
 8007278:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800727a:	4b43      	ldr	r3, [pc, #268]	@ (8007388 <pvPortMalloc+0x190>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007280:	e004      	b.n	800728c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007284:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800728c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	429a      	cmp	r2, r3
 8007294:	d903      	bls.n	800729e <pvPortMalloc+0xa6>
 8007296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1f1      	bne.n	8007282 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800729e:	4b37      	ldr	r3, [pc, #220]	@ (800737c <pvPortMalloc+0x184>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d051      	beq.n	800734c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80072a8:	6a3b      	ldr	r3, [r7, #32]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2208      	movs	r2, #8
 80072ae:	4413      	add	r3, r2
 80072b0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80072b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	6a3b      	ldr	r3, [r7, #32]
 80072b8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80072ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	1ad2      	subs	r2, r2, r3
 80072c2:	2308      	movs	r3, #8
 80072c4:	005b      	lsls	r3, r3, #1
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d920      	bls.n	800730c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80072ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4413      	add	r3, r2
 80072d0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	f003 0307 	and.w	r3, r3, #7
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00b      	beq.n	80072f4 <pvPortMalloc+0xfc>
	__asm volatile
 80072dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e0:	f383 8811 	msr	BASEPRI, r3
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	613b      	str	r3, [r7, #16]
}
 80072ee:	bf00      	nop
 80072f0:	bf00      	nop
 80072f2:	e7fd      	b.n	80072f0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80072f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f6:	685a      	ldr	r2, [r3, #4]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	1ad2      	subs	r2, r2, r3
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007306:	69b8      	ldr	r0, [r7, #24]
 8007308:	f000 f90a 	bl	8007520 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800730c:	4b1d      	ldr	r3, [pc, #116]	@ (8007384 <pvPortMalloc+0x18c>)
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	4a1b      	ldr	r2, [pc, #108]	@ (8007384 <pvPortMalloc+0x18c>)
 8007318:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800731a:	4b1a      	ldr	r3, [pc, #104]	@ (8007384 <pvPortMalloc+0x18c>)
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	4b1b      	ldr	r3, [pc, #108]	@ (800738c <pvPortMalloc+0x194>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	429a      	cmp	r2, r3
 8007324:	d203      	bcs.n	800732e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007326:	4b17      	ldr	r3, [pc, #92]	@ (8007384 <pvPortMalloc+0x18c>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a18      	ldr	r2, [pc, #96]	@ (800738c <pvPortMalloc+0x194>)
 800732c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800732e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007330:	685a      	ldr	r2, [r3, #4]
 8007332:	4b13      	ldr	r3, [pc, #76]	@ (8007380 <pvPortMalloc+0x188>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	431a      	orrs	r2, r3
 8007338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800733c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733e:	2200      	movs	r2, #0
 8007340:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007342:	4b13      	ldr	r3, [pc, #76]	@ (8007390 <pvPortMalloc+0x198>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3301      	adds	r3, #1
 8007348:	4a11      	ldr	r2, [pc, #68]	@ (8007390 <pvPortMalloc+0x198>)
 800734a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800734c:	f7ff fa42 	bl	80067d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	f003 0307 	and.w	r3, r3, #7
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00b      	beq.n	8007372 <pvPortMalloc+0x17a>
	__asm volatile
 800735a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800735e:	f383 8811 	msr	BASEPRI, r3
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	60fb      	str	r3, [r7, #12]
}
 800736c:	bf00      	nop
 800736e:	bf00      	nop
 8007370:	e7fd      	b.n	800736e <pvPortMalloc+0x176>
	return pvReturn;
 8007372:	69fb      	ldr	r3, [r7, #28]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3728      	adds	r7, #40	@ 0x28
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	20004274 	.word	0x20004274
 8007380:	20004288 	.word	0x20004288
 8007384:	20004278 	.word	0x20004278
 8007388:	2000426c 	.word	0x2000426c
 800738c:	2000427c 	.word	0x2000427c
 8007390:	20004280 	.word	0x20004280

08007394 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d04f      	beq.n	8007446 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80073a6:	2308      	movs	r3, #8
 80073a8:	425b      	negs	r3, r3
 80073aa:	697a      	ldr	r2, [r7, #20]
 80073ac:	4413      	add	r3, r2
 80073ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	685a      	ldr	r2, [r3, #4]
 80073b8:	4b25      	ldr	r3, [pc, #148]	@ (8007450 <vPortFree+0xbc>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4013      	ands	r3, r2
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10b      	bne.n	80073da <vPortFree+0x46>
	__asm volatile
 80073c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c6:	f383 8811 	msr	BASEPRI, r3
 80073ca:	f3bf 8f6f 	isb	sy
 80073ce:	f3bf 8f4f 	dsb	sy
 80073d2:	60fb      	str	r3, [r7, #12]
}
 80073d4:	bf00      	nop
 80073d6:	bf00      	nop
 80073d8:	e7fd      	b.n	80073d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00b      	beq.n	80073fa <vPortFree+0x66>
	__asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	60bb      	str	r3, [r7, #8]
}
 80073f4:	bf00      	nop
 80073f6:	bf00      	nop
 80073f8:	e7fd      	b.n	80073f6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	4b14      	ldr	r3, [pc, #80]	@ (8007450 <vPortFree+0xbc>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4013      	ands	r3, r2
 8007404:	2b00      	cmp	r3, #0
 8007406:	d01e      	beq.n	8007446 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d11a      	bne.n	8007446 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	4b0e      	ldr	r3, [pc, #56]	@ (8007450 <vPortFree+0xbc>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	43db      	mvns	r3, r3
 800741a:	401a      	ands	r2, r3
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007420:	f7ff f9ca 	bl	80067b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	685a      	ldr	r2, [r3, #4]
 8007428:	4b0a      	ldr	r3, [pc, #40]	@ (8007454 <vPortFree+0xc0>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4413      	add	r3, r2
 800742e:	4a09      	ldr	r2, [pc, #36]	@ (8007454 <vPortFree+0xc0>)
 8007430:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007432:	6938      	ldr	r0, [r7, #16]
 8007434:	f000 f874 	bl	8007520 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007438:	4b07      	ldr	r3, [pc, #28]	@ (8007458 <vPortFree+0xc4>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	3301      	adds	r3, #1
 800743e:	4a06      	ldr	r2, [pc, #24]	@ (8007458 <vPortFree+0xc4>)
 8007440:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007442:	f7ff f9c7 	bl	80067d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007446:	bf00      	nop
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	20004288 	.word	0x20004288
 8007454:	20004278 	.word	0x20004278
 8007458:	20004284 	.word	0x20004284

0800745c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007462:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007466:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007468:	4b27      	ldr	r3, [pc, #156]	@ (8007508 <prvHeapInit+0xac>)
 800746a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f003 0307 	and.w	r3, r3, #7
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00c      	beq.n	8007490 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	3307      	adds	r3, #7
 800747a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f023 0307 	bic.w	r3, r3, #7
 8007482:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007484:	68ba      	ldr	r2, [r7, #8]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	4a1f      	ldr	r2, [pc, #124]	@ (8007508 <prvHeapInit+0xac>)
 800748c:	4413      	add	r3, r2
 800748e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007494:	4a1d      	ldr	r2, [pc, #116]	@ (800750c <prvHeapInit+0xb0>)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800749a:	4b1c      	ldr	r3, [pc, #112]	@ (800750c <prvHeapInit+0xb0>)
 800749c:	2200      	movs	r2, #0
 800749e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	4413      	add	r3, r2
 80074a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80074a8:	2208      	movs	r2, #8
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	1a9b      	subs	r3, r3, r2
 80074ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f023 0307 	bic.w	r3, r3, #7
 80074b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	4a15      	ldr	r2, [pc, #84]	@ (8007510 <prvHeapInit+0xb4>)
 80074bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80074be:	4b14      	ldr	r3, [pc, #80]	@ (8007510 <prvHeapInit+0xb4>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2200      	movs	r2, #0
 80074c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80074c6:	4b12      	ldr	r3, [pc, #72]	@ (8007510 <prvHeapInit+0xb4>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2200      	movs	r2, #0
 80074cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	1ad2      	subs	r2, r2, r3
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80074dc:	4b0c      	ldr	r3, [pc, #48]	@ (8007510 <prvHeapInit+0xb4>)
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	4a0a      	ldr	r2, [pc, #40]	@ (8007514 <prvHeapInit+0xb8>)
 80074ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	4a09      	ldr	r2, [pc, #36]	@ (8007518 <prvHeapInit+0xbc>)
 80074f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80074f4:	4b09      	ldr	r3, [pc, #36]	@ (800751c <prvHeapInit+0xc0>)
 80074f6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80074fa:	601a      	str	r2, [r3, #0]
}
 80074fc:	bf00      	nop
 80074fe:	3714      	adds	r7, #20
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr
 8007508:	2000066c 	.word	0x2000066c
 800750c:	2000426c 	.word	0x2000426c
 8007510:	20004274 	.word	0x20004274
 8007514:	2000427c 	.word	0x2000427c
 8007518:	20004278 	.word	0x20004278
 800751c:	20004288 	.word	0x20004288

08007520 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007528:	4b28      	ldr	r3, [pc, #160]	@ (80075cc <prvInsertBlockIntoFreeList+0xac>)
 800752a:	60fb      	str	r3, [r7, #12]
 800752c:	e002      	b.n	8007534 <prvInsertBlockIntoFreeList+0x14>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	60fb      	str	r3, [r7, #12]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	429a      	cmp	r2, r3
 800753c:	d8f7      	bhi.n	800752e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	4413      	add	r3, r2
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	429a      	cmp	r2, r3
 800754e:	d108      	bne.n	8007562 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	441a      	add	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	441a      	add	r2, r3
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	429a      	cmp	r2, r3
 8007574:	d118      	bne.n	80075a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	4b15      	ldr	r3, [pc, #84]	@ (80075d0 <prvInsertBlockIntoFreeList+0xb0>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	429a      	cmp	r2, r3
 8007580:	d00d      	beq.n	800759e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685a      	ldr	r2, [r3, #4]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	441a      	add	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	e008      	b.n	80075b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800759e:	4b0c      	ldr	r3, [pc, #48]	@ (80075d0 <prvInsertBlockIntoFreeList+0xb0>)
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	e003      	b.n	80075b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d002      	beq.n	80075be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075be:	bf00      	nop
 80075c0:	3714      	adds	r7, #20
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	2000426c 	.word	0x2000426c
 80075d0:	20004274 	.word	0x20004274

080075d4 <siprintf>:
 80075d4:	b40e      	push	{r1, r2, r3}
 80075d6:	b500      	push	{lr}
 80075d8:	b09c      	sub	sp, #112	@ 0x70
 80075da:	ab1d      	add	r3, sp, #116	@ 0x74
 80075dc:	9002      	str	r0, [sp, #8]
 80075de:	9006      	str	r0, [sp, #24]
 80075e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80075e4:	4809      	ldr	r0, [pc, #36]	@ (800760c <siprintf+0x38>)
 80075e6:	9107      	str	r1, [sp, #28]
 80075e8:	9104      	str	r1, [sp, #16]
 80075ea:	4909      	ldr	r1, [pc, #36]	@ (8007610 <siprintf+0x3c>)
 80075ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80075f0:	9105      	str	r1, [sp, #20]
 80075f2:	6800      	ldr	r0, [r0, #0]
 80075f4:	9301      	str	r3, [sp, #4]
 80075f6:	a902      	add	r1, sp, #8
 80075f8:	f000 f9f8 	bl	80079ec <_svfiprintf_r>
 80075fc:	9b02      	ldr	r3, [sp, #8]
 80075fe:	2200      	movs	r2, #0
 8007600:	701a      	strb	r2, [r3, #0]
 8007602:	b01c      	add	sp, #112	@ 0x70
 8007604:	f85d eb04 	ldr.w	lr, [sp], #4
 8007608:	b003      	add	sp, #12
 800760a:	4770      	bx	lr
 800760c:	20000014 	.word	0x20000014
 8007610:	ffff0208 	.word	0xffff0208

08007614 <memset>:
 8007614:	4402      	add	r2, r0
 8007616:	4603      	mov	r3, r0
 8007618:	4293      	cmp	r3, r2
 800761a:	d100      	bne.n	800761e <memset+0xa>
 800761c:	4770      	bx	lr
 800761e:	f803 1b01 	strb.w	r1, [r3], #1
 8007622:	e7f9      	b.n	8007618 <memset+0x4>

08007624 <_reclaim_reent>:
 8007624:	4b29      	ldr	r3, [pc, #164]	@ (80076cc <_reclaim_reent+0xa8>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4283      	cmp	r3, r0
 800762a:	b570      	push	{r4, r5, r6, lr}
 800762c:	4604      	mov	r4, r0
 800762e:	d04b      	beq.n	80076c8 <_reclaim_reent+0xa4>
 8007630:	69c3      	ldr	r3, [r0, #28]
 8007632:	b1ab      	cbz	r3, 8007660 <_reclaim_reent+0x3c>
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	b16b      	cbz	r3, 8007654 <_reclaim_reent+0x30>
 8007638:	2500      	movs	r5, #0
 800763a:	69e3      	ldr	r3, [r4, #28]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	5959      	ldr	r1, [r3, r5]
 8007640:	2900      	cmp	r1, #0
 8007642:	d13b      	bne.n	80076bc <_reclaim_reent+0x98>
 8007644:	3504      	adds	r5, #4
 8007646:	2d80      	cmp	r5, #128	@ 0x80
 8007648:	d1f7      	bne.n	800763a <_reclaim_reent+0x16>
 800764a:	69e3      	ldr	r3, [r4, #28]
 800764c:	4620      	mov	r0, r4
 800764e:	68d9      	ldr	r1, [r3, #12]
 8007650:	f000 f878 	bl	8007744 <_free_r>
 8007654:	69e3      	ldr	r3, [r4, #28]
 8007656:	6819      	ldr	r1, [r3, #0]
 8007658:	b111      	cbz	r1, 8007660 <_reclaim_reent+0x3c>
 800765a:	4620      	mov	r0, r4
 800765c:	f000 f872 	bl	8007744 <_free_r>
 8007660:	6961      	ldr	r1, [r4, #20]
 8007662:	b111      	cbz	r1, 800766a <_reclaim_reent+0x46>
 8007664:	4620      	mov	r0, r4
 8007666:	f000 f86d 	bl	8007744 <_free_r>
 800766a:	69e1      	ldr	r1, [r4, #28]
 800766c:	b111      	cbz	r1, 8007674 <_reclaim_reent+0x50>
 800766e:	4620      	mov	r0, r4
 8007670:	f000 f868 	bl	8007744 <_free_r>
 8007674:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007676:	b111      	cbz	r1, 800767e <_reclaim_reent+0x5a>
 8007678:	4620      	mov	r0, r4
 800767a:	f000 f863 	bl	8007744 <_free_r>
 800767e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007680:	b111      	cbz	r1, 8007688 <_reclaim_reent+0x64>
 8007682:	4620      	mov	r0, r4
 8007684:	f000 f85e 	bl	8007744 <_free_r>
 8007688:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800768a:	b111      	cbz	r1, 8007692 <_reclaim_reent+0x6e>
 800768c:	4620      	mov	r0, r4
 800768e:	f000 f859 	bl	8007744 <_free_r>
 8007692:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007694:	b111      	cbz	r1, 800769c <_reclaim_reent+0x78>
 8007696:	4620      	mov	r0, r4
 8007698:	f000 f854 	bl	8007744 <_free_r>
 800769c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800769e:	b111      	cbz	r1, 80076a6 <_reclaim_reent+0x82>
 80076a0:	4620      	mov	r0, r4
 80076a2:	f000 f84f 	bl	8007744 <_free_r>
 80076a6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80076a8:	b111      	cbz	r1, 80076b0 <_reclaim_reent+0x8c>
 80076aa:	4620      	mov	r0, r4
 80076ac:	f000 f84a 	bl	8007744 <_free_r>
 80076b0:	6a23      	ldr	r3, [r4, #32]
 80076b2:	b14b      	cbz	r3, 80076c8 <_reclaim_reent+0xa4>
 80076b4:	4620      	mov	r0, r4
 80076b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80076ba:	4718      	bx	r3
 80076bc:	680e      	ldr	r6, [r1, #0]
 80076be:	4620      	mov	r0, r4
 80076c0:	f000 f840 	bl	8007744 <_free_r>
 80076c4:	4631      	mov	r1, r6
 80076c6:	e7bb      	b.n	8007640 <_reclaim_reent+0x1c>
 80076c8:	bd70      	pop	{r4, r5, r6, pc}
 80076ca:	bf00      	nop
 80076cc:	20000014 	.word	0x20000014

080076d0 <__errno>:
 80076d0:	4b01      	ldr	r3, [pc, #4]	@ (80076d8 <__errno+0x8>)
 80076d2:	6818      	ldr	r0, [r3, #0]
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	20000014 	.word	0x20000014

080076dc <__libc_init_array>:
 80076dc:	b570      	push	{r4, r5, r6, lr}
 80076de:	4d0d      	ldr	r5, [pc, #52]	@ (8007714 <__libc_init_array+0x38>)
 80076e0:	4c0d      	ldr	r4, [pc, #52]	@ (8007718 <__libc_init_array+0x3c>)
 80076e2:	1b64      	subs	r4, r4, r5
 80076e4:	10a4      	asrs	r4, r4, #2
 80076e6:	2600      	movs	r6, #0
 80076e8:	42a6      	cmp	r6, r4
 80076ea:	d109      	bne.n	8007700 <__libc_init_array+0x24>
 80076ec:	4d0b      	ldr	r5, [pc, #44]	@ (800771c <__libc_init_array+0x40>)
 80076ee:	4c0c      	ldr	r4, [pc, #48]	@ (8007720 <__libc_init_array+0x44>)
 80076f0:	f000 fc66 	bl	8007fc0 <_init>
 80076f4:	1b64      	subs	r4, r4, r5
 80076f6:	10a4      	asrs	r4, r4, #2
 80076f8:	2600      	movs	r6, #0
 80076fa:	42a6      	cmp	r6, r4
 80076fc:	d105      	bne.n	800770a <__libc_init_array+0x2e>
 80076fe:	bd70      	pop	{r4, r5, r6, pc}
 8007700:	f855 3b04 	ldr.w	r3, [r5], #4
 8007704:	4798      	blx	r3
 8007706:	3601      	adds	r6, #1
 8007708:	e7ee      	b.n	80076e8 <__libc_init_array+0xc>
 800770a:	f855 3b04 	ldr.w	r3, [r5], #4
 800770e:	4798      	blx	r3
 8007710:	3601      	adds	r6, #1
 8007712:	e7f2      	b.n	80076fa <__libc_init_array+0x1e>
 8007714:	08008194 	.word	0x08008194
 8007718:	08008194 	.word	0x08008194
 800771c:	08008194 	.word	0x08008194
 8007720:	08008198 	.word	0x08008198

08007724 <__retarget_lock_acquire_recursive>:
 8007724:	4770      	bx	lr

08007726 <__retarget_lock_release_recursive>:
 8007726:	4770      	bx	lr

08007728 <memcpy>:
 8007728:	440a      	add	r2, r1
 800772a:	4291      	cmp	r1, r2
 800772c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007730:	d100      	bne.n	8007734 <memcpy+0xc>
 8007732:	4770      	bx	lr
 8007734:	b510      	push	{r4, lr}
 8007736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800773a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800773e:	4291      	cmp	r1, r2
 8007740:	d1f9      	bne.n	8007736 <memcpy+0xe>
 8007742:	bd10      	pop	{r4, pc}

08007744 <_free_r>:
 8007744:	b538      	push	{r3, r4, r5, lr}
 8007746:	4605      	mov	r5, r0
 8007748:	2900      	cmp	r1, #0
 800774a:	d041      	beq.n	80077d0 <_free_r+0x8c>
 800774c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007750:	1f0c      	subs	r4, r1, #4
 8007752:	2b00      	cmp	r3, #0
 8007754:	bfb8      	it	lt
 8007756:	18e4      	addlt	r4, r4, r3
 8007758:	f000 f8e0 	bl	800791c <__malloc_lock>
 800775c:	4a1d      	ldr	r2, [pc, #116]	@ (80077d4 <_free_r+0x90>)
 800775e:	6813      	ldr	r3, [r2, #0]
 8007760:	b933      	cbnz	r3, 8007770 <_free_r+0x2c>
 8007762:	6063      	str	r3, [r4, #4]
 8007764:	6014      	str	r4, [r2, #0]
 8007766:	4628      	mov	r0, r5
 8007768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800776c:	f000 b8dc 	b.w	8007928 <__malloc_unlock>
 8007770:	42a3      	cmp	r3, r4
 8007772:	d908      	bls.n	8007786 <_free_r+0x42>
 8007774:	6820      	ldr	r0, [r4, #0]
 8007776:	1821      	adds	r1, r4, r0
 8007778:	428b      	cmp	r3, r1
 800777a:	bf01      	itttt	eq
 800777c:	6819      	ldreq	r1, [r3, #0]
 800777e:	685b      	ldreq	r3, [r3, #4]
 8007780:	1809      	addeq	r1, r1, r0
 8007782:	6021      	streq	r1, [r4, #0]
 8007784:	e7ed      	b.n	8007762 <_free_r+0x1e>
 8007786:	461a      	mov	r2, r3
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	b10b      	cbz	r3, 8007790 <_free_r+0x4c>
 800778c:	42a3      	cmp	r3, r4
 800778e:	d9fa      	bls.n	8007786 <_free_r+0x42>
 8007790:	6811      	ldr	r1, [r2, #0]
 8007792:	1850      	adds	r0, r2, r1
 8007794:	42a0      	cmp	r0, r4
 8007796:	d10b      	bne.n	80077b0 <_free_r+0x6c>
 8007798:	6820      	ldr	r0, [r4, #0]
 800779a:	4401      	add	r1, r0
 800779c:	1850      	adds	r0, r2, r1
 800779e:	4283      	cmp	r3, r0
 80077a0:	6011      	str	r1, [r2, #0]
 80077a2:	d1e0      	bne.n	8007766 <_free_r+0x22>
 80077a4:	6818      	ldr	r0, [r3, #0]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	6053      	str	r3, [r2, #4]
 80077aa:	4408      	add	r0, r1
 80077ac:	6010      	str	r0, [r2, #0]
 80077ae:	e7da      	b.n	8007766 <_free_r+0x22>
 80077b0:	d902      	bls.n	80077b8 <_free_r+0x74>
 80077b2:	230c      	movs	r3, #12
 80077b4:	602b      	str	r3, [r5, #0]
 80077b6:	e7d6      	b.n	8007766 <_free_r+0x22>
 80077b8:	6820      	ldr	r0, [r4, #0]
 80077ba:	1821      	adds	r1, r4, r0
 80077bc:	428b      	cmp	r3, r1
 80077be:	bf04      	itt	eq
 80077c0:	6819      	ldreq	r1, [r3, #0]
 80077c2:	685b      	ldreq	r3, [r3, #4]
 80077c4:	6063      	str	r3, [r4, #4]
 80077c6:	bf04      	itt	eq
 80077c8:	1809      	addeq	r1, r1, r0
 80077ca:	6021      	streq	r1, [r4, #0]
 80077cc:	6054      	str	r4, [r2, #4]
 80077ce:	e7ca      	b.n	8007766 <_free_r+0x22>
 80077d0:	bd38      	pop	{r3, r4, r5, pc}
 80077d2:	bf00      	nop
 80077d4:	200043d0 	.word	0x200043d0

080077d8 <sbrk_aligned>:
 80077d8:	b570      	push	{r4, r5, r6, lr}
 80077da:	4e0f      	ldr	r6, [pc, #60]	@ (8007818 <sbrk_aligned+0x40>)
 80077dc:	460c      	mov	r4, r1
 80077de:	6831      	ldr	r1, [r6, #0]
 80077e0:	4605      	mov	r5, r0
 80077e2:	b911      	cbnz	r1, 80077ea <sbrk_aligned+0x12>
 80077e4:	f000 fba6 	bl	8007f34 <_sbrk_r>
 80077e8:	6030      	str	r0, [r6, #0]
 80077ea:	4621      	mov	r1, r4
 80077ec:	4628      	mov	r0, r5
 80077ee:	f000 fba1 	bl	8007f34 <_sbrk_r>
 80077f2:	1c43      	adds	r3, r0, #1
 80077f4:	d103      	bne.n	80077fe <sbrk_aligned+0x26>
 80077f6:	f04f 34ff 	mov.w	r4, #4294967295
 80077fa:	4620      	mov	r0, r4
 80077fc:	bd70      	pop	{r4, r5, r6, pc}
 80077fe:	1cc4      	adds	r4, r0, #3
 8007800:	f024 0403 	bic.w	r4, r4, #3
 8007804:	42a0      	cmp	r0, r4
 8007806:	d0f8      	beq.n	80077fa <sbrk_aligned+0x22>
 8007808:	1a21      	subs	r1, r4, r0
 800780a:	4628      	mov	r0, r5
 800780c:	f000 fb92 	bl	8007f34 <_sbrk_r>
 8007810:	3001      	adds	r0, #1
 8007812:	d1f2      	bne.n	80077fa <sbrk_aligned+0x22>
 8007814:	e7ef      	b.n	80077f6 <sbrk_aligned+0x1e>
 8007816:	bf00      	nop
 8007818:	200043cc 	.word	0x200043cc

0800781c <_malloc_r>:
 800781c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007820:	1ccd      	adds	r5, r1, #3
 8007822:	f025 0503 	bic.w	r5, r5, #3
 8007826:	3508      	adds	r5, #8
 8007828:	2d0c      	cmp	r5, #12
 800782a:	bf38      	it	cc
 800782c:	250c      	movcc	r5, #12
 800782e:	2d00      	cmp	r5, #0
 8007830:	4606      	mov	r6, r0
 8007832:	db01      	blt.n	8007838 <_malloc_r+0x1c>
 8007834:	42a9      	cmp	r1, r5
 8007836:	d904      	bls.n	8007842 <_malloc_r+0x26>
 8007838:	230c      	movs	r3, #12
 800783a:	6033      	str	r3, [r6, #0]
 800783c:	2000      	movs	r0, #0
 800783e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007842:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007918 <_malloc_r+0xfc>
 8007846:	f000 f869 	bl	800791c <__malloc_lock>
 800784a:	f8d8 3000 	ldr.w	r3, [r8]
 800784e:	461c      	mov	r4, r3
 8007850:	bb44      	cbnz	r4, 80078a4 <_malloc_r+0x88>
 8007852:	4629      	mov	r1, r5
 8007854:	4630      	mov	r0, r6
 8007856:	f7ff ffbf 	bl	80077d8 <sbrk_aligned>
 800785a:	1c43      	adds	r3, r0, #1
 800785c:	4604      	mov	r4, r0
 800785e:	d158      	bne.n	8007912 <_malloc_r+0xf6>
 8007860:	f8d8 4000 	ldr.w	r4, [r8]
 8007864:	4627      	mov	r7, r4
 8007866:	2f00      	cmp	r7, #0
 8007868:	d143      	bne.n	80078f2 <_malloc_r+0xd6>
 800786a:	2c00      	cmp	r4, #0
 800786c:	d04b      	beq.n	8007906 <_malloc_r+0xea>
 800786e:	6823      	ldr	r3, [r4, #0]
 8007870:	4639      	mov	r1, r7
 8007872:	4630      	mov	r0, r6
 8007874:	eb04 0903 	add.w	r9, r4, r3
 8007878:	f000 fb5c 	bl	8007f34 <_sbrk_r>
 800787c:	4581      	cmp	r9, r0
 800787e:	d142      	bne.n	8007906 <_malloc_r+0xea>
 8007880:	6821      	ldr	r1, [r4, #0]
 8007882:	1a6d      	subs	r5, r5, r1
 8007884:	4629      	mov	r1, r5
 8007886:	4630      	mov	r0, r6
 8007888:	f7ff ffa6 	bl	80077d8 <sbrk_aligned>
 800788c:	3001      	adds	r0, #1
 800788e:	d03a      	beq.n	8007906 <_malloc_r+0xea>
 8007890:	6823      	ldr	r3, [r4, #0]
 8007892:	442b      	add	r3, r5
 8007894:	6023      	str	r3, [r4, #0]
 8007896:	f8d8 3000 	ldr.w	r3, [r8]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	bb62      	cbnz	r2, 80078f8 <_malloc_r+0xdc>
 800789e:	f8c8 7000 	str.w	r7, [r8]
 80078a2:	e00f      	b.n	80078c4 <_malloc_r+0xa8>
 80078a4:	6822      	ldr	r2, [r4, #0]
 80078a6:	1b52      	subs	r2, r2, r5
 80078a8:	d420      	bmi.n	80078ec <_malloc_r+0xd0>
 80078aa:	2a0b      	cmp	r2, #11
 80078ac:	d917      	bls.n	80078de <_malloc_r+0xc2>
 80078ae:	1961      	adds	r1, r4, r5
 80078b0:	42a3      	cmp	r3, r4
 80078b2:	6025      	str	r5, [r4, #0]
 80078b4:	bf18      	it	ne
 80078b6:	6059      	strne	r1, [r3, #4]
 80078b8:	6863      	ldr	r3, [r4, #4]
 80078ba:	bf08      	it	eq
 80078bc:	f8c8 1000 	streq.w	r1, [r8]
 80078c0:	5162      	str	r2, [r4, r5]
 80078c2:	604b      	str	r3, [r1, #4]
 80078c4:	4630      	mov	r0, r6
 80078c6:	f000 f82f 	bl	8007928 <__malloc_unlock>
 80078ca:	f104 000b 	add.w	r0, r4, #11
 80078ce:	1d23      	adds	r3, r4, #4
 80078d0:	f020 0007 	bic.w	r0, r0, #7
 80078d4:	1ac2      	subs	r2, r0, r3
 80078d6:	bf1c      	itt	ne
 80078d8:	1a1b      	subne	r3, r3, r0
 80078da:	50a3      	strne	r3, [r4, r2]
 80078dc:	e7af      	b.n	800783e <_malloc_r+0x22>
 80078de:	6862      	ldr	r2, [r4, #4]
 80078e0:	42a3      	cmp	r3, r4
 80078e2:	bf0c      	ite	eq
 80078e4:	f8c8 2000 	streq.w	r2, [r8]
 80078e8:	605a      	strne	r2, [r3, #4]
 80078ea:	e7eb      	b.n	80078c4 <_malloc_r+0xa8>
 80078ec:	4623      	mov	r3, r4
 80078ee:	6864      	ldr	r4, [r4, #4]
 80078f0:	e7ae      	b.n	8007850 <_malloc_r+0x34>
 80078f2:	463c      	mov	r4, r7
 80078f4:	687f      	ldr	r7, [r7, #4]
 80078f6:	e7b6      	b.n	8007866 <_malloc_r+0x4a>
 80078f8:	461a      	mov	r2, r3
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	42a3      	cmp	r3, r4
 80078fe:	d1fb      	bne.n	80078f8 <_malloc_r+0xdc>
 8007900:	2300      	movs	r3, #0
 8007902:	6053      	str	r3, [r2, #4]
 8007904:	e7de      	b.n	80078c4 <_malloc_r+0xa8>
 8007906:	230c      	movs	r3, #12
 8007908:	6033      	str	r3, [r6, #0]
 800790a:	4630      	mov	r0, r6
 800790c:	f000 f80c 	bl	8007928 <__malloc_unlock>
 8007910:	e794      	b.n	800783c <_malloc_r+0x20>
 8007912:	6005      	str	r5, [r0, #0]
 8007914:	e7d6      	b.n	80078c4 <_malloc_r+0xa8>
 8007916:	bf00      	nop
 8007918:	200043d0 	.word	0x200043d0

0800791c <__malloc_lock>:
 800791c:	4801      	ldr	r0, [pc, #4]	@ (8007924 <__malloc_lock+0x8>)
 800791e:	f7ff bf01 	b.w	8007724 <__retarget_lock_acquire_recursive>
 8007922:	bf00      	nop
 8007924:	200043c8 	.word	0x200043c8

08007928 <__malloc_unlock>:
 8007928:	4801      	ldr	r0, [pc, #4]	@ (8007930 <__malloc_unlock+0x8>)
 800792a:	f7ff befc 	b.w	8007726 <__retarget_lock_release_recursive>
 800792e:	bf00      	nop
 8007930:	200043c8 	.word	0x200043c8

08007934 <__ssputs_r>:
 8007934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007938:	688e      	ldr	r6, [r1, #8]
 800793a:	461f      	mov	r7, r3
 800793c:	42be      	cmp	r6, r7
 800793e:	680b      	ldr	r3, [r1, #0]
 8007940:	4682      	mov	sl, r0
 8007942:	460c      	mov	r4, r1
 8007944:	4690      	mov	r8, r2
 8007946:	d82d      	bhi.n	80079a4 <__ssputs_r+0x70>
 8007948:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800794c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007950:	d026      	beq.n	80079a0 <__ssputs_r+0x6c>
 8007952:	6965      	ldr	r5, [r4, #20]
 8007954:	6909      	ldr	r1, [r1, #16]
 8007956:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800795a:	eba3 0901 	sub.w	r9, r3, r1
 800795e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007962:	1c7b      	adds	r3, r7, #1
 8007964:	444b      	add	r3, r9
 8007966:	106d      	asrs	r5, r5, #1
 8007968:	429d      	cmp	r5, r3
 800796a:	bf38      	it	cc
 800796c:	461d      	movcc	r5, r3
 800796e:	0553      	lsls	r3, r2, #21
 8007970:	d527      	bpl.n	80079c2 <__ssputs_r+0x8e>
 8007972:	4629      	mov	r1, r5
 8007974:	f7ff ff52 	bl	800781c <_malloc_r>
 8007978:	4606      	mov	r6, r0
 800797a:	b360      	cbz	r0, 80079d6 <__ssputs_r+0xa2>
 800797c:	6921      	ldr	r1, [r4, #16]
 800797e:	464a      	mov	r2, r9
 8007980:	f7ff fed2 	bl	8007728 <memcpy>
 8007984:	89a3      	ldrh	r3, [r4, #12]
 8007986:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800798a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800798e:	81a3      	strh	r3, [r4, #12]
 8007990:	6126      	str	r6, [r4, #16]
 8007992:	6165      	str	r5, [r4, #20]
 8007994:	444e      	add	r6, r9
 8007996:	eba5 0509 	sub.w	r5, r5, r9
 800799a:	6026      	str	r6, [r4, #0]
 800799c:	60a5      	str	r5, [r4, #8]
 800799e:	463e      	mov	r6, r7
 80079a0:	42be      	cmp	r6, r7
 80079a2:	d900      	bls.n	80079a6 <__ssputs_r+0x72>
 80079a4:	463e      	mov	r6, r7
 80079a6:	6820      	ldr	r0, [r4, #0]
 80079a8:	4632      	mov	r2, r6
 80079aa:	4641      	mov	r1, r8
 80079ac:	f000 faa8 	bl	8007f00 <memmove>
 80079b0:	68a3      	ldr	r3, [r4, #8]
 80079b2:	1b9b      	subs	r3, r3, r6
 80079b4:	60a3      	str	r3, [r4, #8]
 80079b6:	6823      	ldr	r3, [r4, #0]
 80079b8:	4433      	add	r3, r6
 80079ba:	6023      	str	r3, [r4, #0]
 80079bc:	2000      	movs	r0, #0
 80079be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079c2:	462a      	mov	r2, r5
 80079c4:	f000 fac6 	bl	8007f54 <_realloc_r>
 80079c8:	4606      	mov	r6, r0
 80079ca:	2800      	cmp	r0, #0
 80079cc:	d1e0      	bne.n	8007990 <__ssputs_r+0x5c>
 80079ce:	6921      	ldr	r1, [r4, #16]
 80079d0:	4650      	mov	r0, sl
 80079d2:	f7ff feb7 	bl	8007744 <_free_r>
 80079d6:	230c      	movs	r3, #12
 80079d8:	f8ca 3000 	str.w	r3, [sl]
 80079dc:	89a3      	ldrh	r3, [r4, #12]
 80079de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079e2:	81a3      	strh	r3, [r4, #12]
 80079e4:	f04f 30ff 	mov.w	r0, #4294967295
 80079e8:	e7e9      	b.n	80079be <__ssputs_r+0x8a>
	...

080079ec <_svfiprintf_r>:
 80079ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f0:	4698      	mov	r8, r3
 80079f2:	898b      	ldrh	r3, [r1, #12]
 80079f4:	061b      	lsls	r3, r3, #24
 80079f6:	b09d      	sub	sp, #116	@ 0x74
 80079f8:	4607      	mov	r7, r0
 80079fa:	460d      	mov	r5, r1
 80079fc:	4614      	mov	r4, r2
 80079fe:	d510      	bpl.n	8007a22 <_svfiprintf_r+0x36>
 8007a00:	690b      	ldr	r3, [r1, #16]
 8007a02:	b973      	cbnz	r3, 8007a22 <_svfiprintf_r+0x36>
 8007a04:	2140      	movs	r1, #64	@ 0x40
 8007a06:	f7ff ff09 	bl	800781c <_malloc_r>
 8007a0a:	6028      	str	r0, [r5, #0]
 8007a0c:	6128      	str	r0, [r5, #16]
 8007a0e:	b930      	cbnz	r0, 8007a1e <_svfiprintf_r+0x32>
 8007a10:	230c      	movs	r3, #12
 8007a12:	603b      	str	r3, [r7, #0]
 8007a14:	f04f 30ff 	mov.w	r0, #4294967295
 8007a18:	b01d      	add	sp, #116	@ 0x74
 8007a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a1e:	2340      	movs	r3, #64	@ 0x40
 8007a20:	616b      	str	r3, [r5, #20]
 8007a22:	2300      	movs	r3, #0
 8007a24:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a26:	2320      	movs	r3, #32
 8007a28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a30:	2330      	movs	r3, #48	@ 0x30
 8007a32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007bd0 <_svfiprintf_r+0x1e4>
 8007a36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a3a:	f04f 0901 	mov.w	r9, #1
 8007a3e:	4623      	mov	r3, r4
 8007a40:	469a      	mov	sl, r3
 8007a42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a46:	b10a      	cbz	r2, 8007a4c <_svfiprintf_r+0x60>
 8007a48:	2a25      	cmp	r2, #37	@ 0x25
 8007a4a:	d1f9      	bne.n	8007a40 <_svfiprintf_r+0x54>
 8007a4c:	ebba 0b04 	subs.w	fp, sl, r4
 8007a50:	d00b      	beq.n	8007a6a <_svfiprintf_r+0x7e>
 8007a52:	465b      	mov	r3, fp
 8007a54:	4622      	mov	r2, r4
 8007a56:	4629      	mov	r1, r5
 8007a58:	4638      	mov	r0, r7
 8007a5a:	f7ff ff6b 	bl	8007934 <__ssputs_r>
 8007a5e:	3001      	adds	r0, #1
 8007a60:	f000 80a7 	beq.w	8007bb2 <_svfiprintf_r+0x1c6>
 8007a64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a66:	445a      	add	r2, fp
 8007a68:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f000 809f 	beq.w	8007bb2 <_svfiprintf_r+0x1c6>
 8007a74:	2300      	movs	r3, #0
 8007a76:	f04f 32ff 	mov.w	r2, #4294967295
 8007a7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a7e:	f10a 0a01 	add.w	sl, sl, #1
 8007a82:	9304      	str	r3, [sp, #16]
 8007a84:	9307      	str	r3, [sp, #28]
 8007a86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a8c:	4654      	mov	r4, sl
 8007a8e:	2205      	movs	r2, #5
 8007a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a94:	484e      	ldr	r0, [pc, #312]	@ (8007bd0 <_svfiprintf_r+0x1e4>)
 8007a96:	f7f8 fbbb 	bl	8000210 <memchr>
 8007a9a:	9a04      	ldr	r2, [sp, #16]
 8007a9c:	b9d8      	cbnz	r0, 8007ad6 <_svfiprintf_r+0xea>
 8007a9e:	06d0      	lsls	r0, r2, #27
 8007aa0:	bf44      	itt	mi
 8007aa2:	2320      	movmi	r3, #32
 8007aa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007aa8:	0711      	lsls	r1, r2, #28
 8007aaa:	bf44      	itt	mi
 8007aac:	232b      	movmi	r3, #43	@ 0x2b
 8007aae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ab6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ab8:	d015      	beq.n	8007ae6 <_svfiprintf_r+0xfa>
 8007aba:	9a07      	ldr	r2, [sp, #28]
 8007abc:	4654      	mov	r4, sl
 8007abe:	2000      	movs	r0, #0
 8007ac0:	f04f 0c0a 	mov.w	ip, #10
 8007ac4:	4621      	mov	r1, r4
 8007ac6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007aca:	3b30      	subs	r3, #48	@ 0x30
 8007acc:	2b09      	cmp	r3, #9
 8007ace:	d94b      	bls.n	8007b68 <_svfiprintf_r+0x17c>
 8007ad0:	b1b0      	cbz	r0, 8007b00 <_svfiprintf_r+0x114>
 8007ad2:	9207      	str	r2, [sp, #28]
 8007ad4:	e014      	b.n	8007b00 <_svfiprintf_r+0x114>
 8007ad6:	eba0 0308 	sub.w	r3, r0, r8
 8007ada:	fa09 f303 	lsl.w	r3, r9, r3
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	9304      	str	r3, [sp, #16]
 8007ae2:	46a2      	mov	sl, r4
 8007ae4:	e7d2      	b.n	8007a8c <_svfiprintf_r+0xa0>
 8007ae6:	9b03      	ldr	r3, [sp, #12]
 8007ae8:	1d19      	adds	r1, r3, #4
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	9103      	str	r1, [sp, #12]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	bfbb      	ittet	lt
 8007af2:	425b      	neglt	r3, r3
 8007af4:	f042 0202 	orrlt.w	r2, r2, #2
 8007af8:	9307      	strge	r3, [sp, #28]
 8007afa:	9307      	strlt	r3, [sp, #28]
 8007afc:	bfb8      	it	lt
 8007afe:	9204      	strlt	r2, [sp, #16]
 8007b00:	7823      	ldrb	r3, [r4, #0]
 8007b02:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b04:	d10a      	bne.n	8007b1c <_svfiprintf_r+0x130>
 8007b06:	7863      	ldrb	r3, [r4, #1]
 8007b08:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b0a:	d132      	bne.n	8007b72 <_svfiprintf_r+0x186>
 8007b0c:	9b03      	ldr	r3, [sp, #12]
 8007b0e:	1d1a      	adds	r2, r3, #4
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	9203      	str	r2, [sp, #12]
 8007b14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b18:	3402      	adds	r4, #2
 8007b1a:	9305      	str	r3, [sp, #20]
 8007b1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007be0 <_svfiprintf_r+0x1f4>
 8007b20:	7821      	ldrb	r1, [r4, #0]
 8007b22:	2203      	movs	r2, #3
 8007b24:	4650      	mov	r0, sl
 8007b26:	f7f8 fb73 	bl	8000210 <memchr>
 8007b2a:	b138      	cbz	r0, 8007b3c <_svfiprintf_r+0x150>
 8007b2c:	9b04      	ldr	r3, [sp, #16]
 8007b2e:	eba0 000a 	sub.w	r0, r0, sl
 8007b32:	2240      	movs	r2, #64	@ 0x40
 8007b34:	4082      	lsls	r2, r0
 8007b36:	4313      	orrs	r3, r2
 8007b38:	3401      	adds	r4, #1
 8007b3a:	9304      	str	r3, [sp, #16]
 8007b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b40:	4824      	ldr	r0, [pc, #144]	@ (8007bd4 <_svfiprintf_r+0x1e8>)
 8007b42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b46:	2206      	movs	r2, #6
 8007b48:	f7f8 fb62 	bl	8000210 <memchr>
 8007b4c:	2800      	cmp	r0, #0
 8007b4e:	d036      	beq.n	8007bbe <_svfiprintf_r+0x1d2>
 8007b50:	4b21      	ldr	r3, [pc, #132]	@ (8007bd8 <_svfiprintf_r+0x1ec>)
 8007b52:	bb1b      	cbnz	r3, 8007b9c <_svfiprintf_r+0x1b0>
 8007b54:	9b03      	ldr	r3, [sp, #12]
 8007b56:	3307      	adds	r3, #7
 8007b58:	f023 0307 	bic.w	r3, r3, #7
 8007b5c:	3308      	adds	r3, #8
 8007b5e:	9303      	str	r3, [sp, #12]
 8007b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b62:	4433      	add	r3, r6
 8007b64:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b66:	e76a      	b.n	8007a3e <_svfiprintf_r+0x52>
 8007b68:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	2001      	movs	r0, #1
 8007b70:	e7a8      	b.n	8007ac4 <_svfiprintf_r+0xd8>
 8007b72:	2300      	movs	r3, #0
 8007b74:	3401      	adds	r4, #1
 8007b76:	9305      	str	r3, [sp, #20]
 8007b78:	4619      	mov	r1, r3
 8007b7a:	f04f 0c0a 	mov.w	ip, #10
 8007b7e:	4620      	mov	r0, r4
 8007b80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b84:	3a30      	subs	r2, #48	@ 0x30
 8007b86:	2a09      	cmp	r2, #9
 8007b88:	d903      	bls.n	8007b92 <_svfiprintf_r+0x1a6>
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d0c6      	beq.n	8007b1c <_svfiprintf_r+0x130>
 8007b8e:	9105      	str	r1, [sp, #20]
 8007b90:	e7c4      	b.n	8007b1c <_svfiprintf_r+0x130>
 8007b92:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b96:	4604      	mov	r4, r0
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e7f0      	b.n	8007b7e <_svfiprintf_r+0x192>
 8007b9c:	ab03      	add	r3, sp, #12
 8007b9e:	9300      	str	r3, [sp, #0]
 8007ba0:	462a      	mov	r2, r5
 8007ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8007bdc <_svfiprintf_r+0x1f0>)
 8007ba4:	a904      	add	r1, sp, #16
 8007ba6:	4638      	mov	r0, r7
 8007ba8:	f3af 8000 	nop.w
 8007bac:	1c42      	adds	r2, r0, #1
 8007bae:	4606      	mov	r6, r0
 8007bb0:	d1d6      	bne.n	8007b60 <_svfiprintf_r+0x174>
 8007bb2:	89ab      	ldrh	r3, [r5, #12]
 8007bb4:	065b      	lsls	r3, r3, #25
 8007bb6:	f53f af2d 	bmi.w	8007a14 <_svfiprintf_r+0x28>
 8007bba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007bbc:	e72c      	b.n	8007a18 <_svfiprintf_r+0x2c>
 8007bbe:	ab03      	add	r3, sp, #12
 8007bc0:	9300      	str	r3, [sp, #0]
 8007bc2:	462a      	mov	r2, r5
 8007bc4:	4b05      	ldr	r3, [pc, #20]	@ (8007bdc <_svfiprintf_r+0x1f0>)
 8007bc6:	a904      	add	r1, sp, #16
 8007bc8:	4638      	mov	r0, r7
 8007bca:	f000 f879 	bl	8007cc0 <_printf_i>
 8007bce:	e7ed      	b.n	8007bac <_svfiprintf_r+0x1c0>
 8007bd0:	08008158 	.word	0x08008158
 8007bd4:	08008162 	.word	0x08008162
 8007bd8:	00000000 	.word	0x00000000
 8007bdc:	08007935 	.word	0x08007935
 8007be0:	0800815e 	.word	0x0800815e

08007be4 <_printf_common>:
 8007be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007be8:	4616      	mov	r6, r2
 8007bea:	4698      	mov	r8, r3
 8007bec:	688a      	ldr	r2, [r1, #8]
 8007bee:	690b      	ldr	r3, [r1, #16]
 8007bf0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	bfb8      	it	lt
 8007bf8:	4613      	movlt	r3, r2
 8007bfa:	6033      	str	r3, [r6, #0]
 8007bfc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c00:	4607      	mov	r7, r0
 8007c02:	460c      	mov	r4, r1
 8007c04:	b10a      	cbz	r2, 8007c0a <_printf_common+0x26>
 8007c06:	3301      	adds	r3, #1
 8007c08:	6033      	str	r3, [r6, #0]
 8007c0a:	6823      	ldr	r3, [r4, #0]
 8007c0c:	0699      	lsls	r1, r3, #26
 8007c0e:	bf42      	ittt	mi
 8007c10:	6833      	ldrmi	r3, [r6, #0]
 8007c12:	3302      	addmi	r3, #2
 8007c14:	6033      	strmi	r3, [r6, #0]
 8007c16:	6825      	ldr	r5, [r4, #0]
 8007c18:	f015 0506 	ands.w	r5, r5, #6
 8007c1c:	d106      	bne.n	8007c2c <_printf_common+0x48>
 8007c1e:	f104 0a19 	add.w	sl, r4, #25
 8007c22:	68e3      	ldr	r3, [r4, #12]
 8007c24:	6832      	ldr	r2, [r6, #0]
 8007c26:	1a9b      	subs	r3, r3, r2
 8007c28:	42ab      	cmp	r3, r5
 8007c2a:	dc26      	bgt.n	8007c7a <_printf_common+0x96>
 8007c2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c30:	6822      	ldr	r2, [r4, #0]
 8007c32:	3b00      	subs	r3, #0
 8007c34:	bf18      	it	ne
 8007c36:	2301      	movne	r3, #1
 8007c38:	0692      	lsls	r2, r2, #26
 8007c3a:	d42b      	bmi.n	8007c94 <_printf_common+0xb0>
 8007c3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c40:	4641      	mov	r1, r8
 8007c42:	4638      	mov	r0, r7
 8007c44:	47c8      	blx	r9
 8007c46:	3001      	adds	r0, #1
 8007c48:	d01e      	beq.n	8007c88 <_printf_common+0xa4>
 8007c4a:	6823      	ldr	r3, [r4, #0]
 8007c4c:	6922      	ldr	r2, [r4, #16]
 8007c4e:	f003 0306 	and.w	r3, r3, #6
 8007c52:	2b04      	cmp	r3, #4
 8007c54:	bf02      	ittt	eq
 8007c56:	68e5      	ldreq	r5, [r4, #12]
 8007c58:	6833      	ldreq	r3, [r6, #0]
 8007c5a:	1aed      	subeq	r5, r5, r3
 8007c5c:	68a3      	ldr	r3, [r4, #8]
 8007c5e:	bf0c      	ite	eq
 8007c60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c64:	2500      	movne	r5, #0
 8007c66:	4293      	cmp	r3, r2
 8007c68:	bfc4      	itt	gt
 8007c6a:	1a9b      	subgt	r3, r3, r2
 8007c6c:	18ed      	addgt	r5, r5, r3
 8007c6e:	2600      	movs	r6, #0
 8007c70:	341a      	adds	r4, #26
 8007c72:	42b5      	cmp	r5, r6
 8007c74:	d11a      	bne.n	8007cac <_printf_common+0xc8>
 8007c76:	2000      	movs	r0, #0
 8007c78:	e008      	b.n	8007c8c <_printf_common+0xa8>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	4652      	mov	r2, sl
 8007c7e:	4641      	mov	r1, r8
 8007c80:	4638      	mov	r0, r7
 8007c82:	47c8      	blx	r9
 8007c84:	3001      	adds	r0, #1
 8007c86:	d103      	bne.n	8007c90 <_printf_common+0xac>
 8007c88:	f04f 30ff 	mov.w	r0, #4294967295
 8007c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c90:	3501      	adds	r5, #1
 8007c92:	e7c6      	b.n	8007c22 <_printf_common+0x3e>
 8007c94:	18e1      	adds	r1, r4, r3
 8007c96:	1c5a      	adds	r2, r3, #1
 8007c98:	2030      	movs	r0, #48	@ 0x30
 8007c9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c9e:	4422      	add	r2, r4
 8007ca0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ca4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ca8:	3302      	adds	r3, #2
 8007caa:	e7c7      	b.n	8007c3c <_printf_common+0x58>
 8007cac:	2301      	movs	r3, #1
 8007cae:	4622      	mov	r2, r4
 8007cb0:	4641      	mov	r1, r8
 8007cb2:	4638      	mov	r0, r7
 8007cb4:	47c8      	blx	r9
 8007cb6:	3001      	adds	r0, #1
 8007cb8:	d0e6      	beq.n	8007c88 <_printf_common+0xa4>
 8007cba:	3601      	adds	r6, #1
 8007cbc:	e7d9      	b.n	8007c72 <_printf_common+0x8e>
	...

08007cc0 <_printf_i>:
 8007cc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cc4:	7e0f      	ldrb	r7, [r1, #24]
 8007cc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007cc8:	2f78      	cmp	r7, #120	@ 0x78
 8007cca:	4691      	mov	r9, r2
 8007ccc:	4680      	mov	r8, r0
 8007cce:	460c      	mov	r4, r1
 8007cd0:	469a      	mov	sl, r3
 8007cd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007cd6:	d807      	bhi.n	8007ce8 <_printf_i+0x28>
 8007cd8:	2f62      	cmp	r7, #98	@ 0x62
 8007cda:	d80a      	bhi.n	8007cf2 <_printf_i+0x32>
 8007cdc:	2f00      	cmp	r7, #0
 8007cde:	f000 80d2 	beq.w	8007e86 <_printf_i+0x1c6>
 8007ce2:	2f58      	cmp	r7, #88	@ 0x58
 8007ce4:	f000 80b9 	beq.w	8007e5a <_printf_i+0x19a>
 8007ce8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007cec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007cf0:	e03a      	b.n	8007d68 <_printf_i+0xa8>
 8007cf2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007cf6:	2b15      	cmp	r3, #21
 8007cf8:	d8f6      	bhi.n	8007ce8 <_printf_i+0x28>
 8007cfa:	a101      	add	r1, pc, #4	@ (adr r1, 8007d00 <_printf_i+0x40>)
 8007cfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d00:	08007d59 	.word	0x08007d59
 8007d04:	08007d6d 	.word	0x08007d6d
 8007d08:	08007ce9 	.word	0x08007ce9
 8007d0c:	08007ce9 	.word	0x08007ce9
 8007d10:	08007ce9 	.word	0x08007ce9
 8007d14:	08007ce9 	.word	0x08007ce9
 8007d18:	08007d6d 	.word	0x08007d6d
 8007d1c:	08007ce9 	.word	0x08007ce9
 8007d20:	08007ce9 	.word	0x08007ce9
 8007d24:	08007ce9 	.word	0x08007ce9
 8007d28:	08007ce9 	.word	0x08007ce9
 8007d2c:	08007e6d 	.word	0x08007e6d
 8007d30:	08007d97 	.word	0x08007d97
 8007d34:	08007e27 	.word	0x08007e27
 8007d38:	08007ce9 	.word	0x08007ce9
 8007d3c:	08007ce9 	.word	0x08007ce9
 8007d40:	08007e8f 	.word	0x08007e8f
 8007d44:	08007ce9 	.word	0x08007ce9
 8007d48:	08007d97 	.word	0x08007d97
 8007d4c:	08007ce9 	.word	0x08007ce9
 8007d50:	08007ce9 	.word	0x08007ce9
 8007d54:	08007e2f 	.word	0x08007e2f
 8007d58:	6833      	ldr	r3, [r6, #0]
 8007d5a:	1d1a      	adds	r2, r3, #4
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	6032      	str	r2, [r6, #0]
 8007d60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e09d      	b.n	8007ea8 <_printf_i+0x1e8>
 8007d6c:	6833      	ldr	r3, [r6, #0]
 8007d6e:	6820      	ldr	r0, [r4, #0]
 8007d70:	1d19      	adds	r1, r3, #4
 8007d72:	6031      	str	r1, [r6, #0]
 8007d74:	0606      	lsls	r6, r0, #24
 8007d76:	d501      	bpl.n	8007d7c <_printf_i+0xbc>
 8007d78:	681d      	ldr	r5, [r3, #0]
 8007d7a:	e003      	b.n	8007d84 <_printf_i+0xc4>
 8007d7c:	0645      	lsls	r5, r0, #25
 8007d7e:	d5fb      	bpl.n	8007d78 <_printf_i+0xb8>
 8007d80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d84:	2d00      	cmp	r5, #0
 8007d86:	da03      	bge.n	8007d90 <_printf_i+0xd0>
 8007d88:	232d      	movs	r3, #45	@ 0x2d
 8007d8a:	426d      	negs	r5, r5
 8007d8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d90:	4859      	ldr	r0, [pc, #356]	@ (8007ef8 <_printf_i+0x238>)
 8007d92:	230a      	movs	r3, #10
 8007d94:	e011      	b.n	8007dba <_printf_i+0xfa>
 8007d96:	6821      	ldr	r1, [r4, #0]
 8007d98:	6833      	ldr	r3, [r6, #0]
 8007d9a:	0608      	lsls	r0, r1, #24
 8007d9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007da0:	d402      	bmi.n	8007da8 <_printf_i+0xe8>
 8007da2:	0649      	lsls	r1, r1, #25
 8007da4:	bf48      	it	mi
 8007da6:	b2ad      	uxthmi	r5, r5
 8007da8:	2f6f      	cmp	r7, #111	@ 0x6f
 8007daa:	4853      	ldr	r0, [pc, #332]	@ (8007ef8 <_printf_i+0x238>)
 8007dac:	6033      	str	r3, [r6, #0]
 8007dae:	bf14      	ite	ne
 8007db0:	230a      	movne	r3, #10
 8007db2:	2308      	moveq	r3, #8
 8007db4:	2100      	movs	r1, #0
 8007db6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007dba:	6866      	ldr	r6, [r4, #4]
 8007dbc:	60a6      	str	r6, [r4, #8]
 8007dbe:	2e00      	cmp	r6, #0
 8007dc0:	bfa2      	ittt	ge
 8007dc2:	6821      	ldrge	r1, [r4, #0]
 8007dc4:	f021 0104 	bicge.w	r1, r1, #4
 8007dc8:	6021      	strge	r1, [r4, #0]
 8007dca:	b90d      	cbnz	r5, 8007dd0 <_printf_i+0x110>
 8007dcc:	2e00      	cmp	r6, #0
 8007dce:	d04b      	beq.n	8007e68 <_printf_i+0x1a8>
 8007dd0:	4616      	mov	r6, r2
 8007dd2:	fbb5 f1f3 	udiv	r1, r5, r3
 8007dd6:	fb03 5711 	mls	r7, r3, r1, r5
 8007dda:	5dc7      	ldrb	r7, [r0, r7]
 8007ddc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007de0:	462f      	mov	r7, r5
 8007de2:	42bb      	cmp	r3, r7
 8007de4:	460d      	mov	r5, r1
 8007de6:	d9f4      	bls.n	8007dd2 <_printf_i+0x112>
 8007de8:	2b08      	cmp	r3, #8
 8007dea:	d10b      	bne.n	8007e04 <_printf_i+0x144>
 8007dec:	6823      	ldr	r3, [r4, #0]
 8007dee:	07df      	lsls	r7, r3, #31
 8007df0:	d508      	bpl.n	8007e04 <_printf_i+0x144>
 8007df2:	6923      	ldr	r3, [r4, #16]
 8007df4:	6861      	ldr	r1, [r4, #4]
 8007df6:	4299      	cmp	r1, r3
 8007df8:	bfde      	ittt	le
 8007dfa:	2330      	movle	r3, #48	@ 0x30
 8007dfc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e04:	1b92      	subs	r2, r2, r6
 8007e06:	6122      	str	r2, [r4, #16]
 8007e08:	f8cd a000 	str.w	sl, [sp]
 8007e0c:	464b      	mov	r3, r9
 8007e0e:	aa03      	add	r2, sp, #12
 8007e10:	4621      	mov	r1, r4
 8007e12:	4640      	mov	r0, r8
 8007e14:	f7ff fee6 	bl	8007be4 <_printf_common>
 8007e18:	3001      	adds	r0, #1
 8007e1a:	d14a      	bne.n	8007eb2 <_printf_i+0x1f2>
 8007e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e20:	b004      	add	sp, #16
 8007e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e26:	6823      	ldr	r3, [r4, #0]
 8007e28:	f043 0320 	orr.w	r3, r3, #32
 8007e2c:	6023      	str	r3, [r4, #0]
 8007e2e:	4833      	ldr	r0, [pc, #204]	@ (8007efc <_printf_i+0x23c>)
 8007e30:	2778      	movs	r7, #120	@ 0x78
 8007e32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	6831      	ldr	r1, [r6, #0]
 8007e3a:	061f      	lsls	r7, r3, #24
 8007e3c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e40:	d402      	bmi.n	8007e48 <_printf_i+0x188>
 8007e42:	065f      	lsls	r7, r3, #25
 8007e44:	bf48      	it	mi
 8007e46:	b2ad      	uxthmi	r5, r5
 8007e48:	6031      	str	r1, [r6, #0]
 8007e4a:	07d9      	lsls	r1, r3, #31
 8007e4c:	bf44      	itt	mi
 8007e4e:	f043 0320 	orrmi.w	r3, r3, #32
 8007e52:	6023      	strmi	r3, [r4, #0]
 8007e54:	b11d      	cbz	r5, 8007e5e <_printf_i+0x19e>
 8007e56:	2310      	movs	r3, #16
 8007e58:	e7ac      	b.n	8007db4 <_printf_i+0xf4>
 8007e5a:	4827      	ldr	r0, [pc, #156]	@ (8007ef8 <_printf_i+0x238>)
 8007e5c:	e7e9      	b.n	8007e32 <_printf_i+0x172>
 8007e5e:	6823      	ldr	r3, [r4, #0]
 8007e60:	f023 0320 	bic.w	r3, r3, #32
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	e7f6      	b.n	8007e56 <_printf_i+0x196>
 8007e68:	4616      	mov	r6, r2
 8007e6a:	e7bd      	b.n	8007de8 <_printf_i+0x128>
 8007e6c:	6833      	ldr	r3, [r6, #0]
 8007e6e:	6825      	ldr	r5, [r4, #0]
 8007e70:	6961      	ldr	r1, [r4, #20]
 8007e72:	1d18      	adds	r0, r3, #4
 8007e74:	6030      	str	r0, [r6, #0]
 8007e76:	062e      	lsls	r6, r5, #24
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	d501      	bpl.n	8007e80 <_printf_i+0x1c0>
 8007e7c:	6019      	str	r1, [r3, #0]
 8007e7e:	e002      	b.n	8007e86 <_printf_i+0x1c6>
 8007e80:	0668      	lsls	r0, r5, #25
 8007e82:	d5fb      	bpl.n	8007e7c <_printf_i+0x1bc>
 8007e84:	8019      	strh	r1, [r3, #0]
 8007e86:	2300      	movs	r3, #0
 8007e88:	6123      	str	r3, [r4, #16]
 8007e8a:	4616      	mov	r6, r2
 8007e8c:	e7bc      	b.n	8007e08 <_printf_i+0x148>
 8007e8e:	6833      	ldr	r3, [r6, #0]
 8007e90:	1d1a      	adds	r2, r3, #4
 8007e92:	6032      	str	r2, [r6, #0]
 8007e94:	681e      	ldr	r6, [r3, #0]
 8007e96:	6862      	ldr	r2, [r4, #4]
 8007e98:	2100      	movs	r1, #0
 8007e9a:	4630      	mov	r0, r6
 8007e9c:	f7f8 f9b8 	bl	8000210 <memchr>
 8007ea0:	b108      	cbz	r0, 8007ea6 <_printf_i+0x1e6>
 8007ea2:	1b80      	subs	r0, r0, r6
 8007ea4:	6060      	str	r0, [r4, #4]
 8007ea6:	6863      	ldr	r3, [r4, #4]
 8007ea8:	6123      	str	r3, [r4, #16]
 8007eaa:	2300      	movs	r3, #0
 8007eac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007eb0:	e7aa      	b.n	8007e08 <_printf_i+0x148>
 8007eb2:	6923      	ldr	r3, [r4, #16]
 8007eb4:	4632      	mov	r2, r6
 8007eb6:	4649      	mov	r1, r9
 8007eb8:	4640      	mov	r0, r8
 8007eba:	47d0      	blx	sl
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	d0ad      	beq.n	8007e1c <_printf_i+0x15c>
 8007ec0:	6823      	ldr	r3, [r4, #0]
 8007ec2:	079b      	lsls	r3, r3, #30
 8007ec4:	d413      	bmi.n	8007eee <_printf_i+0x22e>
 8007ec6:	68e0      	ldr	r0, [r4, #12]
 8007ec8:	9b03      	ldr	r3, [sp, #12]
 8007eca:	4298      	cmp	r0, r3
 8007ecc:	bfb8      	it	lt
 8007ece:	4618      	movlt	r0, r3
 8007ed0:	e7a6      	b.n	8007e20 <_printf_i+0x160>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	4632      	mov	r2, r6
 8007ed6:	4649      	mov	r1, r9
 8007ed8:	4640      	mov	r0, r8
 8007eda:	47d0      	blx	sl
 8007edc:	3001      	adds	r0, #1
 8007ede:	d09d      	beq.n	8007e1c <_printf_i+0x15c>
 8007ee0:	3501      	adds	r5, #1
 8007ee2:	68e3      	ldr	r3, [r4, #12]
 8007ee4:	9903      	ldr	r1, [sp, #12]
 8007ee6:	1a5b      	subs	r3, r3, r1
 8007ee8:	42ab      	cmp	r3, r5
 8007eea:	dcf2      	bgt.n	8007ed2 <_printf_i+0x212>
 8007eec:	e7eb      	b.n	8007ec6 <_printf_i+0x206>
 8007eee:	2500      	movs	r5, #0
 8007ef0:	f104 0619 	add.w	r6, r4, #25
 8007ef4:	e7f5      	b.n	8007ee2 <_printf_i+0x222>
 8007ef6:	bf00      	nop
 8007ef8:	08008169 	.word	0x08008169
 8007efc:	0800817a 	.word	0x0800817a

08007f00 <memmove>:
 8007f00:	4288      	cmp	r0, r1
 8007f02:	b510      	push	{r4, lr}
 8007f04:	eb01 0402 	add.w	r4, r1, r2
 8007f08:	d902      	bls.n	8007f10 <memmove+0x10>
 8007f0a:	4284      	cmp	r4, r0
 8007f0c:	4623      	mov	r3, r4
 8007f0e:	d807      	bhi.n	8007f20 <memmove+0x20>
 8007f10:	1e43      	subs	r3, r0, #1
 8007f12:	42a1      	cmp	r1, r4
 8007f14:	d008      	beq.n	8007f28 <memmove+0x28>
 8007f16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f1e:	e7f8      	b.n	8007f12 <memmove+0x12>
 8007f20:	4402      	add	r2, r0
 8007f22:	4601      	mov	r1, r0
 8007f24:	428a      	cmp	r2, r1
 8007f26:	d100      	bne.n	8007f2a <memmove+0x2a>
 8007f28:	bd10      	pop	{r4, pc}
 8007f2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f32:	e7f7      	b.n	8007f24 <memmove+0x24>

08007f34 <_sbrk_r>:
 8007f34:	b538      	push	{r3, r4, r5, lr}
 8007f36:	4d06      	ldr	r5, [pc, #24]	@ (8007f50 <_sbrk_r+0x1c>)
 8007f38:	2300      	movs	r3, #0
 8007f3a:	4604      	mov	r4, r0
 8007f3c:	4608      	mov	r0, r1
 8007f3e:	602b      	str	r3, [r5, #0]
 8007f40:	f7fb f810 	bl	8002f64 <_sbrk>
 8007f44:	1c43      	adds	r3, r0, #1
 8007f46:	d102      	bne.n	8007f4e <_sbrk_r+0x1a>
 8007f48:	682b      	ldr	r3, [r5, #0]
 8007f4a:	b103      	cbz	r3, 8007f4e <_sbrk_r+0x1a>
 8007f4c:	6023      	str	r3, [r4, #0]
 8007f4e:	bd38      	pop	{r3, r4, r5, pc}
 8007f50:	200043c4 	.word	0x200043c4

08007f54 <_realloc_r>:
 8007f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f58:	4680      	mov	r8, r0
 8007f5a:	4615      	mov	r5, r2
 8007f5c:	460c      	mov	r4, r1
 8007f5e:	b921      	cbnz	r1, 8007f6a <_realloc_r+0x16>
 8007f60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f64:	4611      	mov	r1, r2
 8007f66:	f7ff bc59 	b.w	800781c <_malloc_r>
 8007f6a:	b92a      	cbnz	r2, 8007f78 <_realloc_r+0x24>
 8007f6c:	f7ff fbea 	bl	8007744 <_free_r>
 8007f70:	2400      	movs	r4, #0
 8007f72:	4620      	mov	r0, r4
 8007f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f78:	f000 f81a 	bl	8007fb0 <_malloc_usable_size_r>
 8007f7c:	4285      	cmp	r5, r0
 8007f7e:	4606      	mov	r6, r0
 8007f80:	d802      	bhi.n	8007f88 <_realloc_r+0x34>
 8007f82:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007f86:	d8f4      	bhi.n	8007f72 <_realloc_r+0x1e>
 8007f88:	4629      	mov	r1, r5
 8007f8a:	4640      	mov	r0, r8
 8007f8c:	f7ff fc46 	bl	800781c <_malloc_r>
 8007f90:	4607      	mov	r7, r0
 8007f92:	2800      	cmp	r0, #0
 8007f94:	d0ec      	beq.n	8007f70 <_realloc_r+0x1c>
 8007f96:	42b5      	cmp	r5, r6
 8007f98:	462a      	mov	r2, r5
 8007f9a:	4621      	mov	r1, r4
 8007f9c:	bf28      	it	cs
 8007f9e:	4632      	movcs	r2, r6
 8007fa0:	f7ff fbc2 	bl	8007728 <memcpy>
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	4640      	mov	r0, r8
 8007fa8:	f7ff fbcc 	bl	8007744 <_free_r>
 8007fac:	463c      	mov	r4, r7
 8007fae:	e7e0      	b.n	8007f72 <_realloc_r+0x1e>

08007fb0 <_malloc_usable_size_r>:
 8007fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fb4:	1f18      	subs	r0, r3, #4
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	bfbc      	itt	lt
 8007fba:	580b      	ldrlt	r3, [r1, r0]
 8007fbc:	18c0      	addlt	r0, r0, r3
 8007fbe:	4770      	bx	lr

08007fc0 <_init>:
 8007fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc2:	bf00      	nop
 8007fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fc6:	bc08      	pop	{r3}
 8007fc8:	469e      	mov	lr, r3
 8007fca:	4770      	bx	lr

08007fcc <_fini>:
 8007fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fce:	bf00      	nop
 8007fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fd2:	bc08      	pop	{r3}
 8007fd4:	469e      	mov	lr, r3
 8007fd6:	4770      	bx	lr
