
vl53lox_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060a0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08006270  08006270  00007270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006394  08006394  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006394  08006394  00007394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800639c  0800639c  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800639c  0800639c  0000739c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080063a0  080063a0  000073a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080063a4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  20000060  08006404  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08006404  00008384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb2f  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001da7  00000000  00000000  00014bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  00016968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000092a  00000000  00000000  00017520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000218ca  00000000  00000000  00017e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f435  00000000  00000000  00039714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cba9e  00000000  00000000  00048b49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001145e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003730  00000000  00000000  0011462c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00117d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006258 	.word	0x08006258

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08006258 	.word	0x08006258

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__gedf2>:
 8000628:	f04f 3cff 	mov.w	ip, #4294967295
 800062c:	e006      	b.n	800063c <__cmpdf2+0x4>
 800062e:	bf00      	nop

08000630 <__ledf2>:
 8000630:	f04f 0c01 	mov.w	ip, #1
 8000634:	e002      	b.n	800063c <__cmpdf2+0x4>
 8000636:	bf00      	nop

08000638 <__cmpdf2>:
 8000638:	f04f 0c01 	mov.w	ip, #1
 800063c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000640:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000644:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000648:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800064c:	bf18      	it	ne
 800064e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000652:	d01b      	beq.n	800068c <__cmpdf2+0x54>
 8000654:	b001      	add	sp, #4
 8000656:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800065a:	bf0c      	ite	eq
 800065c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000660:	ea91 0f03 	teqne	r1, r3
 8000664:	bf02      	ittt	eq
 8000666:	ea90 0f02 	teqeq	r0, r2
 800066a:	2000      	moveq	r0, #0
 800066c:	4770      	bxeq	lr
 800066e:	f110 0f00 	cmn.w	r0, #0
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf58      	it	pl
 8000678:	4299      	cmppl	r1, r3
 800067a:	bf08      	it	eq
 800067c:	4290      	cmpeq	r0, r2
 800067e:	bf2c      	ite	cs
 8000680:	17d8      	asrcs	r0, r3, #31
 8000682:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000686:	f040 0001 	orr.w	r0, r0, #1
 800068a:	4770      	bx	lr
 800068c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000694:	d102      	bne.n	800069c <__cmpdf2+0x64>
 8000696:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800069a:	d107      	bne.n	80006ac <__cmpdf2+0x74>
 800069c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006a4:	d1d6      	bne.n	8000654 <__cmpdf2+0x1c>
 80006a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006aa:	d0d3      	beq.n	8000654 <__cmpdf2+0x1c>
 80006ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <__aeabi_cdrcmple>:
 80006b4:	4684      	mov	ip, r0
 80006b6:	4610      	mov	r0, r2
 80006b8:	4662      	mov	r2, ip
 80006ba:	468c      	mov	ip, r1
 80006bc:	4619      	mov	r1, r3
 80006be:	4663      	mov	r3, ip
 80006c0:	e000      	b.n	80006c4 <__aeabi_cdcmpeq>
 80006c2:	bf00      	nop

080006c4 <__aeabi_cdcmpeq>:
 80006c4:	b501      	push	{r0, lr}
 80006c6:	f7ff ffb7 	bl	8000638 <__cmpdf2>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	bf48      	it	mi
 80006ce:	f110 0f00 	cmnmi.w	r0, #0
 80006d2:	bd01      	pop	{r0, pc}

080006d4 <__aeabi_dcmpeq>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff fff4 	bl	80006c4 <__aeabi_cdcmpeq>
 80006dc:	bf0c      	ite	eq
 80006de:	2001      	moveq	r0, #1
 80006e0:	2000      	movne	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_dcmplt>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffea 	bl	80006c4 <__aeabi_cdcmpeq>
 80006f0:	bf34      	ite	cc
 80006f2:	2001      	movcc	r0, #1
 80006f4:	2000      	movcs	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_dcmple>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffe0 	bl	80006c4 <__aeabi_cdcmpeq>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_dcmpge>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffce 	bl	80006b4 <__aeabi_cdrcmple>
 8000718:	bf94      	ite	ls
 800071a:	2001      	movls	r0, #1
 800071c:	2000      	movhi	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_dcmpgt>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff ffc4 	bl	80006b4 <__aeabi_cdrcmple>
 800072c:	bf34      	ite	cc
 800072e:	2001      	movcc	r0, #1
 8000730:	2000      	movcs	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b96a 	b.w	8000a24 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f806 	bl	8000768 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__udivmoddi4>:
 8000768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800076c:	9d08      	ldr	r5, [sp, #32]
 800076e:	460c      	mov	r4, r1
 8000770:	2b00      	cmp	r3, #0
 8000772:	d14e      	bne.n	8000812 <__udivmoddi4+0xaa>
 8000774:	4694      	mov	ip, r2
 8000776:	458c      	cmp	ip, r1
 8000778:	4686      	mov	lr, r0
 800077a:	fab2 f282 	clz	r2, r2
 800077e:	d962      	bls.n	8000846 <__udivmoddi4+0xde>
 8000780:	b14a      	cbz	r2, 8000796 <__udivmoddi4+0x2e>
 8000782:	f1c2 0320 	rsb	r3, r2, #32
 8000786:	4091      	lsls	r1, r2
 8000788:	fa20 f303 	lsr.w	r3, r0, r3
 800078c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000790:	4319      	orrs	r1, r3
 8000792:	fa00 fe02 	lsl.w	lr, r0, r2
 8000796:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800079a:	fa1f f68c 	uxth.w	r6, ip
 800079e:	fbb1 f4f7 	udiv	r4, r1, r7
 80007a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007a6:	fb07 1114 	mls	r1, r7, r4, r1
 80007aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ae:	fb04 f106 	mul.w	r1, r4, r6
 80007b2:	4299      	cmp	r1, r3
 80007b4:	d90a      	bls.n	80007cc <__udivmoddi4+0x64>
 80007b6:	eb1c 0303 	adds.w	r3, ip, r3
 80007ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80007be:	f080 8112 	bcs.w	80009e6 <__udivmoddi4+0x27e>
 80007c2:	4299      	cmp	r1, r3
 80007c4:	f240 810f 	bls.w	80009e6 <__udivmoddi4+0x27e>
 80007c8:	3c02      	subs	r4, #2
 80007ca:	4463      	add	r3, ip
 80007cc:	1a59      	subs	r1, r3, r1
 80007ce:	fa1f f38e 	uxth.w	r3, lr
 80007d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80007d6:	fb07 1110 	mls	r1, r7, r0, r1
 80007da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007de:	fb00 f606 	mul.w	r6, r0, r6
 80007e2:	429e      	cmp	r6, r3
 80007e4:	d90a      	bls.n	80007fc <__udivmoddi4+0x94>
 80007e6:	eb1c 0303 	adds.w	r3, ip, r3
 80007ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80007ee:	f080 80fc 	bcs.w	80009ea <__udivmoddi4+0x282>
 80007f2:	429e      	cmp	r6, r3
 80007f4:	f240 80f9 	bls.w	80009ea <__udivmoddi4+0x282>
 80007f8:	4463      	add	r3, ip
 80007fa:	3802      	subs	r0, #2
 80007fc:	1b9b      	subs	r3, r3, r6
 80007fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000802:	2100      	movs	r1, #0
 8000804:	b11d      	cbz	r5, 800080e <__udivmoddi4+0xa6>
 8000806:	40d3      	lsrs	r3, r2
 8000808:	2200      	movs	r2, #0
 800080a:	e9c5 3200 	strd	r3, r2, [r5]
 800080e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000812:	428b      	cmp	r3, r1
 8000814:	d905      	bls.n	8000822 <__udivmoddi4+0xba>
 8000816:	b10d      	cbz	r5, 800081c <__udivmoddi4+0xb4>
 8000818:	e9c5 0100 	strd	r0, r1, [r5]
 800081c:	2100      	movs	r1, #0
 800081e:	4608      	mov	r0, r1
 8000820:	e7f5      	b.n	800080e <__udivmoddi4+0xa6>
 8000822:	fab3 f183 	clz	r1, r3
 8000826:	2900      	cmp	r1, #0
 8000828:	d146      	bne.n	80008b8 <__udivmoddi4+0x150>
 800082a:	42a3      	cmp	r3, r4
 800082c:	d302      	bcc.n	8000834 <__udivmoddi4+0xcc>
 800082e:	4290      	cmp	r0, r2
 8000830:	f0c0 80f0 	bcc.w	8000a14 <__udivmoddi4+0x2ac>
 8000834:	1a86      	subs	r6, r0, r2
 8000836:	eb64 0303 	sbc.w	r3, r4, r3
 800083a:	2001      	movs	r0, #1
 800083c:	2d00      	cmp	r5, #0
 800083e:	d0e6      	beq.n	800080e <__udivmoddi4+0xa6>
 8000840:	e9c5 6300 	strd	r6, r3, [r5]
 8000844:	e7e3      	b.n	800080e <__udivmoddi4+0xa6>
 8000846:	2a00      	cmp	r2, #0
 8000848:	f040 8090 	bne.w	800096c <__udivmoddi4+0x204>
 800084c:	eba1 040c 	sub.w	r4, r1, ip
 8000850:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000854:	fa1f f78c 	uxth.w	r7, ip
 8000858:	2101      	movs	r1, #1
 800085a:	fbb4 f6f8 	udiv	r6, r4, r8
 800085e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000862:	fb08 4416 	mls	r4, r8, r6, r4
 8000866:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800086a:	fb07 f006 	mul.w	r0, r7, r6
 800086e:	4298      	cmp	r0, r3
 8000870:	d908      	bls.n	8000884 <__udivmoddi4+0x11c>
 8000872:	eb1c 0303 	adds.w	r3, ip, r3
 8000876:	f106 34ff 	add.w	r4, r6, #4294967295
 800087a:	d202      	bcs.n	8000882 <__udivmoddi4+0x11a>
 800087c:	4298      	cmp	r0, r3
 800087e:	f200 80cd 	bhi.w	8000a1c <__udivmoddi4+0x2b4>
 8000882:	4626      	mov	r6, r4
 8000884:	1a1c      	subs	r4, r3, r0
 8000886:	fa1f f38e 	uxth.w	r3, lr
 800088a:	fbb4 f0f8 	udiv	r0, r4, r8
 800088e:	fb08 4410 	mls	r4, r8, r0, r4
 8000892:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000896:	fb00 f707 	mul.w	r7, r0, r7
 800089a:	429f      	cmp	r7, r3
 800089c:	d908      	bls.n	80008b0 <__udivmoddi4+0x148>
 800089e:	eb1c 0303 	adds.w	r3, ip, r3
 80008a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008a6:	d202      	bcs.n	80008ae <__udivmoddi4+0x146>
 80008a8:	429f      	cmp	r7, r3
 80008aa:	f200 80b0 	bhi.w	8000a0e <__udivmoddi4+0x2a6>
 80008ae:	4620      	mov	r0, r4
 80008b0:	1bdb      	subs	r3, r3, r7
 80008b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008b6:	e7a5      	b.n	8000804 <__udivmoddi4+0x9c>
 80008b8:	f1c1 0620 	rsb	r6, r1, #32
 80008bc:	408b      	lsls	r3, r1
 80008be:	fa22 f706 	lsr.w	r7, r2, r6
 80008c2:	431f      	orrs	r7, r3
 80008c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80008c8:	fa04 f301 	lsl.w	r3, r4, r1
 80008cc:	ea43 030c 	orr.w	r3, r3, ip
 80008d0:	40f4      	lsrs	r4, r6
 80008d2:	fa00 f801 	lsl.w	r8, r0, r1
 80008d6:	0c38      	lsrs	r0, r7, #16
 80008d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80008dc:	fbb4 fef0 	udiv	lr, r4, r0
 80008e0:	fa1f fc87 	uxth.w	ip, r7
 80008e4:	fb00 441e 	mls	r4, r0, lr, r4
 80008e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008ec:	fb0e f90c 	mul.w	r9, lr, ip
 80008f0:	45a1      	cmp	r9, r4
 80008f2:	fa02 f201 	lsl.w	r2, r2, r1
 80008f6:	d90a      	bls.n	800090e <__udivmoddi4+0x1a6>
 80008f8:	193c      	adds	r4, r7, r4
 80008fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80008fe:	f080 8084 	bcs.w	8000a0a <__udivmoddi4+0x2a2>
 8000902:	45a1      	cmp	r9, r4
 8000904:	f240 8081 	bls.w	8000a0a <__udivmoddi4+0x2a2>
 8000908:	f1ae 0e02 	sub.w	lr, lr, #2
 800090c:	443c      	add	r4, r7
 800090e:	eba4 0409 	sub.w	r4, r4, r9
 8000912:	fa1f f983 	uxth.w	r9, r3
 8000916:	fbb4 f3f0 	udiv	r3, r4, r0
 800091a:	fb00 4413 	mls	r4, r0, r3, r4
 800091e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000922:	fb03 fc0c 	mul.w	ip, r3, ip
 8000926:	45a4      	cmp	ip, r4
 8000928:	d907      	bls.n	800093a <__udivmoddi4+0x1d2>
 800092a:	193c      	adds	r4, r7, r4
 800092c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000930:	d267      	bcs.n	8000a02 <__udivmoddi4+0x29a>
 8000932:	45a4      	cmp	ip, r4
 8000934:	d965      	bls.n	8000a02 <__udivmoddi4+0x29a>
 8000936:	3b02      	subs	r3, #2
 8000938:	443c      	add	r4, r7
 800093a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800093e:	fba0 9302 	umull	r9, r3, r0, r2
 8000942:	eba4 040c 	sub.w	r4, r4, ip
 8000946:	429c      	cmp	r4, r3
 8000948:	46ce      	mov	lr, r9
 800094a:	469c      	mov	ip, r3
 800094c:	d351      	bcc.n	80009f2 <__udivmoddi4+0x28a>
 800094e:	d04e      	beq.n	80009ee <__udivmoddi4+0x286>
 8000950:	b155      	cbz	r5, 8000968 <__udivmoddi4+0x200>
 8000952:	ebb8 030e 	subs.w	r3, r8, lr
 8000956:	eb64 040c 	sbc.w	r4, r4, ip
 800095a:	fa04 f606 	lsl.w	r6, r4, r6
 800095e:	40cb      	lsrs	r3, r1
 8000960:	431e      	orrs	r6, r3
 8000962:	40cc      	lsrs	r4, r1
 8000964:	e9c5 6400 	strd	r6, r4, [r5]
 8000968:	2100      	movs	r1, #0
 800096a:	e750      	b.n	800080e <__udivmoddi4+0xa6>
 800096c:	f1c2 0320 	rsb	r3, r2, #32
 8000970:	fa20 f103 	lsr.w	r1, r0, r3
 8000974:	fa0c fc02 	lsl.w	ip, ip, r2
 8000978:	fa24 f303 	lsr.w	r3, r4, r3
 800097c:	4094      	lsls	r4, r2
 800097e:	430c      	orrs	r4, r1
 8000980:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000984:	fa00 fe02 	lsl.w	lr, r0, r2
 8000988:	fa1f f78c 	uxth.w	r7, ip
 800098c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000990:	fb08 3110 	mls	r1, r8, r0, r3
 8000994:	0c23      	lsrs	r3, r4, #16
 8000996:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800099a:	fb00 f107 	mul.w	r1, r0, r7
 800099e:	4299      	cmp	r1, r3
 80009a0:	d908      	bls.n	80009b4 <__udivmoddi4+0x24c>
 80009a2:	eb1c 0303 	adds.w	r3, ip, r3
 80009a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009aa:	d22c      	bcs.n	8000a06 <__udivmoddi4+0x29e>
 80009ac:	4299      	cmp	r1, r3
 80009ae:	d92a      	bls.n	8000a06 <__udivmoddi4+0x29e>
 80009b0:	3802      	subs	r0, #2
 80009b2:	4463      	add	r3, ip
 80009b4:	1a5b      	subs	r3, r3, r1
 80009b6:	b2a4      	uxth	r4, r4
 80009b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009bc:	fb08 3311 	mls	r3, r8, r1, r3
 80009c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009c4:	fb01 f307 	mul.w	r3, r1, r7
 80009c8:	42a3      	cmp	r3, r4
 80009ca:	d908      	bls.n	80009de <__udivmoddi4+0x276>
 80009cc:	eb1c 0404 	adds.w	r4, ip, r4
 80009d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80009d4:	d213      	bcs.n	80009fe <__udivmoddi4+0x296>
 80009d6:	42a3      	cmp	r3, r4
 80009d8:	d911      	bls.n	80009fe <__udivmoddi4+0x296>
 80009da:	3902      	subs	r1, #2
 80009dc:	4464      	add	r4, ip
 80009de:	1ae4      	subs	r4, r4, r3
 80009e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009e4:	e739      	b.n	800085a <__udivmoddi4+0xf2>
 80009e6:	4604      	mov	r4, r0
 80009e8:	e6f0      	b.n	80007cc <__udivmoddi4+0x64>
 80009ea:	4608      	mov	r0, r1
 80009ec:	e706      	b.n	80007fc <__udivmoddi4+0x94>
 80009ee:	45c8      	cmp	r8, r9
 80009f0:	d2ae      	bcs.n	8000950 <__udivmoddi4+0x1e8>
 80009f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80009f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80009fa:	3801      	subs	r0, #1
 80009fc:	e7a8      	b.n	8000950 <__udivmoddi4+0x1e8>
 80009fe:	4631      	mov	r1, r6
 8000a00:	e7ed      	b.n	80009de <__udivmoddi4+0x276>
 8000a02:	4603      	mov	r3, r0
 8000a04:	e799      	b.n	800093a <__udivmoddi4+0x1d2>
 8000a06:	4630      	mov	r0, r6
 8000a08:	e7d4      	b.n	80009b4 <__udivmoddi4+0x24c>
 8000a0a:	46d6      	mov	lr, sl
 8000a0c:	e77f      	b.n	800090e <__udivmoddi4+0x1a6>
 8000a0e:	4463      	add	r3, ip
 8000a10:	3802      	subs	r0, #2
 8000a12:	e74d      	b.n	80008b0 <__udivmoddi4+0x148>
 8000a14:	4606      	mov	r6, r0
 8000a16:	4623      	mov	r3, r4
 8000a18:	4608      	mov	r0, r1
 8000a1a:	e70f      	b.n	800083c <__udivmoddi4+0xd4>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	4463      	add	r3, ip
 8000a20:	e730      	b.n	8000884 <__udivmoddi4+0x11c>
 8000a22:	bf00      	nop

08000a24 <__aeabi_idiv0>:
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <writeReg>:

//---------------------------------------------------------
// I2C communication Functions
//---------------------------------------------------------
// Write an 8-bit register
void writeReg(uint8_t reg, uint8_t value) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af04      	add	r7, sp, #16
 8000a2e:	4603      	mov	r3, r0
 8000a30:	460a      	mov	r2, r1
 8000a32:	71fb      	strb	r3, [r7, #7]
 8000a34:	4613      	mov	r3, r2
 8000a36:	71bb      	strb	r3, [r7, #6]

  msgBuffer[0] = value; // Assign the value to the buffer.
 8000a38:	4a0c      	ldr	r2, [pc, #48]	@ (8000a6c <writeReg+0x44>)
 8000a3a:	79bb      	ldrb	r3, [r7, #6]
 8000a3c:	7013      	strb	r3, [r2, #0]
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 1, I2C_TIMEOUT);
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a70 <writeReg+0x48>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	4619      	mov	r1, r3
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	2364      	movs	r3, #100	@ 0x64
 8000a4a:	9302      	str	r3, [sp, #8]
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	9301      	str	r3, [sp, #4]
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <writeReg+0x44>)
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	2301      	movs	r3, #1
 8000a56:	4807      	ldr	r0, [pc, #28]	@ (8000a74 <writeReg+0x4c>)
 8000a58:	f002 fe3a 	bl	80036d0 <HAL_I2C_Mem_Write>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4b05      	ldr	r3, [pc, #20]	@ (8000a78 <writeReg+0x50>)
 8000a62:	701a      	strb	r2, [r3, #0]
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200000dc 	.word	0x200000dc
 8000a70:	20000000 	.word	0x20000000
 8000a74:	20000088 	.word	0x20000088
 8000a78:	200000e0 	.word	0x200000e0

08000a7c <writeReg16Bit>:

// Write a 16-bit register
void writeReg16Bit(uint8_t reg, uint16_t value){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af04      	add	r7, sp, #16
 8000a82:	4603      	mov	r3, r0
 8000a84:	460a      	mov	r2, r1
 8000a86:	71fb      	strb	r3, [r7, #7]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	80bb      	strh	r3, [r7, #4]

  memcpy(msgBuffer, &value, 2); // Assign the value to the buffer.
 8000a8c:	88ba      	ldrh	r2, [r7, #4]
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <writeReg16Bit+0x44>)
 8000a90:	801a      	strh	r2, [r3, #0]
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 2, I2C_TIMEOUT);
 8000a92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <writeReg16Bit+0x48>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	4619      	mov	r1, r3
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	2364      	movs	r3, #100	@ 0x64
 8000a9e:	9302      	str	r3, [sp, #8]
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	9301      	str	r3, [sp, #4]
 8000aa4:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <writeReg16Bit+0x44>)
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	4807      	ldr	r0, [pc, #28]	@ (8000ac8 <writeReg16Bit+0x4c>)
 8000aac:	f002 fe10 	bl	80036d0 <HAL_I2C_Mem_Write>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4b05      	ldr	r3, [pc, #20]	@ (8000acc <writeReg16Bit+0x50>)
 8000ab6:	701a      	strb	r2, [r3, #0]
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200000dc 	.word	0x200000dc
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	20000088 	.word	0x20000088
 8000acc:	200000e0 	.word	0x200000e0

08000ad0 <readReg>:
  memcpy(msgBuffer, &value, 4); // Assign the value to the buffer.
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 4, I2C_TIMEOUT);
}

// Read an 8-bit register
uint8_t readReg(uint8_t reg) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af04      	add	r7, sp, #16
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
  uint8_t value;

  i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, msgBuffer, 1, I2C_TIMEOUT);
 8000ada:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <readReg+0x48>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	2364      	movs	r3, #100	@ 0x64
 8000aec:	9302      	str	r3, [sp, #8]
 8000aee:	2301      	movs	r3, #1
 8000af0:	9301      	str	r3, [sp, #4]
 8000af2:	4b0a      	ldr	r3, [pc, #40]	@ (8000b1c <readReg+0x4c>)
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	2301      	movs	r3, #1
 8000af8:	4809      	ldr	r0, [pc, #36]	@ (8000b20 <readReg+0x50>)
 8000afa:	f002 fee3 	bl	80038c4 <HAL_I2C_Mem_Read>
 8000afe:	4603      	mov	r3, r0
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b08      	ldr	r3, [pc, #32]	@ (8000b24 <readReg+0x54>)
 8000b04:	701a      	strb	r2, [r3, #0]
  value = msgBuffer[0];
 8000b06:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <readReg+0x4c>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	73fb      	strb	r3, [r7, #15]

  return value;
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	200000dc 	.word	0x200000dc
 8000b20:	20000088 	.word	0x20000088
 8000b24:	200000e0 	.word	0x200000e0

08000b28 <readReg16Bit>:

// Read a 16-bit register
uint16_t readReg16Bit(uint8_t reg) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af04      	add	r7, sp, #16
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
  uint16_t value;

  i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, msgBuffer, 2, I2C_TIMEOUT);
 8000b32:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <readReg16Bit+0x48>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	2364      	movs	r3, #100	@ 0x64
 8000b44:	9302      	str	r3, [sp, #8]
 8000b46:	2302      	movs	r3, #2
 8000b48:	9301      	str	r3, [sp, #4]
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <readReg16Bit+0x4c>)
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	2301      	movs	r3, #1
 8000b50:	4809      	ldr	r0, [pc, #36]	@ (8000b78 <readReg16Bit+0x50>)
 8000b52:	f002 feb7 	bl	80038c4 <HAL_I2C_Mem_Read>
 8000b56:	4603      	mov	r3, r0
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <readReg16Bit+0x54>)
 8000b5c:	701a      	strb	r2, [r3, #0]
  memcpy(&value, msgBuffer, 2);
 8000b5e:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <readReg16Bit+0x4c>)
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	81fb      	strh	r3, [r7, #14]

  return value;
 8000b64:	89fb      	ldrh	r3, [r7, #14]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000000 	.word	0x20000000
 8000b74:	200000dc 	.word	0x200000dc
 8000b78:	20000088 	.word	0x20000088
 8000b7c:	200000e0 	.word	0x200000e0

08000b80 <writeMulti>:
  return value;
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void writeMulti(uint8_t reg, uint8_t const *src, uint8_t count){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af04      	add	r7, sp, #16
 8000b86:	4603      	mov	r3, r0
 8000b88:	6039      	str	r1, [r7, #0]
 8000b8a:	71fb      	strb	r3, [r7, #7]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	71bb      	strb	r3, [r7, #6]

  memcpy(msgBuffer, src, 4);
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b0d      	ldr	r3, [pc, #52]	@ (8000bcc <writeMulti+0x4c>)
 8000b98:	601a      	str	r2, [r3, #0]
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, count, I2C_TIMEOUT);
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd0 <writeMulti+0x50>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	79bb      	ldrb	r3, [r7, #6]
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	2164      	movs	r1, #100	@ 0x64
 8000baa:	9102      	str	r1, [sp, #8]
 8000bac:	9301      	str	r3, [sp, #4]
 8000bae:	4b07      	ldr	r3, [pc, #28]	@ (8000bcc <writeMulti+0x4c>)
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	4601      	mov	r1, r0
 8000bb6:	4807      	ldr	r0, [pc, #28]	@ (8000bd4 <writeMulti+0x54>)
 8000bb8:	f002 fd8a 	bl	80036d0 <HAL_I2C_Mem_Write>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	4b05      	ldr	r3, [pc, #20]	@ (8000bd8 <writeMulti+0x58>)
 8000bc2:	701a      	strb	r2, [r3, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	200000dc 	.word	0x200000dc
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	20000088 	.word	0x20000088
 8000bd8:	200000e0 	.word	0x200000e0

08000bdc <readMulti>:

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void readMulti(uint8_t reg, uint8_t * dst, uint8_t count) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af04      	add	r7, sp, #16
 8000be2:	4603      	mov	r3, r0
 8000be4:	6039      	str	r1, [r7, #0]
 8000be6:	71fb      	strb	r3, [r7, #7]
 8000be8:	4613      	mov	r3, r2
 8000bea:	71bb      	strb	r3, [r7, #6]

	i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, dst, count, I2C_TIMEOUT);
 8000bec:	4b0d      	ldr	r3, [pc, #52]	@ (8000c24 <readMulti+0x48>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	79bb      	ldrb	r3, [r7, #6]
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	2164      	movs	r1, #100	@ 0x64
 8000c02:	9102      	str	r1, [sp, #8]
 8000c04:	9301      	str	r3, [sp, #4]
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	4601      	mov	r1, r0
 8000c0e:	4806      	ldr	r0, [pc, #24]	@ (8000c28 <readMulti+0x4c>)
 8000c10:	f002 fe58 	bl	80038c4 <HAL_I2C_Mem_Read>
 8000c14:	4603      	mov	r3, r0
 8000c16:	461a      	mov	r2, r3
 8000c18:	4b04      	ldr	r3, [pc, #16]	@ (8000c2c <readMulti+0x50>)
 8000c1a:	701a      	strb	r2, [r3, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000000 	.word	0x20000000
 8000c28:	20000088 	.word	0x20000088
 8000c2c:	200000e0 	.word	0x200000e0

08000c30 <writeReg_x>:

void writeReg_x(uint8_t reg, uint8_t value, statInfo_t_VL53L0X *sensorInfo) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af04      	add	r7, sp, #16
 8000c36:	4603      	mov	r3, r0
 8000c38:	603a      	str	r2, [r7, #0]
 8000c3a:	71fb      	strb	r3, [r7, #7]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	71bb      	strb	r3, [r7, #6]

  msgBuffer[0] = value; // Assign the value to the buffer.
 8000c40:	4a0c      	ldr	r2, [pc, #48]	@ (8000c74 <writeReg_x+0x44>)
 8000c42:	79bb      	ldrb	r3, [r7, #6]
 8000c44:	7013      	strb	r3, [r2, #0]
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, sensorInfo->address | I2C_WRITE, reg, 1, msgBuffer, 1, I2C_TIMEOUT);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	7a5b      	ldrb	r3, [r3, #9]
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	2364      	movs	r3, #100	@ 0x64
 8000c52:	9302      	str	r3, [sp, #8]
 8000c54:	2301      	movs	r3, #1
 8000c56:	9301      	str	r3, [sp, #4]
 8000c58:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <writeReg_x+0x44>)
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	4806      	ldr	r0, [pc, #24]	@ (8000c78 <writeReg_x+0x48>)
 8000c60:	f002 fd36 	bl	80036d0 <HAL_I2C_Mem_Write>
 8000c64:	4603      	mov	r3, r0
 8000c66:	461a      	mov	r2, r3
 8000c68:	4b04      	ldr	r3, [pc, #16]	@ (8000c7c <writeReg_x+0x4c>)
 8000c6a:	701a      	strb	r2, [r3, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	200000dc 	.word	0x200000dc
 8000c78:	20000088 	.word	0x20000088
 8000c7c:	200000e0 	.word	0x200000e0

08000c80 <writeReg16Bit_x>:



void writeReg16Bit_x(uint8_t reg, uint16_t value, statInfo_t_VL53L0X *sensorInfo) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af04      	add	r7, sp, #16
 8000c86:	4603      	mov	r3, r0
 8000c88:	603a      	str	r2, [r7, #0]
 8000c8a:	71fb      	strb	r3, [r7, #7]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	80bb      	strh	r3, [r7, #4]
    memcpy(msgBuffer, &value, 2);  // Copy the 16-bit value to the buffer
 8000c90:	88ba      	ldrh	r2, [r7, #4]
 8000c92:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <writeReg16Bit_x+0x44>)
 8000c94:	801a      	strh	r2, [r3, #0]
    i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, sensorInfo->address | I2C_WRITE, reg, 1, msgBuffer, 2, I2C_TIMEOUT);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	7a5b      	ldrb	r3, [r3, #9]
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	2364      	movs	r3, #100	@ 0x64
 8000ca2:	9302      	str	r3, [sp, #8]
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	9301      	str	r3, [sp, #4]
 8000ca8:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <writeReg16Bit_x+0x44>)
 8000caa:	9300      	str	r3, [sp, #0]
 8000cac:	2301      	movs	r3, #1
 8000cae:	4806      	ldr	r0, [pc, #24]	@ (8000cc8 <writeReg16Bit_x+0x48>)
 8000cb0:	f002 fd0e 	bl	80036d0 <HAL_I2C_Mem_Write>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <writeReg16Bit_x+0x4c>)
 8000cba:	701a      	strb	r2, [r3, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200000dc 	.word	0x200000dc
 8000cc8:	20000088 	.word	0x20000088
 8000ccc:	200000e0 	.word	0x200000e0

08000cd0 <readReg_x>:




// Read an 8-bit register
uint8_t readReg_x(uint8_t reg, statInfo_t_VL53L0X *sensorInfo) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af04      	add	r7, sp, #16
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  uint8_t value;

  i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, sensorInfo->address | I2C_READ, reg, 1, msgBuffer, 1, I2C_TIMEOUT);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	7a5b      	ldrb	r3, [r3, #9]
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	2364      	movs	r3, #100	@ 0x64
 8000cee:	9302      	str	r3, [sp, #8]
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	9301      	str	r3, [sp, #4]
 8000cf4:	4b08      	ldr	r3, [pc, #32]	@ (8000d18 <readReg_x+0x48>)
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	4808      	ldr	r0, [pc, #32]	@ (8000d1c <readReg_x+0x4c>)
 8000cfc:	f002 fde2 	bl	80038c4 <HAL_I2C_Mem_Read>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <readReg_x+0x50>)
 8000d06:	701a      	strb	r2, [r3, #0]
  value = msgBuffer[0];
 8000d08:	4b03      	ldr	r3, [pc, #12]	@ (8000d18 <readReg_x+0x48>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	73fb      	strb	r3, [r7, #15]

  return value;
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	200000dc 	.word	0x200000dc
 8000d1c:	20000088 	.word	0x20000088
 8000d20:	200000e0 	.word	0x200000e0

08000d24 <readReg16Bit_x>:



uint16_t readReg16Bit_x(uint8_t reg, statInfo_t_VL53L0X *sensorInfo) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af04      	add	r7, sp, #16
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
  uint16_t value;

  i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, sensorInfo->address | I2C_READ, reg, 1, msgBuffer, 2, I2C_TIMEOUT);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	7a5b      	ldrb	r3, [r3, #9]
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	2364      	movs	r3, #100	@ 0x64
 8000d42:	9302      	str	r3, [sp, #8]
 8000d44:	2302      	movs	r3, #2
 8000d46:	9301      	str	r3, [sp, #4]
 8000d48:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <readReg16Bit_x+0x48>)
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	4808      	ldr	r0, [pc, #32]	@ (8000d70 <readReg16Bit_x+0x4c>)
 8000d50:	f002 fdb8 	bl	80038c4 <HAL_I2C_Mem_Read>
 8000d54:	4603      	mov	r3, r0
 8000d56:	461a      	mov	r2, r3
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <readReg16Bit_x+0x50>)
 8000d5a:	701a      	strb	r2, [r3, #0]
  memcpy(&value, msgBuffer, 2);
 8000d5c:	4b03      	ldr	r3, [pc, #12]	@ (8000d6c <readReg16Bit_x+0x48>)
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	81fb      	strh	r3, [r7, #14]

  return value;
 8000d62:	89fb      	ldrh	r3, [r7, #14]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	200000dc 	.word	0x200000dc
 8000d70:	20000088 	.word	0x20000088
 8000d74:	200000e0 	.word	0x200000e0

08000d78 <readMulti_x>:
  memcpy(msgBuffer, src, 4);
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, sensorInfo->address| I2C_WRITE, reg, 1, msgBuffer, count, I2C_TIMEOUT);
}


void readMulti_x(uint8_t reg, uint8_t * dst, uint8_t count, statInfo_t_VL53L0X *sensorInfo) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af04      	add	r7, sp, #16
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	4603      	mov	r3, r0
 8000d84:	73fb      	strb	r3, [r7, #15]
 8000d86:	4613      	mov	r3, r2
 8000d88:	73bb      	strb	r3, [r7, #14]

	i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, sensorInfo->address | I2C_READ, reg, 1, dst, count, I2C_TIMEOUT);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	7a5b      	ldrb	r3, [r3, #9]
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	4618      	mov	r0, r3
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	7bbb      	ldrb	r3, [r7, #14]
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	2164      	movs	r1, #100	@ 0x64
 8000da0:	9102      	str	r1, [sp, #8]
 8000da2:	9301      	str	r3, [sp, #4]
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	2301      	movs	r3, #1
 8000daa:	4601      	mov	r1, r0
 8000dac:	4805      	ldr	r0, [pc, #20]	@ (8000dc4 <readMulti_x+0x4c>)
 8000dae:	f002 fd89 	bl	80038c4 <HAL_I2C_Mem_Read>
 8000db2:	4603      	mov	r3, r0
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b04      	ldr	r3, [pc, #16]	@ (8000dc8 <readMulti_x+0x50>)
 8000db8:	701a      	strb	r2, [r3, #0]
}
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000088 	.word	0x20000088
 8000dc8:	200000e0 	.word	0x200000e0

08000dcc <setAddress_VL53L0X>:


// Public Methods //////////////////////////////////////////////////////////////

void setAddress_VL53L0X(uint8_t new_addr) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  writeReg( I2C_SLAVE_DEVICE_ADDRESS, (new_addr>>1) & 0x7F );
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	085b      	lsrs	r3, r3, #1
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	4619      	mov	r1, r3
 8000dde:	208a      	movs	r0, #138	@ 0x8a
 8000de0:	f7ff fe22 	bl	8000a28 <writeReg>
  //g_i2cAddr = new_addr;
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <initVL53L0X>:
// (VL53L0X_PerformRefSpadManagement()), since the API user manual says that it
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool initVL53L0X(bool io_2v8, I2C_HandleTypeDef *handler){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
  // VL53L0X_DataInit() begin

  // Handler
  memcpy(&VL53L0X_I2C_Handler, handler, sizeof(*handler));
 8000df8:	2254      	movs	r2, #84	@ 0x54
 8000dfa:	6839      	ldr	r1, [r7, #0]
 8000dfc:	4854      	ldr	r0, [pc, #336]	@ (8000f50 <initVL53L0X+0x164>)
 8000dfe:	f004 fddf 	bl	80059c0 <memcpy>

  // Reset the message buffer.
  msgBuffer[0] = 0;
 8000e02:	4b54      	ldr	r3, [pc, #336]	@ (8000f54 <initVL53L0X+0x168>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]
  msgBuffer[1] = 0;
 8000e08:	4b52      	ldr	r3, [pc, #328]	@ (8000f54 <initVL53L0X+0x168>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	705a      	strb	r2, [r3, #1]
  msgBuffer[2] = 0;
 8000e0e:	4b51      	ldr	r3, [pc, #324]	@ (8000f54 <initVL53L0X+0x168>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	709a      	strb	r2, [r3, #2]
  msgBuffer[3] = 0;
 8000e14:	4b4f      	ldr	r3, [pc, #316]	@ (8000f54 <initVL53L0X+0x168>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	70da      	strb	r2, [r3, #3]

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d00a      	beq.n	8000e36 <initVL53L0X+0x4a>
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
      readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 8000e20:	2089      	movs	r0, #137	@ 0x89
 8000e22:	f7ff fe55 	bl	8000ad0 <readReg>
 8000e26:	4603      	mov	r3, r0
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	4619      	mov	r1, r3
 8000e30:	2089      	movs	r0, #137	@ 0x89
 8000e32:	f7ff fdf9 	bl	8000a28 <writeReg>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 8000e36:	2100      	movs	r1, #0
 8000e38:	2088      	movs	r0, #136	@ 0x88
 8000e3a:	f7ff fdf5 	bl	8000a28 <writeReg>

  writeReg(0x80, 0x01);
 8000e3e:	2101      	movs	r1, #1
 8000e40:	2080      	movs	r0, #128	@ 0x80
 8000e42:	f7ff fdf1 	bl	8000a28 <writeReg>
  writeReg(0xFF, 0x01);
 8000e46:	2101      	movs	r1, #1
 8000e48:	20ff      	movs	r0, #255	@ 0xff
 8000e4a:	f7ff fded 	bl	8000a28 <writeReg>
  writeReg(0x00, 0x00);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2000      	movs	r0, #0
 8000e52:	f7ff fde9 	bl	8000a28 <writeReg>
  g_stopVariable = readReg(0x91);
 8000e56:	2091      	movs	r0, #145	@ 0x91
 8000e58:	f7ff fe3a 	bl	8000ad0 <readReg>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b3d      	ldr	r3, [pc, #244]	@ (8000f58 <initVL53L0X+0x16c>)
 8000e62:	701a      	strb	r2, [r3, #0]
  writeReg(0x00, 0x01);
 8000e64:	2101      	movs	r1, #1
 8000e66:	2000      	movs	r0, #0
 8000e68:	f7ff fdde 	bl	8000a28 <writeReg>
  writeReg(0xFF, 0x00);
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	20ff      	movs	r0, #255	@ 0xff
 8000e70:	f7ff fdda 	bl	8000a28 <writeReg>
  writeReg(0x80, 0x00);
 8000e74:	2100      	movs	r1, #0
 8000e76:	2080      	movs	r0, #128	@ 0x80
 8000e78:	f7ff fdd6 	bl	8000a28 <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 8000e7c:	2060      	movs	r0, #96	@ 0x60
 8000e7e:	f7ff fe27 	bl	8000ad0 <readReg>
 8000e82:	4603      	mov	r3, r0
 8000e84:	f043 0312 	orr.w	r3, r3, #18
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	2060      	movs	r0, #96	@ 0x60
 8000e8e:	f7ff fdcb 	bl	8000a28 <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 8000e92:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 8000e96:	f000 fa07 	bl	80012a8 <setSignalRateLimit>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8000e9a:	21ff      	movs	r1, #255	@ 0xff
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	f7ff fdc3 	bl	8000a28 <writeReg>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 8000ea2:	f107 0213 	add.w	r2, r7, #19
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4611      	mov	r1, r2
 8000eac:	4618      	mov	r0, r3
 8000eae:	f000 ffbf 	bl	8001e30 <getSpadInfo>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d101      	bne.n	8000ebc <initVL53L0X+0xd0>
 8000eb8:	2300      	movs	r3, #0
 8000eba:	e1ee      	b.n	800129a <initVL53L0X+0x4ae>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	2206      	movs	r2, #6
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	20b0      	movs	r0, #176	@ 0xb0
 8000ec6:	f7ff fe89 	bl	8000bdc <readMulti>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 8000eca:	2101      	movs	r1, #1
 8000ecc:	20ff      	movs	r0, #255	@ 0xff
 8000ece:	f7ff fdab 	bl	8000a28 <writeReg>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	204f      	movs	r0, #79	@ 0x4f
 8000ed6:	f7ff fda7 	bl	8000a28 <writeReg>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8000eda:	212c      	movs	r1, #44	@ 0x2c
 8000edc:	204e      	movs	r0, #78	@ 0x4e
 8000ede:	f7ff fda3 	bl	8000a28 <writeReg>
  writeReg(0xFF, 0x00);
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	20ff      	movs	r0, #255	@ 0xff
 8000ee6:	f7ff fd9f 	bl	8000a28 <writeReg>
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8000eea:	21b4      	movs	r1, #180	@ 0xb4
 8000eec:	20b6      	movs	r0, #182	@ 0xb6
 8000eee:	f7ff fd9b 	bl	8000a28 <writeReg>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 8000ef2:	7cfb      	ldrb	r3, [r7, #19]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <initVL53L0X+0x110>
 8000ef8:	230c      	movs	r3, #12
 8000efa:	e000      	b.n	8000efe <initVL53L0X+0x112>
 8000efc:	2300      	movs	r3, #0
 8000efe:	757b      	strb	r3, [r7, #21]
  uint8_t spads_enabled = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < 48; i++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	75bb      	strb	r3, [r7, #22]
 8000f08:	e03f      	b.n	8000f8a <initVL53L0X+0x19e>
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 8000f0a:	7dba      	ldrb	r2, [r7, #22]
 8000f0c:	7d7b      	ldrb	r3, [r7, #21]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d303      	bcc.n	8000f1a <initVL53L0X+0x12e>
 8000f12:	7d3b      	ldrb	r3, [r7, #20]
 8000f14:	7dfa      	ldrb	r2, [r7, #23]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d120      	bne.n	8000f5c <initVL53L0X+0x170>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 8000f1a:	7dbb      	ldrb	r3, [r7, #22]
 8000f1c:	08db      	lsrs	r3, r3, #3
 8000f1e:	b2d8      	uxtb	r0, r3
 8000f20:	4603      	mov	r3, r0
 8000f22:	3318      	adds	r3, #24
 8000f24:	443b      	add	r3, r7
 8000f26:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000f2a:	b25a      	sxtb	r2, r3
 8000f2c:	7dbb      	ldrb	r3, [r7, #22]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	2101      	movs	r1, #1
 8000f34:	fa01 f303 	lsl.w	r3, r1, r3
 8000f38:	b25b      	sxtb	r3, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	4013      	ands	r3, r2
 8000f40:	b25a      	sxtb	r2, r3
 8000f42:	4603      	mov	r3, r0
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	3318      	adds	r3, #24
 8000f48:	443b      	add	r3, r7
 8000f4a:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8000f4e:	e019      	b.n	8000f84 <initVL53L0X+0x198>
 8000f50:	20000088 	.word	0x20000088
 8000f54:	200000dc 	.word	0x200000dc
 8000f58:	20000082 	.word	0x20000082
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 8000f5c:	7dbb      	ldrb	r3, [r7, #22]
 8000f5e:	08db      	lsrs	r3, r3, #3
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	3318      	adds	r3, #24
 8000f64:	443b      	add	r3, r7
 8000f66:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	7dbb      	ldrb	r3, [r7, #22]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	fa42 f303 	asr.w	r3, r2, r3
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d002      	beq.n	8000f84 <initVL53L0X+0x198>
    {
      spads_enabled++;
 8000f7e:	7dfb      	ldrb	r3, [r7, #23]
 8000f80:	3301      	adds	r3, #1
 8000f82:	75fb      	strb	r3, [r7, #23]
  for (uint8_t i = 0; i < 48; i++)
 8000f84:	7dbb      	ldrb	r3, [r7, #22]
 8000f86:	3301      	adds	r3, #1
 8000f88:	75bb      	strb	r3, [r7, #22]
 8000f8a:	7dbb      	ldrb	r3, [r7, #22]
 8000f8c:	2b2f      	cmp	r3, #47	@ 0x2f
 8000f8e:	d9bc      	bls.n	8000f0a <initVL53L0X+0x11e>
    }
  }

  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	2206      	movs	r2, #6
 8000f96:	4619      	mov	r1, r3
 8000f98:	20b0      	movs	r0, #176	@ 0xb0
 8000f9a:	f7ff fdf1 	bl	8000b80 <writeMulti>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	20ff      	movs	r0, #255	@ 0xff
 8000fa2:	f7ff fd41 	bl	8000a28 <writeReg>
  writeReg(0x00, 0x00);
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f7ff fd3d 	bl	8000a28 <writeReg>

  writeReg(0xFF, 0x00);
 8000fae:	2100      	movs	r1, #0
 8000fb0:	20ff      	movs	r0, #255	@ 0xff
 8000fb2:	f7ff fd39 	bl	8000a28 <writeReg>
  writeReg(0x09, 0x00);
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2009      	movs	r0, #9
 8000fba:	f7ff fd35 	bl	8000a28 <writeReg>
  writeReg(0x10, 0x00);
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2010      	movs	r0, #16
 8000fc2:	f7ff fd31 	bl	8000a28 <writeReg>
  writeReg(0x11, 0x00);
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	2011      	movs	r0, #17
 8000fca:	f7ff fd2d 	bl	8000a28 <writeReg>

  writeReg(0x24, 0x01);
 8000fce:	2101      	movs	r1, #1
 8000fd0:	2024      	movs	r0, #36	@ 0x24
 8000fd2:	f7ff fd29 	bl	8000a28 <writeReg>
  writeReg(0x25, 0xFF);
 8000fd6:	21ff      	movs	r1, #255	@ 0xff
 8000fd8:	2025      	movs	r0, #37	@ 0x25
 8000fda:	f7ff fd25 	bl	8000a28 <writeReg>
  writeReg(0x75, 0x00);
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2075      	movs	r0, #117	@ 0x75
 8000fe2:	f7ff fd21 	bl	8000a28 <writeReg>

  writeReg(0xFF, 0x01);
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	20ff      	movs	r0, #255	@ 0xff
 8000fea:	f7ff fd1d 	bl	8000a28 <writeReg>
  writeReg(0x4E, 0x2C);
 8000fee:	212c      	movs	r1, #44	@ 0x2c
 8000ff0:	204e      	movs	r0, #78	@ 0x4e
 8000ff2:	f7ff fd19 	bl	8000a28 <writeReg>
  writeReg(0x48, 0x00);
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2048      	movs	r0, #72	@ 0x48
 8000ffa:	f7ff fd15 	bl	8000a28 <writeReg>
  writeReg(0x30, 0x20);
 8000ffe:	2120      	movs	r1, #32
 8001000:	2030      	movs	r0, #48	@ 0x30
 8001002:	f7ff fd11 	bl	8000a28 <writeReg>

  writeReg(0xFF, 0x00);
 8001006:	2100      	movs	r1, #0
 8001008:	20ff      	movs	r0, #255	@ 0xff
 800100a:	f7ff fd0d 	bl	8000a28 <writeReg>
  writeReg(0x30, 0x09);
 800100e:	2109      	movs	r1, #9
 8001010:	2030      	movs	r0, #48	@ 0x30
 8001012:	f7ff fd09 	bl	8000a28 <writeReg>
  writeReg(0x54, 0x00);
 8001016:	2100      	movs	r1, #0
 8001018:	2054      	movs	r0, #84	@ 0x54
 800101a:	f7ff fd05 	bl	8000a28 <writeReg>
  writeReg(0x31, 0x04);
 800101e:	2104      	movs	r1, #4
 8001020:	2031      	movs	r0, #49	@ 0x31
 8001022:	f7ff fd01 	bl	8000a28 <writeReg>
  writeReg(0x32, 0x03);
 8001026:	2103      	movs	r1, #3
 8001028:	2032      	movs	r0, #50	@ 0x32
 800102a:	f7ff fcfd 	bl	8000a28 <writeReg>
  writeReg(0x40, 0x83);
 800102e:	2183      	movs	r1, #131	@ 0x83
 8001030:	2040      	movs	r0, #64	@ 0x40
 8001032:	f7ff fcf9 	bl	8000a28 <writeReg>
  writeReg(0x46, 0x25);
 8001036:	2125      	movs	r1, #37	@ 0x25
 8001038:	2046      	movs	r0, #70	@ 0x46
 800103a:	f7ff fcf5 	bl	8000a28 <writeReg>
  writeReg(0x60, 0x00);
 800103e:	2100      	movs	r1, #0
 8001040:	2060      	movs	r0, #96	@ 0x60
 8001042:	f7ff fcf1 	bl	8000a28 <writeReg>
  writeReg(0x27, 0x00);
 8001046:	2100      	movs	r1, #0
 8001048:	2027      	movs	r0, #39	@ 0x27
 800104a:	f7ff fced 	bl	8000a28 <writeReg>
  writeReg(0x50, 0x06);
 800104e:	2106      	movs	r1, #6
 8001050:	2050      	movs	r0, #80	@ 0x50
 8001052:	f7ff fce9 	bl	8000a28 <writeReg>
  writeReg(0x51, 0x00);
 8001056:	2100      	movs	r1, #0
 8001058:	2051      	movs	r0, #81	@ 0x51
 800105a:	f7ff fce5 	bl	8000a28 <writeReg>
  writeReg(0x52, 0x96);
 800105e:	2196      	movs	r1, #150	@ 0x96
 8001060:	2052      	movs	r0, #82	@ 0x52
 8001062:	f7ff fce1 	bl	8000a28 <writeReg>
  writeReg(0x56, 0x08);
 8001066:	2108      	movs	r1, #8
 8001068:	2056      	movs	r0, #86	@ 0x56
 800106a:	f7ff fcdd 	bl	8000a28 <writeReg>
  writeReg(0x57, 0x30);
 800106e:	2130      	movs	r1, #48	@ 0x30
 8001070:	2057      	movs	r0, #87	@ 0x57
 8001072:	f7ff fcd9 	bl	8000a28 <writeReg>
  writeReg(0x61, 0x00);
 8001076:	2100      	movs	r1, #0
 8001078:	2061      	movs	r0, #97	@ 0x61
 800107a:	f7ff fcd5 	bl	8000a28 <writeReg>
  writeReg(0x62, 0x00);
 800107e:	2100      	movs	r1, #0
 8001080:	2062      	movs	r0, #98	@ 0x62
 8001082:	f7ff fcd1 	bl	8000a28 <writeReg>
  writeReg(0x64, 0x00);
 8001086:	2100      	movs	r1, #0
 8001088:	2064      	movs	r0, #100	@ 0x64
 800108a:	f7ff fccd 	bl	8000a28 <writeReg>
  writeReg(0x65, 0x00);
 800108e:	2100      	movs	r1, #0
 8001090:	2065      	movs	r0, #101	@ 0x65
 8001092:	f7ff fcc9 	bl	8000a28 <writeReg>
  writeReg(0x66, 0xA0);
 8001096:	21a0      	movs	r1, #160	@ 0xa0
 8001098:	2066      	movs	r0, #102	@ 0x66
 800109a:	f7ff fcc5 	bl	8000a28 <writeReg>

  writeReg(0xFF, 0x01);
 800109e:	2101      	movs	r1, #1
 80010a0:	20ff      	movs	r0, #255	@ 0xff
 80010a2:	f7ff fcc1 	bl	8000a28 <writeReg>
  writeReg(0x22, 0x32);
 80010a6:	2132      	movs	r1, #50	@ 0x32
 80010a8:	2022      	movs	r0, #34	@ 0x22
 80010aa:	f7ff fcbd 	bl	8000a28 <writeReg>
  writeReg(0x47, 0x14);
 80010ae:	2114      	movs	r1, #20
 80010b0:	2047      	movs	r0, #71	@ 0x47
 80010b2:	f7ff fcb9 	bl	8000a28 <writeReg>
  writeReg(0x49, 0xFF);
 80010b6:	21ff      	movs	r1, #255	@ 0xff
 80010b8:	2049      	movs	r0, #73	@ 0x49
 80010ba:	f7ff fcb5 	bl	8000a28 <writeReg>
  writeReg(0x4A, 0x00);
 80010be:	2100      	movs	r1, #0
 80010c0:	204a      	movs	r0, #74	@ 0x4a
 80010c2:	f7ff fcb1 	bl	8000a28 <writeReg>

  writeReg(0xFF, 0x00);
 80010c6:	2100      	movs	r1, #0
 80010c8:	20ff      	movs	r0, #255	@ 0xff
 80010ca:	f7ff fcad 	bl	8000a28 <writeReg>
  writeReg(0x7A, 0x0A);
 80010ce:	210a      	movs	r1, #10
 80010d0:	207a      	movs	r0, #122	@ 0x7a
 80010d2:	f7ff fca9 	bl	8000a28 <writeReg>
  writeReg(0x7B, 0x00);
 80010d6:	2100      	movs	r1, #0
 80010d8:	207b      	movs	r0, #123	@ 0x7b
 80010da:	f7ff fca5 	bl	8000a28 <writeReg>
  writeReg(0x78, 0x21);
 80010de:	2121      	movs	r1, #33	@ 0x21
 80010e0:	2078      	movs	r0, #120	@ 0x78
 80010e2:	f7ff fca1 	bl	8000a28 <writeReg>

  writeReg(0xFF, 0x01);
 80010e6:	2101      	movs	r1, #1
 80010e8:	20ff      	movs	r0, #255	@ 0xff
 80010ea:	f7ff fc9d 	bl	8000a28 <writeReg>
  writeReg(0x23, 0x34);
 80010ee:	2134      	movs	r1, #52	@ 0x34
 80010f0:	2023      	movs	r0, #35	@ 0x23
 80010f2:	f7ff fc99 	bl	8000a28 <writeReg>
  writeReg(0x42, 0x00);
 80010f6:	2100      	movs	r1, #0
 80010f8:	2042      	movs	r0, #66	@ 0x42
 80010fa:	f7ff fc95 	bl	8000a28 <writeReg>
  writeReg(0x44, 0xFF);
 80010fe:	21ff      	movs	r1, #255	@ 0xff
 8001100:	2044      	movs	r0, #68	@ 0x44
 8001102:	f7ff fc91 	bl	8000a28 <writeReg>
  writeReg(0x45, 0x26);
 8001106:	2126      	movs	r1, #38	@ 0x26
 8001108:	2045      	movs	r0, #69	@ 0x45
 800110a:	f7ff fc8d 	bl	8000a28 <writeReg>
  writeReg(0x46, 0x05);
 800110e:	2105      	movs	r1, #5
 8001110:	2046      	movs	r0, #70	@ 0x46
 8001112:	f7ff fc89 	bl	8000a28 <writeReg>
  writeReg(0x40, 0x40);
 8001116:	2140      	movs	r1, #64	@ 0x40
 8001118:	2040      	movs	r0, #64	@ 0x40
 800111a:	f7ff fc85 	bl	8000a28 <writeReg>
  writeReg(0x0E, 0x06);
 800111e:	2106      	movs	r1, #6
 8001120:	200e      	movs	r0, #14
 8001122:	f7ff fc81 	bl	8000a28 <writeReg>
  writeReg(0x20, 0x1A);
 8001126:	211a      	movs	r1, #26
 8001128:	2020      	movs	r0, #32
 800112a:	f7ff fc7d 	bl	8000a28 <writeReg>
  writeReg(0x43, 0x40);
 800112e:	2140      	movs	r1, #64	@ 0x40
 8001130:	2043      	movs	r0, #67	@ 0x43
 8001132:	f7ff fc79 	bl	8000a28 <writeReg>

  writeReg(0xFF, 0x00);
 8001136:	2100      	movs	r1, #0
 8001138:	20ff      	movs	r0, #255	@ 0xff
 800113a:	f7ff fc75 	bl	8000a28 <writeReg>
  writeReg(0x34, 0x03);
 800113e:	2103      	movs	r1, #3
 8001140:	2034      	movs	r0, #52	@ 0x34
 8001142:	f7ff fc71 	bl	8000a28 <writeReg>
  writeReg(0x35, 0x44);
 8001146:	2144      	movs	r1, #68	@ 0x44
 8001148:	2035      	movs	r0, #53	@ 0x35
 800114a:	f7ff fc6d 	bl	8000a28 <writeReg>

  writeReg(0xFF, 0x01);
 800114e:	2101      	movs	r1, #1
 8001150:	20ff      	movs	r0, #255	@ 0xff
 8001152:	f7ff fc69 	bl	8000a28 <writeReg>
  writeReg(0x31, 0x04);
 8001156:	2104      	movs	r1, #4
 8001158:	2031      	movs	r0, #49	@ 0x31
 800115a:	f7ff fc65 	bl	8000a28 <writeReg>
  writeReg(0x4B, 0x09);
 800115e:	2109      	movs	r1, #9
 8001160:	204b      	movs	r0, #75	@ 0x4b
 8001162:	f7ff fc61 	bl	8000a28 <writeReg>
  writeReg(0x4C, 0x05);
 8001166:	2105      	movs	r1, #5
 8001168:	204c      	movs	r0, #76	@ 0x4c
 800116a:	f7ff fc5d 	bl	8000a28 <writeReg>
  writeReg(0x4D, 0x04);
 800116e:	2104      	movs	r1, #4
 8001170:	204d      	movs	r0, #77	@ 0x4d
 8001172:	f7ff fc59 	bl	8000a28 <writeReg>

  writeReg(0xFF, 0x00);
 8001176:	2100      	movs	r1, #0
 8001178:	20ff      	movs	r0, #255	@ 0xff
 800117a:	f7ff fc55 	bl	8000a28 <writeReg>
  writeReg(0x44, 0x00);
 800117e:	2100      	movs	r1, #0
 8001180:	2044      	movs	r0, #68	@ 0x44
 8001182:	f7ff fc51 	bl	8000a28 <writeReg>
  writeReg(0x45, 0x20);
 8001186:	2120      	movs	r1, #32
 8001188:	2045      	movs	r0, #69	@ 0x45
 800118a:	f7ff fc4d 	bl	8000a28 <writeReg>
  writeReg(0x47, 0x08);
 800118e:	2108      	movs	r1, #8
 8001190:	2047      	movs	r0, #71	@ 0x47
 8001192:	f7ff fc49 	bl	8000a28 <writeReg>
  writeReg(0x48, 0x28);
 8001196:	2128      	movs	r1, #40	@ 0x28
 8001198:	2048      	movs	r0, #72	@ 0x48
 800119a:	f7ff fc45 	bl	8000a28 <writeReg>
  writeReg(0x67, 0x00);
 800119e:	2100      	movs	r1, #0
 80011a0:	2067      	movs	r0, #103	@ 0x67
 80011a2:	f7ff fc41 	bl	8000a28 <writeReg>
  writeReg(0x70, 0x04);
 80011a6:	2104      	movs	r1, #4
 80011a8:	2070      	movs	r0, #112	@ 0x70
 80011aa:	f7ff fc3d 	bl	8000a28 <writeReg>
  writeReg(0x71, 0x01);
 80011ae:	2101      	movs	r1, #1
 80011b0:	2071      	movs	r0, #113	@ 0x71
 80011b2:	f7ff fc39 	bl	8000a28 <writeReg>
  writeReg(0x72, 0xFE);
 80011b6:	21fe      	movs	r1, #254	@ 0xfe
 80011b8:	2072      	movs	r0, #114	@ 0x72
 80011ba:	f7ff fc35 	bl	8000a28 <writeReg>
  writeReg(0x76, 0x00);
 80011be:	2100      	movs	r1, #0
 80011c0:	2076      	movs	r0, #118	@ 0x76
 80011c2:	f7ff fc31 	bl	8000a28 <writeReg>
  writeReg(0x77, 0x00);
 80011c6:	2100      	movs	r1, #0
 80011c8:	2077      	movs	r0, #119	@ 0x77
 80011ca:	f7ff fc2d 	bl	8000a28 <writeReg>

  writeReg(0xFF, 0x01);
 80011ce:	2101      	movs	r1, #1
 80011d0:	20ff      	movs	r0, #255	@ 0xff
 80011d2:	f7ff fc29 	bl	8000a28 <writeReg>
  writeReg(0x0D, 0x01);
 80011d6:	2101      	movs	r1, #1
 80011d8:	200d      	movs	r0, #13
 80011da:	f7ff fc25 	bl	8000a28 <writeReg>

  writeReg(0xFF, 0x00);
 80011de:	2100      	movs	r1, #0
 80011e0:	20ff      	movs	r0, #255	@ 0xff
 80011e2:	f7ff fc21 	bl	8000a28 <writeReg>
  writeReg(0x80, 0x01);
 80011e6:	2101      	movs	r1, #1
 80011e8:	2080      	movs	r0, #128	@ 0x80
 80011ea:	f7ff fc1d 	bl	8000a28 <writeReg>
  writeReg(0x01, 0xF8);
 80011ee:	21f8      	movs	r1, #248	@ 0xf8
 80011f0:	2001      	movs	r0, #1
 80011f2:	f7ff fc19 	bl	8000a28 <writeReg>

  writeReg(0xFF, 0x01);
 80011f6:	2101      	movs	r1, #1
 80011f8:	20ff      	movs	r0, #255	@ 0xff
 80011fa:	f7ff fc15 	bl	8000a28 <writeReg>
  writeReg(0x8E, 0x01);
 80011fe:	2101      	movs	r1, #1
 8001200:	208e      	movs	r0, #142	@ 0x8e
 8001202:	f7ff fc11 	bl	8000a28 <writeReg>
  writeReg(0x00, 0x01);
 8001206:	2101      	movs	r1, #1
 8001208:	2000      	movs	r0, #0
 800120a:	f7ff fc0d 	bl	8000a28 <writeReg>
  writeReg(0xFF, 0x00);
 800120e:	2100      	movs	r1, #0
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	f7ff fc09 	bl	8000a28 <writeReg>
  writeReg(0x80, 0x00);
 8001216:	2100      	movs	r1, #0
 8001218:	2080      	movs	r0, #128	@ 0x80
 800121a:	f7ff fc05 	bl	8000a28 <writeReg>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 800121e:	2104      	movs	r1, #4
 8001220:	200a      	movs	r0, #10
 8001222:	f7ff fc01 	bl	8000a28 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 8001226:	2084      	movs	r0, #132	@ 0x84
 8001228:	f7ff fc52 	bl	8000ad0 <readReg>
 800122c:	4603      	mov	r3, r0
 800122e:	f023 0310 	bic.w	r3, r3, #16
 8001232:	b2db      	uxtb	r3, r3
 8001234:	4619      	mov	r1, r3
 8001236:	2084      	movs	r0, #132	@ 0x84
 8001238:	f7ff fbf6 	bl	8000a28 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 800123c:	2101      	movs	r1, #1
 800123e:	200b      	movs	r0, #11
 8001240:	f7ff fbf2 	bl	8000a28 <writeReg>

  // -- VL53L0X_SetGpioConfig() end

  g_measTimBudUs = getMeasurementTimingBudget();
 8001244:	f000 f936 	bl	80014b4 <getMeasurementTimingBudget>
 8001248:	4603      	mov	r3, r0
 800124a:	4a16      	ldr	r2, [pc, #88]	@ (80012a4 <initVL53L0X+0x4b8>)
 800124c:	6013      	str	r3, [r2, #0]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 800124e:	21e8      	movs	r1, #232	@ 0xe8
 8001250:	2001      	movs	r0, #1
 8001252:	f7ff fbe9 	bl	8000a28 <writeReg>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(g_measTimBudUs);
 8001256:	4b13      	ldr	r3, [pc, #76]	@ (80012a4 <initVL53L0X+0x4b8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f892 	bl	8001384 <setMeasurementTimingBudget>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 8001260:	2101      	movs	r1, #1
 8001262:	2001      	movs	r0, #1
 8001264:	f7ff fbe0 	bl	8000a28 <writeReg>
  if (!performSingleRefCalibration(0x40)) { return false; }
 8001268:	2040      	movs	r0, #64	@ 0x40
 800126a:	f000 ff99 	bl	80021a0 <performSingleRefCalibration>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d101      	bne.n	8001278 <initVL53L0X+0x48c>
 8001274:	2300      	movs	r3, #0
 8001276:	e010      	b.n	800129a <initVL53L0X+0x4ae>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8001278:	2102      	movs	r1, #2
 800127a:	2001      	movs	r0, #1
 800127c:	f7ff fbd4 	bl	8000a28 <writeReg>
  if (!performSingleRefCalibration(0x00)) { return false; }
 8001280:	2000      	movs	r0, #0
 8001282:	f000 ff8d 	bl	80021a0 <performSingleRefCalibration>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d101      	bne.n	8001290 <initVL53L0X+0x4a4>
 800128c:	2300      	movs	r3, #0
 800128e:	e004      	b.n	800129a <initVL53L0X+0x4ae>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8001290:	21e8      	movs	r1, #232	@ 0xe8
 8001292:	2001      	movs	r0, #1
 8001294:	f7ff fbc8 	bl	8000a28 <writeReg>

  // VL53L0X_PerformRefCalibration() end

  return true;
 8001298:	2301      	movs	r3, #1
}
 800129a:	4618      	mov	r0, r3
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000084 	.word	0x20000084

080012a8 <setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool setSignalRateLimit(float limit_Mcps)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	ed87 0a01 	vstr	s0, [r7, #4]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80012b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012be:	d40a      	bmi.n	80012d6 <setSignalRateLimit+0x2e>
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff f959 	bl	8000578 <__aeabi_f2d>
 80012c6:	a311      	add	r3, pc, #68	@ (adr r3, 800130c <setSignalRateLimit+0x64>)
 80012c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012cc:	f7ff fa2a 	bl	8000724 <__aeabi_dcmpgt>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <setSignalRateLimit+0x32>
 80012d6:	2300      	movs	r3, #0
 80012d8:	e00f      	b.n	80012fa <setSignalRateLimit+0x52>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 80012da:	edd7 7a01 	vldr	s15, [r7, #4]
 80012de:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001308 <setSignalRateLimit+0x60>
 80012e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012ea:	ee17 3a90 	vmov	r3, s15
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	4619      	mov	r1, r3
 80012f2:	2044      	movs	r0, #68	@ 0x44
 80012f4:	f7ff fbc2 	bl	8000a7c <writeReg16Bit>
  return true;
 80012f8:	2301      	movs	r3, #1
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	f3af 8000 	nop.w
 8001308:	43000000 	.word	0x43000000
 800130c:	0a3d70a4 	.word	0x0a3d70a4
 8001310:	407fffd7 	.word	0x407fffd7
 8001314:	00000000 	.word	0x00000000

08001318 <setSignalRateLimit_x>:

bool setSignalRateLimit_x(float limit_Mcps, statInfo_t_VL53L0X *sensorInfo)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001322:	6038      	str	r0, [r7, #0]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 8001324:	edd7 7a01 	vldr	s15, [r7, #4]
 8001328:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800132c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001330:	d40a      	bmi.n	8001348 <setSignalRateLimit_x+0x30>
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff f920 	bl	8000578 <__aeabi_f2d>
 8001338:	a310      	add	r3, pc, #64	@ (adr r3, 800137c <setSignalRateLimit_x+0x64>)
 800133a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133e:	f7ff f9f1 	bl	8000724 <__aeabi_dcmpgt>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <setSignalRateLimit_x+0x34>
 8001348:	2300      	movs	r3, #0
 800134a:	e011      	b.n	8001370 <setSignalRateLimit_x+0x58>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit_x(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7), sensorInfo->address);
 800134c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001350:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001378 <setSignalRateLimit_x+0x60>
 8001354:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800135c:	ee17 3a90 	vmov	r3, s15
 8001360:	b299      	uxth	r1, r3
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	7a5b      	ldrb	r3, [r3, #9]
 8001366:	461a      	mov	r2, r3
 8001368:	2044      	movs	r0, #68	@ 0x44
 800136a:	f7ff fc89 	bl	8000c80 <writeReg16Bit_x>
  return true;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	43000000 	.word	0x43000000
 800137c:	0a3d70a4 	.word	0x0a3d70a4
 8001380:	407fffd7 	.word	0x407fffd7

08001384 <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool setMeasurementTimingBudget(uint32_t budget_us)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b092      	sub	sp, #72	@ 0x48
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 800138c:	f44f 63a5 	mov.w	r3, #1320	@ 0x528
 8001390:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  uint16_t const EndOverhead        = 960;
 8001394:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001398:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t const MsrcOverhead       = 660;
 800139a:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800139e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  uint16_t const TccOverhead        = 590;
 80013a0:	f240 234e 	movw	r3, #590	@ 0x24e
 80013a4:	877b      	strh	r3, [r7, #58]	@ 0x3a
  uint16_t const DssOverhead        = 690;
 80013a6:	f240 23b2 	movw	r3, #690	@ 0x2b2
 80013aa:	873b      	strh	r3, [r7, #56]	@ 0x38
  uint16_t const PreRangeOverhead   = 660;
 80013ac:	f44f 7325 	mov.w	r3, #660	@ 0x294
 80013b0:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint16_t const FinalRangeOverhead = 550;
 80013b2:	f240 2326 	movw	r3, #550	@ 0x226
 80013b6:	86bb      	strh	r3, [r7, #52]	@ 0x34

  uint32_t const MinTimingBudget = 20000;
 80013b8:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80013bc:	633b      	str	r3, [r7, #48]	@ 0x30

  if (budget_us < MinTimingBudget) { return false; }
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d201      	bcs.n	80013ca <setMeasurementTimingBudget+0x46>
 80013c6:	2300      	movs	r3, #0
 80013c8:	e06e      	b.n	80014a8 <setMeasurementTimingBudget+0x124>

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 80013ca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80013ce:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80013d0:	4413      	add	r3, r2
 80013d2:	647b      	str	r3, [r7, #68]	@ 0x44

  getSequenceStepEnables(&enables);
 80013d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 fdbd 	bl	8001f58 <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 80013de:	f107 020c 	add.w	r2, r7, #12
 80013e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e6:	4611      	mov	r1, r2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fde7 	bl	8001fbc <getSequenceStepTimeouts>

  if (enables.tcc)
 80013ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d005      	beq.n	8001402 <setMeasurementTimingBudget+0x7e>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80013fa:	4413      	add	r3, r2
 80013fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80013fe:	4413      	add	r3, r2
 8001400:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.dss)
 8001402:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001406:	2b00      	cmp	r3, #0
 8001408:	d007      	beq.n	800141a <setMeasurementTimingBudget+0x96>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800140e:	4413      	add	r3, r2
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001414:	4413      	add	r3, r2
 8001416:	647b      	str	r3, [r7, #68]	@ 0x44
 8001418:	e009      	b.n	800142e <setMeasurementTimingBudget+0xaa>
  }
  else if (enables.msrc)
 800141a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800141e:	2b00      	cmp	r3, #0
 8001420:	d005      	beq.n	800142e <setMeasurementTimingBudget+0xaa>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001426:	4413      	add	r3, r2
 8001428:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800142a:	4413      	add	r3, r2
 800142c:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.pre_range)
 800142e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001432:	2b00      	cmp	r3, #0
 8001434:	d005      	beq.n	8001442 <setMeasurementTimingBudget+0xbe>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8001436:	69fa      	ldr	r2, [r7, #28]
 8001438:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800143a:	4413      	add	r3, r2
 800143c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800143e:	4413      	add	r3, r2
 8001440:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.final_range)
 8001442:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001446:	2b00      	cmp	r3, #0
 8001448:	d02d      	beq.n	80014a6 <setMeasurementTimingBudget+0x122>
  {
    used_budget_us += FinalRangeOverhead;
 800144a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800144c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800144e:	4413      	add	r3, r2
 8001450:	647b      	str	r3, [r7, #68]	@ 0x44
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 8001452:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	429a      	cmp	r2, r3
 8001458:	d901      	bls.n	800145e <setMeasurementTimingBudget+0xda>
    {
      // "Requested timeout too big."
      return false;
 800145a:	2300      	movs	r3, #0
 800145c:	e024      	b.n	80014a8 <setMeasurementTimingBudget+0x124>
    }

    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	62fb      	str	r3, [r7, #44]	@ 0x2c
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 8001466:	89fb      	ldrh	r3, [r7, #14]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 8001468:	b2db      	uxtb	r3, r3
 800146a:	4619      	mov	r1, r3
 800146c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800146e:	f000 fe71 	bl	8002154 <timeoutMicrosecondsToMclks>
 8001472:	4603      	mov	r3, r0
    uint16_t final_range_timeout_mclks =
 8001474:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

    if (enables.pre_range)
 8001478:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800147c:	2b00      	cmp	r3, #0
 800147e:	d005      	beq.n	800148c <setMeasurementTimingBudget+0x108>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 8001480:	8a7a      	ldrh	r2, [r7, #18]
 8001482:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001486:	4413      	add	r3, r2
 8001488:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 800148c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001490:	4618      	mov	r0, r3
 8001492:	f000 fe0c 	bl	80020ae <encodeTimeout>
 8001496:	4603      	mov	r3, r0
 8001498:	4619      	mov	r1, r3
 800149a:	2071      	movs	r0, #113	@ 0x71
 800149c:	f7ff faee 	bl	8000a7c <writeReg16Bit>
      encodeTimeout(final_range_timeout_mclks));

    // set_sequence_step_timeout() end

    g_measTimBudUs = budget_us; // store for internal reuse
 80014a0:	4a03      	ldr	r2, [pc, #12]	@ (80014b0 <setMeasurementTimingBudget+0x12c>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6013      	str	r3, [r2, #0]
  }
  return true;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3748      	adds	r7, #72	@ 0x48
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000084 	.word	0x20000084

080014b4 <getMeasurementTimingBudget>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t getMeasurementTimingBudget(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08c      	sub	sp, #48	@ 0x30
 80014b8:	af00      	add	r7, sp, #0
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 80014ba:	f240 7376 	movw	r3, #1910	@ 0x776
 80014be:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t const EndOverhead        = 960;
 80014c0:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80014c4:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint16_t const MsrcOverhead       = 660;
 80014c6:	f44f 7325 	mov.w	r3, #660	@ 0x294
 80014ca:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const TccOverhead        = 590;
 80014cc:	f240 234e 	movw	r3, #590	@ 0x24e
 80014d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  uint16_t const DssOverhead        = 690;
 80014d2:	f240 23b2 	movw	r3, #690	@ 0x2b2
 80014d6:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t const PreRangeOverhead   = 660;
 80014d8:	f44f 7325 	mov.w	r3, #660	@ 0x294
 80014dc:	843b      	strh	r3, [r7, #32]
  uint16_t const FinalRangeOverhead = 550;
 80014de:	f240 2326 	movw	r3, #550	@ 0x226
 80014e2:	83fb      	strh	r3, [r7, #30]

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 80014e4:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80014e6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80014e8:	4413      	add	r3, r2
 80014ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  getSequenceStepEnables(&enables);
 80014ec:	f107 0318 	add.w	r3, r7, #24
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 fd31 	bl	8001f58 <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 80014f6:	463a      	mov	r2, r7
 80014f8:	f107 0318 	add.w	r3, r7, #24
 80014fc:	4611      	mov	r1, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 fd5c 	bl	8001fbc <getSequenceStepTimeouts>

  if (enables.tcc)
 8001504:	7e3b      	ldrb	r3, [r7, #24]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d005      	beq.n	8001516 <getMeasurementTimingBudget+0x62>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800150e:	4413      	add	r3, r2
 8001510:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001512:	4413      	add	r3, r2
 8001514:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  if (enables.dss)
 8001516:	7ebb      	ldrb	r3, [r7, #26]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d007      	beq.n	800152c <getMeasurementTimingBudget+0x78>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001520:	4413      	add	r3, r2
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001526:	4413      	add	r3, r2
 8001528:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800152a:	e008      	b.n	800153e <getMeasurementTimingBudget+0x8a>
  }
  else if (enables.msrc)
 800152c:	7e7b      	ldrb	r3, [r7, #25]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d005      	beq.n	800153e <getMeasurementTimingBudget+0x8a>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001536:	4413      	add	r3, r2
 8001538:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800153a:	4413      	add	r3, r2
 800153c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  if (enables.pre_range)
 800153e:	7efb      	ldrb	r3, [r7, #27]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d005      	beq.n	8001550 <getMeasurementTimingBudget+0x9c>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	8c3b      	ldrh	r3, [r7, #32]
 8001548:	4413      	add	r3, r2
 800154a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800154c:	4413      	add	r3, r2
 800154e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  if (enables.final_range)
 8001550:	7f3b      	ldrb	r3, [r7, #28]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d005      	beq.n	8001562 <getMeasurementTimingBudget+0xae>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	8bfb      	ldrh	r3, [r7, #30]
 800155a:	4413      	add	r3, r2
 800155c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800155e:	4413      	add	r3, r2
 8001560:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  g_measTimBudUs = budget_us; // store for internal reuse
 8001562:	4a04      	ldr	r2, [pc, #16]	@ (8001574 <getMeasurementTimingBudget+0xc0>)
 8001564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001566:	6013      	str	r3, [r2, #0]
  return budget_us;
 8001568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800156a:	4618      	mov	r0, r3
 800156c:	3730      	adds	r7, #48	@ 0x30
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000084 	.word	0x20000084

08001578 <getVcselPulsePeriod>:
}

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t getVcselPulsePeriod(vcselPeriodType type)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
  if (type == VcselPeriodPreRange)
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d108      	bne.n	800159a <getVcselPulsePeriod+0x22>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 8001588:	2050      	movs	r0, #80	@ 0x50
 800158a:	f7ff faa1 	bl	8000ad0 <readReg>
 800158e:	4603      	mov	r3, r0
 8001590:	3301      	adds	r3, #1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	b2db      	uxtb	r3, r3
 8001598:	e00c      	b.n	80015b4 <getVcselPulsePeriod+0x3c>
  }
  else if (type == VcselPeriodFinalRange)
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d108      	bne.n	80015b2 <getVcselPulsePeriod+0x3a>
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80015a0:	2070      	movs	r0, #112	@ 0x70
 80015a2:	f7ff fa95 	bl	8000ad0 <readReg>
 80015a6:	4603      	mov	r3, r0
 80015a8:	3301      	adds	r3, #1
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	e000      	b.n	80015b4 <getVcselPulsePeriod+0x3c>
  }
  else { return 255; }
 80015b2:	23ff      	movs	r3, #255	@ 0xff
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <setMeasurementTimingBudget_x>:

bool setMeasurementTimingBudget_x(uint32_t budget_us, statInfo_t_VL53L0X *sensorInfo)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b092      	sub	sp, #72	@ 0x48
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 80015c6:	f44f 63a5 	mov.w	r3, #1320	@ 0x528
 80015ca:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  uint16_t const EndOverhead        = 960;
 80015ce:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80015d2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t const MsrcOverhead       = 660;
 80015d4:	f44f 7325 	mov.w	r3, #660	@ 0x294
 80015d8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  uint16_t const TccOverhead        = 590;
 80015da:	f240 234e 	movw	r3, #590	@ 0x24e
 80015de:	877b      	strh	r3, [r7, #58]	@ 0x3a
  uint16_t const DssOverhead        = 690;
 80015e0:	f240 23b2 	movw	r3, #690	@ 0x2b2
 80015e4:	873b      	strh	r3, [r7, #56]	@ 0x38
  uint16_t const PreRangeOverhead   = 660;
 80015e6:	f44f 7325 	mov.w	r3, #660	@ 0x294
 80015ea:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint16_t const FinalRangeOverhead = 550;
 80015ec:	f240 2326 	movw	r3, #550	@ 0x226
 80015f0:	86bb      	strh	r3, [r7, #52]	@ 0x34

  uint32_t const MinTimingBudget = 20000;
 80015f2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80015f6:	633b      	str	r3, [r7, #48]	@ 0x30

  if (budget_us < MinTimingBudget) { return false; }
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d201      	bcs.n	8001604 <setMeasurementTimingBudget_x+0x48>
 8001600:	2300      	movs	r3, #0
 8001602:	e077      	b.n	80016f4 <setMeasurementTimingBudget_x+0x138>

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 8001604:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8001608:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800160a:	4413      	add	r3, r2
 800160c:	647b      	str	r3, [r7, #68]	@ 0x44

  getSequenceStepEnables_x(&enables,  sensorInfo->address);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	7a5b      	ldrb	r3, [r3, #9]
 8001612:	461a      	mov	r2, r3
 8001614:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001618:	4611      	mov	r1, r2
 800161a:	4618      	mov	r0, r3
 800161c:	f000 f870 	bl	8001700 <getSequenceStepEnables_x>
  getSequenceStepTimeouts_x(&enables, &timeouts,  sensorInfo->address);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	7a5b      	ldrb	r3, [r3, #9]
 8001624:	461a      	mov	r2, r3
 8001626:	f107 010c 	add.w	r1, r7, #12
 800162a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800162e:	4618      	mov	r0, r3
 8001630:	f000 f89c 	bl	800176c <getSequenceStepTimeouts_x>

  if (enables.tcc)
 8001634:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001638:	2b00      	cmp	r3, #0
 800163a:	d005      	beq.n	8001648 <setMeasurementTimingBudget_x+0x8c>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001640:	4413      	add	r3, r2
 8001642:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001644:	4413      	add	r3, r2
 8001646:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.dss)
 8001648:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800164c:	2b00      	cmp	r3, #0
 800164e:	d007      	beq.n	8001660 <setMeasurementTimingBudget_x+0xa4>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001654:	4413      	add	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800165a:	4413      	add	r3, r2
 800165c:	647b      	str	r3, [r7, #68]	@ 0x44
 800165e:	e009      	b.n	8001674 <setMeasurementTimingBudget_x+0xb8>
  }
  else if (enables.msrc)
 8001660:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <setMeasurementTimingBudget_x+0xb8>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800166c:	4413      	add	r3, r2
 800166e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001670:	4413      	add	r3, r2
 8001672:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.pre_range)
 8001674:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <setMeasurementTimingBudget_x+0xcc>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 800167c:	69fa      	ldr	r2, [r7, #28]
 800167e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001680:	4413      	add	r3, r2
 8001682:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001684:	4413      	add	r3, r2
 8001686:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.final_range)
 8001688:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800168c:	2b00      	cmp	r3, #0
 800168e:	d030      	beq.n	80016f2 <setMeasurementTimingBudget_x+0x136>
  {
    used_budget_us += FinalRangeOverhead;
 8001690:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001692:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001694:	4413      	add	r3, r2
 8001696:	647b      	str	r3, [r7, #68]	@ 0x44
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 8001698:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	429a      	cmp	r2, r3
 800169e:	d901      	bls.n	80016a4 <setMeasurementTimingBudget_x+0xe8>
    {
      // "Requested timeout too big."
      return false;
 80016a0:	2300      	movs	r3, #0
 80016a2:	e027      	b.n	80016f4 <setMeasurementTimingBudget_x+0x138>
    }

    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 80016ac:	89fb      	ldrh	r3, [r7, #14]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	4619      	mov	r1, r3
 80016b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80016b4:	f000 fd4e 	bl	8002154 <timeoutMicrosecondsToMclks>
 80016b8:	4603      	mov	r3, r0
    uint16_t final_range_timeout_mclks =
 80016ba:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

    if (enables.pre_range)
 80016be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d005      	beq.n	80016d2 <setMeasurementTimingBudget_x+0x116>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 80016c6:	8a7a      	ldrh	r2, [r7, #18]
 80016c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80016cc:	4413      	add	r3, r2
 80016ce:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    }

    writeReg16Bit_x(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80016d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 fce9 	bl	80020ae <encodeTimeout>
 80016dc:	4603      	mov	r3, r0
 80016de:	4619      	mov	r1, r3
      encodeTimeout(final_range_timeout_mclks), sensorInfo->address);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	7a5b      	ldrb	r3, [r3, #9]
    writeReg16Bit_x(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80016e4:	461a      	mov	r2, r3
 80016e6:	2071      	movs	r0, #113	@ 0x71
 80016e8:	f7ff faca 	bl	8000c80 <writeReg16Bit_x>

    // set_sequence_step_timeout() end

    g_measTimBudUs = budget_us; // store for internal reuse
 80016ec:	4a03      	ldr	r2, [pc, #12]	@ (80016fc <setMeasurementTimingBudget_x+0x140>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6013      	str	r3, [r2, #0]
  }
  return true;
 80016f2:	2301      	movs	r3, #1
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3748      	adds	r7, #72	@ 0x48
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000084 	.word	0x20000084

08001700 <getSequenceStepEnables_x>:
void getSequenceStepEnables_x(SequenceStepEnables * enables, statInfo_t_VL53L0X *sensorInfo)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint8_t sequence_config = readReg_x(SYSTEM_SEQUENCE_CONFIG, sensorInfo->address);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	7a5b      	ldrb	r3, [r3, #9]
 800170e:	4619      	mov	r1, r3
 8001710:	2001      	movs	r0, #1
 8001712:	f7ff fadd 	bl	8000cd0 <readReg_x>
 8001716:	4603      	mov	r3, r0
 8001718:	73fb      	strb	r3, [r7, #15]

  enables->tcc          = (sequence_config >> 4) & 0x1;
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	091b      	lsrs	r3, r3, #4
 800171e:	b2db      	uxtb	r3, r3
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	b2da      	uxtb	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	701a      	strb	r2, [r3, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	08db      	lsrs	r3, r3, #3
 800172e:	b2db      	uxtb	r3, r3
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	b2da      	uxtb	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	709a      	strb	r2, [r3, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	089b      	lsrs	r3, r3, #2
 800173e:	b2db      	uxtb	r3, r3
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	b2da      	uxtb	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	705a      	strb	r2, [r3, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	099b      	lsrs	r3, r3, #6
 800174e:	b2db      	uxtb	r3, r3
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	b2da      	uxtb	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	70da      	strb	r2, [r3, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	09db      	lsrs	r3, r3, #7
 800175e:	b2da      	uxtb	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	711a      	strb	r2, [r3, #4]
}
 8001764:	bf00      	nop
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <getSequenceStepTimeouts_x>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void getSequenceStepTimeouts_x(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts, statInfo_t_VL53L0X *sensorInfo)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod_x(VcselPeriodPreRange, sensorInfo->address);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	7a5b      	ldrb	r3, [r3, #9]
 800177c:	4619      	mov	r1, r3
 800177e:	2000      	movs	r0, #0
 8001780:	f000 fa6e 	bl	8001c60 <getVcselPulsePeriod_x>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg_x(MSRC_CONFIG_TIMEOUT_MACROP, sensorInfo->address) + 1;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	7a5b      	ldrb	r3, [r3, #9]
 8001790:	4619      	mov	r1, r3
 8001792:	2046      	movs	r0, #70	@ 0x46
 8001794:	f7ff fa9c 	bl	8000cd0 <readReg_x>
 8001798:	4603      	mov	r3, r0
 800179a:	3301      	adds	r3, #1
 800179c:	b29a      	uxth	r2, r3
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	4619      	mov	r1, r3
 80017ae:	4610      	mov	r0, r2
 80017b0:	f000 fca8 	bl	8002104 <timeoutMclksToMicroseconds>
 80017b4:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit_x(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI, sensorInfo->address));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7a5b      	ldrb	r3, [r3, #9]
 80017be:	4619      	mov	r1, r3
 80017c0:	2051      	movs	r0, #81	@ 0x51
 80017c2:	f7ff faaf 	bl	8000d24 <readReg16Bit_x>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fc5c 	bl	8002086 <decodeTimeout>
 80017ce:	4603      	mov	r3, r0
 80017d0:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	4619      	mov	r1, r3
 80017e2:	4610      	mov	r0, r2
 80017e4:	f000 fc8e 	bl	8002104 <timeoutMclksToMicroseconds>
 80017e8:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod_x(VcselPeriodFinalRange, sensorInfo->address);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	7a5b      	ldrb	r3, [r3, #9]
 80017f2:	4619      	mov	r1, r3
 80017f4:	2001      	movs	r0, #1
 80017f6:	f000 fa33 	bl	8001c60 <getVcselPulsePeriod_x>
 80017fa:	4603      	mov	r3, r0
 80017fc:	461a      	mov	r2, r3
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit_x(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, sensorInfo->address));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	7a5b      	ldrb	r3, [r3, #9]
 8001806:	4619      	mov	r1, r3
 8001808:	2071      	movs	r0, #113	@ 0x71
 800180a:	f7ff fa8b 	bl	8000d24 <readReg16Bit_x>
 800180e:	4603      	mov	r3, r0
 8001810:	4618      	mov	r0, r3
 8001812:	f000 fc38 	bl	8002086 <decodeTimeout>
 8001816:	4603      	mov	r3, r0
 8001818:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	811a      	strh	r2, [r3, #8]

  if (enables->pre_range)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	78db      	ldrb	r3, [r3, #3]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d007      	beq.n	8001836 <getSequenceStepTimeouts_x+0xca>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	891a      	ldrh	r2, [r3, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	88db      	ldrh	r3, [r3, #6]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	b29a      	uxth	r2, r3
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 800183e:	b2db      	uxtb	r3, r3
 8001840:	4619      	mov	r1, r3
 8001842:	4610      	mov	r0, r2
 8001844:	f000 fc5e 	bl	8002104 <timeoutMclksToMicroseconds>
 8001848:	4602      	mov	r2, r0
  timeouts->final_range_us =
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	615a      	str	r2, [r3, #20]
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <setVcselPulsePeriod_x>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
bool setVcselPulsePeriod_x(vcselPeriodType type, uint8_t period_pclks, statInfo_t_VL53L0X *sensorInfo)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08c      	sub	sp, #48	@ 0x30
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	603a      	str	r2, [r7, #0]
 8001862:	71fb      	strb	r3, [r7, #7]
 8001864:	460b      	mov	r3, r1
 8001866:	71bb      	strb	r3, [r7, #6]
  uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 8001868:	79bb      	ldrb	r3, [r7, #6]
 800186a:	085b      	lsrs	r3, r3, #1
 800186c:	b2db      	uxtb	r3, r3
 800186e:	3b01      	subs	r3, #1
 8001870:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  getSequenceStepEnables_x(&enables, sensorInfo->address);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	7a5b      	ldrb	r3, [r3, #9]
 8001878:	461a      	mov	r2, r3
 800187a:	f107 0320 	add.w	r3, r7, #32
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff3d 	bl	8001700 <getSequenceStepEnables_x>
  getSequenceStepTimeouts_x(&enables, &timeouts, sensorInfo->address);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	7a5b      	ldrb	r3, [r3, #9]
 800188a:	461a      	mov	r2, r3
 800188c:	f107 0108 	add.w	r1, r7, #8
 8001890:	f107 0320 	add.w	r3, r7, #32
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff69 	bl	800176c <getSequenceStepTimeouts_x>
  //
  // For the MSRC timeout, the same applies - this timeout being
  // dependant on the pre-range vcsel period."


  if (type == VcselPeriodPreRange)
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d17b      	bne.n	8001998 <setVcselPulsePeriod_x+0x140>
  {
    // "Set phase check limits"
    switch (period_pclks)
 80018a0:	79bb      	ldrb	r3, [r7, #6]
 80018a2:	3b0c      	subs	r3, #12
 80018a4:	2b06      	cmp	r3, #6
 80018a6:	d831      	bhi.n	800190c <setVcselPulsePeriod_x+0xb4>
 80018a8:	a201      	add	r2, pc, #4	@ (adr r2, 80018b0 <setVcselPulsePeriod_x+0x58>)
 80018aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ae:	bf00      	nop
 80018b0:	080018cd 	.word	0x080018cd
 80018b4:	0800190d 	.word	0x0800190d
 80018b8:	080018dd 	.word	0x080018dd
 80018bc:	0800190d 	.word	0x0800190d
 80018c0:	080018ed 	.word	0x080018ed
 80018c4:	0800190d 	.word	0x0800190d
 80018c8:	080018fd 	.word	0x080018fd
    {
      case 12:
        writeReg_x(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18, sensorInfo->address);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	7a5b      	ldrb	r3, [r3, #9]
 80018d0:	461a      	mov	r2, r3
 80018d2:	2118      	movs	r1, #24
 80018d4:	2057      	movs	r0, #87	@ 0x57
 80018d6:	f7ff f9ab 	bl	8000c30 <writeReg_x>
        break;
 80018da:	e020      	b.n	800191e <setVcselPulsePeriod_x+0xc6>

      case 14:
        writeReg_x(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30, sensorInfo->address);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	7a5b      	ldrb	r3, [r3, #9]
 80018e0:	461a      	mov	r2, r3
 80018e2:	2130      	movs	r1, #48	@ 0x30
 80018e4:	2057      	movs	r0, #87	@ 0x57
 80018e6:	f7ff f9a3 	bl	8000c30 <writeReg_x>
        break;
 80018ea:	e018      	b.n	800191e <setVcselPulsePeriod_x+0xc6>

      case 16:
        writeReg_x(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40, sensorInfo->address);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	7a5b      	ldrb	r3, [r3, #9]
 80018f0:	461a      	mov	r2, r3
 80018f2:	2140      	movs	r1, #64	@ 0x40
 80018f4:	2057      	movs	r0, #87	@ 0x57
 80018f6:	f7ff f99b 	bl	8000c30 <writeReg_x>
        break;
 80018fa:	e010      	b.n	800191e <setVcselPulsePeriod_x+0xc6>

      case 18:
        writeReg_x(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50, sensorInfo->address);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	7a5b      	ldrb	r3, [r3, #9]
 8001900:	461a      	mov	r2, r3
 8001902:	2150      	movs	r1, #80	@ 0x50
 8001904:	2057      	movs	r0, #87	@ 0x57
 8001906:	f7ff f993 	bl	8000c30 <writeReg_x>
        break;
 800190a:	e008      	b.n	800191e <setVcselPulsePeriod_x+0xc6>

      default:
    	  writeReg_x(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30, sensorInfo->address);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	7a5b      	ldrb	r3, [r3, #9]
 8001910:	461a      	mov	r2, r3
 8001912:	2130      	movs	r1, #48	@ 0x30
 8001914:	2057      	movs	r0, #87	@ 0x57
 8001916:	f7ff f98b 	bl	8000c30 <writeReg_x>
        return false;
 800191a:	2300      	movs	r3, #0
 800191c:	e19a      	b.n	8001c54 <setVcselPulsePeriod_x+0x3fc>
    }
    writeReg_x(PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08, sensorInfo->address);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	7a5b      	ldrb	r3, [r3, #9]
 8001922:	461a      	mov	r2, r3
 8001924:	2108      	movs	r1, #8
 8001926:	2056      	movs	r0, #86	@ 0x56
 8001928:	f7ff f982 	bl	8000c30 <writeReg_x>

    // apply new VCSEL period
    writeReg_x(PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg, sensorInfo->address);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	7a5b      	ldrb	r3, [r3, #9]
 8001930:	461a      	mov	r2, r3
 8001932:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001936:	4619      	mov	r1, r3
 8001938:	2050      	movs	r0, #80	@ 0x50
 800193a:	f7ff f979 	bl	8000c30 <writeReg_x>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)

    uint16_t new_pre_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	79ba      	ldrb	r2, [r7, #6]
 8001942:	4611      	mov	r1, r2
 8001944:	4618      	mov	r0, r3
 8001946:	f000 fc05 	bl	8002154 <timeoutMicrosecondsToMclks>
 800194a:	4603      	mov	r3, r0
    uint16_t new_pre_range_timeout_mclks =
 800194c:	857b      	strh	r3, [r7, #42]	@ 0x2a

    writeReg16Bit_x(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 800194e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001950:	4618      	mov	r0, r3
 8001952:	f000 fbac 	bl	80020ae <encodeTimeout>
 8001956:	4603      	mov	r3, r0
 8001958:	4619      	mov	r1, r3
      encodeTimeout(new_pre_range_timeout_mclks), sensorInfo->address);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	7a5b      	ldrb	r3, [r3, #9]
    writeReg16Bit_x(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 800195e:	461a      	mov	r2, r3
 8001960:	2051      	movs	r0, #81	@ 0x51
 8001962:	f7ff f98d 	bl	8000c80 <writeReg16Bit_x>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)

    uint16_t new_msrc_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	79ba      	ldrb	r2, [r7, #6]
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f000 fbf1 	bl	8002154 <timeoutMicrosecondsToMclks>
 8001972:	4603      	mov	r3, r0
    uint16_t new_msrc_timeout_mclks =
 8001974:	853b      	strh	r3, [r7, #40]	@ 0x28

    writeReg_x(MSRC_CONFIG_TIMEOUT_MACROP,
 8001976:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001978:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800197c:	d804      	bhi.n	8001988 <setVcselPulsePeriod_x+0x130>
      (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1), sensorInfo->address);
 800197e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001980:	b2db      	uxtb	r3, r3
    writeReg_x(MSRC_CONFIG_TIMEOUT_MACROP,
 8001982:	3b01      	subs	r3, #1
 8001984:	b2db      	uxtb	r3, r3
 8001986:	e000      	b.n	800198a <setVcselPulsePeriod_x+0x132>
 8001988:	23ff      	movs	r3, #255	@ 0xff
      (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1), sensorInfo->address);
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	7a52      	ldrb	r2, [r2, #9]
    writeReg_x(MSRC_CONFIG_TIMEOUT_MACROP,
 800198e:	4619      	mov	r1, r3
 8001990:	2046      	movs	r0, #70	@ 0x46
 8001992:	f7ff f94d 	bl	8000c30 <writeReg_x>
 8001996:	e135      	b.n	8001c04 <setVcselPulsePeriod_x+0x3ac>

    // set_sequence_step_timeout() end
  }
  else if (type == VcselPeriodFinalRange)
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	2b01      	cmp	r3, #1
 800199c:	f040 8130 	bne.w	8001c00 <setVcselPulsePeriod_x+0x3a8>
  {
    switch (period_pclks)
 80019a0:	79bb      	ldrb	r3, [r7, #6]
 80019a2:	3b08      	subs	r3, #8
 80019a4:	2b06      	cmp	r3, #6
 80019a6:	f200 80d2 	bhi.w	8001b4e <setVcselPulsePeriod_x+0x2f6>
 80019aa:	a201      	add	r2, pc, #4	@ (adr r2, 80019b0 <setVcselPulsePeriod_x+0x158>)
 80019ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b0:	080019cd 	.word	0x080019cd
 80019b4:	08001b4f 	.word	0x08001b4f
 80019b8:	08001a23 	.word	0x08001a23
 80019bc:	08001b4f 	.word	0x08001b4f
 80019c0:	08001a87 	.word	0x08001a87
 80019c4:	08001b4f 	.word	0x08001b4f
 80019c8:	08001aeb 	.word	0x08001aeb
    {
      case 8:
        writeReg_x(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08, sensorInfo->address);
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	7a5b      	ldrb	r3, [r3, #9]
 80019d0:	461a      	mov	r2, r3
 80019d2:	2108      	movs	r1, #8
 80019d4:	2047      	movs	r0, #71	@ 0x47
 80019d6:	f7ff f92b 	bl	8000c30 <writeReg_x>
        writeReg_x(GLOBAL_CONFIG_VCSEL_WIDTH, 0x02, sensorInfo->address);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	7a5b      	ldrb	r3, [r3, #9]
 80019de:	461a      	mov	r2, r3
 80019e0:	2102      	movs	r1, #2
 80019e2:	2032      	movs	r0, #50	@ 0x32
 80019e4:	f7ff f924 	bl	8000c30 <writeReg_x>
        writeReg_x(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C, sensorInfo->address);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	7a5b      	ldrb	r3, [r3, #9]
 80019ec:	461a      	mov	r2, r3
 80019ee:	210c      	movs	r1, #12
 80019f0:	2030      	movs	r0, #48	@ 0x30
 80019f2:	f7ff f91d 	bl	8000c30 <writeReg_x>
        writeReg_x(0xFF, 0x01, sensorInfo->address);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	7a5b      	ldrb	r3, [r3, #9]
 80019fa:	461a      	mov	r2, r3
 80019fc:	2101      	movs	r1, #1
 80019fe:	20ff      	movs	r0, #255	@ 0xff
 8001a00:	f7ff f916 	bl	8000c30 <writeReg_x>
        writeReg_x(ALGO_PHASECAL_LIM, 0x30, sensorInfo->address);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	7a5b      	ldrb	r3, [r3, #9]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	2130      	movs	r1, #48	@ 0x30
 8001a0c:	2030      	movs	r0, #48	@ 0x30
 8001a0e:	f7ff f90f 	bl	8000c30 <writeReg_x>
        writeReg_x(0xFF, 0x00, sensorInfo->address);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	7a5b      	ldrb	r3, [r3, #9]
 8001a16:	461a      	mov	r2, r3
 8001a18:	2100      	movs	r1, #0
 8001a1a:	20ff      	movs	r0, #255	@ 0xff
 8001a1c:	f7ff f908 	bl	8000c30 <writeReg_x>
        break;
 8001a20:	e0c8      	b.n	8001bb4 <setVcselPulsePeriod_x+0x35c>

      case 10:
        writeReg_x(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28, sensorInfo->address);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	7a5b      	ldrb	r3, [r3, #9]
 8001a26:	461a      	mov	r2, r3
 8001a28:	2128      	movs	r1, #40	@ 0x28
 8001a2a:	2048      	movs	r0, #72	@ 0x48
 8001a2c:	f7ff f900 	bl	8000c30 <writeReg_x>
        writeReg_x(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08, sensorInfo->address);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	7a5b      	ldrb	r3, [r3, #9]
 8001a34:	461a      	mov	r2, r3
 8001a36:	2108      	movs	r1, #8
 8001a38:	2047      	movs	r0, #71	@ 0x47
 8001a3a:	f7ff f8f9 	bl	8000c30 <writeReg_x>
        writeReg_x(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03, sensorInfo->address);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	7a5b      	ldrb	r3, [r3, #9]
 8001a42:	461a      	mov	r2, r3
 8001a44:	2103      	movs	r1, #3
 8001a46:	2032      	movs	r0, #50	@ 0x32
 8001a48:	f7ff f8f2 	bl	8000c30 <writeReg_x>
        writeReg_x(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09, sensorInfo->address);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	7a5b      	ldrb	r3, [r3, #9]
 8001a50:	461a      	mov	r2, r3
 8001a52:	2109      	movs	r1, #9
 8001a54:	2030      	movs	r0, #48	@ 0x30
 8001a56:	f7ff f8eb 	bl	8000c30 <writeReg_x>
        writeReg_x(0xFF, 0x01, sensorInfo->address);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	7a5b      	ldrb	r3, [r3, #9]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	2101      	movs	r1, #1
 8001a62:	20ff      	movs	r0, #255	@ 0xff
 8001a64:	f7ff f8e4 	bl	8000c30 <writeReg_x>
        writeReg_x(ALGO_PHASECAL_LIM, 0x20, sensorInfo->address);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	7a5b      	ldrb	r3, [r3, #9]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	2120      	movs	r1, #32
 8001a70:	2030      	movs	r0, #48	@ 0x30
 8001a72:	f7ff f8dd 	bl	8000c30 <writeReg_x>
        writeReg_x(0xFF, 0x00, sensorInfo->address);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	7a5b      	ldrb	r3, [r3, #9]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	20ff      	movs	r0, #255	@ 0xff
 8001a80:	f7ff f8d6 	bl	8000c30 <writeReg_x>
        break;
 8001a84:	e096      	b.n	8001bb4 <setVcselPulsePeriod_x+0x35c>

      case 12:
        writeReg_x(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38 ,sensorInfo->address);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	7a5b      	ldrb	r3, [r3, #9]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	2138      	movs	r1, #56	@ 0x38
 8001a8e:	2048      	movs	r0, #72	@ 0x48
 8001a90:	f7ff f8ce 	bl	8000c30 <writeReg_x>
        writeReg_x(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08, sensorInfo->address);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	7a5b      	ldrb	r3, [r3, #9]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	2108      	movs	r1, #8
 8001a9c:	2047      	movs	r0, #71	@ 0x47
 8001a9e:	f7ff f8c7 	bl	8000c30 <writeReg_x>
        writeReg_x(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03, sensorInfo->address);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	7a5b      	ldrb	r3, [r3, #9]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	2103      	movs	r1, #3
 8001aaa:	2032      	movs	r0, #50	@ 0x32
 8001aac:	f7ff f8c0 	bl	8000c30 <writeReg_x>
        writeReg_x(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08, sensorInfo->address);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	7a5b      	ldrb	r3, [r3, #9]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	2108      	movs	r1, #8
 8001ab8:	2030      	movs	r0, #48	@ 0x30
 8001aba:	f7ff f8b9 	bl	8000c30 <writeReg_x>
        writeReg_x(0xFF, 0x01, sensorInfo->address);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	7a5b      	ldrb	r3, [r3, #9]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	20ff      	movs	r0, #255	@ 0xff
 8001ac8:	f7ff f8b2 	bl	8000c30 <writeReg_x>
        writeReg_x(ALGO_PHASECAL_LIM, 0x20, sensorInfo->address);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	7a5b      	ldrb	r3, [r3, #9]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	2120      	movs	r1, #32
 8001ad4:	2030      	movs	r0, #48	@ 0x30
 8001ad6:	f7ff f8ab 	bl	8000c30 <writeReg_x>
        writeReg_x(0xFF, 0x00, sensorInfo->address);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	7a5b      	ldrb	r3, [r3, #9]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	20ff      	movs	r0, #255	@ 0xff
 8001ae4:	f7ff f8a4 	bl	8000c30 <writeReg_x>
        break;
 8001ae8:	e064      	b.n	8001bb4 <setVcselPulsePeriod_x+0x35c>

      case 14:
        writeReg_x(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48, sensorInfo->address);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	7a5b      	ldrb	r3, [r3, #9]
 8001aee:	461a      	mov	r2, r3
 8001af0:	2148      	movs	r1, #72	@ 0x48
 8001af2:	2048      	movs	r0, #72	@ 0x48
 8001af4:	f7ff f89c 	bl	8000c30 <writeReg_x>
        writeReg_x(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08, sensorInfo->address);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	7a5b      	ldrb	r3, [r3, #9]
 8001afc:	461a      	mov	r2, r3
 8001afe:	2108      	movs	r1, #8
 8001b00:	2047      	movs	r0, #71	@ 0x47
 8001b02:	f7ff f895 	bl	8000c30 <writeReg_x>
        writeReg_x(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03, sensorInfo->address);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	7a5b      	ldrb	r3, [r3, #9]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	2103      	movs	r1, #3
 8001b0e:	2032      	movs	r0, #50	@ 0x32
 8001b10:	f7ff f88e 	bl	8000c30 <writeReg_x>
        writeReg_x(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07, sensorInfo->address);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	7a5b      	ldrb	r3, [r3, #9]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2107      	movs	r1, #7
 8001b1c:	2030      	movs	r0, #48	@ 0x30
 8001b1e:	f7ff f887 	bl	8000c30 <writeReg_x>
        writeReg_x(0xFF, 0x01, sensorInfo->address);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	7a5b      	ldrb	r3, [r3, #9]
 8001b26:	461a      	mov	r2, r3
 8001b28:	2101      	movs	r1, #1
 8001b2a:	20ff      	movs	r0, #255	@ 0xff
 8001b2c:	f7ff f880 	bl	8000c30 <writeReg_x>
        writeReg_x(ALGO_PHASECAL_LIM, 0x20 ,sensorInfo->address);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	7a5b      	ldrb	r3, [r3, #9]
 8001b34:	461a      	mov	r2, r3
 8001b36:	2120      	movs	r1, #32
 8001b38:	2030      	movs	r0, #48	@ 0x30
 8001b3a:	f7ff f879 	bl	8000c30 <writeReg_x>
        writeReg_x(0xFF, 0x00, sensorInfo->address);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	7a5b      	ldrb	r3, [r3, #9]
 8001b42:	461a      	mov	r2, r3
 8001b44:	2100      	movs	r1, #0
 8001b46:	20ff      	movs	r0, #255	@ 0xff
 8001b48:	f7ff f872 	bl	8000c30 <writeReg_x>

        break;
 8001b4c:	e032      	b.n	8001bb4 <setVcselPulsePeriod_x+0x35c>

      default:
          writeReg_x(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48, sensorInfo->address);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	7a5b      	ldrb	r3, [r3, #9]
 8001b52:	461a      	mov	r2, r3
 8001b54:	2148      	movs	r1, #72	@ 0x48
 8001b56:	2048      	movs	r0, #72	@ 0x48
 8001b58:	f7ff f86a 	bl	8000c30 <writeReg_x>
          writeReg_x(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08, sensorInfo->address);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	7a5b      	ldrb	r3, [r3, #9]
 8001b60:	461a      	mov	r2, r3
 8001b62:	2108      	movs	r1, #8
 8001b64:	2047      	movs	r0, #71	@ 0x47
 8001b66:	f7ff f863 	bl	8000c30 <writeReg_x>
          writeReg_x(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03, sensorInfo->address);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	7a5b      	ldrb	r3, [r3, #9]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	2103      	movs	r1, #3
 8001b72:	2032      	movs	r0, #50	@ 0x32
 8001b74:	f7ff f85c 	bl	8000c30 <writeReg_x>
          writeReg_x(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07, sensorInfo->address);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	7a5b      	ldrb	r3, [r3, #9]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	2107      	movs	r1, #7
 8001b80:	2030      	movs	r0, #48	@ 0x30
 8001b82:	f7ff f855 	bl	8000c30 <writeReg_x>
          writeReg_x(0xFF, 0x01, sensorInfo->address);
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	7a5b      	ldrb	r3, [r3, #9]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	20ff      	movs	r0, #255	@ 0xff
 8001b90:	f7ff f84e 	bl	8000c30 <writeReg_x>
          writeReg_x(ALGO_PHASECAL_LIM, 0x20 ,sensorInfo->address);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	7a5b      	ldrb	r3, [r3, #9]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	2120      	movs	r1, #32
 8001b9c:	2030      	movs	r0, #48	@ 0x30
 8001b9e:	f7ff f847 	bl	8000c30 <writeReg_x>
          writeReg_x(0xFF, 0x00, sensorInfo->address);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	7a5b      	ldrb	r3, [r3, #9]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	2100      	movs	r1, #0
 8001baa:	20ff      	movs	r0, #255	@ 0xff
 8001bac:	f7ff f840 	bl	8000c30 <writeReg_x>
        return false;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	e04f      	b.n	8001c54 <setVcselPulsePeriod_x+0x3fc>
    }

    // apply new VCSEL period
    writeReg_x(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg, sensorInfo->address);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	7a5b      	ldrb	r3, [r3, #9]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	2070      	movs	r0, #112	@ 0x70
 8001bc2:	f7ff f835 	bl	8000c30 <writeReg_x>
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t new_final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	79ba      	ldrb	r2, [r7, #6]
 8001bca:	4611      	mov	r1, r2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f000 fac1 	bl	8002154 <timeoutMicrosecondsToMclks>
 8001bd2:	4603      	mov	r3, r0
    uint16_t new_final_range_timeout_mclks =
 8001bd4:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    if (enables.pre_range)
 8001bd6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <setVcselPulsePeriod_x+0x38e>
    {
      new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 8001bde:	89fa      	ldrh	r2, [r7, #14]
 8001be0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001be2:	4413      	add	r3, r2
 8001be4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    }

    writeReg16Bit_x(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8001be6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001be8:	4618      	mov	r0, r3
 8001bea:	f000 fa60 	bl	80020ae <encodeTimeout>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4619      	mov	r1, r3
      encodeTimeout(new_final_range_timeout_mclks), sensorInfo->address);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	7a5b      	ldrb	r3, [r3, #9]
    writeReg16Bit_x(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	2071      	movs	r0, #113	@ 0x71
 8001bfa:	f7ff f841 	bl	8000c80 <writeReg16Bit_x>
 8001bfe:	e001      	b.n	8001c04 <setVcselPulsePeriod_x+0x3ac>
    // set_sequence_step_timeout end
  }
  else
  {
    // invalid type
    return false;
 8001c00:	2300      	movs	r3, #0
 8001c02:	e027      	b.n	8001c54 <setVcselPulsePeriod_x+0x3fc>
  }

  // "Finally, the timing budget must be re-applied"

  setMeasurementTimingBudget_x(g_measTimBudUs, sensorInfo->address);
 8001c04:	4b15      	ldr	r3, [pc, #84]	@ (8001c5c <setVcselPulsePeriod_x+0x404>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	7a5b      	ldrb	r3, [r3, #9]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4610      	mov	r0, r2
 8001c10:	f7ff fcd4 	bl	80015bc <setMeasurementTimingBudget_x>

  // "Perform the phase calibration. This is needed after changing on vcsel period."
  // VL53L0X_perform_phase_calibration() begin

  uint8_t sequence_config = readReg_x(SYSTEM_SEQUENCE_CONFIG,sensorInfo->address);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	7a5b      	ldrb	r3, [r3, #9]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	f7ff f858 	bl	8000cd0 <readReg_x>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  writeReg_x(SYSTEM_SEQUENCE_CONFIG, 0x02, sensorInfo->address);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	7a5b      	ldrb	r3, [r3, #9]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	2102      	movs	r1, #2
 8001c2e:	2001      	movs	r0, #1
 8001c30:	f7fe fffe 	bl	8000c30 <writeReg_x>
  performSingleRefCalibration_x(0x0, sensorInfo->address);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	7a5b      	ldrb	r3, [r3, #9]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f000 faf0 	bl	8002220 <performSingleRefCalibration_x>
  writeReg_x(SYSTEM_SEQUENCE_CONFIG, sequence_config, sensorInfo->address);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	7a5b      	ldrb	r3, [r3, #9]
 8001c44:	461a      	mov	r2, r3
 8001c46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f7fe ffef 	bl	8000c30 <writeReg_x>

  // VL53L0X_perform_phase_calibration() end

  return true;
 8001c52:	2301      	movs	r3, #1
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3730      	adds	r7, #48	@ 0x30
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000084 	.word	0x20000084

08001c60 <getVcselPulsePeriod_x>:

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t getVcselPulsePeriod_x(vcselPeriodType type, statInfo_t_VL53L0X *sensorInfo)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	6039      	str	r1, [r7, #0]
 8001c6a:	71fb      	strb	r3, [r7, #7]
  if (type == VcselPeriodPreRange)
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10b      	bne.n	8001c8a <getVcselPulsePeriod_x+0x2a>
  {
    return decodeVcselPeriod(readReg_x(PRE_RANGE_CONFIG_VCSEL_PERIOD, sensorInfo->address));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	7a5b      	ldrb	r3, [r3, #9]
 8001c76:	4619      	mov	r1, r3
 8001c78:	2050      	movs	r0, #80	@ 0x50
 8001c7a:	f7ff f829 	bl	8000cd0 <readReg_x>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	3301      	adds	r3, #1
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	e00f      	b.n	8001caa <getVcselPulsePeriod_x+0x4a>
  }
  else if (type == VcselPeriodFinalRange)
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d10b      	bne.n	8001ca8 <getVcselPulsePeriod_x+0x48>
  {
    return decodeVcselPeriod(readReg_x(FINAL_RANGE_CONFIG_VCSEL_PERIOD, sensorInfo->address));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	7a5b      	ldrb	r3, [r3, #9]
 8001c94:	4619      	mov	r1, r3
 8001c96:	2070      	movs	r0, #112	@ 0x70
 8001c98:	f7ff f81a 	bl	8000cd0 <readReg_x>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	e000      	b.n	8001caa <getVcselPulsePeriod_x+0x4a>
  }
  else { return 255; }
 8001ca8:	23ff      	movs	r3, #255	@ 0xff
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <readRangeContinuousMillimeters>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t readRangeContinuousMillimeters( statInfo_t_VL53L0X *extraStats ) {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint8_t tempBuffer[12];
  uint16_t temp;
  startTimeout();
 8001cbc:	f001 f900 	bl	8002ec0 <HAL_GetTick>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	4b35      	ldr	r3, [pc, #212]	@ (8001d9c <readRangeContinuousMillimeters+0xe8>)
 8001cc6:	801a      	strh	r2, [r3, #0]
  while ((readReg_x(RESULT_INTERRUPT_STATUS, extraStats) & 0x07) == 0) {
 8001cc8:	e015      	b.n	8001cf6 <readRangeContinuousMillimeters+0x42>
    if (checkTimeoutExpired())
 8001cca:	4b35      	ldr	r3, [pc, #212]	@ (8001da0 <readRangeContinuousMillimeters+0xec>)
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d011      	beq.n	8001cf6 <readRangeContinuousMillimeters+0x42>
 8001cd2:	f001 f8f5 	bl	8002ec0 <HAL_GetTick>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4b2f      	ldr	r3, [pc, #188]	@ (8001d9c <readRangeContinuousMillimeters+0xe8>)
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	4a2f      	ldr	r2, [pc, #188]	@ (8001da0 <readRangeContinuousMillimeters+0xec>)
 8001ce4:	8812      	ldrh	r2, [r2, #0]
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	dd05      	ble.n	8001cf6 <readRangeContinuousMillimeters+0x42>
    {
      g_isTimeout = true;
 8001cea:	4b2e      	ldr	r3, [pc, #184]	@ (8001da4 <readRangeContinuousMillimeters+0xf0>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	701a      	strb	r2, [r3, #0]
      return 65535;
 8001cf0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001cf4:	e04d      	b.n	8001d92 <readRangeContinuousMillimeters+0xde>
  while ((readReg_x(RESULT_INTERRUPT_STATUS, extraStats) & 0x07) == 0) {
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	2013      	movs	r0, #19
 8001cfa:	f7fe ffe9 	bl	8000cd0 <readReg_x>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0e0      	beq.n	8001cca <readRangeContinuousMillimeters+0x16>
    }
  }

  if( extraStats == 0 ){
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d106      	bne.n	8001d1c <readRangeContinuousMillimeters+0x68>
    // assumptions: Linearity Corrective Gain is 1000 (default);
    // fractional ranging is not enabled
    temp = readReg16Bit_x(RESULT_RANGE_STATUS + 10, extraStats);
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	201e      	movs	r0, #30
 8001d12:	f7ff f807 	bl	8000d24 <readReg16Bit_x>
 8001d16:	4603      	mov	r3, r0
 8001d18:	82fb      	strh	r3, [r7, #22]
 8001d1a:	e034      	b.n	8001d86 <readRangeContinuousMillimeters+0xd2>
    //   4: 0 ?
    //   5: ???
    // 6,7: signal count rate [mcps], uint16_t, fixpoint9.7
    // 9,8: AmbientRateRtnMegaCps  [mcps], uint16_t, fixpoimt9.7
    // A,B: uncorrected distance [mm], uint16_t
    readMulti_x(0x14, tempBuffer, 12, extraStats);
 8001d1c:	f107 0108 	add.w	r1, r7, #8
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	220c      	movs	r2, #12
 8001d24:	2014      	movs	r0, #20
 8001d26:	f7ff f827 	bl	8000d78 <readMulti_x>
    extraStats->rangeStatus =  tempBuffer[0x00]>>3;
 8001d2a:	7a3b      	ldrb	r3, [r7, #8]
 8001d2c:	08db      	lsrs	r3, r3, #3
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	721a      	strb	r2, [r3, #8]
    extraStats->spadCnt     = (tempBuffer[0x02]<<8) | tempBuffer[0x03];
 8001d34:	7abb      	ldrb	r3, [r7, #10]
 8001d36:	021b      	lsls	r3, r3, #8
 8001d38:	b21a      	sxth	r2, r3
 8001d3a:	7afb      	ldrb	r3, [r7, #11]
 8001d3c:	b21b      	sxth	r3, r3
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	80da      	strh	r2, [r3, #6]
    extraStats->signalCnt   = (tempBuffer[0x06]<<8) | tempBuffer[0x07];
 8001d48:	7bbb      	ldrb	r3, [r7, #14]
 8001d4a:	021b      	lsls	r3, r3, #8
 8001d4c:	b21a      	sxth	r2, r3
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	b21b      	sxth	r3, r3
 8001d52:	4313      	orrs	r3, r2
 8001d54:	b21b      	sxth	r3, r3
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	805a      	strh	r2, [r3, #2]
    extraStats->ambientCnt  = (tempBuffer[0x08]<<8) | tempBuffer[0x09];    
 8001d5c:	7c3b      	ldrb	r3, [r7, #16]
 8001d5e:	021b      	lsls	r3, r3, #8
 8001d60:	b21a      	sxth	r2, r3
 8001d62:	7c7b      	ldrb	r3, [r7, #17]
 8001d64:	b21b      	sxth	r3, r3
 8001d66:	4313      	orrs	r3, r2
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	809a      	strh	r2, [r3, #4]
    temp                    = (tempBuffer[0x0A]<<8) | tempBuffer[0x0B];
 8001d70:	7cbb      	ldrb	r3, [r7, #18]
 8001d72:	021b      	lsls	r3, r3, #8
 8001d74:	b21a      	sxth	r2, r3
 8001d76:	7cfb      	ldrb	r3, [r7, #19]
 8001d78:	b21b      	sxth	r3, r3
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	b21b      	sxth	r3, r3
 8001d7e:	82fb      	strh	r3, [r7, #22]
    extraStats->rawDistance = temp;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	8afa      	ldrh	r2, [r7, #22]
 8001d84:	801a      	strh	r2, [r3, #0]
  }
  writeReg_x(SYSTEM_INTERRUPT_CLEAR, 0x01, extraStats);
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	2101      	movs	r1, #1
 8001d8a:	200b      	movs	r0, #11
 8001d8c:	f7fe ff50 	bl	8000c30 <writeReg_x>
  return temp;
 8001d90:	8afb      	ldrh	r3, [r7, #22]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000080 	.word	0x20000080
 8001da0:	2000007c 	.word	0x2000007c
 8001da4:	2000007e 	.word	0x2000007e

08001da8 <readRangeSingleMillimeters>:

// Performs a single-shot range measurement and returns the reading in
// millimeters
// based on VL53L0X_PerformSingleRangingMeasurement()
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t readRangeSingleMillimeters( statInfo_t_VL53L0X *extraStats ) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  writeReg_x(0x80, 0x01, extraStats->address);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	7a5b      	ldrb	r3, [r3, #9]
 8001db4:	461a      	mov	r2, r3
 8001db6:	2101      	movs	r1, #1
 8001db8:	2080      	movs	r0, #128	@ 0x80
 8001dba:	f7fe ff39 	bl	8000c30 <writeReg_x>
  writeReg_x(0xFF, 0x01, extraStats->address);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	7a5b      	ldrb	r3, [r3, #9]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	20ff      	movs	r0, #255	@ 0xff
 8001dc8:	f7fe ff32 	bl	8000c30 <writeReg_x>
  writeReg_x(0x00, 0x00, extraStats->address);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	7a5b      	ldrb	r3, [r3, #9]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f7fe ff2b 	bl	8000c30 <writeReg_x>
  writeReg_x(0x91, g_stopVariable, extraStats->address);
 8001dda:	4b14      	ldr	r3, [pc, #80]	@ (8001e2c <readRangeSingleMillimeters+0x84>)
 8001ddc:	7819      	ldrb	r1, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	7a5b      	ldrb	r3, [r3, #9]
 8001de2:	461a      	mov	r2, r3
 8001de4:	2091      	movs	r0, #145	@ 0x91
 8001de6:	f7fe ff23 	bl	8000c30 <writeReg_x>
  writeReg_x(0x00, 0x01, extraStats);
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	2101      	movs	r1, #1
 8001dee:	2000      	movs	r0, #0
 8001df0:	f7fe ff1e 	bl	8000c30 <writeReg_x>
  writeReg_x(0xFF, 0x00,  extraStats->address);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	7a5b      	ldrb	r3, [r3, #9]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	20ff      	movs	r0, #255	@ 0xff
 8001dfe:	f7fe ff17 	bl	8000c30 <writeReg_x>
  writeReg_x(0x80, 0x00, extraStats->address);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	7a5b      	ldrb	r3, [r3, #9]
 8001e06:	461a      	mov	r2, r3
 8001e08:	2100      	movs	r1, #0
 8001e0a:	2080      	movs	r0, #128	@ 0x80
 8001e0c:	f7fe ff10 	bl	8000c30 <writeReg_x>
  writeReg_x(SYSRANGE_START, 0x01, extraStats);
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	2101      	movs	r1, #1
 8001e14:	2000      	movs	r0, #0
 8001e16:	f7fe ff0b 	bl	8000c30 <writeReg_x>
    }
  }*/



  return readRangeContinuousMillimeters( extraStats );
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff ff4a 	bl	8001cb4 <readRangeContinuousMillimeters>
 8001e20:	4603      	mov	r3, r0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000082 	.word	0x20000082

08001e30 <getSpadInfo>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint8_t tmp;

  writeReg(0x80, 0x01);
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	2080      	movs	r0, #128	@ 0x80
 8001e3e:	f7fe fdf3 	bl	8000a28 <writeReg>
  writeReg(0xFF, 0x01);
 8001e42:	2101      	movs	r1, #1
 8001e44:	20ff      	movs	r0, #255	@ 0xff
 8001e46:	f7fe fdef 	bl	8000a28 <writeReg>
  writeReg(0x00, 0x00);
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f7fe fdeb 	bl	8000a28 <writeReg>

  writeReg(0xFF, 0x06);
 8001e52:	2106      	movs	r1, #6
 8001e54:	20ff      	movs	r0, #255	@ 0xff
 8001e56:	f7fe fde7 	bl	8000a28 <writeReg>
  writeReg(0x83, readReg(0x83) | 0x04);
 8001e5a:	2083      	movs	r0, #131	@ 0x83
 8001e5c:	f7fe fe38 	bl	8000ad0 <readReg>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f043 0304 	orr.w	r3, r3, #4
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	4619      	mov	r1, r3
 8001e6a:	2083      	movs	r0, #131	@ 0x83
 8001e6c:	f7fe fddc 	bl	8000a28 <writeReg>
  writeReg(0xFF, 0x07);
 8001e70:	2107      	movs	r1, #7
 8001e72:	20ff      	movs	r0, #255	@ 0xff
 8001e74:	f7fe fdd8 	bl	8000a28 <writeReg>
  writeReg(0x81, 0x01);
 8001e78:	2101      	movs	r1, #1
 8001e7a:	2081      	movs	r0, #129	@ 0x81
 8001e7c:	f7fe fdd4 	bl	8000a28 <writeReg>

  writeReg(0x80, 0x01);
 8001e80:	2101      	movs	r1, #1
 8001e82:	2080      	movs	r0, #128	@ 0x80
 8001e84:	f7fe fdd0 	bl	8000a28 <writeReg>

  writeReg(0x94, 0x6b);
 8001e88:	216b      	movs	r1, #107	@ 0x6b
 8001e8a:	2094      	movs	r0, #148	@ 0x94
 8001e8c:	f7fe fdcc 	bl	8000a28 <writeReg>
  writeReg(0x83, 0x00);
 8001e90:	2100      	movs	r1, #0
 8001e92:	2083      	movs	r0, #131	@ 0x83
 8001e94:	f7fe fdc8 	bl	8000a28 <writeReg>
  startTimeout();
 8001e98:	f001 f812 	bl	8002ec0 <HAL_GetTick>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f50 <getSpadInfo+0x120>)
 8001ea2:	801a      	strh	r2, [r3, #0]
  while (readReg(0x83) == 0x00)
 8001ea4:	e011      	b.n	8001eca <getSpadInfo+0x9a>
  {
    if (checkTimeoutExpired()) { return false; }
 8001ea6:	4b2b      	ldr	r3, [pc, #172]	@ (8001f54 <getSpadInfo+0x124>)
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00d      	beq.n	8001eca <getSpadInfo+0x9a>
 8001eae:	f001 f807 	bl	8002ec0 <HAL_GetTick>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4b25      	ldr	r3, [pc, #148]	@ (8001f50 <getSpadInfo+0x120>)
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	4a25      	ldr	r2, [pc, #148]	@ (8001f54 <getSpadInfo+0x124>)
 8001ec0:	8812      	ldrh	r2, [r2, #0]
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	dd01      	ble.n	8001eca <getSpadInfo+0x9a>
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e03d      	b.n	8001f46 <getSpadInfo+0x116>
  while (readReg(0x83) == 0x00)
 8001eca:	2083      	movs	r0, #131	@ 0x83
 8001ecc:	f7fe fe00 	bl	8000ad0 <readReg>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0e7      	beq.n	8001ea6 <getSpadInfo+0x76>
  }
  writeReg(0x83, 0x01);
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	2083      	movs	r0, #131	@ 0x83
 8001eda:	f7fe fda5 	bl	8000a28 <writeReg>
  tmp = readReg(0x92);
 8001ede:	2092      	movs	r0, #146	@ 0x92
 8001ee0:	f7fe fdf6 	bl	8000ad0 <readReg>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	73fb      	strb	r3, [r7, #15]

  *count = tmp & 0x7f;
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	701a      	strb	r2, [r3, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	09db      	lsrs	r3, r3, #7
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	701a      	strb	r2, [r3, #0]

  writeReg(0x81, 0x00);
 8001efe:	2100      	movs	r1, #0
 8001f00:	2081      	movs	r0, #129	@ 0x81
 8001f02:	f7fe fd91 	bl	8000a28 <writeReg>
  writeReg(0xFF, 0x06);
 8001f06:	2106      	movs	r1, #6
 8001f08:	20ff      	movs	r0, #255	@ 0xff
 8001f0a:	f7fe fd8d 	bl	8000a28 <writeReg>
  writeReg(0x83, readReg(0x83)  & ~0x04);
 8001f0e:	2083      	movs	r0, #131	@ 0x83
 8001f10:	f7fe fdde 	bl	8000ad0 <readReg>
 8001f14:	4603      	mov	r3, r0
 8001f16:	f023 0304 	bic.w	r3, r3, #4
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	2083      	movs	r0, #131	@ 0x83
 8001f20:	f7fe fd82 	bl	8000a28 <writeReg>
  writeReg(0xFF, 0x01);
 8001f24:	2101      	movs	r1, #1
 8001f26:	20ff      	movs	r0, #255	@ 0xff
 8001f28:	f7fe fd7e 	bl	8000a28 <writeReg>
  writeReg(0x00, 0x01);
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f7fe fd7a 	bl	8000a28 <writeReg>

  writeReg(0xFF, 0x00);
 8001f34:	2100      	movs	r1, #0
 8001f36:	20ff      	movs	r0, #255	@ 0xff
 8001f38:	f7fe fd76 	bl	8000a28 <writeReg>
  writeReg(0x80, 0x00);
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	2080      	movs	r0, #128	@ 0x80
 8001f40:	f7fe fd72 	bl	8000a28 <writeReg>

  return true;
 8001f44:	2301      	movs	r3, #1
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000080 	.word	0x20000080
 8001f54:	2000007c 	.word	0x2000007c

08001f58 <getSequenceStepEnables>:

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void getSequenceStepEnables(SequenceStepEnables * enables)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 8001f60:	2001      	movs	r0, #1
 8001f62:	f7fe fdb5 	bl	8000ad0 <readReg>
 8001f66:	4603      	mov	r3, r0
 8001f68:	73fb      	strb	r3, [r7, #15]

  enables->tcc          = (sequence_config >> 4) & 0x1;
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	091b      	lsrs	r3, r3, #4
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	701a      	strb	r2, [r3, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	08db      	lsrs	r3, r3, #3
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	709a      	strb	r2, [r3, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
 8001f8c:	089b      	lsrs	r3, r3, #2
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	705a      	strb	r2, [r3, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	099b      	lsrs	r3, r3, #6
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	70da      	strb	r2, [r3, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	09db      	lsrs	r3, r3, #7
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	711a      	strb	r2, [r3, #4]
}
 8001fb4:	bf00      	nop
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <getSequenceStepTimeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f7ff fad6 	bl	8001578 <getVcselPulsePeriod>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	461a      	mov	r2, r3
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8001fd4:	2046      	movs	r0, #70	@ 0x46
 8001fd6:	f7fe fd7b 	bl	8000ad0 <readReg>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	3301      	adds	r3, #1
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	f000 f887 	bl	8002104 <timeoutMclksToMicroseconds>
 8001ff6:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001ffc:	2051      	movs	r0, #81	@ 0x51
 8001ffe:	f7fe fd93 	bl	8000b28 <readReg16Bit>
 8002002:	4603      	mov	r3, r0
 8002004:	4618      	mov	r0, r3
 8002006:	f000 f83e 	bl	8002086 <decodeTimeout>
 800200a:	4603      	mov	r3, r0
 800200c:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 800201a:	b2db      	uxtb	r3, r3
 800201c:	4619      	mov	r1, r3
 800201e:	4610      	mov	r0, r2
 8002020:	f000 f870 	bl	8002104 <timeoutMclksToMicroseconds>
 8002024:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 800202a:	2001      	movs	r0, #1
 800202c:	f7ff faa4 	bl	8001578 <getVcselPulsePeriod>
 8002030:	4603      	mov	r3, r0
 8002032:	461a      	mov	r2, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8002038:	2071      	movs	r0, #113	@ 0x71
 800203a:	f7fe fd75 	bl	8000b28 <readReg16Bit>
 800203e:	4603      	mov	r3, r0
 8002040:	4618      	mov	r0, r3
 8002042:	f000 f820 	bl	8002086 <decodeTimeout>
 8002046:	4603      	mov	r3, r0
 8002048:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	811a      	strh	r2, [r3, #8]

  if (enables->pre_range)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	78db      	ldrb	r3, [r3, #3]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d007      	beq.n	8002066 <getSequenceStepTimeouts+0xaa>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	891a      	ldrh	r2, [r3, #8]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	88db      	ldrh	r3, [r3, #6]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	b29a      	uxth	r2, r3
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 800206e:	b2db      	uxtb	r3, r3
 8002070:	4619      	mov	r1, r3
 8002072:	4610      	mov	r0, r2
 8002074:	f000 f846 	bl	8002104 <timeoutMclksToMicroseconds>
 8002078:	4602      	mov	r2, r0
  timeouts->final_range_us =
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	615a      	str	r2, [r3, #20]
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t decodeTimeout(uint16_t reg_val)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	4603      	mov	r3, r0
 800208e:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8002090:	88fb      	ldrh	r3, [r7, #6]
 8002092:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8002094:	88fa      	ldrh	r2, [r7, #6]
 8002096:	0a12      	lsrs	r2, r2, #8
 8002098:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 800209a:	4093      	lsls	r3, r2
 800209c:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 800209e:	3301      	adds	r3, #1
 80020a0:	b29b      	uxth	r3, r3
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b085      	sub	sp, #20
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4603      	mov	r3, r0
 80020b6:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 80020c0:	88fb      	ldrh	r3, [r7, #6]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d016      	beq.n	80020f4 <encodeTimeout+0x46>
  {
    ls_byte = timeout_mclks - 1;
 80020c6:	88fb      	ldrh	r3, [r7, #6]
 80020c8:	3b01      	subs	r3, #1
 80020ca:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 80020cc:	e005      	b.n	80020da <encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	085b      	lsrs	r3, r3, #1
 80020d2:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 80020d4:	897b      	ldrh	r3, [r7, #10]
 80020d6:	3301      	adds	r3, #1
 80020d8:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2bff      	cmp	r3, #255	@ 0xff
 80020de:	d8f6      	bhi.n	80020ce <encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 80020e0:	897b      	ldrh	r3, [r7, #10]
 80020e2:	021b      	lsls	r3, r3, #8
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	4313      	orrs	r3, r2
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	e000      	b.n	80020f6 <encodeTimeout+0x48>
  }
  else { return 0; }
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	460a      	mov	r2, r1
 800210e:	80fb      	strh	r3, [r7, #6]
 8002110:	4613      	mov	r3, r2
 8002112:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8002114:	797b      	ldrb	r3, [r7, #5]
 8002116:	4a0d      	ldr	r2, [pc, #52]	@ (800214c <timeoutMclksToMicroseconds+0x48>)
 8002118:	fb02 f303 	mul.w	r3, r2, r3
 800211c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8002120:	4a0b      	ldr	r2, [pc, #44]	@ (8002150 <timeoutMclksToMicroseconds+0x4c>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	099b      	lsrs	r3, r3, #6
 8002128:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 800212a:	88fb      	ldrh	r3, [r7, #6]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	fb03 f202 	mul.w	r2, r3, r2
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	085b      	lsrs	r3, r3, #1
 8002136:	4413      	add	r3, r2
 8002138:	4a05      	ldr	r2, [pc, #20]	@ (8002150 <timeoutMclksToMicroseconds+0x4c>)
 800213a:	fba2 2303 	umull	r2, r3, r2, r3
 800213e:	099b      	lsrs	r3, r3, #6
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	003a2f00 	.word	0x003a2f00
 8002150:	10624dd3 	.word	0x10624dd3

08002154 <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	4a0d      	ldr	r2, [pc, #52]	@ (8002198 <timeoutMicrosecondsToMclks+0x44>)
 8002164:	fb02 f303 	mul.w	r3, r2, r3
 8002168:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800216c:	4a0b      	ldr	r2, [pc, #44]	@ (800219c <timeoutMicrosecondsToMclks+0x48>)
 800216e:	fba2 2303 	umull	r2, r3, r2, r3
 8002172:	099b      	lsrs	r3, r3, #6
 8002174:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800217c:	fb03 f202 	mul.w	r2, r3, r2
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	085b      	lsrs	r3, r3, #1
 8002184:	441a      	add	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800218c:	4618      	mov	r0, r3
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	003a2f00 	.word	0x003a2f00
 800219c:	10624dd3 	.word	0x10624dd3

080021a0 <performSingleRefCalibration>:


// based on VL53L0X_perform_single_ref_calibration()
bool performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	4619      	mov	r1, r3
 80021b4:	2000      	movs	r0, #0
 80021b6:	f7fe fc37 	bl	8000a28 <writeReg>

  startTimeout();
 80021ba:	f000 fe81 	bl	8002ec0 <HAL_GetTick>
 80021be:	4603      	mov	r3, r0
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	4b15      	ldr	r3, [pc, #84]	@ (8002218 <performSingleRefCalibration+0x78>)
 80021c4:	801a      	strh	r2, [r3, #0]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80021c6:	e011      	b.n	80021ec <performSingleRefCalibration+0x4c>
  {
    if (checkTimeoutExpired()) { return false; }
 80021c8:	4b14      	ldr	r3, [pc, #80]	@ (800221c <performSingleRefCalibration+0x7c>)
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00d      	beq.n	80021ec <performSingleRefCalibration+0x4c>
 80021d0:	f000 fe76 	bl	8002ec0 <HAL_GetTick>
 80021d4:	4603      	mov	r3, r0
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	4b0f      	ldr	r3, [pc, #60]	@ (8002218 <performSingleRefCalibration+0x78>)
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	4a0e      	ldr	r2, [pc, #56]	@ (800221c <performSingleRefCalibration+0x7c>)
 80021e2:	8812      	ldrh	r2, [r2, #0]
 80021e4:	4293      	cmp	r3, r2
 80021e6:	dd01      	ble.n	80021ec <performSingleRefCalibration+0x4c>
 80021e8:	2300      	movs	r3, #0
 80021ea:	e010      	b.n	800220e <performSingleRefCalibration+0x6e>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80021ec:	2013      	movs	r0, #19
 80021ee:	f7fe fc6f 	bl	8000ad0 <readReg>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0e5      	beq.n	80021c8 <performSingleRefCalibration+0x28>
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80021fc:	2101      	movs	r1, #1
 80021fe:	200b      	movs	r0, #11
 8002200:	f7fe fc12 	bl	8000a28 <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 8002204:	2100      	movs	r1, #0
 8002206:	2000      	movs	r0, #0
 8002208:	f7fe fc0e 	bl	8000a28 <writeReg>

  return true;
 800220c:	2301      	movs	r3, #1
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000080 	.word	0x20000080
 800221c:	2000007c 	.word	0x2000007c

08002220 <performSingleRefCalibration_x>:

bool performSingleRefCalibration_x(uint8_t vhv_init_byte, statInfo_t_VL53L0X *sensorInfo)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	6039      	str	r1, [r7, #0]
 800222a:	71fb      	strb	r3, [r7, #7]
  writeReg_x(SYSRANGE_START, 0x01 | vhv_init_byte, sensorInfo->address); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	b2d9      	uxtb	r1, r3
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	7a5b      	ldrb	r3, [r3, #9]
 8002238:	461a      	mov	r2, r3
 800223a:	2000      	movs	r0, #0
 800223c:	f7fe fcf8 	bl	8000c30 <writeReg_x>

  startTimeout();
 8002240:	f000 fe3e 	bl	8002ec0 <HAL_GetTick>
 8002244:	4603      	mov	r3, r0
 8002246:	b29a      	uxth	r2, r3
 8002248:	4b19      	ldr	r3, [pc, #100]	@ (80022b0 <performSingleRefCalibration_x+0x90>)
 800224a:	801a      	strh	r2, [r3, #0]
  while ((readReg_x(RESULT_INTERRUPT_STATUS, sensorInfo->address) & 0x07) == 0)
 800224c:	e011      	b.n	8002272 <performSingleRefCalibration_x+0x52>
  {
    if (checkTimeoutExpired()) { return false; }
 800224e:	4b19      	ldr	r3, [pc, #100]	@ (80022b4 <performSingleRefCalibration_x+0x94>)
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00d      	beq.n	8002272 <performSingleRefCalibration_x+0x52>
 8002256:	f000 fe33 	bl	8002ec0 <HAL_GetTick>
 800225a:	4603      	mov	r3, r0
 800225c:	b29b      	uxth	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	4b13      	ldr	r3, [pc, #76]	@ (80022b0 <performSingleRefCalibration_x+0x90>)
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	4a13      	ldr	r2, [pc, #76]	@ (80022b4 <performSingleRefCalibration_x+0x94>)
 8002268:	8812      	ldrh	r2, [r2, #0]
 800226a:	4293      	cmp	r3, r2
 800226c:	dd01      	ble.n	8002272 <performSingleRefCalibration_x+0x52>
 800226e:	2300      	movs	r3, #0
 8002270:	e019      	b.n	80022a6 <performSingleRefCalibration_x+0x86>
  while ((readReg_x(RESULT_INTERRUPT_STATUS, sensorInfo->address) & 0x07) == 0)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	7a5b      	ldrb	r3, [r3, #9]
 8002276:	4619      	mov	r1, r3
 8002278:	2013      	movs	r0, #19
 800227a:	f7fe fd29 	bl	8000cd0 <readReg_x>
 800227e:	4603      	mov	r3, r0
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0e2      	beq.n	800224e <performSingleRefCalibration_x+0x2e>
  }

  writeReg_x(SYSTEM_INTERRUPT_CLEAR, 0x01, sensorInfo->address);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	7a5b      	ldrb	r3, [r3, #9]
 800228c:	461a      	mov	r2, r3
 800228e:	2101      	movs	r1, #1
 8002290:	200b      	movs	r0, #11
 8002292:	f7fe fccd 	bl	8000c30 <writeReg_x>

  writeReg_x(SYSRANGE_START, 0x00, sensorInfo->address);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	7a5b      	ldrb	r3, [r3, #9]
 800229a:	461a      	mov	r2, r3
 800229c:	2100      	movs	r1, #0
 800229e:	2000      	movs	r0, #0
 80022a0:	f7fe fcc6 	bl	8000c30 <writeReg_x>

  return true;
 80022a4:	2301      	movs	r3, #1
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000080 	.word	0x20000080
 80022b4:	2000007c 	.word	0x2000007c

080022b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08e      	sub	sp, #56	@ 0x38
 80022bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022be:	f000 fd99 	bl	8002df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022c2:	f000 fa4d 	bl	8002760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022c6:	f000 fb43 	bl	8002950 <MX_GPIO_Init>
  MX_I2C1_Init();
 80022ca:	f000 fabb 	bl	8002844 <MX_I2C1_Init>
  MX_I2C2_Init();
 80022ce:	f000 fae7 	bl	80028a0 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 80022d2:	f000 fb13 	bl	80028fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(V1_GPIO_Port, V1_Pin, GPIO_PIN_RESET);
 80022d6:	2200      	movs	r2, #0
 80022d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022dc:	48a3      	ldr	r0, [pc, #652]	@ (800256c <main+0x2b4>)
 80022de:	f001 f899 	bl	8003414 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(V2_GPIO_Port, V2_Pin, GPIO_PIN_RESET);
 80022e2:	2200      	movs	r2, #0
 80022e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022e8:	48a1      	ldr	r0, [pc, #644]	@ (8002570 <main+0x2b8>)
 80022ea:	f001 f893 	bl	8003414 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(V3_GPIO_Port, V3_Pin, GPIO_PIN_RESET);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2110      	movs	r1, #16
 80022f2:	48a0      	ldr	r0, [pc, #640]	@ (8002574 <main+0x2bc>)
 80022f4:	f001 f88e 	bl	8003414 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(V4_GPIO_Port, V4_Pin, GPIO_PIN_RESET);
 80022f8:	2200      	movs	r2, #0
 80022fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80022fe:	489b      	ldr	r0, [pc, #620]	@ (800256c <main+0x2b4>)
 8002300:	f001 f888 	bl	8003414 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(V5_GPIO_Port, V5_Pin, GPIO_PIN_RESET);
 8002304:	2200      	movs	r2, #0
 8002306:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800230a:	489a      	ldr	r0, [pc, #616]	@ (8002574 <main+0x2bc>)
 800230c:	f001 f882 	bl	8003414 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(V6_GPIO_Port, V6_Pin, GPIO_PIN_RESET);
 8002310:	2200      	movs	r2, #0
 8002312:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002316:	4897      	ldr	r0, [pc, #604]	@ (8002574 <main+0x2bc>)
 8002318:	f001 f87c 	bl	8003414 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(V7_GPIO_Port, V7_Pin, GPIO_PIN_RESET);
 800231c:	2200      	movs	r2, #0
 800231e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002322:	4894      	ldr	r0, [pc, #592]	@ (8002574 <main+0x2bc>)
 8002324:	f001 f876 	bl	8003414 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(V8_GPIO_Port, V8_Pin, GPIO_PIN_RESET);
 8002328:	2200      	movs	r2, #0
 800232a:	2120      	movs	r1, #32
 800232c:	4890      	ldr	r0, [pc, #576]	@ (8002570 <main+0x2b8>)
 800232e:	f001 f871 	bl	8003414 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8002332:	200a      	movs	r0, #10
 8002334:	f000 fdd0 	bl	8002ed8 <HAL_Delay>

  //sensor 1
   HAL_GPIO_WritePin(V1_GPIO_Port, V1_Pin, GPIO_PIN_SET);
 8002338:	2201      	movs	r2, #1
 800233a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800233e:	488b      	ldr	r0, [pc, #556]	@ (800256c <main+0x2b4>)
 8002340:	f001 f868 	bl	8003414 <HAL_GPIO_WritePin>
   HAL_Delay(50);
 8002344:	2032      	movs	r0, #50	@ 0x32
 8002346:	f000 fdc7 	bl	8002ed8 <HAL_Delay>
   if(initVL53L0X(1, &hi2c1)){
 800234a:	498b      	ldr	r1, [pc, #556]	@ (8002578 <main+0x2c0>)
 800234c:	2001      	movs	r0, #1
 800234e:	f7fe fd4d 	bl	8000dec <initVL53L0X>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d007      	beq.n	8002368 <main+0xb0>
 	  HAL_UART_Transmit(&huart2, "sensor 1 initialized/n", strlen("sensor 1 initialized"), HAL_MAX_DELAY);
 8002358:	f04f 33ff 	mov.w	r3, #4294967295
 800235c:	2214      	movs	r2, #20
 800235e:	4987      	ldr	r1, [pc, #540]	@ (800257c <main+0x2c4>)
 8002360:	4887      	ldr	r0, [pc, #540]	@ (8002580 <main+0x2c8>)
 8002362:	f002 ff1d 	bl	80051a0 <HAL_UART_Transmit>
 8002366:	e006      	b.n	8002376 <main+0xbe>
   }
   else{
	   HAL_UART_Transmit(&huart2, "error", strlen("error"), HAL_MAX_DELAY);
 8002368:	f04f 33ff 	mov.w	r3, #4294967295
 800236c:	2205      	movs	r2, #5
 800236e:	4985      	ldr	r1, [pc, #532]	@ (8002584 <main+0x2cc>)
 8002370:	4883      	ldr	r0, [pc, #524]	@ (8002580 <main+0x2c8>)
 8002372:	f002 ff15 	bl	80051a0 <HAL_UART_Transmit>
   }

  setAddress_VL53L0X(0x30);
 8002376:	2030      	movs	r0, #48	@ 0x30
 8002378:	f7fe fd28 	bl	8000dcc <setAddress_VL53L0X>
  extraStats1.address=0x30;
 800237c:	4b82      	ldr	r3, [pc, #520]	@ (8002588 <main+0x2d0>)
 800237e:	2230      	movs	r2, #48	@ 0x30
 8002380:	725a      	strb	r2, [r3, #9]

  //sensor 2
   HAL_GPIO_WritePin(V2_GPIO_Port, V2_Pin, GPIO_PIN_SET);
 8002382:	2201      	movs	r2, #1
 8002384:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002388:	4879      	ldr	r0, [pc, #484]	@ (8002570 <main+0x2b8>)
 800238a:	f001 f843 	bl	8003414 <HAL_GPIO_WritePin>
   HAL_Delay(50);
 800238e:	2032      	movs	r0, #50	@ 0x32
 8002390:	f000 fda2 	bl	8002ed8 <HAL_Delay>

  if(initVL53L0X(1, &hi2c1)){
 8002394:	4978      	ldr	r1, [pc, #480]	@ (8002578 <main+0x2c0>)
 8002396:	2001      	movs	r0, #1
 8002398:	f7fe fd28 	bl	8000dec <initVL53L0X>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d007      	beq.n	80023b2 <main+0xfa>
   HAL_UART_Transmit(&huart2, "sensor 2 initialized/n", strlen("sensor 2 initialized"), HAL_MAX_DELAY);
 80023a2:	f04f 33ff 	mov.w	r3, #4294967295
 80023a6:	2214      	movs	r2, #20
 80023a8:	4978      	ldr	r1, [pc, #480]	@ (800258c <main+0x2d4>)
 80023aa:	4875      	ldr	r0, [pc, #468]	@ (8002580 <main+0x2c8>)
 80023ac:	f002 fef8 	bl	80051a0 <HAL_UART_Transmit>
 80023b0:	e006      	b.n	80023c0 <main+0x108>
   }
  else{
 	   HAL_UART_Transmit(&huart2, "error", strlen("error"), HAL_MAX_DELAY);
 80023b2:	f04f 33ff 	mov.w	r3, #4294967295
 80023b6:	2205      	movs	r2, #5
 80023b8:	4972      	ldr	r1, [pc, #456]	@ (8002584 <main+0x2cc>)
 80023ba:	4871      	ldr	r0, [pc, #452]	@ (8002580 <main+0x2c8>)
 80023bc:	f002 fef0 	bl	80051a0 <HAL_UART_Transmit>
    }
//
  setAddress_VL53L0X(0x32);
 80023c0:	2032      	movs	r0, #50	@ 0x32
 80023c2:	f7fe fd03 	bl	8000dcc <setAddress_VL53L0X>
   extraStats2.address=0x32;
 80023c6:	4b72      	ldr	r3, [pc, #456]	@ (8002590 <main+0x2d8>)
 80023c8:	2232      	movs	r2, #50	@ 0x32
 80023ca:	725a      	strb	r2, [r3, #9]

   //sensor 3
   HAL_GPIO_WritePin(V3_GPIO_Port, V3_Pin, GPIO_PIN_SET);
 80023cc:	2201      	movs	r2, #1
 80023ce:	2110      	movs	r1, #16
 80023d0:	4868      	ldr	r0, [pc, #416]	@ (8002574 <main+0x2bc>)
 80023d2:	f001 f81f 	bl	8003414 <HAL_GPIO_WritePin>
   HAL_Delay(50);
 80023d6:	2032      	movs	r0, #50	@ 0x32
 80023d8:	f000 fd7e 	bl	8002ed8 <HAL_Delay>

  if(initVL53L0X(1, &hi2c1)){
 80023dc:	4966      	ldr	r1, [pc, #408]	@ (8002578 <main+0x2c0>)
 80023de:	2001      	movs	r0, #1
 80023e0:	f7fe fd04 	bl	8000dec <initVL53L0X>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d007      	beq.n	80023fa <main+0x142>
   HAL_UART_Transmit(&huart2, "sensor 3 initialized/n", strlen("sensor 3 initialized"), HAL_MAX_DELAY);
 80023ea:	f04f 33ff 	mov.w	r3, #4294967295
 80023ee:	2214      	movs	r2, #20
 80023f0:	4968      	ldr	r1, [pc, #416]	@ (8002594 <main+0x2dc>)
 80023f2:	4863      	ldr	r0, [pc, #396]	@ (8002580 <main+0x2c8>)
 80023f4:	f002 fed4 	bl	80051a0 <HAL_UART_Transmit>
 80023f8:	e006      	b.n	8002408 <main+0x150>
   }
  else{
 	   HAL_UART_Transmit(&huart2, "error", strlen("error"), HAL_MAX_DELAY);
 80023fa:	f04f 33ff 	mov.w	r3, #4294967295
 80023fe:	2205      	movs	r2, #5
 8002400:	4960      	ldr	r1, [pc, #384]	@ (8002584 <main+0x2cc>)
 8002402:	485f      	ldr	r0, [pc, #380]	@ (8002580 <main+0x2c8>)
 8002404:	f002 fecc 	bl	80051a0 <HAL_UART_Transmit>
    }
//
  setAddress_VL53L0X(0x34);
 8002408:	2034      	movs	r0, #52	@ 0x34
 800240a:	f7fe fcdf 	bl	8000dcc <setAddress_VL53L0X>
   extraStats3.address=0x34;
 800240e:	4b62      	ldr	r3, [pc, #392]	@ (8002598 <main+0x2e0>)
 8002410:	2234      	movs	r2, #52	@ 0x34
 8002412:	725a      	strb	r2, [r3, #9]

   //sensor 4
   HAL_GPIO_WritePin(V4_GPIO_Port, V4_Pin, GPIO_PIN_SET);
 8002414:	2201      	movs	r2, #1
 8002416:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800241a:	4854      	ldr	r0, [pc, #336]	@ (800256c <main+0x2b4>)
 800241c:	f000 fffa 	bl	8003414 <HAL_GPIO_WritePin>
   HAL_Delay(50);
 8002420:	2032      	movs	r0, #50	@ 0x32
 8002422:	f000 fd59 	bl	8002ed8 <HAL_Delay>

  if(initVL53L0X(1, &hi2c1)){
 8002426:	4954      	ldr	r1, [pc, #336]	@ (8002578 <main+0x2c0>)
 8002428:	2001      	movs	r0, #1
 800242a:	f7fe fcdf 	bl	8000dec <initVL53L0X>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d007      	beq.n	8002444 <main+0x18c>
   HAL_UART_Transmit(&huart2, "sensor 4 initialized/n", strlen("sensor 4 initialized"), HAL_MAX_DELAY);
 8002434:	f04f 33ff 	mov.w	r3, #4294967295
 8002438:	2214      	movs	r2, #20
 800243a:	4958      	ldr	r1, [pc, #352]	@ (800259c <main+0x2e4>)
 800243c:	4850      	ldr	r0, [pc, #320]	@ (8002580 <main+0x2c8>)
 800243e:	f002 feaf 	bl	80051a0 <HAL_UART_Transmit>
 8002442:	e006      	b.n	8002452 <main+0x19a>
   }
  else{
 	   HAL_UART_Transmit(&huart2, "error", strlen("error"), HAL_MAX_DELAY);
 8002444:	f04f 33ff 	mov.w	r3, #4294967295
 8002448:	2205      	movs	r2, #5
 800244a:	494e      	ldr	r1, [pc, #312]	@ (8002584 <main+0x2cc>)
 800244c:	484c      	ldr	r0, [pc, #304]	@ (8002580 <main+0x2c8>)
 800244e:	f002 fea7 	bl	80051a0 <HAL_UART_Transmit>
    }
//
  setAddress_VL53L0X(0x36);
 8002452:	2036      	movs	r0, #54	@ 0x36
 8002454:	f7fe fcba 	bl	8000dcc <setAddress_VL53L0X>
   extraStats4.address=0x36;
 8002458:	4b51      	ldr	r3, [pc, #324]	@ (80025a0 <main+0x2e8>)
 800245a:	2236      	movs	r2, #54	@ 0x36
 800245c:	725a      	strb	r2, [r3, #9]


   //sensor 5
   HAL_GPIO_WritePin(V5_GPIO_Port, V5_Pin, GPIO_PIN_SET);
 800245e:	2201      	movs	r2, #1
 8002460:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002464:	4843      	ldr	r0, [pc, #268]	@ (8002574 <main+0x2bc>)
 8002466:	f000 ffd5 	bl	8003414 <HAL_GPIO_WritePin>
   HAL_Delay(50);
 800246a:	2032      	movs	r0, #50	@ 0x32
 800246c:	f000 fd34 	bl	8002ed8 <HAL_Delay>
   if(initVL53L0X(1, &hi2c1)){
 8002470:	4941      	ldr	r1, [pc, #260]	@ (8002578 <main+0x2c0>)
 8002472:	2001      	movs	r0, #1
 8002474:	f7fe fcba 	bl	8000dec <initVL53L0X>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d007      	beq.n	800248e <main+0x1d6>
 	  HAL_UART_Transmit(&huart2, "sensor 5 initialized/n", strlen("sensor 5 initialized"), HAL_MAX_DELAY);
 800247e:	f04f 33ff 	mov.w	r3, #4294967295
 8002482:	2214      	movs	r2, #20
 8002484:	4947      	ldr	r1, [pc, #284]	@ (80025a4 <main+0x2ec>)
 8002486:	483e      	ldr	r0, [pc, #248]	@ (8002580 <main+0x2c8>)
 8002488:	f002 fe8a 	bl	80051a0 <HAL_UART_Transmit>
 800248c:	e006      	b.n	800249c <main+0x1e4>
   }
   else{
	   HAL_UART_Transmit(&huart2, "error", strlen("error"), HAL_MAX_DELAY);
 800248e:	f04f 33ff 	mov.w	r3, #4294967295
 8002492:	2205      	movs	r2, #5
 8002494:	493b      	ldr	r1, [pc, #236]	@ (8002584 <main+0x2cc>)
 8002496:	483a      	ldr	r0, [pc, #232]	@ (8002580 <main+0x2c8>)
 8002498:	f002 fe82 	bl	80051a0 <HAL_UART_Transmit>
   }

  setAddress_VL53L0X(0x38);
 800249c:	2038      	movs	r0, #56	@ 0x38
 800249e:	f7fe fc95 	bl	8000dcc <setAddress_VL53L0X>
  extraStats5.address=0x38;
 80024a2:	4b41      	ldr	r3, [pc, #260]	@ (80025a8 <main+0x2f0>)
 80024a4:	2238      	movs	r2, #56	@ 0x38
 80024a6:	725a      	strb	r2, [r3, #9]

  //sensor 6
   HAL_GPIO_WritePin(V6_GPIO_Port, V6_Pin, GPIO_PIN_SET);
 80024a8:	2201      	movs	r2, #1
 80024aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80024ae:	4831      	ldr	r0, [pc, #196]	@ (8002574 <main+0x2bc>)
 80024b0:	f000 ffb0 	bl	8003414 <HAL_GPIO_WritePin>
   HAL_Delay(50);
 80024b4:	2032      	movs	r0, #50	@ 0x32
 80024b6:	f000 fd0f 	bl	8002ed8 <HAL_Delay>

  if(initVL53L0X(1, &hi2c1)){
 80024ba:	492f      	ldr	r1, [pc, #188]	@ (8002578 <main+0x2c0>)
 80024bc:	2001      	movs	r0, #1
 80024be:	f7fe fc95 	bl	8000dec <initVL53L0X>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d007      	beq.n	80024d8 <main+0x220>
   HAL_UART_Transmit(&huart2, "sensor 6 initialized/n", strlen("sensor 6 initialized"), HAL_MAX_DELAY);
 80024c8:	f04f 33ff 	mov.w	r3, #4294967295
 80024cc:	2214      	movs	r2, #20
 80024ce:	4937      	ldr	r1, [pc, #220]	@ (80025ac <main+0x2f4>)
 80024d0:	482b      	ldr	r0, [pc, #172]	@ (8002580 <main+0x2c8>)
 80024d2:	f002 fe65 	bl	80051a0 <HAL_UART_Transmit>
 80024d6:	e006      	b.n	80024e6 <main+0x22e>
   }
  else{
 	   HAL_UART_Transmit(&huart2, "error", strlen("error"), HAL_MAX_DELAY);
 80024d8:	f04f 33ff 	mov.w	r3, #4294967295
 80024dc:	2205      	movs	r2, #5
 80024de:	4929      	ldr	r1, [pc, #164]	@ (8002584 <main+0x2cc>)
 80024e0:	4827      	ldr	r0, [pc, #156]	@ (8002580 <main+0x2c8>)
 80024e2:	f002 fe5d 	bl	80051a0 <HAL_UART_Transmit>
    }
//
  setAddress_VL53L0X(0x40);
 80024e6:	2040      	movs	r0, #64	@ 0x40
 80024e8:	f7fe fc70 	bl	8000dcc <setAddress_VL53L0X>
   extraStats6.address=0x40;
 80024ec:	4b30      	ldr	r3, [pc, #192]	@ (80025b0 <main+0x2f8>)
 80024ee:	2240      	movs	r2, #64	@ 0x40
 80024f0:	725a      	strb	r2, [r3, #9]

   //sensor 7
   HAL_GPIO_WritePin(V7_GPIO_Port, V7_Pin, GPIO_PIN_SET);
 80024f2:	2201      	movs	r2, #1
 80024f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024f8:	481e      	ldr	r0, [pc, #120]	@ (8002574 <main+0x2bc>)
 80024fa:	f000 ff8b 	bl	8003414 <HAL_GPIO_WritePin>
   HAL_Delay(50);
 80024fe:	2032      	movs	r0, #50	@ 0x32
 8002500:	f000 fcea 	bl	8002ed8 <HAL_Delay>

  if(initVL53L0X(1, &hi2c1)){
 8002504:	491c      	ldr	r1, [pc, #112]	@ (8002578 <main+0x2c0>)
 8002506:	2001      	movs	r0, #1
 8002508:	f7fe fc70 	bl	8000dec <initVL53L0X>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d007      	beq.n	8002522 <main+0x26a>
   HAL_UART_Transmit(&huart2, "sensor 7 initialized/n", strlen("sensor 7 initialized"), HAL_MAX_DELAY);
 8002512:	f04f 33ff 	mov.w	r3, #4294967295
 8002516:	2214      	movs	r2, #20
 8002518:	4926      	ldr	r1, [pc, #152]	@ (80025b4 <main+0x2fc>)
 800251a:	4819      	ldr	r0, [pc, #100]	@ (8002580 <main+0x2c8>)
 800251c:	f002 fe40 	bl	80051a0 <HAL_UART_Transmit>
 8002520:	e006      	b.n	8002530 <main+0x278>
   }
  else{
 	   HAL_UART_Transmit(&huart2, "error", strlen("error"), HAL_MAX_DELAY);
 8002522:	f04f 33ff 	mov.w	r3, #4294967295
 8002526:	2205      	movs	r2, #5
 8002528:	4916      	ldr	r1, [pc, #88]	@ (8002584 <main+0x2cc>)
 800252a:	4815      	ldr	r0, [pc, #84]	@ (8002580 <main+0x2c8>)
 800252c:	f002 fe38 	bl	80051a0 <HAL_UART_Transmit>
    }
//
  setAddress_VL53L0X(0x42);
 8002530:	2042      	movs	r0, #66	@ 0x42
 8002532:	f7fe fc4b 	bl	8000dcc <setAddress_VL53L0X>
   extraStats7.address=0x42;
 8002536:	4b20      	ldr	r3, [pc, #128]	@ (80025b8 <main+0x300>)
 8002538:	2242      	movs	r2, #66	@ 0x42
 800253a:	725a      	strb	r2, [r3, #9]

   //sensor 8
   HAL_GPIO_WritePin(V8_GPIO_Port, V8_Pin, GPIO_PIN_SET);
 800253c:	2201      	movs	r2, #1
 800253e:	2120      	movs	r1, #32
 8002540:	480b      	ldr	r0, [pc, #44]	@ (8002570 <main+0x2b8>)
 8002542:	f000 ff67 	bl	8003414 <HAL_GPIO_WritePin>
   HAL_Delay(50);
 8002546:	2032      	movs	r0, #50	@ 0x32
 8002548:	f000 fcc6 	bl	8002ed8 <HAL_Delay>

  if(initVL53L0X(1, &hi2c1)){
 800254c:	490a      	ldr	r1, [pc, #40]	@ (8002578 <main+0x2c0>)
 800254e:	2001      	movs	r0, #1
 8002550:	f7fe fc4c 	bl	8000dec <initVL53L0X>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d032      	beq.n	80025c0 <main+0x308>
   HAL_UART_Transmit(&huart2, "sensor 8 initialized/n", strlen("sensor 8 initialized"), HAL_MAX_DELAY);
 800255a:	f04f 33ff 	mov.w	r3, #4294967295
 800255e:	2214      	movs	r2, #20
 8002560:	4916      	ldr	r1, [pc, #88]	@ (80025bc <main+0x304>)
 8002562:	4807      	ldr	r0, [pc, #28]	@ (8002580 <main+0x2c8>)
 8002564:	f002 fe1c 	bl	80051a0 <HAL_UART_Transmit>
 8002568:	e031      	b.n	80025ce <main+0x316>
 800256a:	bf00      	nop
 800256c:	40020000 	.word	0x40020000
 8002570:	40020800 	.word	0x40020800
 8002574:	40020400 	.word	0x40020400
 8002578:	200000e4 	.word	0x200000e4
 800257c:	08006270 	.word	0x08006270
 8002580:	2000018c 	.word	0x2000018c
 8002584:	08006288 	.word	0x08006288
 8002588:	200001d4 	.word	0x200001d4
 800258c:	08006290 	.word	0x08006290
 8002590:	200001e0 	.word	0x200001e0
 8002594:	080062a8 	.word	0x080062a8
 8002598:	200001ec 	.word	0x200001ec
 800259c:	080062c0 	.word	0x080062c0
 80025a0:	200001f8 	.word	0x200001f8
 80025a4:	080062d8 	.word	0x080062d8
 80025a8:	20000204 	.word	0x20000204
 80025ac:	080062f0 	.word	0x080062f0
 80025b0:	20000210 	.word	0x20000210
 80025b4:	08006308 	.word	0x08006308
 80025b8:	2000021c 	.word	0x2000021c
 80025bc:	08006320 	.word	0x08006320
   }
  else{
 	   HAL_UART_Transmit(&huart2, "error", strlen("error"), HAL_MAX_DELAY);
 80025c0:	f04f 33ff 	mov.w	r3, #4294967295
 80025c4:	2205      	movs	r2, #5
 80025c6:	495a      	ldr	r1, [pc, #360]	@ (8002730 <main+0x478>)
 80025c8:	485a      	ldr	r0, [pc, #360]	@ (8002734 <main+0x47c>)
 80025ca:	f002 fde9 	bl	80051a0 <HAL_UART_Transmit>
    }
//
  setAddress_VL53L0X(0x44);
 80025ce:	2044      	movs	r0, #68	@ 0x44
 80025d0:	f7fe fbfc 	bl	8000dcc <setAddress_VL53L0X>
   extraStats8.address=0x44;
 80025d4:	4b58      	ldr	r3, [pc, #352]	@ (8002738 <main+0x480>)
 80025d6:	2244      	movs	r2, #68	@ 0x44
 80025d8:	725a      	strb	r2, [r3, #9]



   setSignalRateLimit_x(2000,&extraStats1);
 80025da:	4958      	ldr	r1, [pc, #352]	@ (800273c <main+0x484>)
 80025dc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80025e0:	f7fe fe9a 	bl	8001318 <setSignalRateLimit_x>
   setSignalRateLimit_x(2000,&extraStats2);
 80025e4:	4956      	ldr	r1, [pc, #344]	@ (8002740 <main+0x488>)
 80025e6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80025ea:	f7fe fe95 	bl	8001318 <setSignalRateLimit_x>
   setSignalRateLimit_x(2000,&extraStats3);
 80025ee:	4955      	ldr	r1, [pc, #340]	@ (8002744 <main+0x48c>)
 80025f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80025f4:	f7fe fe90 	bl	8001318 <setSignalRateLimit_x>
   setSignalRateLimit_x(2000,&extraStats4);
 80025f8:	4953      	ldr	r1, [pc, #332]	@ (8002748 <main+0x490>)
 80025fa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80025fe:	f7fe fe8b 	bl	8001318 <setSignalRateLimit_x>
   setSignalRateLimit_x(2000,&extraStats5);
 8002602:	4952      	ldr	r1, [pc, #328]	@ (800274c <main+0x494>)
 8002604:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002608:	f7fe fe86 	bl	8001318 <setSignalRateLimit_x>
   setSignalRateLimit_x(2000,&extraStats6);
 800260c:	4950      	ldr	r1, [pc, #320]	@ (8002750 <main+0x498>)
 800260e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002612:	f7fe fe81 	bl	8001318 <setSignalRateLimit_x>
   setSignalRateLimit_x(2000,&extraStats7);
 8002616:	494f      	ldr	r1, [pc, #316]	@ (8002754 <main+0x49c>)
 8002618:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800261c:	f7fe fe7c 	bl	8001318 <setSignalRateLimit_x>
   setSignalRateLimit_x(2000,&extraStats8);
 8002620:	4945      	ldr	r1, [pc, #276]	@ (8002738 <main+0x480>)
 8002622:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002626:	f7fe fe77 	bl	8001318 <setSignalRateLimit_x>

   setVcselPulsePeriod_x(VcselPeriodPreRange, 10, &extraStats1);
 800262a:	4a44      	ldr	r2, [pc, #272]	@ (800273c <main+0x484>)
 800262c:	210a      	movs	r1, #10
 800262e:	2000      	movs	r0, #0
 8002630:	f7ff f912 	bl	8001858 <setVcselPulsePeriod_x>
  setVcselPulsePeriod_x(VcselPeriodPreRange, 10, &extraStats2);
 8002634:	4a42      	ldr	r2, [pc, #264]	@ (8002740 <main+0x488>)
 8002636:	210a      	movs	r1, #10
 8002638:	2000      	movs	r0, #0
 800263a:	f7ff f90d 	bl	8001858 <setVcselPulsePeriod_x>
  setVcselPulsePeriod_x(VcselPeriodPreRange, 10, &extraStats3);
 800263e:	4a41      	ldr	r2, [pc, #260]	@ (8002744 <main+0x48c>)
 8002640:	210a      	movs	r1, #10
 8002642:	2000      	movs	r0, #0
 8002644:	f7ff f908 	bl	8001858 <setVcselPulsePeriod_x>
  setVcselPulsePeriod_x(VcselPeriodPreRange, 10, &extraStats4);
 8002648:	4a3f      	ldr	r2, [pc, #252]	@ (8002748 <main+0x490>)
 800264a:	210a      	movs	r1, #10
 800264c:	2000      	movs	r0, #0
 800264e:	f7ff f903 	bl	8001858 <setVcselPulsePeriod_x>
  setVcselPulsePeriod_x(VcselPeriodPreRange, 10, &extraStats5);
 8002652:	4a3e      	ldr	r2, [pc, #248]	@ (800274c <main+0x494>)
 8002654:	210a      	movs	r1, #10
 8002656:	2000      	movs	r0, #0
 8002658:	f7ff f8fe 	bl	8001858 <setVcselPulsePeriod_x>
    setVcselPulsePeriod_x(VcselPeriodPreRange, 10, &extraStats6);
 800265c:	4a3c      	ldr	r2, [pc, #240]	@ (8002750 <main+0x498>)
 800265e:	210a      	movs	r1, #10
 8002660:	2000      	movs	r0, #0
 8002662:	f7ff f8f9 	bl	8001858 <setVcselPulsePeriod_x>
    setVcselPulsePeriod_x(VcselPeriodPreRange, 10, &extraStats7);
 8002666:	4a3b      	ldr	r2, [pc, #236]	@ (8002754 <main+0x49c>)
 8002668:	210a      	movs	r1, #10
 800266a:	2000      	movs	r0, #0
 800266c:	f7ff f8f4 	bl	8001858 <setVcselPulsePeriod_x>
    setVcselPulsePeriod_x(VcselPeriodPreRange, 10, &extraStats8);
 8002670:	4a31      	ldr	r2, [pc, #196]	@ (8002738 <main+0x480>)
 8002672:	210a      	movs	r1, #10
 8002674:	2000      	movs	r0, #0
 8002676:	f7ff f8ef 	bl	8001858 <setVcselPulsePeriod_x>

   setVcselPulsePeriod_x(VcselPeriodFinalRange, 14, &extraStats1);
 800267a:	4a30      	ldr	r2, [pc, #192]	@ (800273c <main+0x484>)
 800267c:	210e      	movs	r1, #14
 800267e:	2001      	movs	r0, #1
 8002680:	f7ff f8ea 	bl	8001858 <setVcselPulsePeriod_x>
   setVcselPulsePeriod_x(VcselPeriodFinalRange, 14, &extraStats2);
 8002684:	4a2e      	ldr	r2, [pc, #184]	@ (8002740 <main+0x488>)
 8002686:	210e      	movs	r1, #14
 8002688:	2001      	movs	r0, #1
 800268a:	f7ff f8e5 	bl	8001858 <setVcselPulsePeriod_x>
   setVcselPulsePeriod_x(VcselPeriodFinalRange, 14, &extraStats3);
 800268e:	4a2d      	ldr	r2, [pc, #180]	@ (8002744 <main+0x48c>)
 8002690:	210e      	movs	r1, #14
 8002692:	2001      	movs	r0, #1
 8002694:	f7ff f8e0 	bl	8001858 <setVcselPulsePeriod_x>
   setVcselPulsePeriod_x(VcselPeriodFinalRange, 14, &extraStats4);
 8002698:	4a2b      	ldr	r2, [pc, #172]	@ (8002748 <main+0x490>)
 800269a:	210e      	movs	r1, #14
 800269c:	2001      	movs	r0, #1
 800269e:	f7ff f8db 	bl	8001858 <setVcselPulsePeriod_x>
   setVcselPulsePeriod_x(VcselPeriodFinalRange, 14, &extraStats5);
 80026a2:	4a2a      	ldr	r2, [pc, #168]	@ (800274c <main+0x494>)
 80026a4:	210e      	movs	r1, #14
 80026a6:	2001      	movs	r0, #1
 80026a8:	f7ff f8d6 	bl	8001858 <setVcselPulsePeriod_x>
   setVcselPulsePeriod_x(VcselPeriodFinalRange, 14, &extraStats6);
 80026ac:	4a28      	ldr	r2, [pc, #160]	@ (8002750 <main+0x498>)
 80026ae:	210e      	movs	r1, #14
 80026b0:	2001      	movs	r0, #1
 80026b2:	f7ff f8d1 	bl	8001858 <setVcselPulsePeriod_x>
   setVcselPulsePeriod_x(VcselPeriodFinalRange, 14, &extraStats7);
 80026b6:	4a27      	ldr	r2, [pc, #156]	@ (8002754 <main+0x49c>)
 80026b8:	210e      	movs	r1, #14
 80026ba:	2001      	movs	r0, #1
 80026bc:	f7ff f8cc 	bl	8001858 <setVcselPulsePeriod_x>
   setVcselPulsePeriod_x(VcselPeriodFinalRange, 14, &extraStats8);
 80026c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002738 <main+0x480>)
 80026c2:	210e      	movs	r1, #14
 80026c4:	2001      	movs	r0, #1
 80026c6:	f7ff f8c7 	bl	8001858 <setVcselPulsePeriod_x>

   setMeasurementTimingBudget_x(300 * 1000UL, &extraStats1);
 80026ca:	491c      	ldr	r1, [pc, #112]	@ (800273c <main+0x484>)
 80026cc:	4822      	ldr	r0, [pc, #136]	@ (8002758 <main+0x4a0>)
 80026ce:	f7fe ff75 	bl	80015bc <setMeasurementTimingBudget_x>
   setMeasurementTimingBudget_x(300 * 1000UL, &extraStats2);
 80026d2:	491b      	ldr	r1, [pc, #108]	@ (8002740 <main+0x488>)
 80026d4:	4820      	ldr	r0, [pc, #128]	@ (8002758 <main+0x4a0>)
 80026d6:	f7fe ff71 	bl	80015bc <setMeasurementTimingBudget_x>
   setMeasurementTimingBudget_x(300 * 1000UL, &extraStats2);
 80026da:	4919      	ldr	r1, [pc, #100]	@ (8002740 <main+0x488>)
 80026dc:	481e      	ldr	r0, [pc, #120]	@ (8002758 <main+0x4a0>)
 80026de:	f7fe ff6d 	bl	80015bc <setMeasurementTimingBudget_x>
   setMeasurementTimingBudget_x(300 * 1000UL, &extraStats2);
 80026e2:	4917      	ldr	r1, [pc, #92]	@ (8002740 <main+0x488>)
 80026e4:	481c      	ldr	r0, [pc, #112]	@ (8002758 <main+0x4a0>)
 80026e6:	f7fe ff69 	bl	80015bc <setMeasurementTimingBudget_x>
   setMeasurementTimingBudget_x(300 * 1000UL, &extraStats5);
 80026ea:	4918      	ldr	r1, [pc, #96]	@ (800274c <main+0x494>)
 80026ec:	481a      	ldr	r0, [pc, #104]	@ (8002758 <main+0x4a0>)
 80026ee:	f7fe ff65 	bl	80015bc <setMeasurementTimingBudget_x>
   setMeasurementTimingBudget_x(300 * 1000UL, &extraStats6);
 80026f2:	4917      	ldr	r1, [pc, #92]	@ (8002750 <main+0x498>)
 80026f4:	4818      	ldr	r0, [pc, #96]	@ (8002758 <main+0x4a0>)
 80026f6:	f7fe ff61 	bl	80015bc <setMeasurementTimingBudget_x>
   setMeasurementTimingBudget_x(300 * 1000UL, &extraStats7);
 80026fa:	4916      	ldr	r1, [pc, #88]	@ (8002754 <main+0x49c>)
 80026fc:	4816      	ldr	r0, [pc, #88]	@ (8002758 <main+0x4a0>)
 80026fe:	f7fe ff5d 	bl	80015bc <setMeasurementTimingBudget_x>
   setMeasurementTimingBudget_x(300 * 1000UL, &extraStats8);
 8002702:	490d      	ldr	r1, [pc, #52]	@ (8002738 <main+0x480>)
 8002704:	4814      	ldr	r0, [pc, #80]	@ (8002758 <main+0x4a0>)
 8002706:	f7fe ff59 	bl	80015bc <setMeasurementTimingBudget_x>
	  char msgBuffer_6[52];
	  char msgBuffer_7[52];
	  char msgBuffer_8[52];


	  distance2= readRangeSingleMillimeters(&extraStats2);
 800270a:	480d      	ldr	r0, [pc, #52]	@ (8002740 <main+0x488>)
 800270c:	f7ff fb4c 	bl	8001da8 <readRangeSingleMillimeters>
 8002710:	4603      	mov	r3, r0
 8002712:	86fb      	strh	r3, [r7, #54]	@ 0x36
	  	  sprintf(msgBuffer_2, "Distance1: %d\r\n", distance2);
 8002714:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8002716:	463b      	mov	r3, r7
 8002718:	4910      	ldr	r1, [pc, #64]	@ (800275c <main+0x4a4>)
 800271a:	4618      	mov	r0, r3
 800271c:	f003 f8fc 	bl	8005918 <siprintf>
	  	  HAL_UART_Transmit(&huart2, (uint8_t*) msgBuffer_2, sizeof(msgBuffer_2), 50);
 8002720:	4639      	mov	r1, r7
 8002722:	2332      	movs	r3, #50	@ 0x32
 8002724:	2234      	movs	r2, #52	@ 0x34
 8002726:	4803      	ldr	r0, [pc, #12]	@ (8002734 <main+0x47c>)
 8002728:	f002 fd3a 	bl	80051a0 <HAL_UART_Transmit>
  {
 800272c:	bf00      	nop
 800272e:	e7ec      	b.n	800270a <main+0x452>
 8002730:	08006288 	.word	0x08006288
 8002734:	2000018c 	.word	0x2000018c
 8002738:	20000228 	.word	0x20000228
 800273c:	200001d4 	.word	0x200001d4
 8002740:	200001e0 	.word	0x200001e0
 8002744:	200001ec 	.word	0x200001ec
 8002748:	200001f8 	.word	0x200001f8
 800274c:	20000204 	.word	0x20000204
 8002750:	20000210 	.word	0x20000210
 8002754:	2000021c 	.word	0x2000021c
 8002758:	000493e0 	.word	0x000493e0
 800275c:	08006338 	.word	0x08006338

08002760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b094      	sub	sp, #80	@ 0x50
 8002764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002766:	f107 031c 	add.w	r3, r7, #28
 800276a:	2234      	movs	r2, #52	@ 0x34
 800276c:	2100      	movs	r1, #0
 800276e:	4618      	mov	r0, r3
 8002770:	f003 f8f2 	bl	8005958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002774:	f107 0308 	add.w	r3, r7, #8
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002784:	2300      	movs	r3, #0
 8002786:	607b      	str	r3, [r7, #4]
 8002788:	4b2c      	ldr	r3, [pc, #176]	@ (800283c <SystemClock_Config+0xdc>)
 800278a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278c:	4a2b      	ldr	r2, [pc, #172]	@ (800283c <SystemClock_Config+0xdc>)
 800278e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002792:	6413      	str	r3, [r2, #64]	@ 0x40
 8002794:	4b29      	ldr	r3, [pc, #164]	@ (800283c <SystemClock_Config+0xdc>)
 8002796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800279c:	607b      	str	r3, [r7, #4]
 800279e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027a0:	2300      	movs	r3, #0
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	4b26      	ldr	r3, [pc, #152]	@ (8002840 <SystemClock_Config+0xe0>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a25      	ldr	r2, [pc, #148]	@ (8002840 <SystemClock_Config+0xe0>)
 80027aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	4b23      	ldr	r3, [pc, #140]	@ (8002840 <SystemClock_Config+0xe0>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80027b8:	603b      	str	r3, [r7, #0]
 80027ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027bc:	2302      	movs	r3, #2
 80027be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027c0:	2301      	movs	r3, #1
 80027c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027c4:	2310      	movs	r3, #16
 80027c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027c8:	2302      	movs	r3, #2
 80027ca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027cc:	2300      	movs	r3, #0
 80027ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80027d0:	2308      	movs	r3, #8
 80027d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80027d4:	23b4      	movs	r3, #180	@ 0xb4
 80027d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027d8:	2302      	movs	r3, #2
 80027da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80027dc:	2302      	movs	r3, #2
 80027de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80027e0:	2302      	movs	r3, #2
 80027e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027e4:	f107 031c 	add.w	r3, r7, #28
 80027e8:	4618      	mov	r0, r3
 80027ea:	f002 f9eb 	bl	8004bc4 <HAL_RCC_OscConfig>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80027f4:	f000 f948 	bl	8002a88 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80027f8:	f001 fe4a 	bl	8004490 <HAL_PWREx_EnableOverDrive>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002802:	f000 f941 	bl	8002a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002806:	230f      	movs	r3, #15
 8002808:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800280a:	2302      	movs	r3, #2
 800280c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800280e:	2300      	movs	r3, #0
 8002810:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002812:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002816:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002818:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800281c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800281e:	f107 0308 	add.w	r3, r7, #8
 8002822:	2105      	movs	r1, #5
 8002824:	4618      	mov	r0, r3
 8002826:	f001 fe83 	bl	8004530 <HAL_RCC_ClockConfig>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002830:	f000 f92a 	bl	8002a88 <Error_Handler>
  }
}
 8002834:	bf00      	nop
 8002836:	3750      	adds	r7, #80	@ 0x50
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40023800 	.word	0x40023800
 8002840:	40007000 	.word	0x40007000

08002844 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002848:	4b12      	ldr	r3, [pc, #72]	@ (8002894 <MX_I2C1_Init+0x50>)
 800284a:	4a13      	ldr	r2, [pc, #76]	@ (8002898 <MX_I2C1_Init+0x54>)
 800284c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800284e:	4b11      	ldr	r3, [pc, #68]	@ (8002894 <MX_I2C1_Init+0x50>)
 8002850:	4a12      	ldr	r2, [pc, #72]	@ (800289c <MX_I2C1_Init+0x58>)
 8002852:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002854:	4b0f      	ldr	r3, [pc, #60]	@ (8002894 <MX_I2C1_Init+0x50>)
 8002856:	2200      	movs	r2, #0
 8002858:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800285a:	4b0e      	ldr	r3, [pc, #56]	@ (8002894 <MX_I2C1_Init+0x50>)
 800285c:	2200      	movs	r2, #0
 800285e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002860:	4b0c      	ldr	r3, [pc, #48]	@ (8002894 <MX_I2C1_Init+0x50>)
 8002862:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002866:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002868:	4b0a      	ldr	r3, [pc, #40]	@ (8002894 <MX_I2C1_Init+0x50>)
 800286a:	2200      	movs	r2, #0
 800286c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800286e:	4b09      	ldr	r3, [pc, #36]	@ (8002894 <MX_I2C1_Init+0x50>)
 8002870:	2200      	movs	r2, #0
 8002872:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002874:	4b07      	ldr	r3, [pc, #28]	@ (8002894 <MX_I2C1_Init+0x50>)
 8002876:	2200      	movs	r2, #0
 8002878:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800287a:	4b06      	ldr	r3, [pc, #24]	@ (8002894 <MX_I2C1_Init+0x50>)
 800287c:	2200      	movs	r2, #0
 800287e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002880:	4804      	ldr	r0, [pc, #16]	@ (8002894 <MX_I2C1_Init+0x50>)
 8002882:	f000 fde1 	bl	8003448 <HAL_I2C_Init>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800288c:	f000 f8fc 	bl	8002a88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002890:	bf00      	nop
 8002892:	bd80      	pop	{r7, pc}
 8002894:	200000e4 	.word	0x200000e4
 8002898:	40005400 	.word	0x40005400
 800289c:	00061a80 	.word	0x00061a80

080028a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80028a4:	4b12      	ldr	r3, [pc, #72]	@ (80028f0 <MX_I2C2_Init+0x50>)
 80028a6:	4a13      	ldr	r2, [pc, #76]	@ (80028f4 <MX_I2C2_Init+0x54>)
 80028a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80028aa:	4b11      	ldr	r3, [pc, #68]	@ (80028f0 <MX_I2C2_Init+0x50>)
 80028ac:	4a12      	ldr	r2, [pc, #72]	@ (80028f8 <MX_I2C2_Init+0x58>)
 80028ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028b0:	4b0f      	ldr	r3, [pc, #60]	@ (80028f0 <MX_I2C2_Init+0x50>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80028b6:	4b0e      	ldr	r3, [pc, #56]	@ (80028f0 <MX_I2C2_Init+0x50>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028bc:	4b0c      	ldr	r3, [pc, #48]	@ (80028f0 <MX_I2C2_Init+0x50>)
 80028be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80028c2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028c4:	4b0a      	ldr	r3, [pc, #40]	@ (80028f0 <MX_I2C2_Init+0x50>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80028ca:	4b09      	ldr	r3, [pc, #36]	@ (80028f0 <MX_I2C2_Init+0x50>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028d0:	4b07      	ldr	r3, [pc, #28]	@ (80028f0 <MX_I2C2_Init+0x50>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028d6:	4b06      	ldr	r3, [pc, #24]	@ (80028f0 <MX_I2C2_Init+0x50>)
 80028d8:	2200      	movs	r2, #0
 80028da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80028dc:	4804      	ldr	r0, [pc, #16]	@ (80028f0 <MX_I2C2_Init+0x50>)
 80028de:	f000 fdb3 	bl	8003448 <HAL_I2C_Init>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80028e8:	f000 f8ce 	bl	8002a88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80028ec:	bf00      	nop
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20000138 	.word	0x20000138
 80028f4:	40005800 	.word	0x40005800
 80028f8:	00061a80 	.word	0x00061a80

080028fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002900:	4b11      	ldr	r3, [pc, #68]	@ (8002948 <MX_USART2_UART_Init+0x4c>)
 8002902:	4a12      	ldr	r2, [pc, #72]	@ (800294c <MX_USART2_UART_Init+0x50>)
 8002904:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002906:	4b10      	ldr	r3, [pc, #64]	@ (8002948 <MX_USART2_UART_Init+0x4c>)
 8002908:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800290c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800290e:	4b0e      	ldr	r3, [pc, #56]	@ (8002948 <MX_USART2_UART_Init+0x4c>)
 8002910:	2200      	movs	r2, #0
 8002912:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002914:	4b0c      	ldr	r3, [pc, #48]	@ (8002948 <MX_USART2_UART_Init+0x4c>)
 8002916:	2200      	movs	r2, #0
 8002918:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800291a:	4b0b      	ldr	r3, [pc, #44]	@ (8002948 <MX_USART2_UART_Init+0x4c>)
 800291c:	2200      	movs	r2, #0
 800291e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002920:	4b09      	ldr	r3, [pc, #36]	@ (8002948 <MX_USART2_UART_Init+0x4c>)
 8002922:	220c      	movs	r2, #12
 8002924:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002926:	4b08      	ldr	r3, [pc, #32]	@ (8002948 <MX_USART2_UART_Init+0x4c>)
 8002928:	2200      	movs	r2, #0
 800292a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800292c:	4b06      	ldr	r3, [pc, #24]	@ (8002948 <MX_USART2_UART_Init+0x4c>)
 800292e:	2200      	movs	r2, #0
 8002930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002932:	4805      	ldr	r0, [pc, #20]	@ (8002948 <MX_USART2_UART_Init+0x4c>)
 8002934:	f002 fbe4 	bl	8005100 <HAL_UART_Init>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800293e:	f000 f8a3 	bl	8002a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	2000018c 	.word	0x2000018c
 800294c:	40004400 	.word	0x40004400

08002950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08a      	sub	sp, #40	@ 0x28
 8002954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002956:	f107 0314 	add.w	r3, r7, #20
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	605a      	str	r2, [r3, #4]
 8002960:	609a      	str	r2, [r3, #8]
 8002962:	60da      	str	r2, [r3, #12]
 8002964:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	4b43      	ldr	r3, [pc, #268]	@ (8002a78 <MX_GPIO_Init+0x128>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	4a42      	ldr	r2, [pc, #264]	@ (8002a78 <MX_GPIO_Init+0x128>)
 8002970:	f043 0304 	orr.w	r3, r3, #4
 8002974:	6313      	str	r3, [r2, #48]	@ 0x30
 8002976:	4b40      	ldr	r3, [pc, #256]	@ (8002a78 <MX_GPIO_Init+0x128>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	4b3c      	ldr	r3, [pc, #240]	@ (8002a78 <MX_GPIO_Init+0x128>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	4a3b      	ldr	r2, [pc, #236]	@ (8002a78 <MX_GPIO_Init+0x128>)
 800298c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002990:	6313      	str	r3, [r2, #48]	@ 0x30
 8002992:	4b39      	ldr	r3, [pc, #228]	@ (8002a78 <MX_GPIO_Init+0x128>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	4b35      	ldr	r3, [pc, #212]	@ (8002a78 <MX_GPIO_Init+0x128>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a6:	4a34      	ldr	r2, [pc, #208]	@ (8002a78 <MX_GPIO_Init+0x128>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ae:	4b32      	ldr	r3, [pc, #200]	@ (8002a78 <MX_GPIO_Init+0x128>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	60bb      	str	r3, [r7, #8]
 80029b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	607b      	str	r3, [r7, #4]
 80029be:	4b2e      	ldr	r3, [pc, #184]	@ (8002a78 <MX_GPIO_Init+0x128>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c2:	4a2d      	ldr	r2, [pc, #180]	@ (8002a78 <MX_GPIO_Init+0x128>)
 80029c4:	f043 0302 	orr.w	r3, r3, #2
 80029c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002a78 <MX_GPIO_Init+0x128>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	607b      	str	r3, [r7, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|V1_Pin|V4_Pin, GPIO_PIN_RESET);
 80029d6:	2200      	movs	r2, #0
 80029d8:	f44f 61a4 	mov.w	r1, #1312	@ 0x520
 80029dc:	4827      	ldr	r0, [pc, #156]	@ (8002a7c <MX_GPIO_Init+0x12c>)
 80029de:	f000 fd19 	bl	8003414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, V8_Pin|V2_Pin, GPIO_PIN_RESET);
 80029e2:	2200      	movs	r2, #0
 80029e4:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80029e8:	4825      	ldr	r0, [pc, #148]	@ (8002a80 <MX_GPIO_Init+0x130>)
 80029ea:	f000 fd13 	bl	8003414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, V5_Pin|V6_Pin|V7_Pin|V3_Pin, GPIO_PIN_RESET);
 80029ee:	2200      	movs	r2, #0
 80029f0:	f24e 0110 	movw	r1, #57360	@ 0xe010
 80029f4:	4823      	ldr	r0, [pc, #140]	@ (8002a84 <MX_GPIO_Init+0x134>)
 80029f6:	f000 fd0d 	bl	8003414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80029fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a00:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a0a:	f107 0314 	add.w	r3, r7, #20
 8002a0e:	4619      	mov	r1, r3
 8002a10:	481b      	ldr	r0, [pc, #108]	@ (8002a80 <MX_GPIO_Init+0x130>)
 8002a12:	f000 fb6b 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin V1_Pin V4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|V1_Pin|V4_Pin;
 8002a16:	f44f 63a4 	mov.w	r3, #1312	@ 0x520
 8002a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a24:	2300      	movs	r3, #0
 8002a26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4813      	ldr	r0, [pc, #76]	@ (8002a7c <MX_GPIO_Init+0x12c>)
 8002a30:	f000 fb5c 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : V8_Pin V2_Pin */
  GPIO_InitStruct.Pin = V8_Pin|V2_Pin;
 8002a34:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8002a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a42:	2300      	movs	r3, #0
 8002a44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a46:	f107 0314 	add.w	r3, r7, #20
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	480c      	ldr	r0, [pc, #48]	@ (8002a80 <MX_GPIO_Init+0x130>)
 8002a4e:	f000 fb4d 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : V5_Pin V6_Pin V7_Pin V3_Pin */
  GPIO_InitStruct.Pin = V5_Pin|V6_Pin|V7_Pin|V3_Pin;
 8002a52:	f24e 0310 	movw	r3, #57360	@ 0xe010
 8002a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a60:	2300      	movs	r3, #0
 8002a62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a64:	f107 0314 	add.w	r3, r7, #20
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4806      	ldr	r0, [pc, #24]	@ (8002a84 <MX_GPIO_Init+0x134>)
 8002a6c:	f000 fb3e 	bl	80030ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a70:	bf00      	nop
 8002a72:	3728      	adds	r7, #40	@ 0x28
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40020000 	.word	0x40020000
 8002a80:	40020800 	.word	0x40020800
 8002a84:	40020400 	.word	0x40020400

08002a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a8c:	b672      	cpsid	i
}
 8002a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a90:	bf00      	nop
 8002a92:	e7fd      	b.n	8002a90 <Error_Handler+0x8>

08002a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	607b      	str	r3, [r7, #4]
 8002a9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ae0 <HAL_MspInit+0x4c>)
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa2:	4a0f      	ldr	r2, [pc, #60]	@ (8002ae0 <HAL_MspInit+0x4c>)
 8002aa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002aa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8002ae0 <HAL_MspInit+0x4c>)
 8002aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ab2:	607b      	str	r3, [r7, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	603b      	str	r3, [r7, #0]
 8002aba:	4b09      	ldr	r3, [pc, #36]	@ (8002ae0 <HAL_MspInit+0x4c>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	4a08      	ldr	r2, [pc, #32]	@ (8002ae0 <HAL_MspInit+0x4c>)
 8002ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ac6:	4b06      	ldr	r3, [pc, #24]	@ (8002ae0 <HAL_MspInit+0x4c>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ad2:	2007      	movs	r0, #7
 8002ad4:	f000 fad6 	bl	8003084 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40023800 	.word	0x40023800

08002ae4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08c      	sub	sp, #48	@ 0x30
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aec:	f107 031c 	add.w	r3, r7, #28
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	60da      	str	r2, [r3, #12]
 8002afa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a42      	ldr	r2, [pc, #264]	@ (8002c0c <HAL_I2C_MspInit+0x128>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d12c      	bne.n	8002b60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	61bb      	str	r3, [r7, #24]
 8002b0a:	4b41      	ldr	r3, [pc, #260]	@ (8002c10 <HAL_I2C_MspInit+0x12c>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0e:	4a40      	ldr	r2, [pc, #256]	@ (8002c10 <HAL_I2C_MspInit+0x12c>)
 8002b10:	f043 0302 	orr.w	r3, r3, #2
 8002b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b16:	4b3e      	ldr	r3, [pc, #248]	@ (8002c10 <HAL_I2C_MspInit+0x12c>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	61bb      	str	r3, [r7, #24]
 8002b20:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b22:	23c0      	movs	r3, #192	@ 0xc0
 8002b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b26:	2312      	movs	r3, #18
 8002b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b32:	2304      	movs	r3, #4
 8002b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b36:	f107 031c 	add.w	r3, r7, #28
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4835      	ldr	r0, [pc, #212]	@ (8002c14 <HAL_I2C_MspInit+0x130>)
 8002b3e:	f000 fad5 	bl	80030ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	617b      	str	r3, [r7, #20]
 8002b46:	4b32      	ldr	r3, [pc, #200]	@ (8002c10 <HAL_I2C_MspInit+0x12c>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4a:	4a31      	ldr	r2, [pc, #196]	@ (8002c10 <HAL_I2C_MspInit+0x12c>)
 8002b4c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b52:	4b2f      	ldr	r3, [pc, #188]	@ (8002c10 <HAL_I2C_MspInit+0x12c>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b5a:	617b      	str	r3, [r7, #20]
 8002b5c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002b5e:	e050      	b.n	8002c02 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a2c      	ldr	r2, [pc, #176]	@ (8002c18 <HAL_I2C_MspInit+0x134>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d14b      	bne.n	8002c02 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	4b28      	ldr	r3, [pc, #160]	@ (8002c10 <HAL_I2C_MspInit+0x12c>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	4a27      	ldr	r2, [pc, #156]	@ (8002c10 <HAL_I2C_MspInit+0x12c>)
 8002b74:	f043 0302 	orr.w	r3, r3, #2
 8002b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b7a:	4b25      	ldr	r3, [pc, #148]	@ (8002c10 <HAL_I2C_MspInit+0x12c>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	613b      	str	r3, [r7, #16]
 8002b84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	4b21      	ldr	r3, [pc, #132]	@ (8002c10 <HAL_I2C_MspInit+0x12c>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	4a20      	ldr	r2, [pc, #128]	@ (8002c10 <HAL_I2C_MspInit+0x12c>)
 8002b90:	f043 0304 	orr.w	r3, r3, #4
 8002b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b96:	4b1e      	ldr	r3, [pc, #120]	@ (8002c10 <HAL_I2C_MspInit+0x12c>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ba2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ba8:	2312      	movs	r3, #18
 8002baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002bb4:	2304      	movs	r3, #4
 8002bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb8:	f107 031c 	add.w	r3, r7, #28
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4815      	ldr	r0, [pc, #84]	@ (8002c14 <HAL_I2C_MspInit+0x130>)
 8002bc0:	f000 fa94 	bl	80030ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002bc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bca:	2312      	movs	r3, #18
 8002bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002bd6:	2304      	movs	r3, #4
 8002bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bda:	f107 031c 	add.w	r3, r7, #28
 8002bde:	4619      	mov	r1, r3
 8002be0:	480e      	ldr	r0, [pc, #56]	@ (8002c1c <HAL_I2C_MspInit+0x138>)
 8002be2:	f000 fa83 	bl	80030ec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	4b09      	ldr	r3, [pc, #36]	@ (8002c10 <HAL_I2C_MspInit+0x12c>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	4a08      	ldr	r2, [pc, #32]	@ (8002c10 <HAL_I2C_MspInit+0x12c>)
 8002bf0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bf6:	4b06      	ldr	r3, [pc, #24]	@ (8002c10 <HAL_I2C_MspInit+0x12c>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	68bb      	ldr	r3, [r7, #8]
}
 8002c02:	bf00      	nop
 8002c04:	3730      	adds	r7, #48	@ 0x30
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40005400 	.word	0x40005400
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40020400 	.word	0x40020400
 8002c18:	40005800 	.word	0x40005800
 8002c1c:	40020800 	.word	0x40020800

08002c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08a      	sub	sp, #40	@ 0x28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c28:	f107 0314 	add.w	r3, r7, #20
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	60da      	str	r2, [r3, #12]
 8002c36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a19      	ldr	r2, [pc, #100]	@ (8002ca4 <HAL_UART_MspInit+0x84>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d12b      	bne.n	8002c9a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	4b18      	ldr	r3, [pc, #96]	@ (8002ca8 <HAL_UART_MspInit+0x88>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	4a17      	ldr	r2, [pc, #92]	@ (8002ca8 <HAL_UART_MspInit+0x88>)
 8002c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c52:	4b15      	ldr	r3, [pc, #84]	@ (8002ca8 <HAL_UART_MspInit+0x88>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c5a:	613b      	str	r3, [r7, #16]
 8002c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	4b11      	ldr	r3, [pc, #68]	@ (8002ca8 <HAL_UART_MspInit+0x88>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c66:	4a10      	ldr	r2, [pc, #64]	@ (8002ca8 <HAL_UART_MspInit+0x88>)
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca8 <HAL_UART_MspInit+0x88>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c7a:	230c      	movs	r3, #12
 8002c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c86:	2303      	movs	r3, #3
 8002c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c8a:	2307      	movs	r3, #7
 8002c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c8e:	f107 0314 	add.w	r3, r7, #20
 8002c92:	4619      	mov	r1, r3
 8002c94:	4805      	ldr	r0, [pc, #20]	@ (8002cac <HAL_UART_MspInit+0x8c>)
 8002c96:	f000 fa29 	bl	80030ec <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002c9a:	bf00      	nop
 8002c9c:	3728      	adds	r7, #40	@ 0x28
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40004400 	.word	0x40004400
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40020000 	.word	0x40020000

08002cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cb4:	bf00      	nop
 8002cb6:	e7fd      	b.n	8002cb4 <NMI_Handler+0x4>

08002cb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cbc:	bf00      	nop
 8002cbe:	e7fd      	b.n	8002cbc <HardFault_Handler+0x4>

08002cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cc4:	bf00      	nop
 8002cc6:	e7fd      	b.n	8002cc4 <MemManage_Handler+0x4>

08002cc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ccc:	bf00      	nop
 8002cce:	e7fd      	b.n	8002ccc <BusFault_Handler+0x4>

08002cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cd4:	bf00      	nop
 8002cd6:	e7fd      	b.n	8002cd4 <UsageFault_Handler+0x4>

08002cd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cea:	bf00      	nop
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d06:	f000 f8c7 	bl	8002e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d0a:	bf00      	nop
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d18:	4a14      	ldr	r2, [pc, #80]	@ (8002d6c <_sbrk+0x5c>)
 8002d1a:	4b15      	ldr	r3, [pc, #84]	@ (8002d70 <_sbrk+0x60>)
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d24:	4b13      	ldr	r3, [pc, #76]	@ (8002d74 <_sbrk+0x64>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d102      	bne.n	8002d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d2c:	4b11      	ldr	r3, [pc, #68]	@ (8002d74 <_sbrk+0x64>)
 8002d2e:	4a12      	ldr	r2, [pc, #72]	@ (8002d78 <_sbrk+0x68>)
 8002d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d32:	4b10      	ldr	r3, [pc, #64]	@ (8002d74 <_sbrk+0x64>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4413      	add	r3, r2
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d207      	bcs.n	8002d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d40:	f002 fe12 	bl	8005968 <__errno>
 8002d44:	4603      	mov	r3, r0
 8002d46:	220c      	movs	r2, #12
 8002d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4e:	e009      	b.n	8002d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d50:	4b08      	ldr	r3, [pc, #32]	@ (8002d74 <_sbrk+0x64>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d56:	4b07      	ldr	r3, [pc, #28]	@ (8002d74 <_sbrk+0x64>)
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	4a05      	ldr	r2, [pc, #20]	@ (8002d74 <_sbrk+0x64>)
 8002d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d62:	68fb      	ldr	r3, [r7, #12]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	20020000 	.word	0x20020000
 8002d70:	00000400 	.word	0x00000400
 8002d74:	20000234 	.word	0x20000234
 8002d78:	20000388 	.word	0x20000388

08002d7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d80:	4b06      	ldr	r3, [pc, #24]	@ (8002d9c <SystemInit+0x20>)
 8002d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d86:	4a05      	ldr	r2, [pc, #20]	@ (8002d9c <SystemInit+0x20>)
 8002d88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002da0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002dd8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002da4:	f7ff ffea 	bl	8002d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002da8:	480c      	ldr	r0, [pc, #48]	@ (8002ddc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002daa:	490d      	ldr	r1, [pc, #52]	@ (8002de0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002dac:	4a0d      	ldr	r2, [pc, #52]	@ (8002de4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002db0:	e002      	b.n	8002db8 <LoopCopyDataInit>

08002db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002db6:	3304      	adds	r3, #4

08002db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dbc:	d3f9      	bcc.n	8002db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8002de8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002dc0:	4c0a      	ldr	r4, [pc, #40]	@ (8002dec <LoopFillZerobss+0x22>)
  movs r3, #0
 8002dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dc4:	e001      	b.n	8002dca <LoopFillZerobss>

08002dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dc8:	3204      	adds	r2, #4

08002dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dcc:	d3fb      	bcc.n	8002dc6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002dce:	f002 fdd1 	bl	8005974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dd2:	f7ff fa71 	bl	80022b8 <main>
  bx  lr    
 8002dd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002dd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002de0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002de4:	080063a4 	.word	0x080063a4
  ldr r2, =_sbss
 8002de8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002dec:	20000384 	.word	0x20000384

08002df0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002df0:	e7fe      	b.n	8002df0 <ADC_IRQHandler>
	...

08002df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002df8:	4b0e      	ldr	r3, [pc, #56]	@ (8002e34 <HAL_Init+0x40>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8002e34 <HAL_Init+0x40>)
 8002dfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e04:	4b0b      	ldr	r3, [pc, #44]	@ (8002e34 <HAL_Init+0x40>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a0a      	ldr	r2, [pc, #40]	@ (8002e34 <HAL_Init+0x40>)
 8002e0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e10:	4b08      	ldr	r3, [pc, #32]	@ (8002e34 <HAL_Init+0x40>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a07      	ldr	r2, [pc, #28]	@ (8002e34 <HAL_Init+0x40>)
 8002e16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e1c:	2003      	movs	r0, #3
 8002e1e:	f000 f931 	bl	8003084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e22:	2000      	movs	r0, #0
 8002e24:	f000 f808 	bl	8002e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e28:	f7ff fe34 	bl	8002a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40023c00 	.word	0x40023c00

08002e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e40:	4b12      	ldr	r3, [pc, #72]	@ (8002e8c <HAL_InitTick+0x54>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4b12      	ldr	r3, [pc, #72]	@ (8002e90 <HAL_InitTick+0x58>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	4619      	mov	r1, r3
 8002e4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 f93b 	bl	80030d2 <HAL_SYSTICK_Config>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e00e      	b.n	8002e84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b0f      	cmp	r3, #15
 8002e6a:	d80a      	bhi.n	8002e82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	f04f 30ff 	mov.w	r0, #4294967295
 8002e74:	f000 f911 	bl	800309a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e78:	4a06      	ldr	r2, [pc, #24]	@ (8002e94 <HAL_InitTick+0x5c>)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	e000      	b.n	8002e84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	20000004 	.word	0x20000004
 8002e90:	2000000c 	.word	0x2000000c
 8002e94:	20000008 	.word	0x20000008

08002e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e9c:	4b06      	ldr	r3, [pc, #24]	@ (8002eb8 <HAL_IncTick+0x20>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4b06      	ldr	r3, [pc, #24]	@ (8002ebc <HAL_IncTick+0x24>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	4a04      	ldr	r2, [pc, #16]	@ (8002ebc <HAL_IncTick+0x24>)
 8002eaa:	6013      	str	r3, [r2, #0]
}
 8002eac:	bf00      	nop
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	2000000c 	.word	0x2000000c
 8002ebc:	20000238 	.word	0x20000238

08002ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ec4:	4b03      	ldr	r3, [pc, #12]	@ (8002ed4 <HAL_GetTick+0x14>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	20000238 	.word	0x20000238

08002ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ee0:	f7ff ffee 	bl	8002ec0 <HAL_GetTick>
 8002ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef0:	d005      	beq.n	8002efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8002f1c <HAL_Delay+0x44>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4413      	add	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002efe:	bf00      	nop
 8002f00:	f7ff ffde 	bl	8002ec0 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d8f7      	bhi.n	8002f00 <HAL_Delay+0x28>
  {
  }
}
 8002f10:	bf00      	nop
 8002f12:	bf00      	nop
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	2000000c 	.word	0x2000000c

08002f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f30:	4b0c      	ldr	r3, [pc, #48]	@ (8002f64 <__NVIC_SetPriorityGrouping+0x44>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f52:	4a04      	ldr	r2, [pc, #16]	@ (8002f64 <__NVIC_SetPriorityGrouping+0x44>)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	60d3      	str	r3, [r2, #12]
}
 8002f58:	bf00      	nop
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f6c:	4b04      	ldr	r3, [pc, #16]	@ (8002f80 <__NVIC_GetPriorityGrouping+0x18>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	0a1b      	lsrs	r3, r3, #8
 8002f72:	f003 0307 	and.w	r3, r3, #7
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	e000ed00 	.word	0xe000ed00

08002f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	6039      	str	r1, [r7, #0]
 8002f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	db0a      	blt.n	8002fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	490c      	ldr	r1, [pc, #48]	@ (8002fd0 <__NVIC_SetPriority+0x4c>)
 8002f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa2:	0112      	lsls	r2, r2, #4
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fac:	e00a      	b.n	8002fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	4908      	ldr	r1, [pc, #32]	@ (8002fd4 <__NVIC_SetPriority+0x50>)
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	3b04      	subs	r3, #4
 8002fbc:	0112      	lsls	r2, r2, #4
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	761a      	strb	r2, [r3, #24]
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	e000e100 	.word	0xe000e100
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b089      	sub	sp, #36	@ 0x24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f1c3 0307 	rsb	r3, r3, #7
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	bf28      	it	cs
 8002ff6:	2304      	movcs	r3, #4
 8002ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	2b06      	cmp	r3, #6
 8003000:	d902      	bls.n	8003008 <NVIC_EncodePriority+0x30>
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3b03      	subs	r3, #3
 8003006:	e000      	b.n	800300a <NVIC_EncodePriority+0x32>
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800300c:	f04f 32ff 	mov.w	r2, #4294967295
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43da      	mvns	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	401a      	ands	r2, r3
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003020:	f04f 31ff 	mov.w	r1, #4294967295
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	fa01 f303 	lsl.w	r3, r1, r3
 800302a:	43d9      	mvns	r1, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003030:	4313      	orrs	r3, r2
         );
}
 8003032:	4618      	mov	r0, r3
 8003034:	3724      	adds	r7, #36	@ 0x24
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
	...

08003040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3b01      	subs	r3, #1
 800304c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003050:	d301      	bcc.n	8003056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003052:	2301      	movs	r3, #1
 8003054:	e00f      	b.n	8003076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003056:	4a0a      	ldr	r2, [pc, #40]	@ (8003080 <SysTick_Config+0x40>)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3b01      	subs	r3, #1
 800305c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800305e:	210f      	movs	r1, #15
 8003060:	f04f 30ff 	mov.w	r0, #4294967295
 8003064:	f7ff ff8e 	bl	8002f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003068:	4b05      	ldr	r3, [pc, #20]	@ (8003080 <SysTick_Config+0x40>)
 800306a:	2200      	movs	r2, #0
 800306c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800306e:	4b04      	ldr	r3, [pc, #16]	@ (8003080 <SysTick_Config+0x40>)
 8003070:	2207      	movs	r2, #7
 8003072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	e000e010 	.word	0xe000e010

08003084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff ff47 	bl	8002f20 <__NVIC_SetPriorityGrouping>
}
 8003092:	bf00      	nop
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800309a:	b580      	push	{r7, lr}
 800309c:	b086      	sub	sp, #24
 800309e:	af00      	add	r7, sp, #0
 80030a0:	4603      	mov	r3, r0
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	607a      	str	r2, [r7, #4]
 80030a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030ac:	f7ff ff5c 	bl	8002f68 <__NVIC_GetPriorityGrouping>
 80030b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	68b9      	ldr	r1, [r7, #8]
 80030b6:	6978      	ldr	r0, [r7, #20]
 80030b8:	f7ff ff8e 	bl	8002fd8 <NVIC_EncodePriority>
 80030bc:	4602      	mov	r2, r0
 80030be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff ff5d 	bl	8002f84 <__NVIC_SetPriority>
}
 80030ca:	bf00      	nop
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff ffb0 	bl	8003040 <SysTick_Config>
 80030e0:	4603      	mov	r3, r0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b089      	sub	sp, #36	@ 0x24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030fe:	2300      	movs	r3, #0
 8003100:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003102:	2300      	movs	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]
 8003106:	e165      	b.n	80033d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003108:	2201      	movs	r2, #1
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4013      	ands	r3, r2
 800311a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	429a      	cmp	r2, r3
 8003122:	f040 8154 	bne.w	80033ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	2b01      	cmp	r3, #1
 8003130:	d005      	beq.n	800313e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800313a:	2b02      	cmp	r3, #2
 800313c:	d130      	bne.n	80031a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	2203      	movs	r2, #3
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43db      	mvns	r3, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4013      	ands	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003174:	2201      	movs	r2, #1
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4013      	ands	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	091b      	lsrs	r3, r3, #4
 800318a:	f003 0201 	and.w	r2, r3, #1
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f003 0303 	and.w	r3, r3, #3
 80031a8:	2b03      	cmp	r3, #3
 80031aa:	d017      	beq.n	80031dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	2203      	movs	r2, #3
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 0303 	and.w	r3, r3, #3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d123      	bne.n	8003230 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	08da      	lsrs	r2, r3, #3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3208      	adds	r2, #8
 80031f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	220f      	movs	r2, #15
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	43db      	mvns	r3, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4013      	ands	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	08da      	lsrs	r2, r3, #3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	3208      	adds	r2, #8
 800322a:	69b9      	ldr	r1, [r7, #24]
 800322c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	2203      	movs	r2, #3
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 0203 	and.w	r2, r3, #3
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 80ae 	beq.w	80033ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	4b5d      	ldr	r3, [pc, #372]	@ (80033ec <HAL_GPIO_Init+0x300>)
 8003278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800327a:	4a5c      	ldr	r2, [pc, #368]	@ (80033ec <HAL_GPIO_Init+0x300>)
 800327c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003280:	6453      	str	r3, [r2, #68]	@ 0x44
 8003282:	4b5a      	ldr	r3, [pc, #360]	@ (80033ec <HAL_GPIO_Init+0x300>)
 8003284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003286:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800328e:	4a58      	ldr	r2, [pc, #352]	@ (80033f0 <HAL_GPIO_Init+0x304>)
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	089b      	lsrs	r3, r3, #2
 8003294:	3302      	adds	r3, #2
 8003296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800329a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	220f      	movs	r2, #15
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43db      	mvns	r3, r3
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	4013      	ands	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a4f      	ldr	r2, [pc, #316]	@ (80033f4 <HAL_GPIO_Init+0x308>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d025      	beq.n	8003306 <HAL_GPIO_Init+0x21a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a4e      	ldr	r2, [pc, #312]	@ (80033f8 <HAL_GPIO_Init+0x30c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d01f      	beq.n	8003302 <HAL_GPIO_Init+0x216>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a4d      	ldr	r2, [pc, #308]	@ (80033fc <HAL_GPIO_Init+0x310>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d019      	beq.n	80032fe <HAL_GPIO_Init+0x212>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a4c      	ldr	r2, [pc, #304]	@ (8003400 <HAL_GPIO_Init+0x314>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d013      	beq.n	80032fa <HAL_GPIO_Init+0x20e>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003404 <HAL_GPIO_Init+0x318>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00d      	beq.n	80032f6 <HAL_GPIO_Init+0x20a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a4a      	ldr	r2, [pc, #296]	@ (8003408 <HAL_GPIO_Init+0x31c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d007      	beq.n	80032f2 <HAL_GPIO_Init+0x206>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a49      	ldr	r2, [pc, #292]	@ (800340c <HAL_GPIO_Init+0x320>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d101      	bne.n	80032ee <HAL_GPIO_Init+0x202>
 80032ea:	2306      	movs	r3, #6
 80032ec:	e00c      	b.n	8003308 <HAL_GPIO_Init+0x21c>
 80032ee:	2307      	movs	r3, #7
 80032f0:	e00a      	b.n	8003308 <HAL_GPIO_Init+0x21c>
 80032f2:	2305      	movs	r3, #5
 80032f4:	e008      	b.n	8003308 <HAL_GPIO_Init+0x21c>
 80032f6:	2304      	movs	r3, #4
 80032f8:	e006      	b.n	8003308 <HAL_GPIO_Init+0x21c>
 80032fa:	2303      	movs	r3, #3
 80032fc:	e004      	b.n	8003308 <HAL_GPIO_Init+0x21c>
 80032fe:	2302      	movs	r3, #2
 8003300:	e002      	b.n	8003308 <HAL_GPIO_Init+0x21c>
 8003302:	2301      	movs	r3, #1
 8003304:	e000      	b.n	8003308 <HAL_GPIO_Init+0x21c>
 8003306:	2300      	movs	r3, #0
 8003308:	69fa      	ldr	r2, [r7, #28]
 800330a:	f002 0203 	and.w	r2, r2, #3
 800330e:	0092      	lsls	r2, r2, #2
 8003310:	4093      	lsls	r3, r2
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4313      	orrs	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003318:	4935      	ldr	r1, [pc, #212]	@ (80033f0 <HAL_GPIO_Init+0x304>)
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	089b      	lsrs	r3, r3, #2
 800331e:	3302      	adds	r3, #2
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003326:	4b3a      	ldr	r3, [pc, #232]	@ (8003410 <HAL_GPIO_Init+0x324>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	43db      	mvns	r3, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4013      	ands	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800334a:	4a31      	ldr	r2, [pc, #196]	@ (8003410 <HAL_GPIO_Init+0x324>)
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003350:	4b2f      	ldr	r3, [pc, #188]	@ (8003410 <HAL_GPIO_Init+0x324>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	43db      	mvns	r3, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4013      	ands	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003374:	4a26      	ldr	r2, [pc, #152]	@ (8003410 <HAL_GPIO_Init+0x324>)
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800337a:	4b25      	ldr	r3, [pc, #148]	@ (8003410 <HAL_GPIO_Init+0x324>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	43db      	mvns	r3, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4013      	ands	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	4313      	orrs	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800339e:	4a1c      	ldr	r2, [pc, #112]	@ (8003410 <HAL_GPIO_Init+0x324>)
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003410 <HAL_GPIO_Init+0x324>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	43db      	mvns	r3, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4013      	ands	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033c8:	4a11      	ldr	r2, [pc, #68]	@ (8003410 <HAL_GPIO_Init+0x324>)
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	3301      	adds	r3, #1
 80033d2:	61fb      	str	r3, [r7, #28]
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	2b0f      	cmp	r3, #15
 80033d8:	f67f ae96 	bls.w	8003108 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033dc:	bf00      	nop
 80033de:	bf00      	nop
 80033e0:	3724      	adds	r7, #36	@ 0x24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40013800 	.word	0x40013800
 80033f4:	40020000 	.word	0x40020000
 80033f8:	40020400 	.word	0x40020400
 80033fc:	40020800 	.word	0x40020800
 8003400:	40020c00 	.word	0x40020c00
 8003404:	40021000 	.word	0x40021000
 8003408:	40021400 	.word	0x40021400
 800340c:	40021800 	.word	0x40021800
 8003410:	40013c00 	.word	0x40013c00

08003414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	807b      	strh	r3, [r7, #2]
 8003420:	4613      	mov	r3, r2
 8003422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003424:	787b      	ldrb	r3, [r7, #1]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800342a:	887a      	ldrh	r2, [r7, #2]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003430:	e003      	b.n	800343a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003432:	887b      	ldrh	r3, [r7, #2]
 8003434:	041a      	lsls	r2, r3, #16
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	619a      	str	r2, [r3, #24]
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
	...

08003448 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e12b      	b.n	80036b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d106      	bne.n	8003474 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff fb38 	bl	8002ae4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2224      	movs	r2, #36	@ 0x24
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0201 	bic.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800349a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034ac:	f001 f932 	bl	8004714 <HAL_RCC_GetPCLK1Freq>
 80034b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	4a81      	ldr	r2, [pc, #516]	@ (80036bc <HAL_I2C_Init+0x274>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d807      	bhi.n	80034cc <HAL_I2C_Init+0x84>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4a80      	ldr	r2, [pc, #512]	@ (80036c0 <HAL_I2C_Init+0x278>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	bf94      	ite	ls
 80034c4:	2301      	movls	r3, #1
 80034c6:	2300      	movhi	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	e006      	b.n	80034da <HAL_I2C_Init+0x92>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4a7d      	ldr	r2, [pc, #500]	@ (80036c4 <HAL_I2C_Init+0x27c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	bf94      	ite	ls
 80034d4:	2301      	movls	r3, #1
 80034d6:	2300      	movhi	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e0e7      	b.n	80036b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4a78      	ldr	r2, [pc, #480]	@ (80036c8 <HAL_I2C_Init+0x280>)
 80034e6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ea:	0c9b      	lsrs	r3, r3, #18
 80034ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	430a      	orrs	r2, r1
 8003500:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	4a6a      	ldr	r2, [pc, #424]	@ (80036bc <HAL_I2C_Init+0x274>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d802      	bhi.n	800351c <HAL_I2C_Init+0xd4>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	3301      	adds	r3, #1
 800351a:	e009      	b.n	8003530 <HAL_I2C_Init+0xe8>
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003522:	fb02 f303 	mul.w	r3, r2, r3
 8003526:	4a69      	ldr	r2, [pc, #420]	@ (80036cc <HAL_I2C_Init+0x284>)
 8003528:	fba2 2303 	umull	r2, r3, r2, r3
 800352c:	099b      	lsrs	r3, r3, #6
 800352e:	3301      	adds	r3, #1
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6812      	ldr	r2, [r2, #0]
 8003534:	430b      	orrs	r3, r1
 8003536:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003542:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	495c      	ldr	r1, [pc, #368]	@ (80036bc <HAL_I2C_Init+0x274>)
 800354c:	428b      	cmp	r3, r1
 800354e:	d819      	bhi.n	8003584 <HAL_I2C_Init+0x13c>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	1e59      	subs	r1, r3, #1
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	fbb1 f3f3 	udiv	r3, r1, r3
 800355e:	1c59      	adds	r1, r3, #1
 8003560:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003564:	400b      	ands	r3, r1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <HAL_I2C_Init+0x138>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	1e59      	subs	r1, r3, #1
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	fbb1 f3f3 	udiv	r3, r1, r3
 8003578:	3301      	adds	r3, #1
 800357a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800357e:	e051      	b.n	8003624 <HAL_I2C_Init+0x1dc>
 8003580:	2304      	movs	r3, #4
 8003582:	e04f      	b.n	8003624 <HAL_I2C_Init+0x1dc>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d111      	bne.n	80035b0 <HAL_I2C_Init+0x168>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	1e58      	subs	r0, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6859      	ldr	r1, [r3, #4]
 8003594:	460b      	mov	r3, r1
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	440b      	add	r3, r1
 800359a:	fbb0 f3f3 	udiv	r3, r0, r3
 800359e:	3301      	adds	r3, #1
 80035a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	bf0c      	ite	eq
 80035a8:	2301      	moveq	r3, #1
 80035aa:	2300      	movne	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	e012      	b.n	80035d6 <HAL_I2C_Init+0x18e>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	1e58      	subs	r0, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6859      	ldr	r1, [r3, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	0099      	lsls	r1, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035c6:	3301      	adds	r3, #1
 80035c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	bf0c      	ite	eq
 80035d0:	2301      	moveq	r3, #1
 80035d2:	2300      	movne	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_I2C_Init+0x196>
 80035da:	2301      	movs	r3, #1
 80035dc:	e022      	b.n	8003624 <HAL_I2C_Init+0x1dc>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10e      	bne.n	8003604 <HAL_I2C_Init+0x1bc>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	1e58      	subs	r0, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6859      	ldr	r1, [r3, #4]
 80035ee:	460b      	mov	r3, r1
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	440b      	add	r3, r1
 80035f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80035f8:	3301      	adds	r3, #1
 80035fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003602:	e00f      	b.n	8003624 <HAL_I2C_Init+0x1dc>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	1e58      	subs	r0, r3, #1
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6859      	ldr	r1, [r3, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	0099      	lsls	r1, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	fbb0 f3f3 	udiv	r3, r0, r3
 800361a:	3301      	adds	r3, #1
 800361c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003620:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	6809      	ldr	r1, [r1, #0]
 8003628:	4313      	orrs	r3, r2
 800362a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69da      	ldr	r2, [r3, #28]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003652:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6911      	ldr	r1, [r2, #16]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	68d2      	ldr	r2, [r2, #12]
 800365e:	4311      	orrs	r1, r2
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	430b      	orrs	r3, r1
 8003666:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695a      	ldr	r2, [r3, #20]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0201 	orr.w	r2, r2, #1
 8003692:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2220      	movs	r2, #32
 800369e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	000186a0 	.word	0x000186a0
 80036c0:	001e847f 	.word	0x001e847f
 80036c4:	003d08ff 	.word	0x003d08ff
 80036c8:	431bde83 	.word	0x431bde83
 80036cc:	10624dd3 	.word	0x10624dd3

080036d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b088      	sub	sp, #32
 80036d4:	af02      	add	r7, sp, #8
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	4608      	mov	r0, r1
 80036da:	4611      	mov	r1, r2
 80036dc:	461a      	mov	r2, r3
 80036de:	4603      	mov	r3, r0
 80036e0:	817b      	strh	r3, [r7, #10]
 80036e2:	460b      	mov	r3, r1
 80036e4:	813b      	strh	r3, [r7, #8]
 80036e6:	4613      	mov	r3, r2
 80036e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036ea:	f7ff fbe9 	bl	8002ec0 <HAL_GetTick>
 80036ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b20      	cmp	r3, #32
 80036fa:	f040 80d9 	bne.w	80038b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	2319      	movs	r3, #25
 8003704:	2201      	movs	r2, #1
 8003706:	496d      	ldr	r1, [pc, #436]	@ (80038bc <HAL_I2C_Mem_Write+0x1ec>)
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 fc8b 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003714:	2302      	movs	r3, #2
 8003716:	e0cc      	b.n	80038b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800371e:	2b01      	cmp	r3, #1
 8003720:	d101      	bne.n	8003726 <HAL_I2C_Mem_Write+0x56>
 8003722:	2302      	movs	r3, #2
 8003724:	e0c5      	b.n	80038b2 <HAL_I2C_Mem_Write+0x1e2>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b01      	cmp	r3, #1
 800373a:	d007      	beq.n	800374c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0201 	orr.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800375a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2221      	movs	r2, #33	@ 0x21
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2240      	movs	r2, #64	@ 0x40
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a3a      	ldr	r2, [r7, #32]
 8003776:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800377c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4a4d      	ldr	r2, [pc, #308]	@ (80038c0 <HAL_I2C_Mem_Write+0x1f0>)
 800378c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800378e:	88f8      	ldrh	r0, [r7, #6]
 8003790:	893a      	ldrh	r2, [r7, #8]
 8003792:	8979      	ldrh	r1, [r7, #10]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	9301      	str	r3, [sp, #4]
 8003798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	4603      	mov	r3, r0
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 fac2 	bl	8003d28 <I2C_RequestMemoryWrite>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d052      	beq.n	8003850 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e081      	b.n	80038b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 fd50 	bl	8004258 <I2C_WaitOnTXEFlagUntilTimeout>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00d      	beq.n	80037da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d107      	bne.n	80037d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e06b      	b.n	80038b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037de:	781a      	ldrb	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003800:	b29b      	uxth	r3, r3
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b04      	cmp	r3, #4
 8003816:	d11b      	bne.n	8003850 <HAL_I2C_Mem_Write+0x180>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800381c:	2b00      	cmp	r3, #0
 800381e:	d017      	beq.n	8003850 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003824:	781a      	ldrb	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1aa      	bne.n	80037ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 fd43 	bl	80042e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00d      	beq.n	8003884 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386c:	2b04      	cmp	r3, #4
 800386e:	d107      	bne.n	8003880 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800387e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e016      	b.n	80038b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003892:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	e000      	b.n	80038b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038b0:	2302      	movs	r3, #2
  }
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	00100002 	.word	0x00100002
 80038c0:	ffff0000 	.word	0xffff0000

080038c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08c      	sub	sp, #48	@ 0x30
 80038c8:	af02      	add	r7, sp, #8
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	4608      	mov	r0, r1
 80038ce:	4611      	mov	r1, r2
 80038d0:	461a      	mov	r2, r3
 80038d2:	4603      	mov	r3, r0
 80038d4:	817b      	strh	r3, [r7, #10]
 80038d6:	460b      	mov	r3, r1
 80038d8:	813b      	strh	r3, [r7, #8]
 80038da:	4613      	mov	r3, r2
 80038dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038de:	f7ff faef 	bl	8002ec0 <HAL_GetTick>
 80038e2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b20      	cmp	r3, #32
 80038ee:	f040 8214 	bne.w	8003d1a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	2319      	movs	r3, #25
 80038f8:	2201      	movs	r2, #1
 80038fa:	497b      	ldr	r1, [pc, #492]	@ (8003ae8 <HAL_I2C_Mem_Read+0x224>)
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 fb91 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003908:	2302      	movs	r3, #2
 800390a:	e207      	b.n	8003d1c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <HAL_I2C_Mem_Read+0x56>
 8003916:	2302      	movs	r3, #2
 8003918:	e200      	b.n	8003d1c <HAL_I2C_Mem_Read+0x458>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b01      	cmp	r3, #1
 800392e:	d007      	beq.n	8003940 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800394e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2222      	movs	r2, #34	@ 0x22
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2240      	movs	r2, #64	@ 0x40
 800395c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800396a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003970:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4a5b      	ldr	r2, [pc, #364]	@ (8003aec <HAL_I2C_Mem_Read+0x228>)
 8003980:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003982:	88f8      	ldrh	r0, [r7, #6]
 8003984:	893a      	ldrh	r2, [r7, #8]
 8003986:	8979      	ldrh	r1, [r7, #10]
 8003988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398a:	9301      	str	r3, [sp, #4]
 800398c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	4603      	mov	r3, r0
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 fa5e 	bl	8003e54 <I2C_RequestMemoryRead>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e1bc      	b.n	8003d1c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d113      	bne.n	80039d2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039aa:	2300      	movs	r3, #0
 80039ac:	623b      	str	r3, [r7, #32]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	623b      	str	r3, [r7, #32]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	623b      	str	r3, [r7, #32]
 80039be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	e190      	b.n	8003cf4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d11b      	bne.n	8003a12 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ea:	2300      	movs	r3, #0
 80039ec:	61fb      	str	r3, [r7, #28]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	61fb      	str	r3, [r7, #28]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	61fb      	str	r3, [r7, #28]
 80039fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	e170      	b.n	8003cf4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d11b      	bne.n	8003a52 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61bb      	str	r3, [r7, #24]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	61bb      	str	r3, [r7, #24]
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	e150      	b.n	8003cf4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a52:	2300      	movs	r3, #0
 8003a54:	617b      	str	r3, [r7, #20]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a68:	e144      	b.n	8003cf4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	f200 80f1 	bhi.w	8003c56 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d123      	bne.n	8003ac4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a7e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 fc79 	bl	8004378 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e145      	b.n	8003d1c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691a      	ldr	r2, [r3, #16]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9a:	b2d2      	uxtb	r2, r2
 8003a9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa2:	1c5a      	adds	r2, r3, #1
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	3b01      	subs	r3, #1
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ac2:	e117      	b.n	8003cf4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d14e      	bne.n	8003b6a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	4906      	ldr	r1, [pc, #24]	@ (8003af0 <HAL_I2C_Mem_Read+0x22c>)
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 faa4 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d008      	beq.n	8003af4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e11a      	b.n	8003d1c <HAL_I2C_Mem_Read+0x458>
 8003ae6:	bf00      	nop
 8003ae8:	00100002 	.word	0x00100002
 8003aec:	ffff0000 	.word	0xffff0000
 8003af0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691a      	ldr	r2, [r3, #16]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b16:	1c5a      	adds	r2, r3, #1
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b20:	3b01      	subs	r3, #1
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b68:	e0c4      	b.n	8003cf4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b70:	2200      	movs	r2, #0
 8003b72:	496c      	ldr	r1, [pc, #432]	@ (8003d24 <HAL_I2C_Mem_Read+0x460>)
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 fa55 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e0cb      	b.n	8003d1c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bcc:	2200      	movs	r2, #0
 8003bce:	4955      	ldr	r1, [pc, #340]	@ (8003d24 <HAL_I2C_Mem_Read+0x460>)
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 fa27 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e09d      	b.n	8003d1c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	691a      	ldr	r2, [r3, #16]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	691a      	ldr	r2, [r3, #16]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2c:	b2d2      	uxtb	r2, r2
 8003c2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c54:	e04e      	b.n	8003cf4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c58:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 fb8c 	bl	8004378 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e058      	b.n	8003d1c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	f003 0304 	and.w	r3, r3, #4
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d124      	bne.n	8003cf4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cae:	2b03      	cmp	r3, #3
 8003cb0:	d107      	bne.n	8003cc2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cc0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f47f aeb6 	bne.w	8003a6a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2220      	movs	r2, #32
 8003d02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	e000      	b.n	8003d1c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003d1a:	2302      	movs	r3, #2
  }
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3728      	adds	r7, #40	@ 0x28
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	00010004 	.word	0x00010004

08003d28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af02      	add	r7, sp, #8
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	4608      	mov	r0, r1
 8003d32:	4611      	mov	r1, r2
 8003d34:	461a      	mov	r2, r3
 8003d36:	4603      	mov	r3, r0
 8003d38:	817b      	strh	r3, [r7, #10]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	813b      	strh	r3, [r7, #8]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 f960 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00d      	beq.n	8003d86 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d78:	d103      	bne.n	8003d82 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d80:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e05f      	b.n	8003e46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d86:	897b      	ldrh	r3, [r7, #10]
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d98:	6a3a      	ldr	r2, [r7, #32]
 8003d9a:	492d      	ldr	r1, [pc, #180]	@ (8003e50 <I2C_RequestMemoryWrite+0x128>)
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 f9bb 	bl	8004118 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e04c      	b.n	8003e46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dc4:	6a39      	ldr	r1, [r7, #32]
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 fa46 	bl	8004258 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00d      	beq.n	8003dee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d107      	bne.n	8003dea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003de8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e02b      	b.n	8003e46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dee:	88fb      	ldrh	r3, [r7, #6]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d105      	bne.n	8003e00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003df4:	893b      	ldrh	r3, [r7, #8]
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	611a      	str	r2, [r3, #16]
 8003dfe:	e021      	b.n	8003e44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e00:	893b      	ldrh	r3, [r7, #8]
 8003e02:	0a1b      	lsrs	r3, r3, #8
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e10:	6a39      	ldr	r1, [r7, #32]
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 fa20 	bl	8004258 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00d      	beq.n	8003e3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d107      	bne.n	8003e36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e005      	b.n	8003e46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e3a:	893b      	ldrh	r3, [r7, #8]
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	00010002 	.word	0x00010002

08003e54 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af02      	add	r7, sp, #8
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	4608      	mov	r0, r1
 8003e5e:	4611      	mov	r1, r2
 8003e60:	461a      	mov	r2, r3
 8003e62:	4603      	mov	r3, r0
 8003e64:	817b      	strh	r3, [r7, #10]
 8003e66:	460b      	mov	r3, r1
 8003e68:	813b      	strh	r3, [r7, #8]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e7c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 f8c2 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00d      	beq.n	8003ec2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eb4:	d103      	bne.n	8003ebe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ebc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e0aa      	b.n	8004018 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ec2:	897b      	ldrh	r3, [r7, #10]
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ed0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	6a3a      	ldr	r2, [r7, #32]
 8003ed6:	4952      	ldr	r1, [pc, #328]	@ (8004020 <I2C_RequestMemoryRead+0x1cc>)
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 f91d 	bl	8004118 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e097      	b.n	8004018 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ee8:	2300      	movs	r3, #0
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f00:	6a39      	ldr	r1, [r7, #32]
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 f9a8 	bl	8004258 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00d      	beq.n	8003f2a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d107      	bne.n	8003f26 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e076      	b.n	8004018 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f2a:	88fb      	ldrh	r3, [r7, #6]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d105      	bne.n	8003f3c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f30:	893b      	ldrh	r3, [r7, #8]
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	611a      	str	r2, [r3, #16]
 8003f3a:	e021      	b.n	8003f80 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f3c:	893b      	ldrh	r3, [r7, #8]
 8003f3e:	0a1b      	lsrs	r3, r3, #8
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f4c:	6a39      	ldr	r1, [r7, #32]
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 f982 	bl	8004258 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00d      	beq.n	8003f76 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d107      	bne.n	8003f72 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e050      	b.n	8004018 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f76:	893b      	ldrh	r3, [r7, #8]
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f82:	6a39      	ldr	r1, [r7, #32]
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 f967 	bl	8004258 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00d      	beq.n	8003fac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d107      	bne.n	8003fa8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fa6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e035      	b.n	8004018 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 f82b 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00d      	beq.n	8003ff0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fe2:	d103      	bne.n	8003fec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e013      	b.n	8004018 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ff0:	897b      	ldrh	r3, [r7, #10]
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004002:	6a3a      	ldr	r2, [r7, #32]
 8004004:	4906      	ldr	r1, [pc, #24]	@ (8004020 <I2C_RequestMemoryRead+0x1cc>)
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 f886 	bl	8004118 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	00010002 	.word	0x00010002

08004024 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	603b      	str	r3, [r7, #0]
 8004030:	4613      	mov	r3, r2
 8004032:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004034:	e048      	b.n	80040c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403c:	d044      	beq.n	80040c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800403e:	f7fe ff3f 	bl	8002ec0 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d302      	bcc.n	8004054 <I2C_WaitOnFlagUntilTimeout+0x30>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d139      	bne.n	80040c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	0c1b      	lsrs	r3, r3, #16
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b01      	cmp	r3, #1
 800405c:	d10d      	bne.n	800407a <I2C_WaitOnFlagUntilTimeout+0x56>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	43da      	mvns	r2, r3
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	4013      	ands	r3, r2
 800406a:	b29b      	uxth	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	bf0c      	ite	eq
 8004070:	2301      	moveq	r3, #1
 8004072:	2300      	movne	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	461a      	mov	r2, r3
 8004078:	e00c      	b.n	8004094 <I2C_WaitOnFlagUntilTimeout+0x70>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	43da      	mvns	r2, r3
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	4013      	ands	r3, r2
 8004086:	b29b      	uxth	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	bf0c      	ite	eq
 800408c:	2301      	moveq	r3, #1
 800408e:	2300      	movne	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	461a      	mov	r2, r3
 8004094:	79fb      	ldrb	r3, [r7, #7]
 8004096:	429a      	cmp	r2, r3
 8004098:	d116      	bne.n	80040c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2220      	movs	r2, #32
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b4:	f043 0220 	orr.w	r2, r3, #32
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e023      	b.n	8004110 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	0c1b      	lsrs	r3, r3, #16
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d10d      	bne.n	80040ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	43da      	mvns	r2, r3
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4013      	ands	r3, r2
 80040de:	b29b      	uxth	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	bf0c      	ite	eq
 80040e4:	2301      	moveq	r3, #1
 80040e6:	2300      	movne	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	461a      	mov	r2, r3
 80040ec:	e00c      	b.n	8004108 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	43da      	mvns	r2, r3
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	4013      	ands	r3, r2
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	bf0c      	ite	eq
 8004100:	2301      	moveq	r3, #1
 8004102:	2300      	movne	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	461a      	mov	r2, r3
 8004108:	79fb      	ldrb	r3, [r7, #7]
 800410a:	429a      	cmp	r2, r3
 800410c:	d093      	beq.n	8004036 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
 8004124:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004126:	e071      	b.n	800420c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004132:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004136:	d123      	bne.n	8004180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004146:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004150:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416c:	f043 0204 	orr.w	r2, r3, #4
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e067      	b.n	8004250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004186:	d041      	beq.n	800420c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004188:	f7fe fe9a 	bl	8002ec0 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	429a      	cmp	r2, r3
 8004196:	d302      	bcc.n	800419e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d136      	bne.n	800420c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	0c1b      	lsrs	r3, r3, #16
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d10c      	bne.n	80041c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	43da      	mvns	r2, r3
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	4013      	ands	r3, r2
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	bf14      	ite	ne
 80041ba:	2301      	movne	r3, #1
 80041bc:	2300      	moveq	r3, #0
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	e00b      	b.n	80041da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	43da      	mvns	r2, r3
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	4013      	ands	r3, r2
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	bf14      	ite	ne
 80041d4:	2301      	movne	r3, #1
 80041d6:	2300      	moveq	r3, #0
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d016      	beq.n	800420c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f8:	f043 0220 	orr.w	r2, r3, #32
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e021      	b.n	8004250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	0c1b      	lsrs	r3, r3, #16
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b01      	cmp	r3, #1
 8004214:	d10c      	bne.n	8004230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	43da      	mvns	r2, r3
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	4013      	ands	r3, r2
 8004222:	b29b      	uxth	r3, r3
 8004224:	2b00      	cmp	r3, #0
 8004226:	bf14      	ite	ne
 8004228:	2301      	movne	r3, #1
 800422a:	2300      	moveq	r3, #0
 800422c:	b2db      	uxtb	r3, r3
 800422e:	e00b      	b.n	8004248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	43da      	mvns	r2, r3
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4013      	ands	r3, r2
 800423c:	b29b      	uxth	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	bf14      	ite	ne
 8004242:	2301      	movne	r3, #1
 8004244:	2300      	moveq	r3, #0
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	f47f af6d 	bne.w	8004128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004264:	e034      	b.n	80042d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 f8e3 	bl	8004432 <I2C_IsAcknowledgeFailed>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e034      	b.n	80042e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427c:	d028      	beq.n	80042d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800427e:	f7fe fe1f 	bl	8002ec0 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	429a      	cmp	r2, r3
 800428c:	d302      	bcc.n	8004294 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d11d      	bne.n	80042d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800429e:	2b80      	cmp	r3, #128	@ 0x80
 80042a0:	d016      	beq.n	80042d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042bc:	f043 0220 	orr.w	r2, r3, #32
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e007      	b.n	80042e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042da:	2b80      	cmp	r3, #128	@ 0x80
 80042dc:	d1c3      	bne.n	8004266 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042f4:	e034      	b.n	8004360 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 f89b 	bl	8004432 <I2C_IsAcknowledgeFailed>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e034      	b.n	8004370 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430c:	d028      	beq.n	8004360 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800430e:	f7fe fdd7 	bl	8002ec0 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	429a      	cmp	r2, r3
 800431c:	d302      	bcc.n	8004324 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d11d      	bne.n	8004360 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	2b04      	cmp	r3, #4
 8004330:	d016      	beq.n	8004360 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434c:	f043 0220 	orr.w	r2, r3, #32
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e007      	b.n	8004370 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	2b04      	cmp	r3, #4
 800436c:	d1c3      	bne.n	80042f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004384:	e049      	b.n	800441a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	f003 0310 	and.w	r3, r3, #16
 8004390:	2b10      	cmp	r3, #16
 8004392:	d119      	bne.n	80043c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f06f 0210 	mvn.w	r2, #16
 800439c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e030      	b.n	800442a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c8:	f7fe fd7a 	bl	8002ec0 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d302      	bcc.n	80043de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d11d      	bne.n	800441a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e8:	2b40      	cmp	r3, #64	@ 0x40
 80043ea:	d016      	beq.n	800441a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004406:	f043 0220 	orr.w	r2, r3, #32
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e007      	b.n	800442a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004424:	2b40      	cmp	r3, #64	@ 0x40
 8004426:	d1ae      	bne.n	8004386 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004444:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004448:	d11b      	bne.n	8004482 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004452:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2220      	movs	r2, #32
 800445e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446e:	f043 0204 	orr.w	r2, r3, #4
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800449a:	2300      	movs	r3, #0
 800449c:	603b      	str	r3, [r7, #0]
 800449e:	4b20      	ldr	r3, [pc, #128]	@ (8004520 <HAL_PWREx_EnableOverDrive+0x90>)
 80044a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004520 <HAL_PWREx_EnableOverDrive+0x90>)
 80044a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80044aa:	4b1d      	ldr	r3, [pc, #116]	@ (8004520 <HAL_PWREx_EnableOverDrive+0x90>)
 80044ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044b2:	603b      	str	r3, [r7, #0]
 80044b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80044b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004524 <HAL_PWREx_EnableOverDrive+0x94>)
 80044b8:	2201      	movs	r2, #1
 80044ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044bc:	f7fe fd00 	bl	8002ec0 <HAL_GetTick>
 80044c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80044c2:	e009      	b.n	80044d8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80044c4:	f7fe fcfc 	bl	8002ec0 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80044d2:	d901      	bls.n	80044d8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e01f      	b.n	8004518 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80044d8:	4b13      	ldr	r3, [pc, #76]	@ (8004528 <HAL_PWREx_EnableOverDrive+0x98>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044e4:	d1ee      	bne.n	80044c4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80044e6:	4b11      	ldr	r3, [pc, #68]	@ (800452c <HAL_PWREx_EnableOverDrive+0x9c>)
 80044e8:	2201      	movs	r2, #1
 80044ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044ec:	f7fe fce8 	bl	8002ec0 <HAL_GetTick>
 80044f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80044f2:	e009      	b.n	8004508 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80044f4:	f7fe fce4 	bl	8002ec0 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004502:	d901      	bls.n	8004508 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e007      	b.n	8004518 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004508:	4b07      	ldr	r3, [pc, #28]	@ (8004528 <HAL_PWREx_EnableOverDrive+0x98>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004510:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004514:	d1ee      	bne.n	80044f4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40023800 	.word	0x40023800
 8004524:	420e0040 	.word	0x420e0040
 8004528:	40007000 	.word	0x40007000
 800452c:	420e0044 	.word	0x420e0044

08004530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e0cc      	b.n	80046de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004544:	4b68      	ldr	r3, [pc, #416]	@ (80046e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 030f 	and.w	r3, r3, #15
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	429a      	cmp	r2, r3
 8004550:	d90c      	bls.n	800456c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004552:	4b65      	ldr	r3, [pc, #404]	@ (80046e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800455a:	4b63      	ldr	r3, [pc, #396]	@ (80046e8 <HAL_RCC_ClockConfig+0x1b8>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	429a      	cmp	r2, r3
 8004566:	d001      	beq.n	800456c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e0b8      	b.n	80046de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d020      	beq.n	80045ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d005      	beq.n	8004590 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004584:	4b59      	ldr	r3, [pc, #356]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	4a58      	ldr	r2, [pc, #352]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800458e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b00      	cmp	r3, #0
 800459a:	d005      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800459c:	4b53      	ldr	r3, [pc, #332]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	4a52      	ldr	r2, [pc, #328]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80045a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045a8:	4b50      	ldr	r3, [pc, #320]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	494d      	ldr	r1, [pc, #308]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d044      	beq.n	8004650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d107      	bne.n	80045de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ce:	4b47      	ldr	r3, [pc, #284]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d119      	bne.n	800460e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e07f      	b.n	80046de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d003      	beq.n	80045ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	d107      	bne.n	80045fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ee:	4b3f      	ldr	r3, [pc, #252]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d109      	bne.n	800460e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e06f      	b.n	80046de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045fe:	4b3b      	ldr	r3, [pc, #236]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e067      	b.n	80046de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800460e:	4b37      	ldr	r3, [pc, #220]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f023 0203 	bic.w	r2, r3, #3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	4934      	ldr	r1, [pc, #208]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 800461c:	4313      	orrs	r3, r2
 800461e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004620:	f7fe fc4e 	bl	8002ec0 <HAL_GetTick>
 8004624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004626:	e00a      	b.n	800463e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004628:	f7fe fc4a 	bl	8002ec0 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004636:	4293      	cmp	r3, r2
 8004638:	d901      	bls.n	800463e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e04f      	b.n	80046de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800463e:	4b2b      	ldr	r3, [pc, #172]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 020c 	and.w	r2, r3, #12
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	429a      	cmp	r2, r3
 800464e:	d1eb      	bne.n	8004628 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004650:	4b25      	ldr	r3, [pc, #148]	@ (80046e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 030f 	and.w	r3, r3, #15
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	429a      	cmp	r2, r3
 800465c:	d20c      	bcs.n	8004678 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465e:	4b22      	ldr	r3, [pc, #136]	@ (80046e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004666:	4b20      	ldr	r3, [pc, #128]	@ (80046e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	429a      	cmp	r2, r3
 8004672:	d001      	beq.n	8004678 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e032      	b.n	80046de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	2b00      	cmp	r3, #0
 8004682:	d008      	beq.n	8004696 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004684:	4b19      	ldr	r3, [pc, #100]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	4916      	ldr	r1, [pc, #88]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 8004692:	4313      	orrs	r3, r2
 8004694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d009      	beq.n	80046b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046a2:	4b12      	ldr	r3, [pc, #72]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	490e      	ldr	r1, [pc, #56]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046b6:	f000 f855 	bl	8004764 <HAL_RCC_GetSysClockFreq>
 80046ba:	4602      	mov	r2, r0
 80046bc:	4b0b      	ldr	r3, [pc, #44]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	091b      	lsrs	r3, r3, #4
 80046c2:	f003 030f 	and.w	r3, r3, #15
 80046c6:	490a      	ldr	r1, [pc, #40]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c0>)
 80046c8:	5ccb      	ldrb	r3, [r1, r3]
 80046ca:	fa22 f303 	lsr.w	r3, r2, r3
 80046ce:	4a09      	ldr	r2, [pc, #36]	@ (80046f4 <HAL_RCC_ClockConfig+0x1c4>)
 80046d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80046d2:	4b09      	ldr	r3, [pc, #36]	@ (80046f8 <HAL_RCC_ClockConfig+0x1c8>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fe fbae 	bl	8002e38 <HAL_InitTick>

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	40023c00 	.word	0x40023c00
 80046ec:	40023800 	.word	0x40023800
 80046f0:	08006348 	.word	0x08006348
 80046f4:	20000004 	.word	0x20000004
 80046f8:	20000008 	.word	0x20000008

080046fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004700:	4b03      	ldr	r3, [pc, #12]	@ (8004710 <HAL_RCC_GetHCLKFreq+0x14>)
 8004702:	681b      	ldr	r3, [r3, #0]
}
 8004704:	4618      	mov	r0, r3
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	20000004 	.word	0x20000004

08004714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004718:	f7ff fff0 	bl	80046fc <HAL_RCC_GetHCLKFreq>
 800471c:	4602      	mov	r2, r0
 800471e:	4b05      	ldr	r3, [pc, #20]	@ (8004734 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	0a9b      	lsrs	r3, r3, #10
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	4903      	ldr	r1, [pc, #12]	@ (8004738 <HAL_RCC_GetPCLK1Freq+0x24>)
 800472a:	5ccb      	ldrb	r3, [r1, r3]
 800472c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004730:	4618      	mov	r0, r3
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40023800 	.word	0x40023800
 8004738:	08006358 	.word	0x08006358

0800473c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004740:	f7ff ffdc 	bl	80046fc <HAL_RCC_GetHCLKFreq>
 8004744:	4602      	mov	r2, r0
 8004746:	4b05      	ldr	r3, [pc, #20]	@ (800475c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	0b5b      	lsrs	r3, r3, #13
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	4903      	ldr	r1, [pc, #12]	@ (8004760 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004752:	5ccb      	ldrb	r3, [r1, r3]
 8004754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004758:	4618      	mov	r0, r3
 800475a:	bd80      	pop	{r7, pc}
 800475c:	40023800 	.word	0x40023800
 8004760:	08006358 	.word	0x08006358

08004764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004768:	b0ae      	sub	sp, #184	@ 0xb8
 800476a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004772:	2300      	movs	r3, #0
 8004774:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800478a:	4bcb      	ldr	r3, [pc, #812]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f003 030c 	and.w	r3, r3, #12
 8004792:	2b0c      	cmp	r3, #12
 8004794:	f200 8206 	bhi.w	8004ba4 <HAL_RCC_GetSysClockFreq+0x440>
 8004798:	a201      	add	r2, pc, #4	@ (adr r2, 80047a0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800479a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479e:	bf00      	nop
 80047a0:	080047d5 	.word	0x080047d5
 80047a4:	08004ba5 	.word	0x08004ba5
 80047a8:	08004ba5 	.word	0x08004ba5
 80047ac:	08004ba5 	.word	0x08004ba5
 80047b0:	080047dd 	.word	0x080047dd
 80047b4:	08004ba5 	.word	0x08004ba5
 80047b8:	08004ba5 	.word	0x08004ba5
 80047bc:	08004ba5 	.word	0x08004ba5
 80047c0:	080047e5 	.word	0x080047e5
 80047c4:	08004ba5 	.word	0x08004ba5
 80047c8:	08004ba5 	.word	0x08004ba5
 80047cc:	08004ba5 	.word	0x08004ba5
 80047d0:	080049d5 	.word	0x080049d5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047d4:	4bb9      	ldr	r3, [pc, #740]	@ (8004abc <HAL_RCC_GetSysClockFreq+0x358>)
 80047d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80047da:	e1e7      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047dc:	4bb8      	ldr	r3, [pc, #736]	@ (8004ac0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80047de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80047e2:	e1e3      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047e4:	4bb4      	ldr	r3, [pc, #720]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047f0:	4bb1      	ldr	r3, [pc, #708]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d071      	beq.n	80048e0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047fc:	4bae      	ldr	r3, [pc, #696]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	099b      	lsrs	r3, r3, #6
 8004802:	2200      	movs	r2, #0
 8004804:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004808:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800480c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004814:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004818:	2300      	movs	r3, #0
 800481a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800481e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004822:	4622      	mov	r2, r4
 8004824:	462b      	mov	r3, r5
 8004826:	f04f 0000 	mov.w	r0, #0
 800482a:	f04f 0100 	mov.w	r1, #0
 800482e:	0159      	lsls	r1, r3, #5
 8004830:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004834:	0150      	lsls	r0, r2, #5
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	4621      	mov	r1, r4
 800483c:	1a51      	subs	r1, r2, r1
 800483e:	6439      	str	r1, [r7, #64]	@ 0x40
 8004840:	4629      	mov	r1, r5
 8004842:	eb63 0301 	sbc.w	r3, r3, r1
 8004846:	647b      	str	r3, [r7, #68]	@ 0x44
 8004848:	f04f 0200 	mov.w	r2, #0
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004854:	4649      	mov	r1, r9
 8004856:	018b      	lsls	r3, r1, #6
 8004858:	4641      	mov	r1, r8
 800485a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800485e:	4641      	mov	r1, r8
 8004860:	018a      	lsls	r2, r1, #6
 8004862:	4641      	mov	r1, r8
 8004864:	1a51      	subs	r1, r2, r1
 8004866:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004868:	4649      	mov	r1, r9
 800486a:	eb63 0301 	sbc.w	r3, r3, r1
 800486e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	f04f 0300 	mov.w	r3, #0
 8004878:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800487c:	4649      	mov	r1, r9
 800487e:	00cb      	lsls	r3, r1, #3
 8004880:	4641      	mov	r1, r8
 8004882:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004886:	4641      	mov	r1, r8
 8004888:	00ca      	lsls	r2, r1, #3
 800488a:	4610      	mov	r0, r2
 800488c:	4619      	mov	r1, r3
 800488e:	4603      	mov	r3, r0
 8004890:	4622      	mov	r2, r4
 8004892:	189b      	adds	r3, r3, r2
 8004894:	633b      	str	r3, [r7, #48]	@ 0x30
 8004896:	462b      	mov	r3, r5
 8004898:	460a      	mov	r2, r1
 800489a:	eb42 0303 	adc.w	r3, r2, r3
 800489e:	637b      	str	r3, [r7, #52]	@ 0x34
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80048ac:	4629      	mov	r1, r5
 80048ae:	024b      	lsls	r3, r1, #9
 80048b0:	4621      	mov	r1, r4
 80048b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048b6:	4621      	mov	r1, r4
 80048b8:	024a      	lsls	r2, r1, #9
 80048ba:	4610      	mov	r0, r2
 80048bc:	4619      	mov	r1, r3
 80048be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048c2:	2200      	movs	r2, #0
 80048c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80048cc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80048d0:	f7fb ff32 	bl	8000738 <__aeabi_uldivmod>
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	4613      	mov	r3, r2
 80048da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048de:	e067      	b.n	80049b0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048e0:	4b75      	ldr	r3, [pc, #468]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	099b      	lsrs	r3, r3, #6
 80048e6:	2200      	movs	r2, #0
 80048e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048ec:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80048f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80048f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048fa:	2300      	movs	r3, #0
 80048fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80048fe:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004902:	4622      	mov	r2, r4
 8004904:	462b      	mov	r3, r5
 8004906:	f04f 0000 	mov.w	r0, #0
 800490a:	f04f 0100 	mov.w	r1, #0
 800490e:	0159      	lsls	r1, r3, #5
 8004910:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004914:	0150      	lsls	r0, r2, #5
 8004916:	4602      	mov	r2, r0
 8004918:	460b      	mov	r3, r1
 800491a:	4621      	mov	r1, r4
 800491c:	1a51      	subs	r1, r2, r1
 800491e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004920:	4629      	mov	r1, r5
 8004922:	eb63 0301 	sbc.w	r3, r3, r1
 8004926:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	f04f 0300 	mov.w	r3, #0
 8004930:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004934:	4649      	mov	r1, r9
 8004936:	018b      	lsls	r3, r1, #6
 8004938:	4641      	mov	r1, r8
 800493a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800493e:	4641      	mov	r1, r8
 8004940:	018a      	lsls	r2, r1, #6
 8004942:	4641      	mov	r1, r8
 8004944:	ebb2 0a01 	subs.w	sl, r2, r1
 8004948:	4649      	mov	r1, r9
 800494a:	eb63 0b01 	sbc.w	fp, r3, r1
 800494e:	f04f 0200 	mov.w	r2, #0
 8004952:	f04f 0300 	mov.w	r3, #0
 8004956:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800495a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800495e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004962:	4692      	mov	sl, r2
 8004964:	469b      	mov	fp, r3
 8004966:	4623      	mov	r3, r4
 8004968:	eb1a 0303 	adds.w	r3, sl, r3
 800496c:	623b      	str	r3, [r7, #32]
 800496e:	462b      	mov	r3, r5
 8004970:	eb4b 0303 	adc.w	r3, fp, r3
 8004974:	627b      	str	r3, [r7, #36]	@ 0x24
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004982:	4629      	mov	r1, r5
 8004984:	028b      	lsls	r3, r1, #10
 8004986:	4621      	mov	r1, r4
 8004988:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800498c:	4621      	mov	r1, r4
 800498e:	028a      	lsls	r2, r1, #10
 8004990:	4610      	mov	r0, r2
 8004992:	4619      	mov	r1, r3
 8004994:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004998:	2200      	movs	r2, #0
 800499a:	673b      	str	r3, [r7, #112]	@ 0x70
 800499c:	677a      	str	r2, [r7, #116]	@ 0x74
 800499e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80049a2:	f7fb fec9 	bl	8000738 <__aeabi_uldivmod>
 80049a6:	4602      	mov	r2, r0
 80049a8:	460b      	mov	r3, r1
 80049aa:	4613      	mov	r3, r2
 80049ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80049b0:	4b41      	ldr	r3, [pc, #260]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	0c1b      	lsrs	r3, r3, #16
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	3301      	adds	r3, #1
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80049c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80049ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80049d2:	e0eb      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049d4:	4b38      	ldr	r3, [pc, #224]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049e0:	4b35      	ldr	r3, [pc, #212]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d06b      	beq.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ec:	4b32      	ldr	r3, [pc, #200]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	099b      	lsrs	r3, r3, #6
 80049f2:	2200      	movs	r2, #0
 80049f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80049f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a00:	2300      	movs	r3, #0
 8004a02:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a04:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004a08:	4622      	mov	r2, r4
 8004a0a:	462b      	mov	r3, r5
 8004a0c:	f04f 0000 	mov.w	r0, #0
 8004a10:	f04f 0100 	mov.w	r1, #0
 8004a14:	0159      	lsls	r1, r3, #5
 8004a16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a1a:	0150      	lsls	r0, r2, #5
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4621      	mov	r1, r4
 8004a22:	1a51      	subs	r1, r2, r1
 8004a24:	61b9      	str	r1, [r7, #24]
 8004a26:	4629      	mov	r1, r5
 8004a28:	eb63 0301 	sbc.w	r3, r3, r1
 8004a2c:	61fb      	str	r3, [r7, #28]
 8004a2e:	f04f 0200 	mov.w	r2, #0
 8004a32:	f04f 0300 	mov.w	r3, #0
 8004a36:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004a3a:	4659      	mov	r1, fp
 8004a3c:	018b      	lsls	r3, r1, #6
 8004a3e:	4651      	mov	r1, sl
 8004a40:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a44:	4651      	mov	r1, sl
 8004a46:	018a      	lsls	r2, r1, #6
 8004a48:	4651      	mov	r1, sl
 8004a4a:	ebb2 0801 	subs.w	r8, r2, r1
 8004a4e:	4659      	mov	r1, fp
 8004a50:	eb63 0901 	sbc.w	r9, r3, r1
 8004a54:	f04f 0200 	mov.w	r2, #0
 8004a58:	f04f 0300 	mov.w	r3, #0
 8004a5c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a60:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a64:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a68:	4690      	mov	r8, r2
 8004a6a:	4699      	mov	r9, r3
 8004a6c:	4623      	mov	r3, r4
 8004a6e:	eb18 0303 	adds.w	r3, r8, r3
 8004a72:	613b      	str	r3, [r7, #16]
 8004a74:	462b      	mov	r3, r5
 8004a76:	eb49 0303 	adc.w	r3, r9, r3
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	f04f 0300 	mov.w	r3, #0
 8004a84:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004a88:	4629      	mov	r1, r5
 8004a8a:	024b      	lsls	r3, r1, #9
 8004a8c:	4621      	mov	r1, r4
 8004a8e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a92:	4621      	mov	r1, r4
 8004a94:	024a      	lsls	r2, r1, #9
 8004a96:	4610      	mov	r0, r2
 8004a98:	4619      	mov	r1, r3
 8004a9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004aa2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004aa4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004aa8:	f7fb fe46 	bl	8000738 <__aeabi_uldivmod>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ab6:	e065      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0x420>
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	00f42400 	.word	0x00f42400
 8004ac0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ac4:	4b3d      	ldr	r3, [pc, #244]	@ (8004bbc <HAL_RCC_GetSysClockFreq+0x458>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	099b      	lsrs	r3, r3, #6
 8004aca:	2200      	movs	r2, #0
 8004acc:	4618      	mov	r0, r3
 8004ace:	4611      	mov	r1, r2
 8004ad0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ad4:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ada:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004ade:	4642      	mov	r2, r8
 8004ae0:	464b      	mov	r3, r9
 8004ae2:	f04f 0000 	mov.w	r0, #0
 8004ae6:	f04f 0100 	mov.w	r1, #0
 8004aea:	0159      	lsls	r1, r3, #5
 8004aec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004af0:	0150      	lsls	r0, r2, #5
 8004af2:	4602      	mov	r2, r0
 8004af4:	460b      	mov	r3, r1
 8004af6:	4641      	mov	r1, r8
 8004af8:	1a51      	subs	r1, r2, r1
 8004afa:	60b9      	str	r1, [r7, #8]
 8004afc:	4649      	mov	r1, r9
 8004afe:	eb63 0301 	sbc.w	r3, r3, r1
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004b10:	4659      	mov	r1, fp
 8004b12:	018b      	lsls	r3, r1, #6
 8004b14:	4651      	mov	r1, sl
 8004b16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b1a:	4651      	mov	r1, sl
 8004b1c:	018a      	lsls	r2, r1, #6
 8004b1e:	4651      	mov	r1, sl
 8004b20:	1a54      	subs	r4, r2, r1
 8004b22:	4659      	mov	r1, fp
 8004b24:	eb63 0501 	sbc.w	r5, r3, r1
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	f04f 0300 	mov.w	r3, #0
 8004b30:	00eb      	lsls	r3, r5, #3
 8004b32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b36:	00e2      	lsls	r2, r4, #3
 8004b38:	4614      	mov	r4, r2
 8004b3a:	461d      	mov	r5, r3
 8004b3c:	4643      	mov	r3, r8
 8004b3e:	18e3      	adds	r3, r4, r3
 8004b40:	603b      	str	r3, [r7, #0]
 8004b42:	464b      	mov	r3, r9
 8004b44:	eb45 0303 	adc.w	r3, r5, r3
 8004b48:	607b      	str	r3, [r7, #4]
 8004b4a:	f04f 0200 	mov.w	r2, #0
 8004b4e:	f04f 0300 	mov.w	r3, #0
 8004b52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b56:	4629      	mov	r1, r5
 8004b58:	028b      	lsls	r3, r1, #10
 8004b5a:	4621      	mov	r1, r4
 8004b5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b60:	4621      	mov	r1, r4
 8004b62:	028a      	lsls	r2, r1, #10
 8004b64:	4610      	mov	r0, r2
 8004b66:	4619      	mov	r1, r3
 8004b68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b70:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004b72:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b76:	f7fb fddf 	bl	8000738 <__aeabi_uldivmod>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4613      	mov	r3, r2
 8004b80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004b84:	4b0d      	ldr	r3, [pc, #52]	@ (8004bbc <HAL_RCC_GetSysClockFreq+0x458>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	0f1b      	lsrs	r3, r3, #28
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004b92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004ba2:	e003      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ba4:	4b06      	ldr	r3, [pc, #24]	@ (8004bc0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004baa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	37b8      	adds	r7, #184	@ 0xb8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bba:	bf00      	nop
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	00f42400 	.word	0x00f42400

08004bc4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e28d      	b.n	80050f2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 8083 	beq.w	8004cea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004be4:	4b94      	ldr	r3, [pc, #592]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f003 030c 	and.w	r3, r3, #12
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d019      	beq.n	8004c24 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004bf0:	4b91      	ldr	r3, [pc, #580]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 030c 	and.w	r3, r3, #12
        || \
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d106      	bne.n	8004c0a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004bfc:	4b8e      	ldr	r3, [pc, #568]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c08:	d00c      	beq.n	8004c24 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c0a:	4b8b      	ldr	r3, [pc, #556]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004c12:	2b0c      	cmp	r3, #12
 8004c14:	d112      	bne.n	8004c3c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c16:	4b88      	ldr	r3, [pc, #544]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c22:	d10b      	bne.n	8004c3c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c24:	4b84      	ldr	r3, [pc, #528]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d05b      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x124>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d157      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e25a      	b.n	80050f2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c44:	d106      	bne.n	8004c54 <HAL_RCC_OscConfig+0x90>
 8004c46:	4b7c      	ldr	r3, [pc, #496]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a7b      	ldr	r2, [pc, #492]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	e01d      	b.n	8004c90 <HAL_RCC_OscConfig+0xcc>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c5c:	d10c      	bne.n	8004c78 <HAL_RCC_OscConfig+0xb4>
 8004c5e:	4b76      	ldr	r3, [pc, #472]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a75      	ldr	r2, [pc, #468]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004c64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	4b73      	ldr	r3, [pc, #460]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a72      	ldr	r2, [pc, #456]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c74:	6013      	str	r3, [r2, #0]
 8004c76:	e00b      	b.n	8004c90 <HAL_RCC_OscConfig+0xcc>
 8004c78:	4b6f      	ldr	r3, [pc, #444]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a6e      	ldr	r2, [pc, #440]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004c7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	4b6c      	ldr	r3, [pc, #432]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a6b      	ldr	r2, [pc, #428]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004c8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d013      	beq.n	8004cc0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c98:	f7fe f912 	bl	8002ec0 <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ca0:	f7fe f90e 	bl	8002ec0 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b64      	cmp	r3, #100	@ 0x64
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e21f      	b.n	80050f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cb2:	4b61      	ldr	r3, [pc, #388]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0f0      	beq.n	8004ca0 <HAL_RCC_OscConfig+0xdc>
 8004cbe:	e014      	b.n	8004cea <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc0:	f7fe f8fe 	bl	8002ec0 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cc8:	f7fe f8fa 	bl	8002ec0 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b64      	cmp	r3, #100	@ 0x64
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e20b      	b.n	80050f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cda:	4b57      	ldr	r3, [pc, #348]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1f0      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x104>
 8004ce6:	e000      	b.n	8004cea <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d06f      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004cf6:	4b50      	ldr	r3, [pc, #320]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f003 030c 	and.w	r3, r3, #12
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d017      	beq.n	8004d32 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004d02:	4b4d      	ldr	r3, [pc, #308]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f003 030c 	and.w	r3, r3, #12
        || \
 8004d0a:	2b08      	cmp	r3, #8
 8004d0c:	d105      	bne.n	8004d1a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004d0e:	4b4a      	ldr	r3, [pc, #296]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00b      	beq.n	8004d32 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d1a:	4b47      	ldr	r3, [pc, #284]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004d22:	2b0c      	cmp	r3, #12
 8004d24:	d11c      	bne.n	8004d60 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d26:	4b44      	ldr	r3, [pc, #272]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d116      	bne.n	8004d60 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d32:	4b41      	ldr	r3, [pc, #260]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d005      	beq.n	8004d4a <HAL_RCC_OscConfig+0x186>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d001      	beq.n	8004d4a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e1d3      	b.n	80050f2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d4a:	4b3b      	ldr	r3, [pc, #236]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	4937      	ldr	r1, [pc, #220]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d5e:	e03a      	b.n	8004dd6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d020      	beq.n	8004daa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d68:	4b34      	ldr	r3, [pc, #208]	@ (8004e3c <HAL_RCC_OscConfig+0x278>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6e:	f7fe f8a7 	bl	8002ec0 <HAL_GetTick>
 8004d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d74:	e008      	b.n	8004d88 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d76:	f7fe f8a3 	bl	8002ec0 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e1b4      	b.n	80050f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d88:	4b2b      	ldr	r3, [pc, #172]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0f0      	beq.n	8004d76 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d94:	4b28      	ldr	r3, [pc, #160]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	00db      	lsls	r3, r3, #3
 8004da2:	4925      	ldr	r1, [pc, #148]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	600b      	str	r3, [r1, #0]
 8004da8:	e015      	b.n	8004dd6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004daa:	4b24      	ldr	r3, [pc, #144]	@ (8004e3c <HAL_RCC_OscConfig+0x278>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db0:	f7fe f886 	bl	8002ec0 <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004db8:	f7fe f882 	bl	8002ec0 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e193      	b.n	80050f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dca:	4b1b      	ldr	r3, [pc, #108]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1f0      	bne.n	8004db8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0308 	and.w	r3, r3, #8
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d036      	beq.n	8004e50 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d016      	beq.n	8004e18 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dea:	4b15      	ldr	r3, [pc, #84]	@ (8004e40 <HAL_RCC_OscConfig+0x27c>)
 8004dec:	2201      	movs	r2, #1
 8004dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df0:	f7fe f866 	bl	8002ec0 <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004df8:	f7fe f862 	bl	8002ec0 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e173      	b.n	80050f2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e38 <HAL_RCC_OscConfig+0x274>)
 8004e0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0f0      	beq.n	8004df8 <HAL_RCC_OscConfig+0x234>
 8004e16:	e01b      	b.n	8004e50 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e18:	4b09      	ldr	r3, [pc, #36]	@ (8004e40 <HAL_RCC_OscConfig+0x27c>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e1e:	f7fe f84f 	bl	8002ec0 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e24:	e00e      	b.n	8004e44 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e26:	f7fe f84b 	bl	8002ec0 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d907      	bls.n	8004e44 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e15c      	b.n	80050f2 <HAL_RCC_OscConfig+0x52e>
 8004e38:	40023800 	.word	0x40023800
 8004e3c:	42470000 	.word	0x42470000
 8004e40:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e44:	4b8a      	ldr	r3, [pc, #552]	@ (8005070 <HAL_RCC_OscConfig+0x4ac>)
 8004e46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1ea      	bne.n	8004e26 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 8097 	beq.w	8004f8c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e62:	4b83      	ldr	r3, [pc, #524]	@ (8005070 <HAL_RCC_OscConfig+0x4ac>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10f      	bne.n	8004e8e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60bb      	str	r3, [r7, #8]
 8004e72:	4b7f      	ldr	r3, [pc, #508]	@ (8005070 <HAL_RCC_OscConfig+0x4ac>)
 8004e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e76:	4a7e      	ldr	r2, [pc, #504]	@ (8005070 <HAL_RCC_OscConfig+0x4ac>)
 8004e78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e7e:	4b7c      	ldr	r3, [pc, #496]	@ (8005070 <HAL_RCC_OscConfig+0x4ac>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e86:	60bb      	str	r3, [r7, #8]
 8004e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e8e:	4b79      	ldr	r3, [pc, #484]	@ (8005074 <HAL_RCC_OscConfig+0x4b0>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d118      	bne.n	8004ecc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e9a:	4b76      	ldr	r3, [pc, #472]	@ (8005074 <HAL_RCC_OscConfig+0x4b0>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a75      	ldr	r2, [pc, #468]	@ (8005074 <HAL_RCC_OscConfig+0x4b0>)
 8004ea0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ea6:	f7fe f80b 	bl	8002ec0 <HAL_GetTick>
 8004eaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eac:	e008      	b.n	8004ec0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eae:	f7fe f807 	bl	8002ec0 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e118      	b.n	80050f2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec0:	4b6c      	ldr	r3, [pc, #432]	@ (8005074 <HAL_RCC_OscConfig+0x4b0>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d0f0      	beq.n	8004eae <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d106      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x31e>
 8004ed4:	4b66      	ldr	r3, [pc, #408]	@ (8005070 <HAL_RCC_OscConfig+0x4ac>)
 8004ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed8:	4a65      	ldr	r2, [pc, #404]	@ (8005070 <HAL_RCC_OscConfig+0x4ac>)
 8004eda:	f043 0301 	orr.w	r3, r3, #1
 8004ede:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ee0:	e01c      	b.n	8004f1c <HAL_RCC_OscConfig+0x358>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	2b05      	cmp	r3, #5
 8004ee8:	d10c      	bne.n	8004f04 <HAL_RCC_OscConfig+0x340>
 8004eea:	4b61      	ldr	r3, [pc, #388]	@ (8005070 <HAL_RCC_OscConfig+0x4ac>)
 8004eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eee:	4a60      	ldr	r2, [pc, #384]	@ (8005070 <HAL_RCC_OscConfig+0x4ac>)
 8004ef0:	f043 0304 	orr.w	r3, r3, #4
 8004ef4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ef6:	4b5e      	ldr	r3, [pc, #376]	@ (8005070 <HAL_RCC_OscConfig+0x4ac>)
 8004ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004efa:	4a5d      	ldr	r2, [pc, #372]	@ (8005070 <HAL_RCC_OscConfig+0x4ac>)
 8004efc:	f043 0301 	orr.w	r3, r3, #1
 8004f00:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f02:	e00b      	b.n	8004f1c <HAL_RCC_OscConfig+0x358>
 8004f04:	4b5a      	ldr	r3, [pc, #360]	@ (8005070 <HAL_RCC_OscConfig+0x4ac>)
 8004f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f08:	4a59      	ldr	r2, [pc, #356]	@ (8005070 <HAL_RCC_OscConfig+0x4ac>)
 8004f0a:	f023 0301 	bic.w	r3, r3, #1
 8004f0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f10:	4b57      	ldr	r3, [pc, #348]	@ (8005070 <HAL_RCC_OscConfig+0x4ac>)
 8004f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f14:	4a56      	ldr	r2, [pc, #344]	@ (8005070 <HAL_RCC_OscConfig+0x4ac>)
 8004f16:	f023 0304 	bic.w	r3, r3, #4
 8004f1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d015      	beq.n	8004f50 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f24:	f7fd ffcc 	bl	8002ec0 <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f2a:	e00a      	b.n	8004f42 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f2c:	f7fd ffc8 	bl	8002ec0 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e0d7      	b.n	80050f2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f42:	4b4b      	ldr	r3, [pc, #300]	@ (8005070 <HAL_RCC_OscConfig+0x4ac>)
 8004f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d0ee      	beq.n	8004f2c <HAL_RCC_OscConfig+0x368>
 8004f4e:	e014      	b.n	8004f7a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f50:	f7fd ffb6 	bl	8002ec0 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f56:	e00a      	b.n	8004f6e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f58:	f7fd ffb2 	bl	8002ec0 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e0c1      	b.n	80050f2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f6e:	4b40      	ldr	r3, [pc, #256]	@ (8005070 <HAL_RCC_OscConfig+0x4ac>)
 8004f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1ee      	bne.n	8004f58 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f7a:	7dfb      	ldrb	r3, [r7, #23]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d105      	bne.n	8004f8c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f80:	4b3b      	ldr	r3, [pc, #236]	@ (8005070 <HAL_RCC_OscConfig+0x4ac>)
 8004f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f84:	4a3a      	ldr	r2, [pc, #232]	@ (8005070 <HAL_RCC_OscConfig+0x4ac>)
 8004f86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f8a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 80ad 	beq.w	80050f0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f96:	4b36      	ldr	r3, [pc, #216]	@ (8005070 <HAL_RCC_OscConfig+0x4ac>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 030c 	and.w	r3, r3, #12
 8004f9e:	2b08      	cmp	r3, #8
 8004fa0:	d060      	beq.n	8005064 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d145      	bne.n	8005036 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004faa:	4b33      	ldr	r3, [pc, #204]	@ (8005078 <HAL_RCC_OscConfig+0x4b4>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb0:	f7fd ff86 	bl	8002ec0 <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb8:	f7fd ff82 	bl	8002ec0 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e093      	b.n	80050f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fca:	4b29      	ldr	r3, [pc, #164]	@ (8005070 <HAL_RCC_OscConfig+0x4ac>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1f0      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	69da      	ldr	r2, [r3, #28]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe4:	019b      	lsls	r3, r3, #6
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fec:	085b      	lsrs	r3, r3, #1
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	041b      	lsls	r3, r3, #16
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff8:	061b      	lsls	r3, r3, #24
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005000:	071b      	lsls	r3, r3, #28
 8005002:	491b      	ldr	r1, [pc, #108]	@ (8005070 <HAL_RCC_OscConfig+0x4ac>)
 8005004:	4313      	orrs	r3, r2
 8005006:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005008:	4b1b      	ldr	r3, [pc, #108]	@ (8005078 <HAL_RCC_OscConfig+0x4b4>)
 800500a:	2201      	movs	r2, #1
 800500c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500e:	f7fd ff57 	bl	8002ec0 <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005014:	e008      	b.n	8005028 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005016:	f7fd ff53 	bl	8002ec0 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d901      	bls.n	8005028 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e064      	b.n	80050f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005028:	4b11      	ldr	r3, [pc, #68]	@ (8005070 <HAL_RCC_OscConfig+0x4ac>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0f0      	beq.n	8005016 <HAL_RCC_OscConfig+0x452>
 8005034:	e05c      	b.n	80050f0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005036:	4b10      	ldr	r3, [pc, #64]	@ (8005078 <HAL_RCC_OscConfig+0x4b4>)
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503c:	f7fd ff40 	bl	8002ec0 <HAL_GetTick>
 8005040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005042:	e008      	b.n	8005056 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005044:	f7fd ff3c 	bl	8002ec0 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e04d      	b.n	80050f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005056:	4b06      	ldr	r3, [pc, #24]	@ (8005070 <HAL_RCC_OscConfig+0x4ac>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1f0      	bne.n	8005044 <HAL_RCC_OscConfig+0x480>
 8005062:	e045      	b.n	80050f0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d107      	bne.n	800507c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e040      	b.n	80050f2 <HAL_RCC_OscConfig+0x52e>
 8005070:	40023800 	.word	0x40023800
 8005074:	40007000 	.word	0x40007000
 8005078:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800507c:	4b1f      	ldr	r3, [pc, #124]	@ (80050fc <HAL_RCC_OscConfig+0x538>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d030      	beq.n	80050ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005094:	429a      	cmp	r2, r3
 8005096:	d129      	bne.n	80050ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d122      	bne.n	80050ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80050ac:	4013      	ands	r3, r2
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80050b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d119      	bne.n	80050ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c2:	085b      	lsrs	r3, r3, #1
 80050c4:	3b01      	subs	r3, #1
 80050c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d10f      	bne.n	80050ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050d8:	429a      	cmp	r2, r3
 80050da:	d107      	bne.n	80050ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d001      	beq.n	80050f0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e000      	b.n	80050f2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3718      	adds	r7, #24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	40023800 	.word	0x40023800

08005100 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e042      	b.n	8005198 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d106      	bne.n	800512c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7fd fd7a 	bl	8002c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2224      	movs	r2, #36	@ 0x24
 8005130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005142:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f973 	bl	8005430 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	691a      	ldr	r2, [r3, #16]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005158:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	695a      	ldr	r2, [r3, #20]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005168:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68da      	ldr	r2, [r3, #12]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005178:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2220      	movs	r2, #32
 8005184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b08a      	sub	sp, #40	@ 0x28
 80051a4:	af02      	add	r7, sp, #8
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	603b      	str	r3, [r7, #0]
 80051ac:	4613      	mov	r3, r2
 80051ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b20      	cmp	r3, #32
 80051be:	d175      	bne.n	80052ac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d002      	beq.n	80051cc <HAL_UART_Transmit+0x2c>
 80051c6:	88fb      	ldrh	r3, [r7, #6]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e06e      	b.n	80052ae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2221      	movs	r2, #33	@ 0x21
 80051da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051de:	f7fd fe6f 	bl	8002ec0 <HAL_GetTick>
 80051e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	88fa      	ldrh	r2, [r7, #6]
 80051e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	88fa      	ldrh	r2, [r7, #6]
 80051ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051f8:	d108      	bne.n	800520c <HAL_UART_Transmit+0x6c>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d104      	bne.n	800520c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005202:	2300      	movs	r3, #0
 8005204:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	61bb      	str	r3, [r7, #24]
 800520a:	e003      	b.n	8005214 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005210:	2300      	movs	r3, #0
 8005212:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005214:	e02e      	b.n	8005274 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2200      	movs	r2, #0
 800521e:	2180      	movs	r1, #128	@ 0x80
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 f848 	bl	80052b6 <UART_WaitOnFlagUntilTimeout>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d005      	beq.n	8005238 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2220      	movs	r2, #32
 8005230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e03a      	b.n	80052ae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10b      	bne.n	8005256 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	461a      	mov	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800524c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	3302      	adds	r3, #2
 8005252:	61bb      	str	r3, [r7, #24]
 8005254:	e007      	b.n	8005266 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	781a      	ldrb	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	3301      	adds	r3, #1
 8005264:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800526a:	b29b      	uxth	r3, r3
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005278:	b29b      	uxth	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1cb      	bne.n	8005216 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2200      	movs	r2, #0
 8005286:	2140      	movs	r1, #64	@ 0x40
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 f814 	bl	80052b6 <UART_WaitOnFlagUntilTimeout>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d005      	beq.n	80052a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2220      	movs	r2, #32
 8005298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e006      	b.n	80052ae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80052a8:	2300      	movs	r3, #0
 80052aa:	e000      	b.n	80052ae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80052ac:	2302      	movs	r3, #2
  }
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3720      	adds	r7, #32
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b086      	sub	sp, #24
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	60f8      	str	r0, [r7, #12]
 80052be:	60b9      	str	r1, [r7, #8]
 80052c0:	603b      	str	r3, [r7, #0]
 80052c2:	4613      	mov	r3, r2
 80052c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052c6:	e03b      	b.n	8005340 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ce:	d037      	beq.n	8005340 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052d0:	f7fd fdf6 	bl	8002ec0 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	6a3a      	ldr	r2, [r7, #32]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d302      	bcc.n	80052e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e03a      	b.n	8005360 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d023      	beq.n	8005340 <UART_WaitOnFlagUntilTimeout+0x8a>
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b80      	cmp	r3, #128	@ 0x80
 80052fc:	d020      	beq.n	8005340 <UART_WaitOnFlagUntilTimeout+0x8a>
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2b40      	cmp	r3, #64	@ 0x40
 8005302:	d01d      	beq.n	8005340 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0308 	and.w	r3, r3, #8
 800530e:	2b08      	cmp	r3, #8
 8005310:	d116      	bne.n	8005340 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005312:	2300      	movs	r3, #0
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	617b      	str	r3, [r7, #20]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	617b      	str	r3, [r7, #20]
 8005326:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 f81d 	bl	8005368 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2208      	movs	r2, #8
 8005332:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e00f      	b.n	8005360 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	4013      	ands	r3, r2
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	429a      	cmp	r2, r3
 800534e:	bf0c      	ite	eq
 8005350:	2301      	moveq	r3, #1
 8005352:	2300      	movne	r3, #0
 8005354:	b2db      	uxtb	r3, r3
 8005356:	461a      	mov	r2, r3
 8005358:	79fb      	ldrb	r3, [r7, #7]
 800535a:	429a      	cmp	r2, r3
 800535c:	d0b4      	beq.n	80052c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3718      	adds	r7, #24
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005368:	b480      	push	{r7}
 800536a:	b095      	sub	sp, #84	@ 0x54
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	330c      	adds	r3, #12
 8005376:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800537a:	e853 3f00 	ldrex	r3, [r3]
 800537e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005382:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005386:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	330c      	adds	r3, #12
 800538e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005390:	643a      	str	r2, [r7, #64]	@ 0x40
 8005392:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005394:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005396:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005398:	e841 2300 	strex	r3, r2, [r1]
 800539c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800539e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e5      	bne.n	8005370 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3314      	adds	r3, #20
 80053aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	e853 3f00 	ldrex	r3, [r3]
 80053b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	f023 0301 	bic.w	r3, r3, #1
 80053ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	3314      	adds	r3, #20
 80053c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053cc:	e841 2300 	strex	r3, r2, [r1]
 80053d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1e5      	bne.n	80053a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d119      	bne.n	8005414 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	330c      	adds	r3, #12
 80053e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	e853 3f00 	ldrex	r3, [r3]
 80053ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f023 0310 	bic.w	r3, r3, #16
 80053f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	330c      	adds	r3, #12
 80053fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005400:	61ba      	str	r2, [r7, #24]
 8005402:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005404:	6979      	ldr	r1, [r7, #20]
 8005406:	69ba      	ldr	r2, [r7, #24]
 8005408:	e841 2300 	strex	r3, r2, [r1]
 800540c:	613b      	str	r3, [r7, #16]
   return(result);
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e5      	bne.n	80053e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2220      	movs	r2, #32
 8005418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005422:	bf00      	nop
 8005424:	3754      	adds	r7, #84	@ 0x54
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
	...

08005430 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005434:	b0c0      	sub	sp, #256	@ 0x100
 8005436:	af00      	add	r7, sp, #0
 8005438:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800543c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800544c:	68d9      	ldr	r1, [r3, #12]
 800544e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	ea40 0301 	orr.w	r3, r0, r1
 8005458:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800545a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	431a      	orrs	r2, r3
 8005468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	431a      	orrs	r2, r3
 8005470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	4313      	orrs	r3, r2
 8005478:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800547c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005488:	f021 010c 	bic.w	r1, r1, #12
 800548c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005496:	430b      	orrs	r3, r1
 8005498:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800549a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80054a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054aa:	6999      	ldr	r1, [r3, #24]
 80054ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	ea40 0301 	orr.w	r3, r0, r1
 80054b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	4b8f      	ldr	r3, [pc, #572]	@ (80056fc <UART_SetConfig+0x2cc>)
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d005      	beq.n	80054d0 <UART_SetConfig+0xa0>
 80054c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	4b8d      	ldr	r3, [pc, #564]	@ (8005700 <UART_SetConfig+0x2d0>)
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d104      	bne.n	80054da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054d0:	f7ff f934 	bl	800473c <HAL_RCC_GetPCLK2Freq>
 80054d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80054d8:	e003      	b.n	80054e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054da:	f7ff f91b 	bl	8004714 <HAL_RCC_GetPCLK1Freq>
 80054de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054ec:	f040 810c 	bne.w	8005708 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054f4:	2200      	movs	r2, #0
 80054f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80054fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80054fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005502:	4622      	mov	r2, r4
 8005504:	462b      	mov	r3, r5
 8005506:	1891      	adds	r1, r2, r2
 8005508:	65b9      	str	r1, [r7, #88]	@ 0x58
 800550a:	415b      	adcs	r3, r3
 800550c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800550e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005512:	4621      	mov	r1, r4
 8005514:	eb12 0801 	adds.w	r8, r2, r1
 8005518:	4629      	mov	r1, r5
 800551a:	eb43 0901 	adc.w	r9, r3, r1
 800551e:	f04f 0200 	mov.w	r2, #0
 8005522:	f04f 0300 	mov.w	r3, #0
 8005526:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800552a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800552e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005532:	4690      	mov	r8, r2
 8005534:	4699      	mov	r9, r3
 8005536:	4623      	mov	r3, r4
 8005538:	eb18 0303 	adds.w	r3, r8, r3
 800553c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005540:	462b      	mov	r3, r5
 8005542:	eb49 0303 	adc.w	r3, r9, r3
 8005546:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800554a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005556:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800555a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800555e:	460b      	mov	r3, r1
 8005560:	18db      	adds	r3, r3, r3
 8005562:	653b      	str	r3, [r7, #80]	@ 0x50
 8005564:	4613      	mov	r3, r2
 8005566:	eb42 0303 	adc.w	r3, r2, r3
 800556a:	657b      	str	r3, [r7, #84]	@ 0x54
 800556c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005570:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005574:	f7fb f8e0 	bl	8000738 <__aeabi_uldivmod>
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	4b61      	ldr	r3, [pc, #388]	@ (8005704 <UART_SetConfig+0x2d4>)
 800557e:	fba3 2302 	umull	r2, r3, r3, r2
 8005582:	095b      	lsrs	r3, r3, #5
 8005584:	011c      	lsls	r4, r3, #4
 8005586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800558a:	2200      	movs	r2, #0
 800558c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005590:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005594:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005598:	4642      	mov	r2, r8
 800559a:	464b      	mov	r3, r9
 800559c:	1891      	adds	r1, r2, r2
 800559e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80055a0:	415b      	adcs	r3, r3
 80055a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80055a8:	4641      	mov	r1, r8
 80055aa:	eb12 0a01 	adds.w	sl, r2, r1
 80055ae:	4649      	mov	r1, r9
 80055b0:	eb43 0b01 	adc.w	fp, r3, r1
 80055b4:	f04f 0200 	mov.w	r2, #0
 80055b8:	f04f 0300 	mov.w	r3, #0
 80055bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055c8:	4692      	mov	sl, r2
 80055ca:	469b      	mov	fp, r3
 80055cc:	4643      	mov	r3, r8
 80055ce:	eb1a 0303 	adds.w	r3, sl, r3
 80055d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055d6:	464b      	mov	r3, r9
 80055d8:	eb4b 0303 	adc.w	r3, fp, r3
 80055dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80055e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80055f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80055f4:	460b      	mov	r3, r1
 80055f6:	18db      	adds	r3, r3, r3
 80055f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80055fa:	4613      	mov	r3, r2
 80055fc:	eb42 0303 	adc.w	r3, r2, r3
 8005600:	647b      	str	r3, [r7, #68]	@ 0x44
 8005602:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005606:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800560a:	f7fb f895 	bl	8000738 <__aeabi_uldivmod>
 800560e:	4602      	mov	r2, r0
 8005610:	460b      	mov	r3, r1
 8005612:	4611      	mov	r1, r2
 8005614:	4b3b      	ldr	r3, [pc, #236]	@ (8005704 <UART_SetConfig+0x2d4>)
 8005616:	fba3 2301 	umull	r2, r3, r3, r1
 800561a:	095b      	lsrs	r3, r3, #5
 800561c:	2264      	movs	r2, #100	@ 0x64
 800561e:	fb02 f303 	mul.w	r3, r2, r3
 8005622:	1acb      	subs	r3, r1, r3
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800562a:	4b36      	ldr	r3, [pc, #216]	@ (8005704 <UART_SetConfig+0x2d4>)
 800562c:	fba3 2302 	umull	r2, r3, r3, r2
 8005630:	095b      	lsrs	r3, r3, #5
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005638:	441c      	add	r4, r3
 800563a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800563e:	2200      	movs	r2, #0
 8005640:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005644:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005648:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800564c:	4642      	mov	r2, r8
 800564e:	464b      	mov	r3, r9
 8005650:	1891      	adds	r1, r2, r2
 8005652:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005654:	415b      	adcs	r3, r3
 8005656:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005658:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800565c:	4641      	mov	r1, r8
 800565e:	1851      	adds	r1, r2, r1
 8005660:	6339      	str	r1, [r7, #48]	@ 0x30
 8005662:	4649      	mov	r1, r9
 8005664:	414b      	adcs	r3, r1
 8005666:	637b      	str	r3, [r7, #52]	@ 0x34
 8005668:	f04f 0200 	mov.w	r2, #0
 800566c:	f04f 0300 	mov.w	r3, #0
 8005670:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005674:	4659      	mov	r1, fp
 8005676:	00cb      	lsls	r3, r1, #3
 8005678:	4651      	mov	r1, sl
 800567a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800567e:	4651      	mov	r1, sl
 8005680:	00ca      	lsls	r2, r1, #3
 8005682:	4610      	mov	r0, r2
 8005684:	4619      	mov	r1, r3
 8005686:	4603      	mov	r3, r0
 8005688:	4642      	mov	r2, r8
 800568a:	189b      	adds	r3, r3, r2
 800568c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005690:	464b      	mov	r3, r9
 8005692:	460a      	mov	r2, r1
 8005694:	eb42 0303 	adc.w	r3, r2, r3
 8005698:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800569c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80056a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80056ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80056b0:	460b      	mov	r3, r1
 80056b2:	18db      	adds	r3, r3, r3
 80056b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056b6:	4613      	mov	r3, r2
 80056b8:	eb42 0303 	adc.w	r3, r2, r3
 80056bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80056c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80056c6:	f7fb f837 	bl	8000738 <__aeabi_uldivmod>
 80056ca:	4602      	mov	r2, r0
 80056cc:	460b      	mov	r3, r1
 80056ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005704 <UART_SetConfig+0x2d4>)
 80056d0:	fba3 1302 	umull	r1, r3, r3, r2
 80056d4:	095b      	lsrs	r3, r3, #5
 80056d6:	2164      	movs	r1, #100	@ 0x64
 80056d8:	fb01 f303 	mul.w	r3, r1, r3
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	3332      	adds	r3, #50	@ 0x32
 80056e2:	4a08      	ldr	r2, [pc, #32]	@ (8005704 <UART_SetConfig+0x2d4>)
 80056e4:	fba2 2303 	umull	r2, r3, r2, r3
 80056e8:	095b      	lsrs	r3, r3, #5
 80056ea:	f003 0207 	and.w	r2, r3, #7
 80056ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4422      	add	r2, r4
 80056f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056f8:	e106      	b.n	8005908 <UART_SetConfig+0x4d8>
 80056fa:	bf00      	nop
 80056fc:	40011000 	.word	0x40011000
 8005700:	40011400 	.word	0x40011400
 8005704:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005708:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800570c:	2200      	movs	r2, #0
 800570e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005712:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005716:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800571a:	4642      	mov	r2, r8
 800571c:	464b      	mov	r3, r9
 800571e:	1891      	adds	r1, r2, r2
 8005720:	6239      	str	r1, [r7, #32]
 8005722:	415b      	adcs	r3, r3
 8005724:	627b      	str	r3, [r7, #36]	@ 0x24
 8005726:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800572a:	4641      	mov	r1, r8
 800572c:	1854      	adds	r4, r2, r1
 800572e:	4649      	mov	r1, r9
 8005730:	eb43 0501 	adc.w	r5, r3, r1
 8005734:	f04f 0200 	mov.w	r2, #0
 8005738:	f04f 0300 	mov.w	r3, #0
 800573c:	00eb      	lsls	r3, r5, #3
 800573e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005742:	00e2      	lsls	r2, r4, #3
 8005744:	4614      	mov	r4, r2
 8005746:	461d      	mov	r5, r3
 8005748:	4643      	mov	r3, r8
 800574a:	18e3      	adds	r3, r4, r3
 800574c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005750:	464b      	mov	r3, r9
 8005752:	eb45 0303 	adc.w	r3, r5, r3
 8005756:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800575a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005766:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800576a:	f04f 0200 	mov.w	r2, #0
 800576e:	f04f 0300 	mov.w	r3, #0
 8005772:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005776:	4629      	mov	r1, r5
 8005778:	008b      	lsls	r3, r1, #2
 800577a:	4621      	mov	r1, r4
 800577c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005780:	4621      	mov	r1, r4
 8005782:	008a      	lsls	r2, r1, #2
 8005784:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005788:	f7fa ffd6 	bl	8000738 <__aeabi_uldivmod>
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	4b60      	ldr	r3, [pc, #384]	@ (8005914 <UART_SetConfig+0x4e4>)
 8005792:	fba3 2302 	umull	r2, r3, r3, r2
 8005796:	095b      	lsrs	r3, r3, #5
 8005798:	011c      	lsls	r4, r3, #4
 800579a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800579e:	2200      	movs	r2, #0
 80057a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80057a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80057a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80057ac:	4642      	mov	r2, r8
 80057ae:	464b      	mov	r3, r9
 80057b0:	1891      	adds	r1, r2, r2
 80057b2:	61b9      	str	r1, [r7, #24]
 80057b4:	415b      	adcs	r3, r3
 80057b6:	61fb      	str	r3, [r7, #28]
 80057b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057bc:	4641      	mov	r1, r8
 80057be:	1851      	adds	r1, r2, r1
 80057c0:	6139      	str	r1, [r7, #16]
 80057c2:	4649      	mov	r1, r9
 80057c4:	414b      	adcs	r3, r1
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	f04f 0200 	mov.w	r2, #0
 80057cc:	f04f 0300 	mov.w	r3, #0
 80057d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057d4:	4659      	mov	r1, fp
 80057d6:	00cb      	lsls	r3, r1, #3
 80057d8:	4651      	mov	r1, sl
 80057da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057de:	4651      	mov	r1, sl
 80057e0:	00ca      	lsls	r2, r1, #3
 80057e2:	4610      	mov	r0, r2
 80057e4:	4619      	mov	r1, r3
 80057e6:	4603      	mov	r3, r0
 80057e8:	4642      	mov	r2, r8
 80057ea:	189b      	adds	r3, r3, r2
 80057ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80057f0:	464b      	mov	r3, r9
 80057f2:	460a      	mov	r2, r1
 80057f4:	eb42 0303 	adc.w	r3, r2, r3
 80057f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80057fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005806:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005808:	f04f 0200 	mov.w	r2, #0
 800580c:	f04f 0300 	mov.w	r3, #0
 8005810:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005814:	4649      	mov	r1, r9
 8005816:	008b      	lsls	r3, r1, #2
 8005818:	4641      	mov	r1, r8
 800581a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800581e:	4641      	mov	r1, r8
 8005820:	008a      	lsls	r2, r1, #2
 8005822:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005826:	f7fa ff87 	bl	8000738 <__aeabi_uldivmod>
 800582a:	4602      	mov	r2, r0
 800582c:	460b      	mov	r3, r1
 800582e:	4611      	mov	r1, r2
 8005830:	4b38      	ldr	r3, [pc, #224]	@ (8005914 <UART_SetConfig+0x4e4>)
 8005832:	fba3 2301 	umull	r2, r3, r3, r1
 8005836:	095b      	lsrs	r3, r3, #5
 8005838:	2264      	movs	r2, #100	@ 0x64
 800583a:	fb02 f303 	mul.w	r3, r2, r3
 800583e:	1acb      	subs	r3, r1, r3
 8005840:	011b      	lsls	r3, r3, #4
 8005842:	3332      	adds	r3, #50	@ 0x32
 8005844:	4a33      	ldr	r2, [pc, #204]	@ (8005914 <UART_SetConfig+0x4e4>)
 8005846:	fba2 2303 	umull	r2, r3, r2, r3
 800584a:	095b      	lsrs	r3, r3, #5
 800584c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005850:	441c      	add	r4, r3
 8005852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005856:	2200      	movs	r2, #0
 8005858:	673b      	str	r3, [r7, #112]	@ 0x70
 800585a:	677a      	str	r2, [r7, #116]	@ 0x74
 800585c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005860:	4642      	mov	r2, r8
 8005862:	464b      	mov	r3, r9
 8005864:	1891      	adds	r1, r2, r2
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	415b      	adcs	r3, r3
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005870:	4641      	mov	r1, r8
 8005872:	1851      	adds	r1, r2, r1
 8005874:	6039      	str	r1, [r7, #0]
 8005876:	4649      	mov	r1, r9
 8005878:	414b      	adcs	r3, r1
 800587a:	607b      	str	r3, [r7, #4]
 800587c:	f04f 0200 	mov.w	r2, #0
 8005880:	f04f 0300 	mov.w	r3, #0
 8005884:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005888:	4659      	mov	r1, fp
 800588a:	00cb      	lsls	r3, r1, #3
 800588c:	4651      	mov	r1, sl
 800588e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005892:	4651      	mov	r1, sl
 8005894:	00ca      	lsls	r2, r1, #3
 8005896:	4610      	mov	r0, r2
 8005898:	4619      	mov	r1, r3
 800589a:	4603      	mov	r3, r0
 800589c:	4642      	mov	r2, r8
 800589e:	189b      	adds	r3, r3, r2
 80058a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058a2:	464b      	mov	r3, r9
 80058a4:	460a      	mov	r2, r1
 80058a6:	eb42 0303 	adc.w	r3, r2, r3
 80058aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80058b6:	667a      	str	r2, [r7, #100]	@ 0x64
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	f04f 0300 	mov.w	r3, #0
 80058c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80058c4:	4649      	mov	r1, r9
 80058c6:	008b      	lsls	r3, r1, #2
 80058c8:	4641      	mov	r1, r8
 80058ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058ce:	4641      	mov	r1, r8
 80058d0:	008a      	lsls	r2, r1, #2
 80058d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80058d6:	f7fa ff2f 	bl	8000738 <__aeabi_uldivmod>
 80058da:	4602      	mov	r2, r0
 80058dc:	460b      	mov	r3, r1
 80058de:	4b0d      	ldr	r3, [pc, #52]	@ (8005914 <UART_SetConfig+0x4e4>)
 80058e0:	fba3 1302 	umull	r1, r3, r3, r2
 80058e4:	095b      	lsrs	r3, r3, #5
 80058e6:	2164      	movs	r1, #100	@ 0x64
 80058e8:	fb01 f303 	mul.w	r3, r1, r3
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	3332      	adds	r3, #50	@ 0x32
 80058f2:	4a08      	ldr	r2, [pc, #32]	@ (8005914 <UART_SetConfig+0x4e4>)
 80058f4:	fba2 2303 	umull	r2, r3, r2, r3
 80058f8:	095b      	lsrs	r3, r3, #5
 80058fa:	f003 020f 	and.w	r2, r3, #15
 80058fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4422      	add	r2, r4
 8005906:	609a      	str	r2, [r3, #8]
}
 8005908:	bf00      	nop
 800590a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800590e:	46bd      	mov	sp, r7
 8005910:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005914:	51eb851f 	.word	0x51eb851f

08005918 <siprintf>:
 8005918:	b40e      	push	{r1, r2, r3}
 800591a:	b500      	push	{lr}
 800591c:	b09c      	sub	sp, #112	@ 0x70
 800591e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005920:	9002      	str	r0, [sp, #8]
 8005922:	9006      	str	r0, [sp, #24]
 8005924:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005928:	4809      	ldr	r0, [pc, #36]	@ (8005950 <siprintf+0x38>)
 800592a:	9107      	str	r1, [sp, #28]
 800592c:	9104      	str	r1, [sp, #16]
 800592e:	4909      	ldr	r1, [pc, #36]	@ (8005954 <siprintf+0x3c>)
 8005930:	f853 2b04 	ldr.w	r2, [r3], #4
 8005934:	9105      	str	r1, [sp, #20]
 8005936:	6800      	ldr	r0, [r0, #0]
 8005938:	9301      	str	r3, [sp, #4]
 800593a:	a902      	add	r1, sp, #8
 800593c:	f000 f9a2 	bl	8005c84 <_svfiprintf_r>
 8005940:	9b02      	ldr	r3, [sp, #8]
 8005942:	2200      	movs	r2, #0
 8005944:	701a      	strb	r2, [r3, #0]
 8005946:	b01c      	add	sp, #112	@ 0x70
 8005948:	f85d eb04 	ldr.w	lr, [sp], #4
 800594c:	b003      	add	sp, #12
 800594e:	4770      	bx	lr
 8005950:	20000010 	.word	0x20000010
 8005954:	ffff0208 	.word	0xffff0208

08005958 <memset>:
 8005958:	4402      	add	r2, r0
 800595a:	4603      	mov	r3, r0
 800595c:	4293      	cmp	r3, r2
 800595e:	d100      	bne.n	8005962 <memset+0xa>
 8005960:	4770      	bx	lr
 8005962:	f803 1b01 	strb.w	r1, [r3], #1
 8005966:	e7f9      	b.n	800595c <memset+0x4>

08005968 <__errno>:
 8005968:	4b01      	ldr	r3, [pc, #4]	@ (8005970 <__errno+0x8>)
 800596a:	6818      	ldr	r0, [r3, #0]
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	20000010 	.word	0x20000010

08005974 <__libc_init_array>:
 8005974:	b570      	push	{r4, r5, r6, lr}
 8005976:	4d0d      	ldr	r5, [pc, #52]	@ (80059ac <__libc_init_array+0x38>)
 8005978:	4c0d      	ldr	r4, [pc, #52]	@ (80059b0 <__libc_init_array+0x3c>)
 800597a:	1b64      	subs	r4, r4, r5
 800597c:	10a4      	asrs	r4, r4, #2
 800597e:	2600      	movs	r6, #0
 8005980:	42a6      	cmp	r6, r4
 8005982:	d109      	bne.n	8005998 <__libc_init_array+0x24>
 8005984:	4d0b      	ldr	r5, [pc, #44]	@ (80059b4 <__libc_init_array+0x40>)
 8005986:	4c0c      	ldr	r4, [pc, #48]	@ (80059b8 <__libc_init_array+0x44>)
 8005988:	f000 fc66 	bl	8006258 <_init>
 800598c:	1b64      	subs	r4, r4, r5
 800598e:	10a4      	asrs	r4, r4, #2
 8005990:	2600      	movs	r6, #0
 8005992:	42a6      	cmp	r6, r4
 8005994:	d105      	bne.n	80059a2 <__libc_init_array+0x2e>
 8005996:	bd70      	pop	{r4, r5, r6, pc}
 8005998:	f855 3b04 	ldr.w	r3, [r5], #4
 800599c:	4798      	blx	r3
 800599e:	3601      	adds	r6, #1
 80059a0:	e7ee      	b.n	8005980 <__libc_init_array+0xc>
 80059a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059a6:	4798      	blx	r3
 80059a8:	3601      	adds	r6, #1
 80059aa:	e7f2      	b.n	8005992 <__libc_init_array+0x1e>
 80059ac:	0800639c 	.word	0x0800639c
 80059b0:	0800639c 	.word	0x0800639c
 80059b4:	0800639c 	.word	0x0800639c
 80059b8:	080063a0 	.word	0x080063a0

080059bc <__retarget_lock_acquire_recursive>:
 80059bc:	4770      	bx	lr

080059be <__retarget_lock_release_recursive>:
 80059be:	4770      	bx	lr

080059c0 <memcpy>:
 80059c0:	440a      	add	r2, r1
 80059c2:	4291      	cmp	r1, r2
 80059c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80059c8:	d100      	bne.n	80059cc <memcpy+0xc>
 80059ca:	4770      	bx	lr
 80059cc:	b510      	push	{r4, lr}
 80059ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059d6:	4291      	cmp	r1, r2
 80059d8:	d1f9      	bne.n	80059ce <memcpy+0xe>
 80059da:	bd10      	pop	{r4, pc}

080059dc <_free_r>:
 80059dc:	b538      	push	{r3, r4, r5, lr}
 80059de:	4605      	mov	r5, r0
 80059e0:	2900      	cmp	r1, #0
 80059e2:	d041      	beq.n	8005a68 <_free_r+0x8c>
 80059e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059e8:	1f0c      	subs	r4, r1, #4
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	bfb8      	it	lt
 80059ee:	18e4      	addlt	r4, r4, r3
 80059f0:	f000 f8e0 	bl	8005bb4 <__malloc_lock>
 80059f4:	4a1d      	ldr	r2, [pc, #116]	@ (8005a6c <_free_r+0x90>)
 80059f6:	6813      	ldr	r3, [r2, #0]
 80059f8:	b933      	cbnz	r3, 8005a08 <_free_r+0x2c>
 80059fa:	6063      	str	r3, [r4, #4]
 80059fc:	6014      	str	r4, [r2, #0]
 80059fe:	4628      	mov	r0, r5
 8005a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a04:	f000 b8dc 	b.w	8005bc0 <__malloc_unlock>
 8005a08:	42a3      	cmp	r3, r4
 8005a0a:	d908      	bls.n	8005a1e <_free_r+0x42>
 8005a0c:	6820      	ldr	r0, [r4, #0]
 8005a0e:	1821      	adds	r1, r4, r0
 8005a10:	428b      	cmp	r3, r1
 8005a12:	bf01      	itttt	eq
 8005a14:	6819      	ldreq	r1, [r3, #0]
 8005a16:	685b      	ldreq	r3, [r3, #4]
 8005a18:	1809      	addeq	r1, r1, r0
 8005a1a:	6021      	streq	r1, [r4, #0]
 8005a1c:	e7ed      	b.n	80059fa <_free_r+0x1e>
 8005a1e:	461a      	mov	r2, r3
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	b10b      	cbz	r3, 8005a28 <_free_r+0x4c>
 8005a24:	42a3      	cmp	r3, r4
 8005a26:	d9fa      	bls.n	8005a1e <_free_r+0x42>
 8005a28:	6811      	ldr	r1, [r2, #0]
 8005a2a:	1850      	adds	r0, r2, r1
 8005a2c:	42a0      	cmp	r0, r4
 8005a2e:	d10b      	bne.n	8005a48 <_free_r+0x6c>
 8005a30:	6820      	ldr	r0, [r4, #0]
 8005a32:	4401      	add	r1, r0
 8005a34:	1850      	adds	r0, r2, r1
 8005a36:	4283      	cmp	r3, r0
 8005a38:	6011      	str	r1, [r2, #0]
 8005a3a:	d1e0      	bne.n	80059fe <_free_r+0x22>
 8005a3c:	6818      	ldr	r0, [r3, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	6053      	str	r3, [r2, #4]
 8005a42:	4408      	add	r0, r1
 8005a44:	6010      	str	r0, [r2, #0]
 8005a46:	e7da      	b.n	80059fe <_free_r+0x22>
 8005a48:	d902      	bls.n	8005a50 <_free_r+0x74>
 8005a4a:	230c      	movs	r3, #12
 8005a4c:	602b      	str	r3, [r5, #0]
 8005a4e:	e7d6      	b.n	80059fe <_free_r+0x22>
 8005a50:	6820      	ldr	r0, [r4, #0]
 8005a52:	1821      	adds	r1, r4, r0
 8005a54:	428b      	cmp	r3, r1
 8005a56:	bf04      	itt	eq
 8005a58:	6819      	ldreq	r1, [r3, #0]
 8005a5a:	685b      	ldreq	r3, [r3, #4]
 8005a5c:	6063      	str	r3, [r4, #4]
 8005a5e:	bf04      	itt	eq
 8005a60:	1809      	addeq	r1, r1, r0
 8005a62:	6021      	streq	r1, [r4, #0]
 8005a64:	6054      	str	r4, [r2, #4]
 8005a66:	e7ca      	b.n	80059fe <_free_r+0x22>
 8005a68:	bd38      	pop	{r3, r4, r5, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20000380 	.word	0x20000380

08005a70 <sbrk_aligned>:
 8005a70:	b570      	push	{r4, r5, r6, lr}
 8005a72:	4e0f      	ldr	r6, [pc, #60]	@ (8005ab0 <sbrk_aligned+0x40>)
 8005a74:	460c      	mov	r4, r1
 8005a76:	6831      	ldr	r1, [r6, #0]
 8005a78:	4605      	mov	r5, r0
 8005a7a:	b911      	cbnz	r1, 8005a82 <sbrk_aligned+0x12>
 8005a7c:	f000 fba6 	bl	80061cc <_sbrk_r>
 8005a80:	6030      	str	r0, [r6, #0]
 8005a82:	4621      	mov	r1, r4
 8005a84:	4628      	mov	r0, r5
 8005a86:	f000 fba1 	bl	80061cc <_sbrk_r>
 8005a8a:	1c43      	adds	r3, r0, #1
 8005a8c:	d103      	bne.n	8005a96 <sbrk_aligned+0x26>
 8005a8e:	f04f 34ff 	mov.w	r4, #4294967295
 8005a92:	4620      	mov	r0, r4
 8005a94:	bd70      	pop	{r4, r5, r6, pc}
 8005a96:	1cc4      	adds	r4, r0, #3
 8005a98:	f024 0403 	bic.w	r4, r4, #3
 8005a9c:	42a0      	cmp	r0, r4
 8005a9e:	d0f8      	beq.n	8005a92 <sbrk_aligned+0x22>
 8005aa0:	1a21      	subs	r1, r4, r0
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	f000 fb92 	bl	80061cc <_sbrk_r>
 8005aa8:	3001      	adds	r0, #1
 8005aaa:	d1f2      	bne.n	8005a92 <sbrk_aligned+0x22>
 8005aac:	e7ef      	b.n	8005a8e <sbrk_aligned+0x1e>
 8005aae:	bf00      	nop
 8005ab0:	2000037c 	.word	0x2000037c

08005ab4 <_malloc_r>:
 8005ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ab8:	1ccd      	adds	r5, r1, #3
 8005aba:	f025 0503 	bic.w	r5, r5, #3
 8005abe:	3508      	adds	r5, #8
 8005ac0:	2d0c      	cmp	r5, #12
 8005ac2:	bf38      	it	cc
 8005ac4:	250c      	movcc	r5, #12
 8005ac6:	2d00      	cmp	r5, #0
 8005ac8:	4606      	mov	r6, r0
 8005aca:	db01      	blt.n	8005ad0 <_malloc_r+0x1c>
 8005acc:	42a9      	cmp	r1, r5
 8005ace:	d904      	bls.n	8005ada <_malloc_r+0x26>
 8005ad0:	230c      	movs	r3, #12
 8005ad2:	6033      	str	r3, [r6, #0]
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ada:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005bb0 <_malloc_r+0xfc>
 8005ade:	f000 f869 	bl	8005bb4 <__malloc_lock>
 8005ae2:	f8d8 3000 	ldr.w	r3, [r8]
 8005ae6:	461c      	mov	r4, r3
 8005ae8:	bb44      	cbnz	r4, 8005b3c <_malloc_r+0x88>
 8005aea:	4629      	mov	r1, r5
 8005aec:	4630      	mov	r0, r6
 8005aee:	f7ff ffbf 	bl	8005a70 <sbrk_aligned>
 8005af2:	1c43      	adds	r3, r0, #1
 8005af4:	4604      	mov	r4, r0
 8005af6:	d158      	bne.n	8005baa <_malloc_r+0xf6>
 8005af8:	f8d8 4000 	ldr.w	r4, [r8]
 8005afc:	4627      	mov	r7, r4
 8005afe:	2f00      	cmp	r7, #0
 8005b00:	d143      	bne.n	8005b8a <_malloc_r+0xd6>
 8005b02:	2c00      	cmp	r4, #0
 8005b04:	d04b      	beq.n	8005b9e <_malloc_r+0xea>
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	4639      	mov	r1, r7
 8005b0a:	4630      	mov	r0, r6
 8005b0c:	eb04 0903 	add.w	r9, r4, r3
 8005b10:	f000 fb5c 	bl	80061cc <_sbrk_r>
 8005b14:	4581      	cmp	r9, r0
 8005b16:	d142      	bne.n	8005b9e <_malloc_r+0xea>
 8005b18:	6821      	ldr	r1, [r4, #0]
 8005b1a:	1a6d      	subs	r5, r5, r1
 8005b1c:	4629      	mov	r1, r5
 8005b1e:	4630      	mov	r0, r6
 8005b20:	f7ff ffa6 	bl	8005a70 <sbrk_aligned>
 8005b24:	3001      	adds	r0, #1
 8005b26:	d03a      	beq.n	8005b9e <_malloc_r+0xea>
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	442b      	add	r3, r5
 8005b2c:	6023      	str	r3, [r4, #0]
 8005b2e:	f8d8 3000 	ldr.w	r3, [r8]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	bb62      	cbnz	r2, 8005b90 <_malloc_r+0xdc>
 8005b36:	f8c8 7000 	str.w	r7, [r8]
 8005b3a:	e00f      	b.n	8005b5c <_malloc_r+0xa8>
 8005b3c:	6822      	ldr	r2, [r4, #0]
 8005b3e:	1b52      	subs	r2, r2, r5
 8005b40:	d420      	bmi.n	8005b84 <_malloc_r+0xd0>
 8005b42:	2a0b      	cmp	r2, #11
 8005b44:	d917      	bls.n	8005b76 <_malloc_r+0xc2>
 8005b46:	1961      	adds	r1, r4, r5
 8005b48:	42a3      	cmp	r3, r4
 8005b4a:	6025      	str	r5, [r4, #0]
 8005b4c:	bf18      	it	ne
 8005b4e:	6059      	strne	r1, [r3, #4]
 8005b50:	6863      	ldr	r3, [r4, #4]
 8005b52:	bf08      	it	eq
 8005b54:	f8c8 1000 	streq.w	r1, [r8]
 8005b58:	5162      	str	r2, [r4, r5]
 8005b5a:	604b      	str	r3, [r1, #4]
 8005b5c:	4630      	mov	r0, r6
 8005b5e:	f000 f82f 	bl	8005bc0 <__malloc_unlock>
 8005b62:	f104 000b 	add.w	r0, r4, #11
 8005b66:	1d23      	adds	r3, r4, #4
 8005b68:	f020 0007 	bic.w	r0, r0, #7
 8005b6c:	1ac2      	subs	r2, r0, r3
 8005b6e:	bf1c      	itt	ne
 8005b70:	1a1b      	subne	r3, r3, r0
 8005b72:	50a3      	strne	r3, [r4, r2]
 8005b74:	e7af      	b.n	8005ad6 <_malloc_r+0x22>
 8005b76:	6862      	ldr	r2, [r4, #4]
 8005b78:	42a3      	cmp	r3, r4
 8005b7a:	bf0c      	ite	eq
 8005b7c:	f8c8 2000 	streq.w	r2, [r8]
 8005b80:	605a      	strne	r2, [r3, #4]
 8005b82:	e7eb      	b.n	8005b5c <_malloc_r+0xa8>
 8005b84:	4623      	mov	r3, r4
 8005b86:	6864      	ldr	r4, [r4, #4]
 8005b88:	e7ae      	b.n	8005ae8 <_malloc_r+0x34>
 8005b8a:	463c      	mov	r4, r7
 8005b8c:	687f      	ldr	r7, [r7, #4]
 8005b8e:	e7b6      	b.n	8005afe <_malloc_r+0x4a>
 8005b90:	461a      	mov	r2, r3
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	42a3      	cmp	r3, r4
 8005b96:	d1fb      	bne.n	8005b90 <_malloc_r+0xdc>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	6053      	str	r3, [r2, #4]
 8005b9c:	e7de      	b.n	8005b5c <_malloc_r+0xa8>
 8005b9e:	230c      	movs	r3, #12
 8005ba0:	6033      	str	r3, [r6, #0]
 8005ba2:	4630      	mov	r0, r6
 8005ba4:	f000 f80c 	bl	8005bc0 <__malloc_unlock>
 8005ba8:	e794      	b.n	8005ad4 <_malloc_r+0x20>
 8005baa:	6005      	str	r5, [r0, #0]
 8005bac:	e7d6      	b.n	8005b5c <_malloc_r+0xa8>
 8005bae:	bf00      	nop
 8005bb0:	20000380 	.word	0x20000380

08005bb4 <__malloc_lock>:
 8005bb4:	4801      	ldr	r0, [pc, #4]	@ (8005bbc <__malloc_lock+0x8>)
 8005bb6:	f7ff bf01 	b.w	80059bc <__retarget_lock_acquire_recursive>
 8005bba:	bf00      	nop
 8005bbc:	20000378 	.word	0x20000378

08005bc0 <__malloc_unlock>:
 8005bc0:	4801      	ldr	r0, [pc, #4]	@ (8005bc8 <__malloc_unlock+0x8>)
 8005bc2:	f7ff befc 	b.w	80059be <__retarget_lock_release_recursive>
 8005bc6:	bf00      	nop
 8005bc8:	20000378 	.word	0x20000378

08005bcc <__ssputs_r>:
 8005bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd0:	688e      	ldr	r6, [r1, #8]
 8005bd2:	461f      	mov	r7, r3
 8005bd4:	42be      	cmp	r6, r7
 8005bd6:	680b      	ldr	r3, [r1, #0]
 8005bd8:	4682      	mov	sl, r0
 8005bda:	460c      	mov	r4, r1
 8005bdc:	4690      	mov	r8, r2
 8005bde:	d82d      	bhi.n	8005c3c <__ssputs_r+0x70>
 8005be0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005be4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005be8:	d026      	beq.n	8005c38 <__ssputs_r+0x6c>
 8005bea:	6965      	ldr	r5, [r4, #20]
 8005bec:	6909      	ldr	r1, [r1, #16]
 8005bee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005bf2:	eba3 0901 	sub.w	r9, r3, r1
 8005bf6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005bfa:	1c7b      	adds	r3, r7, #1
 8005bfc:	444b      	add	r3, r9
 8005bfe:	106d      	asrs	r5, r5, #1
 8005c00:	429d      	cmp	r5, r3
 8005c02:	bf38      	it	cc
 8005c04:	461d      	movcc	r5, r3
 8005c06:	0553      	lsls	r3, r2, #21
 8005c08:	d527      	bpl.n	8005c5a <__ssputs_r+0x8e>
 8005c0a:	4629      	mov	r1, r5
 8005c0c:	f7ff ff52 	bl	8005ab4 <_malloc_r>
 8005c10:	4606      	mov	r6, r0
 8005c12:	b360      	cbz	r0, 8005c6e <__ssputs_r+0xa2>
 8005c14:	6921      	ldr	r1, [r4, #16]
 8005c16:	464a      	mov	r2, r9
 8005c18:	f7ff fed2 	bl	80059c0 <memcpy>
 8005c1c:	89a3      	ldrh	r3, [r4, #12]
 8005c1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005c22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c26:	81a3      	strh	r3, [r4, #12]
 8005c28:	6126      	str	r6, [r4, #16]
 8005c2a:	6165      	str	r5, [r4, #20]
 8005c2c:	444e      	add	r6, r9
 8005c2e:	eba5 0509 	sub.w	r5, r5, r9
 8005c32:	6026      	str	r6, [r4, #0]
 8005c34:	60a5      	str	r5, [r4, #8]
 8005c36:	463e      	mov	r6, r7
 8005c38:	42be      	cmp	r6, r7
 8005c3a:	d900      	bls.n	8005c3e <__ssputs_r+0x72>
 8005c3c:	463e      	mov	r6, r7
 8005c3e:	6820      	ldr	r0, [r4, #0]
 8005c40:	4632      	mov	r2, r6
 8005c42:	4641      	mov	r1, r8
 8005c44:	f000 faa8 	bl	8006198 <memmove>
 8005c48:	68a3      	ldr	r3, [r4, #8]
 8005c4a:	1b9b      	subs	r3, r3, r6
 8005c4c:	60a3      	str	r3, [r4, #8]
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	4433      	add	r3, r6
 8005c52:	6023      	str	r3, [r4, #0]
 8005c54:	2000      	movs	r0, #0
 8005c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c5a:	462a      	mov	r2, r5
 8005c5c:	f000 fac6 	bl	80061ec <_realloc_r>
 8005c60:	4606      	mov	r6, r0
 8005c62:	2800      	cmp	r0, #0
 8005c64:	d1e0      	bne.n	8005c28 <__ssputs_r+0x5c>
 8005c66:	6921      	ldr	r1, [r4, #16]
 8005c68:	4650      	mov	r0, sl
 8005c6a:	f7ff feb7 	bl	80059dc <_free_r>
 8005c6e:	230c      	movs	r3, #12
 8005c70:	f8ca 3000 	str.w	r3, [sl]
 8005c74:	89a3      	ldrh	r3, [r4, #12]
 8005c76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c7a:	81a3      	strh	r3, [r4, #12]
 8005c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c80:	e7e9      	b.n	8005c56 <__ssputs_r+0x8a>
	...

08005c84 <_svfiprintf_r>:
 8005c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c88:	4698      	mov	r8, r3
 8005c8a:	898b      	ldrh	r3, [r1, #12]
 8005c8c:	061b      	lsls	r3, r3, #24
 8005c8e:	b09d      	sub	sp, #116	@ 0x74
 8005c90:	4607      	mov	r7, r0
 8005c92:	460d      	mov	r5, r1
 8005c94:	4614      	mov	r4, r2
 8005c96:	d510      	bpl.n	8005cba <_svfiprintf_r+0x36>
 8005c98:	690b      	ldr	r3, [r1, #16]
 8005c9a:	b973      	cbnz	r3, 8005cba <_svfiprintf_r+0x36>
 8005c9c:	2140      	movs	r1, #64	@ 0x40
 8005c9e:	f7ff ff09 	bl	8005ab4 <_malloc_r>
 8005ca2:	6028      	str	r0, [r5, #0]
 8005ca4:	6128      	str	r0, [r5, #16]
 8005ca6:	b930      	cbnz	r0, 8005cb6 <_svfiprintf_r+0x32>
 8005ca8:	230c      	movs	r3, #12
 8005caa:	603b      	str	r3, [r7, #0]
 8005cac:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb0:	b01d      	add	sp, #116	@ 0x74
 8005cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cb6:	2340      	movs	r3, #64	@ 0x40
 8005cb8:	616b      	str	r3, [r5, #20]
 8005cba:	2300      	movs	r3, #0
 8005cbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cbe:	2320      	movs	r3, #32
 8005cc0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005cc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cc8:	2330      	movs	r3, #48	@ 0x30
 8005cca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005e68 <_svfiprintf_r+0x1e4>
 8005cce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005cd2:	f04f 0901 	mov.w	r9, #1
 8005cd6:	4623      	mov	r3, r4
 8005cd8:	469a      	mov	sl, r3
 8005cda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cde:	b10a      	cbz	r2, 8005ce4 <_svfiprintf_r+0x60>
 8005ce0:	2a25      	cmp	r2, #37	@ 0x25
 8005ce2:	d1f9      	bne.n	8005cd8 <_svfiprintf_r+0x54>
 8005ce4:	ebba 0b04 	subs.w	fp, sl, r4
 8005ce8:	d00b      	beq.n	8005d02 <_svfiprintf_r+0x7e>
 8005cea:	465b      	mov	r3, fp
 8005cec:	4622      	mov	r2, r4
 8005cee:	4629      	mov	r1, r5
 8005cf0:	4638      	mov	r0, r7
 8005cf2:	f7ff ff6b 	bl	8005bcc <__ssputs_r>
 8005cf6:	3001      	adds	r0, #1
 8005cf8:	f000 80a7 	beq.w	8005e4a <_svfiprintf_r+0x1c6>
 8005cfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005cfe:	445a      	add	r2, fp
 8005d00:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d02:	f89a 3000 	ldrb.w	r3, [sl]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 809f 	beq.w	8005e4a <_svfiprintf_r+0x1c6>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d16:	f10a 0a01 	add.w	sl, sl, #1
 8005d1a:	9304      	str	r3, [sp, #16]
 8005d1c:	9307      	str	r3, [sp, #28]
 8005d1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d22:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d24:	4654      	mov	r4, sl
 8005d26:	2205      	movs	r2, #5
 8005d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d2c:	484e      	ldr	r0, [pc, #312]	@ (8005e68 <_svfiprintf_r+0x1e4>)
 8005d2e:	f7fa fa6f 	bl	8000210 <memchr>
 8005d32:	9a04      	ldr	r2, [sp, #16]
 8005d34:	b9d8      	cbnz	r0, 8005d6e <_svfiprintf_r+0xea>
 8005d36:	06d0      	lsls	r0, r2, #27
 8005d38:	bf44      	itt	mi
 8005d3a:	2320      	movmi	r3, #32
 8005d3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d40:	0711      	lsls	r1, r2, #28
 8005d42:	bf44      	itt	mi
 8005d44:	232b      	movmi	r3, #43	@ 0x2b
 8005d46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d4a:	f89a 3000 	ldrb.w	r3, [sl]
 8005d4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d50:	d015      	beq.n	8005d7e <_svfiprintf_r+0xfa>
 8005d52:	9a07      	ldr	r2, [sp, #28]
 8005d54:	4654      	mov	r4, sl
 8005d56:	2000      	movs	r0, #0
 8005d58:	f04f 0c0a 	mov.w	ip, #10
 8005d5c:	4621      	mov	r1, r4
 8005d5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d62:	3b30      	subs	r3, #48	@ 0x30
 8005d64:	2b09      	cmp	r3, #9
 8005d66:	d94b      	bls.n	8005e00 <_svfiprintf_r+0x17c>
 8005d68:	b1b0      	cbz	r0, 8005d98 <_svfiprintf_r+0x114>
 8005d6a:	9207      	str	r2, [sp, #28]
 8005d6c:	e014      	b.n	8005d98 <_svfiprintf_r+0x114>
 8005d6e:	eba0 0308 	sub.w	r3, r0, r8
 8005d72:	fa09 f303 	lsl.w	r3, r9, r3
 8005d76:	4313      	orrs	r3, r2
 8005d78:	9304      	str	r3, [sp, #16]
 8005d7a:	46a2      	mov	sl, r4
 8005d7c:	e7d2      	b.n	8005d24 <_svfiprintf_r+0xa0>
 8005d7e:	9b03      	ldr	r3, [sp, #12]
 8005d80:	1d19      	adds	r1, r3, #4
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	9103      	str	r1, [sp, #12]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	bfbb      	ittet	lt
 8005d8a:	425b      	neglt	r3, r3
 8005d8c:	f042 0202 	orrlt.w	r2, r2, #2
 8005d90:	9307      	strge	r3, [sp, #28]
 8005d92:	9307      	strlt	r3, [sp, #28]
 8005d94:	bfb8      	it	lt
 8005d96:	9204      	strlt	r2, [sp, #16]
 8005d98:	7823      	ldrb	r3, [r4, #0]
 8005d9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d9c:	d10a      	bne.n	8005db4 <_svfiprintf_r+0x130>
 8005d9e:	7863      	ldrb	r3, [r4, #1]
 8005da0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005da2:	d132      	bne.n	8005e0a <_svfiprintf_r+0x186>
 8005da4:	9b03      	ldr	r3, [sp, #12]
 8005da6:	1d1a      	adds	r2, r3, #4
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	9203      	str	r2, [sp, #12]
 8005dac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005db0:	3402      	adds	r4, #2
 8005db2:	9305      	str	r3, [sp, #20]
 8005db4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005e78 <_svfiprintf_r+0x1f4>
 8005db8:	7821      	ldrb	r1, [r4, #0]
 8005dba:	2203      	movs	r2, #3
 8005dbc:	4650      	mov	r0, sl
 8005dbe:	f7fa fa27 	bl	8000210 <memchr>
 8005dc2:	b138      	cbz	r0, 8005dd4 <_svfiprintf_r+0x150>
 8005dc4:	9b04      	ldr	r3, [sp, #16]
 8005dc6:	eba0 000a 	sub.w	r0, r0, sl
 8005dca:	2240      	movs	r2, #64	@ 0x40
 8005dcc:	4082      	lsls	r2, r0
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	3401      	adds	r4, #1
 8005dd2:	9304      	str	r3, [sp, #16]
 8005dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dd8:	4824      	ldr	r0, [pc, #144]	@ (8005e6c <_svfiprintf_r+0x1e8>)
 8005dda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005dde:	2206      	movs	r2, #6
 8005de0:	f7fa fa16 	bl	8000210 <memchr>
 8005de4:	2800      	cmp	r0, #0
 8005de6:	d036      	beq.n	8005e56 <_svfiprintf_r+0x1d2>
 8005de8:	4b21      	ldr	r3, [pc, #132]	@ (8005e70 <_svfiprintf_r+0x1ec>)
 8005dea:	bb1b      	cbnz	r3, 8005e34 <_svfiprintf_r+0x1b0>
 8005dec:	9b03      	ldr	r3, [sp, #12]
 8005dee:	3307      	adds	r3, #7
 8005df0:	f023 0307 	bic.w	r3, r3, #7
 8005df4:	3308      	adds	r3, #8
 8005df6:	9303      	str	r3, [sp, #12]
 8005df8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dfa:	4433      	add	r3, r6
 8005dfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dfe:	e76a      	b.n	8005cd6 <_svfiprintf_r+0x52>
 8005e00:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e04:	460c      	mov	r4, r1
 8005e06:	2001      	movs	r0, #1
 8005e08:	e7a8      	b.n	8005d5c <_svfiprintf_r+0xd8>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	3401      	adds	r4, #1
 8005e0e:	9305      	str	r3, [sp, #20]
 8005e10:	4619      	mov	r1, r3
 8005e12:	f04f 0c0a 	mov.w	ip, #10
 8005e16:	4620      	mov	r0, r4
 8005e18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e1c:	3a30      	subs	r2, #48	@ 0x30
 8005e1e:	2a09      	cmp	r2, #9
 8005e20:	d903      	bls.n	8005e2a <_svfiprintf_r+0x1a6>
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d0c6      	beq.n	8005db4 <_svfiprintf_r+0x130>
 8005e26:	9105      	str	r1, [sp, #20]
 8005e28:	e7c4      	b.n	8005db4 <_svfiprintf_r+0x130>
 8005e2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e2e:	4604      	mov	r4, r0
 8005e30:	2301      	movs	r3, #1
 8005e32:	e7f0      	b.n	8005e16 <_svfiprintf_r+0x192>
 8005e34:	ab03      	add	r3, sp, #12
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	462a      	mov	r2, r5
 8005e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8005e74 <_svfiprintf_r+0x1f0>)
 8005e3c:	a904      	add	r1, sp, #16
 8005e3e:	4638      	mov	r0, r7
 8005e40:	f3af 8000 	nop.w
 8005e44:	1c42      	adds	r2, r0, #1
 8005e46:	4606      	mov	r6, r0
 8005e48:	d1d6      	bne.n	8005df8 <_svfiprintf_r+0x174>
 8005e4a:	89ab      	ldrh	r3, [r5, #12]
 8005e4c:	065b      	lsls	r3, r3, #25
 8005e4e:	f53f af2d 	bmi.w	8005cac <_svfiprintf_r+0x28>
 8005e52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e54:	e72c      	b.n	8005cb0 <_svfiprintf_r+0x2c>
 8005e56:	ab03      	add	r3, sp, #12
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	462a      	mov	r2, r5
 8005e5c:	4b05      	ldr	r3, [pc, #20]	@ (8005e74 <_svfiprintf_r+0x1f0>)
 8005e5e:	a904      	add	r1, sp, #16
 8005e60:	4638      	mov	r0, r7
 8005e62:	f000 f879 	bl	8005f58 <_printf_i>
 8005e66:	e7ed      	b.n	8005e44 <_svfiprintf_r+0x1c0>
 8005e68:	08006360 	.word	0x08006360
 8005e6c:	0800636a 	.word	0x0800636a
 8005e70:	00000000 	.word	0x00000000
 8005e74:	08005bcd 	.word	0x08005bcd
 8005e78:	08006366 	.word	0x08006366

08005e7c <_printf_common>:
 8005e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e80:	4616      	mov	r6, r2
 8005e82:	4698      	mov	r8, r3
 8005e84:	688a      	ldr	r2, [r1, #8]
 8005e86:	690b      	ldr	r3, [r1, #16]
 8005e88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	bfb8      	it	lt
 8005e90:	4613      	movlt	r3, r2
 8005e92:	6033      	str	r3, [r6, #0]
 8005e94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e98:	4607      	mov	r7, r0
 8005e9a:	460c      	mov	r4, r1
 8005e9c:	b10a      	cbz	r2, 8005ea2 <_printf_common+0x26>
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	6033      	str	r3, [r6, #0]
 8005ea2:	6823      	ldr	r3, [r4, #0]
 8005ea4:	0699      	lsls	r1, r3, #26
 8005ea6:	bf42      	ittt	mi
 8005ea8:	6833      	ldrmi	r3, [r6, #0]
 8005eaa:	3302      	addmi	r3, #2
 8005eac:	6033      	strmi	r3, [r6, #0]
 8005eae:	6825      	ldr	r5, [r4, #0]
 8005eb0:	f015 0506 	ands.w	r5, r5, #6
 8005eb4:	d106      	bne.n	8005ec4 <_printf_common+0x48>
 8005eb6:	f104 0a19 	add.w	sl, r4, #25
 8005eba:	68e3      	ldr	r3, [r4, #12]
 8005ebc:	6832      	ldr	r2, [r6, #0]
 8005ebe:	1a9b      	subs	r3, r3, r2
 8005ec0:	42ab      	cmp	r3, r5
 8005ec2:	dc26      	bgt.n	8005f12 <_printf_common+0x96>
 8005ec4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ec8:	6822      	ldr	r2, [r4, #0]
 8005eca:	3b00      	subs	r3, #0
 8005ecc:	bf18      	it	ne
 8005ece:	2301      	movne	r3, #1
 8005ed0:	0692      	lsls	r2, r2, #26
 8005ed2:	d42b      	bmi.n	8005f2c <_printf_common+0xb0>
 8005ed4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ed8:	4641      	mov	r1, r8
 8005eda:	4638      	mov	r0, r7
 8005edc:	47c8      	blx	r9
 8005ede:	3001      	adds	r0, #1
 8005ee0:	d01e      	beq.n	8005f20 <_printf_common+0xa4>
 8005ee2:	6823      	ldr	r3, [r4, #0]
 8005ee4:	6922      	ldr	r2, [r4, #16]
 8005ee6:	f003 0306 	and.w	r3, r3, #6
 8005eea:	2b04      	cmp	r3, #4
 8005eec:	bf02      	ittt	eq
 8005eee:	68e5      	ldreq	r5, [r4, #12]
 8005ef0:	6833      	ldreq	r3, [r6, #0]
 8005ef2:	1aed      	subeq	r5, r5, r3
 8005ef4:	68a3      	ldr	r3, [r4, #8]
 8005ef6:	bf0c      	ite	eq
 8005ef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005efc:	2500      	movne	r5, #0
 8005efe:	4293      	cmp	r3, r2
 8005f00:	bfc4      	itt	gt
 8005f02:	1a9b      	subgt	r3, r3, r2
 8005f04:	18ed      	addgt	r5, r5, r3
 8005f06:	2600      	movs	r6, #0
 8005f08:	341a      	adds	r4, #26
 8005f0a:	42b5      	cmp	r5, r6
 8005f0c:	d11a      	bne.n	8005f44 <_printf_common+0xc8>
 8005f0e:	2000      	movs	r0, #0
 8005f10:	e008      	b.n	8005f24 <_printf_common+0xa8>
 8005f12:	2301      	movs	r3, #1
 8005f14:	4652      	mov	r2, sl
 8005f16:	4641      	mov	r1, r8
 8005f18:	4638      	mov	r0, r7
 8005f1a:	47c8      	blx	r9
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	d103      	bne.n	8005f28 <_printf_common+0xac>
 8005f20:	f04f 30ff 	mov.w	r0, #4294967295
 8005f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f28:	3501      	adds	r5, #1
 8005f2a:	e7c6      	b.n	8005eba <_printf_common+0x3e>
 8005f2c:	18e1      	adds	r1, r4, r3
 8005f2e:	1c5a      	adds	r2, r3, #1
 8005f30:	2030      	movs	r0, #48	@ 0x30
 8005f32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f36:	4422      	add	r2, r4
 8005f38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f40:	3302      	adds	r3, #2
 8005f42:	e7c7      	b.n	8005ed4 <_printf_common+0x58>
 8005f44:	2301      	movs	r3, #1
 8005f46:	4622      	mov	r2, r4
 8005f48:	4641      	mov	r1, r8
 8005f4a:	4638      	mov	r0, r7
 8005f4c:	47c8      	blx	r9
 8005f4e:	3001      	adds	r0, #1
 8005f50:	d0e6      	beq.n	8005f20 <_printf_common+0xa4>
 8005f52:	3601      	adds	r6, #1
 8005f54:	e7d9      	b.n	8005f0a <_printf_common+0x8e>
	...

08005f58 <_printf_i>:
 8005f58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f5c:	7e0f      	ldrb	r7, [r1, #24]
 8005f5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f60:	2f78      	cmp	r7, #120	@ 0x78
 8005f62:	4691      	mov	r9, r2
 8005f64:	4680      	mov	r8, r0
 8005f66:	460c      	mov	r4, r1
 8005f68:	469a      	mov	sl, r3
 8005f6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f6e:	d807      	bhi.n	8005f80 <_printf_i+0x28>
 8005f70:	2f62      	cmp	r7, #98	@ 0x62
 8005f72:	d80a      	bhi.n	8005f8a <_printf_i+0x32>
 8005f74:	2f00      	cmp	r7, #0
 8005f76:	f000 80d2 	beq.w	800611e <_printf_i+0x1c6>
 8005f7a:	2f58      	cmp	r7, #88	@ 0x58
 8005f7c:	f000 80b9 	beq.w	80060f2 <_printf_i+0x19a>
 8005f80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f88:	e03a      	b.n	8006000 <_printf_i+0xa8>
 8005f8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f8e:	2b15      	cmp	r3, #21
 8005f90:	d8f6      	bhi.n	8005f80 <_printf_i+0x28>
 8005f92:	a101      	add	r1, pc, #4	@ (adr r1, 8005f98 <_printf_i+0x40>)
 8005f94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f98:	08005ff1 	.word	0x08005ff1
 8005f9c:	08006005 	.word	0x08006005
 8005fa0:	08005f81 	.word	0x08005f81
 8005fa4:	08005f81 	.word	0x08005f81
 8005fa8:	08005f81 	.word	0x08005f81
 8005fac:	08005f81 	.word	0x08005f81
 8005fb0:	08006005 	.word	0x08006005
 8005fb4:	08005f81 	.word	0x08005f81
 8005fb8:	08005f81 	.word	0x08005f81
 8005fbc:	08005f81 	.word	0x08005f81
 8005fc0:	08005f81 	.word	0x08005f81
 8005fc4:	08006105 	.word	0x08006105
 8005fc8:	0800602f 	.word	0x0800602f
 8005fcc:	080060bf 	.word	0x080060bf
 8005fd0:	08005f81 	.word	0x08005f81
 8005fd4:	08005f81 	.word	0x08005f81
 8005fd8:	08006127 	.word	0x08006127
 8005fdc:	08005f81 	.word	0x08005f81
 8005fe0:	0800602f 	.word	0x0800602f
 8005fe4:	08005f81 	.word	0x08005f81
 8005fe8:	08005f81 	.word	0x08005f81
 8005fec:	080060c7 	.word	0x080060c7
 8005ff0:	6833      	ldr	r3, [r6, #0]
 8005ff2:	1d1a      	adds	r2, r3, #4
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6032      	str	r2, [r6, #0]
 8005ff8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ffc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006000:	2301      	movs	r3, #1
 8006002:	e09d      	b.n	8006140 <_printf_i+0x1e8>
 8006004:	6833      	ldr	r3, [r6, #0]
 8006006:	6820      	ldr	r0, [r4, #0]
 8006008:	1d19      	adds	r1, r3, #4
 800600a:	6031      	str	r1, [r6, #0]
 800600c:	0606      	lsls	r6, r0, #24
 800600e:	d501      	bpl.n	8006014 <_printf_i+0xbc>
 8006010:	681d      	ldr	r5, [r3, #0]
 8006012:	e003      	b.n	800601c <_printf_i+0xc4>
 8006014:	0645      	lsls	r5, r0, #25
 8006016:	d5fb      	bpl.n	8006010 <_printf_i+0xb8>
 8006018:	f9b3 5000 	ldrsh.w	r5, [r3]
 800601c:	2d00      	cmp	r5, #0
 800601e:	da03      	bge.n	8006028 <_printf_i+0xd0>
 8006020:	232d      	movs	r3, #45	@ 0x2d
 8006022:	426d      	negs	r5, r5
 8006024:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006028:	4859      	ldr	r0, [pc, #356]	@ (8006190 <_printf_i+0x238>)
 800602a:	230a      	movs	r3, #10
 800602c:	e011      	b.n	8006052 <_printf_i+0xfa>
 800602e:	6821      	ldr	r1, [r4, #0]
 8006030:	6833      	ldr	r3, [r6, #0]
 8006032:	0608      	lsls	r0, r1, #24
 8006034:	f853 5b04 	ldr.w	r5, [r3], #4
 8006038:	d402      	bmi.n	8006040 <_printf_i+0xe8>
 800603a:	0649      	lsls	r1, r1, #25
 800603c:	bf48      	it	mi
 800603e:	b2ad      	uxthmi	r5, r5
 8006040:	2f6f      	cmp	r7, #111	@ 0x6f
 8006042:	4853      	ldr	r0, [pc, #332]	@ (8006190 <_printf_i+0x238>)
 8006044:	6033      	str	r3, [r6, #0]
 8006046:	bf14      	ite	ne
 8006048:	230a      	movne	r3, #10
 800604a:	2308      	moveq	r3, #8
 800604c:	2100      	movs	r1, #0
 800604e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006052:	6866      	ldr	r6, [r4, #4]
 8006054:	60a6      	str	r6, [r4, #8]
 8006056:	2e00      	cmp	r6, #0
 8006058:	bfa2      	ittt	ge
 800605a:	6821      	ldrge	r1, [r4, #0]
 800605c:	f021 0104 	bicge.w	r1, r1, #4
 8006060:	6021      	strge	r1, [r4, #0]
 8006062:	b90d      	cbnz	r5, 8006068 <_printf_i+0x110>
 8006064:	2e00      	cmp	r6, #0
 8006066:	d04b      	beq.n	8006100 <_printf_i+0x1a8>
 8006068:	4616      	mov	r6, r2
 800606a:	fbb5 f1f3 	udiv	r1, r5, r3
 800606e:	fb03 5711 	mls	r7, r3, r1, r5
 8006072:	5dc7      	ldrb	r7, [r0, r7]
 8006074:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006078:	462f      	mov	r7, r5
 800607a:	42bb      	cmp	r3, r7
 800607c:	460d      	mov	r5, r1
 800607e:	d9f4      	bls.n	800606a <_printf_i+0x112>
 8006080:	2b08      	cmp	r3, #8
 8006082:	d10b      	bne.n	800609c <_printf_i+0x144>
 8006084:	6823      	ldr	r3, [r4, #0]
 8006086:	07df      	lsls	r7, r3, #31
 8006088:	d508      	bpl.n	800609c <_printf_i+0x144>
 800608a:	6923      	ldr	r3, [r4, #16]
 800608c:	6861      	ldr	r1, [r4, #4]
 800608e:	4299      	cmp	r1, r3
 8006090:	bfde      	ittt	le
 8006092:	2330      	movle	r3, #48	@ 0x30
 8006094:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006098:	f106 36ff 	addle.w	r6, r6, #4294967295
 800609c:	1b92      	subs	r2, r2, r6
 800609e:	6122      	str	r2, [r4, #16]
 80060a0:	f8cd a000 	str.w	sl, [sp]
 80060a4:	464b      	mov	r3, r9
 80060a6:	aa03      	add	r2, sp, #12
 80060a8:	4621      	mov	r1, r4
 80060aa:	4640      	mov	r0, r8
 80060ac:	f7ff fee6 	bl	8005e7c <_printf_common>
 80060b0:	3001      	adds	r0, #1
 80060b2:	d14a      	bne.n	800614a <_printf_i+0x1f2>
 80060b4:	f04f 30ff 	mov.w	r0, #4294967295
 80060b8:	b004      	add	sp, #16
 80060ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	f043 0320 	orr.w	r3, r3, #32
 80060c4:	6023      	str	r3, [r4, #0]
 80060c6:	4833      	ldr	r0, [pc, #204]	@ (8006194 <_printf_i+0x23c>)
 80060c8:	2778      	movs	r7, #120	@ 0x78
 80060ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	6831      	ldr	r1, [r6, #0]
 80060d2:	061f      	lsls	r7, r3, #24
 80060d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80060d8:	d402      	bmi.n	80060e0 <_printf_i+0x188>
 80060da:	065f      	lsls	r7, r3, #25
 80060dc:	bf48      	it	mi
 80060de:	b2ad      	uxthmi	r5, r5
 80060e0:	6031      	str	r1, [r6, #0]
 80060e2:	07d9      	lsls	r1, r3, #31
 80060e4:	bf44      	itt	mi
 80060e6:	f043 0320 	orrmi.w	r3, r3, #32
 80060ea:	6023      	strmi	r3, [r4, #0]
 80060ec:	b11d      	cbz	r5, 80060f6 <_printf_i+0x19e>
 80060ee:	2310      	movs	r3, #16
 80060f0:	e7ac      	b.n	800604c <_printf_i+0xf4>
 80060f2:	4827      	ldr	r0, [pc, #156]	@ (8006190 <_printf_i+0x238>)
 80060f4:	e7e9      	b.n	80060ca <_printf_i+0x172>
 80060f6:	6823      	ldr	r3, [r4, #0]
 80060f8:	f023 0320 	bic.w	r3, r3, #32
 80060fc:	6023      	str	r3, [r4, #0]
 80060fe:	e7f6      	b.n	80060ee <_printf_i+0x196>
 8006100:	4616      	mov	r6, r2
 8006102:	e7bd      	b.n	8006080 <_printf_i+0x128>
 8006104:	6833      	ldr	r3, [r6, #0]
 8006106:	6825      	ldr	r5, [r4, #0]
 8006108:	6961      	ldr	r1, [r4, #20]
 800610a:	1d18      	adds	r0, r3, #4
 800610c:	6030      	str	r0, [r6, #0]
 800610e:	062e      	lsls	r6, r5, #24
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	d501      	bpl.n	8006118 <_printf_i+0x1c0>
 8006114:	6019      	str	r1, [r3, #0]
 8006116:	e002      	b.n	800611e <_printf_i+0x1c6>
 8006118:	0668      	lsls	r0, r5, #25
 800611a:	d5fb      	bpl.n	8006114 <_printf_i+0x1bc>
 800611c:	8019      	strh	r1, [r3, #0]
 800611e:	2300      	movs	r3, #0
 8006120:	6123      	str	r3, [r4, #16]
 8006122:	4616      	mov	r6, r2
 8006124:	e7bc      	b.n	80060a0 <_printf_i+0x148>
 8006126:	6833      	ldr	r3, [r6, #0]
 8006128:	1d1a      	adds	r2, r3, #4
 800612a:	6032      	str	r2, [r6, #0]
 800612c:	681e      	ldr	r6, [r3, #0]
 800612e:	6862      	ldr	r2, [r4, #4]
 8006130:	2100      	movs	r1, #0
 8006132:	4630      	mov	r0, r6
 8006134:	f7fa f86c 	bl	8000210 <memchr>
 8006138:	b108      	cbz	r0, 800613e <_printf_i+0x1e6>
 800613a:	1b80      	subs	r0, r0, r6
 800613c:	6060      	str	r0, [r4, #4]
 800613e:	6863      	ldr	r3, [r4, #4]
 8006140:	6123      	str	r3, [r4, #16]
 8006142:	2300      	movs	r3, #0
 8006144:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006148:	e7aa      	b.n	80060a0 <_printf_i+0x148>
 800614a:	6923      	ldr	r3, [r4, #16]
 800614c:	4632      	mov	r2, r6
 800614e:	4649      	mov	r1, r9
 8006150:	4640      	mov	r0, r8
 8006152:	47d0      	blx	sl
 8006154:	3001      	adds	r0, #1
 8006156:	d0ad      	beq.n	80060b4 <_printf_i+0x15c>
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	079b      	lsls	r3, r3, #30
 800615c:	d413      	bmi.n	8006186 <_printf_i+0x22e>
 800615e:	68e0      	ldr	r0, [r4, #12]
 8006160:	9b03      	ldr	r3, [sp, #12]
 8006162:	4298      	cmp	r0, r3
 8006164:	bfb8      	it	lt
 8006166:	4618      	movlt	r0, r3
 8006168:	e7a6      	b.n	80060b8 <_printf_i+0x160>
 800616a:	2301      	movs	r3, #1
 800616c:	4632      	mov	r2, r6
 800616e:	4649      	mov	r1, r9
 8006170:	4640      	mov	r0, r8
 8006172:	47d0      	blx	sl
 8006174:	3001      	adds	r0, #1
 8006176:	d09d      	beq.n	80060b4 <_printf_i+0x15c>
 8006178:	3501      	adds	r5, #1
 800617a:	68e3      	ldr	r3, [r4, #12]
 800617c:	9903      	ldr	r1, [sp, #12]
 800617e:	1a5b      	subs	r3, r3, r1
 8006180:	42ab      	cmp	r3, r5
 8006182:	dcf2      	bgt.n	800616a <_printf_i+0x212>
 8006184:	e7eb      	b.n	800615e <_printf_i+0x206>
 8006186:	2500      	movs	r5, #0
 8006188:	f104 0619 	add.w	r6, r4, #25
 800618c:	e7f5      	b.n	800617a <_printf_i+0x222>
 800618e:	bf00      	nop
 8006190:	08006371 	.word	0x08006371
 8006194:	08006382 	.word	0x08006382

08006198 <memmove>:
 8006198:	4288      	cmp	r0, r1
 800619a:	b510      	push	{r4, lr}
 800619c:	eb01 0402 	add.w	r4, r1, r2
 80061a0:	d902      	bls.n	80061a8 <memmove+0x10>
 80061a2:	4284      	cmp	r4, r0
 80061a4:	4623      	mov	r3, r4
 80061a6:	d807      	bhi.n	80061b8 <memmove+0x20>
 80061a8:	1e43      	subs	r3, r0, #1
 80061aa:	42a1      	cmp	r1, r4
 80061ac:	d008      	beq.n	80061c0 <memmove+0x28>
 80061ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061b6:	e7f8      	b.n	80061aa <memmove+0x12>
 80061b8:	4402      	add	r2, r0
 80061ba:	4601      	mov	r1, r0
 80061bc:	428a      	cmp	r2, r1
 80061be:	d100      	bne.n	80061c2 <memmove+0x2a>
 80061c0:	bd10      	pop	{r4, pc}
 80061c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061ca:	e7f7      	b.n	80061bc <memmove+0x24>

080061cc <_sbrk_r>:
 80061cc:	b538      	push	{r3, r4, r5, lr}
 80061ce:	4d06      	ldr	r5, [pc, #24]	@ (80061e8 <_sbrk_r+0x1c>)
 80061d0:	2300      	movs	r3, #0
 80061d2:	4604      	mov	r4, r0
 80061d4:	4608      	mov	r0, r1
 80061d6:	602b      	str	r3, [r5, #0]
 80061d8:	f7fc fd9a 	bl	8002d10 <_sbrk>
 80061dc:	1c43      	adds	r3, r0, #1
 80061de:	d102      	bne.n	80061e6 <_sbrk_r+0x1a>
 80061e0:	682b      	ldr	r3, [r5, #0]
 80061e2:	b103      	cbz	r3, 80061e6 <_sbrk_r+0x1a>
 80061e4:	6023      	str	r3, [r4, #0]
 80061e6:	bd38      	pop	{r3, r4, r5, pc}
 80061e8:	20000374 	.word	0x20000374

080061ec <_realloc_r>:
 80061ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061f0:	4680      	mov	r8, r0
 80061f2:	4615      	mov	r5, r2
 80061f4:	460c      	mov	r4, r1
 80061f6:	b921      	cbnz	r1, 8006202 <_realloc_r+0x16>
 80061f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061fc:	4611      	mov	r1, r2
 80061fe:	f7ff bc59 	b.w	8005ab4 <_malloc_r>
 8006202:	b92a      	cbnz	r2, 8006210 <_realloc_r+0x24>
 8006204:	f7ff fbea 	bl	80059dc <_free_r>
 8006208:	2400      	movs	r4, #0
 800620a:	4620      	mov	r0, r4
 800620c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006210:	f000 f81a 	bl	8006248 <_malloc_usable_size_r>
 8006214:	4285      	cmp	r5, r0
 8006216:	4606      	mov	r6, r0
 8006218:	d802      	bhi.n	8006220 <_realloc_r+0x34>
 800621a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800621e:	d8f4      	bhi.n	800620a <_realloc_r+0x1e>
 8006220:	4629      	mov	r1, r5
 8006222:	4640      	mov	r0, r8
 8006224:	f7ff fc46 	bl	8005ab4 <_malloc_r>
 8006228:	4607      	mov	r7, r0
 800622a:	2800      	cmp	r0, #0
 800622c:	d0ec      	beq.n	8006208 <_realloc_r+0x1c>
 800622e:	42b5      	cmp	r5, r6
 8006230:	462a      	mov	r2, r5
 8006232:	4621      	mov	r1, r4
 8006234:	bf28      	it	cs
 8006236:	4632      	movcs	r2, r6
 8006238:	f7ff fbc2 	bl	80059c0 <memcpy>
 800623c:	4621      	mov	r1, r4
 800623e:	4640      	mov	r0, r8
 8006240:	f7ff fbcc 	bl	80059dc <_free_r>
 8006244:	463c      	mov	r4, r7
 8006246:	e7e0      	b.n	800620a <_realloc_r+0x1e>

08006248 <_malloc_usable_size_r>:
 8006248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800624c:	1f18      	subs	r0, r3, #4
 800624e:	2b00      	cmp	r3, #0
 8006250:	bfbc      	itt	lt
 8006252:	580b      	ldrlt	r3, [r1, r0]
 8006254:	18c0      	addlt	r0, r0, r3
 8006256:	4770      	bx	lr

08006258 <_init>:
 8006258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625a:	bf00      	nop
 800625c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800625e:	bc08      	pop	{r3}
 8006260:	469e      	mov	lr, r3
 8006262:	4770      	bx	lr

08006264 <_fini>:
 8006264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006266:	bf00      	nop
 8006268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800626a:	bc08      	pop	{r3}
 800626c:	469e      	mov	lr, r3
 800626e:	4770      	bx	lr
